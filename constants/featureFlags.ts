/**
 * üõ°Ô∏è ObsessLess Feature Flag System - FAZ 0: G√ºvenlik ve Stabilite Hazƒ±rlƒ±ƒüƒ±
 * 
 * Bu sistem "Kapsamlƒ± Yol Haritasƒ±" belgesindeki G√∂rev 0.0.1 gereksinimlerine uygun olarak
 * tasarlanmƒ±≈ütƒ±r. T√ºm AI √∂zellikleri tek bir master switch ile kontrol edilir.
 * 
 * KRƒ∞Tƒ∞K: Bu dosyadaki deƒüi≈üiklikler prod√ºksiyonu etkileyebilir!
 */

// üéØ MASTER AI SWITCH - Tek bir toggle ile t√ºm AI √∂zellikleri kontrol edilir
const AI_MASTER_ENABLED = __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI === 'true';

// Feature flag deƒüerlerini runtime'da deƒüi≈ütirmek i√ßin mutable obje
const featureFlagState: Record<string, boolean> = {
  // üéØ MASTER AI SWITCH
  AI_ENABLED: AI_MASTER_ENABLED,
  
  // ü§ñ T√ºm AI Features - Master switch'e baƒülƒ±
  AI_CHAT: AI_MASTER_ENABLED,
  AI_ONBOARDING: AI_MASTER_ENABLED,
  AI_INSIGHTS: AI_MASTER_ENABLED,
  AI_VOICE: AI_MASTER_ENABLED,
  AI_CBT_ENGINE: AI_MASTER_ENABLED,
  AI_EXTERNAL_API: AI_MASTER_ENABLED,
  AI_THERAPEUTIC_PROMPTS: AI_MASTER_ENABLED,
  AI_REAL_RESPONSES: AI_MASTER_ENABLED,
  AI_INSIGHTS_ENGINE_V2: AI_MASTER_ENABLED,
  AI_PATTERN_RECOGNITION_V2: AI_MASTER_ENABLED,
  AI_SMART_NOTIFICATIONS: AI_MASTER_ENABLED,
  AI_PROGRESS_ANALYTICS: AI_MASTER_ENABLED,
  AI_ADAPTIVE_INTERVENTIONS: AI_MASTER_ENABLED,
  AI_CONTEXT_INTELLIGENCE: AI_MASTER_ENABLED,
  AI_JITAI_SYSTEM: AI_MASTER_ENABLED,
  AI_ADVANCED_PERSONALIZATION: AI_MASTER_ENABLED,
  AI_MODEL_OPTIMIZATION: AI_MASTER_ENABLED,
  AI_PERFORMANCE_MONITORING: AI_MASTER_ENABLED,
  AI_ADVANCED_ANALYTICS: AI_MASTER_ENABLED,
  AI_DASHBOARD: AI_MASTER_ENABLED,
  AI_ONBOARDING_V2: AI_MASTER_ENABLED,
  AI_YBOCS_ANALYSIS: AI_MASTER_ENABLED,
  AI_USER_PROFILING: AI_MASTER_ENABLED,
  AI_TREATMENT_PLANNING: AI_MASTER_ENABLED,
  AI_RISK_ASSESSMENT: AI_MASTER_ENABLED,
  AI_ONBOARDING_UI: AI_MASTER_ENABLED,
  AI_ONBOARDING_CONTEXT_INTEGRATION: AI_MASTER_ENABLED,
  AI_ONBOARDING_INTERVENTIONS_INTEGRATION: AI_MASTER_ENABLED,
  AI_ART_THERAPY: AI_MASTER_ENABLED,
  AI_VOICE_ERP: AI_MASTER_ENABLED,
  AI_PREDICTIVE_INTERVENTION: AI_MASTER_ENABLED,
  AI_CRISIS_DETECTION: AI_MASTER_ENABLED,
  
  // üîß Development Features
  DEBUG_MODE: __DEV__,
  MOCK_API_RESPONSES: __DEV__ && process.env.EXPO_PUBLIC_MOCK_API === 'true',
  
  // üìä Telemetry Features
  AI_TELEMETRY: AI_MASTER_ENABLED, // Master switch ile kontrol edilir
  PERFORMANCE_MONITORING: true,
  ERROR_REPORTING: true,
  
  // üö® Safety Features (Always Enabled)
  SAFETY_CHECKS: true,
  CONTENT_FILTERING: true,
  RATE_LIMITING: true,
};

// Feature flag logging i√ßin
const featureUsageLog: Record<string, number> = {};

export const FEATURE_FLAGS = {
  ...featureFlagState,
  
  /**
   * üîç Feature durumunu kontrol eder
   * Kullanƒ±m loglamasƒ± ve runtime kontrolleri i√ßerir
   */
  isEnabled: (feature: keyof typeof featureFlagState): boolean => {
    // Kullanƒ±m sayacƒ±
    featureUsageLog[feature] = (featureUsageLog[feature] || 0) + 1;
    
    // Geli≈ütirme modunda log
    if (__DEV__) {
      console.log(`üè≥Ô∏è Feature Flag Check: ${feature} = ${featureFlagState[feature]}`);
    }
    
    // Master AI switch kontrol√º
    if (feature.startsWith('AI_') && feature !== 'AI_ENABLED' && !featureFlagState.AI_ENABLED) {
      return false;
    }
    
    // Additional runtime checks
    if (feature.startsWith('AI_') && !featureFlagState.SAFETY_CHECKS) {
      console.warn('‚ö†Ô∏è AI features disabled: Safety checks are off');
      return false;
    }
    
    // Remote kill switch capability (gelecekte API'den kontrol edilebilir)
    if (typeof (global as any).__OBSESSLESS_KILL_SWITCH !== 'undefined') {
      console.warn('üö® Emergency kill switch activated');
      return false;
    }
    
    return featureFlagState[feature] || false;
  },
  
  /**
   * üö® Acil durum fonksiyonu - T√ºm AI √∂zelliklerini kapatƒ±r
   */
  disableAll: (): void => {
    console.warn('üö® EMERGENCY: Disabling all AI features');
    
    Object.keys(featureFlagState).forEach(key => {
      if (key.startsWith('AI_')) {
        featureFlagState[key] = false;
      }
    });
    
    // Global kill switch aktive et
    (global as any).__OBSESSLESS_KILL_SWITCH = true;
    
    // Telemetri g√∂nder
    if (featureFlagState.AI_TELEMETRY) {
      // TODO: Send emergency shutdown telemetry
      console.log('üìä Emergency shutdown telemetry sent');
    }
  },
  
  /**
   * üîß Runtime'da feature flag deƒüi≈ütirme (sadece development)
   * Master AI switch deƒüi≈ütirildiƒüinde t√ºm AI √∂zellikleri etkilenir
   */
  setFlag: (feature: keyof typeof featureFlagState, value: boolean): void => {
    if (!__DEV__) {
      console.warn('‚ö†Ô∏è Feature flag changes only allowed in development');
      return;
    }
    
    console.log(`üîß Changing feature flag: ${feature} = ${value}`);
    
    // Master AI switch deƒüi≈ütiriliyorsa t√ºm AI √∂zelliklerini g√ºncelle
    if (feature === 'AI_ENABLED') {
      Object.keys(featureFlagState).forEach(key => {
        if (key.startsWith('AI_')) {
          featureFlagState[key] = value;
        }
      });
    } else {
      featureFlagState[feature] = value;
    }
  },
  
  /**
   * üìä Feature kullanƒ±m istatistikleri
   */
  getUsageStats: (): Record<string, number> => {
    return { ...featureUsageLog };
  },
  
  /**
   * üîÑ T√ºm AI √∂zelliklerini yeniden aktifle≈ütir (development only)
   */
  reactivateAll: (): void => {
    if (!__DEV__) {
      console.warn('‚ö†Ô∏è Feature reactivation only allowed in development');
      return;
    }
    
    console.log('üîÑ Reactivating all AI features');
    delete (global as any).__OBSESSLESS_KILL_SWITCH;
    
    // Master switch'i aktifle≈ütir
    const masterEnabled = process.env.EXPO_PUBLIC_ENABLE_AI === 'true';
    Object.keys(featureFlagState).forEach(key => {
      if (key.startsWith('AI_')) {
        featureFlagState[key] = masterEnabled;
      }
    });
  }
} as const;

// AI Configuration - Yol Haritasƒ± Uyumlu
export const AI_CONFIG = {
  // Default provider - environment'tan override edilebilir
  DEFAULT_PROVIDER: (process.env.EXPO_PUBLIC_AI_PROVIDER as 'openai' | 'gemini' | 'claude') || 'gemini',
  
  // Provider priorities (fallback order)
  PROVIDER_PRIORITY: ['gemini', 'openai', 'claude'] as const,
  
  // Feature-specific AI requirements
  CHAT_REQUIRES_EXTERNAL_AI: true,
  INSIGHTS_USES_LOCAL_AI: true,
  VOICE_USES_HYBRID_AI: true,
  
  // Safety configurations
  MAX_TOKENS: 4000,
  TEMPERATURE_LIMIT: 0.8,
  SAFETY_THRESHOLD: 0.9,
  
  // Rate limiting
  MAX_REQUESTS_PER_MINUTE: 60,
  MAX_REQUESTS_PER_HOUR: 1000,
} as const;
