/**
 * üõ°Ô∏è ObsessLess Feature Flag System - FAZ 0: G√ºvenlik ve Stabilite Hazƒ±rlƒ±ƒüƒ±
 * 
 * Bu sistem "Kapsamlƒ± Yol Haritasƒ±" belgesindeki G√∂rev 0.0.1 gereksinimlerine uygun olarak
 * tasarlanmƒ±≈ütƒ±r. T√ºm AI √∂zellikleri varsayƒ±lan olarak KAPALI'dƒ±r ve sadece explicit
 * environment variable'lar ile a√ßƒ±labilir.
 * 
 * KRƒ∞Tƒ∞K: Bu dosyadaki deƒüi≈üiklikler prod√ºksiyonu etkileyebilir!
 */

// Feature flag deƒüerlerini runtime'da deƒüi≈ütirmek i√ßin mutable obje
const featureFlagState: Record<string, boolean> = {
  // ü§ñ AI Features - DEFAULT OFF (Yol Haritasƒ± Gereƒüi)
  AI_CHAT: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_CHAT === 'true',
  AI_ONBOARDING: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_ONBOARDING === 'true',
  AI_INSIGHTS: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_INSIGHTS === 'true',
  AI_VOICE: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_VOICE === 'true',
  
  // üöÄ SPRINT 4: CBT Engine & External AI API (COMPLETED)
  AI_CBT_ENGINE: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_CBT === 'true',
  AI_EXTERNAL_API: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_API === 'true',
  AI_THERAPEUTIC_PROMPTS: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_PROMPTS === 'true',
  AI_REAL_RESPONSES: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_REAL === 'true',
  
  // üîÑ SPRINT 5: Intelligent Insights Engine Recreation
  AI_INSIGHTS_ENGINE_V2: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_INSIGHTS_V2 === 'true',
  AI_PATTERN_RECOGNITION_V2: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_PATTERNS_V2 === 'true',
  AI_SMART_NOTIFICATIONS: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_NOTIFICATIONS === 'true',
  AI_PROGRESS_ANALYTICS: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_ANALYTICS === 'true',
  
  // üß™ Experimental AI Features
  AI_ART_THERAPY: false,
  AI_VOICE_ERP: false,
  AI_CONTEXT_INTELLIGENCE: false,
  AI_PREDICTIVE_INTERVENTION: false,
  AI_CRISIS_DETECTION: __DEV__ && process.env.EXPO_PUBLIC_ENABLE_AI_CRISIS === 'true',
  
  // üîß Development Features
  DEBUG_MODE: __DEV__,
  MOCK_API_RESPONSES: __DEV__ && process.env.EXPO_PUBLIC_MOCK_API === 'true',
  
  // üìä Telemetry Features
  AI_TELEMETRY: process.env.EXPO_PUBLIC_ENABLE_AI_TELEMETRY === 'true',
  PERFORMANCE_MONITORING: true,
  ERROR_REPORTING: true,
  
  // üö® Safety Features (Always Enabled)
  SAFETY_CHECKS: true,
  CONTENT_FILTERING: true,
  RATE_LIMITING: true,
};

// Feature flag logging i√ßin
const featureUsageLog: Record<string, number> = {};

export const FEATURE_FLAGS = {
  ...featureFlagState,
  
  /**
   * üîç Feature durumunu kontrol eder
   * Kullanƒ±m loglamasƒ± ve runtime kontrolleri i√ßerir
   */
  isEnabled: (feature: keyof typeof featureFlagState): boolean => {
    // Kullanƒ±m sayacƒ±
    featureUsageLog[feature] = (featureUsageLog[feature] || 0) + 1;
    
    // Geli≈ütirme modunda log
    if (__DEV__) {
      console.log(`üè≥Ô∏è Feature Flag Check: ${feature} = ${featureFlagState[feature]}`);
    }
    
    // Additional runtime checks
    if (feature.startsWith('AI_') && !featureFlagState.SAFETY_CHECKS) {
      console.warn('‚ö†Ô∏è AI features disabled: Safety checks are off');
      return false;
    }
    
    // Remote kill switch capability (gelecekte API'den kontrol edilebilir)
    if (typeof (global as any).__OBSESSLESS_KILL_SWITCH !== 'undefined') {
      console.warn('üö® Emergency kill switch activated');
      return false;
    }
    
    return featureFlagState[feature] || false;
  },
  
  /**
   * üö® Acil durum fonksiyonu - T√ºm AI √∂zelliklerini kapatƒ±r
   */
  disableAll: (): void => {
    console.warn('üö® EMERGENCY: Disabling all AI features');
    
    Object.keys(featureFlagState).forEach(key => {
      if (key.startsWith('AI_')) {
        featureFlagState[key] = false;
      }
    });
    
    // Global kill switch aktive et
    (global as any).__OBSESSLESS_KILL_SWITCH = true;
    
    // Telemetri g√∂nder
    if (featureFlagState.AI_TELEMETRY) {
      // TODO: Send emergency shutdown telemetry
      console.log('üìä Emergency shutdown telemetry sent');
    }
  },
  
  /**
   * üîß Runtime'da feature flag deƒüi≈ütirme (sadece development)
   */
  setFlag: (feature: keyof typeof featureFlagState, value: boolean): void => {
    if (!__DEV__) {
      console.warn('‚ö†Ô∏è Feature flag changes only allowed in development');
      return;
    }
    
    console.log(`üîß Changing feature flag: ${feature} = ${value}`);
    featureFlagState[feature] = value;
  },
  
  /**
   * üìä Feature kullanƒ±m istatistikleri
   */
  getUsageStats: (): Record<string, number> => {
    return { ...featureUsageLog };
  },
  
  /**
   * üîÑ T√ºm AI √∂zelliklerini yeniden aktifle≈ütir (development only)
   */
  reactivateAll: (): void => {
    if (!__DEV__) {
      console.warn('‚ö†Ô∏è Feature reactivation only allowed in development');
      return;
    }
    
    console.log('üîÑ Reactivating all AI features');
    delete (global as any).__OBSESSLESS_KILL_SWITCH;
    
    // Environment variable'larƒ± yeniden kontrol et
    Object.keys(featureFlagState).forEach(key => {
      if (key.startsWith('AI_')) {
        const envVar = `EXPO_PUBLIC_ENABLE_${key}`;
        featureFlagState[key] = process.env[envVar] === 'true';
      }
    });
  }
} as const;

// AI Configuration - Yol Haritasƒ± Uyumlu
export const AI_CONFIG = {
  // Default provider - environment'tan override edilebilir
  DEFAULT_PROVIDER: (process.env.EXPO_PUBLIC_AI_PROVIDER as 'openai' | 'gemini' | 'claude') || 'openai',
  
  // Provider priorities (fallback order)
  PROVIDER_PRIORITY: ['openai', 'claude', 'gemini'] as const,
  
  // Feature-specific AI requirements
  CHAT_REQUIRES_EXTERNAL_AI: true,
  INSIGHTS_USES_LOCAL_AI: true,
  VOICE_USES_HYBRID_AI: true,
  
  // Safety configurations
  MAX_TOKENS: 4000,
  TEMPERATURE_LIMIT: 0.8,
  SAFETY_THRESHOLD: 0.9,
  
  // Rate limiting
  MAX_REQUESTS_PER_MINUTE: 60,
  MAX_REQUESTS_PER_HOUR: 1000,
} as const; 