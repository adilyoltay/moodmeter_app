14657f97d57499794eec0094a72cf339
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    InteractionManager: {
      runAfterInteractions: function runAfterInteractions(cb) {
        if (typeof cb === 'function') cb();
        return {
          cancel: function cancel() {}
        };
      }
    }
  });
});
_getJestObj().mock("../../services/supabase", function () {
  var _require = require("./utils/supabaseTestClient"),
    createSupabaseTestClient = _require.createSupabaseTestClient;
  var client = createSupabaseTestClient();
  return {
    __esModule: true,
    default: {
      supabaseClient: client
    },
    supabaseClient: client
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require2 = require("../../features/ai/core/UnifiedAIPipeline"),
  unifiedPipeline = _require2.unifiedPipeline;
var _require3 = require("./utils/supabaseTestClient"),
  createSupabaseTestClient = _require3.createSupabaseTestClient;
var userId = process.env.TEST_SEED_USER_ID || 'test-user-live-1';
var supabase = createSupabaseTestClient();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Telemetry Supabase', function () {
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:telemetry:started] and [QRlive:telemetry:completed] are recorded', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 6
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 900e3,
        mood_score: 6
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var _yield$supabase$from$ = yield supabase.from('ai_telemetry').select('event_type').eq('user_id', userId),
      data = _yield$supabase$from$.data,
      error = _yield$supabase$from$.error;
    expect(error).toBeNull();
    var events = (data || []).map(function (r) {
      return String(r.event_type);
    });
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_started');
    })).toBe(true);
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_completed');
    })).toBe(true);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiSW50ZXJhY3Rpb25NYW5hZ2VyIiwicnVuQWZ0ZXJJbnRlcmFjdGlvbnMiLCJjYiIsImNhbmNlbCIsIl9yZXF1aXJlIiwicmVxdWlyZSIsImNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCIsImNsaWVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwic3VwYWJhc2VDbGllbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlcXVpcmU0IiwiX3JlcXVpcmUyIiwidW5pZmllZFBpcGVsaW5lIiwiX3JlcXVpcmUzIiwidXNlcklkIiwicHJvY2VzcyIsImVudiIsIlRFU1RfU0VFRF9VU0VSX0lEIiwic3VwYWJhc2UiLCJjbGVhbnVwIiwiX2NsZWFudXAiLCJhcHBseSIsImFyZ3VtZW50cyIsImZyb20iLCJkZWxldGUiLCJlcSIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiVEVTVF9NT0RFIiwiVEVTVF9UVExfTVMiLCJURVNUX1BJUEVMSU5FX1NUVUIiLCJFWFBPX1BVQkxJQ19FTkFCTEVfQUkiLCJhZnRlckFsbCIsIml0IiwibW9vZHMiLCJBcnJheSIsImxlbmd0aCIsIl8iLCJpIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIm1vb2Rfc2NvcmUiLCJ0eXBlIiwiY29udGVudCIsImNvbnRleHQiLCJzb3VyY2UiLCJfeWllbGQkc3VwYWJhc2UkZnJvbSQiLCJzZWxlY3QiLCJkYXRhIiwiZXJyb3IiLCJleHBlY3QiLCJ0b0JlTnVsbCIsImV2ZW50cyIsIm1hcCIsInIiLCJTdHJpbmciLCJldmVudF90eXBlIiwic29tZSIsImUiLCJpbmNsdWRlcyIsInRvQmUiXSwic291cmNlcyI6WyJMaXZlVGVsZW1ldHJ5U3VwYWJhc2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpdmUgU3VwYWJhc2UgVGVzdHMg4oCUIFRlbGVtZXRyeSAoUVJsaXZlKVxuICogVGFnczogW1FSbGl2ZTp0ZWxlbWV0cnk6c3RhcnRlZF0gW1FSbGl2ZTp0ZWxlbWV0cnk6Y29tcGxldGVkXVxuICovXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xuICByZXR1cm4ge1xuICAgIC4uLlJOLFxuICAgIEludGVyYWN0aW9uTWFuYWdlcjoge1xuICAgICAgcnVuQWZ0ZXJJbnRlcmFjdGlvbnM6IChjYjogYW55KSA9PiB7IGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIGNiKCk7IHJldHVybiB7IGNhbmNlbDogKCkgPT4ge30gfTsgfSxcbiAgICB9LFxuICB9O1xufSk7XG5cbmplc3QubW9jaygnQC9zZXJ2aWNlcy9zdXBhYmFzZScsICgpID0+IHtcbiAgY29uc3QgeyBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQgfSA9IHJlcXVpcmUoJy4vdXRpbHMvc3VwYWJhc2VUZXN0Q2xpZW50Jyk7XG4gIGNvbnN0IGNsaWVudCA9IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCgpO1xuICByZXR1cm4ge1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgZGVmYXVsdDogeyBzdXBhYmFzZUNsaWVudDogY2xpZW50IH0sXG4gICAgc3VwYWJhc2VDbGllbnQ6IGNsaWVudCxcbiAgfTtcbn0pO1xuXG5jb25zdCB7IHVuaWZpZWRQaXBlbGluZSB9ID0gcmVxdWlyZSgnQC9mZWF0dXJlcy9haS9jb3JlL1VuaWZpZWRBSVBpcGVsaW5lJyk7XG5jb25zdCB7IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCB9ID0gcmVxdWlyZSgnLi91dGlscy9zdXBhYmFzZVRlc3RDbGllbnQnKTtcblxuY29uc3QgdXNlcklkID0gcHJvY2Vzcy5lbnYuVEVTVF9TRUVEX1VTRVJfSUQgfHwgJ3Rlc3QtdXNlci1saXZlLTEnO1xuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQoKTtcblxuYXN5bmMgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgYXdhaXQgc3VwYWJhc2UuZnJvbSgnYWlfdGVsZW1ldHJ5JykuZGVsZXRlKCkuZXEoJ3VzZXJfaWQnLCB1c2VySWQpO1xufVxuXG5kZXNjcmliZSgnTGl2ZSBUZWxlbWV0cnkgU3VwYWJhc2UnLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9NT0RFID0gJzEnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfVFRMX01TID0gJzUwMDAnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfUElQRUxJTkVfU1RVQiA9ICcwJztcbiAgICBwcm9jZXNzLmVudi5FWFBPX1BVQkxJQ19FTkFCTEVfQUkgPSAndHJ1ZSc7XG4gICAgYXdhaXQgY2xlYW51cCgpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgY2xlYW51cCgpO1xuICB9KTtcblxuICBpdCgnW1FSbGl2ZTp0ZWxlbWV0cnk6c3RhcnRlZF0gYW5kIFtRUmxpdmU6dGVsZW1ldHJ5OmNvbXBsZXRlZF0gYXJlIHJlY29yZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vb2RzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogNiB9LCAoXywgaSkgPT4gKHsgdGltZXN0YW1wOiBEYXRlLm5vdygpIC0gaSAqIDkwMGUzLCBtb29kX3Njb3JlOiA2IH0pKTtcbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcblxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnYWlfdGVsZW1ldHJ5JylcbiAgICAgIC5zZWxlY3QoJ2V2ZW50X3R5cGUnKVxuICAgICAgLmVxKCd1c2VyX2lkJywgdXNlcklkKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmVOdWxsKCk7XG4gICAgY29uc3QgZXZlbnRzID0gKGRhdGEgfHwgW10pLm1hcChyID0+IFN0cmluZyhyLmV2ZW50X3R5cGUpKTtcbiAgICBleHBlY3QoZXZlbnRzLnNvbWUoZSA9PiBlLmluY2x1ZGVzKCd1bmlmaWVkX3BpcGVsaW5lX3N0YXJ0ZWQnKSkpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGV2ZW50cy5zb21lKGUgPT4gZS5pbmNsdWRlcygndW5pZmllZF9waXBlbGluZV9jb21wbGV0ZWQnKSkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xufSk7XG5cblxuIl0sIm1hcHBpbmdzIjoiQUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDN0MsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tKLEVBQUU7SUFDTEssa0JBQWtCLEVBQUU7TUFDbEJDLG9CQUFvQixFQUFFLFNBQXRCQSxvQkFBb0JBLENBQUdDLEVBQU8sRUFBSztRQUFFLElBQUksT0FBT0EsRUFBRSxLQUFLLFVBQVUsRUFBRUEsRUFBRSxDQUFDLENBQUM7UUFBRSxPQUFPO1VBQUVDLE1BQU0sRUFBRSxTQUFSQSxNQUFNQSxDQUFBLEVBQVEsQ0FBQztRQUFFLENBQUM7TUFBRTtJQUN4RztFQUFDO0FBRUwsQ0FBQyxDQUFDO0FBRUZWLFdBQUEsR0FBS0MsSUFBSSw0QkFBd0IsWUFBTTtFQUNyQyxJQUFBVSxRQUFBLEdBQXFDQyxPQUFPLDZCQUE2QixDQUFDO0lBQWxFQyx3QkFBd0IsR0FBQUYsUUFBQSxDQUF4QkUsd0JBQXdCO0VBQ2hDLElBQU1DLE1BQU0sR0FBR0Qsd0JBQXdCLENBQUMsQ0FBQztFQUN6QyxPQUFPO0lBQ0xFLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUU7TUFBRUMsY0FBYyxFQUFFSDtJQUFPLENBQUM7SUFDbkNHLGNBQWMs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