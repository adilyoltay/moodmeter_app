7dd36c479ef2dc5108c80fc0a63d8464
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LogBoxNotification;
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var LogBoxData = _interopRequireWildcard(require("../Data/LogBoxData"));
var _LogBoxLog = _interopRequireDefault(require("../Data/LogBoxLog"));
var _LogBoxButton = _interopRequireDefault(require("./LogBoxButton"));
var _LogBoxNotificationCountBadge = _interopRequireDefault(require("./LogBoxNotificationCountBadge"));
var _LogBoxNotificationDismissButton = _interopRequireDefault(require("./LogBoxNotificationDismissButton"));
var _LogBoxNotificationMessage = _interopRequireDefault(require("./LogBoxNotificationMessage"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function LogBoxNotification(props) {
  var totalLogCount = props.totalLogCount,
    level = props.level,
    log = props.log;
  (0, _react.useEffect)(function () {
    LogBoxData.symbolicateLogLazy(log);
  }, [log]);
  return (0, _jsxRuntime.jsx)(_View.default, {
    id: "logbox_notification",
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_LogBoxButton.default, {
      id: `logbox_open_button_${level}`,
      onPress: props.onPressOpen,
      style: styles.press,
      backgroundColor: {
        default: LogBoxStyle.getBackgroundColor(1),
        pressed: LogBoxStyle.getBackgroundColor(0.9)
      },
      children: (0, _jsxRuntime.jsxs)(_View.default, {
        style: styles.content,
        children: [(0, _jsxRuntime.jsx)(_LogBoxNotificationCountBadge.default, {
          count: totalLogCount,
          level: level
        }), (0, _jsxRuntime.jsx)(_LogBoxNotificationMessage.default, {
          message: log.message
        }), (0, _jsxRuntime.jsx)(_LogBoxNotificationDismissButton.default, {
          id: `logbox_dismiss_button_${level}`,
          onPress: props.onPressDismiss
        })]
      })
    })
  });
}
var styles = _StyleSheet.default.create({
  container: {
    height: 48,
    position: 'relative',
    width: '100%',
    justifyContent: 'center',
    marginTop: 0.5,
    backgroundColor: LogBoxStyle.getTextColor(1)
  },
  press: {
    height: 48,
    position: 'relative',
    width: '100%',
    justifyContent: 'center',
    marginTop: 0.5,
    paddingHorizontal: 12
  },
  content: {
    alignItems: 'flex-start',
    flexDirection: 'row',
    borderRadius: 8,
    flexGrow: 0,
    flexShrink: 0,
    flexBasis: 'auto'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,