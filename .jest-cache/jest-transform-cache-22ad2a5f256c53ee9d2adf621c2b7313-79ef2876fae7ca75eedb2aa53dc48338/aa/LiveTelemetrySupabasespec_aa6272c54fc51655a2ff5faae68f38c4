6e45240fb71445492c38cd28a95920ab
_getJestObj().mock("../../services/supabase", function () {
  var _require = require("./utils/supabaseTestClient"),
    createSupabaseTestClient = _require.createSupabaseTestClient;
  var client = createSupabaseTestClient();
  return {
    __esModule: true,
    default: {
      supabaseClient: client
    },
    supabaseClient: client
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require2 = require("../../features/ai/core/UnifiedAIPipeline"),
  unifiedPipeline = _require2.unifiedPipeline;
var _require3 = require("./utils/supabaseTestClient"),
  createSupabaseTestClient = _require3.createSupabaseTestClient;
var userId = process.env.TEST_SEED_USER_ID || '00000000-0000-0000-0000-000000000001';
var supabase = createSupabaseTestClient();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Telemetry Supabase', function () {
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    process.env.TEST_SEED_USER_ID = userId;
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:telemetry:started] and [QRlive:telemetry:completed] are recorded', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 6
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 900e3,
        mood_score: 6
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var _yield$supabase$from$ = yield supabase.from('ai_telemetry').select('event_type').eq('user_id', userId),
      data = _yield$supabase$from$.data,
      error = _yield$supabase$from$.error;
    expect(error).toBeNull();
    var events = (data || []).map(function (r) {
      return String(r.event_type);
    });
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_started');
    })).toBe(true);
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_completed');
    })).toBe(true);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQiLCJjbGllbnQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInN1cGFiYXNlQ2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZXF1aXJlNCIsImplc3QiLCJfcmVxdWlyZTIiLCJ1bmlmaWVkUGlwZWxpbmUiLCJfcmVxdWlyZTMiLCJ1c2VySWQiLCJwcm9jZXNzIiwiZW52IiwiVEVTVF9TRUVEX1VTRVJfSUQiLCJzdXBhYmFzZSIsImNsZWFudXAiLCJfY2xlYW51cCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZnJvbSIsImRlbGV0ZSIsImVxIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJURVNUX01PREUiLCJURVNUX1RUTF9NUyIsIlRFU1RfUElQRUxJTkVfU1RVQiIsIkVYUE9fUFVCTElDX0VOQUJMRV9BSSIsImFmdGVyQWxsIiwiaXQiLCJtb29kcyIsIkFycmF5IiwibGVuZ3RoIiwiXyIsImkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibW9vZF9zY29yZSIsInR5cGUiLCJjb250ZW50IiwiY29udGV4dCIsInNvdXJjZSIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJCIsInNlbGVjdCIsImRhdGEiLCJlcnJvciIsImV4cGVjdCIsInRvQmVOdWxsIiwiZXZlbnRzIiwibWFwIiwiciIsIlN0cmluZyIsImV2ZW50X3R5cGUiLCJzb21lIiwiZSIsImluY2x1ZGVzIiwidG9CZSJdLCJzb3VyY2VzIjpbIkxpdmVUZWxlbWV0cnlTdXBhYmFzZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGl2ZSBTdXBhYmFzZSBUZXN0cyDigJQgVGVsZW1ldHJ5IChRUmxpdmUpXG4gKiBUYWdzOiBbUVJsaXZlOnRlbGVtZXRyeTpzdGFydGVkXSBbUVJsaXZlOnRlbGVtZXRyeTpjb21wbGV0ZWRdXG4gKi9cbmplc3QubW9jaygnQC9zZXJ2aWNlcy9zdXBhYmFzZScsICgpID0+IHtcbiAgY29uc3QgeyBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQgfSA9IHJlcXVpcmUoJy4vdXRpbHMvc3VwYWJhc2VUZXN0Q2xpZW50Jyk7XG4gIGNvbnN0IGNsaWVudCA9IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCgpO1xuICByZXR1cm4ge1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgZGVmYXVsdDogeyBzdXBhYmFzZUNsaWVudDogY2xpZW50IH0sXG4gICAgc3VwYWJhc2VDbGllbnQ6IGNsaWVudCxcbiAgfTtcbn0pO1xuXG5jb25zdCB7IHVuaWZpZWRQaXBlbGluZSB9ID0gcmVxdWlyZSgnQC9mZWF0dXJlcy9haS9jb3JlL1VuaWZpZWRBSVBpcGVsaW5lJyk7XG5jb25zdCB7IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCB9ID0gcmVxdWlyZSgnLi91dGlscy9zdXBhYmFzZVRlc3RDbGllbnQnKTtcblxuY29uc3QgdXNlcklkID0gcHJvY2Vzcy5lbnYuVEVTVF9TRUVEX1VTRVJfSUQgfHwgJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMSc7XG5jb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCgpO1xuXG5hc3luYyBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICBhd2FpdCBzdXBhYmFzZS5mcm9tKCdhaV90ZWxlbWV0cnknKS5kZWxldGUoKS5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG59XG5cbmRlc2NyaWJlKCdMaXZlIFRlbGVtZXRyeSBTdXBhYmFzZScsICgpID0+IHtcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5URVNUX01PREUgPSAnMSc7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9UVExfTVMgPSAnNTAwMCc7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9QSVBFTElORV9TVFVCID0gJzAnO1xuICAgIHByb2Nlc3MuZW52LkVYUE9fUFVCTElDX0VOQUJMRV9BSSA9ICd0cnVlJztcbiAgICBwcm9jZXNzLmVudi5URVNUX1NFRURfVVNFUl9JRCA9IHVzZXJJZDtcbiAgICBhd2FpdCBjbGVhbnVwKCk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjbGVhbnVwKCk7XG4gIH0pO1xuXG4gIGl0KCdbUVJsaXZlOnRlbGVtZXRyeTpzdGFydGVkXSBhbmQgW1FSbGl2ZTp0ZWxlbWV0cnk6Y29tcGxldGVkXSBhcmUgcmVjb3JkZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9vZHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiA2IH0sIChfLCBpKSA9PiAoeyB0aW1lc3RhbXA6IERhdGUubm93KCkgLSBpICogOTAwZTMsIG1vb2Rfc2NvcmU6IDYgfSkpO1xuICAgIGF3YWl0IHVuaWZpZWRQaXBlbGluZS5wcm9jZXNzKHsgdXNlcklkLCB0eXBlOiAnZGF0YScsIGNvbnRlbnQ6IHsgbW9vZHMgfSwgY29udGV4dDogeyBzb3VyY2U6ICdtb29kJyB9IH0pO1xuXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdhaV90ZWxlbWV0cnknKVxuICAgICAgLnNlbGVjdCgnZXZlbnRfdHlwZScpXG4gICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZU51bGwoKTtcbiAgICBjb25zdCBldmVudHMgPSAoZGF0YSB8fCBbXSkubWFwKHIgPT4gU3RyaW5nKHIuZXZlbnRfdHlwZSkpO1xuICAgIGV4cGVjdChldmVudHMuc29tZShlID0+IGUuaW5jbHVkZXMoJ3VuaWZpZWRfcGlwZWxpbmVfc3RhcnRlZCcpKSkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QoZXZlbnRzLnNvbWUoZSA9PiBlLmluY2x1ZGVzKCd1bmlmaWVkX3BpcGVsaW5lX2NvbXBsZXRlZCcpKSkudG9CZSh0cnVlKTtcbiAgfSk7XG59KTtcblxuXG4iXSwibWFw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