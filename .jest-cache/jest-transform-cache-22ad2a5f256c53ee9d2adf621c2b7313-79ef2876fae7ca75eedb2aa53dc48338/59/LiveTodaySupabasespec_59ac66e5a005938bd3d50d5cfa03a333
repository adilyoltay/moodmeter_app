48546577f93a1b5981a6702ae4b93938
_getJestObj().mock("../../services/supabase", function () {
  var _require = require("./utils/supabaseTestClient"),
    createSupabaseTestClient = _require.createSupabaseTestClient;
  var client = createSupabaseTestClient();
  return {
    __esModule: true,
    default: {
      supabaseClient: client
    },
    supabaseClient: client
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require2 = require("../../features/ai/core/UnifiedAIPipeline"),
  unifiedPipeline = _require2.unifiedPipeline;
var _require3 = require("./utils/supabaseTestClient"),
  createSupabaseTestClient = _require3.createSupabaseTestClient;
var userId = process.env.TEST_SEED_USER_ID || '00000000-0000-0000-0000-000000000001';
var supabase = createSupabaseTestClient();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_cache').delete().ilike('cache_key', `unified:${userId}:%`);
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Today Supabase', function () {
  jest.setTimeout(20000);
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    process.env.TEST_SEED_USER_ID = userId;
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:today:fresh] writes ai_cache on fresh run', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 10
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 3600e3,
        mood_score: 7
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var data = null;
    var error = null;
    for (var i = 0; i < 10; i++) {
      var res = yield supabase.from('ai_cache').select('cache_key, content, expires_at').ilike('cache_key', `unified:${userId}:%`).limit(1);
      data = res.data;
      error = res.error;
      if (!error && (data || []).length > 0) break;
      yield new Promise(function (r) {
        return setTimeout(r, 100);
      });
    }
    expect(error).toBeNull();
    expect((data || []).length).toBeGreaterThan(0);
  }));
  it('[QRlive:today:cache] reads from cache on second run', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 8
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 1800e3,
        mood_score: 6.5
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var second = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    expect(second.metadata.source).toBe('cache');
  }));
  it('[QRlive:today:invalidate] deletes ai_cache rows on invalidation', (0, _asyncToGenerator2.default)(function* () {
    yield unifiedPipeline.triggerInvalidation('mood_added', userId);
    var rows = null;
    var err = null;
    for (var i = 0; i < 10; i++) {
      var res = yield supabase.from('ai_cache').select('cache_key').ilike('cache_key', `unified:${userId}:%`);
      rows = res.data;
      err = res.error;
      if (!err && (rows || []).length === 0) break;
      yield new Promise(function (r) {
        return setTimeout(r, 100);
      });
    }
    expect(err).toBeNull();
    expect((rows || []).length).toBe(0);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQiLCJjbGllbnQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInN1cGFiYXNlQ2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZXF1aXJlNCIsImplc3QiLCJfcmVxdWlyZTIiLCJ1bmlmaWVkUGlwZWxpbmUiLCJfcmVxdWlyZTMiLCJ1c2VySWQiLCJwcm9jZXNzIiwiZW52IiwiVEVTVF9TRUVEX1VTRVJfSUQiLCJzdXBhYmFzZSIsImNsZWFudXAiLCJfY2xlYW51cCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZnJvbSIsImRlbGV0ZSIsImlsaWtlIiwiZXEiLCJkZXNjcmliZSIsInNldFRpbWVvdXQiLCJiZWZvcmVBbGwiLCJURVNUX01PREUiLCJURVNUX1RUTF9NUyIsIlRFU1RfUElQRUxJTkVfU1RVQiIsIkVYUE9fUFVCTElDX0VOQUJMRV9BSSIsImFmdGVyQWxsIiwiaXQiLCJtb29kcyIsIkFycmF5IiwibGVuZ3RoIiwiXyIsImkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibW9vZF9zY29yZSIsInR5cGUiLCJjb250ZW50IiwiY29udGV4dCIsInNvdXJjZSIsImRhdGEiLCJlcnJvciIsInJlcyIsInNlbGVjdCIsImxpbWl0IiwiUHJvbWlzZSIsInIiLCJleHBlY3QiLCJ0b0JlTnVsbCIsInRvQmVHcmVhdGVyVGhhbiIsInNlY29uZCIsIm1ldGFkYXRhIiwidG9CZSIsInRyaWdnZXJJbnZhbGlkYXRpb24iLCJyb3dzIiwiZXJyIl0sInNvdXJjZXMiOlsiTGl2ZVRvZGF5U3VwYWJhc2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpdmUgU3VwYWJhc2UgVGVzdHMg4oCUIFRvZGF5IChRUmxpdmUpXG4gKiBUYWdzOiBbUVJsaXZlOnRvZGF5OmZyZXNofGNhY2hlfGludmFsaWRhdGVdXG4gKi9cbi8vIFJlcGxhY2UgYXBwIHN1cGFiYXNlIHNlcnZpY2Ugd2l0aCBzZXJ2aWNlLXJvbGUgY2xpZW50IGZvciBsaXZlIHRlc3RzXG5qZXN0Lm1vY2soJ0Avc2VydmljZXMvc3VwYWJhc2UnLCAoKSA9PiB7XG4gIGNvbnN0IHsgY3JlYXRlU3VwYWJhc2VUZXN0Q2xpZW50IH0gPSByZXF1aXJlKCcuL3V0aWxzL3N1cGFiYXNlVGVzdENsaWVudCcpO1xuICBjb25zdCBjbGllbnQgPSBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgIGRlZmF1bHQ6IHsgc3VwYWJhc2VDbGllbnQ6IGNsaWVudCB9LFxuICAgIHN1cGFiYXNlQ2xpZW50OiBjbGllbnQsXG4gIH07XG59KTtcblxuY29uc3QgeyB1bmlmaWVkUGlwZWxpbmUgfSA9IHJlcXVpcmUoJ0AvZmVhdHVyZXMvYWkvY29yZS9VbmlmaWVkQUlQaXBlbGluZScpO1xuY29uc3QgeyBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQgfSA9IHJlcXVpcmUoJy4vdXRpbHMvc3VwYWJhc2VUZXN0Q2xpZW50Jyk7XG5cbmNvbnN0IHVzZXJJZCA9IHByb2Nlc3MuZW52LlRFU1RfU0VFRF9VU0VSX0lEIHx8ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEnO1xuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQoKTtcblxuYXN5bmMgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgYXdhaXQgc3VwYWJhc2UuZnJvbSgnYWlfY2FjaGUnKS5kZWxldGUoKS5pbGlrZSgnY2FjaGVfa2V5JywgYHVuaWZpZWQ6JHt1c2VySWR9OiVgKTtcbiAgYXdhaXQgc3VwYWJhc2UuZnJvbSgnYWlfdGVsZW1ldHJ5JykuZGVsZXRlKCkuZXEoJ3VzZXJfaWQnLCB1c2VySWQpO1xufVxuXG5kZXNjcmliZSgnTGl2ZSBUb2RheSBTdXBhYmFzZScsICgpID0+IHtcbiAgamVzdC5zZXRUaW1lb3V0KDIwMDAwKTtcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5URVNUX01PREUgPSAnMSc7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9UVExfTVMgPSAnNTAwMCc7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9QSVBFTElORV9TVFVCID0gJzAnO1xuICAgIHByb2Nlc3MuZW52LkVYUE9fUFVCTElDX0VOQUJMRV9BSSA9ICd0cnVlJztcbiAgICBwcm9jZXNzLmVudi5URVNUX1NFRURfVVNFUl9JRCA9IHVzZXJJZDtcbiAgICBhd2FpdCBjbGVhbnVwKCk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjbGVhbnVwKCk7XG4gIH0pO1xuXG4gIGl0KCdbUVJsaXZlOnRvZGF5OmZyZXNoXSB3cml0ZXMgYWlfY2FjaGUgb24gZnJlc2ggcnVuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vb2RzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAgfSwgKF8sIGkpID0+ICh7IHRpbWVzdGFtcDogRGF0ZS5ub3coKSAtIGkgKiAzNjAwZTMsIG1vb2Rfc2NvcmU6IDcgfSkpO1xuICAgIGF3YWl0IHVuaWZpZWRQaXBlbGluZS5wcm9jZXNzKHsgdXNlcklkLCB0eXBlOiAnZGF0YScsIGNvbnRlbnQ6IHsgbW9vZHMgfSwgY29udGV4dDogeyBzb3VyY2U6ICdtb29kJyB9IH0pO1xuICAgIC8vIFBvbGwgYnJpZWZseSB0byBhbGxvdyBEQiB1cHNlcnRcbiAgICBsZXQgZGF0YTogYW55W10gfCBudWxsID0gbnVsbDtcbiAgICBsZXQgZXJyb3I6IGFueSA9IG51bGw7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnYWlfY2FjaGUnKVxuICAgICAgICAuc2VsZWN0KCdjYWNoZV9rZXksIGNvbnRlbnQsIGV4cGlyZXNfYXQnKVxuICAgICAgICAuaWxpa2UoJ2NhY2hlX2tleScsIGB1bmlmaWVkOiR7dXNlcklkfTolYClcbiAgICAgICAgLmxpbWl0KDEpO1xuICAgICAgZGF0YSA9IChyZXMgYXMgYW55KS5kYXRhIGFzIGFueVtdIHwgbnVsbDtcbiAgICAgIGVycm9yID0gKHJlcyBhcyBhbnkpLmVycm9yO1xuICAgICAgaWYgKCFlcnJvciAmJiAoZGF0YSB8fCBbXSkubGVuZ3RoID4gMCkgYnJlYWs7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgMTAwKSk7XG4gICAgfVxuICAgIGV4cGVjdChlcnJvcikudG9CZU51bGwoKTtcbiAgICBleHBlY3QoKGRhdGEgfHwgW10pLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9KTtcblxuICBpdCgnW1FSbGl2ZTp0b2RheTpjYWNoZV0gcmVhZHMgZnJvbSBjYWNoZSBvbiBzZWNvbmQgcnVuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vb2RzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogOCB9LCAoXywgaSkgPT4gKHsgdGltZXN0YW1wOiBEYXRlLm5vdygpIC0gaSAqIDE4MDBlMywgbW9vZF9zY29yZTogNi41IH0pKTtcbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcbiAgICBjb25zdCBzZWNvbmQgPSBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcbiAgICBleHBlY3Qoc2Vjb25kLm1ldGFkYXRhLnNvdXJjZSkudG9CZSgnY2FjaGUnKTtcbiAgfSk7XG5cbiAgaXQoJ1tRUmxpdmU6dG9kYXk6aW52YWxpZGF0ZV0gZGVsZXRlcyBhaV9jYWNoZSByb3dzIG9uIGludmFsaWRhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUudHJpZ2dlckludmFsaWRhdGlvbignbW9vZF9hZGRlZCcsIHVzZXJJZCk7XG4gICAgLy8gUG9sbCBmb3IgZGVsZXRpb25cbiAgICBsZXQgcm93czogYW55W10gfCBudWxsID0gbnVsbDtcbiAgICBsZXQgZXJyOiBhbnkgPSBudWxsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2FpX2NhY2hlJylcbiAgICAgICAgLnNlbGVjdCgnY2FjaGVfa2V5JylcbiAgICAgICAgLmlsaWtlKCdjYWNoZV9rZXknLCBgdW5pZmllZDoke3VzZXJJZH06JWApO1xuICAgICAgcm93cyA9IChyZXMgYXMgYW55KS5kYXRhIGFzIGFueVtdIHwgbnVsbDtcbiAgICAgIGVyciA9IChyZXMgYXMgYW55KS5lcnJvcjtcbiAgICAgIGlmICghZXJyICYmIChyb3dzIHx8IFtdKS5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UociA9PiBzZXRUaW1lb3V0KHIsIDEwMCkpO1xuICAgIH1cbiAgICBleHBlY3QoZXJyKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdCgocm93cyB8fCBbXSkubGVuZ3RoKS50b0JlKDApO1xuICB9KTtcbn0pO1xuXG5cbiJdLCJtYXBwaW5ncyI6IkFBS0FBLFdBQUEsR0FBS0MsSUFBSSw0QkFBd0IsWUFBTTtFQUNyQyxJQUFBQyxRQUFBLEdBQXFDQyxPQUFPLDZCQUE2QixDQUFDO0lBQWxFQyx3QkFBd0IsR0FBQUYsUUFBQSxDQUF4QkUsd0JBQXdCO0VBQ2hDLElBQU1DLE1BQU0sR0FBR0Qsd0JBQXdCLENBQUMsQ0FBQztFQUN6QyxPQUFPO0lBQ0xFLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUU7TUFBRUMsY0FBYyxFQUFFSDtJQUFPLENBQUM7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