ae20a3e9617fca8ea5460d60071d3f1d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _UnimplementedView = _interopRequireDefault(require("../UnimplementedViews/UnimplementedView"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var DrawerLayoutAndroid = exports.default = function (_React$Component) {
  function DrawerLayoutAndroid() {
    (0, _classCallCheck2.default)(this, DrawerLayoutAndroid);
    return _callSuper(this, DrawerLayoutAndroid, arguments);
  }
  (0, _inherits2.default)(DrawerLayoutAndroid, _React$Component);
  return (0, _createClass2.default)(DrawerLayoutAndroid, [{
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(_UnimplementedView.default, Object.assign({}, this.props));
    }
  }, {
    key: "openDrawer",
    value: function openDrawer() {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }, {
    key: "closeDrawer",
    value: function closeDrawer() {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }, {
    key: "blur",
    value: function blur() {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }, {
    key: "focus",
    value: function focus() {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }, {
    key: "measure",
    value: function measure(callback) {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }, {
    key: "measureInWindow",
    value: function measureInWindow(callback) {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }, {
    key: "measureLayout",
    value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(nativeProps) {
      throw new Error('DrawerLayoutAndroid is only available on Android');
    }
  }]);
}(React.Component);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfVW5pbXBsZW1lbnRlZFZpZXciLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9jYWxsU3VwZXIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIkRyYXdlckxheW91dEFuZHJvaWQiLCJfUmVhY3QkQ29tcG9uZW50IiwiYXJndW1lbnRzIiwia2V5IiwicmVuZGVyIiwianN4IiwiYXNzaWduIiwicHJvcHMiLCJvcGVuRHJhd2VyIiwiRXJyb3IiLCJjbG9zZURyYXdlciIsImJsdXIiLCJmb2N1cyIsIm1lYXN1cmUiLCJjYWxsYmFjayIsIm1lYXN1cmVJbldpbmRvdyIsIm1lYXN1cmVMYXlvdXQiLCJyZWxhdGl2ZVRvTmF0aXZlTm9kZSIsIm9uU3VjY2VzcyIsIm9uRmFpbCIsInNldE5hdGl2ZVByb3BzIiwibmF0aXZlUHJvcHMiLCJDb21wb25lbnQiXSwic291cmNlcyI6WyJEcmF3ZXJMYXlvdXRBbmRyb2lkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIGltcG9ydCB0eXBlb2YgRHJhd2VyTGF5b3V0QW5kcm9pZCBmcm9tICcuL0RyYXdlckxheW91dEFuZHJvaWQuYW5kcm9pZCc7XG5pbXBvcnQgdHlwZSB7XG4gIE1lYXN1cmVJbldpbmRvd09uU3VjY2Vzc0NhbGxiYWNrLFxuICBNZWFzdXJlTGF5b3V0T25TdWNjZXNzQ2FsbGJhY2ssXG4gIE1lYXN1cmVPblN1Y2Nlc3NDYWxsYmFjayxcbn0gZnJvbSAnLi4vLi4vLi4vc3JjL3ByaXZhdGUvdHlwZXMvSG9zdEluc3RhbmNlJztcbmltcG9ydCB0eXBlIHtcbiAgRHJhd2VyTGF5b3V0QW5kcm9pZE1ldGhvZHMsXG4gIERyYXdlckxheW91dEFuZHJvaWRQcm9wcyxcbiAgRHJhd2VyTGF5b3V0QW5kcm9pZFN0YXRlLFxufSBmcm9tICcuL0RyYXdlckxheW91dEFuZHJvaWRUeXBlcyc7XG5cbmltcG9ydCBVbmltcGxlbWVudGVkVmlldyBmcm9tICcuLi9VbmltcGxlbWVudGVkVmlld3MvVW5pbXBsZW1lbnRlZFZpZXcnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSB7XG4gIERyYXdlckxheW91dEFuZHJvaWRQcm9wcyxcbiAgRHJhd2VyU2xpZGVFdmVudCxcbn0gZnJvbSAnLi9EcmF3ZXJMYXlvdXRBbmRyb2lkVHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmF3ZXJMYXlvdXRBbmRyb2lkXG4gIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PERyYXdlckxheW91dEFuZHJvaWRQcm9wcywgRHJhd2VyTGF5b3V0QW5kcm9pZFN0YXRlPlxuICBpbXBsZW1lbnRzIERyYXdlckxheW91dEFuZHJvaWRNZXRob2RzXG57XG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICByZXR1cm4gPFVuaW1wbGVtZW50ZWRWaWV3IHsuLi50aGlzLnByb3BzfSAvPjtcbiAgfVxuXG4gIG9wZW5EcmF3ZXIoKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEcmF3ZXJMYXlvdXRBbmRyb2lkIGlzIG9ubHkgYXZhaWxhYmxlIG9uIEFuZHJvaWQnKTtcbiAgfVxuXG4gIGNsb3NlRHJhd2VyKCk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcignRHJhd2VyTGF5b3V0QW5kcm9pZCBpcyBvbmx5IGF2YWlsYWJsZSBvbiBBbmRyb2lkJyk7XG4gIH1cblxuICBibHVyKCk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcignRHJhd2VyTGF5b3V0QW5kcm9pZCBpcyBvbmx5IGF2YWlsYWJsZSBvbiBBbmRyb2lkJyk7XG4gIH1cblxuICBmb2N1cygpOiB2b2lkIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyYXdlckxheW91dEFuZHJvaWQgaXMgb25seSBhdmFpbGFibGUgb24gQW5kcm9pZCcpO1xuICB9XG5cbiAgbWVhc3VyZShjYWxsYmFjazogTWVhc3VyZU9uU3VjY2Vzc0NhbGxiYWNrKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEcmF3ZXJMYXlvdXRBbmRyb2lkIGlzIG9ubHkgYXZhaWxhYmxlIG9uIEFuZHJvaWQnKTtcbiAgfVxuXG4gIG1lYXN1cmVJbldpbmRvdyhjYWxsYmFjazogTWVhc3VyZUluV2luZG93T25TdWNjZXNzQ2FsbGJhY2spOiB2b2lkIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyYXdlckxheW91dEFuZHJvaWQgaXMgb25seSBhdmFpbGFibGUgb24gQW5kcm9pZCcpO1xuICB9XG5cbiAgbWVhc3VyZUxheW91dChcbiAgICByZWxhdGl2ZVRvTmF0aXZlTm9kZTogbnVtYmVyLFxuICAgIG9uU3VjY2VzczogTWVhc3VyZUxheW91dE9uU3VjY2Vzc0NhbGxiYWNrLFxuICAgIG9uRmFpbD86ICgpID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcignRHJhd2VyTGF5b3V0QW5kcm9pZCBpcyBvbmx5IGF2YWlsYWJsZSBvbiBBbmRyb2lkJyk7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lW3VuY2xlYXItdHlwZV1cbiAgc2V0TmF0aXZlUHJvcHMobmF0aXZlUHJvcHM6IE9iamVjdCk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcignRHJhd2VyTGF5b3V0QW5kcm9pZCBpcyBvbmx5IGF2YWlsYWJsZSBvbiBBbmRyb2lkJyk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU8sYUFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQVEsMkJBQUEsR0FBQVQsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFTLGdCQUFBLEdBQUFWLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBVSxVQUFBLEdBQUFYLHNCQUFBLENBQUFDLE9BQUE7QUFjYixJQUFBVyxrQkFBQSxHQUFBWixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVksS0FBQSxHQUFBQyx1QkFBQSxDQUFBYixPQUFBO0FBQStCLElBQUFjLFdBQUEsR0FBQWQsT0FBQTtBQUFBLFNBQUFhLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSix1QkFBQSxZQUFBQSx3QkFBQUUs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