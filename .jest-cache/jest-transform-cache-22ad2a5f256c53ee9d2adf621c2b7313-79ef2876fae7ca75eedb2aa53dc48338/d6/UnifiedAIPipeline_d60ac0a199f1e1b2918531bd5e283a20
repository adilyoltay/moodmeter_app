1168883a1ce6e42065360401372a1541
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unifiedPipeline = exports.UnifiedAIPipeline = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _featureFlags = require("../../../constants/featureFlags");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _aiTelemetry = require("../telemetry/aiTelemetry");
var _supabase = _interopRequireDefault(require("../../../services/supabase"));
function simpleHash(str) {
  var hash = 0;
  if (str.length === 0) return hash.toString(16);
  for (var i = 0; i < str.length; i++) {
    var char = str.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash;
  }
  return Math.abs(hash).toString(16);
}
var UnifiedAIPipeline = exports.UnifiedAIPipeline = function () {
  function UnifiedAIPipeline() {
    (0, _classCallCheck2.default)(this, UnifiedAIPipeline);
    this.cache = new Map();
    this.isTestMode = process.env.TEST_MODE === '1';
    this.testTTL = parseInt(process.env.TEST_TTL_MS || '5000', 10);
    this.MODULE_TTLS = {
      insights: 24 * 60 * 60 * 1000,
      patterns: 12 * 60 * 60 * 1000,
      voice: 1 * 60 * 60 * 1000,
      progress: 6 * 60 * 60 * 1000,
      cbt: 24 * 60 * 60 * 1000,
      default: 24 * 60 * 60 * 1000
    };
    this.invalidationHooks = new Map();
    this.setupInvalidationHooks();
    this.startCacheCleanup();
  }
  return (0, _createClass2.default)(UnifiedAIPipeline, [{
    key: "getModuleTTL",
    value: function getModuleTTL(input) {
      var _input$context, _input$context2, _input$context3;
      switch (input.type) {
        case 'voice':
          return this.MODULE_TTLS.voice;
        case 'data':
          if (((_input$context = input.context) == null ? void 0 : _input$context.source) === 'mood') return this.MODULE_TTLS.patterns;
          if (((_input$context2 = input.context) == null ? void 0 : _input$context2.source) === 'cbt') return this.MODULE_TTLS.cbt;
          if (((_input$context3 = input.context) == null ? void 0 : _input$context3.source) === 'tracking') return this.MODULE_TTLS.patterns;
          return this.MODULE_TTLS.insights;
        case 'mixed':
          return this.MODULE_TTLS.insights;
        default:
          return this.MODULE_TTLS.default;
      }
    }
  }, {
    key: "process",
    value: function () {
      var _process = (0, _asyncToGenerator2.default)(function* (input) {
        var startTime = Date.now();
        if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_PIPELINE')) {
          console.log('⚠️ UnifiedAIPipeline: Feature disabled, returning empty result');
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_DISABLED, {
            userId: input.userId,
            inputType: input.type,
            pipeline: 'unified',
            reason: 'feature_flag_disabled',
            timestamp: startTime
          });
          return {
            metadata: {
              pipelineVersion: '1.0.0',
              processedAt: Date.now(),
              cacheTTL: 0,
              source: 'disabled',
              processingTime: Date.now() - startTime
            }
          };
        }
        var cacheKey = this.generateCacheKey(input);
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_STARTED, {
          userId: input.userId,
          inputType: input.type,
          pipeline: 'unified',
          cacheKey: cacheKey,
          timestamp: startTime
        });
        var cached = yield this.getFromCache(cacheKey);
        if (cached) {
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_CACHE_HIT, {
            userId: input.userId,
            pipeline: 'unified',
            cacheKey: cacheKey,
            processingTime: Date.now() - startTime
          });
          return Object.assign({}, cached, {
            metadata: Object.assign({}, cached.metadata, {
              source: 'cache'
            })
          });
        }
        var result = yield this.executePipeline(input);
        this.setCacheWithInsightsPolicy(cacheKey, result, input);
        var processingTime = Date.now() - startTime;
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_COMPLETED, {
          userId: input.userId,
          pipeline: 'unified',
          processingTime: processingTime,
          modules: this.getEnabledModules(),
          cacheKey: cacheKey,
          resultSize: JSON.stringify(result).length
        });
        return Object.assign({}, result, {
          metadata: Object.assign({}, result.metadata, {
            source: 'fresh',
            processingTime: Date.now() - startTime
          })
        });
      });
      function process(_x) {
        return _process.apply(this, arguments);
      }
      return process;
    }()
  }, {
    key: "executePipeline",
    value: function () {
      var _executePipeline = (0, _asyncToGenerator2.default)(function* (input) {
        var startTime = Date.now();
        var moduleTTL = this.getModuleTTL(input);
        var result = {
          metadata: {
            pipelineVersion: '1.0.0',
            processedAt: Date.now(),
            cacheTTL: moduleTTL,
            source: 'fresh',
            processingTime: 0
          }
        };
        var promises = [];
        if (input.type === 'voice' || input.type === 'mixed') {
          promises.push(this.processVoiceAnalysis(input).then(function (voice) {
            result.voice = voice;
          }));
        }
        promises.push(this.processPatternRecognition(input).then(function (patterns) {
          result.patterns = patterns;
        }));
        if (this.shouldRunCBT(input)) {
          promises.push(this.processCBTAnalysis(input).then(function (cbt) {
            result.cbt = cbt;
          }));
        }
        if (this.shouldRunBreathwork(input)) {
          promises.push(this.processBreathworkAnalysis(input).then(function (breathwork) {
            result.breathwork = breathwork;
          }));
        }
        yield Promise.allSettled(promises);
        if (result.patterns) {
          var _result$voice;
          var voiceHints = (_result$voice = result.voice) != null && _result$voice.category ? {
            voiceCategory: result.voice.category,
            voiceConfidence: result.voice.confidence,
            voiceSuggestion: result.voice.suggestion
          } : undefined;
          var enhancedInput = voiceHints ? Object.assign({}, input, {
            context: Object.assign({}, input.context, {
              hints: voiceHints
            })
          }) : input;
          result.insights = yield this.processInsightsGeneration(enhancedInput, result.patterns);
        }
        if (result.patterns && Array.isArray(result.patterns)) {
          var _patternsArray$find;
          var patternsArray = result.patterns;
          var moodAnalytics = (_patternsArray$find = patternsArray.find(function (p) {
            return p.moodAnalytics;
          })) == null ? void 0 : _patternsArray$find.moodAnalytics;
          if (moodAnalytics) {
            result.analytics = {
              mood: moodAnalytics
            };
            console.log('📊 Enhanced mood analytics attached to result');
          }
        } else if (result.patterns && result.patterns.moodAnalytics) {
          result.analytics = {
            mood: result.patterns.moodAnalytics
          };
        }
        if (input.content && typeof input.content === 'object') {
          var content = input.content;
          if (content.cbtRecords && Array.isArray(content.cbtRecords) && content.cbtRecords.length > 0) {
            var cbtRecords = content.cbtRecords;
            var validRecords = cbtRecords.filter(function (r) {
              return r.mood_before != null && r.mood_after != null;
            });
            if (validRecords.length > 0) {
              var deltas = validRecords.map(function (r) {
                return r.mood_after - r.mood_before;
              });
              var avgDelta = deltas.reduce(function (sum, d) {
                return sum + d;
              }, 0) / deltas.length;
              var deltaVariance = deltas.reduce(function (sum, d) {
                return sum + Math.pow(d - avgDelta, 2);
              }, 0) / deltas.length;
              var volatility = Math.sqrt(deltaVariance);
              var recentRecords = validRecords.slice(-7);
              var olderRecords = validRecords.slice(-14, -7);
              var weeklyDelta = 0;
              if (recentRecords.length > 0 && olderRecords.length > 0) {
                var recentAvg = recentRecords.reduce(function (sum, r) {
                  return sum + (r.mood_after - r.mood_before);
                }, 0) / recentRecords.length;
                var olderAvg = olderRecords.reduce(function (sum, r) {
                  return sum + (r.mood_after - r.mood_before);
                }, 0) / olderRecords.length;
                weeklyDelta = recentAvg - olderAvg;
              }
              var confidence = Math.min(0.8, 0.5 + validRecords.length * 0.05);
              result.analytics = result.analytics || {};
              result.analytics.cbt = {
                sampleSize: validRecords.length,
                volatility: Math.round(volatility * 10) / 10,
                weeklyDelta: Math.round(weeklyDelta * 10) / 10,
                confidence: confidence,
                dataQuality: confidence,
                baselines: {
                  moodImprovement: avgDelta
                }
              };
              console.log(`📊 Minimal CBT analytics: sampleSize=${validRecords.length}, volatility=${volatility.toFixed(1)}, weeklyDelta=${weeklyDelta.toFixed(1)}`);
            }
          }
          if (content.compulsions && Array.isArray(content.compulsions) && content.compulsions.length > 0) {
            var compulsions = content.compulsions;
            var sampleSize = compulsions.length;
            var dayGroups = {};
            compulsions.forEach(function (c) {
              if (c.timestamp) {
                var day = new Date(c.timestamp).toDateString();
                dayGroups[day] = (dayGroups[day] || 0) + 1;
              }
            });
            var dailyCounts = Object.values(dayGroups);
            var _volatility = 0;
            if (dailyCounts.length > 1) {
              var avgDaily = dailyCounts.reduce(function (sum, count) {
                return sum + count;
              }, 0) / dailyCounts.length;
              var variance = dailyCounts.reduce(function (sum, count) {
                return sum + Math.pow(count - avgDaily, 2);
              }, 0) / dailyCounts.length;
              _volatility = Math.sqrt(variance);
            }
            var sortedDays = Object.entries(dayGroups).sort(function (_ref, _ref2) {
              var _ref3 = (0, _slicedToArray2.default)(_ref, 1),
                a = _ref3[0];
              var _ref4 = (0, _slicedToArray2.default)(_ref2, 1),
                b = _ref4[0];
              return new Date(a).getTime() - new Date(b).getTime();
            });
            var _weeklyDelta = 0;
            if (sortedDays.length >= 6) {
              var recentDays = sortedDays.slice(-3);
              var olderDays = sortedDays.slice(-6, -3);
              var _recentAvg = recentDays.reduce(function (sum, _ref5) {
                var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
                  count = _ref6[1];
                return sum + count;
              }, 0) / recentDays.length;
              var _olderAvg = olderDays.reduce(function (sum, _ref7) {
                var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
                  count = _ref8[1];
                return sum + count;
              }, 0) / olderDays.length;
              _weeklyDelta = _recentAvg - _olderAvg;
            }
            var _confidence = Math.min(0.8, 0.4 + sampleSize * 0.02);
            result.analytics = result.analytics || {};
            result.analytics.tracking = {
              sampleSize: sampleSize,
              volatility: Math.round(_volatility * 10) / 10,
              weeklyDelta: Math.round(_weeklyDelta * 10) / 10,
              confidence: _confidence,
              dataQuality: _confidence,
              baselines: {
                compulsions: dailyCounts.length > 0 ? Math.round(dailyCounts.reduce(function (sum, count) {
                  return sum + count;
                }, 0) / dailyCounts.length * 10) / 10 : 0
              }
            };
            console.log(`📊 Minimal Tracking analytics: sampleSize=${sampleSize}, volatility=${_volatility.toFixed(1)}, weeklyDelta=${_weeklyDelta.toFixed(1)}`);
          }
        }
        return result;
      });
      function executePipeline(_x2) {
        return _executePipeline.apply(this, arguments);
      }
      return executePipeline;
    }()
  }, {
    key: "processVoiceAnalysis",
    value: function () {
      var _processVoiceAnalysis = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var _yield$import = yield import("../services/checkinService"),
            unifiedVoiceAnalysis = _yield$import.unifiedVoiceAnalysis;
          var analysis = yield unifiedVoiceAnalysis(typeof input.content === 'string' ? input.content : JSON.stringify(input.content), input.userId);
          return {
            category: analysis.type,
            confidence: analysis.confidence,
            suggestion: analysis.suggestion,
            route: analysis.route
          };
        } catch (error) {
          console.warn('Voice analysis failed, using heuristic fallback:', error);
          return this.generateHeuristicVoiceAnalysis(typeof input.content === 'string' ? input.content : JSON.stringify(input.content));
        }
      });
      function processVoiceAnalysis(_x3) {
        return _processVoiceAnalysis.apply(this, arguments);
      }
      return processVoiceAnalysis;
    }()
  }, {
    key: "processPatternRecognition",
    value: function () {
      var _processPatternRecognition = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var patterns = {
            temporal: [],
            behavioral: [],
            environmental: [],
            triggers: [],
            severity: [],
            metadata: {
              analysisTime: Date.now(),
              dataPoints: 0,
              confidence: 0
            }
          };
          if (typeof input.content === 'object') {
            var content = input.content;
            if (content.compulsions && Array.isArray(content.compulsions)) {
              patterns.temporal = this.extractTemporalPatterns(content.compulsions);
              patterns.metadata.dataPoints += content.compulsions.length;
            }
            if (content.moods && Array.isArray(content.moods)) {
              var _patterns$temporal;
              (_patterns$temporal = patterns.temporal).push.apply(_patterns$temporal, (0, _toConsumableArray2.default)(this.extractMoodTemporalPatterns(content.moods)));
              patterns.metadata.dataPoints += content.moods.length;
              console.log(`🎯 Starting mood analytics processing for ${content.moods.length} mood entries`);
              var moodAnalytics = this.processMoodAnalytics(content.moods);
              console.log('📊 Mood analytics result:', moodAnalytics);
              if (moodAnalytics) {
                patterns.moodAnalytics = moodAnalytics;
                patterns.metadata.hasAdvancedAnalytics = true;
                try {
                  var _moodAnalytics$profil;
                  (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.MOOD_ANALYTICS_COMPUTED, {
                    weeklyDelta: moodAnalytics.weeklyDelta,
                    volatility: moodAnalytics.volatility,
                    profile: (_moodAnalytics$profil = moodAnalytics.profile) == null ? void 0 : _moodAnalytics$profil.type,
                    sampleSize: moodAnalytics.sampleSize,
                    dataQuality: moodAnalytics.dataQuality,
                    confidence: moodAnalytics.confidence,
                    correlationsAvailable: Object.keys(moodAnalytics.correlations).length
                  });
                } catch (telemetryError) {
                  console.warn('⚠️ Mood analytics telemetry failed:', telemetryError);
                }
              }
            }
            if (content.compulsions && Array.isArray(content.compulsions)) {
              patterns.behavioral = this.extractBehavioralPatterns(content.compulsions);
            }
            patterns.environmental = this.extractEnvironmentalTriggers(content);
            patterns.triggers = this.analyzeTriggers(content);
            patterns.severity = this.analyzeSeverityProgression(content);
            patterns.metadata.confidence = this.calculatePatternConfidence(patterns.metadata.dataPoints);
          }
          if (typeof input.content === 'string') {
            var _patterns$behavioral, _patterns$triggers;
            var textPatterns = this.extractTextPatterns(input.content);
            (_patterns$behavioral = patterns.behavioral).push.apply(_patterns$behavioral, (0, _toConsumableArray2.default)(textPatterns.behavioral));
            (_patterns$triggers = patterns.triggers).push.apply(_patterns$triggers, (0, _toConsumableArray2.default)(textPatterns.triggers));
            patterns.metadata.dataPoints += 1;
            patterns.metadata.confidence = 0.6;
          }
          return patterns;
        } catch (error) {
          console.error('Pattern recognition error:', error);
          return {
            temporal: [],
            behavioral: [],
            environmental: [],
            triggers: [],
            severity: [],
            metadata: {
              analysisTime: Date.now(),
              dataPoints: 0,
              confidence: 0
            }
          };
        }
      });
      function processPatternRecognition(_x4) {
        return _processPatternRecognition.apply(this, arguments);
      }
      return processPatternRecognition;
    }()
  }, {
    key: "processCBTAnalysis",
    value: function () {
      var _processCBTAnalysis = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          if (typeof input.content === 'object' && input.content.analysisRequest === 'comprehensive_cbt_progress_analytics') {
            return yield this.processCBTProgressAnalytics(input);
          }
          var text = typeof input.content === 'string' ? input.content : input.content.description || input.content.notes || '';
          if (!text || text.length < 5) {
            return null;
          }
          var analysis = {
            distortions: [],
            reframes: [],
            techniques: [],
            thoughtRecord: null,
            severity: 0,
            urgency: 'low',
            metadata: {
              analysisTime: Date.now(),
              textLength: text.length,
              confidence: 0
            }
          };
          var detectedDistortions = this.detectCognitiveDistortions(text);
          analysis.distortions = detectedDistortions;
          if (detectedDistortions.length > 0) {
            analysis.thoughtRecord = this.generateThoughtRecord(text, detectedDistortions);
          }
          analysis.reframes = yield this.generateCBTReframes(text, detectedDistortions);
          analysis.techniques = this.recommendCBTTechniques(detectedDistortions, text);
          analysis.severity = this.assessCognitiveDistortionSeverity(text, detectedDistortions);
          analysis.urgency = this.calculateCBTUrgency(analysis.severity, detectedDistortions);
          analysis.metadata.confidence = this.calculateCBTConfidence(detectedDistortions, text.length);
          try {
            var _yield$import2 = yield import("../engines/cbtEngine"),
              cbtEngine = _yield$import2.cbtEngine;
            if (cbtEngine.enabled) {
              var engineDistortions = yield cbtEngine.detectDistortions(text);
              var engineReframes = yield cbtEngine.suggestReframes(text, engineDistortions);
              analysis.distortions = [].concat((0, _toConsumableArray2.default)(analysis.distortions), (0, _toConsumableArray2.default)(engineDistortions.map(function (d) {
                return {
                  name: d.name,
                  confidence: d.confidence
                };
              })));
              analysis.reframes = [].concat((0, _toConsumableArray2.default)(analysis.reframes), (0, _toConsumableArray2.default)(engineReframes));
              analysis.metadata.confidence = Math.max(analysis.metadata.confidence, 0.85);
            }
          } catch (engineError) {
            console.warn('CBT Engine unavailable, using built-in analysis:', engineError);
          }
          return analysis;
        } catch (error) {
          console.error('CBT analysis failed:', error);
          return null;
        }
      });
      function processCBTAnalysis(_x5) {
        return _processCBTAnalysis.apply(this, arguments);
      }
      return processCBTAnalysis;
    }()
  }, {
    key: "detectCognitiveDistortions",
    value: function detectCognitiveDistortions(text) {
      var distortions = [];
      var lowerText = text.toLowerCase();
      var catastrophizingPatterns = [{
        pattern: /ya\s+.*?olursa/gi,
        weight: 0.8
      }, {
        pattern: /kesin.*?olacak/gi,
        weight: 0.7
      }, {
        pattern: /felaket|korkunç|berbat/gi,
        weight: 0.6
      }, {
        pattern: /mahvol.*?|bitecek|dayanamam/gi,
        weight: 0.9
      }];
      var catastrophizingEvidence = [];
      var catastrophizingScore = 0;
      catastrophizingPatterns.forEach(function (_ref9) {
        var pattern = _ref9.pattern,
          weight = _ref9.weight;
        var matches = text.match(pattern);
        if (matches) {
          catastrophizingScore += matches.length * weight;
          catastrophizingEvidence.push.apply(catastrophizingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (catastrophizingScore > 0.5) {
        distortions.push({
          name: 'catastrophizing',
          confidence: Math.min(catastrophizingScore, 1),
          evidence: catastrophizingEvidence.slice(0, 3)
        });
      }
      var allOrNothingPatterns = [{
        pattern: /asla.*?olmaz|hiçbir zaman/gi,
        weight: 0.8
      }, {
        pattern: /her zaman|hep|hiç/gi,
        weight: 0.6
      }, {
        pattern: /tamamen.*?başarısız|mükemmel.*?olmalı/gi,
        weight: 0.9
      }];
      var allOrNothingEvidence = [];
      var allOrNothingScore = 0;
      allOrNothingPatterns.forEach(function (_ref0) {
        var pattern = _ref0.pattern,
          weight = _ref0.weight;
        var matches = text.match(pattern);
        if (matches) {
          allOrNothingScore += matches.length * weight;
          allOrNothingEvidence.push.apply(allOrNothingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (allOrNothingScore > 0.4) {
        distortions.push({
          name: 'all_or_nothing',
          confidence: Math.min(allOrNothingScore, 1),
          evidence: allOrNothingEvidence.slice(0, 3)
        });
      }
      var mindReadingPatterns = [{
        pattern: /herkes.*?düşünüyor|kesin.*?düşünüyor/gi,
        weight: 0.8
      }, {
        pattern: /benden nefret|beni sevmiyor/gi,
        weight: 0.9
      }, {
        pattern: /yargılıyor|dalga geçiyor|aptal sanıyor/gi,
        weight: 0.7
      }];
      var mindReadingEvidence = [];
      var mindReadingScore = 0;
      mindReadingPatterns.forEach(function (_ref1) {
        var pattern = _ref1.pattern,
          weight = _ref1.weight;
        var matches = text.match(pattern);
        if (matches) {
          mindReadingScore += matches.length * weight;
          mindReadingEvidence.push.apply(mindReadingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (mindReadingScore > 0.4) {
        distortions.push({
          name: 'mind_reading',
          confidence: Math.min(mindReadingScore, 1),
          evidence: mindReadingEvidence.slice(0, 3)
        });
      }
      var personalizationPatterns = [{
        pattern: /benim yüzümden|benim suçum/gi,
        weight: 0.9
      }, {
        pattern: /ben sebep oldum|hep ben/gi,
        weight: 0.8
      }, {
        pattern: /benden kaynaklı/gi,
        weight: 0.7
      }];
      var personalizationEvidence = [];
      var personalizationScore = 0;
      personalizationPatterns.forEach(function (_ref10) {
        var pattern = _ref10.pattern,
          weight = _ref10.weight;
        var matches = text.match(pattern);
        if (matches) {
          personalizationScore += matches.length * weight;
          personalizationEvidence.push.apply(personalizationEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (personalizationScore > 0.4) {
        distortions.push({
          name: 'personalization',
          confidence: Math.min(personalizationScore, 1),
          evidence: personalizationEvidence.slice(0, 3)
        });
      }
      var labelingPatterns = [{
        pattern: /ben.*?başarısızım|ben.*?aptalım/gi,
        weight: 0.9
      }, {
        pattern: /ben.*?değersizim|ben.*?beceriksizim/gi,
        weight: 0.9
      }, {
        pattern: /hiçbir işe yaramıyorum/gi,
        weight: 0.8
      }];
      var labelingEvidence = [];
      var labelingScore = 0;
      labelingPatterns.forEach(function (_ref11) {
        var pattern = _ref11.pattern,
          weight = _ref11.weight;
        var matches = text.match(pattern);
        if (matches) {
          labelingScore += matches.length * weight;
          labelingEvidence.push.apply(labelingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (labelingScore > 0.4) {
        distortions.push({
          name: 'labeling',
          confidence: Math.min(labelingScore, 1),
          evidence: labelingEvidence.slice(0, 3)
        });
      }
      return distortions;
    }
  }, {
    key: "generateThoughtRecord",
    value: function generateThoughtRecord(text, distortions) {
      var primaryDistortion = distortions[0];
      if (!primaryDistortion) return null;
      return {
        automaticThought: text.substring(0, 200),
        emotion: this.extractEmotionFromText(text),
        intensity: this.calculateEmotionalIntensity(text),
        distortion: primaryDistortion.name,
        evidence: primaryDistortion.evidence,
        balancedThought: '',
        createdAt: new Date().toISOString()
      };
    }
  }, {
    key: "generateCBTReframes",
    value: function () {
      var _generateCBTReframes = (0, _asyncToGenerator2.default)(function* (text, distortions) {
        var reframes = [];
        distortions.forEach(function (distortion) {
          switch (distortion.name) {
            case 'catastrophizing':
              reframes.push('Bu durumun gerçekte ne kadar kötü olabileceğini gerçekçi bir şekilde değerlendirebilirim.', 'Geçmişte benzer durumlarla başa çıktığımı hatırlıyorum.', 'En kötü senaryo gerçekleşse bile, bunun üstesinden gelme yolları vardır.');
              break;
            case 'all_or_nothing':
              reframes.push('Bu durum siyah-beyaz değil, grinin tonları var.', 'Mükemmel olmak zorunda değilim, yeterince iyi olmak da değerlidir.', 'Her şeyin bir spektrumu olduğunu hatırlamalıyım.');
              break;
            case 'mind_reading':
              reframes.push('Başkalarının ne düşündüğünü gerçekten bilemem.', 'İnsanlar genellikle kendi sorunlarıyla meşguller, beni o kadar düşünmüyorlar.', 'Varsayımlarım gerçek olmayabilir, doğrudan sormak daha iyi olabilir.');
              break;
            case 'personalization':
              reframes.push('Her şey benim kontrolümde değil ve her şeyden sorumlu değilim.', 'Bu duruma birçok faktör katkıda bulunmuş olabilir.', 'Kendimi gereksiz yere suçlamak yerine çözüm odaklı düşünebilirim.');
              break;
            case 'labeling':
              reframes.push('Ben bir davranışım değilim, bu sadece bir hata.', 'Herkes hata yapar, bu beni kötü bir insan yapmaz.', 'Kendimle daha şefkatli konuşmalıyım.');
              break;
          }
        });
        if (reframes.length === 0) {
          reframes.push('Bu düşüncenin bana ne kadar faydası var?', 'Bu durumu daha dengeli bir şekilde nasıl değerlendirebilirim?', 'En iyi arkadaşıma ne söylerdim?');
        }
        return (0, _toConsumableArray2.default)(new Set(reframes)).slice(0, 3);
      });
      function generateCBTReframes(_x6, _x7) {
        return _generateCBTReframes.apply(this, arguments);
      }
      return generateCBTReframes;
    }()
  }, {
    key: "recommendCBTTechniques",
    value: function recommendCBTTechniques(distortions, text) {
      var techniques = [];
      var distortionNames = distortions.map(function (d) {
        return d.name;
      });
      if (distortionNames.includes('catastrophizing')) {
        techniques.push({
          name: 'Probability Estimation',
          description: 'Korkulan durumun gerçekleşme olasılığını gerçekçi bir şekilde değerlendirin (0-100%).',
          priority: 9
        });
        techniques.push({
          name: 'Decatastrophizing',
          description: 'En kötü senaryo gerçekleşse bile nasıl başa çıkabileceğinizi planlayın.',
          priority: 8
        });
      }
      if (distortionNames.includes('all_or_nothing')) {
        techniques.push({
          name: 'Continuum Technique',
          description: 'Durumu 0-100 skalasında değerlendirerek gri alanları keşfedin.',
          priority: 9
        });
      }
      if (distortionNames.includes('mind_reading')) {
        techniques.push({
          name: 'Evidence Testing',
          description: 'Başkalarının düşüncelerine dair varsayımlarınız için kanıt arayın.',
          priority: 8
        });
        techniques.push({
          name: 'Alternative Perspectives',
          description: 'Durumu farklı açılardan değerlendirin.',
          priority: 7
        });
      }
      techniques.push({
        name: 'Thought Record',
        description: 'Düşüncelerinizi yazarak analiz edin ve dengeli alternatifler bulun.',
        priority: 6
      });
      techniques.push({
        name: 'Self-Compassion',
        description: 'Kendinize en iyi arkadaşınıza davranır gibi şefkatli davranın.',
        priority: 5
      });
      return techniques.sort(function (a, b) {
        return b.priority - a.priority;
      }).slice(0, 3);
    }
  }, {
    key: "assessCognitiveDistortionSeverity",
    value: function assessCognitiveDistortionSeverity(text, distortions) {
      if (distortions.length === 0) return 0;
      var severity = Math.min(distortions.length * 2, 6);
      var avgConfidence = distortions.reduce(function (sum, d) {
        return sum + d.confidence;
      }, 0) / distortions.length;
      severity += avgConfidence * 2;
      var intensityWords = /çok|aşırı|korkunç|berbat|dayanamam|mahvoldum/gi;
      var intensityMatches = text.match(intensityWords);
      if (intensityMatches) {
        severity += Math.min(intensityMatches.length * 0.5, 2);
      }
      return Math.min(Math.round(severity), 10);
    }
  }, {
    key: "calculateCBTUrgency",
    value: function calculateCBTUrgency(severity, distortions) {
      if (severity >= 8) return 'high';
      if (severity >= 5) return 'medium';
      return 'low';
    }
  }, {
    key: "calculateCBTConfidence",
    value: function calculateCBTConfidence(distortions, textLength) {
      if (distortions.length === 0) return 0.3;
      var avgDistortionConfidence = distortions.reduce(function (sum, d) {
        return sum + d.confidence;
      }, 0) / distortions.length;
      var lengthBonus = Math.min(textLength / 100, 0.2);
      return Math.min(avgDistortionConfidence + lengthBonus, 0.95);
    }
  }, {
    key: "generateHeuristicVoiceAnalysis",
    value: function generateHeuristicVoiceAnalysis(text) {
      var lowerText = text.toLowerCase();
      var moodKeywords = ['mutlu', 'üzgün', 'yorgun', 'iyi', 'kötü', 'harika', 'berbat', 'mükemmel', 'mood', 'hissediyorum'];
      var ocdKeywords = ['kompulsiyon', 'takıntı', 'kontrol', 'temizlik', 'yıkama', 'sayma', 'düzen', 'simetri'];
      var cbtKeywords = ['düşünce', 'olumsuz', 'kaygı', 'endişe', 'korku', 'çarpıtma', 'yanlış', 'doğru'];
      var breathworkKeywords = ['nefes', 'sakin', 'rahatlama', 'stres', 'gergin', 'soluk'];
      var moodCount = moodKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var ocdCount = ocdKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var cbtCount = cbtKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var breathworkCount = breathworkKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var category = 'MOOD';
      var confidence = 0.3;
      var maxCount = moodCount;
      if (ocdCount > maxCount) {
        category = 'OCD';
        maxCount = ocdCount;
      }
      if (cbtCount > maxCount) {
        category = 'CBT';
        maxCount = cbtCount;
      }
      if (breathworkCount > maxCount) {
        category = 'BREATHWORK';
        maxCount = breathworkCount;
      }
      confidence = Math.min(0.6, 0.3 + maxCount * 0.1);
      return {
        category: category,
        confidence: confidence,
        suggestion: 'Heuristic analysis tamamlandı',
        route: 'SUGGEST_SCREEN',
        extractedData: {
          mood: Math.max(1, Math.min(10, 5 + (maxCount - 2))),
          trigger: category === 'OCD' ? 'compulsion_detected' : category === 'CBT' ? 'negative_thought' : category === 'BREATHWORK' ? 'anxiety_detected' : 'mood_expression'
        },
        metadata: {
          source: 'unified_heuristic_fallback',
          processingTime: 0,
          keywordMatches: {
            moodCount: moodCount,
            ocdCount: ocdCount,
            cbtCount: cbtCount,
            breathworkCount: breathworkCount
          }
        }
      };
    }
  }, {
    key: "extractEmotionFromText",
    value: function extractEmotionFromText(text) {
      var emotions = {
        'üzgün': /üzgün|üzülü|kederli|melankolik/gi,
        'öfkeli': /öfkeli|sinirli|kızgın|rahatsız/gi,
        'kaygılı': /kaygılı|endişeli|gergin|stresli/gi,
        'korku': /korku|panik|dehşet/gi,
        'utanç': /utanç|mahcup|rezil/gi
      };
      for (var _ref12 of Object.entries(emotions)) {
        var _ref13 = (0, _slicedToArray2.default)(_ref12, 2);
        var emotion = _ref13[0];
        var pattern = _ref13[1];
        if (pattern.test(text)) {
          return emotion;
        }
      }
      return 'belirsiz';
    }
  }, {
    key: "calculateEmotionalIntensity",
    value: function calculateEmotionalIntensity(text) {
      var intensifiers = text.match(/çok|aşırı|son derece|fazlasıyla|tam/gi);
      var baseIntensity = 5;
      var intensifierBonus = intensifiers ? Math.min(intensifiers.length * 2, 4) : 0;
      return Math.min(baseIntensity + intensifierBonus, 10);
    }
  }, {
    key: "processInsightsGeneration",
    value: function () {
      var _processInsightsGeneration = (0, _asyncToGenerator2.default)(function* (input, patterns) {
        try {
          var _input$context4, _insights$progress2, _insights$motivationa, _insights$therapeutic5;
          var insights = {
            therapeutic: [],
            progress: [],
            behavioral: [],
            motivational: [],
            metadata: {
              generatedAt: Date.now(),
              confidence: 0,
              totalInsights: 0,
              categories: []
            }
          };
          var voiceHints = (_input$context4 = input.context) == null ? void 0 : _input$context4.hints;
          if (voiceHints != null && voiceHints.voiceCategory && voiceHints.voiceConfidence > 0.7) {
            var _insights$therapeutic;
            var voiceEnhancedInsights = this.generateVoiceEnhancedInsights(voiceHints, patterns);
            (_insights$therapeutic = insights.therapeutic).push.apply(_insights$therapeutic, (0, _toConsumableArray2.default)(voiceEnhancedInsights));
            console.log(`🎤 Added ${voiceEnhancedInsights.length} voice-enhanced insights for category: ${voiceHints.voiceCategory}`);
            try {
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
                userId: input.userId,
                source: 'voice_enhanced_insights',
                insightsHintsApplied: true,
                voiceCategory: voiceHints.voiceCategory,
                voiceConfidence: voiceHints.voiceConfidence,
                enhancedInsightsCount: voiceEnhancedInsights.length,
                originalPatternsCount: Object.keys(patterns).filter(function (k) {
                  var _patterns$k;
                  return ((_patterns$k = patterns[k]) == null ? void 0 : _patterns$k.length) > 0;
                }).length
              });
            } catch (error) {
              console.warn('⚠️ Voice insights telemetry failed:', error);
            }
          }
          if (patterns.temporal && patterns.temporal.length > 0) {
            var _insights$therapeutic2;
            var temporalInsights = this.generateTemporalInsights(patterns.temporal);
            (_insights$therapeutic2 = insights.therapeutic).push.apply(_insights$therapeutic2, (0, _toConsumableArray2.default)(temporalInsights));
          }
          if (patterns.behavioral && patterns.behavioral.length > 0) {
            var _insights$behavioral;
            var behavioralInsights = this.generateBehavioralInsights(patterns.behavioral);
            (_insights$behavioral = insights.behavioral).push.apply(_insights$behavioral, (0, _toConsumableArray2.default)(behavioralInsights));
          }
          if (patterns.triggers && patterns.triggers.length > 0) {
            var _insights$therapeutic3;
            var triggerInsights = this.generateTriggerInsights(patterns.triggers);
            (_insights$therapeutic3 = insights.therapeutic).push.apply(_insights$therapeutic3, (0, _toConsumableArray2.default)(triggerInsights));
          }
          if (patterns.severity && patterns.severity.length > 0) {
            var _insights$progress;
            var severityInsights = this.generateSeverityInsights(patterns.severity);
            (_insights$progress = insights.progress).push.apply(_insights$progress, (0, _toConsumableArray2.default)(severityInsights));
          }
          if (patterns.environmental && patterns.environmental.length > 0) {
            var _insights$therapeutic4;
            var environmentalInsights = this.generateEnvironmentalInsights(patterns.environmental);
            (_insights$therapeutic4 = insights.therapeutic).push.apply(_insights$therapeutic4, (0, _toConsumableArray2.default)(environmentalInsights));
          }
          var progressInsights = this.generateProgressInsights(patterns, input);
          (_insights$progress2 = insights.progress).push.apply(_insights$progress2, (0, _toConsumableArray2.default)(progressInsights));
          var motivationalInsights = this.generateMotivationalInsights(patterns);
          (_insights$motivationa = insights.motivational).push.apply(_insights$motivationa, (0, _toConsumableArray2.default)(motivationalInsights));
          var crossPatternInsights = this.generateCrossPatternInsights(patterns);
          (_insights$therapeutic5 = insights.therapeutic).push.apply(_insights$therapeutic5, (0, _toConsumableArray2.default)(crossPatternInsights));
          insights.metadata = this.calculateInsightsMetadata(insights);
          insights.therapeutic = this.prioritizeInsights(insights.therapeutic).slice(0, 5);
          insights.progress = insights.progress.slice(0, 3);
          insights.behavioral = insights.behavioral.slice(0, 3);
          insights.motivational = insights.motivational.slice(0, 2);
          var totalInsights = insights.therapeutic.length + insights.progress.length + insights.behavioral.length + insights.motivational.length;
          if (totalInsights === 0) {
            var _insights$therapeutic6, _insights$progress3;
            console.log('⚠️ No primary insights generated, adding fallback insights...');
            var fallbackInsights = this.generateFallbackInsights(patterns, input);
            (_insights$therapeutic6 = insights.therapeutic).push.apply(_insights$therapeutic6, (0, _toConsumableArray2.default)(fallbackInsights.therapeutic));
            (_insights$progress3 = insights.progress).push.apply(_insights$progress3, (0, _toConsumableArray2.default)(fallbackInsights.progress));
            (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
              userId: input.userId,
              source: 'fallback',
              reason: 'no_primary_insights',
              insightsCount: fallbackInsights.therapeutic.length + fallbackInsights.progress.length,
              patternsAvailable: Object.keys(patterns).filter(function (k) {
                var _patterns$k2;
                return ((_patterns$k2 = patterns[k]) == null ? void 0 : _patterns$k2.length) > 0;
              })
            }).catch(console.warn);
          }
          return insights;
        } catch (error) {
          console.error('Insights generation failed:', error);
          return {
            therapeutic: [],
            progress: [],
            behavioral: [],
            motivational: [],
            metadata: {
              generatedAt: Date.now(),
              confidence: 0,
              totalInsights: 0,
              categories: []
            }
          };
        }
      });
      function processInsightsGeneration(_x8, _x9) {
        return _processInsightsGeneration.apply(this, arguments);
      }
      return processInsightsGeneration;
    }()
  }, {
    key: "generateTemporalInsights",
    value: function generateTemporalInsights(temporalPatterns) {
      var insights = [];
      temporalPatterns.forEach(function (pattern) {
        switch (pattern.type) {
          case 'peak_hour':
            insights.push({
              text: `Kompulsiyonlarınız genellikle ${pattern.timeOfDay} saatlerinde pik yapıyor. Bu saatlerde önceden hazırlanmak faydalı olabilir.`,
              category: 'temporal',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                peakTime: pattern.timeOfDay,
                frequency: pattern.frequency
              }
            });
            break;
          case 'peak_day':
            insights.push({
              text: `${pattern.dayOfWeek} günleri kompulsiyonlarınız daha sık görülüyor. Bu günler için özel stratejiler geliştirebilirsiniz.`,
              category: 'temporal',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                peakDay: pattern.dayOfWeek,
                frequency: pattern.frequency
              }
            });
            break;
          case 'clustering':
            insights.push({
              text: 'Kompulsiyonlarınız kümelenmede meydana geliyor. Bir kompulsiyondan sonra diğerlerini tetiklemeyi önlemek için ara teknikler kullanabilirsiniz.',
              category: 'temporal',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                clusterCount: pattern.clusters.length
              }
            });
            break;
          case 'mood_trend':
            if (pattern.direction === 'improving') {
              insights.push({
                text: 'Ruh haliniz son zamanlarda iyileşme eğiliminde! Bu pozitif trendi sürdürmeye odaklanın.',
                category: 'progress',
                priority: 'high',
                actionable: false,
                confidence: pattern.confidence,
                data: {
                  trend: pattern.direction,
                  strength: pattern.strength
                }
              });
            } else if (pattern.direction === 'declining') {
              insights.push({
                text: 'Ruh halinizde düşüş gözleniyor. Destek stratejilerinizi devreye sokmak için uygun bir zaman olabilir.',
                category: 'alert',
                priority: 'high',
                actionable: true,
                confidence: pattern.confidence,
                data: {
                  trend: pattern.direction,
                  strength: pattern.strength
                }
              });
            }
            break;
          case 'therapy_progress':
            if (pattern.direction === 'improving') {
              insights.push({
                text: 'Terapi seanslarınızda ilerleme kaydediyorsunuz! Mevcut yaklaşımınızı sürdürün.',
                category: 'progress',
                priority: 'high',
                actionable: false,
                confidence: pattern.confidence,
                data: {
                  direction: pattern.direction,
                  consistency: pattern.consistency
                }
              });
            }
            break;
        }
      });
      return insights;
    }
  }, {
    key: "generateBehavioralInsights",
    value: function generateBehavioralInsights(behavioralPatterns) {
      var insights = [];
      behavioralPatterns.forEach(function (pattern) {
        switch (pattern.type) {
          case 'dominant_category':
            insights.push({
              text: `Kompulsiyonlarınızın %${pattern.percentage}'i ${pattern.category} kategorisinde. Bu alana özel müdahaleler geliştirebilirsiniz.`,
              category: 'behavioral',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                category: pattern.category,
                percentage: pattern.percentage
              }
            });
            break;
          case 'duration_pattern':
            if (pattern.trend === 'increasing') {
              insights.push({
                text: `Kompulsiyon süreleriniz artış eğiliminde (ortalama ${pattern.averageDuration} dakika). Durdurma stratejilerinizi gözden geçirin.`,
                category: 'behavioral',
                priority: 'medium',
                actionable: true,
                confidence: pattern.confidence,
                data: {
                  averageDuration: pattern.averageDuration,
                  trend: pattern.trend
                }
              });
            } else if (pattern.trend === 'decreasing') {
              insights.push({
                text: `Kompulsiyon süreleriniz azalıyor! Bu olumlu gelişimi sürdürün.`,
                category: 'progress',
                priority: 'medium',
                actionable: false,
                confidence: pattern.confidence,
                data: {
                  averageDuration: pattern.averageDuration,
                  trend: pattern.trend
                }
              });
            }
            break;
          case 'compulsion_indicator':
            insights.push({
              text: `${pattern.category} tipi kompulsiyonlara yönelik belirtiler tespit edildi. Bu alana özel egzersizler faydalı olabilir.`,
              category: 'behavioral',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                category: pattern.category,
                intensity: pattern.intensity
              }
            });
            break;
        }
      });
      return insights;
    }
  }, {
    key: "generateTriggerInsights",
    value: function generateTriggerInsights(triggerPatterns) {
      var insights = [];
      triggerPatterns.forEach(function (pattern) {
        switch (pattern.type) {
          case 'situational':
            insights.push({
              text: `"${pattern.description}" sıklıkla tetikleyici oluyor. Bu durumlar için önceden stratejiler hazırlayabilirsiniz.`,
              category: 'trigger',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                trigger: pattern.description,
                frequency: pattern.frequency
              }
            });
            break;
          case 'emotional':
            var emotionTurkish = {
              'anxiety': 'kaygı',
              'stress': 'stres',
              'perfectionism': 'mükemmeliyetçilik'
            };
            insights.push({
              text: `${emotionTurkish[pattern.trigger] || pattern.trigger} durumlarında kompulsiyonlar tetikleniyor. Duygu düzenleme tekniklerini devreye alın.`,
              category: 'trigger',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                emotionalTrigger: pattern.trigger
              }
            });
            break;
          case 'location':
            insights.push({
              text: `${pattern.trigger} konumunda kompulsiyonlar sıklıkla görülüyor. Bu ortamda özel önlemler alabilirsiniz.`,
              category: 'trigger',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                location: pattern.trigger,
                frequency: pattern.frequency
              }
            });
            break;
        }
      });
      return insights;
    }
  }, {
    key: "generateSeverityInsights",
    value: function generateSeverityInsights(severityPatterns) {
      var insights = [];
      severityPatterns.forEach(function (pattern) {
        if (pattern.type === 'severity_trend') {
          switch (pattern.direction) {
            case 'improving':
              insights.push({
                metric: 'severity_trend',
                value: pattern.recentAverage,
                change: -pattern.strength,
                interpretation: `Şiddet düzeyinde iyileşme var! Son veriler ${pattern.recentAverage.toFixed(1)} ortalama gösteriyor.`,
                confidence: pattern.confidence
              });
              break;
            case 'worsening':
              insights.push({
                metric: 'severity_trend',
                value: pattern.recentAverage,
                change: pattern.strength,
                interpretation: `Şiddet düzeyinde artış gözleniyor. Destek stratejilerini devreye alma zamanı.`,
                confidence: pattern.confidence
              });
              break;
            case 'stable':
              insights.push({
                metric: 'severity_trend',
                value: pattern.recentAverage,
                change: 0,
                interpretation: 'Şiddet düzeyi stabil seyrediyor.',
                confidence: pattern.confidence
              });
              break;
          }
        }
      });
      return insights;
    }
  }, {
    key: "generateEnvironmentalInsights",
    value: function generateEnvironmentalInsights(environmentalPatterns) {
      var insights = [];
      environmentalPatterns.forEach(function (pattern) {
        if (pattern.type === 'location') {
          insights.push({
            text: `${pattern.trigger} konumunda kompulsiyonlar sık görülüyor. Bu ortamda tetik faktörlerini belirleyip önlem almayı düşünün.`,
            category: 'environmental',
            priority: 'medium',
            actionable: true,
            confidence: pattern.confidence,
            data: {
              location: pattern.trigger,
              frequency: pattern.frequency
            }
          });
        }
      });
      return insights;
    }
  }, {
    key: "generateProgressInsights",
    value: function generateProgressInsights(patterns, input) {
      var insights = [];
      if (patterns.metadata && patterns.metadata.dataPoints > 10) {
        insights.push({
          metric: 'data_richness',
          value: patterns.metadata.dataPoints,
          change: 0,
          interpretation: `${patterns.metadata.dataPoints} veri noktası ile güçlü bir analiz yapabiliyoruz.`,
          confidence: 0.9
        });
      }
      if (patterns.metadata && patterns.metadata.confidence > 0.7) {
        insights.push({
          metric: 'pattern_confidence',
          value: Math.round(patterns.metadata.confidence * 100),
          change: 0,
          interpretation: `Kalıp tespitinde %${Math.round(patterns.metadata.confidence * 100)} güven düzeyi.`,
          confidence: patterns.metadata.confidence
        });
      }
      return insights;
    }
  }, {
    key: "generateMotivationalInsights",
    value: function generateMotivationalInsights(patterns) {
      var insights = [];
      if (patterns.temporal && patterns.temporal.length > 0) {
        insights.push({
          text: 'Verilerinizi analiz etmek, kendi kalıplarınızı anlamanızı sağlıyor. Bu farkındalık iyileşmenin ilk adımıdır.',
          category: 'motivational',
          priority: 'low',
          actionable: false,
          confidence: 0.8
        });
      }
      if (patterns.metadata && patterns.metadata.dataPoints >= 5) {
        insights.push({
          text: 'Düzenli kayıt tutmaya devam ediyorsunuz. Bu tutarlılık uzun vadeli başarının anahtarı!',
          category: 'motivational',
          priority: 'low',
          actionable: false,
          confidence: 0.9
        });
      }
      return insights;
    }
  }, {
    key: "generateCrossPatternInsights",
    value: function generateCrossPatternInsights(patterns) {
      var insights = [];
      if (patterns.temporal && patterns.behavioral && patterns.temporal.length > 0 && patterns.behavioral.length > 0) {
        insights.push({
          text: 'Zaman kalıplarınız ile davranış örüntüleriniz arasında bağlantı var. Bu ilişkiyi anlayarak daha etkili stratejiler geliştirebilirsiniz.',
          category: 'complex_pattern',
          priority: 'medium',
          actionable: true,
          confidence: 0.7,
          data: {
            temporalPatterns: patterns.temporal.length,
            behavioralPatterns: patterns.behavioral.length
          }
        });
      }
      if (patterns.severity && patterns.temporal && patterns.severity.length > 0) {
        var hasSeverePattern = patterns.severity.some(function (s) {
          return s.direction === 'worsening';
        });
        if (hasSeverePattern) {
          insights.push({
            text: 'Şiddet artışı ile zaman kalıpları birleştiğinde, öngörülü müdahale planları önem kazanıyor.',
            category: 'strategic',
            priority: 'high',
            actionable: true,
            confidence: 0.8
          });
        }
      }
      return insights;
    }
  }, {
    key: "calculateInsightsMetadata",
    value: function calculateInsightsMetadata(insights) {
      var allInsights = [].concat((0, _toConsumableArray2.default)(insights.therapeutic), (0, _toConsumableArray2.default)(insights.progress), (0, _toConsumableArray2.default)(insights.behavioral), (0, _toConsumableArray2.default)(insights.motivational));
      var categories = (0, _toConsumableArray2.default)(new Set(allInsights.map(function (insight) {
        return insight.category || 'unknown';
      })));
      var avgConfidence = allInsights.reduce(function (sum, insight) {
        return sum + (insight.confidence || 0.5);
      }, 0) / allInsights.length;
      return {
        generatedAt: Date.now(),
        confidence: avgConfidence || 0,
        totalInsights: allInsights.length,
        categories: categories
      };
    }
  }, {
    key: "prioritizeInsights",
    value: function prioritizeInsights(insights) {
      var priorityOrder = {
        'high': 3,
        'medium': 2,
        'low': 1
      };
      return insights.sort(function (a, b) {
        var aPriority = priorityOrder[a.priority] || 0;
        var bPriority = priorityOrder[b.priority] || 0;
        if (aPriority !== bPriority) {
          return bPriority - aPriority;
        }
        return (b.confidence || 0) - (a.confidence || 0);
      });
    }
  }, {
    key: "shouldRunBreathwork",
    value: function shouldRunBreathwork(input) {
      return true;
    }
  }, {
    key: "processBreathworkAnalysis",
    value: (function () {
      var _processBreathworkAnalysis = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var context = {
            moodScore: this.extractMoodFromInput(input),
            anxietyLevel: this.extractAnxietyFromInput(input),
            recentCompulsions: this.extractRecentCompulsions(input),
            userInput: typeof input.content === 'string' ? input.content : undefined
          };
          try {
            var _yield$import3 = yield import("../services/breathworkSuggestionService"),
              breathworkSuggestionService = _yield$import3.breathworkSuggestionService;
            var suggestion = yield breathworkSuggestionService.generateSuggestion(Object.assign({
              userId: input.userId
            }, context, {
              currentTime: new Date()
            }));
            if (suggestion) {
              return {
                hasBreathworkSuggestion: true,
                suggestion: {
                  id: suggestion.id,
                  trigger: suggestion.trigger,
                  protocol: suggestion.protocol,
                  urgency: suggestion.urgency,
                  customization: suggestion.customization,
                  timing: suggestion.timing,
                  metadata: {
                    confidence: suggestion.trigger.confidence,
                    source: 'ai_breathwork_service',
                    generatedAt: suggestion.metadata.generatedAt,
                    priority: suggestion.metadata.priority
                  }
                },
                enhancement: {
                  contextualRelevance: this.calculateBreathworkRelevance(context),
                  fallbackProtocols: suggestion.metadata.fallbackOptions,
                  adaptations: {
                    userPreferences: true,
                    urgencyAdjusted: suggestion.urgency !== 'low',
                    protocolCustomized: suggestion.protocol.name !== 'box'
                  }
                }
              };
            }
          } catch (serviceError) {
            console.warn('Breathwork service unavailable, using fallback:', serviceError);
            return this.processBreathworkHeuristics(context);
          }
          return {
            hasBreathworkSuggestion: false
          };
        } catch (error) {
          console.error('Breathwork analysis failed:', error);
          return {
            hasBreathworkSuggestion: false,
            error: 'analysis_failed'
          };
        }
      });
      function processBreathworkAnalysis(_x0) {
        return _processBreathworkAnalysis.apply(this, arguments);
      }
      return processBreathworkAnalysis;
    }())
  }, {
    key: "processBreathworkHeuristics",
    value: function processBreathworkHeuristics(context) {
      var anxietyLevel = context.anxietyLevel || 5;
      var moodScore = context.moodScore;
      var recentCompulsions = context.recentCompulsions || 0;
      var needsBreathwork = false;
      var urgency = 'low';
      var triggerType = 'maintenance';
      if (anxietyLevel >= 8) {
        needsBreathwork = true;
        urgency = 'high';
        triggerType = 'anxiety';
      } else if (anxietyLevel >= 6) {
        needsBreathwork = true;
        urgency = 'medium';
        triggerType = 'anxiety';
      } else if (moodScore && moodScore <= 4) {
        needsBreathwork = true;
        urgency = 'medium';
        triggerType = 'low_mood';
      } else if (recentCompulsions >= 2) {
        needsBreathwork = true;
        urgency = 'medium';
        triggerType = 'post_compulsion';
      }
      if (!needsBreathwork) {
        return {
          hasBreathworkSuggestion: false
        };
      }
      var protocol = 'box';
      if (anxietyLevel >= 8) protocol = 'quick_calm';else if (anxietyLevel >= 6) protocol = '4-7-8';else if (moodScore && moodScore <= 3) protocol = 'paced';
      return {
        hasBreathworkSuggestion: true,
        suggestion: {
          id: `heuristic_${Date.now()}`,
          trigger: {
            type: triggerType,
            confidence: anxietyLevel >= 7 ? 0.8 : 0.6,
            contextData: {
              anxietyLevel: anxietyLevel,
              moodScore: moodScore,
              recentCompulsions: recentCompulsions
            }
          },
          protocol: {
            name: protocol,
            duration: protocol === 'quick_calm' ? 120 : 300
          },
          urgency: urgency,
          metadata: {
            confidence: anxietyLevel >= 7 ? 0.8 : 0.6,
            source: 'heuristic_fallback',
            generatedAt: Date.now()
          }
        },
        enhancement: {
          contextualRelevance: this.calculateBreathworkRelevance(context),
          fallbackProtocols: ['box', 'paced'],
          adaptations: {
            userPreferences: false,
            urgencyAdjusted: urgency !== 'low',
            protocolCustomized: false
          }
        }
      };
    }
  }, {
    key: "extractMoodFromInput",
    value: function extractMoodFromInput(input) {
      if (typeof input.content === 'object' && input.content.mood) {
        return input.content.mood;
      }
      if (typeof input.content === 'string') {
        var text = input.content.toLowerCase();
        if (/çok.*?(kötü|berbat|mutsuz)/i.test(text)) return 2;
        if (/kötü|üzgün|keyifsiz/i.test(text)) return 4;
        if (/iyi|güzel|mutlu/i.test(text)) return 7;
        if (/(çok|aşırı).*?(iyi|mutlu|harika)/i.test(text)) return 9;
      }
      return undefined;
    }
  }, {
    key: "extractAnxietyFromInput",
    value: function extractAnxietyFromInput(input) {
      if (typeof input.content === 'object' && input.content.anxiety) {
        return input.content.anxiety;
      }
      if (typeof input.content === 'string') {
        var text = input.content.toLowerCase();
        var anxietyScore = 0;
        if (/panik|dehşet|korkunç|dayanamıyorum/i.test(text)) anxietyScore += 4;
        if (/kaygı|endişe|gergin/i.test(text)) anxietyScore += 2;
        if (/(çok|aşırı).*?(kaygılı|endişeli|gergin)/i.test(text)) anxietyScore += 3;
        if (/nefes.*?alamıyorum|çarpıntı|titreme/i.test(text)) anxietyScore += 3;
        return Math.min(anxietyScore, 10);
      }
      return 5;
    }
  }, {
    key: "extractRecentCompulsions",
    value: function extractRecentCompulsions(input) {
      if (typeof input.content === 'object' && input.content.compulsions) {
        if (Array.isArray(input.content.compulsions)) {
          var yesterday = Date.now() - 24 * 60 * 60 * 1000;
          return input.content.compulsions.filter(function (c) {
            return c.timestamp && new Date(c.timestamp).getTime() > yesterday;
          }).length;
        }
      }
      if (typeof input.content === 'string') {
        var compulsionWords = /kontrol.*?etti?m|tekrar.*?bakt?ım|yıka.*?dım|temizle.*?dim|say.*?dım/gi;
        var matches = input.content.match(compulsionWords);
        return matches ? matches.length : 0;
      }
      return 0;
    }
  }, {
    key: "calculateBreathworkRelevance",
    value: function calculateBreathworkRelevance(context) {
      var relevance = 0.3;
      if (context.anxietyLevel && context.anxietyLevel >= 6) relevance += 0.4;
      if (context.moodScore && context.moodScore <= 4) relevance += 0.3;
      if (context.recentCompulsions && context.recentCompulsions >= 1) relevance += 0.2;
      if (context.userInput && /nefes|sakin|rahatlat/i.test(context.userInput)) relevance += 0.3;
      return Math.min(relevance, 1.0);
    }
  }, {
    key: "extractTemporalPatterns",
    value: function extractTemporalPatterns(compulsions) {
      if (!compulsions || !Array.isArray(compulsions)) return [];
      var SAMPLE_SIZE = 50;
      var recentCompulsions = compulsions.sort(function (a, b) {
        return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
      }).slice(0, SAMPLE_SIZE);
      var hourGroups = {};
      recentCompulsions.forEach(function (c) {
        var hour = new Date(c.timestamp).getHours();
        hourGroups[hour] = (hourGroups[hour] || 0) + 1;
      });
      var patterns = [];
      var maxPatterns = 5;
      Object.entries(hourGroups).sort(function (_ref14, _ref15) {
        var _ref16 = (0, _slicedToArray2.default)(_ref14, 2),
          a = _ref16[1];
        var _ref17 = (0, _slicedToArray2.default)(_ref15, 2),
          b = _ref17[1];
        return b - a;
      }).forEach(function (_ref18) {
        var _ref19 = (0, _slicedToArray2.default)(_ref18, 2),
          hour = _ref19[0],
          count = _ref19[1];
        if (patterns.length >= maxPatterns) return;
        if (count > 2) {
          patterns.push({
            type: 'peak_hour',
            frequency: count,
            timeOfDay: `${hour}:00`,
            trend: 'stable',
            sampleSize: recentCompulsions.length
          });
        }
      });
      return patterns;
    }
  }, {
    key: "extractBehavioralPatterns",
    value: function extractBehavioralPatterns(compulsions) {
      var _this = this;
      if (!compulsions || !Array.isArray(compulsions)) return [];
      var SAMPLE_SIZE = 50;
      var recentCompulsions = compulsions.sort(function (a, b) {
        return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
      }).slice(0, SAMPLE_SIZE);
      var triggerGroups = {};
      recentCompulsions.forEach(function (c) {
        var trigger = c.trigger || 'unknown';
        if (!triggerGroups[trigger]) {
          triggerGroups[trigger] = {
            count: 0,
            totalSeverity: 0
          };
        }
        triggerGroups[trigger].count++;
        triggerGroups[trigger].totalSeverity += _this.getCompulsionSeverity(c);
      });
      var patterns = [];
      var maxPatterns = 6;
      Object.entries(triggerGroups).sort(function (_ref20, _ref21) {
        var _ref22 = (0, _slicedToArray2.default)(_ref20, 2),
          a = _ref22[1];
        var _ref23 = (0, _slicedToArray2.default)(_ref21, 2),
          b = _ref23[1];
        return b.count - a.count;
      }).forEach(function (_ref24) {
        var _ref25 = (0, _slicedToArray2.default)(_ref24, 2),
          trigger = _ref25[0],
          data = _ref25[1];
        if (patterns.length >= maxPatterns) return;
        if (data.count >= 2) {
          patterns.push({
            trigger: trigger,
            response: 'compulsion',
            frequency: data.count,
            severity: Math.round(data.totalSeverity / data.count),
            sampleSize: recentCompulsions.length
          });
        }
      });
      return patterns;
    }
  }, {
    key: "shouldRunCBT",
    value: function shouldRunCBT(input) {
      var _input$context5;
      return input.type === 'voice' || ((_input$context5 = input.context) == null ? void 0 : _input$context5.source) === 'cbt' || typeof input.content === 'string' && input.content.length > 50;
    }
  }, {
    key: "getEnabledModules",
    value: function getEnabledModules() {
      var modules = [];
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_VOICE')) modules.push('voice');
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_PATTERNS')) modules.push('patterns');
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_INSIGHTS')) modules.push('insights');
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_CBT')) modules.push('cbt');
      return modules;
    }
  }, {
    key: "generateCacheKey",
    value: function generateCacheKey(input) {
      var _input$context6;
      var data = {
        userId: input.userId,
        type: input.type,
        content: typeof input.content === 'string' ? input.content.substring(0, 100) : JSON.stringify(input.content).substring(0, 100),
        source: (_input$context6 = input.context) == null ? void 0 : _input$context6.source
      };
      return `unified:${input.userId}:${simpleHash(JSON.stringify(data))}`;
    }
  }, {
    key: "getFromCache",
    value: function () {
      var _getFromCache = (0, _asyncToGenerator2.default)(function* (key) {
        var memoryCache = this.cache.get(key);
        if (memoryCache) {
          if (memoryCache.expires < Date.now()) {
            this.cache.delete(key);
          } else {
            var insightsCount = this.countTotalInsights(memoryCache.result);
            var remainingTTL = memoryCache.expires - Date.now();
            var fiveMinutes = 5 * 60 * 1000;
            if (insightsCount === 0 && remainingTTL < fiveMinutes) {
              console.log(`🚫 Bypassing negative cache: insightsCount=${insightsCount}, remainingTTL=${Math.round(remainingTTL / 60000)}min`);
              this.cache.delete(key);
            } else {
              return memoryCache.result;
            }
          }
        }
        try {
          var supabaseCached = yield this.getFromSupabaseCache(key);
          if (supabaseCached) {
            var _insightsCount = this.countTotalInsights(supabaseCached);
            if (_insightsCount === 0) {
              console.log(`🚫 Bypassing negative Supabase cache: insightsCount=${_insightsCount}`);
            } else {
              this.cache.set(key, {
                result: supabaseCached,
                expires: Date.now() + this.MODULE_TTLS.default
              });
              console.log('📦 Cache restored from Supabase:', key.substring(0, 30) + '...');
              return supabaseCached;
            }
          }
        } catch (error) {
          console.warn('⚠️ Supabase cache read failed:', error);
        }
        try {
          var offlineCache = yield _asyncStorage.default.getItem(key);
          if (offlineCache) {
            var parsed = JSON.parse(offlineCache);
            if (parsed.expires > Date.now()) {
              var _insightsCount2 = this.countTotalInsights(parsed.result);
              if (_insightsCount2 === 0) {
                console.log(`🚫 Bypassing negative AsyncStorage cache: insightsCount=${_insightsCount2}`);
                yield _asyncStorage.default.removeItem(key);
              } else {
                console.log('📱 Cache restored from AsyncStorage:', key.substring(0, 30) + '...');
                return parsed.result;
              }
            } else {
              yield _asyncStorage.default.removeItem(key);
            }
          }
        } catch (error) {
          console.warn('⚠️ AsyncStorage cache read failed:', error);
        }
        return null;
      });
      function getFromCache(_x1) {
        return _getFromCache.apply(this, arguments);
      }
      return getFromCache;
    }()
  }, {
    key: "setCache",
    value: function setCache(key, result, ttl) {
      var cacheTTL = this.isTestMode ? this.testTTL : ttl || this.MODULE_TTLS.default;
      this.cache.set(key, {
        result: result,
        expires: Date.now() + cacheTTL
      });
      this.setToSupabaseCache(key, result);
      this.persistToStorage(key, result);
      var ttlDisplay = this.isTestMode ? `${cacheTTL}ms (TEST MODE)` : `${Math.round(cacheTTL / (60 * 60 * 1000))}h`;
      console.log(`📦 Cache set with ${ttlDisplay} TTL:`, key.substring(0, 30) + '...');
    }
  }, {
    key: "setCacheWithInsightsPolicy",
    value: function setCacheWithInsightsPolicy(key, result, input) {
      var insightsCount = this.countTotalInsights(result);
      var moduleTTL = this.getModuleTTL(input);
      if (insightsCount === 0) {
        var shortTTL = this.isTestMode ? this.testTTL : 5 * 60 * 1000;
        var ttlDisplay = this.isTestMode ? `${shortTTL}ms (TEST)` : `${shortTTL / 60000}min`;
        console.log(`📦 Empty insights detected (${insightsCount}), using short TTL: ${ttlDisplay}`);
        this.setCache(key, result, shortTTL);
        (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
          userId: input.userId,
          source: 'empty_cache_policy',
          insightsCount: 0,
          cacheKey: key,
          shortTTL: shortTTL
        }).catch(console.warn);
        return;
      }
      console.log(`📦 Caching meaningful insights (${insightsCount}), using full TTL: ${Math.round(moduleTTL / (60 * 60 * 1000))}h`);
      this.setCache(key, result, moduleTTL);
    }
  }, {
    key: "countTotalInsights",
    value: function countTotalInsights(result) {
      if (!result.insights) return 0;
      var _result$insights = result.insights,
        _result$insights$ther = _result$insights.therapeutic,
        therapeutic = _result$insights$ther === void 0 ? [] : _result$insights$ther,
        _result$insights$prog = _result$insights.progress,
        progress = _result$insights$prog === void 0 ? [] : _result$insights$prog,
        _result$insights$beha = _result$insights.behavioral,
        behavioral = _result$insights$beha === void 0 ? [] : _result$insights$beha,
        _result$insights$moti = _result$insights.motivational,
        motivational = _result$insights$moti === void 0 ? [] : _result$insights$moti;
      return therapeutic.length + progress.length + behavioral.length + motivational.length;
    }
  }, {
    key: "invalidateStaleCache",
    value: (function () {
      var _invalidateStaleCache = (0, _asyncToGenerator2.default)(function* () {
        var invalidatedCount = 0;
        var reason = 'manual_refresh_cleanup';
        try {
          var memoryKeys = Array.from(this.cache.keys());
          for (var key of memoryKeys) {
            var cached = this.cache.get(key);
            if (cached && this.countTotalInsights(cached.result) === 0) {
              this.cache.delete(key);
              invalidatedCount++;
              console.log(`🧹 Invalidated stale memory cache: ${key.substring(0, 30)}...`);
            }
          }
          var allKeys = yield _asyncStorage.default.getAllKeys();
          var unifiedKeys = allKeys.filter(function (key) {
            return key.startsWith('unified:');
          });
          for (var _key of unifiedKeys) {
            try {
              var _cached = yield _asyncStorage.default.getItem(_key);
              if (_cached) {
                var parsed = JSON.parse(_cached);
                if (parsed.result && this.countTotalInsights(parsed.result) === 0) {
                  yield _asyncStorage.default.removeItem(_key);
                  invalidatedCount++;
                  console.log(`🧹 Removed stale AsyncStorage cache: ${_key.substring(0, 30)}...`);
                }
              }
            } catch (error) {
              console.warn(`⚠️ Failed to clean cache key ${_key}:`, error);
            }
          }
          console.log(`✅ Cache cleanup completed: ${invalidatedCount} stale entries removed`);
          return {
            invalidated: invalidatedCount,
            reason: reason
          };
        } catch (error) {
          console.error('❌ Cache cleanup failed:', error);
          return {
            invalidated: invalidatedCount,
            reason: 'cleanup_failed'
          };
        }
      });
      function invalidateStaleCache() {
        return _invalidateStaleCache.apply(this, arguments);
      }
      return invalidateStaleCache;
    }())
  }, {
    key: "analyzeTrackingTrends",
    value: function analyzeTrackingTrends(entries) {
      if (!Array.isArray(entries) || entries.length < 5) return [];
      var patterns = [];
      var hourCounts = new Array(24).fill(0);
      entries.forEach(function (entry) {
        var timestamp = entry.timestamp || entry.created_at;
        var hour = new Date(timestamp).getHours();
        hourCounts[hour]++;
      });
      var peakHours = hourCounts.map(function (count, hour) {
        return {
          hour: hour,
          count: count
        };
      }).sort(function (a, b) {
        return b.count - a.count;
      }).slice(0, 3);
      if (peakHours[0].count >= 3) {
        patterns.push({
          type: 'time_pattern',
          title: `${peakHours[0].hour}:00 Saatinde Yoğunluk`,
          description: `En çok kompülsiyon ${peakHours[0].hour}:00 saatinde yaşanıyor (${peakHours[0].count} kez).`,
          suggestion: 'Bu saatlerde önleyici teknikler uygulayın.',
          confidence: 0.8,
          severity: 'medium'
        });
      }
      var recentEntries = entries.slice(-10);
      var resistanceSum = recentEntries.reduce(function (sum, e) {
        return sum + (e.resistanceLevel || e.resistance_level || 5);
      }, 0);
      var avgResistance = resistanceSum / recentEntries.length;
      if (avgResistance >= 7) {
        patterns.push({
          type: 'progress_pattern',
          title: 'Güçlü Direnç Trendi',
          description: `Son kompülsiyonlarda ortalama ${avgResistance.toFixed(1)} direnç seviyesi.`,
          suggestion: 'Mükemmel ilerleme! Bu motivasyonu koruyun.',
          confidence: 0.9,
          severity: 'positive'
        });
      } else if (avgResistance <= 3) {
        patterns.push({
          type: 'warning_pattern',
          title: 'Düşük Direnç Uyarısı',
          description: `Son kompülsiyonlarda ortalama ${avgResistance.toFixed(1)} direnç seviyesi.`,
          suggestion: 'Terapi egzersizleri ve mindfulness teknikleri deneyin.',
          confidence: 0.85,
          severity: 'warning'
        });
      }
      return patterns;
    }
  }, {
    key: "generateFallbackInsights",
    value: function generateFallbackInsights(patterns, input) {
      var fallback = {
        therapeutic: [],
        progress: []
      };
      try {
        var _input$context7, _patterns$metadata;
        if (input.content && typeof input.content === 'object' && Array.isArray(input.content.compulsions)) {
          var compulsions = input.content.compulsions;
          var trackingPatterns = this.analyzeTrackingTrends(compulsions);
          trackingPatterns.forEach(function (pattern) {
            var insight = {
              text: pattern.description + ' ' + pattern.suggestion,
              category: pattern.type,
              priority: pattern.severity === 'positive' ? 'high' : 'medium',
              actionable: true,
              confidence: pattern.confidence,
              source: 'fallback_tracking'
            };
            if (pattern.severity === 'positive') {
              fallback.progress.push(insight);
            } else {
              fallback.therapeutic.push(insight);
            }
          });
        }
        if (patterns.temporal && patterns.temporal.length > 0) {
          var peakPattern = patterns.temporal[0];
          if (peakPattern.type === 'peak_hour' || peakPattern.frequency > 2) {
            fallback.therapeutic.push({
              text: `${peakPattern.timeOfDay || 'Belirli saatlerde'} daha yoğun aktivite görülüyor. Bu zamanlarda destek stratejilerini hatırlamak faydalı olabilir.`,
              category: 'temporal_awareness',
              priority: 'medium',
              actionable: true,
              confidence: 0.7,
              source: 'fallback_temporal'
            });
          }
        }
        if (patterns.behavioral && patterns.behavioral.length > 0) {
          var dominantPattern = patterns.behavioral.sort(function (a, b) {
            return (b.frequency || 0) - (a.frequency || 0);
          })[0];
          if (dominantPattern.trigger && dominantPattern.frequency > 1) {
            fallback.therapeutic.push({
              text: `En sık görülen tetik "${dominantPattern.trigger}" için alternatif başa çıkma stratejileri geliştirmek yararlı olabilir.`,
              category: 'behavioral_insight',
              priority: 'medium',
              actionable: true,
              confidence: 0.6,
              source: 'fallback_behavioral'
            });
          }
        }
        if (patterns.triggers && patterns.triggers.length > 0) {
          var commonTrigger = patterns.triggers[0];
          fallback.therapeutic.push({
            text: `Çevresel faktörlerin etkisini fark etmek önemli bir adım. Tetikleyici durumları önceden tanımak güçlendirici olabilir.`,
            category: 'environmental_awareness',
            priority: 'low',
            actionable: true,
            confidence: 0.5,
            source: 'fallback_environmental'
          });
        }
        if ((_input$context7 = input.context) != null && _input$context7.source) {
          fallback.progress.push({
            text: `Veri toplama ve takip süreci aktif. Bu tutarlılık, ilerlemeyi değerlendirmek için değerli bir kaynak oluşturuyor.`,
            category: 'progress_tracking',
            priority: 'low',
            actionable: true,
            confidence: 0.8,
            source: 'fallback_progress'
          });
        }
        var dataPoints = ((_patterns$metadata = patterns.metadata) == null ? void 0 : _patterns$metadata.dataPoints) || 0;
        if (dataPoints >= 5) {
          fallback.progress.push({
            text: `${dataPoints} veri noktası toplandı. Bu bilgiler zaman içinde daha detaylı kalıp analizi için yeterli olacak.`,
            category: 'data_sufficiency',
            priority: 'low',
            actionable: false,
            confidence: 0.9,
            source: 'fallback_data_quality'
          });
        }
        console.log(`🔄 Generated ${fallback.therapeutic.length + fallback.progress.length} fallback insights`);
      } catch (error) {
        console.warn('Fallback insight generation failed:', error);
        fallback.therapeutic.push({
          text: 'Veriler analiz ediliyor. Daha fazla veri toplandığında detaylı içgörüler sunulacak.',
          category: 'system_status',
          priority: 'low',
          actionable: false,
          confidence: 0.5,
          source: 'fallback_minimal'
        });
      }
      return fallback;
    }
  }, {
    key: "generateVoiceEnhancedInsights",
    value: function generateVoiceEnhancedInsights(voiceHints, patterns) {
      var insights = [];
      try {
        var voiceCategory = voiceHints.voiceCategory,
          voiceConfidence = voiceHints.voiceConfidence,
          voiceSuggestion = voiceHints.voiceSuggestion;
        switch (voiceCategory) {
          case 'OCD':
            insights.push({
              text: `Ses analizinde OKB ile ilişkili içerik tespit edildi. ${voiceSuggestion || 'Mevcut başa çıkma stratejilerinizi hatırlamak faydalı olabilir.'}`,
              category: 'voice_ocd_detection',
              priority: 'high',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            if (patterns.behavioral && patterns.behavioral.length > 0) {
              var dominantPattern = patterns.behavioral[0];
              insights.push({
                text: `Davranışsal kalıplar ve ses analizi birlikte değerlendirildiğinde, "${dominantPattern.trigger || 'belirli durumlar'}" için ERP teknikleri uygulamak yararlı olabilir.`,
                category: 'voice_pattern_correlation',
                priority: 'medium',
                actionable: true,
                confidence: Math.min(voiceConfidence, 0.8),
                source: 'voice_enhanced'
              });
            }
            break;
          case 'CBT':
            insights.push({
              text: `Bilişsel distorsyonlar ile ilgili düşünceler tespit edildi. ${voiceSuggestion || 'Düşünce-duygu-davranış üçgenini incelemek faydalı olabilir.'}`,
              category: 'voice_cbt_detection',
              priority: 'high',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            break;
          case 'MOOD':
            insights.push({
              text: `Duygu durum ile ilgili ifadeler algılandı. ${voiceSuggestion || 'Mood tracking verileriniz ile birlikte değerlendirildiğinde daha detaylı analiz yapılabilir.'}`,
              category: 'voice_mood_detection',
              priority: 'medium',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            break;
          case 'BREATHWORK':
            insights.push({
              text: `Nefes çalışması veya rahatlama ile ilgili gereksinim tespit edildi. ${voiceSuggestion || 'Derin nefes teknikleri şu anda yararlı olabilir.'}`,
              category: 'voice_breathwork_suggestion',
              priority: 'medium',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            break;
          default:
            if (voiceConfidence > 0.5) {
              insights.push({
                text: `Ses analizinde önemli içerik tespit edildi. Bu durum için mevcut destek stratejilerinizi kullanmayı değerlendirebilirsiniz.`,
                category: 'voice_general_detection',
                priority: 'low',
                actionable: true,
                confidence: voiceConfidence,
                source: 'voice_enhanced'
              });
            }
        }
      } catch (error) {
        console.warn('Voice-enhanced insight generation failed:', error);
      }
      return insights;
    }
  }, {
    key: "persistToStorage",
    value: function () {
      var _persistToStorage = (0, _asyncToGenerator2.default)(function* (key, result) {
        try {
          yield _asyncStorage.default.setItem(key, JSON.stringify({
            result: result,
            expires: Date.now() + this.MODULE_TTLS.default
          }));
        } catch (error) {
          console.warn('Failed to persist to storage:', error);
        }
      });
      function persistToStorage(_x10, _x11) {
        return _persistToStorage.apply(this, arguments);
      }
      return persistToStorage;
    }()
  }, {
    key: "getFromSupabaseCache",
    value: (function () {
      var _getFromSupabaseCache = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          var _yield$supabaseServic = yield _supabase.default.supabaseClient.from('ai_cache').select('content').eq('cache_key', key).maybeSingle(),
            data = _yield$supabaseServic.data,
            error = _yield$supabaseServic.error;
          if (error) {
            console.warn('⚠️ Supabase cache read error:', error);
            return null;
          }
          if (!data) {
            return null;
          }
          return data.content;
        } catch (error) {
          console.warn('⚠️ Supabase cache read failed:', error);
          return null;
        }
      });
      function getFromSupabaseCache(_x12) {
        return _getFromSupabaseCache.apply(this, arguments);
      }
      return getFromSupabaseCache;
    }())
  }, {
    key: "setToSupabaseCache",
    value: function () {
      var _setToSupabaseCache = (0, _asyncToGenerator2.default)(function* (key, result) {
        try {
          var userId = key.split(':')[1];
          var _yield$supabaseServic2 = yield _supabase.default.supabaseClient.from('ai_cache').upsert({
              cache_key: key,
              user_id: userId,
              content: result
            }, {
              onConflict: 'cache_key'
            }),
            error = _yield$supabaseServic2.error;
          if (error) {
            console.warn('⚠️ Supabase cache write error:', error);
          } else {
            console.log('📦 Cached to Supabase:', key.substring(0, 30) + '...');
          }
        } catch (error) {
          console.warn('⚠️ Supabase cache write failed:', error);
        }
      });
      function setToSupabaseCache(_x13, _x14) {
        return _setToSupabaseCache.apply(this, arguments);
      }
      return setToSupabaseCache;
    }()
  }, {
    key: "setupInvalidationHooks",
    value: function setupInvalidationHooks() {
      var _this2 = this;
      this.invalidationHooks.set('compulsion_added', function () {
        var _ref26 = (0, _asyncToGenerator2.default)(function* (userId) {
          yield _this2.invalidateUserCache('patterns', userId);
          yield _this2.invalidateUserCache('insights', userId);
          yield _this2.invalidateUserCache('progress', userId);
          console.log('🔄 Cache invalidated: patterns + insights + progress (compulsion_added)');
        });
        return function (_x15) {
          return _ref26.apply(this, arguments);
        };
      }());
      this.invalidationHooks.set('cbt_record_added', function () {
        var _ref27 = (0, _asyncToGenerator2.default)(function* (userId) {
          yield _this2.invalidateUserCache('insights', userId);
        });
        return function (_x16) {
          return _ref27.apply(this, arguments);
        };
      }());
      this.invalidationHooks.set('mood_added', function () {
        var _ref28 = (0, _asyncToGenerator2.default)(function* (userId) {
          yield _this2.invalidateUserCache('all', userId);
        });
        return function (_x17) {
          return _ref28.apply(this, arguments);
        };
      }());
      this.invalidationHooks.set('manual_refresh', function () {
        _this2.cache.clear();
      });
    }
  }, {
    key: "triggerInvalidation",
    value: function () {
      var _triggerInvalidation = (0, _asyncToGenerator2.default)(function* (hook, userId) {
        var handler = this.invalidationHooks.get(hook);
        if (handler) {
          yield handler(userId);
        }
        try {
          var _yield$import4 = yield import("../../../hooks/useCacheInvalidation"),
            emitAIInvalidation = _yield$import4.emitAIInvalidation;
          emitAIInvalidation(hook, userId);
          console.log('🤖 React Query AI invalidation triggered:', hook);
        } catch (error) {
          console.warn('⚠️ Failed to emit AI cache invalidation:', error);
        }
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.CACHE_INVALIDATION, {
          hook: hook,
          userId: userId,
          timestamp: Date.now()
        });
      });
      function triggerInvalidation(_x18, _x19) {
        return _triggerInvalidation.apply(this, arguments);
      }
      return triggerInvalidation;
    }()
  }, {
    key: "invalidateUserCache",
    value: function () {
      var _invalidateUserCache = (0, _asyncToGenerator2.default)(function* (type, userId) {
        var _this3 = this;
        var keysToDelete = [];
        this.cache.forEach(function (_, key) {
          if (userId && !key.includes(userId)) return;
          if (type === 'all') {
            if (key.startsWith('unified:')) {
              keysToDelete.push(key);
            }
          } else {
            if (key.startsWith('unified:')) {
              keysToDelete.push(key);
            }
          }
        });
        var deletedCount = keysToDelete.length;
        keysToDelete.forEach(function (key) {
          return _this3.cache.delete(key);
        });
        if (deletedCount > 0) {
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.CACHE_INVALIDATION, {
            userId: userId || 'unknown',
            invalidationType: type,
            keysDeleted: deletedCount,
            cacheKeys: keysToDelete.slice(0, 3),
            timestamp: Date.now()
          });
          console.log(`🗑️ Cache invalidated: ${type} (${deletedCount} keys deleted)`);
        }
        yield this.invalidateSupabaseCache(type, userId);
      });
      function invalidateUserCache(_x20, _x21) {
        return _invalidateUserCache.apply(this, arguments);
      }
      return invalidateUserCache;
    }()
  }, {
    key: "invalidateSupabaseCache",
    value: (function () {
      var _invalidateSupabaseCache = (0, _asyncToGenerator2.default)(function* (type, userId) {
        try {
          var likePattern = userId ? `unified:${userId}:%` : 'unified:%';
          var _yield$supabaseServic3 = yield _supabase.default.supabaseClient.from('ai_cache').delete().like('cache_key', likePattern),
            error = _yield$supabaseServic3.error;
          if (error) {
            console.warn('⚠️ Supabase cache invalidation error:', error);
          } else {
            console.log(`🗑️ Supabase cache invalidated for ${type}${userId ? ` (user: ${userId})` : ''}`);
          }
        } catch (error) {
          console.warn('⚠️ Supabase cache invalidation failed:', error);
        }
      });
      function invalidateSupabaseCache(_x22, _x23) {
        return _invalidateSupabaseCache.apply(this, arguments);
      }
      return invalidateSupabaseCache;
    }())
  }, {
    key: "startCacheCleanup",
    value: function startCacheCleanup() {
      var _this4 = this;
      setInterval(function () {
        var now = Date.now();
        var keysToDelete = [];
        _this4.cache.forEach(function (value, key) {
          if (value.expires < now) {
            keysToDelete.push(key);
          }
        });
        keysToDelete.forEach(function (key) {
          return _this4.cache.delete(key);
        });
        if (keysToDelete.length > 0) {
          console.log(`🧹 Cleaned ${keysToDelete.length} expired cache entries`);
        }
      }, 60 * 60 * 1000);
    }
  }, {
    key: "predictMoodIntervention",
    value: function () {
      var _predictMoodIntervention = (0, _asyncToGenerator2.default)(function* (userId, recentMoodEntries, currentMoodState) {
        console.log('🔮 Starting predictive mood intervention analysis...');
        var startTime = Date.now();
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_REQUESTED, {
          userId: userId,
          dataType: 'predictive_mood_intervention',
          entryCount: recentMoodEntries.length,
          timestamp: startTime
        });
        try {
          var trendAnalysis = this.analyzeMoodTrends(recentMoodEntries);
          var riskFactors = this.identifyMoodRiskFactors(recentMoodEntries, trendAnalysis);
          var riskLevel = this.calculateMoodRiskLevel(riskFactors, trendAnalysis);
          var predictedDrop = this.predictMoodDrop(recentMoodEntries, trendAnalysis, riskFactors);
          var interventions = this.generateMoodInterventions(riskLevel, riskFactors, predictedDrop);
          var earlyWarning = this.checkEarlyWarningTriggers(riskLevel, predictedDrop, riskFactors);
          var result = {
            riskLevel: riskLevel,
            predictedDrop: predictedDrop,
            interventions: interventions,
            riskFactors: riskFactors,
            earlyWarning: earlyWarning
          };
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
            userId: userId,
            source: 'predictive_mood_intervention',
            insightsCount: interventions.length,
            processingTime: Date.now() - startTime,
            riskLevel: riskLevel,
            earlyWarningTriggered: (earlyWarning == null ? void 0 : earlyWarning.triggered) || false
          });
          console.log(`✅ Predictive mood intervention completed: ${riskLevel} risk`);
          return result;
        } catch (error) {
          console.error('❌ Predictive mood intervention failed:', error);
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_ERROR, {
            userId: userId,
            component: 'predictiveMoodIntervention',
            error: error instanceof Error ? error.message : String(error),
            processingTime: Date.now() - startTime
          });
          return {
            riskLevel: 'low',
            interventions: [{
              type: 'immediate',
              priority: 1,
              action: 'Düzenli mood takibine devam edin',
              reason: 'Veri analizi sırasında hata oluştu',
              effectivenessProbability: 0.5
            }],
            riskFactors: []
          };
        }
      });
      function predictMoodIntervention(_x24, _x25, _x26) {
        return _predictMoodIntervention.apply(this, arguments);
      }
      return predictMoodIntervention;
    }()
  }, {
    key: "analyzeMoodTrends",
    value: function analyzeMoodTrends(entries) {
      if (entries.length < 3) {
        return {
          trend: 'stable',
          slope: 0,
          volatility: 0,
          recentAverage: 50,
          weeklyChange: 0
        };
      }
      var sortedEntries = entries.sort(function (a, b) {
        return new Date(a.timestamp || a.created_at).getTime() - new Date(b.timestamp || b.created_at).getTime();
      });
      var scores = sortedEntries.map(function (e) {
        return e.mood_score || e.mood || 50;
      });
      var n = scores.length;
      var sumX = (n - 1) * n / 2;
      var sumY = scores.reduce(function (a, b) {
        return a + b;
      }, 0);
      var sumXY = scores.reduce(function (sum, y, x) {
        return sum + x * y;
      }, 0);
      var sumXX = (n - 1) * n * (2 * n - 1) / 6;
      var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
      var trend = 'stable';
      if (slope < -2) trend = 'declining';else if (slope > 2) trend = 'improving';
      var mean = sumY / n;
      var variance = scores.reduce(function (sum, score) {
        return sum + Math.pow(score - mean, 2);
      }, 0) / n;
      var volatility = Math.sqrt(variance);
      var recentEntries = sortedEntries.slice(-3);
      var recentAverage = recentEntries.reduce(function (sum, e) {
        return sum + (e.mood_score || e.mood || 50);
      }, 0) / recentEntries.length;
      var weeklyChange = entries.length >= 7 ? scores[scores.length - 1] - scores[Math.max(0, scores.length - 7)] : 0;
      return {
        trend: trend,
        slope: slope,
        volatility: volatility,
        recentAverage: recentAverage,
        weeklyChange: weeklyChange
      };
    }
  }, {
    key: "identifyMoodRiskFactors",
    value: function identifyMoodRiskFactors(entries, trendAnalysis) {
      var riskFactors = [];
      if (trendAnalysis.trend === 'declining' && Math.abs(trendAnalysis.slope) > 3) {
        riskFactors.push({
          factor: 'declining_trend',
          impact: Math.min(10, Math.abs(trendAnalysis.slope) / 2),
          confidence: 0.8
        });
      }
      if (trendAnalysis.volatility > 15) {
        riskFactors.push({
          factor: 'high_volatility',
          impact: trendAnalysis.volatility / 5,
          confidence: 0.7
        });
      }
      if (trendAnalysis.recentAverage < 35) {
        riskFactors.push({
          factor: 'low_recent_mood',
          impact: (50 - trendAnalysis.recentAverage) / 3,
          confidence: 0.9
        });
      }
      var recurringLowDays = this.detectRecurringLowMoodDays(entries);
      if (recurringLowDays.length > 0) {
        riskFactors.push({
          factor: 'recurring_low_days',
          impact: recurringLowDays.length * 2,
          confidence: 0.6
        });
      }
      var highImpactTriggers = this.analyzeHighImpactTriggers(entries);
      if (highImpactTriggers.length > 0) {
        riskFactors.push({
          factor: 'frequent_triggers',
          impact: highImpactTriggers.length * 1.5,
          confidence: 0.7
        });
      }
      return riskFactors;
    }
  }, {
    key: "calculateMoodRiskLevel",
    value: function calculateMoodRiskLevel(riskFactors, trendAnalysis) {
      var totalRisk = riskFactors.reduce(function (sum, factor) {
        return sum + factor.impact * factor.confidence;
      }, 0);
      var trendRisk = 0;
      if (trendAnalysis.trend === 'declining') trendRisk += 5;
      if (trendAnalysis.recentAverage < 30) trendRisk += 10;
      if (trendAnalysis.volatility > 20) trendRisk += 5;
      var combinedRisk = totalRisk + trendRisk;
      if (combinedRisk >= 25) return 'critical';
      if (combinedRisk >= 15) return 'high';
      if (combinedRisk >= 8) return 'medium';
      return 'low';
    }
  }, {
    key: "predictMoodDrop",
    value: function predictMoodDrop(entries, trendAnalysis, riskFactors) {
      if (riskFactors.length === 0 || trendAnalysis.trend !== 'declining') {
        return undefined;
      }
      var riskScore = riskFactors.reduce(function (sum, factor) {
        return sum + factor.impact * factor.confidence;
      }, 0);
      var likelihood = Math.min(0.95, riskScore / 20);
      var timeframe = '1-2 hafta';
      if (Math.abs(trendAnalysis.slope) > 5) timeframe = '3-5 gün';else if (Math.abs(trendAnalysis.slope) > 3) timeframe = '1 hafta';
      var currentLevel = trendAnalysis.recentAverage;
      var potentialDrop = Math.abs(trendAnalysis.slope) * 3;
      var severity = Math.min(10, potentialDrop);
      return {
        likelihood: likelihood,
        timeframe: timeframe,
        severity: severity
      };
    }
  }, {
    key: "generateMoodInterventions",
    value: function generateMoodInterventions(riskLevel, riskFactors, predictedDrop) {
      var interventions = [];
      if (riskLevel === 'high' || riskLevel === 'critical') {
        interventions.push({
          type: 'immediate',
          priority: 1,
          action: 'Hemen nefes egzersizi yapın (4-7-8 tekniği)',
          reason: 'Anksiyete ve stres seviyelerini hızla düşürür',
          effectivenessProbability: 0.85
        });
        interventions.push({
          type: 'immediate',
          priority: 2,
          action: 'Güvenilir bir arkadaş veya aile üyesi ile konuşun',
          reason: 'Sosyal destek mood iyileşmesinde kanıtlanmış etki gösterir',
          effectivenessProbability: 0.75
        });
      }
      if (riskLevel === 'medium' || riskLevel === 'high') {
        interventions.push({
          type: 'preventive',
          priority: 3,
          action: 'Günlük 10 dakika mindfulness meditasyonu başlatın',
          reason: 'Düzenli meditasyon mood stabilitesini artırır',
          effectivenessProbability: 0.70
        });
        interventions.push({
          type: 'preventive',
          priority: 4,
          action: 'Uyku rutininizi optimize edin (22:00-06:00)',
          reason: 'Düzenli uyku mood dengesi için kritik faktördür',
          effectivenessProbability: 0.80
        });
      }
      riskFactors.forEach(function (factor) {
        switch (factor.factor) {
          case 'declining_trend':
            interventions.push({
              type: 'preventive',
              priority: 5,
              action: 'Haftalık mood tracking pattern analizi yapın',
              reason: 'Trendinizi anlayarak proaktif adımlar atabilirsiniz',
              effectivenessProbability: 0.65
            });
            break;
          case 'high_volatility':
            interventions.push({
              type: 'preventive',
              priority: 6,
              action: 'Günlük yaşam rutininizi standardize edin',
              reason: 'Düzenli rutinler mood dalgalanmalarını azaltır',
              effectivenessProbability: 0.60
            });
            break;
          case 'frequent_triggers':
            interventions.push({
              type: 'preventive',
              priority: 7,
              action: 'Tetikleyici durumlar için başa çıkma stratejileri geliştirin',
              reason: 'Proaktif strateji mood düşüşlerini önler',
              effectivenessProbability: 0.70
            });
            break;
        }
      });
      if (riskLevel === 'critical') {
        interventions.push({
          type: 'emergency',
          priority: 0,
          action: 'Acil destek hatlarından yardım alın veya profesyonel destek arayın',
          reason: 'Kritik mood seviyelerinde profesyonel müdahale gereklidir',
          effectivenessProbability: 0.95
        });
      }
      return interventions.sort(function (a, b) {
        return a.priority - b.priority;
      });
    }
  }, {
    key: "checkEarlyWarningTriggers",
    value: function checkEarlyWarningTriggers(riskLevel, predictedDrop, riskFactors) {
      if (riskLevel === 'critical') {
        return {
          triggered: true,
          message: 'Kritik mood seviyesi tespit edildi. Lütfen hemen destek alın.',
          urgency: 'high'
        };
      }
      if (riskLevel === 'high' && (predictedDrop == null ? void 0 : predictedDrop.likelihood) > 0.7) {
        return {
          triggered: true,
          message: `Yüksek mood düşüş riski: ${predictedDrop.timeframe} içinde dikkatli olun.`,
          urgency: 'medium'
        };
      }
      if (riskLevel === 'medium' && riskFactors.length >= 3) {
        return {
          triggered: true,
          message: 'Birden fazla risk faktörü tespit edildi. Proaktif önlemler alın.',
          urgency: 'low'
        };
      }
      return undefined;
    }
  }, {
    key: "detectRecurringLowMoodDays",
    value: function detectRecurringLowMoodDays(entries) {
      var dayMoods = {};
      entries.forEach(function (entry) {
        var dayOfWeek = new Date(entry.timestamp || entry.created_at).getDay();
        var mood = entry.mood_score || entry.mood || 50;
        if (!dayMoods[dayOfWeek]) dayMoods[dayOfWeek] = [];
        dayMoods[dayOfWeek].push(mood);
      });
      var lowMoodDays = [];
      var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
      Object.entries(dayMoods).forEach(function (_ref29) {
        var _ref30 = (0, _slicedToArray2.default)(_ref29, 2),
          day = _ref30[0],
          moods = _ref30[1];
        var avgMood = moods.reduce(function (a, b) {
          return a + b;
        }, 0) / moods.length;
        if (avgMood < 40 && moods.length >= 2) {
          lowMoodDays.push(dayNames[parseInt(day)]);
        }
      });
      return lowMoodDays;
    }
  }, {
    key: "analyzeHighImpactTriggers",
    value: function analyzeHighImpactTriggers(entries) {
      var triggerImpact = {};
      entries.forEach(function (entry) {
        if (entry.triggers && Array.isArray(entry.triggers)) {
          entry.triggers.forEach(function (trigger) {
            var moodImpact = 50 - (entry.mood_score || entry.mood || 50);
            if (!triggerImpact[trigger]) {
              triggerImpact[trigger] = {
                totalImpact: 0,
                count: 0
              };
            }
            triggerImpact[trigger].totalImpact += moodImpact;
            triggerImpact[trigger].count += 1;
          });
        }
      });
      return Object.entries(triggerImpact).filter(function (_ref31) {
        var _ref32 = (0, _slicedToArray2.default)(_ref31, 2),
          _ = _ref32[0],
          data = _ref32[1];
        var avgImpact = data.totalImpact / data.count;
        return avgImpact > 10 && data.count >= 2;
      }).map(function (_ref33) {
        var _ref34 = (0, _slicedToArray2.default)(_ref33, 2),
          trigger = _ref34[0],
          _ = _ref34[1];
        return trigger;
      });
    }
  }, {
    key: "extractMoodTemporalPatterns",
    value: function extractMoodTemporalPatterns(moods) {
      try {
        var patterns = [];
        if (!moods || moods.length === 0) return patterns;
        var SAMPLE_SIZE = 30;
        var recentMoods = moods.filter(function (m) {
          return m.timestamp && m.mood_score !== undefined && m.energy_level !== undefined && m.anxiety_level !== undefined;
        }).sort(function (a, b) {
          return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
        }).slice(0, SAMPLE_SIZE);
        if (recentMoods.length === 0) return patterns;
        var weeklyMoodDelta = this.calculateWeeklyMoodDelta(recentMoods);
        if (weeklyMoodDelta) {
          patterns.push({
            type: 'mood_weekly_delta',
            title: 'Haftalık Mood Değişimi',
            description: `Son hafta mood ortalaması: ${weeklyMoodDelta.thisWeek.toFixed(1)}, önceki hafta: ${weeklyMoodDelta.lastWeek.toFixed(1)}`,
            pattern: `Haftalık delta: ${weeklyMoodDelta.delta > 0 ? '+' : ''}${weeklyMoodDelta.delta.toFixed(1)}`,
            confidence: weeklyMoodDelta.confidence,
            severity: weeklyMoodDelta.delta < -10 ? 'high' : weeklyMoodDelta.delta < -5 ? 'medium' : 'low',
            actionable: Math.abs(weeklyMoodDelta.delta) > 5,
            suggestion: weeklyMoodDelta.delta < -10 ? 'Mood düşüş trendi - destek almayı değerlendir' : weeklyMoodDelta.delta < -5 ? 'Hafif mood düşüşü - self-care rutinlerine odaklan' : weeklyMoodDelta.delta > 10 ? 'Güzel mood artışı - bu pozitif durumu sürdür' : 'Mood seviyesi stabil görünüyor',
            dashboardMetrics: {
              weeklyDelta: weeklyMoodDelta.delta,
              currentWeekAvg: weeklyMoodDelta.thisWeek,
              previousWeekAvg: weeklyMoodDelta.lastWeek,
              trend: weeklyMoodDelta.delta > 5 ? 'improving' : weeklyMoodDelta.delta < -5 ? 'declining' : 'stable',
              dataPoints: weeklyMoodDelta.dataPoints
            },
            source: 'unified_pipeline'
          });
        }
        var meaCorrelation = this.calculateMEACorrelations(recentMoods);
        if (meaCorrelation) {
          patterns.push({
            type: 'mood_mea_correlation',
            title: 'Mood-Enerji-Anksiyete İlişkisi',
            description: `MEA korelasyon analizi: ${meaCorrelation.profile}`,
            pattern: `Mood-Enerji: ${meaCorrelation.moodEnergy.toFixed(2)}, Mood-Anksiyete: ${meaCorrelation.moodAnxiety.toFixed(2)}`,
            confidence: meaCorrelation.confidence,
            severity: meaCorrelation.severity,
            actionable: meaCorrelation.actionable,
            suggestion: meaCorrelation.suggestion,
            dashboardMetrics: {
              moodEnergyCorrelation: meaCorrelation.moodEnergy,
              moodAnxietyCorrelation: meaCorrelation.moodAnxiety,
              energyAnxietyCorrelation: meaCorrelation.energyAnxiety,
              emotionalProfile: meaCorrelation.profileType,
              averageMood: meaCorrelation.averages.mood,
              averageEnergy: meaCorrelation.averages.energy,
              averageAnxiety: meaCorrelation.averages.anxiety,
              dataPoints: recentMoods.length
            },
            source: 'unified_pipeline'
          });
        }
        var weeklyData = {};
        recentMoods.forEach(function (m) {
          var dayOfWeek = new Date(m.timestamp).getDay();
          if (!weeklyData[dayOfWeek]) {
            weeklyData[dayOfWeek] = {
              mood: 0,
              energy: 0,
              anxiety: 0,
              count: 0
            };
          }
          weeklyData[dayOfWeek].mood += m.mood_score;
          weeklyData[dayOfWeek].energy += m.energy_level;
          weeklyData[dayOfWeek].anxiety += m.anxiety_level;
          weeklyData[dayOfWeek].count += 1;
        });
        var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
        var maxDailyPatterns = 3;
        Object.entries(weeklyData).sort(function (_ref35, _ref36) {
          var _ref37 = (0, _slicedToArray2.default)(_ref35, 2),
            a = _ref37[1];
          var _ref38 = (0, _slicedToArray2.default)(_ref36, 2),
            b = _ref38[1];
          return b.mood / b.count - a.mood / a.count;
        }).forEach(function (_ref39) {
          var _ref40 = (0, _slicedToArray2.default)(_ref39, 2),
            day = _ref40[0],
            data = _ref40[1];
          if (patterns.filter(function (p) {
            return p.type === 'mood_daily_pattern';
          }).length >= maxDailyPatterns) return;
          var avgMood = data.mood / data.count;
          var avgEnergy = data.energy / data.count;
          var avgAnxiety = data.anxiety / data.count;
          if (data.count >= 2 && (avgMood > 70 || avgMood < 40)) {
            patterns.push({
              type: 'mood_daily_pattern',
              title: `${dayNames[parseInt(day)]} Günü Pattern'i`,
              description: `${dayNames[parseInt(day)]} günü mood ortalaması: ${avgMood.toFixed(1)}`,
              pattern: `${dayNames[parseInt(day)]}: M${avgMood.toFixed(1)}/E${avgEnergy.toFixed(1)}/A${avgAnxiety.toFixed(1)}`,
              confidence: Math.min(0.8, data.count / recentMoods.length * 7),
              severity: avgMood < 40 ? 'medium' : 'low',
              actionable: avgMood < 40,
              suggestion: avgMood < 40 ? `${dayNames[parseInt(day)]} günü mood desteği planlayabilirsin` : `${dayNames[parseInt(day)]} günü pozitif pattern'ini sürdür`,
              dashboardMetrics: {
                dayOfWeek: parseInt(day),
                dayName: dayNames[parseInt(day)],
                averageMood: parseFloat(avgMood.toFixed(1)),
                averageEnergy: parseFloat(avgEnergy.toFixed(1)),
                averageAnxiety: parseFloat(avgAnxiety.toFixed(1)),
                sampleSize: data.count,
                significance: avgMood > 70 ? 'positive' : avgMood < 40 ? 'negative' : 'neutral'
              },
              source: 'unified_pipeline'
            });
          }
        });
        console.log(`📊 Extracted ${patterns.length} enhanced mood patterns with dashboard metrics`);
        return patterns;
      } catch (error) {
        console.warn('⚠️ Error extracting enhanced mood temporal patterns:', error);
        return [];
      }
    }
  }, {
    key: "calculateWeeklyMoodDelta",
    value: function calculateWeeklyMoodDelta(moods) {
      try {
        if (moods.length < 5) return null;
        var now = new Date();
        var oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        var twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);
        var thisWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= oneWeekAgo && date <= now;
        });
        var lastWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= twoWeeksAgo && date < oneWeekAgo;
        });
        if (thisWeekMoods.length === 0 || lastWeekMoods.length === 0) return null;
        var thisWeekAvg = thisWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / thisWeekMoods.length;
        var lastWeekAvg = lastWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / lastWeekMoods.length;
        var delta = thisWeekAvg - lastWeekAvg;
        var minDataPoints = Math.min(thisWeekMoods.length, lastWeekMoods.length);
        var confidence = Math.min(0.9, minDataPoints / 7 * 0.8);
        return {
          delta: delta,
          thisWeek: thisWeekAvg,
          lastWeek: lastWeekAvg,
          confidence: confidence,
          dataPoints: {
            thisWeek: thisWeekMoods.length,
            lastWeek: lastWeekMoods.length
          }
        };
      } catch (error) {
        console.warn('⚠️ Error calculating weekly mood delta:', error);
        return null;
      }
    }
  }, {
    key: "calculateMEACorrelations",
    value: function calculateMEACorrelations(moods) {
      try {
        if (moods.length < 5) return null;
        var moodScores = moods.map(function (m) {
          return m.mood_score;
        });
        var energyLevels = moods.map(function (m) {
          return m.energy_level;
        });
        var anxietyLevels = moods.map(function (m) {
          return m.anxiety_level;
        });
        var moodEnergyCorr = this.calculatePearsonCorrelation(moodScores, energyLevels);
        var moodAnxietyCorr = this.calculatePearsonCorrelation(moodScores, anxietyLevels);
        var energyAnxietyCorr = this.calculatePearsonCorrelation(energyLevels, anxietyLevels);
        var averages = {
          mood: moodScores.reduce(function (a, b) {
            return a + b;
          }, 0) / moodScores.length,
          energy: energyLevels.reduce(function (a, b) {
            return a + b;
          }, 0) / energyLevels.length,
          anxiety: anxietyLevels.reduce(function (a, b) {
            return a + b;
          }, 0) / anxietyLevels.length
        };
        var profileType = 'balanced';
        var profile = 'Dengeli Duygusal Profil';
        var severity = 'low';
        var suggestion = 'Duygusal dengen iyi görünüyor';
        var actionable = false;
        if (moodEnergyCorr > 0.5 && moodAnxietyCorr < -0.3) {
          profileType = 'optimal';
          profile = 'Optimal Duygusal Denge';
          suggestion = 'Mükemmel! Mood yüksek→enerji artıyor, anksiyete azalıyor';
        } else if (moodEnergyCorr < -0.3 && moodAnxietyCorr > 0.3) {
          profileType = 'depression_risk';
          profile = 'Depresif Eğilim Riski';
          severity = 'high';
          actionable = true;
          suggestion = 'Mood düştüğünde enerji de düşüyor, anksiyete artıyor - profesyonel destek değerlendir';
        } else if (energyAnxietyCorr > 0.6) {
          profileType = 'hyperarousal';
          profile = 'Yüksek Uyarılma Durumu';
          severity = 'medium';
          actionable = true;
          suggestion = 'Enerji ve anksiyete birlikte yükseliyor - sakinleştirici teknikler faydalı olabilir';
        } else if (averages.mood < 40 && Math.abs(moodAnxietyCorr) > 0.4) {
          profileType = 'anxious_low_mood';
          profile = 'Kaygılı Düşük Mood';
          severity = 'medium';
          actionable = true;
          suggestion = 'Düşük mood ve anksiyete ilişkisi tespit edildi - mood destekleyici aktiviteler dene';
        } else if (Math.abs(moodEnergyCorr) < 0.2 && Math.abs(moodAnxietyCorr) < 0.2) {
          profileType = 'disconnected';
          profile = 'Bağımsız Duygusal Durumlar';
          suggestion = 'Mood, enerji ve anksiyete bağımsız değişiyor - bu da normal olabilir';
        }
        var confidence = Math.min(0.9, moods.length / 20);
        return {
          moodEnergy: parseFloat(moodEnergyCorr.toFixed(3)),
          moodAnxiety: parseFloat(moodAnxietyCorr.toFixed(3)),
          energyAnxiety: parseFloat(energyAnxietyCorr.toFixed(3)),
          profile: profile,
          profileType: profileType,
          confidence: confidence,
          severity: severity,
          actionable: actionable,
          suggestion: suggestion,
          averages: {
            mood: parseFloat(averages.mood.toFixed(1)),
            energy: parseFloat(averages.energy.toFixed(1)),
            anxiety: parseFloat(averages.anxiety.toFixed(1))
          }
        };
      } catch (error) {
        console.warn('⚠️ Error calculating MEA correlations:', error);
        return null;
      }
    }
  }, {
    key: "calculatePearsonCorrelation",
    value: function calculatePearsonCorrelation(x, y) {
      if (x.length !== y.length || x.length === 0) return 0;
      var n = x.length;
      var meanX = x.reduce(function (a, b) {
        return a + b;
      }, 0) / n;
      var meanY = y.reduce(function (a, b) {
        return a + b;
      }, 0) / n;
      var numerator = 0;
      var sumXSquared = 0;
      var sumYSquared = 0;
      for (var i = 0; i < n; i++) {
        var xDiff = x[i] - meanX;
        var yDiff = y[i] - meanY;
        numerator += xDiff * yDiff;
        sumXSquared += xDiff * xDiff;
        sumYSquared += yDiff * yDiff;
      }
      var denominator = Math.sqrt(sumXSquared * sumYSquared);
      return denominator === 0 ? 0 : numerator / denominator;
    }
  }, {
    key: "calculateCorrelationPValue",
    value: function calculateCorrelationPValue(r, n) {
      if (n < 3 || Math.abs(r) >= 1) return null;
      try {
        var df = n - 2;
        var t = r * Math.sqrt(df) / Math.sqrt(1 - r * r);
        var p = this.approximateTTestPValue(Math.abs(t), df);
        return Math.min(1, Math.max(0, p));
      } catch (error) {
        console.warn('⚠️ P-value calculation failed:', error);
        return null;
      }
    }
  }, {
    key: "approximateTTestPValue",
    value: function approximateTTestPValue(t, df) {
      if (df > 30) {
        return 2 * (1 - this.normalCDF(t));
      }
      var criticalValues = [{
        df: 2,
        values: [4.303, 6.965, 9.925, 14.089]
      }, {
        df: 3,
        values: [3.182, 4.541, 5.841, 7.453]
      }, {
        df: 4,
        values: [2.776, 3.747, 4.604, 5.598]
      }, {
        df: 5,
        values: [2.571, 3.365, 4.032, 4.773]
      }, {
        df: 10,
        values: [2.228, 2.764, 3.169, 3.581]
      }, {
        df: 20,
        values: [2.086, 2.528, 2.845, 3.153]
      }, {
        df: 30,
        values: [2.042, 2.457, 2.750, 3.030]
      }];
      var closest = criticalValues.reduce(function (prev, curr) {
        return Math.abs(curr.df - df) < Math.abs(prev.df - df) ? curr : prev;
      });
      var pLevels = [0.1, 0.05, 0.02, 0.01];
      for (var i = 0; i < closest.values.length; i++) {
        if (t <= closest.values[i]) {
          if (i === 0) {
            var ratio = t / closest.values[0];
            return Math.max(0.1, 1.0 - ratio * 0.9);
          } else {
            var prevT = i === 0 ? 0 : closest.values[i - 1];
            var currT = closest.values[i];
            var prevP = i === 0 ? 1.0 : pLevels[i - 1];
            var currP = pLevels[i];
            var _ratio = (t - prevT) / (currT - prevT);
            return prevP - _ratio * (prevP - currP);
          }
        }
      }
      return 0.001;
    }
  }, {
    key: "normalCDF",
    value: function normalCDF(x) {
      var t = 1 / (1 + 0.2316419 * Math.abs(x));
      var d = 0.3989423 * Math.exp(-x * x / 2);
      var prob = d * t * (0.3193815 + t * (-0.3565638 + t * (1.7814779 + t * (-1.8212560 + t * 1.3302744))));
      return x >= 0 ? 1 - prob : prob;
    }
  }, {
    key: "processMoodAnalytics",
    value: function processMoodAnalytics(moods) {
      try {
        console.log(`🧮 Processing mood analytics for ${moods.length} entries`);
        if (!moods || !Array.isArray(moods) || moods.length < 3) {
          console.warn('⚠️ Insufficient mood data for analytics', (moods == null ? void 0 : moods.length) || 0);
          return null;
        }
        var recentMoods = moods.slice(0, 50);
        console.log(`📊 Using ${recentMoods.length} recent mood entries for analysis`);
        var weeklyDelta = this.calculateAnalyticsWeeklyDelta(recentMoods);
        var volatility = this.calculateAnalyticsVolatility(recentMoods);
        var baselines = this.calculateAnalyticsBaselines(recentMoods);
        var correlations = this.calculateAnalyticsMEACorrelations(recentMoods);
        var dataQuality = this.assessAnalyticsDataQuality(recentMoods);
        var profile = this.classifyAnalyticsEmotionalProfile(recentMoods, baselines, weeklyDelta, volatility, correlations);
        var bestTimes = this.analyzeAnalyticsBestTimes(recentMoods);
        var confidence = this.calculateAnalyticsGlobalConfidence(recentMoods, dataQuality, profile);
        var result = {
          weeklyDelta: weeklyDelta,
          volatility: volatility,
          baselines: baselines,
          correlations: correlations,
          profile: profile,
          bestTimes: bestTimes,
          sampleSize: recentMoods.length,
          dataQuality: dataQuality,
          confidence: confidence
        };
        console.log('✅ Mood analytics completed:', {
          weeklyDelta: weeklyDelta,
          volatility: volatility,
          profileType: profile == null ? void 0 : profile.type,
          confidence: confidence
        });
        return result;
      } catch (error) {
        console.error('❌ Mood analytics processing failed:', error);
        return null;
      }
    }
  }, {
    key: "extractEnvironmentalTriggers",
    value: function extractEnvironmentalTriggers(compulsions) {
      if (!compulsions || !Array.isArray(compulsions)) return [];
      var patterns = [];
      var triggerCounts = {};
      compulsions.forEach(function (c) {
        if (c.trigger && typeof c.trigger === 'string') {
          var keywords = c.trigger.toLowerCase().split(/\s+/);
          keywords.forEach(function (keyword) {
            if (keyword.length > 2) {
              triggerCounts[keyword] = (triggerCounts[keyword] || 0) + 1;
            }
          });
        }
      });
      for (var _ref41 of Object.entries(triggerCounts)) {
        var _ref42 = (0, _slicedToArray2.default)(_ref41, 2);
        var trigger = _ref42[0];
        var count = _ref42[1];
        if (count > 1) {
          patterns.push({
            type: 'environmental_trigger',
            trigger: trigger,
            frequency: count,
            confidence: this.calculatePatternConfidence(count)
          });
        }
      }
      return patterns;
    }
  }, {
    key: "analyzeTriggers",
    value: function analyzeTriggers(content) {
      try {
        var triggers = [];
        var envTriggers = this.extractEnvironmentalTriggers(content);
        triggers.push.apply(triggers, (0, _toConsumableArray2.default)(envTriggers));
        return triggers;
      } catch (error) {
        console.warn('⚠️ Error analyzing triggers:', error);
        return [];
      }
    }
  }, {
    key: "analyzeSeverityProgression",
    value: function analyzeSeverityProgression(content) {
      var _this5 = this;
      try {
        var progression = [];
        if (content.compulsions && Array.isArray(content.compulsions)) {
          var sortedCompulsions = content.compulsions.filter(function (c) {
            return c.timestamp && _this5.hasValidSeverity(c);
          }).sort(function (a, b) {
            return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
          });
          if (sortedCompulsions.length >= 3) {
            var first = sortedCompulsions.slice(0, Math.floor(sortedCompulsions.length / 3));
            var last = sortedCompulsions.slice(-Math.floor(sortedCompulsions.length / 3));
            var firstAvg = first.reduce(function (sum, c) {
              return sum + _this5.getCompulsionSeverity(c);
            }, 0) / first.length;
            var lastAvg = last.reduce(function (sum, c) {
              return sum + _this5.getCompulsionSeverity(c);
            }, 0) / last.length;
            if (Math.abs(lastAvg - firstAvg) > 0.5) {
              progression.push({
                type: 'severity_progression',
                trend: lastAvg > firstAvg ? 'improving' : 'declining',
                change: lastAvg - firstAvg,
                description: `Direnç seviyesi ${lastAvg > firstAvg ? 'artıyor' : 'azalıyor'}`,
                confidence: 0.8
              });
            }
          }
        }
        return progression;
      } catch (error) {
        console.warn('⚠️ Error analyzing severity progression:', error);
        return [];
      }
    }
  }, {
    key: "processCBTProgressAnalytics",
    value: function () {
      var _processCBTProgressAnalytics = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var content = input.content;
          var thoughtRecords = content.thoughtRecords || [];
          var timeframe = content.timeframe || 'month';
          console.log(`🧠 Processing CBT progress analytics for ${thoughtRecords.length} records`);
          if (thoughtRecords.length < 2) {
            return {
              distortionTrends: [],
              techniqueEffectiveness: [],
              progressAnalysis: 'Henüz yeterli veri yok. En az 2-3 düşünce kaydı gerekli.',
              recommendations: ['Düzenli düşünce kaydı tutmaya devam et'],
              riskLevel: 'low',
              nextFocus: 'Daha fazla düşünce kaydı tut',
              metadata: {
                analysisTime: Date.now(),
                recordCount: thoughtRecords.length,
                confidence: 0.3
              }
            };
          }
          var distortionTrends = this.analyzeCBTDistortionTrends(thoughtRecords);
          var techniqueEffectiveness = this.analyzeCBTTechniqueEffectiveness(thoughtRecords);
          var progressAnalysis = this.generateCBTProgressAnalysis(thoughtRecords, timeframe);
          var recommendations = this.generateCBTRecommendations(thoughtRecords, distortionTrends);
          var riskLevel = this.assessCBTRiskLevel(thoughtRecords);
          var nextFocus = this.determineCBTNextFocus(thoughtRecords, distortionTrends);
          return {
            distortionTrends: distortionTrends,
            techniqueEffectiveness: techniqueEffectiveness,
            progressAnalysis: progressAnalysis,
            recommendations: recommendations,
            riskLevel: riskLevel,
            nextFocus: nextFocus,
            metadata: {
              analysisTime: Date.now(),
              recordCount: thoughtRecords.length,
              confidence: this.calculateCBTProgressConfidence(thoughtRecords)
            }
          };
        } catch (error) {
          console.error('❌ CBT Progress Analytics failed:', error);
          return {
            distortionTrends: [],
            techniqueEffectiveness: [],
            progressAnalysis: 'Analiz sırasında bir hata oluştu. Lütfen daha sonra tekrar deneyin.',
            recommendations: ['Tekrar deneyebilirsin'],
            riskLevel: 'low',
            nextFocus: 'Sistem hatası nedeniyle belirlenemedi',
            metadata: {
              analysisTime: Date.now(),
              recordCount: 0,
              confidence: 0,
              error: error.message
            }
          };
        }
      });
      function processCBTProgressAnalytics(_x27) {
        return _processCBTProgressAnalytics.apply(this, arguments);
      }
      return processCBTProgressAnalytics;
    }()
  }, {
    key: "analyzeCBTDistortionTrends",
    value: function analyzeCBTDistortionTrends(records) {
      var distortionCounts = new Map();
      records.forEach(function (record, index) {
        if (record.distortions && Array.isArray(record.distortions)) {
          record.distortions.forEach(function (distortion) {
            if (!distortionCounts.has(distortion)) {
              distortionCounts.set(distortion, []);
            }
            distortionCounts.get(distortion).push(index);
          });
        }
      });
      var trends = [];
      distortionCounts.forEach(function (occurrences, distortion) {
        if (occurrences.length >= 2) {
          var totalRecords = records.length;
          var midPoint = totalRecords / 2;
          var earlyOccurrences = occurrences.filter(function (idx) {
            return idx < midPoint;
          }).length;
          var lateOccurrences = occurrences.filter(function (idx) {
            return idx >= midPoint;
          }).length;
          var earlyRate = earlyOccurrences / Math.ceil(midPoint);
          var lateRate = lateOccurrences / Math.floor(totalRecords - midPoint);
          var change = lateRate - earlyRate;
          var trend = 'stable';
          if (change < -0.1) trend = 'improving';else if (change > 0.1) trend = 'declining';
          trends.push({
            distortion: distortion,
            trend: trend,
            change: Math.round(change * 100) / 100
          });
        }
      });
      return trends.sort(function (a, b) {
        return Math.abs(b.change) - Math.abs(a.change);
      }).slice(0, 5);
    }
  }, {
    key: "analyzeCBTTechniqueEffectiveness",
    value: function analyzeCBTTechniqueEffectiveness(records) {
      var techniques = [];
      var avgMoodImprovement = records.length > 0 ? records.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / records.length : 0;
      if (avgMoodImprovement > 0) {
        techniques.push({
          technique: 'Düşünce Kaydı',
          effectiveness: Math.min(10, Math.round(avgMoodImprovement * 10) / 10),
          confidence: records.length >= 5 ? 0.9 : 0.6
        });
      }
      var evidenceRecords = records.filter(function (r) {
        return r.evidenceFor && r.evidenceAgainst;
      });
      if (evidenceRecords.length > 0) {
        var evidenceAvgImprovement = evidenceRecords.reduce(function (sum, r) {
          return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
        }, 0) / evidenceRecords.length;
        techniques.push({
          technique: 'Kanıt Toplama',
          effectiveness: Math.min(10, Math.round(evidenceAvgImprovement * 10) / 10),
          confidence: evidenceRecords.length >= 3 ? 0.8 : 0.5
        });
      }
      return techniques.slice(0, 3);
    }
  }, {
    key: "generateCBTProgressAnalysis",
    value: function generateCBTProgressAnalysis(records, timeframe) {
      var recordCount = records.length;
      var avgMoodImprovement = records.length > 0 ? records.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / records.length : 0;
      var recentRecords = records.slice(0, Math.min(5, records.length));
      var recentAvgImprovement = recentRecords.length > 0 ? recentRecords.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / recentRecords.length : 0;
      if (recordCount < 5) {
        return `${recordCount} düşünce kaydın var. CBT yolculuğunun başlangıcındasın ve ortalama ${avgMoodImprovement.toFixed(1)} puanlık mood iyileşmesi sağlıyorsun.`;
      } else if (avgMoodImprovement >= 2) {
        return `${recordCount} kayıtla güçlü bir ilerleme gösteriyorsun. Ortalama ${avgMoodImprovement.toFixed(1)} puanlık mood iyileşmesi, CBT tekniklerinin sana uygun olduğunu gösteriyor.`;
      } else if (avgMoodImprovement >= 1) {
        return `${recordCount} kayıtla istikrarlı bir gelişim süreci yaşıyorsun. ${avgMoodImprovement.toFixed(1)} puanlık ortalama iyileşme, düzenli pratikle artmaya devam edecek.`;
      } else {
        return `${recordCount} kayıt tamamladın. Mood iyileşmesi henüz beklenen seviyede değil ama bu normal - CBT becerileri zaman içinde gelişir.`;
      }
    }
  }, {
    key: "generateCBTRecommendations",
    value: function generateCBTRecommendations(records, distortionTrends) {
      var recommendations = [];
      if (records.length < 10) {
        recommendations.push('Daha sık düşünce kaydı tutarak pattern\'lerin daha net görünmesini sağla');
      }
      var avgMoodImprovement = records.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / records.length;
      if (avgMoodImprovement < 1) {
        recommendations.push('Kanıt toplama adımına daha fazla zaman ayırarak düşüncelerini daha objektif değerlendir');
      }
      var decliningDistortions = distortionTrends.filter(function (d) {
        return d.trend === 'declining';
      });
      if (decliningDistortions.length > 0) {
        recommendations.push(`${decliningDistortions[0].distortion} konusunda ekstra dikkat göster - sıklığı artış gösteriyor`);
      }
      var evidenceRecords = records.filter(function (r) {
        return r.evidenceFor && r.evidenceAgainst;
      });
      if (evidenceRecords.length < records.length * 0.7) {
        recommendations.push('Lehine ve aleyhine kanıtları daha düzenli doldurmaya odaklan');
      }
      return recommendations.slice(0, 3);
    }
  }, {
    key: "assessCBTRiskLevel",
    value: function assessCBTRiskLevel(records) {
      var recentRecords = records.slice(0, 5);
      var avgMoodBefore = recentRecords.reduce(function (sum, r) {
        return sum + (r.moodBefore || 5);
      }, 0) / recentRecords.length;
      var avgMoodImprovement = recentRecords.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / recentRecords.length;
      if (avgMoodBefore <= 3 && avgMoodImprovement < 0.5) {
        return 'high';
      } else if (avgMoodBefore <= 4 || avgMoodImprovement < 1) {
        return 'medium';
      } else {
        return 'low';
      }
    }
  }, {
    key: "determineCBTNextFocus",
    value: function determineCBTNextFocus(records, distortionTrends) {
      var decliningDistortions = distortionTrends.filter(function (d) {
        return d.trend === 'declining';
      });
      if (decliningDistortions.length > 0) {
        return `${decliningDistortions[0].distortion} çarpıtmasına odaklan`;
      }
      var evidenceRecords = records.filter(function (r) {
        return r.evidenceFor && r.evidenceAgainst;
      });
      if (evidenceRecords.length < records.length * 0.5) {
        return 'Kanıt toplama becerilerin geliştir';
      }
      if (records.length < 15) {
        return 'Düzenli kayıt tutma alışkanlığın güçlendir';
      }
      return 'Reframe tekniklerini çeşitlendir';
    }
  }, {
    key: "calculateCBTProgressConfidence",
    value: function calculateCBTProgressConfidence(records) {
      if (records.length < 3) return 0.3;
      if (records.length < 7) return 0.6;
      if (records.length < 15) return 0.8;
      return 0.9;
    }
  }, {
    key: "calculatePatternConfidence",
    value: function calculatePatternConfidence(dataPoints) {
      if (dataPoints < 2) return 0.2;
      if (dataPoints < 5) return 0.4;
      if (dataPoints < 10) return 0.6;
      if (dataPoints < 20) return 0.8;
      return Math.min(0.95, 0.8 + (dataPoints - 20) * 0.01);
    }
  }, {
    key: "extractMoodTemporalPatternsByHour",
    value: function extractMoodTemporalPatternsByHour(data) {
      var patterns = [];
      if (data.moods && Array.isArray(data.moods)) {
        var SAMPLE_SIZE = 20;
        var recentMoods = data.moods.slice(0, SAMPLE_SIZE).filter(function (mood) {
          return mood.timestamp || mood.created_at;
        });
        if (recentMoods.length < 5) return [];
        var moodsByHour = new Array(24).fill(0).map(function () {
          return {
            total: 0,
            count: 0
          };
        });
        recentMoods.forEach(function (mood) {
          var hour = new Date(mood.timestamp || mood.created_at).getHours();
          moodsByHour[hour].total += mood.mood_score || 5;
          moodsByHour[hour].count += 1;
        });
        var hourlyAverages = moodsByHour.map(function (h, hour) {
          return {
            hour: hour,
            average: h.count > 0 ? h.total / h.count : 5,
            count: h.count
          };
        }).filter(function (h) {
          return h.count >= 2 && h.average < 4;
        });
        if (hourlyAverages.length > 0) {
          patterns.push({
            type: 'low_mood_temporal_hourly',
            hours: hourlyAverages.slice(0, 3).map(function (h) {
              return h.hour;
            }),
            averageScore: hourlyAverages.reduce(function (sum, h) {
              return sum + h.average;
            }, 0) / hourlyAverages.length,
            confidence: Math.min(0.7, hourlyAverages.length / 10),
            sampleSize: recentMoods.length
          });
        }
      }
      return patterns;
    }
  }, {
    key: "groupByTimeWindow",
    value: function groupByTimeWindow(compulsions, windowDays) {
      var windows = [];
      var sortedCompulsions = (0, _toConsumableArray2.default)(compulsions).sort(function (a, b) {
        return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
      });
      if (sortedCompulsions.length === 0) return windows;
      var startTime = new Date(sortedCompulsions[0].timestamp).getTime();
      var windowMs = windowDays * 24 * 60 * 60 * 1000;
      var currentWindow = [];
      var currentWindowStart = startTime;
      sortedCompulsions.forEach(function (c) {
        var cTime = new Date(c.timestamp).getTime();
        if (cTime >= currentWindowStart + windowMs) {
          if (currentWindow.length > 0) windows.push(currentWindow);
          currentWindow = [c];
          currentWindowStart = Math.floor((cTime - startTime) / windowMs) * windowMs + startTime;
        } else {
          currentWindow.push(c);
        }
      });
      if (currentWindow.length > 0) windows.push(currentWindow);
      return windows;
    }
  }, {
    key: "getCompulsionSeverity",
    value: function getCompulsionSeverity(compulsion) {
      return compulsion.severity || compulsion.resistanceLevel || compulsion.resistance_level || compulsion.intensity || 5;
    }
  }, {
    key: "hasValidSeverity",
    value: function hasValidSeverity(compulsion) {
      return compulsion.severity !== undefined || compulsion.resistanceLevel !== undefined || compulsion.resistance_level !== undefined || compulsion.intensity !== undefined;
    }
  }, {
    key: "calculateAverageSeverity",
    value: function calculateAverageSeverity(compulsions) {
      var _this6 = this;
      if (!compulsions || !Array.isArray(compulsions) || compulsions.length === 0) return 0;
      var total = compulsions.reduce(function (sum, c) {
        return sum + _this6.getCompulsionSeverity(c);
      }, 0);
      return total / compulsions.length;
    }
  }, {
    key: "calculateTypeFrequency",
    value: function calculateTypeFrequency(compulsions) {
      var freq = {};
      if (!compulsions || !Array.isArray(compulsions)) return freq;
      compulsions.forEach(function (c) {
        if (c.type) {
          freq[c.type] = (freq[c.type] || 0) + 1;
        }
      });
      return freq;
    }
  }, {
    key: "extractDayOfWeekPattern",
    value: function extractDayOfWeekPattern(compulsions) {
      if (!compulsions || !Array.isArray(compulsions)) return null;
      var dayCounts = new Array(7).fill(0);
      compulsions.forEach(function (c) {
        var day = new Date(c.timestamp).getDay();
        dayCounts[day]++;
      });
      var maxCount = Math.max.apply(Math, (0, _toConsumableArray2.default)(dayCounts));
      var avgCount = dayCounts.reduce(function (sum, count) {
        return sum + count;
      }, 0) / 7;
      if (maxCount > avgCount * 1.5) {
        var peakDay = dayCounts.indexOf(maxCount);
        var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
        return {
          type: 'day_of_week_pattern',
          peakDay: peakDay,
          dayName: dayNames[peakDay],
          frequency: maxCount,
          confidence: this.calculatePatternConfidence(maxCount)
        };
      }
      return null;
    }
  }, {
    key: "extractTextPatterns",
    value: function extractTextPatterns(content) {
      var patterns = {
        behavioral: [],
        triggers: []
      };
      var text = content.toLowerCase();
      var behavioralKeywords = ['tekrar', 'kontrol', 'temizlik', 'sayma', 'sıralama'];
      behavioralKeywords.forEach(function (keyword) {
        if (text.includes(keyword)) {
          patterns.behavioral.push({
            type: 'text_behavioral',
            keyword: keyword,
            context: text,
            confidence: 0.6
          });
        }
      });
      var triggerKeywords = ['stres', 'endişe', 'korku', 'kirli', 'güvenlik'];
      triggerKeywords.forEach(function (keyword) {
        if (text.includes(keyword)) {
          patterns.triggers.push({
            type: 'text_trigger',
            trigger: keyword,
            context: text,
            confidence: 0.5
          });
        }
      });
      return patterns;
    }
  }, {
    key: "calculateAnalyticsVolatility",
    value: function calculateAnalyticsVolatility(moods) {
      try {
        if (moods.length < 2) return 0;
        var scores = moods.map(function (m) {
          return m.mood_score;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        if (scores.length < 2) return 0;
        var sorted = (0, _toConsumableArray2.default)(scores).sort(function (a, b) {
          return a - b;
        });
        var p5Index = Math.floor(sorted.length * 0.05);
        var p95Index = Math.ceil(sorted.length * 0.95) - 1;
        var p5Value = sorted[p5Index];
        var p95Value = sorted[p95Index];
        var winsorized = scores.map(function (s) {
          return Math.min(Math.max(s, p5Value), p95Value);
        });
        var mean = winsorized.reduce(function (sum, s) {
          return sum + s;
        }, 0) / winsorized.length;
        var variance = winsorized.reduce(function (sum, s) {
          return sum + Math.pow(s - mean, 2);
        }, 0) / winsorized.length;
        return Math.sqrt(variance);
      } catch (error) {
        console.warn('⚠️ Volatility calculation failed:', error);
        return 0;
      }
    }
  }, {
    key: "calculateAnalyticsBaselines",
    value: function calculateAnalyticsBaselines(moods) {
      try {
        if (moods.length === 0) return {
          mood: 50,
          energy: 50,
          anxiety: 50
        };
        var recent14Days = moods.slice(0, Math.min(50, moods.length));
        var moodScores = recent14Days.map(function (m) {
          return m.mood_score;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        var energyScores = recent14Days.map(function (m) {
          return m.energy_level;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        var anxietyScores = recent14Days.map(function (m) {
          return m.anxiety_level;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        return {
          mood: moodScores.length > 0 ? moodScores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / moodScores.length : 50,
          energy: energyScores.length > 0 ? energyScores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / energyScores.length : 50,
          anxiety: anxietyScores.length > 0 ? anxietyScores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / anxietyScores.length : 50
        };
      } catch (error) {
        console.warn('⚠️ Baselines calculation failed:', error);
        return {
          mood: 50,
          energy: 50,
          anxiety: 50
        };
      }
    }
  }, {
    key: "calculateAnalyticsWeeklyDelta",
    value: function calculateAnalyticsWeeklyDelta(moods) {
      try {
        var now = new Date();
        var oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        var twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);
        var thisWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= oneWeekAgo && date <= now;
        });
        var lastWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= twoWeeksAgo && date < oneWeekAgo;
        });
        if (thisWeekMoods.length < 2 || lastWeekMoods.length < 2) {
          var threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);
          var sixDaysAgo = new Date(now.getTime() - 6 * 24 * 60 * 60 * 1000);
          thisWeekMoods = moods.filter(function (m) {
            var date = new Date(m.timestamp);
            return date >= threeDaysAgo && date <= now;
          });
          lastWeekMoods = moods.filter(function (m) {
            var date = new Date(m.timestamp);
            return date >= sixDaysAgo && date < threeDaysAgo;
          });
        }
        if (thisWeekMoods.length === 0 || lastWeekMoods.length === 0) return 0;
        var thisWeekAvg = thisWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / thisWeekMoods.length;
        var lastWeekAvg = lastWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / lastWeekMoods.length;
        return thisWeekAvg - lastWeekAvg;
      } catch (error) {
        console.warn('⚠️ Weekly delta calculation failed:', error);
        return 0;
      }
    }
  }, {
    key: "calculateVolatility",
    value: function calculateVolatility(moods) {
      try {
        if (moods.length < 3) return 0;
        var twoWeeksAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);
        var recentMoods = moods.filter(function (m) {
          return new Date(m.timestamp) >= twoWeeksAgo;
        });
        if (recentMoods.length < 3) return 0;
        var moodScores = recentMoods.map(function (m) {
          return m.mood_score;
        });
        var sorted = (0, _toConsumableArray2.default)(moodScores).sort(function (a, b) {
          return a - b;
        });
        var p5Index = Math.floor(0.05 * sorted.length);
        var p95Index = Math.floor(0.95 * sorted.length);
        var p5Value = sorted[p5Index];
        var p95Value = sorted[p95Index];
        var winsorized = moodScores.map(function (score) {
          if (score < p5Value) return p5Value;
          if (score > p95Value) return p95Value;
          return score;
        });
        var mean = winsorized.reduce(function (sum, score) {
          return sum + score;
        }, 0) / winsorized.length;
        var variance = winsorized.reduce(function (sum, score) {
          return sum + Math.pow(score - mean, 2);
        }, 0) / winsorized.length;
        return Math.sqrt(variance);
      } catch (error) {
        console.warn('⚠️ Volatility calculation failed:', error);
        return 0;
      }
    }
  }, {
    key: "calculateBaselines",
    value: function calculateBaselines(moods) {
      try {
        var twoWeeksAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);
        var recentMoods = moods.filter(function (m) {
          return new Date(m.timestamp) >= twoWeeksAgo;
        });
        if (recentMoods.length === 0) {
          return {
            mood: 50,
            energy: 50,
            anxiety: 50
          };
        }
        var avgMood = recentMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / recentMoods.length;
        var avgEnergy = recentMoods.reduce(function (sum, m) {
          return sum + m.energy_level;
        }, 0) / recentMoods.length;
        var avgAnxiety = recentMoods.reduce(function (sum, m) {
          return sum + m.anxiety_level;
        }, 0) / recentMoods.length;
        return {
          mood: parseFloat(avgMood.toFixed(1)),
          energy: parseFloat(avgEnergy.toFixed(1)),
          anxiety: parseFloat(avgAnxiety.toFixed(1))
        };
      } catch (error) {
        console.warn('⚠️ Baselines calculation failed:', error);
        return {
          mood: 50,
          energy: 50,
          anxiety: 50
        };
      }
    }
  }, {
    key: "calculateAnalyticsMEACorrelations",
    value: function calculateAnalyticsMEACorrelations(moods) {
      try {
        var correlations = {};
        if (moods.length < 10) {
          return {
            moodEnergy: {
              r: null,
              n: moods.length,
              p: null
            },
            moodAnxiety: {
              r: null,
              n: moods.length,
              p: null
            },
            energyAnxiety: {
              r: null,
              n: moods.length,
              p: null
            }
          };
        }
        var moodScores = moods.map(function (m) {
          return m.mood_score;
        });
        var energyLevels = moods.map(function (m) {
          return m.energy_level;
        });
        var anxietyLevels = moods.map(function (m) {
          return m.anxiety_level;
        });
        var moodEnergyR = this.calculatePearsonCorrelation(moodScores, energyLevels);
        var moodAnxietyR = this.calculatePearsonCorrelation(moodScores, anxietyLevels);
        var energyAnxietyR = this.calculatePearsonCorrelation(energyLevels, anxietyLevels);
        var moodEnergyP = this.calculateCorrelationPValue(moodEnergyR, moods.length);
        var moodAnxietyP = this.calculateCorrelationPValue(moodAnxietyR, moods.length);
        var energyAnxietyP = this.calculateCorrelationPValue(energyAnxietyR, moods.length);
        return {
          moodEnergy: {
            r: parseFloat(moodEnergyR.toFixed(3)),
            n: moods.length,
            p: moodEnergyP ? parseFloat(moodEnergyP.toFixed(4)) : null
          },
          moodAnxiety: {
            r: parseFloat(moodAnxietyR.toFixed(3)),
            n: moods.length,
            p: moodAnxietyP ? parseFloat(moodAnxietyP.toFixed(4)) : null
          },
          energyAnxiety: {
            r: parseFloat(energyAnxietyR.toFixed(3)),
            n: moods.length,
            p: energyAnxietyP ? parseFloat(energyAnxietyP.toFixed(4)) : null
          }
        };
      } catch (error) {
        console.warn('⚠️ MEA correlations calculation failed:', error);
        return {};
      }
    }
  }, {
    key: "assessDataQuality",
    value: function assessDataQuality(moods) {
      try {
        var qualityScore = 0;
        var sampleSizeScore = Math.min(0.4, moods.length / 50 * 0.4);
        qualityScore += sampleSizeScore;
        var completeMoods = moods.filter(function (m) {
          return m.mood_score !== undefined && m.energy_level !== undefined && m.anxiety_level !== undefined;
        });
        var missingRatio = 1 - completeMoods.length / moods.length;
        var missingScore = Math.max(0, 0.3 - missingRatio * 0.3);
        qualityScore += missingScore;
        var moodScores = completeMoods.map(function (m) {
          return m.mood_score;
        });
        if (moodScores.length > 0) {
          var mean = moodScores.reduce(function (sum, score) {
            return sum + score;
          }, 0) / moodScores.length;
          var std = Math.sqrt(moodScores.reduce(function (sum, score) {
            return sum + Math.pow(score - mean, 2);
          }, 0) / moodScores.length);
          var outliers = moodScores.filter(function (score) {
            return Math.abs(score - mean) > 2 * std;
          });
          var outlierRatio = outliers.length / moodScores.length;
          var outlierScore = Math.max(0, 0.3 - outlierRatio * 0.3);
          qualityScore += outlierScore;
        }
        return Math.min(1, qualityScore);
      } catch (error) {
        console.warn('⚠️ Data quality assessment failed:', error);
        return 0.5;
      }
    }
  }, {
    key: "classifyEmotionalProfile",
    value: function classifyEmotionalProfile(baselines, weeklyDelta, volatility, sampleSize) {
      try {
        var rationale = [];
        var profileType = 'stable';
        var confidence = 0.5;
        if (baselines.mood < 40 && baselines.anxiety > 60) {
          profileType = 'stressed';
          rationale.push(`Düşük mood (${baselines.mood}) ve yüksek anksiyete (${baselines.anxiety})`);
          confidence = 0.8;
        } else if (volatility > 15) {
          profileType = 'volatile';
          rationale.push(`Yüksek mood volatilitesi (${volatility.toFixed(1)})`);
          confidence = 0.7;
        } else if (baselines.energy < 40 && baselines.mood < 55) {
          profileType = 'fatigued';
          rationale.push(`Düşük enerji (${baselines.energy}) ve orta-düşük mood (${baselines.mood})`);
          confidence = 0.75;
        } else if (weeklyDelta > 8 && baselines.mood >= 40 && baselines.mood <= 60) {
          profileType = 'recovering';
          rationale.push(`Pozitif haftalık trend (+${weeklyDelta.toFixed(1)}) ve orta mood`);
          confidence = 0.7;
        } else if (baselines.mood > 60 && volatility < 10 && baselines.anxiety < 50) {
          profileType = 'resilient';
          rationale.push(`Yüksek mood (${baselines.mood}), düşük volatilite (${volatility.toFixed(1)}), düşük anksiyete`);
          confidence = 0.85;
        } else if (baselines.mood > 70 && volatility < 12) {
          profileType = 'elevated';
          rationale.push(`Yüksek mood seviyesi (${baselines.mood}) ve stabil durum`);
          confidence = 0.75;
        } else if (volatility < 8 && Math.abs(weeklyDelta) < 5) {
          profileType = 'stable';
          rationale.push(`Düşük volatilite (${volatility.toFixed(1)}) ve minimal haftalık değişim`);
          confidence = 0.6;
        }
        var sampleSizeMultiplier = Math.min(1, sampleSize / 20);
        confidence = confidence * sampleSizeMultiplier;
        return {
          type: profileType,
          confidence: parseFloat(confidence.toFixed(3)),
          rationale: rationale
        };
      } catch (error) {
        console.warn('⚠️ Emotional profile classification failed:', error);
        return {
          type: 'stable',
          confidence: 0.3,
          rationale: ['Profil sınıflaması başarısız - varsayılan stabil profil']
        };
      }
    }
  }, {
    key: "analyzeBestTimes",
    value: function analyzeBestTimes(moods) {
      try {
        if (moods.length < 7) {
          return {
            confidence: 0.1
          };
        }
        var dayStats = {};
        var hourStats = {};
        moods.forEach(function (m) {
          var date = new Date(m.timestamp);
          var dayOfWeek = date.getDay();
          var hour = date.getHours();
          if (!dayStats[dayOfWeek]) dayStats[dayOfWeek] = {
            total: 0,
            count: 0
          };
          dayStats[dayOfWeek].total += m.mood_score;
          dayStats[dayOfWeek].count += 1;
          if (!hourStats[hour]) hourStats[hour] = {
            total: 0,
            count: 0
          };
          hourStats[hour].total += m.mood_score;
          hourStats[hour].count += 1;
        });
        var bestDay = '';
        var bestDayScore = 0;
        var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
        Object.entries(dayStats).forEach(function (_ref43) {
          var _ref44 = (0, _slicedToArray2.default)(_ref43, 2),
            day = _ref44[0],
            stats = _ref44[1];
          if (stats.count >= 2) {
            var avgScore = stats.total / stats.count;
            if (avgScore > bestDayScore) {
              bestDayScore = avgScore;
              bestDay = dayNames[parseInt(day)];
            }
          }
        });
        var bestTimeSlot = '';
        var bestTimeScore = 0;
        Object.entries(hourStats).forEach(function (_ref45) {
          var _ref46 = (0, _slicedToArray2.default)(_ref45, 2),
            hour = _ref46[0],
            stats = _ref46[1];
          if (stats.count >= 2) {
            var avgScore = stats.total / stats.count;
            if (avgScore > bestTimeScore) {
              bestTimeScore = avgScore;
              var h = parseInt(hour);
              if (h >= 6 && h < 12) bestTimeSlot = 'Sabah';else if (h >= 12 && h < 18) bestTimeSlot = 'Öğleden sonra';else if (h >= 18 && h < 22) bestTimeSlot = 'Akşam';else bestTimeSlot = 'Gece';
            }
          }
        });
        var confidence = Math.min(0.8, moods.length / 30 * 0.8);
        return {
          dayOfWeek: bestDay || undefined,
          timeOfDay: bestTimeSlot || undefined,
          confidence: parseFloat(confidence.toFixed(3))
        };
      } catch (error) {
        console.warn('⚠️ Best times analysis failed:', error);
        return {
          confidence: 0.1
        };
      }
    }
  }, {
    key: "calculateGlobalConfidence",
    value: function calculateGlobalConfidence(sampleSize, dataQuality, profileConfidence, correlations) {
      try {
        var _correlations$moodEne;
        var sampleComponent = Math.min(0.4, sampleSize / 50 * 0.4);
        var qualityComponent = dataQuality * 0.3;
        var profileComponent = profileConfidence * 0.2;
        var correlationComponent = 0;
        if (((_correlations$moodEne = correlations.moodEnergy) == null ? void 0 : _correlations$moodEne.r) !== null) {
          var _correlations$moodEne2, _correlations$moodAnx, _correlations$energyA;
          var avgCorrelationStrength = (Math.abs(((_correlations$moodEne2 = correlations.moodEnergy) == null ? void 0 : _correlations$moodEne2.r) || 0) + Math.abs(((_correlations$moodAnx = correlations.moodAnxiety) == null ? void 0 : _correlations$moodAnx.r) || 0) + Math.abs(((_correlations$energyA = correlations.energyAnxiety) == null ? void 0 : _correlations$energyA.r) || 0)) / 3;
          correlationComponent = avgCorrelationStrength * 0.1;
        }
        var totalConfidence = sampleComponent + qualityComponent + profileComponent + correlationComponent;
        return Math.min(0.95, totalConfidence);
      } catch (error) {
        console.warn('⚠️ Global confidence calculation failed:', error);
        return 0.3;
      }
    }
  }, {
    key: "assessAnalyticsDataQuality",
    value: function assessAnalyticsDataQuality(moods) {
      try {
        if (moods.length === 0) return 0.1;
        var qualityScore = 0;
        if (moods.length >= 30) qualityScore += 0.4;else if (moods.length >= 14) qualityScore += 0.3;else if (moods.length >= 7) qualityScore += 0.2;else qualityScore += 0.1;
        var validMoodScores = moods.filter(function (m) {
          return m.mood_score !== null && m.mood_score !== undefined;
        });
        var missingRatio = 1 - validMoodScores.length / moods.length;
        var missingScore = Math.max(0, 0.3 - missingRatio * 0.3);
        qualityScore += missingScore;
        if (validMoodScores.length >= 5) {
          var scores = validMoodScores.map(function (m) {
            return m.mood_score;
          });
          var mean = scores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / scores.length;
          var std = Math.sqrt(scores.reduce(function (sum, score) {
            return sum + Math.pow(score - mean, 2);
          }, 0) / scores.length);
          var outliers = scores.filter(function (score) {
            return Math.abs(score - mean) > 2 * std;
          });
          var outlierRatio = outliers.length / scores.length;
          var outlierScore = Math.max(0, 0.3 - outlierRatio * 0.3);
          qualityScore += outlierScore;
        }
        return Math.min(1, qualityScore);
      } catch (error) {
        console.warn('⚠️ Analytics data quality assessment failed:', error);
        return 0.1;
      }
    }
  }, {
    key: "classifyAnalyticsEmotionalProfile",
    value: function classifyAnalyticsEmotionalProfile(moods, baselines, weeklyDelta, volatility, correlations) {
      try {
        var rationale = [];
        var profileType = 'stable';
        var confidence = 0.5;
        if (baselines.mood < 40 && baselines.anxiety > 60) {
          profileType = 'stressed';
          rationale.push(`Düşük mood (${baselines.mood.toFixed(1)}) ve yüksek anksiyete (${baselines.anxiety.toFixed(1)})`);
          confidence = 0.8;
        } else if (volatility > 15) {
          profileType = 'volatile';
          rationale.push(`Yüksek mood volatilitesi (${volatility.toFixed(1)})`);
          confidence = 0.7;
        } else if (baselines.energy < 40 && baselines.mood < 55) {
          profileType = 'fatigued';
          rationale.push(`Düşük enerji (${baselines.energy.toFixed(1)}) ve orta-düşük mood (${baselines.mood.toFixed(1)})`);
          confidence = 0.75;
        } else if (weeklyDelta > 8 && baselines.mood >= 40 && baselines.mood <= 60) {
          profileType = 'recovering';
          rationale.push(`Pozitif haftalık trend (+${weeklyDelta.toFixed(1)}) ve orta mood (${baselines.mood.toFixed(1)})`);
          confidence = 0.6;
        } else if (baselines.mood >= 65 && volatility <= 8 && baselines.anxiety <= 40) {
          profileType = 'resilient';
          rationale.push(`Yüksek mood (${baselines.mood.toFixed(1)}), düşük volatilite (${volatility.toFixed(1)}) ve düşük anksiyete (${baselines.anxiety.toFixed(1)})`);
          confidence = 0.85;
        } else if (baselines.mood >= 70) {
          profileType = 'elevated';
          rationale.push(`Yüksek mood baseline (${baselines.mood.toFixed(1)})`);
          confidence = 0.7;
        } else {
          profileType = 'stable';
          rationale.push(`Dengeli duygusal durum (mood: ${baselines.mood.toFixed(1)}, volatilite: ${volatility.toFixed(1)})`);
          confidence = 0.5;
        }
        return {
          type: profileType,
          confidence: confidence,
          rationale: rationale
        };
      } catch (error) {
        console.warn('⚠️ Analytics emotional profile classification failed:', error);
        return {
          type: 'stable',
          confidence: 0.3,
          rationale: ['Analiz hatası nedeniyle varsayılan profil']
        };
      }
    }
  }, {
    key: "analyzeAnalyticsBestTimes",
    value: function analyzeAnalyticsBestTimes(moods) {
      try {
        if (moods.length < 7) return {
          confidence: 0.1
        };
        var dayOfWeekCounts = {};
        var timeOfDayCounts = {};
        var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        moods.forEach(function (mood) {
          if (mood.mood_score && mood.created_at) {
            var date = new Date(mood.created_at);
            var dayOfWeek = dayNames[date.getDay()];
            var hour = date.getHours();
            var timeSlot = hour < 12 ? 'morning' : hour < 18 ? 'afternoon' : 'evening';
            if (!dayOfWeekCounts[dayOfWeek]) {
              dayOfWeekCounts[dayOfWeek] = {
                count: 0,
                avgMood: 0
              };
            }
            dayOfWeekCounts[dayOfWeek].count++;
            dayOfWeekCounts[dayOfWeek].avgMood += mood.mood_score;
            if (!timeOfDayCounts[timeSlot]) {
              timeOfDayCounts[timeSlot] = {
                count: 0,
                avgMood: 0
              };
            }
            timeOfDayCounts[timeSlot].count++;
            timeOfDayCounts[timeSlot].avgMood += mood.mood_score;
          }
        });
        var bestDay = '';
        var bestDayMood = 0;
        Object.keys(dayOfWeekCounts).forEach(function (day) {
          var avgMood = dayOfWeekCounts[day].avgMood / dayOfWeekCounts[day].count;
          dayOfWeekCounts[day].avgMood = avgMood;
          if (avgMood > bestDayMood && dayOfWeekCounts[day].count >= 2) {
            bestDay = day;
            bestDayMood = avgMood;
          }
        });
        var bestTime = '';
        var bestTimeMood = 0;
        Object.keys(timeOfDayCounts).forEach(function (time) {
          var avgMood = timeOfDayCounts[time].avgMood / timeOfDayCounts[time].count;
          timeOfDayCounts[time].avgMood = avgMood;
          if (avgMood > bestTimeMood && timeOfDayCounts[time].count >= 2) {
            bestTime = time;
            bestTimeMood = avgMood;
          }
        });
        return {
          dayOfWeek: bestDay || undefined,
          timeOfDay: bestTime || undefined,
          confidence: Math.min(0.8, moods.length / 20)
        };
      } catch (error) {
        console.warn('⚠️ Analytics best times analysis failed:', error);
        return {
          confidence: 0.1
        };
      }
    }
  }, {
    key: "calculateAnalyticsGlobalConfidence",
    value: function calculateAnalyticsGlobalConfidence(moods, dataQuality, profile) {
      try {
        var confidence = 0;
        confidence += dataQuality * 0.4;
        var sampleSize = moods.length;
        if (sampleSize >= 30) confidence += 0.3;else if (sampleSize >= 14) confidence += 0.2;else if (sampleSize >= 7) confidence += 0.1;else confidence += 0.05;
        if (profile && profile.confidence) {
          confidence += profile.confidence * 0.2;
        }
        var now = Date.now();
        var recentCount = moods.filter(function (m) {
          var moodTime = new Date(m.created_at).getTime();
          var daysDiff = (now - moodTime) / (1000 * 60 * 60 * 24);
          return daysDiff <= 7;
        }).length;
        if (recentCount >= 3) confidence += 0.1;else if (recentCount >= 1) confidence += 0.05;
        return Math.min(1, Math.max(0.1, confidence));
      } catch (error) {
        console.warn('⚠️ Analytics global confidence calculation failed:', error);
        return 0.3;
      }
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!UnifiedAIPipeline.instance) {
        UnifiedAIPipeline.instance = new UnifiedAIPipeline();
      }
      return UnifiedAIPipeline.instance;
    }
  }]);
}();
var unifiedPipeline = exports.unifiedPipeline = UnifiedAIPipeline.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmVhdHVyZUZsYWdzIiwicmVxdWlyZSIsIl9hc3luY1N0b3JhZ2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FpVGVsZW1ldHJ5IiwiX3N1cGFiYXNlIiwic2ltcGxlSGFzaCIsInN0ciIsImhhc2giLCJsZW5ndGgiLCJ0b1N0cmluZyIsImkiLCJjaGFyIiwiY2hhckNvZGVBdCIsIk1hdGgiLCJhYnMiLCJVbmlmaWVkQUlQaXBlbGluZSIsImV4cG9ydHMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsImNhY2hlIiwiTWFwIiwiaXNUZXN0TW9kZSIsInByb2Nlc3MiLCJlbnYiLCJURVNUX01PREUiLCJ0ZXN0VFRMIiwicGFyc2VJbnQiLCJURVNUX1RUTF9NUyIsIk1PRFVMRV9UVExTIiwiaW5zaWdodHMiLCJwYXR0ZXJucyIsInZvaWNlIiwicHJvZ3Jlc3MiLCJjYnQiLCJpbnZhbGlkYXRpb25Ib29rcyIsInNldHVwSW52YWxpZGF0aW9uSG9va3MiLCJzdGFydENhY2hlQ2xlYW51cCIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImdldE1vZHVsZVRUTCIsImlucHV0IiwiX2lucHV0JGNvbnRleHQiLCJfaW5wdXQkY29udGV4dDIiLCJfaW5wdXQkY29udGV4dDMiLCJ0eXBlIiwiY29udGV4dCIsInNvdXJjZSIsIl9wcm9jZXNzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIkZFQVRVUkVfRkxBR1MiLCJpc0VuYWJsZWQiLCJjb25zb2xlIiwibG9nIiwidHJhY2tBSUludGVyYWN0aW9uIiwiQUlFdmVudFR5cGUiLCJVTklGSUVEX1BJUEVMSU5FX0RJU0FCTEVEIiwidXNlcklkIiwiaW5wdXRUeXBlIiwicGlwZWxpbmUiLCJyZWFzb24iLCJ0aW1lc3RhbXAiLCJtZXRhZGF0YSIsInBpcGVsaW5lVmVyc2lvbiIsInByb2Nlc3NlZEF0IiwiY2FjaGVUVEwiLCJwcm9jZXNzaW5nVGltZSIsImNhY2hlS2V5IiwiZ2VuZXJhdGVDYWNoZUtleSIsIlVOSUZJRURfUElQRUxJTkVfU1RBUlRFRCIsImNhY2hlZCIsImdldEZyb21DYWNoZSIsIlVOSUZJRURfUElQRUxJTkVfQ0FDSEVfSElUIiwiT2JqZWN0IiwiYXNzaWduIiwicmVzdWx0IiwiZXhlY3V0ZVBpcGVsaW5lIiwic2V0Q2FjaGVXaXRoSW5zaWdodHNQb2xpY3kiLCJVTklGSUVEX1BJUEVMSU5FX0NPTVBMRVRFRCIsIm1vZHVsZXMiLCJnZXRFbmFibGVkTW9kdWxlcyIsInJlc3VsdFNpemUiLCJKU09OIiwic3RyaW5naWZ5IiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyIsIl9leGVjdXRlUGlwZWxpbmUiLCJtb2R1bGVUVEwiLCJwcm9taXNlcyIsInB1c2giLCJwcm9jZXNzVm9pY2VBbmFseXNpcyIsInRoZW4iLCJwcm9jZXNzUGF0dGVyblJlY29nbml0aW9uIiwic2hvdWxkUnVuQ0JUIiwicHJvY2Vzc0NCVEFuYWx5c2lzIiwic2hvdWxkUnVuQnJlYXRod29yayIsInByb2Nlc3NCcmVhdGh3b3JrQW5hbHlzaXMiLCJicmVhdGh3b3JrIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJfcmVzdWx0JHZvaWNlIiwidm9pY2VIaW50cyIsImNhdGVnb3J5Iiwidm9pY2VDYXRlZ29yeSIsInZvaWNlQ29uZmlkZW5jZSIsImNvbmZpZGVuY2UiLCJ2b2ljZVN1Z2dlc3Rpb24iLCJzdWdnZXN0aW9uIiwidW5kZWZpbmVkIiwiZW5oYW5jZWRJbnB1dCIsImhpbnRzIiwicHJvY2Vzc0luc2lnaHRzR2VuZXJhdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsIl9wYXR0ZXJuc0FycmF5JGZpbmQiLCJwYXR0ZXJuc0FycmF5IiwibW9vZEFuYWx5dGljcyIsImZpbmQiLCJwIiwiYW5hbHl0aWNzIiwibW9vZCIsImNvbnRlbnQiLCJjYnRSZWNvcmRzIiwidmFsaWRSZWNvcmRzIiwiZmlsdGVyIiwiciIsIm1vb2RfYmVmb3JlIiwibW9vZF9hZnRlciIsImRlbHRhcyIsIm1hcCIsImF2Z0RlbHRhIiwicmVkdWNlIiwic3VtIiwiZCIsImRlbHRhVmFyaWFuY2UiLCJwb3ciLCJ2b2xhdGlsaXR5Iiwic3FydCIsInJlY2VudFJlY29yZHMiLCJzbGljZSIsIm9sZGVyUmVjb3JkcyIsIndlZWtseURlbHRhIiwicmVjZW50QXZnIiwib2xkZXJBdmciLCJtaW4iLCJzYW1wbGVTaXplIiwicm91bmQiLCJkYXRhUXVhbGl0eSIsImJhc2VsaW5lcyIsIm1vb2RJbXByb3ZlbWVudCIsInRvRml4ZWQiLCJjb21wdWxzaW9ucyIsImRheUdyb3VwcyIsImZvckVhY2giLCJjIiwiZGF5IiwidG9EYXRlU3RyaW5nIiwiZGFpbHlDb3VudHMiLCJ2YWx1ZXMiLCJhdmdEYWlseSIsImNvdW50IiwidmFyaWFuY2UiLCJzb3J0ZWREYXlzIiwiZW50cmllcyIsInNvcnQiLCJfcmVmIiwiX3JlZjIiLCJfcmVmMyIsIl9zbGljZWRUb0FycmF5MiIsImEiLCJfcmVmNCIsImIiLCJnZXRUaW1lIiwicmVjZW50RGF5cyIsIm9sZGVyRGF5cyIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9yZWY4IiwidHJhY2tpbmciLCJfeDIiLCJfcHJvY2Vzc1ZvaWNlQW5hbHlzaXMiLCJfeWllbGQkaW1wb3J0IiwidW5pZmllZFZvaWNlQW5hbHlzaXMiLCJhbmFseXNpcyIsInJvdXRlIiwiZXJyb3IiLCJ3YXJuIiwiZ2VuZXJhdGVIZXVyaXN0aWNWb2ljZUFuYWx5c2lzIiwiX3gzIiwiX3Byb2Nlc3NQYXR0ZXJuUmVjb2duaXRpb24iLCJ0ZW1wb3JhbCIsImJlaGF2aW9yYWwiLCJlbnZpcm9ubWVudGFsIiwidHJpZ2dlcnMiLCJzZXZlcml0eSIsImFuYWx5c2lzVGltZSIsImRhdGFQb2ludHMiLCJleHRyYWN0VGVtcG9yYWxQYXR0ZXJucyIsIm1vb2RzIiwiX3BhdHRlcm5zJHRlbXBvcmFsIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImV4dHJhY3RNb29kVGVtcG9yYWxQYXR0ZXJucyIsInByb2Nlc3NNb29kQW5hbHl0aWNzIiwiaGFzQWR2YW5jZWRBbmFseXRpY3MiLCJfbW9vZEFuYWx5dGljcyRwcm9maWwiLCJNT09EX0FOQUxZVElDU19DT01QVVRFRCIsInByb2ZpbGUiLCJjb3JyZWxhdGlvbnNBdmFpbGFibGUiLCJrZXlzIiwiY29ycmVsYXRpb25zIiwidGVsZW1ldHJ5RXJyb3IiLCJleHRyYWN0QmVoYXZpb3JhbFBhdHRlcm5zIiwiZXh0cmFjdEVudmlyb25tZW50YWxUcmlnZ2VycyIsImFuYWx5emVUcmlnZ2VycyIsImFuYWx5emVTZXZlcml0eVByb2dyZXNzaW9uIiwiY2FsY3VsYXRlUGF0dGVybkNvbmZpZGVuY2UiLCJfcGF0dGVybnMkYmVoYXZpb3JhbCIsIl9wYXR0ZXJucyR0cmlnZ2VycyIsInRleHRQYXR0ZXJucyIsImV4dHJhY3RUZXh0UGF0dGVybnMiLCJfeDQiLCJfcHJvY2Vzc0NCVEFuYWx5c2lzIiwiYW5hbHlzaXNSZXF1ZXN0IiwicHJvY2Vzc0NCVFByb2dyZXNzQW5hbHl0aWNzIiwidGV4dCIsImRlc2NyaXB0aW9uIiwibm90ZXMiLCJkaXN0b3J0aW9ucyIsInJlZnJhbWVzIiwidGVjaG5pcXVlcyIsInRob3VnaHRSZWNvcmQiLCJ1cmdlbmN5IiwidGV4dExlbmd0aCIsImRldGVjdGVkRGlzdG9ydGlvbnMiLCJkZXRlY3RDb2duaXRpdmVEaXN0b3J0aW9ucyIsImdlbmVyYXRlVGhvdWdodFJlY29yZCIsImdlbmVyYXRlQ0JUUmVmcmFtZXMiLCJyZWNvbW1lbmRDQlRUZWNobmlxdWVzIiwiYXNzZXNzQ29nbml0aXZlRGlzdG9ydGlvblNldmVyaXR5IiwiY2FsY3VsYXRlQ0JUVXJnZW5jeSIsImNhbGN1bGF0ZUNCVENvbmZpZGVuY2UiLCJfeWllbGQkaW1wb3J0MiIsImNidEVuZ2luZSIsImVuYWJsZWQiLCJlbmdpbmVEaXN0b3J0aW9ucyIsImRldGVjdERpc3RvcnRpb25zIiwiZW5naW5lUmVmcmFtZXMiLCJzdWdnZXN0UmVmcmFtZXMiLCJjb25jYXQiLCJuYW1lIiwibWF4IiwiZW5naW5lRXJyb3IiLCJfeDUiLCJsb3dlclRleHQiLCJ0b0xvd2VyQ2FzZSIsImNhdGFzdHJvcGhpemluZ1BhdHRlcm5zIiwicGF0dGVybiIsIndlaWdodCIsImNhdGFzdHJvcGhpemluZ0V2aWRlbmNlIiwiY2F0YXN0cm9waGl6aW5nU2NvcmUiLCJfcmVmOSIsIm1hdGNoZXMiLCJtYXRjaCIsImV2aWRlbmNlIiwiYWxsT3JOb3RoaW5nUGF0dGVybnMiLCJhbGxPck5vdGhpbmdFdmlkZW5jZSIsImFsbE9yTm90aGluZ1Njb3JlIiwiX3JlZjAiLCJtaW5kUmVhZGluZ1BhdHRlcm5zIiwibWluZFJlYWRpbmdFdmlkZW5jZSIsIm1pbmRSZWFkaW5nU2NvcmUiLCJfcmVmMSIsInBlcnNvbmFsaXphdGlvblBhdHRlcm5zIiwicGVyc29uYWxpemF0aW9uRXZpZGVuY2UiLCJwZXJzb25hbGl6YXRpb25TY29yZSIsIl9yZWYxMCIsImxhYmVsaW5nUGF0dGVybnMiLCJsYWJlbGluZ0V2aWRlbmNlIiwibGFiZWxpbmdTY29yZSIsIl9yZWYxMSIsInByaW1hcnlEaXN0b3J0aW9uIiwiYXV0b21hdGljVGhvdWdodCIsInN1YnN0cmluZyIsImVtb3Rpb24iLCJleHRyYWN0RW1vdGlvbkZyb21UZXh0IiwiaW50ZW5zaXR5IiwiY2FsY3VsYXRlRW1vdGlvbmFsSW50ZW5zaXR5IiwiZGlzdG9ydGlvbiIsImJhbGFuY2VkVGhvdWdodCIsImNyZWF0ZWRBdCIsInRvSVNPU3RyaW5nIiwiX2dlbmVyYXRlQ0JUUmVmcmFtZXMiLCJTZXQiLCJfeDYiLCJfeDciLCJkaXN0b3J0aW9uTmFtZXMiLCJpbmNsdWRlcyIsInByaW9yaXR5IiwiYXZnQ29uZmlkZW5jZSIsImludGVuc2l0eVdvcmRzIiwiaW50ZW5zaXR5TWF0Y2hlcyIsImF2Z0Rpc3RvcnRpb25Db25maWRlbmNlIiwibGVuZ3RoQm9udXMiLCJtb29kS2V5d29yZHMiLCJvY2RLZXl3b3JkcyIsImNidEtleXdvcmRzIiwiYnJlYXRod29ya0tleXdvcmRzIiwibW9vZENvdW50Iiwia2V5d29yZCIsIm9jZENvdW50IiwiY2J0Q291bnQiLCJicmVhdGh3b3JrQ291bnQiLCJtYXhDb3VudCIsImV4dHJhY3RlZERhdGEiLCJ0cmlnZ2VyIiwia2V5d29yZE1hdGNoZXMiLCJlbW90aW9ucyIsIl9yZWYxMiIsIl9yZWYxMyIsInRlc3QiLCJpbnRlbnNpZmllcnMiLCJiYXNlSW50ZW5zaXR5IiwiaW50ZW5zaWZpZXJCb251cyIsIl9wcm9jZXNzSW5zaWdodHNHZW5lcmF0aW9uIiwiX2lucHV0JGNvbnRleHQ0IiwiX2luc2lnaHRzJHByb2dyZXNzMiIsIl9pbnNpZ2h0cyRtb3RpdmF0aW9uYSIsIl9pbnNpZ2h0cyR0aGVyYXBldXRpYzUiLCJ0aGVyYXBldXRpYyIsIm1vdGl2YXRpb25hbCIsImdlbmVyYXRlZEF0IiwidG90YWxJbnNpZ2h0cyIsImNhdGVnb3JpZXMiLCJfaW5zaWdodHMkdGhlcmFwZXV0aWMiLCJ2b2ljZUVuaGFuY2VkSW5zaWdodHMiLCJnZW5lcmF0ZVZvaWNlRW5oYW5jZWRJbnNpZ2h0cyIsIklOU0lHSFRTX0RFTElWRVJFRCIsImluc2lnaHRzSGludHNBcHBsaWVkIiwiZW5oYW5jZWRJbnNpZ2h0c0NvdW50Iiwib3JpZ2luYWxQYXR0ZXJuc0NvdW50IiwiayIsIl9wYXR0ZXJucyRrIiwiX2luc2lnaHRzJHRoZXJhcGV1dGljMiIsInRlbXBvcmFsSW5zaWdodHMiLCJnZW5lcmF0ZVRlbXBvcmFsSW5zaWdodHMiLCJfaW5zaWdodHMkYmVoYXZpb3JhbCIsImJlaGF2aW9yYWxJbnNpZ2h0cyIsImdlbmVyYXRlQmVoYXZpb3JhbEluc2lnaHRzIiwiX2luc2lnaHRzJHRoZXJhcGV1dGljMyIsInRyaWdnZXJJbnNpZ2h0cyIsImdlbmVyYXRlVHJpZ2dlckluc2lnaHRzIiwiX2luc2lnaHRzJHByb2dyZXNzIiwic2V2ZXJpdHlJbnNpZ2h0cyIsImdlbmVyYXRlU2V2ZXJpdHlJbnNpZ2h0cyIsIl9pbnNpZ2h0cyR0aGVyYXBldXRpYzQiLCJlbnZpcm9ubWVudGFsSW5zaWdodHMiLCJnZW5lcmF0ZUVudmlyb25tZW50YWxJbnNpZ2h0cyIsInByb2dyZXNzSW5zaWdodHMiLCJnZW5lcmF0ZVByb2dyZXNzSW5zaWdodHMiLCJtb3RpdmF0aW9uYWxJbnNpZ2h0cyIsImdlbmVyYXRlTW90aXZhdGlvbmFsSW5zaWdodHMiLCJjcm9zc1BhdHRlcm5JbnNpZ2h0cyIsImdlbmVyYXRlQ3Jvc3NQYXR0ZXJuSW5zaWdodHMiLCJjYWxjdWxhdGVJbnNpZ2h0c01ldGFkYXRhIiwicHJpb3JpdGl6ZUluc2lnaHRzIiwiX2luc2lnaHRzJHRoZXJhcGV1dGljNiIsIl9pbnNpZ2h0cyRwcm9ncmVzczMiLCJmYWxsYmFja0luc2lnaHRzIiwiZ2VuZXJhdGVGYWxsYmFja0luc2lnaHRzIiwiaW5zaWdodHNDb3VudCIsInBhdHRlcm5zQXZhaWxhYmxlIiwiX3BhdHRlcm5zJGsyIiwiY2F0Y2giLCJfeDgiLCJfeDkiLCJ0ZW1wb3JhbFBhdHRlcm5zIiwidGltZU9mRGF5IiwiYWN0aW9uYWJsZSIsImRhdGEiLCJwZWFrVGltZSIsImZyZXF1ZW5jeSIsImRheU9mV2VlayIsInBlYWtEYXkiLCJjbHVzdGVyQ291bnQiLCJjbHVzdGVycyIsImRpcmVjdGlvbiIsInRyZW5kIiwic3RyZW5ndGgiLCJjb25zaXN0ZW5jeSIsImJlaGF2aW9yYWxQYXR0ZXJucyIsInBlcmNlbnRhZ2UiLCJhdmVyYWdlRHVyYXRpb24iLCJ0cmlnZ2VyUGF0dGVybnMiLCJlbW90aW9uVHVya2lzaCIsImVtb3Rpb25hbFRyaWdnZXIiLCJsb2NhdGlvbiIsInNldmVyaXR5UGF0dGVybnMiLCJtZXRyaWMiLCJyZWNlbnRBdmVyYWdlIiwiY2hhbmdlIiwiaW50ZXJwcmV0YXRpb24iLCJlbnZpcm9ubWVudGFsUGF0dGVybnMiLCJoYXNTZXZlcmVQYXR0ZXJuIiwic29tZSIsInMiLCJhbGxJbnNpZ2h0cyIsImluc2lnaHQiLCJwcmlvcml0eU9yZGVyIiwiYVByaW9yaXR5IiwiYlByaW9yaXR5IiwiX3Byb2Nlc3NCcmVhdGh3b3JrQW5hbHlzaXMiLCJtb29kU2NvcmUiLCJleHRyYWN0TW9vZEZyb21JbnB1dCIsImFueGlldHlMZXZlbCIsImV4dHJhY3RBbnhpZXR5RnJvbUlucHV0IiwicmVjZW50Q29tcHVsc2lvbnMiLCJleHRyYWN0UmVjZW50Q29tcHVsc2lvbnMiLCJ1c2VySW5wdXQiLCJfeWllbGQkaW1wb3J0MyIsImJyZWF0aHdvcmtTdWdnZXN0aW9uU2VydmljZSIsImdlbmVyYXRlU3VnZ2VzdGlvbiIsImN1cnJlbnRUaW1lIiwiaGFzQnJlYXRod29ya1N1Z2dlc3Rpb24iLCJpZCIsInByb3RvY29sIiwiY3VzdG9taXphdGlvbiIsInRpbWluZyIsImVuaGFuY2VtZW50IiwiY29udGV4dHVhbFJlbGV2YW5jZSIsImNhbGN1bGF0ZUJyZWF0aHdvcmtSZWxldmFuY2UiLCJmYWxsYmFja1Byb3RvY29scyIsImZhbGxiYWNrT3B0aW9ucyIsImFkYXB0YXRpb25zIiwidXNlclByZWZlcmVuY2VzIiwidXJnZW5jeUFkanVzdGVkIiwicHJvdG9jb2xDdXN0b21pemVkIiwic2VydmljZUVycm9yIiwicHJvY2Vzc0JyZWF0aHdvcmtIZXVyaXN0aWNzIiwiX3gwIiwibmVlZHNCcmVhdGh3b3JrIiwidHJpZ2dlclR5cGUiLCJjb250ZXh0RGF0YSIsImR1cmF0aW9uIiwiYW54aWV0eSIsImFueGlldHlTY29yZSIsInllc3RlcmRheSIsImNvbXB1bHNpb25Xb3JkcyIsInJlbGV2YW5jZSIsIlNBTVBMRV9TSVpFIiwiaG91ckdyb3VwcyIsImhvdXIiLCJnZXRIb3VycyIsIm1heFBhdHRlcm5zIiwiX3JlZjE0IiwiX3JlZjE1IiwiX3JlZjE2IiwiX3JlZjE3IiwiX3JlZjE4IiwiX3JlZjE5IiwiX3RoaXMiLCJ0cmlnZ2VyR3JvdXBzIiwidG90YWxTZXZlcml0eSIsImdldENvbXB1bHNpb25TZXZlcml0eSIsIl9yZWYyMCIsIl9yZWYyMSIsIl9yZWYyMiIsIl9yZWYyMyIsIl9yZWYyNCIsIl9yZWYyNSIsInJlc3BvbnNlIiwiX2lucHV0JGNvbnRleHQ1IiwiX2lucHV0JGNvbnRleHQ2IiwiX2dldEZyb21DYWNoZSIsIm1lbW9yeUNhY2hlIiwiZ2V0IiwiZXhwaXJlcyIsImRlbGV0ZSIsImNvdW50VG90YWxJbnNpZ2h0cyIsInJlbWFpbmluZ1RUTCIsImZpdmVNaW51dGVzIiwic3VwYWJhc2VDYWNoZWQiLCJnZXRGcm9tU3VwYWJhc2VDYWNoZSIsInNldCIsIm9mZmxpbmVDYWNoZSIsIkFzeW5jU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZWQiLCJwYXJzZSIsInJlbW92ZUl0ZW0iLCJfeDEiLCJzZXRDYWNoZSIsInR0bCIsInNldFRvU3VwYWJhc2VDYWNoZSIsInBlcnNpc3RUb1N0b3JhZ2UiLCJ0dGxEaXNwbGF5Iiwic2hvcnRUVEwiLCJfcmVzdWx0JGluc2lnaHRzIiwiX3Jlc3VsdCRpbnNpZ2h0cyR0aGVyIiwiX3Jlc3VsdCRpbnNpZ2h0cyRwcm9nIiwiX3Jlc3VsdCRpbnNpZ2h0cyRiZWhhIiwiX3Jlc3VsdCRpbnNpZ2h0cyRtb3RpIiwiX2ludmFsaWRhdGVTdGFsZUNhY2hlIiwiaW52YWxpZGF0ZWRDb3VudCIsIm1lbW9yeUtleXMiLCJmcm9tIiwiYWxsS2V5cyIsImdldEFsbEtleXMiLCJ1bmlmaWVkS2V5cyIsInN0YXJ0c1dpdGgiLCJpbnZhbGlkYXRlZCIsImludmFsaWRhdGVTdGFsZUNhY2hlIiwiYW5hbHl6ZVRyYWNraW5nVHJlbmRzIiwiaG91ckNvdW50cyIsImZpbGwiLCJlbnRyeSIsImNyZWF0ZWRfYXQiLCJwZWFrSG91cnMiLCJ0aXRsZSIsInJlY2VudEVudHJpZXMiLCJyZXNpc3RhbmNlU3VtIiwiZSIsInJlc2lzdGFuY2VMZXZlbCIsInJlc2lzdGFuY2VfbGV2ZWwiLCJhdmdSZXNpc3RhbmNlIiwiZmFsbGJhY2siLCJfaW5wdXQkY29udGV4dDciLCJfcGF0dGVybnMkbWV0YWRhdGEiLCJ0cmFja2luZ1BhdHRlcm5zIiwicGVha1BhdHRlcm4iLCJkb21pbmFudFBhdHRlcm4iLCJjb21tb25UcmlnZ2VyIiwiX3BlcnNpc3RUb1N0b3JhZ2UiLCJzZXRJdGVtIiwiX3gxMCIsIl94MTEiLCJfZ2V0RnJvbVN1cGFiYXNlQ2FjaGUiLCJfeWllbGQkc3VwYWJhc2VTZXJ2aWMiLCJzdXBhYmFzZVNlcnZpY2UiLCJzdXBhYmFzZUNsaWVudCIsInNlbGVjdCIsImVxIiwibWF5YmVTaW5nbGUiLCJfeDEyIiwiX3NldFRvU3VwYWJhc2VDYWNoZSIsInNwbGl0IiwiX3lpZWxkJHN1cGFiYXNlU2VydmljMiIsInVwc2VydCIsImNhY2hlX2tleSIsInVzZXJfaWQiLCJvbkNvbmZsaWN0IiwiX3gxMyIsIl94MTQiLCJfdGhpczIiLCJfcmVmMjYiLCJpbnZhbGlkYXRlVXNlckNhY2hlIiwiX3gxNSIsIl9yZWYyNyIsIl94MTYiLCJfcmVmMjgiLCJfeDE3IiwiY2xlYXIiLCJfdHJpZ2dlckludmFsaWRhdGlvbiIsImhvb2siLCJoYW5kbGVyIiwiX3lpZWxkJGltcG9ydDQiLCJlbWl0QUlJbnZhbGlkYXRpb24iLCJDQUNIRV9JTlZBTElEQVRJT04iLCJ0cmlnZ2VySW52YWxpZGF0aW9uIiwiX3gxOCIsIl94MTkiLCJfaW52YWxpZGF0ZVVzZXJDYWNoZSIsIl90aGlzMyIsImtleXNUb0RlbGV0ZSIsIl8iLCJkZWxldGVkQ291bnQiLCJpbnZhbGlkYXRpb25UeXBlIiwia2V5c0RlbGV0ZWQiLCJjYWNoZUtleXMiLCJpbnZhbGlkYXRlU3VwYWJhc2VDYWNoZSIsIl94MjAiLCJfeDIxIiwiX2ludmFsaWRhdGVTdXBhYmFzZUNhY2hlIiwibGlrZVBhdHRlcm4iLCJfeWllbGQkc3VwYWJhc2VTZXJ2aWMzIiwibGlrZSIsIl94MjIiLCJfeDIzIiwiX3RoaXM0Iiwic2V0SW50ZXJ2YWwiLCJfcHJlZGljdE1vb2RJbnRlcnZlbnRpb24iLCJyZWNlbnRNb29kRW50cmllcyIsImN1cnJlbnRNb29kU3RhdGUiLCJJTlNJR0hUU19SRVFVRVNURUQiLCJkYXRhVHlwZSIsImVudHJ5Q291bnQiLCJ0cmVuZEFuYWx5c2lzIiwiYW5hbHl6ZU1vb2RUcmVuZHMiLCJyaXNrRmFjdG9ycyIsImlkZW50aWZ5TW9vZFJpc2tGYWN0b3JzIiwicmlza0xldmVsIiwiY2FsY3VsYXRlTW9vZFJpc2tMZXZlbCIsInByZWRpY3RlZERyb3AiLCJwcmVkaWN0TW9vZERyb3AiLCJpbnRlcnZlbnRpb25zIiwiZ2VuZXJhdGVNb29kSW50ZXJ2ZW50aW9ucyIsImVhcmx5V2FybmluZyIsImNoZWNrRWFybHlXYXJuaW5nVHJpZ2dlcnMiLCJlYXJseVdhcm5pbmdUcmlnZ2VyZWQiLCJ0cmlnZ2VyZWQiLCJTWVNURU1fRVJST1IiLCJjb21wb25lbnQiLCJFcnJvciIsIm1lc3NhZ2UiLCJTdHJpbmciLCJhY3Rpb24iLCJlZmZlY3RpdmVuZXNzUHJvYmFiaWxpdHkiLCJwcmVkaWN0TW9vZEludGVydmVudGlvbiIsIl94MjQiLCJfeDI1IiwiX3gyNiIsInNsb3BlIiwid2Vla2x5Q2hhbmdlIiwic29ydGVkRW50cmllcyIsInNjb3JlcyIsIm1vb2Rfc2NvcmUiLCJuIiwic3VtWCIsInN1bVkiLCJzdW1YWSIsInkiLCJ4Iiwic3VtWFgiLCJtZWFuIiwic2NvcmUiLCJmYWN0b3IiLCJpbXBhY3QiLCJyZWN1cnJpbmdMb3dEYXlzIiwiZGV0ZWN0UmVjdXJyaW5nTG93TW9vZERheXMiLCJoaWdoSW1wYWN0VHJpZ2dlcnMiLCJhbmFseXplSGlnaEltcGFjdFRyaWdnZXJzIiwidG90YWxSaXNrIiwidHJlbmRSaXNrIiwiY29tYmluZWRSaXNrIiwicmlza1Njb3JlIiwibGlrZWxpaG9vZCIsInRpbWVmcmFtZSIsImN1cnJlbnRMZXZlbCIsInBvdGVudGlhbERyb3AiLCJkYXlNb29kcyIsImdldERheSIsImxvd01vb2REYXlzIiwiZGF5TmFtZXMiLCJfcmVmMjkiLCJfcmVmMzAiLCJhdmdNb29kIiwidHJpZ2dlckltcGFjdCIsIm1vb2RJbXBhY3QiLCJ0b3RhbEltcGFjdCIsIl9yZWYzMSIsIl9yZWYzMiIsImF2Z0ltcGFjdCIsIl9yZWYzMyIsIl9yZWYzNCIsInJlY2VudE1vb2RzIiwibSIsImVuZXJneV9sZXZlbCIsImFueGlldHlfbGV2ZWwiLCJ3ZWVrbHlNb29kRGVsdGEiLCJjYWxjdWxhdGVXZWVrbHlNb29kRGVsdGEiLCJ0aGlzV2VlayIsImxhc3RXZWVrIiwiZGVsdGEiLCJkYXNoYm9hcmRNZXRyaWNzIiwiY3VycmVudFdlZWtBdmciLCJwcmV2aW91c1dlZWtBdmciLCJtZWFDb3JyZWxhdGlvbiIsImNhbGN1bGF0ZU1FQUNvcnJlbGF0aW9ucyIsIm1vb2RFbmVyZ3kiLCJtb29kQW54aWV0eSIsIm1vb2RFbmVyZ3lDb3JyZWxhdGlvbiIsIm1vb2RBbnhpZXR5Q29ycmVsYXRpb24iLCJlbmVyZ3lBbnhpZXR5Q29ycmVsYXRpb24iLCJlbmVyZ3lBbnhpZXR5IiwiZW1vdGlvbmFsUHJvZmlsZSIsInByb2ZpbGVUeXBlIiwiYXZlcmFnZU1vb2QiLCJhdmVyYWdlcyIsImF2ZXJhZ2VFbmVyZ3kiLCJlbmVyZ3kiLCJhdmVyYWdlQW54aWV0eSIsIndlZWtseURhdGEiLCJtYXhEYWlseVBhdHRlcm5zIiwiX3JlZjM1IiwiX3JlZjM2IiwiX3JlZjM3IiwiX3JlZjM4IiwiX3JlZjM5IiwiX3JlZjQwIiwiYXZnRW5lcmd5IiwiYXZnQW54aWV0eSIsImRheU5hbWUiLCJwYXJzZUZsb2F0Iiwic2lnbmlmaWNhbmNlIiwib25lV2Vla0FnbyIsInR3b1dlZWtzQWdvIiwidGhpc1dlZWtNb29kcyIsImRhdGUiLCJsYXN0V2Vla01vb2RzIiwidGhpc1dlZWtBdmciLCJsYXN0V2Vla0F2ZyIsIm1pbkRhdGFQb2ludHMiLCJtb29kU2NvcmVzIiwiZW5lcmd5TGV2ZWxzIiwiYW54aWV0eUxldmVscyIsIm1vb2RFbmVyZ3lDb3JyIiwiY2FsY3VsYXRlUGVhcnNvbkNvcnJlbGF0aW9uIiwibW9vZEFueGlldHlDb3JyIiwiZW5lcmd5QW54aWV0eUNvcnIiLCJtZWFuWCIsIm1lYW5ZIiwibnVtZXJhdG9yIiwic3VtWFNxdWFyZWQiLCJzdW1ZU3F1YXJlZCIsInhEaWZmIiwieURpZmYiLCJkZW5vbWluYXRvciIsImNhbGN1bGF0ZUNvcnJlbGF0aW9uUFZhbHVlIiwiZGYiLCJ0IiwiYXBwcm94aW1hdGVUVGVzdFBWYWx1ZSIsIm5vcm1hbENERiIsImNyaXRpY2FsVmFsdWVzIiwiY2xvc2VzdCIsInByZXYiLCJjdXJyIiwicExldmVscyIsInJhdGlvIiwicHJldlQiLCJjdXJyVCIsInByZXZQIiwiY3VyclAiLCJleHAiLCJwcm9iIiwiY2FsY3VsYXRlQW5hbHl0aWNzV2Vla2x5RGVsdGEiLCJjYWxjdWxhdGVBbmFseXRpY3NWb2xhdGlsaXR5IiwiY2FsY3VsYXRlQW5hbHl0aWNzQmFzZWxpbmVzIiwiY2FsY3VsYXRlQW5hbHl0aWNzTUVBQ29ycmVsYXRpb25zIiwiYXNzZXNzQW5hbHl0aWNzRGF0YVF1YWxpdHkiLCJjbGFzc2lmeUFuYWx5dGljc0Vtb3Rpb25hbFByb2ZpbGUiLCJiZXN0VGltZXMiLCJhbmFseXplQW5hbHl0aWNzQmVzdFRpbWVzIiwiY2FsY3VsYXRlQW5hbHl0aWNzR2xvYmFsQ29uZmlkZW5jZSIsInRyaWdnZXJDb3VudHMiLCJrZXl3b3JkcyIsIl9yZWY0MSIsIl9yZWY0MiIsImVudlRyaWdnZXJzIiwiX3RoaXM1IiwicHJvZ3Jlc3Npb24iLCJzb3J0ZWRDb21wdWxzaW9ucyIsImhhc1ZhbGlkU2V2ZXJpdHkiLCJmaXJzdCIsImZsb29yIiwibGFzdCIsImZpcnN0QXZnIiwibGFzdEF2ZyIsIl9wcm9jZXNzQ0JUUHJvZ3Jlc3NBbmFseXRpY3MiLCJ0aG91Z2h0UmVjb3JkcyIsImRpc3RvcnRpb25UcmVuZHMiLCJ0ZWNobmlxdWVFZmZlY3RpdmVuZXNzIiwicHJvZ3Jlc3NBbmFseXNpcyIsInJlY29tbWVuZGF0aW9ucyIsIm5leHRGb2N1cyIsInJlY29yZENvdW50IiwiYW5hbHl6ZUNCVERpc3RvcnRpb25UcmVuZHMiLCJhbmFseXplQ0JUVGVjaG5pcXVlRWZmZWN0aXZlbmVzcyIsImdlbmVyYXRlQ0JUUHJvZ3Jlc3NBbmFseXNpcyIsImdlbmVyYXRlQ0JUUmVjb21tZW5kYXRpb25zIiwiYXNzZXNzQ0JUUmlza0xldmVsIiwiZGV0ZXJtaW5lQ0JUTmV4dEZvY3VzIiwiY2FsY3VsYXRlQ0JUUHJvZ3Jlc3NDb25maWRlbmNlIiwiX3gyNyIsInJlY29yZHMiLCJkaXN0b3J0aW9uQ291bnRzIiwicmVjb3JkIiwiaW5kZXgiLCJoYXMiLCJ0cmVuZHMiLCJvY2N1cnJlbmNlcyIsInRvdGFsUmVjb3JkcyIsIm1pZFBvaW50IiwiZWFybHlPY2N1cnJlbmNlcyIsImlkeCIsImxhdGVPY2N1cnJlbmNlcyIsImVhcmx5UmF0ZSIsImNlaWwiLCJsYXRlUmF0ZSIsImF2Z01vb2RJbXByb3ZlbWVudCIsIm1vb2RBZnRlciIsIm1vb2RCZWZvcmUiLCJ0ZWNobmlxdWUiLCJlZmZlY3RpdmVuZXNzIiwiZXZpZGVuY2VSZWNvcmRzIiwiZXZpZGVuY2VGb3IiLCJldmlkZW5jZUFnYWluc3QiLCJldmlkZW5jZUF2Z0ltcHJvdmVtZW50IiwicmVjZW50QXZnSW1wcm92ZW1lbnQiLCJkZWNsaW5pbmdEaXN0b3J0aW9ucyIsImF2Z01vb2RCZWZvcmUiLCJleHRyYWN0TW9vZFRlbXBvcmFsUGF0dGVybnNCeUhvdXIiLCJtb29kc0J5SG91ciIsInRvdGFsIiwiaG91cmx5QXZlcmFnZXMiLCJoIiwiYXZlcmFnZSIsImhvdXJzIiwiYXZlcmFnZVNjb3JlIiwiZ3JvdXBCeVRpbWVXaW5kb3ciLCJ3aW5kb3dEYXlzIiwid2luZG93cyIsIndpbmRvd01zIiwiY3VycmVudFdpbmRvdyIsImN1cnJlbnRXaW5kb3dTdGFydCIsImNUaW1lIiwiY29tcHVsc2lvbiIsImNhbGN1bGF0ZUF2ZXJhZ2VTZXZlcml0eSIsIl90aGlzNiIsImNhbGN1bGF0ZVR5cGVGcmVxdWVuY3kiLCJmcmVxIiwiZXh0cmFjdERheU9mV2Vla1BhdHRlcm4iLCJkYXlDb3VudHMiLCJhdmdDb3VudCIsImluZGV4T2YiLCJiZWhhdmlvcmFsS2V5d29yZHMiLCJ0cmlnZ2VyS2V5d29yZHMiLCJzb3J0ZWQiLCJwNUluZGV4IiwicDk1SW5kZXgiLCJwNVZhbHVlIiwicDk1VmFsdWUiLCJ3aW5zb3JpemVkIiwicmVjZW50MTREYXlzIiwiZW5lcmd5U2NvcmVzIiwiYW54aWV0eVNjb3JlcyIsInRocmVlRGF5c0FnbyIsInNpeERheXNBZ28iLCJjYWxjdWxhdGVWb2xhdGlsaXR5IiwiY2FsY3VsYXRlQmFzZWxpbmVzIiwibW9vZEVuZXJneVIiLCJtb29kQW54aWV0eVIiLCJlbmVyZ3lBbnhpZXR5UiIsIm1vb2RFbmVyZ3lQIiwibW9vZEFueGlldHlQIiwiZW5lcmd5QW54aWV0eVAiLCJhc3Nlc3NEYXRhUXVhbGl0eSIsInF1YWxpdHlTY29yZSIsInNhbXBsZVNpemVTY29yZSIsImNvbXBsZXRlTW9vZHMiLCJtaXNzaW5nUmF0aW8iLCJtaXNzaW5nU2NvcmUiLCJzdGQiLCJvdXRsaWVycyIsIm91dGxpZXJSYXRpbyIsIm91dGxpZXJTY29yZSIsImNsYXNzaWZ5RW1vdGlvbmFsUHJvZmlsZSIsInJhdGlvbmFsZSIsInNhbXBsZVNpemVNdWx0aXBsaWVyIiwiYW5hbHl6ZUJlc3RUaW1lcyIsImRheVN0YXRzIiwiaG91clN0YXRzIiwiYmVzdERheSIsImJlc3REYXlTY29yZSIsIl9yZWY0MyIsIl9yZWY0NCIsInN0YXRzIiwiYXZnU2NvcmUiLCJiZXN0VGltZVNsb3QiLCJiZXN0VGltZVNjb3JlIiwiX3JlZjQ1IiwiX3JlZjQ2IiwiY2FsY3VsYXRlR2xvYmFsQ29uZmlkZW5jZSIsInByb2ZpbGVDb25maWRlbmNlIiwiX2NvcnJlbGF0aW9ucyRtb29kRW5lIiwic2FtcGxlQ29tcG9uZW50IiwicXVhbGl0eUNvbXBvbmVudCIsInByb2ZpbGVDb21wb25lbnQiLCJjb3JyZWxhdGlvbkNvbXBvbmVudCIsIl9jb3JyZWxhdGlvbnMkbW9vZEVuZTIiLCJfY29ycmVsYXRpb25zJG1vb2RBbngiLCJfY29ycmVsYXRpb25zJGVuZXJneUEiLCJhdmdDb3JyZWxhdGlvblN0cmVuZ3RoIiwidG90YWxDb25maWRlbmNlIiwidmFsaWRNb29kU2NvcmVzIiwiZGF5T2ZXZWVrQ291bnRzIiwidGltZU9mRGF5Q291bnRzIiwidGltZVNsb3QiLCJiZXN0RGF5TW9vZCIsImJlc3RUaW1lIiwiYmVzdFRpbWVNb29kIiwidGltZSIsInJlY2VudENvdW50IiwibW9vZFRpbWUiLCJkYXlzRGlmZiIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJ1bmlmaWVkUGlwZWxpbmUiXSwic291cmNlcyI6WyJVbmlmaWVkQUlQaXBlbGluZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIPCfmoAgVW5pZmllZCBBSSBQaXBlbGluZSB2MS4wXG4gKiBcbiAqIFTDvG0gQUkgYW5hbGl6bGVyaW5pIHRlayBwaXBlbGluZSdkYSB0b3BsYXI6XG4gKiAtIFZvaWNlIEFuYWx5c2lzIChVbmlmaWVkIFZvaWNlKVxuICogLSBQYXR0ZXJuIFJlY29nbml0aW9uXG4gKiAtIEluc2lnaHRzIEdlbmVyYXRpb25cbiAqIC0gQ0JUIEFuYWx5c2lzXG4gKiBcbiAqIOKchSBGSVhFRDogTW9kdWxlLXNwZWNpZmljIGNhY2hlIFRUTHMgaW1wbGVtZW50ZWQ6XG4gKiAtIFZvaWNlIEFuYWx5c2lzOiAxaCBUVExcbiAqIC0gUGF0dGVybiBSZWNvZ25pdGlvbjogMTJoIFRUTCAgXG4gKiAtIEluc2lnaHRzIEdlbmVyYXRpb246IDI0aCBUVExcbiAqIC0gQ0JUIEFuYWx5c2lzOiAyNGggVFRMXG4gKi9cblxuaW1wb3J0IHsgRkVBVFVSRV9GTEFHUyB9IGZyb20gJ0AvY29uc3RhbnRzL2ZlYXR1cmVGbGFncyc7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcbmltcG9ydCB7IHRyYWNrQUlJbnRlcmFjdGlvbiwgQUlFdmVudFR5cGUgfSBmcm9tICcuLi90ZWxlbWV0cnkvYWlUZWxlbWV0cnknO1xuaW1wb3J0IHN1cGFiYXNlU2VydmljZSBmcm9tICdAL3NlcnZpY2VzL3N1cGFiYXNlJztcbmltcG9ydCB7IHNtYXJ0TW9vZEpvdXJuYWxpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc21hcnRNb29kSm91cm5hbGluZ1NlcnZpY2UnO1xuXG4vKipcbiAqIFNpbXBsZSBkZXRlcm1pbmlzdGljIGhhc2ggZnVuY3Rpb24gZm9yIFJlYWN0IE5hdGl2ZVxuICogUmVwbGFjZXMgY3J5cHRvIG1vZHVsZSB3aGljaCBpcyBub3QgYXZhaWxhYmxlIGluIFJlYWN0IE5hdGl2ZVxuICovXG5mdW5jdGlvbiBzaW1wbGVIYXNoKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IGhhc2ggPSAwO1xuICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2gudG9TdHJpbmcoMTYpO1xuICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hhcjtcbiAgICBoYXNoID0gaGFzaCAmIGhhc2g7IC8vIENvbnZlcnQgdG8gMzItYml0IGludGVnZXJcbiAgfVxuICBcbiAgcmV0dXJuIE1hdGguYWJzKGhhc2gpLnRvU3RyaW5nKDE2KTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVFlQRVMgJiBJTlRFUkZBQ0VTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pZmllZFBpcGVsaW5lSW5wdXQge1xuICB1c2VySWQ6IHN0cmluZztcbiAgY29udGVudDogc3RyaW5nIHwgYW55OyAvLyBWb2ljZSB0ZXh0LCB1c2VyIGRhdGEsIGV0Yy5cbiAgdHlwZTogJ3ZvaWNlJyB8ICdkYXRhJyB8ICdtaXhlZCc7XG4gIGNvbnRleHQ/OiB7XG4gICAgc291cmNlOiAndG9kYXknIHwgJ3RyYWNraW5nJyB8ICdjYnQnIHwgJ21vb2QnO1xuICAgIHRpbWVzdGFtcD86IG51bWJlcjtcbiAgICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pZmllZFBpcGVsaW5lUmVzdWx0IHtcbiAgLy8gVm9pY2UgQW5hbHlzaXMgUmVzdWx0c1xuICB2b2ljZT86IHtcbiAgICBjYXRlZ29yeTogJ01PT0QnIHwgJ0NCVCcgfCAnT0NEJyB8ICdCUkVBVEhXT1JLJyB8ICdPVEhFUic7XG4gICAgY29uZmlkZW5jZTogbnVtYmVyO1xuICAgIHN1Z2dlc3Rpb24/OiBzdHJpbmc7XG4gICAgcm91dGU/OiBzdHJpbmc7XG4gIH07XG4gIFxuICAvLyDwn5qAIEVOSEFOQ0VEIEFOQUxZVElDUzogQ2xpbmljYWwtZ3JhZGUgbW9vZCBhbmFseXRpY3NcbiAgYW5hbHl0aWNzPzoge1xuICAgIG1vb2Q/OiB7XG4gICAgICB3ZWVrbHlEZWx0YTogbnVtYmVyO1xuICAgICAgdm9sYXRpbGl0eTogbnVtYmVyO1xuICAgICAgYmFzZWxpbmVzOiB7XG4gICAgICAgIG1vb2Q6IG51bWJlcjtcbiAgICAgICAgZW5lcmd5OiBudW1iZXI7XG4gICAgICAgIGFueGlldHk6IG51bWJlcjtcbiAgICAgIH07XG4gICAgICBjb3JyZWxhdGlvbnM6IHtcbiAgICAgICAgbW9vZEVuZXJneT86IHtcbiAgICAgICAgICByOiBudW1iZXIgfCBudWxsO1xuICAgICAgICAgIG46IG51bWJlcjtcbiAgICAgICAgICBwPzogbnVtYmVyIHwgbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgbW9vZEFueGlldHk/OiB7XG4gICAgICAgICAgcjogbnVtYmVyIHwgbnVsbDtcbiAgICAgICAgICBuOiBudW1iZXI7XG4gICAgICAgICAgcD86IG51bWJlciB8IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIGVuZXJneUFueGlldHk/OiB7XG4gICAgICAgICAgcjogbnVtYmVyIHwgbnVsbDtcbiAgICAgICAgICBuOiBudW1iZXI7XG4gICAgICAgICAgcD86IG51bWJlciB8IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgcHJvZmlsZT86IHtcbiAgICAgICAgdHlwZTogJ3Jlc2lsaWVudCcgfCAnc3RyZXNzZWQnIHwgJ2ZhdGlndWVkJyB8ICdlbGV2YXRlZCcgfCAnc3RhYmxlJyB8ICd2b2xhdGlsZScgfCAncmVjb3ZlcmluZyc7XG4gICAgICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgICAgICAgcmF0aW9uYWxlOiBzdHJpbmdbXTtcbiAgICAgIH07XG4gICAgICBiZXN0VGltZXM/OiB7XG4gICAgICAgIGRheU9mV2Vlaz86IHN0cmluZztcbiAgICAgICAgdGltZU9mRGF5Pzogc3RyaW5nO1xuICAgICAgICBjb25maWRlbmNlOiBudW1iZXI7XG4gICAgICB9O1xuICAgICAgc2FtcGxlU2l6ZTogbnVtYmVyO1xuICAgICAgZGF0YVF1YWxpdHk6IG51bWJlcjtcbiAgICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgICB9O1xuICB9O1xuICBcbiAgLy8gUGF0dGVybiBSZWNvZ25pdGlvbiBSZXN1bHRzIChFbmhhbmNlZCBmb3IgRGFzaGJvYXJkKVxuICBwYXR0ZXJucz86IHtcbiAgICB0ZW1wb3JhbDogQXJyYXk8e1xuICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgZnJlcXVlbmN5PzogbnVtYmVyO1xuICAgICAgdGltZU9mRGF5Pzogc3RyaW5nO1xuICAgICAgdHJlbmQ/OiAnaW5jcmVhc2luZycgfCAnZGVjcmVhc2luZycgfCAnc3RhYmxlJztcbiAgICAgIC8vIEVuaGFuY2VkIG1vb2QgcGF0dGVybiBmaWVsZHNcbiAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgICBwYXR0ZXJuPzogc3RyaW5nO1xuICAgICAgY29uZmlkZW5jZT86IG51bWJlcjtcbiAgICAgIHNldmVyaXR5PzogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJztcbiAgICAgIGFjdGlvbmFibGU/OiBib29sZWFuO1xuICAgICAgc3VnZ2VzdGlvbj86IHN0cmluZztcbiAgICAgIHNvdXJjZT86IHN0cmluZztcbiAgICAgIC8vIPCfjq8gRGFzaGJvYXJkIFJlYWR5IE1ldHJpY3NcbiAgICAgIGRhc2hib2FyZE1ldHJpY3M/OiB7XG4gICAgICAgIC8vIFdlZWtseSBEZWx0YSBNZXRyaWNzXG4gICAgICAgIHdlZWtseURlbHRhPzogbnVtYmVyO1xuICAgICAgICBjdXJyZW50V2Vla0F2Zz86IG51bWJlcjtcbiAgICAgICAgcHJldmlvdXNXZWVrQXZnPzogbnVtYmVyO1xuICAgICAgICB0cmVuZD86ICdpbXByb3ZpbmcnIHwgJ2RlY2xpbmluZycgfCAnc3RhYmxlJztcbiAgICAgICAgLy8gTUVBIENvcnJlbGF0aW9uIE1ldHJpY3NcbiAgICAgICAgbW9vZEVuZXJneUNvcnJlbGF0aW9uPzogbnVtYmVyO1xuICAgICAgICBtb29kQW54aWV0eUNvcnJlbGF0aW9uPzogbnVtYmVyO1xuICAgICAgICBlbmVyZ3lBbnhpZXR5Q29ycmVsYXRpb24/OiBudW1iZXI7XG4gICAgICAgIGVtb3Rpb25hbFByb2ZpbGU/OiBzdHJpbmc7XG4gICAgICAgIGF2ZXJhZ2VNb29kPzogbnVtYmVyO1xuICAgICAgICBhdmVyYWdlRW5lcmd5PzogbnVtYmVyO1xuICAgICAgICBhdmVyYWdlQW54aWV0eT86IG51bWJlcjtcbiAgICAgICAgLy8gRGFpbHkgUGF0dGVybiBNZXRyaWNzXG4gICAgICAgIGRheU9mV2Vlaz86IG51bWJlcjtcbiAgICAgICAgZGF5TmFtZT86IHN0cmluZztcbiAgICAgICAgc2lnbmlmaWNhbmNlPzogJ3Bvc2l0aXZlJyB8ICduZWdhdGl2ZScgfCAnbmV1dHJhbCc7XG4gICAgICAgIHNhbXBsZVNpemU/OiBudW1iZXI7XG4gICAgICAgIGRhdGFQb2ludHM/OiBudW1iZXIgfCB7IHRoaXNXZWVrOiBudW1iZXI7IGxhc3RXZWVrOiBudW1iZXIgfTtcbiAgICAgIH07XG4gICAgfT47XG4gICAgYmVoYXZpb3JhbDogQXJyYXk8e1xuICAgICAgdHJpZ2dlcjogc3RyaW5nO1xuICAgICAgcmVzcG9uc2U6IHN0cmluZztcbiAgICAgIGZyZXF1ZW5jeTogbnVtYmVyO1xuICAgICAgc2V2ZXJpdHk6IG51bWJlcjtcbiAgICB9PjtcbiAgICBlbnZpcm9ubWVudGFsOiBBcnJheTx7XG4gICAgICBsb2NhdGlvbj86IHN0cmluZztcbiAgICAgIGNvbnRleHQ6IHN0cmluZztcbiAgICAgIGNvcnJlbGF0aW9uOiBudW1iZXI7XG4gICAgfT47XG4gIH0gfCBBcnJheTxhbnk+OyAvLyBBbGxvdyBmbGV4aWJsZSBhcnJheSBmb3JtYXQgZm9yIG1vb2QgcGF0dGVybnNcbiAgXG4gIC8vIEluc2lnaHRzIFJlc3VsdHNcbiAgaW5zaWdodHM/OiB7XG4gICAgdGhlcmFwZXV0aWM6IEFycmF5PHtcbiAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgICBwcmlvcml0eTogJ2hpZ2gnIHwgJ21lZGl1bScgfCAnbG93JztcbiAgICAgIGFjdGlvbmFibGU6IGJvb2xlYW47XG4gICAgfT47XG4gICAgcHJvZ3Jlc3M6IEFycmF5PHtcbiAgICAgIG1ldHJpYzogc3RyaW5nO1xuICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICAgIGNoYW5nZTogbnVtYmVyO1xuICAgICAgaW50ZXJwcmV0YXRpb246IHN0cmluZztcbiAgICB9PjtcbiAgfTtcbiAgXG4gIC8vIENCVCBBbmFseXNpcyBSZXN1bHRzXG4gIGNidD86IHtcbiAgICBkaXN0b3J0aW9uczogc3RyaW5nW107XG4gICAgcmVmcmFtZXM6IHN0cmluZ1tdO1xuICAgIHRlY2huaXF1ZXM6IHN0cmluZ1tdO1xuICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgfTtcbiAgXG4gIC8vIE1ldGFkYXRhXG4gIG1ldGFkYXRhOiB7XG4gICAgcGlwZWxpbmVWZXJzaW9uOiBzdHJpbmc7XG4gICAgcHJvY2Vzc2VkQXQ6IG51bWJlcjtcbiAgICBjYWNoZVRUTDogbnVtYmVyO1xuICAgIHNvdXJjZTogJ2NhY2hlJyB8ICdmcmVzaCc7XG4gICAgcHJvY2Vzc2luZ1RpbWU6IG51bWJlcjtcbiAgfTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTUFJTiBQSVBFTElORSBDTEFTU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgY2xhc3MgVW5pZmllZEFJUGlwZWxpbmUge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogVW5pZmllZEFJUGlwZWxpbmU7XG4gIHByaXZhdGUgY2FjaGU6IE1hcDxzdHJpbmcsIHsgcmVzdWx0OiBVbmlmaWVkUGlwZWxpbmVSZXN1bHQ7IGV4cGlyZXM6IG51bWJlciB9PiA9IG5ldyBNYXAoKTtcbiAgXG4gIC8vIPCfp6ogVGVzdCBtb2RlIGRldGVjdGlvblxuICBwcml2YXRlIHJlYWRvbmx5IGlzVGVzdE1vZGUgPSBwcm9jZXNzLmVudi5URVNUX01PREUgPT09ICcxJztcbiAgcHJpdmF0ZSByZWFkb25seSB0ZXN0VFRMID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuVEVTVF9UVExfTVMgfHwgJzUwMDAnLCAxMCk7XG4gIFxuICAvLyDinIUgRklYRUQ6IE1vZHVsZS1zcGVjaWZpYyBjYWNoZSBUVExzIGFzIHBlciBzcGVjaWZpY2F0aW9uICBcbiAgcHJpdmF0ZSByZWFkb25seSBNT0RVTEVfVFRMUyA9IHtcbiAgICBpbnNpZ2h0czogMjQgKiA2MCAqIDYwICogMTAwMCwgICAgLy8gMjQgaG91cnNcbiAgICBwYXR0ZXJuczogMTIgKiA2MCAqIDYwICogMTAwMCwgICAgLy8gMTIgaG91cnMgIFxuICAgIHZvaWNlOiAxICogNjAgKiA2MCAqIDEwMDAsICAgICAgICAvLyAxIGhvdXJcbiAgICBwcm9ncmVzczogNiAqIDYwICogNjAgKiAxMDAwLCAgICAgLy8gNiBob3Vyc1xuICAgIGNidDogMjQgKiA2MCAqIDYwICogMTAwMCwgICAgICAgICAvLyAyNCBob3VycyAoc2FtZSBhcyBpbnNpZ2h0cylcbiAgICBkZWZhdWx0OiAyNCAqIDYwICogNjAgKiAxMDAwICAgICAgLy8gMjQgaG91cnMgZmFsbGJhY2tcbiAgfTtcbiAgXG4gIHByaXZhdGUgaW52YWxpZGF0aW9uSG9va3M6IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+ID0gbmV3IE1hcCgpO1xuICBcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNldHVwSW52YWxpZGF0aW9uSG9va3MoKTtcbiAgICB0aGlzLnN0YXJ0Q2FjaGVDbGVhbnVwKCk7XG4gIH1cbiAgXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBVbmlmaWVkQUlQaXBlbGluZSB7XG4gICAgaWYgKCFVbmlmaWVkQUlQaXBlbGluZS5pbnN0YW5jZSkge1xuICAgICAgVW5pZmllZEFJUGlwZWxpbmUuaW5zdGFuY2UgPSBuZXcgVW5pZmllZEFJUGlwZWxpbmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIFVuaWZpZWRBSVBpcGVsaW5lLmluc3RhbmNlO1xuICB9XG4gIFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIENBQ0hFIFRUTCBNQU5BR0VNRU5UXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgXG4gIC8qKlxuICAgKiBHZXQgbW9kdWxlLXNwZWNpZmljIFRUTCBiYXNlZCBvbiBpbnB1dCB0eXBlIGFuZCBjb250ZW50XG4gICAqL1xuICBwcml2YXRlIGdldE1vZHVsZVRUTChpbnB1dDogVW5pZmllZFBpcGVsaW5lSW5wdXQpOiBudW1iZXIge1xuICAgIC8vIERldGVybWluZSBwcmltYXJ5IG1vZHVsZSBiYXNlZCBvbiBpbnB1dCB0eXBlXG4gICAgc3dpdGNoIChpbnB1dC50eXBlKSB7XG4gICAgICBjYXNlICd2b2ljZSc6XG4gICAgICAgIHJldHVybiB0aGlzLk1PRFVMRV9UVExTLnZvaWNlO1xuICAgICAgY2FzZSAnZGF0YSc6XG4gICAgICAgIC8vIEZvciBkYXRhIGlucHV0cywgZGV0ZXJtaW5lIGJ5IGNvbnRleHQgc291cmNlXG4gICAgICAgIGlmIChpbnB1dC5jb250ZXh0Py5zb3VyY2UgPT09ICdtb29kJykgcmV0dXJuIHRoaXMuTU9EVUxFX1RUTFMucGF0dGVybnM7XG4gICAgICAgIGlmIChpbnB1dC5jb250ZXh0Py5zb3VyY2UgPT09ICdjYnQnKSByZXR1cm4gdGhpcy5NT0RVTEVfVFRMUy5jYnQ7XG4gICAgICAgIGlmIChpbnB1dC5jb250ZXh0Py5zb3VyY2UgPT09ICd0cmFja2luZycpIHJldHVybiB0aGlzLk1PRFVMRV9UVExTLnBhdHRlcm5zO1xuICAgICAgICByZXR1cm4gdGhpcy5NT0RVTEVfVFRMUy5pbnNpZ2h0czsgLy8gRGVmYXVsdCBmb3IgZGF0YVxuICAgICAgY2FzZSAnbWl4ZWQnOlxuICAgICAgICAvLyBNaXhlZCBpbnB1dHMgdHlwaWNhbGx5IGdlbmVyYXRlIGluc2lnaHRzXG4gICAgICAgIHJldHVybiB0aGlzLk1PRFVMRV9UVExTLmluc2lnaHRzO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMuTU9EVUxFX1RUTFMuZGVmYXVsdDtcbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIE1BSU4gUFJPQ0VTU0lORyBNRVRIT0RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBcbiAgYXN5bmMgcHJvY2VzcyhpbnB1dDogVW5pZmllZFBpcGVsaW5lSW5wdXQpOiBQcm9taXNlPFVuaWZpZWRQaXBlbGluZVJlc3VsdD4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgXG4gICAgLy8g8J+boe+4jyBNQVNURVIgRkVBVFVSRSBGTEFHIENIRUNLIC0gQ3JpdGljYWw6IFBpcGVsaW5lIG11c3QgYmUgZW5hYmxlZFxuICAgIGlmICghRkVBVFVSRV9GTEFHUy5pc0VuYWJsZWQoJ0FJX1VOSUZJRURfUElQRUxJTkUnKSkge1xuICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyBVbmlmaWVkQUlQaXBlbGluZTogRmVhdHVyZSBkaXNhYmxlZCwgcmV0dXJuaW5nIGVtcHR5IHJlc3VsdCcpO1xuICAgICAgXG4gICAgICAvLyBUcmFjayBkaXNhYmxlZCBwaXBlbGluZSBhdHRlbXB0XG4gICAgICBhd2FpdCB0cmFja0FJSW50ZXJhY3Rpb24oQUlFdmVudFR5cGUuVU5JRklFRF9QSVBFTElORV9ESVNBQkxFRCwge1xuICAgICAgICB1c2VySWQ6IGlucHV0LnVzZXJJZCxcbiAgICAgICAgaW5wdXRUeXBlOiBpbnB1dC50eXBlLFxuICAgICAgICBwaXBlbGluZTogJ3VuaWZpZWQnLFxuICAgICAgICByZWFzb246ICdmZWF0dXJlX2ZsYWdfZGlzYWJsZWQnLFxuICAgICAgICB0aW1lc3RhbXA6IHN0YXJ0VGltZVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIFJldHVybiBtaW5pbWFsIGVtcHR5IHJlc3VsdCB3aGVuIGRpc2FibGVkXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIHBpcGVsaW5lVmVyc2lvbjogJzEuMC4wJyxcbiAgICAgICAgICBwcm9jZXNzZWRBdDogRGF0ZS5ub3coKSxcbiAgICAgICAgICBjYWNoZVRUTDogMCxcbiAgICAgICAgICBzb3VyY2U6ICdkaXNhYmxlZCcsXG4gICAgICAgICAgcHJvY2Vzc2luZ1RpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdlbmVyYXRlQ2FjaGVLZXkoaW5wdXQpO1xuICAgIFxuICAgIC8vIPCfk4ogVHJhY2sgcGlwZWxpbmUgc3RhcnRcbiAgICBhd2FpdCB0cmFja0FJSW50ZXJhY3Rpb24oQUlFdmVudFR5cGUuVU5JRklFRF9QSVBFTElORV9TVEFSVEVELCB7XG4gICAgICB1c2VySWQ6IGlucHV0LnVzZXJJZCxcbiAgICAgIGlucHV0VHlwZTogaW5wdXQudHlwZSxcbiAgICAgIHBpcGVsaW5lOiAndW5pZmllZCcsXG4gICAgICBjYWNoZUtleSxcbiAgICAgIHRpbWVzdGFtcDogc3RhcnRUaW1lXG4gICAgfSk7XG4gICAgXG4gICAgLy8gMS4gQ2hlY2sgY2FjaGUgZmlyc3RcbiAgICBjb25zdCBjYWNoZWQgPSBhd2FpdCB0aGlzLmdldEZyb21DYWNoZShjYWNoZUtleSk7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgYXdhaXQgdHJhY2tBSUludGVyYWN0aW9uKEFJRXZlbnRUeXBlLlVOSUZJRURfUElQRUxJTkVfQ0FDSEVfSElULCB7XG4gICAgICAgIHVzZXJJZDogaW5wdXQudXNlcklkLFxuICAgICAgICBwaXBlbGluZTogJ3VuaWZpZWQnLFxuICAgICAgICBjYWNoZUtleSxcbiAgICAgICAgcHJvY2Vzc2luZ1RpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5jYWNoZWQsXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgLi4uY2FjaGVkLm1ldGFkYXRhLFxuICAgICAgICAgIHNvdXJjZTogJ2NhY2hlJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvLyAyLiBQcm9jZXNzIHRocm91Z2ggcGlwZWxpbmVcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVQaXBlbGluZShpbnB1dCk7XG4gICAgXG4gICAgLy8gMy4gU21hcnQgY2FjaGUgd2l0aCBlbXB0eSBpbnNpZ2h0cyBwb2xpY3lcbiAgICB0aGlzLnNldENhY2hlV2l0aEluc2lnaHRzUG9saWN5KGNhY2hlS2V5LCByZXN1bHQsIGlucHV0KTtcbiAgICBcbiAgICAvLyA0LiBUcmFjayBwaXBlbGluZSBjb21wbGV0aW9uIHRlbGVtZXRyeVxuICAgIGNvbnN0IHByb2Nlc3NpbmdUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICBhd2FpdCB0cmFja0FJSW50ZXJhY3Rpb24oQUlFdmVudFR5cGUuVU5JRklFRF9QSVBFTElORV9DT01QTEVURUQsIHtcbiAgICAgIHVzZXJJZDogaW5wdXQudXNlcklkLFxuICAgICAgcGlwZWxpbmU6ICd1bmlmaWVkJyxcbiAgICAgIHByb2Nlc3NpbmdUaW1lLFxuICAgICAgbW9kdWxlczogdGhpcy5nZXRFbmFibGVkTW9kdWxlcygpLFxuICAgICAgY2FjaGVLZXksXG4gICAgICByZXN1bHRTaXplOiBKU09OLnN0cmluZ2lmeShyZXN1bHQpLmxlbmd0aFxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICAuLi5yZXN1bHQubWV0YWRhdGEsXG4gICAgICAgIHNvdXJjZTogJ2ZyZXNoJyxcbiAgICAgICAgcHJvY2Vzc2luZ1RpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFBJUEVMSU5FIEVYRUNVVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIFxuICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVQaXBlbGluZShpbnB1dDogVW5pZmllZFBpcGVsaW5lSW5wdXQpOiBQcm9taXNlPFVuaWZpZWRQaXBlbGluZVJlc3VsdD4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgbW9kdWxlVFRMID0gdGhpcy5nZXRNb2R1bGVUVEwoaW5wdXQpO1xuICAgIFxuICAgIGNvbnN0IHJlc3VsdDogVW5pZmllZFBpcGVsaW5lUmVzdWx0ID0ge1xuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgcGlwZWxpbmVWZXJzaW9uOiAnMS4wLjAnLFxuICAgICAgICBwcm9jZXNzZWRBdDogRGF0ZS5ub3coKSxcbiAgICAgICAgY2FjaGVUVEw6IG1vZHVsZVRUTCxcbiAgICAgICAgc291cmNlOiAnZnJlc2gnLFxuICAgICAgICBwcm9jZXNzaW5nVGltZTogMCAvLyBXaWxsIGJlIHVwZGF0ZWQgYnkgbWFpbiBwcm9jZXNzIG1ldGhvZFxuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLy8gUnVuIGFuYWx5c2VzIGluIHBhcmFsbGVsIHdoZXJlIHBvc3NpYmxlXG4gICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuICAgIFxuICAgIC8vIDEuIFZvaWNlIEFuYWx5c2lzIChpZiB2b2ljZSBpbnB1dClcbiAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3ZvaWNlJyB8fCBpbnB1dC50eXBlID09PSAnbWl4ZWQnKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKFxuICAgICAgICB0aGlzLnByb2Nlc3NWb2ljZUFuYWx5c2lzKGlucHV0KS50aGVuKHZvaWNlID0+IHtcbiAgICAgICAgICByZXN1bHQudm9pY2UgPSB2b2ljZTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIC8vIDIuIFBhdHRlcm4gUmVjb2duaXRpb24gKGFsd2F5cyBydW4pXG4gICAgcHJvbWlzZXMucHVzaChcbiAgICAgIHRoaXMucHJvY2Vzc1BhdHRlcm5SZWNvZ25pdGlvbihpbnB1dCkudGhlbihwYXR0ZXJucyA9PiB7XG4gICAgICAgIHJlc3VsdC5wYXR0ZXJucyA9IHBhdHRlcm5zO1xuICAgICAgfSlcbiAgICApO1xuICAgIFxuICAgIC8vIDMuIENCVCBBbmFseXNpcyAoaWYgcmVsZXZhbnQpXG4gICAgaWYgKHRoaXMuc2hvdWxkUnVuQ0JUKGlucHV0KSkge1xuICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgdGhpcy5wcm9jZXNzQ0JUQW5hbHlzaXMoaW5wdXQpLnRoZW4oY2J0ID0+IHtcbiAgICAgICAgICByZXN1bHQuY2J0ID0gY2J0O1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gNC4gQnJlYXRod29yayBBbmFseXNpcyAoTkVXIC0gV2VlayAyKVxuICAgIGlmICh0aGlzLnNob3VsZFJ1bkJyZWF0aHdvcmsoaW5wdXQpKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKFxuICAgICAgICB0aGlzLnByb2Nlc3NCcmVhdGh3b3JrQW5hbHlzaXMoaW5wdXQpLnRoZW4oYnJlYXRod29yayA9PiB7XG4gICAgICAgICAgcmVzdWx0LmJyZWF0aHdvcmsgPSBicmVhdGh3b3JrO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gV2FpdCBmb3IgcGFyYWxsZWwgYW5hbHlzZXNcbiAgICBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXMpO1xuICAgIFxuICAgIC8vIDQuIEluc2lnaHRzIEdlbmVyYXRpb24gd2l0aCBWb2ljZeKGkkluc2lnaHRzIEJyaWRnZSAoZGVwZW5kcyBvbiBwYXR0ZXJucywgc28gcnVuIGFmdGVyKVxuICAgIGlmIChyZXN1bHQucGF0dGVybnMpIHtcbiAgICAgIC8vIPCfjq8gVm9pY2XihpJJbnNpZ2h0cyBCcmlkZ2U6IFBhc3Mgdm9pY2UgYW5hbHlzaXMgcmVzdWx0cyBhcyBoaW50cyBmb3IgYmV0dGVyIGluc2lnaHRzXG4gICAgICBjb25zdCB2b2ljZUhpbnRzID0gcmVzdWx0LnZvaWNlPy5jYXRlZ29yeSA/IHtcbiAgICAgICAgdm9pY2VDYXRlZ29yeTogcmVzdWx0LnZvaWNlLmNhdGVnb3J5LFxuICAgICAgICB2b2ljZUNvbmZpZGVuY2U6IHJlc3VsdC52b2ljZS5jb25maWRlbmNlLFxuICAgICAgICB2b2ljZVN1Z2dlc3Rpb246IHJlc3VsdC52b2ljZS5zdWdnZXN0aW9uXG4gICAgICB9IDogdW5kZWZpbmVkO1xuICAgICAgXG4gICAgICBjb25zdCBlbmhhbmNlZElucHV0ID0gdm9pY2VIaW50cyA/IHtcbiAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAuLi5pbnB1dC5jb250ZXh0LFxuICAgICAgICAgIGhpbnRzOiB2b2ljZUhpbnRzXG4gICAgICAgIH1cbiAgICAgIH0gOiBpbnB1dDtcbiAgICAgIFxuICAgICAgcmVzdWx0Lmluc2lnaHRzID0gYXdhaXQgdGhpcy5wcm9jZXNzSW5zaWdodHNHZW5lcmF0aW9uKGVuaGFuY2VkSW5wdXQsIHJlc3VsdC5wYXR0ZXJucyk7XG4gICAgfVxuICAgIFxuICAgIC8vIPCfk4ogRXh0cmFjdCBhbmFseXRpY3MgZnJvbSBwYXR0ZXJucyBpZiBhdmFpbGFibGUgKG1vb2QgYW5hbHl0aWNzKVxuICAgIGlmIChyZXN1bHQucGF0dGVybnMgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQucGF0dGVybnMpKSB7XG4gICAgICBjb25zdCBwYXR0ZXJuc0FycmF5ID0gcmVzdWx0LnBhdHRlcm5zIGFzIGFueVtdO1xuICAgICAgY29uc3QgbW9vZEFuYWx5dGljcyA9IHBhdHRlcm5zQXJyYXkuZmluZChwID0+IHAubW9vZEFuYWx5dGljcyk/Lm1vb2RBbmFseXRpY3M7XG4gICAgICBpZiAobW9vZEFuYWx5dGljcykge1xuICAgICAgICByZXN1bHQuYW5hbHl0aWNzID0ge1xuICAgICAgICAgIG1vb2Q6IG1vb2RBbmFseXRpY3NcbiAgICAgICAgfTtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk4ogRW5oYW5jZWQgbW9vZCBhbmFseXRpY3MgYXR0YWNoZWQgdG8gcmVzdWx0Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChyZXN1bHQucGF0dGVybnMgJiYgKHJlc3VsdC5wYXR0ZXJucyBhcyBhbnkpLm1vb2RBbmFseXRpY3MpIHtcbiAgICAgIHJlc3VsdC5hbmFseXRpY3MgPSB7XG4gICAgICAgIG1vb2Q6IChyZXN1bHQucGF0dGVybnMgYXMgYW55KS5tb29kQW5hbHl0aWNzXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvLyDwn5OKIFBIQVNFIDI6IE1pbmltYWwgYW5hbHl0aWNzIGZvciBDQlQvVHJhY2tpbmcgKHNjYWZmb2xkKVxuICAgIC8vIEdlbmVyYXRlIGJhc2ljIGFuYWx5dGljcyB3aGVuIGlucHV0IGNvbnRhaW5zIENCVCBvciB0cmFja2luZyBkYXRhXG4gICAgaWYgKGlucHV0LmNvbnRlbnQgJiYgdHlwZW9mIGlucHV0LmNvbnRlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gaW5wdXQuY29udGVudCBhcyBhbnk7XG4gICAgICBcbiAgICAgIC8vIOKchSBDQlQgQW5hbHl0aWNzIChtaW5pbWFsKVxuICAgICAgaWYgKGNvbnRlbnQuY2J0UmVjb3JkcyAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQuY2J0UmVjb3JkcykgJiYgY29udGVudC5jYnRSZWNvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgY2J0UmVjb3JkcyA9IGNvbnRlbnQuY2J0UmVjb3JkcztcbiAgICAgICAgY29uc3QgdmFsaWRSZWNvcmRzID0gY2J0UmVjb3Jkcy5maWx0ZXIoKHI6IGFueSkgPT4gXG4gICAgICAgICAgci5tb29kX2JlZm9yZSAhPSBudWxsICYmIHIubW9vZF9hZnRlciAhPSBudWxsXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAodmFsaWRSZWNvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBDb21wdXRlIHNpbXBsZSBhZ2dyZWdhdGVzXG4gICAgICAgICAgY29uc3QgZGVsdGFzID0gdmFsaWRSZWNvcmRzLm1hcCgocjogYW55KSA9PiByLm1vb2RfYWZ0ZXIgLSByLm1vb2RfYmVmb3JlKTtcbiAgICAgICAgICBjb25zdCBhdmdEZWx0YSA9IGRlbHRhcy5yZWR1Y2UoKHN1bSwgZCkgPT4gc3VtICsgZCwgMCkgLyBkZWx0YXMubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IGRlbHRhVmFyaWFuY2UgPSBkZWx0YXMucmVkdWNlKChzdW0sIGQpID0+IHN1bSArIE1hdGgucG93KGQgLSBhdmdEZWx0YSwgMiksIDApIC8gZGVsdGFzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCB2b2xhdGlsaXR5ID0gTWF0aC5zcXJ0KGRlbHRhVmFyaWFuY2UpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFdlZWtseSBkZWx0YSBwcm94eSAtIGFzc3VtZSByZWNlbnQgcmVjb3JkcyBhcmUgbW9yZSByZWNlbnRcbiAgICAgICAgICBjb25zdCByZWNlbnRSZWNvcmRzID0gdmFsaWRSZWNvcmRzLnNsaWNlKC03KTtcbiAgICAgICAgICBjb25zdCBvbGRlclJlY29yZHMgPSB2YWxpZFJlY29yZHMuc2xpY2UoLTE0LCAtNyk7XG4gICAgICAgICAgbGV0IHdlZWtseURlbHRhID0gMDtcbiAgICAgICAgICBpZiAocmVjZW50UmVjb3Jkcy5sZW5ndGggPiAwICYmIG9sZGVyUmVjb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByZWNlbnRBdmcgPSByZWNlbnRSZWNvcmRzLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyAoci5tb29kX2FmdGVyIC0gci5tb29kX2JlZm9yZSksIDApIC8gcmVjZW50UmVjb3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBvbGRlckF2ZyA9IG9sZGVyUmVjb3Jkcy5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgKHIubW9vZF9hZnRlciAtIHIubW9vZF9iZWZvcmUpLCAwKSAvIG9sZGVyUmVjb3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICB3ZWVrbHlEZWx0YSA9IHJlY2VudEF2ZyAtIG9sZGVyQXZnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBjb25maWRlbmNlID0gTWF0aC5taW4oMC44LCAwLjUgKyAodmFsaWRSZWNvcmRzLmxlbmd0aCAqIDAuMDUpKTsgLy8gU2NhbGUgd2l0aCBkYXRhIHZvbHVtZVxuICAgICAgICAgIFxuICAgICAgICAgIHJlc3VsdC5hbmFseXRpY3MgPSByZXN1bHQuYW5hbHl0aWNzIHx8IHt9O1xuICAgICAgICAgIHJlc3VsdC5hbmFseXRpY3MuY2J0ID0ge1xuICAgICAgICAgICAgc2FtcGxlU2l6ZTogdmFsaWRSZWNvcmRzLmxlbmd0aCxcbiAgICAgICAgICAgIHZvbGF0aWxpdHk6IE1hdGgucm91bmQodm9sYXRpbGl0eSAqIDEwKSAvIDEwLCAvLyBSb3VuZCB0byAxIGRlY2ltYWxcbiAgICAgICAgICAgIHdlZWtseURlbHRhOiBNYXRoLnJvdW5kKHdlZWtseURlbHRhICogMTApIC8gMTAsXG4gICAgICAgICAgICBjb25maWRlbmNlLFxuICAgICAgICAgICAgZGF0YVF1YWxpdHk6IGNvbmZpZGVuY2UsXG4gICAgICAgICAgICBiYXNlbGluZXM6IHtcbiAgICAgICAgICAgICAgbW9vZEltcHJvdmVtZW50OiBhdmdEZWx0YVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc29sZS5sb2coYPCfk4ogTWluaW1hbCBDQlQgYW5hbHl0aWNzOiBzYW1wbGVTaXplPSR7dmFsaWRSZWNvcmRzLmxlbmd0aH0sIHZvbGF0aWxpdHk9JHt2b2xhdGlsaXR5LnRvRml4ZWQoMSl9LCB3ZWVrbHlEZWx0YT0ke3dlZWtseURlbHRhLnRvRml4ZWQoMSl9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8g4pyFIFRyYWNraW5nIEFuYWx5dGljcyAobWluaW1hbClcbiAgICAgIGlmIChjb250ZW50LmNvbXB1bHNpb25zICYmIEFycmF5LmlzQXJyYXkoY29udGVudC5jb21wdWxzaW9ucykgJiYgY29udGVudC5jb21wdWxzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGNvbXB1bHNpb25zID0gY29udGVudC5jb21wdWxzaW9ucztcbiAgICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IGNvbXB1bHNpb25zLmxlbmd0aDtcbiAgICAgICAgXG4gICAgICAgIC8vIEdyb3VwIGJ5IGRheSBmb3Igdm9sYXRpbGl0eSBjYWxjdWxhdGlvblxuICAgICAgICBjb25zdCBkYXlHcm91cHM6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcbiAgICAgICAgY29tcHVsc2lvbnMuZm9yRWFjaCgoYzogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKGMudGltZXN0YW1wKSB7XG4gICAgICAgICAgICBjb25zdCBkYXkgPSBuZXcgRGF0ZShjLnRpbWVzdGFtcCkudG9EYXRlU3RyaW5nKCk7XG4gICAgICAgICAgICBkYXlHcm91cHNbZGF5XSA9IChkYXlHcm91cHNbZGF5XSB8fCAwKSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRhaWx5Q291bnRzID0gT2JqZWN0LnZhbHVlcyhkYXlHcm91cHMpO1xuICAgICAgICBsZXQgdm9sYXRpbGl0eSA9IDA7XG4gICAgICAgIGlmIChkYWlseUNvdW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgY29uc3QgYXZnRGFpbHkgPSBkYWlseUNvdW50cy5yZWR1Y2UoKHN1bSwgY291bnQpID0+IHN1bSArIGNvdW50LCAwKSAvIGRhaWx5Q291bnRzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCB2YXJpYW5jZSA9IGRhaWx5Q291bnRzLnJlZHVjZSgoc3VtLCBjb3VudCkgPT4gc3VtICsgTWF0aC5wb3coY291bnQgLSBhdmdEYWlseSwgMiksIDApIC8gZGFpbHlDb3VudHMubGVuZ3RoO1xuICAgICAgICAgIHZvbGF0aWxpdHkgPSBNYXRoLnNxcnQodmFyaWFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBXZWVrbHkgZGVsdGEgcHJveHkgLSBjb21wYXJlIHJlY2VudCAzIGRheXMgdnMgcHJpb3IgMyBkYXlzXG4gICAgICAgIGNvbnN0IHNvcnRlZERheXMgPSBPYmplY3QuZW50cmllcyhkYXlHcm91cHMpLnNvcnQoKFthXSwgW2JdKSA9PiBcbiAgICAgICAgICBuZXcgRGF0ZShhKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShiKS5nZXRUaW1lKClcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IHdlZWtseURlbHRhID0gMDtcbiAgICAgICAgaWYgKHNvcnRlZERheXMubGVuZ3RoID49IDYpIHtcbiAgICAgICAgICBjb25zdCByZWNlbnREYXlzID0gc29ydGVkRGF5cy5zbGljZSgtMyk7XG4gICAgICAgICAgY29uc3Qgb2xkZXJEYXlzID0gc29ydGVkRGF5cy5zbGljZSgtNiwgLTMpO1xuICAgICAgICAgIGNvbnN0IHJlY2VudEF2ZyA9IHJlY2VudERheXMucmVkdWNlKChzdW0sIFssIGNvdW50XSkgPT4gc3VtICsgY291bnQsIDApIC8gcmVjZW50RGF5cy5sZW5ndGg7XG4gICAgICAgICAgY29uc3Qgb2xkZXJBdmcgPSBvbGRlckRheXMucmVkdWNlKChzdW0sIFssIGNvdW50XSkgPT4gc3VtICsgY291bnQsIDApIC8gb2xkZXJEYXlzLmxlbmd0aDtcbiAgICAgICAgICB3ZWVrbHlEZWx0YSA9IHJlY2VudEF2ZyAtIG9sZGVyQXZnO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb25maWRlbmNlID0gTWF0aC5taW4oMC44LCAwLjQgKyAoc2FtcGxlU2l6ZSAqIDAuMDIpKTsgLy8gQ29uc2VydmF0aXZlIGNvbmZpZGVuY2UgZm9yIHRyYWNraW5nXG4gICAgICAgIFxuICAgICAgICByZXN1bHQuYW5hbHl0aWNzID0gcmVzdWx0LmFuYWx5dGljcyB8fCB7fTtcbiAgICAgICAgcmVzdWx0LmFuYWx5dGljcy50cmFja2luZyA9IHtcbiAgICAgICAgICBzYW1wbGVTaXplLFxuICAgICAgICAgIHZvbGF0aWxpdHk6IE1hdGgucm91bmQodm9sYXRpbGl0eSAqIDEwKSAvIDEwLFxuICAgICAgICAgIHdlZWtseURlbHRhOiBNYXRoLnJvdW5kKHdlZWtseURlbHRhICogMTApIC8gMTAsXG4gICAgICAgICAgY29uZmlkZW5jZSxcbiAgICAgICAgICBkYXRhUXVhbGl0eTogY29uZmlkZW5jZSxcbiAgICAgICAgICBiYXNlbGluZXM6IHtcbiAgICAgICAgICAgIGNvbXB1bHNpb25zOiBkYWlseUNvdW50cy5sZW5ndGggPiAwID8gXG4gICAgICAgICAgICAgIE1hdGgucm91bmQoKGRhaWx5Q291bnRzLnJlZHVjZSgoc3VtLCBjb3VudCkgPT4gc3VtICsgY291bnQsIDApIC8gZGFpbHlDb3VudHMubGVuZ3RoKSAqIDEwKSAvIDEwIDogMFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5OKIE1pbmltYWwgVHJhY2tpbmcgYW5hbHl0aWNzOiBzYW1wbGVTaXplPSR7c2FtcGxlU2l6ZX0sIHZvbGF0aWxpdHk9JHt2b2xhdGlsaXR5LnRvRml4ZWQoMSl9LCB3ZWVrbHlEZWx0YT0ke3dlZWtseURlbHRhLnRvRml4ZWQoMSl9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gSU5ESVZJRFVBTCBQUk9DRVNTT1JTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgXG4gIHByaXZhdGUgYXN5bmMgcHJvY2Vzc1ZvaWNlQW5hbHlzaXMoaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgLy8gSW1wb3J0IGxhemlseSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICBjb25zdCB7IHVuaWZpZWRWb2ljZUFuYWx5c2lzIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3NlcnZpY2VzL2NoZWNraW5TZXJ2aWNlJyk7XG4gICAgICBcbiAgICAgIC8vIOKchSBGSVhFRDogUGFzcyB1c2VySWQgc3RyaW5nIGluc3RlYWQgb2Ygb2JqZWN0IHRvIHVuaWZpZWRWb2ljZUFuYWx5c2lzIFxuICAgICAgY29uc3QgYW5hbHlzaXMgPSBhd2FpdCB1bmlmaWVkVm9pY2VBbmFseXNpcyhcbiAgICAgICAgdHlwZW9mIGlucHV0LmNvbnRlbnQgPT09ICdzdHJpbmcnID8gaW5wdXQuY29udGVudCA6IEpTT04uc3RyaW5naWZ5KGlucHV0LmNvbnRlbnQpLFxuICAgICAgICBpbnB1dC51c2VySWQgIC8vIENvcnJlY3QgcGFyYW1ldGVyOiB1c2VySWQgc3RyaW5nLCBub3Qgb2JqZWN0XG4gICAgICApO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYXRlZ29yeTogYW5hbHlzaXMudHlwZSxcbiAgICAgICAgY29uZmlkZW5jZTogYW5hbHlzaXMuY29uZmlkZW5jZSxcbiAgICAgICAgc3VnZ2VzdGlvbjogYW5hbHlzaXMuc3VnZ2VzdGlvbixcbiAgICAgICAgcm91dGU6IGFuYWx5c2lzLnJvdXRlXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1ZvaWNlIGFuYWx5c2lzIGZhaWxlZCwgdXNpbmcgaGV1cmlzdGljIGZhbGxiYWNrOicsIGVycm9yKTtcbiAgICAgIFxuICAgICAgLy8g4pyFIEZJWEVEOiBDZW50cmFsaXplZCBoZXVyaXN0aWMgZmFsbGJhY2sgKG1vdmVkIGZyb20gVUkgbGF5ZXIpXG4gICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUhldXJpc3RpY1ZvaWNlQW5hbHlzaXMoXG4gICAgICAgIHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnc3RyaW5nJyA/IGlucHV0LmNvbnRlbnQgOiBKU09OLnN0cmluZ2lmeShpbnB1dC5jb250ZW50KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgXG4gIHByaXZhdGUgYXN5bmMgcHJvY2Vzc1BhdHRlcm5SZWNvZ25pdGlvbihpbnB1dDogVW5pZmllZFBpcGVsaW5lSW5wdXQpOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXR0ZXJucyA9IHtcbiAgICAgICAgdGVtcG9yYWw6IFtdLFxuICAgICAgICBiZWhhdmlvcmFsOiBbXSxcbiAgICAgICAgZW52aXJvbm1lbnRhbDogW10sXG4gICAgICAgIHRyaWdnZXJzOiBbXSxcbiAgICAgICAgc2V2ZXJpdHk6IFtdLFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIGFuYWx5c2lzVGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICBkYXRhUG9pbnRzOiAwLFxuICAgICAgICAgIGNvbmZpZGVuY2U6IDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gRXh0cmFjdCBwYXR0ZXJucyBmcm9tIHVzZXIgZGF0YVxuICAgICAgaWYgKHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gaW5wdXQuY29udGVudDtcbiAgICAgICAgXG4gICAgICAgIC8vIDEuIFRFTVBPUkFMIFBBVFRFUk5TIChaYW1hbiBiYXpsxLEga2FsxLFwbGFyKVxuICAgICAgICBpZiAoY29udGVudC5jb21wdWxzaW9ucyAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQuY29tcHVsc2lvbnMpKSB7XG4gICAgICAgICAgcGF0dGVybnMudGVtcG9yYWwgPSB0aGlzLmV4dHJhY3RUZW1wb3JhbFBhdHRlcm5zKGNvbnRlbnQuY29tcHVsc2lvbnMpO1xuICAgICAgICAgIHBhdHRlcm5zLm1ldGFkYXRhLmRhdGFQb2ludHMgKz0gY29udGVudC5jb21wdWxzaW9ucy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChjb250ZW50Lm1vb2RzICYmIEFycmF5LmlzQXJyYXkoY29udGVudC5tb29kcykpIHtcbiAgICAgICAgICBwYXR0ZXJucy50ZW1wb3JhbC5wdXNoKC4uLnRoaXMuZXh0cmFjdE1vb2RUZW1wb3JhbFBhdHRlcm5zKGNvbnRlbnQubW9vZHMpKTtcbiAgICAgICAgICBwYXR0ZXJucy5tZXRhZGF0YS5kYXRhUG9pbnRzICs9IGNvbnRlbnQubW9vZHMubGVuZ3RoO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIPCfk4ogRU5IQU5DRUQ6IENvbXByZWhlbnNpdmUgbW9vZCBhbmFseXRpY3NcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+OryBTdGFydGluZyBtb29kIGFuYWx5dGljcyBwcm9jZXNzaW5nIGZvciAke2NvbnRlbnQubW9vZHMubGVuZ3RofSBtb29kIGVudHJpZXNgKTtcbiAgICAgICAgICBjb25zdCBtb29kQW5hbHl0aWNzID0gdGhpcy5wcm9jZXNzTW9vZEFuYWx5dGljcyhjb250ZW50Lm1vb2RzKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+TiiBNb29kIGFuYWx5dGljcyByZXN1bHQ6JywgbW9vZEFuYWx5dGljcyk7XG4gICAgICAgICAgaWYgKG1vb2RBbmFseXRpY3MpIHtcbiAgICAgICAgICAgIC8vIFN0b3JlIGFuYWx5dGljcyBpbiByZXN1bHQgZm9yIGRhc2hib2FyZCBjb25zdW1wdGlvblxuICAgICAgICAgICAgcGF0dGVybnMubW9vZEFuYWx5dGljcyA9IG1vb2RBbmFseXRpY3M7XG4gICAgICAgICAgICBwYXR0ZXJucy5tZXRhZGF0YS5oYXNBZHZhbmNlZEFuYWx5dGljcyA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIPCfk4ogVGVsZW1ldHJ5OiBUcmFjayBtb29kIGFuYWx5dGljcyBjb21wdXRhdGlvblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdHJhY2tBSUludGVyYWN0aW9uKEFJRXZlbnRUeXBlLk1PT0RfQU5BTFlUSUNTX0NPTVBVVEVELCB7XG4gICAgICAgICAgICAgICAgd2Vla2x5RGVsdGE6IG1vb2RBbmFseXRpY3Mud2Vla2x5RGVsdGEsXG4gICAgICAgICAgICAgICAgdm9sYXRpbGl0eTogbW9vZEFuYWx5dGljcy52b2xhdGlsaXR5LFxuICAgICAgICAgICAgICAgIHByb2ZpbGU6IG1vb2RBbmFseXRpY3MucHJvZmlsZT8udHlwZSxcbiAgICAgICAgICAgICAgICBzYW1wbGVTaXplOiBtb29kQW5hbHl0aWNzLnNhbXBsZVNpemUsXG4gICAgICAgICAgICAgICAgZGF0YVF1YWxpdHk6IG1vb2RBbmFseXRpY3MuZGF0YVF1YWxpdHksXG4gICAgICAgICAgICAgICAgY29uZmlkZW5jZTogbW9vZEFuYWx5dGljcy5jb25maWRlbmNlLFxuICAgICAgICAgICAgICAgIGNvcnJlbGF0aW9uc0F2YWlsYWJsZTogT2JqZWN0LmtleXMobW9vZEFuYWx5dGljcy5jb3JyZWxhdGlvbnMpLmxlbmd0aFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHRlbGVtZXRyeUVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIE1vb2QgYW5hbHl0aWNzIHRlbGVtZXRyeSBmYWlsZWQ6JywgdGVsZW1ldHJ5RXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gaWYgKGNvbnRlbnQuZXJwU2Vzc2lvbnMgJiYgQXJyYXkuaXNBcnJheShjb250ZW50LmVycFNlc3Npb25zKSkgeyAvLyBSZW1vdmVkIFRlcmFwaVxuICAgICAgICAgIC8vIHBhdHRlcm5zLnRlbXBvcmFsLnB1c2goLi4udGhpcy5leHRyYWN0VGVyYXBpVGVtcG9yYWxQYXR0ZXJucyhjb250ZW50LmVycFNlc3Npb25zKSk7IC8vIFJlbW92ZWQgVGVyYXBpXG4gICAgICAgICAgLy8gcGF0dGVybnMubWV0YWRhdGEuZGF0YVBvaW50cyArPSBjb250ZW50LmVycFNlc3Npb25zLmxlbmd0aDsgLy8gUmVtb3ZlZCBUZXJhcGlcbiAgICAgICAgLy8gfSAvLyBSZW1vdmVkIFRlcmFwaVxuICAgICAgICBcbiAgICAgICAgLy8gMi4gQkVIQVZJT1JBTCBQQVRURVJOUyAoRGF2cmFuxLHFn3NhbCBrYWzEsXBsYXIpICBcbiAgICAgICAgaWYgKGNvbnRlbnQuY29tcHVsc2lvbnMgJiYgQXJyYXkuaXNBcnJheShjb250ZW50LmNvbXB1bHNpb25zKSkge1xuICAgICAgICAgIHBhdHRlcm5zLmJlaGF2aW9yYWwgPSB0aGlzLmV4dHJhY3RCZWhhdmlvcmFsUGF0dGVybnMoY29udGVudC5jb21wdWxzaW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIDMuIEVOVklST05NRU5UQUwgVFJJR0dFUlMgKMOHZXZyZXNlbCB0ZXRpa2xleWljaWxlcilcbiAgICAgICAgcGF0dGVybnMuZW52aXJvbm1lbnRhbCA9IHRoaXMuZXh0cmFjdEVudmlyb25tZW50YWxUcmlnZ2Vycyhjb250ZW50KTtcbiAgICAgICAgXG4gICAgICAgIC8vIDQuIFRSSUdHRVIgQU5BTFlTSVMgKFRldGlrIGFuYWxpemkpXG4gICAgICAgIHBhdHRlcm5zLnRyaWdnZXJzID0gdGhpcy5hbmFseXplVHJpZ2dlcnMoY29udGVudCk7XG4gICAgICAgIFxuICAgICAgICAvLyA1LiBTRVZFUklUWSBQUk9HUkVTU0lPTiAoxZ5pZGRldCBzZXlyxLEpXG4gICAgICAgIHBhdHRlcm5zLnNldmVyaXR5ID0gdGhpcy5hbmFseXplU2V2ZXJpdHlQcm9ncmVzc2lvbihjb250ZW50KTtcbiAgICAgICAgXG4gICAgICAgIC8vIDYuIENBTENVTEFURSBDT05GSURFTkNFIChHw7x2ZW4gc2tvcnUgaGVzYXBsYW1hKVxuICAgICAgICBwYXR0ZXJucy5tZXRhZGF0YS5jb25maWRlbmNlID0gdGhpcy5jYWxjdWxhdGVQYXR0ZXJuQ29uZmlkZW5jZShwYXR0ZXJucy5tZXRhZGF0YS5kYXRhUG9pbnRzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gSGFuZGxlIHRleHQgaW5wdXQgKHZvaWNlL25vdGVzKVxuICAgICAgaWYgKHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCB0ZXh0UGF0dGVybnMgPSB0aGlzLmV4dHJhY3RUZXh0UGF0dGVybnMoaW5wdXQuY29udGVudCk7XG4gICAgICAgIHBhdHRlcm5zLmJlaGF2aW9yYWwucHVzaCguLi50ZXh0UGF0dGVybnMuYmVoYXZpb3JhbCk7XG4gICAgICAgIHBhdHRlcm5zLnRyaWdnZXJzLnB1c2goLi4udGV4dFBhdHRlcm5zLnRyaWdnZXJzKTtcbiAgICAgICAgcGF0dGVybnMubWV0YWRhdGEuZGF0YVBvaW50cyArPSAxO1xuICAgICAgICBwYXR0ZXJucy5tZXRhZGF0YS5jb25maWRlbmNlID0gMC42OyAvLyBUZXh0IGFuYWx5c2lzIGhhcyBtZWRpdW0gY29uZmlkZW5jZVxuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gcGF0dGVybnM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1BhdHRlcm4gcmVjb2duaXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIHRlbXBvcmFsOiBbXSwgXG4gICAgICAgIGJlaGF2aW9yYWw6IFtdLCBcbiAgICAgICAgZW52aXJvbm1lbnRhbDogW10sIFxuICAgICAgICB0cmlnZ2VyczogW10sXG4gICAgICAgIHNldmVyaXR5OiBbXSxcbiAgICAgICAgbWV0YWRhdGE6IHsgYW5hbHlzaXNUaW1lOiBEYXRlLm5vdygpLCBkYXRhUG9pbnRzOiAwLCBjb25maWRlbmNlOiAwIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG4gIFxuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NDQlRBbmFseXNpcyhpbnB1dDogVW5pZmllZFBpcGVsaW5lSW5wdXQpOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyDinIUgRklYRUQ6IENoZWNrIGlmIHRoaXMgaXMgYSBwcm9ncmVzcyBhbmFseXRpY3MgcmVxdWVzdFxuICAgICAgaWYgKHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb250ZW50LmFuYWx5c2lzUmVxdWVzdCA9PT0gJ2NvbXByZWhlbnNpdmVfY2J0X3Byb2dyZXNzX2FuYWx5dGljcycpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc0NCVFByb2dyZXNzQW5hbHl0aWNzKGlucHV0KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgdGV4dCA9IHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnc3RyaW5nJyBcbiAgICAgICAgPyBpbnB1dC5jb250ZW50IFxuICAgICAgICA6IGlucHV0LmNvbnRlbnQuZGVzY3JpcHRpb24gfHwgaW5wdXQuY29udGVudC5ub3RlcyB8fCAnJztcbiAgICAgIFxuICAgICAgaWYgKCF0ZXh0IHx8IHRleHQubGVuZ3RoIDwgNSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgYW5hbHlzaXMgPSB7XG4gICAgICAgIGRpc3RvcnRpb25zOiBbXSxcbiAgICAgICAgcmVmcmFtZXM6IFtdLFxuICAgICAgICB0ZWNobmlxdWVzOiBbXSxcbiAgICAgICAgdGhvdWdodFJlY29yZDogbnVsbCxcbiAgICAgICAgc2V2ZXJpdHk6IDAsXG4gICAgICAgIHVyZ2VuY3k6ICdsb3cnLFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIGFuYWx5c2lzVGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICB0ZXh0TGVuZ3RoOiB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICBjb25maWRlbmNlOiAwXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIDEuIENPR05JVElWRSBESVNUT1JUSU9OIERFVEVDVElPTlxuICAgICAgY29uc3QgZGV0ZWN0ZWREaXN0b3J0aW9ucyA9IHRoaXMuZGV0ZWN0Q29nbml0aXZlRGlzdG9ydGlvbnModGV4dCk7XG4gICAgICBhbmFseXNpcy5kaXN0b3J0aW9ucyA9IGRldGVjdGVkRGlzdG9ydGlvbnM7XG4gICAgICBcbiAgICAgIC8vIDIuIEFVVE9NQVRJQyBUSE9VR0hUIFJFQ09SRCBHRU5FUkFUSU9OXG4gICAgICBpZiAoZGV0ZWN0ZWREaXN0b3J0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFuYWx5c2lzLnRob3VnaHRSZWNvcmQgPSB0aGlzLmdlbmVyYXRlVGhvdWdodFJlY29yZCh0ZXh0LCBkZXRlY3RlZERpc3RvcnRpb25zKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gMy4gUkVGUkFNRSBTVUdHRVNUSU9OU1xuICAgICAgYW5hbHlzaXMucmVmcmFtZXMgPSBhd2FpdCB0aGlzLmdlbmVyYXRlQ0JUUmVmcmFtZXModGV4dCwgZGV0ZWN0ZWREaXN0b3J0aW9ucyk7XG4gICAgICBcbiAgICAgIC8vIDQuIENCVCBURUNITklRVUUgUkVDT01NRU5EQVRJT05TXG4gICAgICBhbmFseXNpcy50ZWNobmlxdWVzID0gdGhpcy5yZWNvbW1lbmRDQlRUZWNobmlxdWVzKGRldGVjdGVkRGlzdG9ydGlvbnMsIHRleHQpO1xuICAgICAgXG4gICAgICAvLyA1LiBTRVZFUklUWSBBU1NFU1NNRU5UXG4gICAgICBhbmFseXNpcy5zZXZlcml0eSA9IHRoaXMuYXNzZXNzQ29nbml0aXZlRGlzdG9ydGlvblNldmVyaXR5KHRleHQsIGRldGVjdGVkRGlzdG9ydGlvbnMpO1xuICAgICAgXG4gICAgICAvLyA2LiBVUkdFTkNZIENBTENVTEFUSU9OXG4gICAgICBhbmFseXNpcy51cmdlbmN5ID0gdGhpcy5jYWxjdWxhdGVDQlRVcmdlbmN5KGFuYWx5c2lzLnNldmVyaXR5LCBkZXRlY3RlZERpc3RvcnRpb25zKTtcbiAgICAgIFxuICAgICAgLy8gNy4gQ09ORklERU5DRSBDQUxDVUxBVElPTlxuICAgICAgYW5hbHlzaXMubWV0YWRhdGEuY29uZmlkZW5jZSA9IHRoaXMuY2FsY3VsYXRlQ0JUQ29uZmlkZW5jZShkZXRlY3RlZERpc3RvcnRpb25zLCB0ZXh0Lmxlbmd0aCk7XG4gICAgICBcbiAgICAgIC8vIFRyeSB0byB1c2UgY2J0RW5naW5lIGlmIGF2YWlsYWJsZSAoZmFsbGJhY2sgdG8gYnVpbHQtaW4gbG9naWMpXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGNidEVuZ2luZSB9ID0gYXdhaXQgaW1wb3J0KCcuLi9lbmdpbmVzL2NidEVuZ2luZScpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNidEVuZ2luZS5lbmFibGVkKSB7XG4gICAgICAgICAgY29uc3QgZW5naW5lRGlzdG9ydGlvbnMgPSBhd2FpdCBjYnRFbmdpbmUuZGV0ZWN0RGlzdG9ydGlvbnModGV4dCk7XG4gICAgICAgICAgY29uc3QgZW5naW5lUmVmcmFtZXMgPSBhd2FpdCBjYnRFbmdpbmUuc3VnZ2VzdFJlZnJhbWVzKHRleHQsIGVuZ2luZURpc3RvcnRpb25zKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNZXJnZSBlbmdpbmUgcmVzdWx0cyB3aXRoIGJ1aWx0LWluIGFuYWx5c2lzXG4gICAgICAgICAgYW5hbHlzaXMuZGlzdG9ydGlvbnMgPSBbLi4uYW5hbHlzaXMuZGlzdG9ydGlvbnMsIC4uLmVuZ2luZURpc3RvcnRpb25zLm1hcChkID0+ICh7IG5hbWU6IGQubmFtZSwgY29uZmlkZW5jZTogZC5jb25maWRlbmNlIH0pKV07XG4gICAgICAgICAgYW5hbHlzaXMucmVmcmFtZXMgPSBbLi4uYW5hbHlzaXMucmVmcmFtZXMsIC4uLmVuZ2luZVJlZnJhbWVzXTtcbiAgICAgICAgICBhbmFseXNpcy5tZXRhZGF0YS5jb25maWRlbmNlID0gTWF0aC5tYXgoYW5hbHlzaXMubWV0YWRhdGEuY29uZmlkZW5jZSwgMC44NSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVuZ2luZUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ0JUIEVuZ2luZSB1bmF2YWlsYWJsZSwgdXNpbmcgYnVpbHQtaW4gYW5hbHlzaXM6JywgZW5naW5lRXJyb3IpO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gYW5hbHlzaXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NCVCBhbmFseXNpcyBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZXRlY3RDb2duaXRpdmVEaXN0b3J0aW9ucyh0ZXh0OiBzdHJpbmcpOiBBcnJheTx7bmFtZTogc3RyaW5nLCBjb25maWRlbmNlOiBudW1iZXIsIGV2aWRlbmNlOiBzdHJpbmdbXX0+IHtcbiAgICBjb25zdCBkaXN0b3J0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGxvd2VyVGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICAvLyBDYXRhc3Ryb3BoaXppbmcgKEZlbGFrZXRsZcWfdGlybWUpXG4gICAgY29uc3QgY2F0YXN0cm9waGl6aW5nUGF0dGVybnMgPSBbXG4gICAgICB7IHBhdHRlcm46IC95YVxccysuKj9vbHVyc2EvZ2ksIHdlaWdodDogMC44IH0sXG4gICAgICB7IHBhdHRlcm46IC9rZXNpbi4qP29sYWNhay9naSwgd2VpZ2h0OiAwLjcgfSxcbiAgICAgIHsgcGF0dGVybjogL2ZlbGFrZXR8a29ya3Vuw6d8YmVyYmF0L2dpLCB3ZWlnaHQ6IDAuNiB9LFxuICAgICAgeyBwYXR0ZXJuOiAvbWFodm9sLio/fGJpdGVjZWt8ZGF5YW5hbWFtL2dpLCB3ZWlnaHQ6IDAuOSB9XG4gICAgXTtcbiAgICBcbiAgICBjb25zdCBjYXRhc3Ryb3BoaXppbmdFdmlkZW5jZSA9IFtdO1xuICAgIGxldCBjYXRhc3Ryb3BoaXppbmdTY29yZSA9IDA7XG4gICAgXG4gICAgY2F0YXN0cm9waGl6aW5nUGF0dGVybnMuZm9yRWFjaCgoeyBwYXR0ZXJuLCB3ZWlnaHQgfSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2gocGF0dGVybik7XG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBjYXRhc3Ryb3BoaXppbmdTY29yZSArPSBtYXRjaGVzLmxlbmd0aCAqIHdlaWdodDtcbiAgICAgICAgY2F0YXN0cm9waGl6aW5nRXZpZGVuY2UucHVzaCguLi5tYXRjaGVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBpZiAoY2F0YXN0cm9waGl6aW5nU2NvcmUgPiAwLjUpIHtcbiAgICAgIGRpc3RvcnRpb25zLnB1c2goe1xuICAgICAgICBuYW1lOiAnY2F0YXN0cm9waGl6aW5nJyxcbiAgICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4oY2F0YXN0cm9waGl6aW5nU2NvcmUsIDEpLFxuICAgICAgICBldmlkZW5jZTogY2F0YXN0cm9waGl6aW5nRXZpZGVuY2Uuc2xpY2UoMCwgMykgLy8gTWF4IDMgZXhhbXBsZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBBbGwtb3ItTm90aGluZyBUaGlua2luZyAoSGVwLUhpw6cgRMO8xZ/DvG5jZSlcbiAgICBjb25zdCBhbGxPck5vdGhpbmdQYXR0ZXJucyA9IFtcbiAgICAgIHsgcGF0dGVybjogL2FzbGEuKj9vbG1henxoacOnYmlyIHphbWFuL2dpLCB3ZWlnaHQ6IDAuOCB9LFxuICAgICAgeyBwYXR0ZXJuOiAvaGVyIHphbWFufGhlcHxoacOnL2dpLCB3ZWlnaHQ6IDAuNiB9LFxuICAgICAgeyBwYXR0ZXJuOiAvdGFtYW1lbi4qP2JhxZ9hcsSxc8Sxenxtw7xrZW1tZWwuKj9vbG1hbMSxL2dpLCB3ZWlnaHQ6IDAuOSB9XG4gICAgXTtcbiAgICBcbiAgICBjb25zdCBhbGxPck5vdGhpbmdFdmlkZW5jZSA9IFtdO1xuICAgIGxldCBhbGxPck5vdGhpbmdTY29yZSA9IDA7XG4gICAgXG4gICAgYWxsT3JOb3RoaW5nUGF0dGVybnMuZm9yRWFjaCgoeyBwYXR0ZXJuLCB3ZWlnaHQgfSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2gocGF0dGVybik7XG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBhbGxPck5vdGhpbmdTY29yZSArPSBtYXRjaGVzLmxlbmd0aCAqIHdlaWdodDtcbiAgICAgICAgYWxsT3JOb3RoaW5nRXZpZGVuY2UucHVzaCguLi5tYXRjaGVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBpZiAoYWxsT3JOb3RoaW5nU2NvcmUgPiAwLjQpIHtcbiAgICAgIGRpc3RvcnRpb25zLnB1c2goe1xuICAgICAgICBuYW1lOiAnYWxsX29yX25vdGhpbmcnLFxuICAgICAgICBjb25maWRlbmNlOiBNYXRoLm1pbihhbGxPck5vdGhpbmdTY29yZSwgMSksXG4gICAgICAgIGV2aWRlbmNlOiBhbGxPck5vdGhpbmdFdmlkZW5jZS5zbGljZSgwLCAzKVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIE1pbmQgUmVhZGluZyAoWmloaW4gT2t1bWEpXG4gICAgY29uc3QgbWluZFJlYWRpbmdQYXR0ZXJucyA9IFtcbiAgICAgIHsgcGF0dGVybjogL2hlcmtlcy4qP2TDvMWfw7xuw7x5b3J8a2VzaW4uKj9kw7zFn8O8bsO8eW9yL2dpLCB3ZWlnaHQ6IDAuOCB9LFxuICAgICAgeyBwYXR0ZXJuOiAvYmVuZGVuIG5lZnJldHxiZW5pIHNldm1peW9yL2dpLCB3ZWlnaHQ6IDAuOSB9LFxuICAgICAgeyBwYXR0ZXJuOiAveWFyZ8SxbMSxeW9yfGRhbGdhIGdlw6dpeW9yfGFwdGFsIHNhbsSxeW9yL2dpLCB3ZWlnaHQ6IDAuNyB9XG4gICAgXTtcbiAgICBcbiAgICBjb25zdCBtaW5kUmVhZGluZ0V2aWRlbmNlID0gW107XG4gICAgbGV0IG1pbmRSZWFkaW5nU2NvcmUgPSAwO1xuICAgIFxuICAgIG1pbmRSZWFkaW5nUGF0dGVybnMuZm9yRWFjaCgoeyBwYXR0ZXJuLCB3ZWlnaHQgfSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2gocGF0dGVybik7XG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBtaW5kUmVhZGluZ1Njb3JlICs9IG1hdGNoZXMubGVuZ3RoICogd2VpZ2h0O1xuICAgICAgICBtaW5kUmVhZGluZ0V2aWRlbmNlLnB1c2goLi4ubWF0Y2hlcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgaWYgKG1pbmRSZWFkaW5nU2NvcmUgPiAwLjQpIHtcbiAgICAgIGRpc3RvcnRpb25zLnB1c2goe1xuICAgICAgICBuYW1lOiAnbWluZF9yZWFkaW5nJyxcbiAgICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4obWluZFJlYWRpbmdTY29yZSwgMSksXG4gICAgICAgIGV2aWRlbmNlOiBtaW5kUmVhZGluZ0V2aWRlbmNlLnNsaWNlKDAsIDMpXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gUGVyc29uYWxpemF0aW9uIChLacWfaXNlbGxlxZ90aXJtZSlcbiAgICBjb25zdCBwZXJzb25hbGl6YXRpb25QYXR0ZXJucyA9IFtcbiAgICAgIHsgcGF0dGVybjogL2JlbmltIHnDvHrDvG1kZW58YmVuaW0gc3XDp3VtL2dpLCB3ZWlnaHQ6IDAuOSB9LFxuICAgICAgeyBwYXR0ZXJuOiAvYmVuIHNlYmVwIG9sZHVtfGhlcCBiZW4vZ2ksIHdlaWdodDogMC44IH0sXG4gICAgICB7IHBhdHRlcm46IC9iZW5kZW4ga2F5bmFrbMSxL2dpLCB3ZWlnaHQ6IDAuNyB9XG4gICAgXTtcbiAgICBcbiAgICBjb25zdCBwZXJzb25hbGl6YXRpb25FdmlkZW5jZSA9IFtdO1xuICAgIGxldCBwZXJzb25hbGl6YXRpb25TY29yZSA9IDA7XG4gICAgXG4gICAgcGVyc29uYWxpemF0aW9uUGF0dGVybnMuZm9yRWFjaCgoeyBwYXR0ZXJuLCB3ZWlnaHQgfSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2gocGF0dGVybik7XG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBwZXJzb25hbGl6YXRpb25TY29yZSArPSBtYXRjaGVzLmxlbmd0aCAqIHdlaWdodDtcbiAgICAgICAgcGVyc29uYWxpemF0aW9uRXZpZGVuY2UucHVzaCguLi5tYXRjaGVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBpZiAocGVyc29uYWxpemF0aW9uU2NvcmUgPiAwLjQpIHtcbiAgICAgIGRpc3RvcnRpb25zLnB1c2goe1xuICAgICAgICBuYW1lOiAncGVyc29uYWxpemF0aW9uJyxcbiAgICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4ocGVyc29uYWxpemF0aW9uU2NvcmUsIDEpLFxuICAgICAgICBldmlkZW5jZTogcGVyc29uYWxpemF0aW9uRXZpZGVuY2Uuc2xpY2UoMCwgMylcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBMYWJlbGluZyAoRXRpa2V0bGVtZSlcbiAgICBjb25zdCBsYWJlbGluZ1BhdHRlcm5zID0gW1xuICAgICAgeyBwYXR0ZXJuOiAvYmVuLio/YmHFn2FyxLFzxLF6xLFtfGJlbi4qP2FwdGFsxLFtL2dpLCB3ZWlnaHQ6IDAuOSB9LFxuICAgICAgeyBwYXR0ZXJuOiAvYmVuLio/ZGXEn2Vyc2l6aW18YmVuLio/YmVjZXJpa3NpemltL2dpLCB3ZWlnaHQ6IDAuOSB9LFxuICAgICAgeyBwYXR0ZXJuOiAvaGnDp2JpciBpxZ9lIHlhcmFtxLF5b3J1bS9naSwgd2VpZ2h0OiAwLjggfVxuICAgIF07XG4gICAgXG4gICAgY29uc3QgbGFiZWxpbmdFdmlkZW5jZSA9IFtdO1xuICAgIGxldCBsYWJlbGluZ1Njb3JlID0gMDtcbiAgICBcbiAgICBsYWJlbGluZ1BhdHRlcm5zLmZvckVhY2goKHsgcGF0dGVybiwgd2VpZ2h0IH0pID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKHBhdHRlcm4pO1xuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgbGFiZWxpbmdTY29yZSArPSBtYXRjaGVzLmxlbmd0aCAqIHdlaWdodDtcbiAgICAgICAgbGFiZWxpbmdFdmlkZW5jZS5wdXNoKC4uLm1hdGNoZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGlmIChsYWJlbGluZ1Njb3JlID4gMC40KSB7XG4gICAgICBkaXN0b3J0aW9ucy5wdXNoKHtcbiAgICAgICAgbmFtZTogJ2xhYmVsaW5nJyxcbiAgICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4obGFiZWxpbmdTY29yZSwgMSksXG4gICAgICAgIGV2aWRlbmNlOiBsYWJlbGluZ0V2aWRlbmNlLnNsaWNlKDAsIDMpXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGRpc3RvcnRpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVRob3VnaHRSZWNvcmQodGV4dDogc3RyaW5nLCBkaXN0b3J0aW9uczogYW55W10pOiBhbnkge1xuICAgIGNvbnN0IHByaW1hcnlEaXN0b3J0aW9uID0gZGlzdG9ydGlvbnNbMF07XG4gICAgaWYgKCFwcmltYXJ5RGlzdG9ydGlvbikgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGF1dG9tYXRpY1Rob3VnaHQ6IHRleHQuc3Vic3RyaW5nKDAsIDIwMCksIC8vIEZpcnN0IDIwMCBjaGFycyBhcyBhdXRvbWF0aWMgdGhvdWdodFxuICAgICAgZW1vdGlvbjogdGhpcy5leHRyYWN0RW1vdGlvbkZyb21UZXh0KHRleHQpLFxuICAgICAgaW50ZW5zaXR5OiB0aGlzLmNhbGN1bGF0ZUVtb3Rpb25hbEludGVuc2l0eSh0ZXh0KSxcbiAgICAgIGRpc3RvcnRpb246IHByaW1hcnlEaXN0b3J0aW9uLm5hbWUsXG4gICAgICBldmlkZW5jZTogcHJpbWFyeURpc3RvcnRpb24uZXZpZGVuY2UsXG4gICAgICBiYWxhbmNlZFRob3VnaHQ6ICcnLCAvLyBXaWxsIGJlIGZpbGxlZCBieSB1c2VyIG9yIEFJIHJlZnJhbWVzXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlQ0JUUmVmcmFtZXModGV4dDogc3RyaW5nLCBkaXN0b3J0aW9uczogYW55W10pOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3QgcmVmcmFtZXMgPSBbXTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBkaXN0b3J0aW9uLXNwZWNpZmljIHJlZnJhbWVzXG4gICAgZGlzdG9ydGlvbnMuZm9yRWFjaChkaXN0b3J0aW9uID0+IHtcbiAgICAgIHN3aXRjaCAoZGlzdG9ydGlvbi5uYW1lKSB7XG4gICAgICAgIGNhc2UgJ2NhdGFzdHJvcGhpemluZyc6XG4gICAgICAgICAgcmVmcmFtZXMucHVzaChcbiAgICAgICAgICAgICdCdSBkdXJ1bXVuIGdlcsOnZWt0ZSBuZSBrYWRhciBrw7Z0w7wgb2xhYmlsZWNlxJ9pbmkgZ2Vyw6dla8OnaSBiaXIgxZ9la2lsZGUgZGXEn2VybGVuZGlyZWJpbGlyaW0uJyxcbiAgICAgICAgICAgICdHZcOnbWnFn3RlIGJlbnplciBkdXJ1bWxhcmxhIGJhxZ9hIMOnxLFrdMSxxJ/EsW3EsSBoYXTEsXJsxLF5b3J1bS4nLFxuICAgICAgICAgICAgJ0VuIGvDtnTDvCBzZW5hcnlvIGdlcsOnZWtsZcWfc2UgYmlsZSwgYnVudW4gw7xzdGVzaW5kZW4gZ2VsbWUgeW9sbGFyxLEgdmFyZMSxci4nXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYWxsX29yX25vdGhpbmcnOlxuICAgICAgICAgIHJlZnJhbWVzLnB1c2goXG4gICAgICAgICAgICAnQnUgZHVydW0gc2l5YWgtYmV5YXogZGXEn2lsLCBncmluaW4gdG9ubGFyxLEgdmFyLicsXG4gICAgICAgICAgICAnTcO8a2VtbWVsIG9sbWFrIHpvcnVuZGEgZGXEn2lsaW0sIHlldGVyaW5jZSBpeWkgb2xtYWsgZGEgZGXEn2VybGlkaXIuJyxcbiAgICAgICAgICAgICdIZXIgxZ9leWluIGJpciBzcGVrdHJ1bXUgb2xkdcSfdW51IGhhdMSxcmxhbWFsxLF5xLFtLidcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtaW5kX3JlYWRpbmcnOlxuICAgICAgICAgIHJlZnJhbWVzLnB1c2goXG4gICAgICAgICAgICAnQmHFn2thbGFyxLFuxLFuIG5lIGTDvMWfw7xuZMO8xJ/DvG7DvCBnZXLDp2VrdGVuIGJpbGVtZW0uJyxcbiAgICAgICAgICAgICfEsG5zYW5sYXIgZ2VuZWxsaWtsZSBrZW5kaSBzb3J1bmxhcsSxeWxhIG1lxZ9ndWxsZXIsIGJlbmkgbyBrYWRhciBkw7zFn8O8bm3DvHlvcmxhci4nLFxuICAgICAgICAgICAgJ1ZhcnNhecSxbWxhcsSxbSBnZXLDp2VrIG9sbWF5YWJpbGlyLCBkb8SfcnVkYW4gc29ybWFrIGRhaGEgaXlpIG9sYWJpbGlyLidcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZXJzb25hbGl6YXRpb24nOlxuICAgICAgICAgIHJlZnJhbWVzLnB1c2goXG4gICAgICAgICAgICAnSGVyIMWfZXkgYmVuaW0ga29udHJvbMO8bWRlIGRlxJ9pbCB2ZSBoZXIgxZ9leWRlbiBzb3J1bWx1IGRlxJ9pbGltLicsXG4gICAgICAgICAgICAnQnUgZHVydW1hIGJpcsOnb2sgZmFrdMO2ciBrYXRrxLFkYSBidWx1bm11xZ8gb2xhYmlsaXIuJyxcbiAgICAgICAgICAgICdLZW5kaW1pIGdlcmVrc2l6IHllcmUgc3XDp2xhbWFrIHllcmluZSDDp8O2esO8bSBvZGFrbMSxIGTDvMWfw7xuZWJpbGlyaW0uJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xhYmVsaW5nJzpcbiAgICAgICAgICByZWZyYW1lcy5wdXNoKFxuICAgICAgICAgICAgJ0JlbiBiaXIgZGF2cmFuxLHFn8SxbSBkZcSfaWxpbSwgYnUgc2FkZWNlIGJpciBoYXRhLicsXG4gICAgICAgICAgICAnSGVya2VzIGhhdGEgeWFwYXIsIGJ1IGJlbmkga8O2dMO8IGJpciBpbnNhbiB5YXBtYXouJyxcbiAgICAgICAgICAgICdLZW5kaW1sZSBkYWhhIMWfZWZrYXRsaSBrb251xZ9tYWzEsXnEsW0uJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8gR2VuZXJpYyByZWZyYW1lcyBpZiBubyBzcGVjaWZpYyBkaXN0b3J0aW9uc1xuICAgIGlmIChyZWZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJlZnJhbWVzLnB1c2goXG4gICAgICAgICdCdSBkw7zFn8O8bmNlbmluIGJhbmEgbmUga2FkYXIgZmF5ZGFzxLEgdmFyPycsXG4gICAgICAgICdCdSBkdXJ1bXUgZGFoYSBkZW5nZWxpIGJpciDFn2VraWxkZSBuYXPEsWwgZGXEn2VybGVuZGlyZWJpbGlyaW0/JyxcbiAgICAgICAgJ0VuIGl5aSBhcmthZGHFn8SxbWEgbmUgc8O2eWxlcmRpbT8nXG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBhbmQgbGltaXQgdG8gM1xuICAgIHJldHVybiBbLi4ubmV3IFNldChyZWZyYW1lcyldLnNsaWNlKDAsIDMpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWNvbW1lbmRDQlRUZWNobmlxdWVzKGRpc3RvcnRpb25zOiBhbnlbXSwgdGV4dDogc3RyaW5nKTogQXJyYXk8e25hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgcHJpb3JpdHk6IG51bWJlcn0+IHtcbiAgICBjb25zdCB0ZWNobmlxdWVzID0gW107XG4gICAgY29uc3QgZGlzdG9ydGlvbk5hbWVzID0gZGlzdG9ydGlvbnMubWFwKGQgPT4gZC5uYW1lKTtcbiAgICBcbiAgICAvLyBUZWNobmlxdWUgcmVjb21tZW5kYXRpb25zIGJhc2VkIG9uIGRldGVjdGVkIGRpc3RvcnRpb25zXG4gICAgaWYgKGRpc3RvcnRpb25OYW1lcy5pbmNsdWRlcygnY2F0YXN0cm9waGl6aW5nJykpIHtcbiAgICAgIHRlY2huaXF1ZXMucHVzaCh7XG4gICAgICAgIG5hbWU6ICdQcm9iYWJpbGl0eSBFc3RpbWF0aW9uJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdLb3JrdWxhbiBkdXJ1bXVuIGdlcsOnZWtsZcWfbWUgb2xhc8SxbMSxxJ/EsW7EsSBnZXLDp2Vrw6dpIGJpciDFn2VraWxkZSBkZcSfZXJsZW5kaXJpbiAoMC0xMDAlKS4nLFxuICAgICAgICBwcmlvcml0eTogOVxuICAgICAgfSk7XG4gICAgICB0ZWNobmlxdWVzLnB1c2goe1xuICAgICAgICBuYW1lOiAnRGVjYXRhc3Ryb3BoaXppbmcnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0VuIGvDtnTDvCBzZW5hcnlvIGdlcsOnZWtsZcWfc2UgYmlsZSBuYXPEsWwgYmHFn2Egw6fEsWthYmlsZWNlxJ9pbml6aSBwbGFubGF5xLFuLicsXG4gICAgICAgIHByaW9yaXR5OiA4XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGRpc3RvcnRpb25OYW1lcy5pbmNsdWRlcygnYWxsX29yX25vdGhpbmcnKSkge1xuICAgICAgdGVjaG5pcXVlcy5wdXNoKHtcbiAgICAgICAgbmFtZTogJ0NvbnRpbnV1bSBUZWNobmlxdWUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0R1cnVtdSAwLTEwMCBza2FsYXPEsW5kYSBkZcSfZXJsZW5kaXJlcmVrIGdyaSBhbGFubGFyxLEga2XFn2ZlZGluLicsXG4gICAgICAgIHByaW9yaXR5OiA5XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGRpc3RvcnRpb25OYW1lcy5pbmNsdWRlcygnbWluZF9yZWFkaW5nJykpIHtcbiAgICAgIHRlY2huaXF1ZXMucHVzaCh7XG4gICAgICAgIG5hbWU6ICdFdmlkZW5jZSBUZXN0aW5nJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdCYcWfa2FsYXLEsW7EsW4gZMO8xZ/DvG5jZWxlcmluZSBkYWlyIHZhcnNhecSxbWxhcsSxbsSxeiBpw6dpbiBrYW7EsXQgYXJhecSxbi4nLFxuICAgICAgICBwcmlvcml0eTogOFxuICAgICAgfSk7XG4gICAgICB0ZWNobmlxdWVzLnB1c2goe1xuICAgICAgICBuYW1lOiAnQWx0ZXJuYXRpdmUgUGVyc3BlY3RpdmVzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdEdXJ1bXUgZmFya2zEsSBhw6fEsWxhcmRhbiBkZcSfZXJsZW5kaXJpbi4nLFxuICAgICAgICBwcmlvcml0eTogN1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEdlbmVyYWwgdGVjaG5pcXVlc1xuICAgIHRlY2huaXF1ZXMucHVzaCh7XG4gICAgICBuYW1lOiAnVGhvdWdodCBSZWNvcmQnLFxuICAgICAgZGVzY3JpcHRpb246ICdEw7zFn8O8bmNlbGVyaW5pemkgeWF6YXJhayBhbmFsaXogZWRpbiB2ZSBkZW5nZWxpIGFsdGVybmF0aWZsZXIgYnVsdW4uJyxcbiAgICAgIHByaW9yaXR5OiA2XG4gICAgfSk7XG4gICAgXG4gICAgdGVjaG5pcXVlcy5wdXNoKHtcbiAgICAgIG5hbWU6ICdTZWxmLUNvbXBhc3Npb24nLFxuICAgICAgZGVzY3JpcHRpb246ICdLZW5kaW5pemUgZW4gaXlpIGFya2FkYcWfxLFuxLF6YSBkYXZyYW7EsXIgZ2liaSDFn2Vma2F0bGkgZGF2cmFuxLFuLicsXG4gICAgICBwcmlvcml0eTogNVxuICAgIH0pO1xuICAgIFxuICAgIC8vIFNvcnQgYnkgcHJpb3JpdHkgYW5kIHJldHVybiB0b3AgM1xuICAgIHJldHVybiB0ZWNobmlxdWVzXG4gICAgICAuc29ydCgoYSwgYikgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpXG4gICAgICAuc2xpY2UoMCwgMyk7XG4gIH1cblxuICBwcml2YXRlIGFzc2Vzc0NvZ25pdGl2ZURpc3RvcnRpb25TZXZlcml0eSh0ZXh0OiBzdHJpbmcsIGRpc3RvcnRpb25zOiBhbnlbXSk6IG51bWJlciB7XG4gICAgaWYgKGRpc3RvcnRpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG4gICAgXG4gICAgLy8gQmFzZSBzZXZlcml0eSBmcm9tIG51bWJlciBvZiBkaXN0b3J0aW9uc1xuICAgIGxldCBzZXZlcml0eSA9IE1hdGgubWluKGRpc3RvcnRpb25zLmxlbmd0aCAqIDIsIDYpO1xuICAgIFxuICAgIC8vIEluY3JlYXNlIHNldmVyaXR5IGJhc2VkIG9uIGNvbmZpZGVuY2VcbiAgICBjb25zdCBhdmdDb25maWRlbmNlID0gZGlzdG9ydGlvbnMucmVkdWNlKChzdW0sIGQpID0+IHN1bSArIGQuY29uZmlkZW5jZSwgMCkgLyBkaXN0b3J0aW9ucy5sZW5ndGg7XG4gICAgc2V2ZXJpdHkgKz0gYXZnQ29uZmlkZW5jZSAqIDI7XG4gICAgXG4gICAgLy8gSW5jcmVhc2Ugc2V2ZXJpdHkgZm9yIGVtb3Rpb25hbCBpbnRlbnNpdHkgd29yZHNcbiAgICBjb25zdCBpbnRlbnNpdHlXb3JkcyA9IC/Dp29rfGHFn8SxcsSxfGtvcmt1bsOnfGJlcmJhdHxkYXlhbmFtYW18bWFodm9sZHVtL2dpO1xuICAgIGNvbnN0IGludGVuc2l0eU1hdGNoZXMgPSB0ZXh0Lm1hdGNoKGludGVuc2l0eVdvcmRzKTtcbiAgICBpZiAoaW50ZW5zaXR5TWF0Y2hlcykge1xuICAgICAgc2V2ZXJpdHkgKz0gTWF0aC5taW4oaW50ZW5zaXR5TWF0Y2hlcy5sZW5ndGggKiAwLjUsIDIpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5yb3VuZChzZXZlcml0eSksIDEwKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQ0JUVXJnZW5jeShzZXZlcml0eTogbnVtYmVyLCBkaXN0b3J0aW9uczogYW55W10pOiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHtcbiAgICBpZiAoc2V2ZXJpdHkgPj0gOCkgcmV0dXJuICdoaWdoJztcbiAgICBpZiAoc2V2ZXJpdHkgPj0gNSkgcmV0dXJuICdtZWRpdW0nO1xuICAgIHJldHVybiAnbG93JztcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQ0JUQ29uZmlkZW5jZShkaXN0b3J0aW9uczogYW55W10sIHRleHRMZW5ndGg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGRpc3RvcnRpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDAuMztcbiAgICBcbiAgICBjb25zdCBhdmdEaXN0b3J0aW9uQ29uZmlkZW5jZSA9IGRpc3RvcnRpb25zLnJlZHVjZSgoc3VtLCBkKSA9PiBzdW0gKyBkLmNvbmZpZGVuY2UsIDApIC8gZGlzdG9ydGlvbnMubGVuZ3RoO1xuICAgIGNvbnN0IGxlbmd0aEJvbnVzID0gTWF0aC5taW4odGV4dExlbmd0aCAvIDEwMCwgMC4yKTsgLy8gQm9udXMgZm9yIGxvbmdlciB0ZXh0XG4gICAgXG4gICAgcmV0dXJuIE1hdGgubWluKGF2Z0Rpc3RvcnRpb25Db25maWRlbmNlICsgbGVuZ3RoQm9udXMsIDAuOTUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOKchSBGSVhFRDogQ2VudHJhbGl6ZWQgaGV1cmlzdGljIHZvaWNlIGZhbGxiYWNrIChtb3ZlZCBmcm9tIFVJIGxheWVyKVxuICAgKiBHZW5lcmF0ZSBiYXNpYyBoZXVyaXN0aWMgYW5hbHlzaXMgd2hlbiBzb3BoaXN0aWNhdGVkIHZvaWNlIGFuYWx5c2lzIGZhaWxzXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlSGV1cmlzdGljVm9pY2VBbmFseXNpcyh0ZXh0OiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IGxvd2VyVGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICAvLyBTaW1wbGUga2V5d29yZC1iYXNlZCBjbGFzc2lmaWNhdGlvblxuICAgIGNvbnN0IG1vb2RLZXl3b3JkcyA9IFsnbXV0bHUnLCAnw7x6Z8O8bicsICd5b3JndW4nLCAnaXlpJywgJ2vDtnTDvCcsICdoYXJpa2EnLCAnYmVyYmF0JywgJ23DvGtlbW1lbCcsICdtb29kJywgJ2hpc3NlZGl5b3J1bSddO1xuICAgIGNvbnN0IG9jZEtleXdvcmRzID0gWydrb21wdWxzaXlvbicsICd0YWvEsW50xLEnLCAna29udHJvbCcsICd0ZW1pemxpaycsICd5xLFrYW1hJywgJ3NheW1hJywgJ2TDvHplbicsICdzaW1ldHJpJ107XG4gICAgY29uc3QgY2J0S2V5d29yZHMgPSBbJ2TDvMWfw7xuY2UnLCAnb2x1bXN1eicsICdrYXlnxLEnLCAnZW5kacWfZScsICdrb3JrdScsICfDp2FycMSxdG1hJywgJ3lhbmzEscWfJywgJ2RvxJ9ydSddO1xuICAgIGNvbnN0IGJyZWF0aHdvcmtLZXl3b3JkcyA9IFsnbmVmZXMnLCAnc2FraW4nLCAncmFoYXRsYW1hJywgJ3N0cmVzJywgJ2dlcmdpbicsICdzb2x1ayddO1xuICAgIFxuICAgIC8vIENvdW50IGtleXdvcmQgbWF0Y2hlc1xuICAgIGNvbnN0IG1vb2RDb3VudCA9IG1vb2RLZXl3b3Jkcy5maWx0ZXIoa2V5d29yZCA9PiBsb3dlclRleHQuaW5jbHVkZXMoa2V5d29yZCkpLmxlbmd0aDtcbiAgICBjb25zdCBvY2RDb3VudCA9IG9jZEtleXdvcmRzLmZpbHRlcihrZXl3b3JkID0+IGxvd2VyVGV4dC5pbmNsdWRlcyhrZXl3b3JkKSkubGVuZ3RoO1xuICAgIGNvbnN0IGNidENvdW50ID0gY2J0S2V5d29yZHMuZmlsdGVyKGtleXdvcmQgPT4gbG93ZXJUZXh0LmluY2x1ZGVzKGtleXdvcmQpKS5sZW5ndGg7XG4gICAgY29uc3QgYnJlYXRod29ya0NvdW50ID0gYnJlYXRod29ya0tleXdvcmRzLmZpbHRlcihrZXl3b3JkID0+IGxvd2VyVGV4dC5pbmNsdWRlcyhrZXl3b3JkKSkubGVuZ3RoO1xuICAgIFxuICAgIC8vIERldGVybWluZSBjYXRlZ29yeSBiYXNlZCBvbiBoaWdoZXN0IGNvdW50XG4gICAgbGV0IGNhdGVnb3J5ID0gJ01PT0QnOyAvLyBkZWZhdWx0XG4gICAgbGV0IGNvbmZpZGVuY2UgPSAwLjM7IC8vIGxvdyBjb25maWRlbmNlIGZvciBoZXVyaXN0aWNcbiAgICBsZXQgbWF4Q291bnQgPSBtb29kQ291bnQ7XG4gICAgXG4gICAgaWYgKG9jZENvdW50ID4gbWF4Q291bnQpIHtcbiAgICAgIGNhdGVnb3J5ID0gJ09DRCc7XG4gICAgICBtYXhDb3VudCA9IG9jZENvdW50O1xuICAgIH1cbiAgICBpZiAoY2J0Q291bnQgPiBtYXhDb3VudCkge1xuICAgICAgY2F0ZWdvcnkgPSAnQ0JUJztcbiAgICAgIG1heENvdW50ID0gY2J0Q291bnQ7XG4gICAgfVxuICAgIGlmIChicmVhdGh3b3JrQ291bnQgPiBtYXhDb3VudCkge1xuICAgICAgY2F0ZWdvcnkgPSAnQlJFQVRIV09SSyc7XG4gICAgICBtYXhDb3VudCA9IGJyZWF0aHdvcmtDb3VudDtcbiAgICB9XG4gICAgXG4gICAgLy8gQWRqdXN0IGNvbmZpZGVuY2UgYmFzZWQgb24gbWF0Y2hlc1xuICAgIGNvbmZpZGVuY2UgPSBNYXRoLm1pbigwLjYsIDAuMyArIChtYXhDb3VudCAqIDAuMSkpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBjYXRlZ29yeSxcbiAgICAgIGNvbmZpZGVuY2UsXG4gICAgICBzdWdnZXN0aW9uOiAnSGV1cmlzdGljIGFuYWx5c2lzIHRhbWFtbGFuZMSxJyxcbiAgICAgIHJvdXRlOiAnU1VHR0VTVF9TQ1JFRU4nLFxuICAgICAgZXh0cmFjdGVkRGF0YToge1xuICAgICAgICBtb29kOiBNYXRoLm1heCgxLCBNYXRoLm1pbigxMCwgNSArIChtYXhDb3VudCAtIDIpKSksIC8vIDEtMTAgcmFuZ2UsIG5ldXRyYWw9NVxuICAgICAgICB0cmlnZ2VyOiBjYXRlZ29yeSA9PT0gJ09DRCcgPyAnY29tcHVsc2lvbl9kZXRlY3RlZCcgOlxuICAgICAgICAgICAgICAgIGNhdGVnb3J5ID09PSAnQ0JUJyA/ICduZWdhdGl2ZV90aG91Z2h0JyA6XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnkgPT09ICdCUkVBVEhXT1JLJyA/ICdhbnhpZXR5X2RldGVjdGVkJyA6ICdtb29kX2V4cHJlc3Npb24nXG4gICAgICB9LFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgc291cmNlOiAndW5pZmllZF9oZXVyaXN0aWNfZmFsbGJhY2snLFxuICAgICAgICBwcm9jZXNzaW5nVGltZTogMCxcbiAgICAgICAga2V5d29yZE1hdGNoZXM6IHsgbW9vZENvdW50LCBvY2RDb3VudCwgY2J0Q291bnQsIGJyZWF0aHdvcmtDb3VudCB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEVtb3Rpb25Gcm9tVGV4dCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVtb3Rpb25zID0ge1xuICAgICAgJ8O8emfDvG4nOiAvw7x6Z8O8bnzDvHrDvGzDvHxrZWRlcmxpfG1lbGFua29saWsvZ2ksXG4gICAgICAnw7Zma2VsaSc6IC/DtmZrZWxpfHNpbmlybGl8a8SxemfEsW58cmFoYXRzxLF6L2dpLFxuICAgICAgJ2theWfEsWzEsSc6IC9rYXlnxLFsxLF8ZW5kacWfZWxpfGdlcmdpbnxzdHJlc2xpL2dpLFxuICAgICAgJ2tvcmt1JzogL2tvcmt1fHBhbmlrfGRlaMWfZXQvZ2ksXG4gICAgICAndXRhbsOnJzogL3V0YW7Dp3xtYWhjdXB8cmV6aWwvZ2lcbiAgICB9O1xuICAgIFxuICAgIGZvciAoY29uc3QgW2Vtb3Rpb24sIHBhdHRlcm5dIG9mIE9iamVjdC5lbnRyaWVzKGVtb3Rpb25zKSkge1xuICAgICAgaWYgKHBhdHRlcm4udGVzdCh0ZXh0KSkge1xuICAgICAgICByZXR1cm4gZW1vdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuICdiZWxpcnNpeic7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUVtb3Rpb25hbEludGVuc2l0eSh0ZXh0OiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IGludGVuc2lmaWVycyA9IHRleHQubWF0Y2goL8Onb2t8YcWfxLFyxLF8c29uIGRlcmVjZXxmYXpsYXPEsXlsYXx0YW0vZ2kpO1xuICAgIGNvbnN0IGJhc2VJbnRlbnNpdHkgPSA1O1xuICAgIGNvbnN0IGludGVuc2lmaWVyQm9udXMgPSBpbnRlbnNpZmllcnMgPyBNYXRoLm1pbihpbnRlbnNpZmllcnMubGVuZ3RoICogMiwgNCkgOiAwO1xuICAgIFxuICAgIHJldHVybiBNYXRoLm1pbihiYXNlSW50ZW5zaXR5ICsgaW50ZW5zaWZpZXJCb251cywgMTApO1xuICB9XG4gIFxuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NJbnNpZ2h0c0dlbmVyYXRpb24oXG4gICAgaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0LCBcbiAgICBwYXR0ZXJuczogYW55XG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGluc2lnaHRzID0ge1xuICAgICAgICB0aGVyYXBldXRpYzogW10sXG4gICAgICAgIHByb2dyZXNzOiBbXSxcbiAgICAgICAgYmVoYXZpb3JhbDogW10sXG4gICAgICAgIG1vdGl2YXRpb25hbDogW10sXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgZ2VuZXJhdGVkQXQ6IERhdGUubm93KCksXG4gICAgICAgICAgY29uZmlkZW5jZTogMCxcbiAgICAgICAgICB0b3RhbEluc2lnaHRzOiAwLFxuICAgICAgICAgIGNhdGVnb3JpZXM6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIDEuIFZPSUNFLUVOSEFOQ0VEIElOU0lHSFRTIChTZXMgYW5hbGl6aSBkZXN0ZWtsaSlcbiAgICAgIGNvbnN0IHZvaWNlSGludHMgPSBpbnB1dC5jb250ZXh0Py5oaW50cztcbiAgICAgIGlmICh2b2ljZUhpbnRzPy52b2ljZUNhdGVnb3J5ICYmIHZvaWNlSGludHMudm9pY2VDb25maWRlbmNlID4gMC43KSB7XG4gICAgICAgIGNvbnN0IHZvaWNlRW5oYW5jZWRJbnNpZ2h0cyA9IHRoaXMuZ2VuZXJhdGVWb2ljZUVuaGFuY2VkSW5zaWdodHModm9pY2VIaW50cywgcGF0dGVybnMpO1xuICAgICAgICBpbnNpZ2h0cy50aGVyYXBldXRpYy5wdXNoKC4uLnZvaWNlRW5oYW5jZWRJbnNpZ2h0cyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGDwn46kIEFkZGVkICR7dm9pY2VFbmhhbmNlZEluc2lnaHRzLmxlbmd0aH0gdm9pY2UtZW5oYW5jZWQgaW5zaWdodHMgZm9yIGNhdGVnb3J5OiAke3ZvaWNlSGludHMudm9pY2VDYXRlZ29yeX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIPCfk4ogVHJhY2sgdm9pY2UgaW5zaWdodHMgYXBwbGljYXRpb25cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB0cmFja0FJSW50ZXJhY3Rpb24oQUlFdmVudFR5cGUuSU5TSUdIVFNfREVMSVZFUkVELCB7XG4gICAgICAgICAgICB1c2VySWQ6IGlucHV0LnVzZXJJZCxcbiAgICAgICAgICAgIHNvdXJjZTogJ3ZvaWNlX2VuaGFuY2VkX2luc2lnaHRzJyxcbiAgICAgICAgICAgIGluc2lnaHRzSGludHNBcHBsaWVkOiB0cnVlLFxuICAgICAgICAgICAgdm9pY2VDYXRlZ29yeTogdm9pY2VIaW50cy52b2ljZUNhdGVnb3J5LFxuICAgICAgICAgICAgdm9pY2VDb25maWRlbmNlOiB2b2ljZUhpbnRzLnZvaWNlQ29uZmlkZW5jZSxcbiAgICAgICAgICAgIGVuaGFuY2VkSW5zaWdodHNDb3VudDogdm9pY2VFbmhhbmNlZEluc2lnaHRzLmxlbmd0aCxcbiAgICAgICAgICAgIG9yaWdpbmFsUGF0dGVybnNDb3VudDogT2JqZWN0LmtleXMocGF0dGVybnMpLmZpbHRlcihrID0+IHBhdHRlcm5zW2tdPy5sZW5ndGggPiAwKS5sZW5ndGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBWb2ljZSBpbnNpZ2h0cyB0ZWxlbWV0cnkgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyAyLiBURU1QT1JBTCBJTlNJR0hUUyAoWmFtYW4gYmF6bMSxIGnDp2fDtnLDvGxlcilcbiAgICAgIGlmIChwYXR0ZXJucy50ZW1wb3JhbCAmJiBwYXR0ZXJucy50ZW1wb3JhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHRlbXBvcmFsSW5zaWdodHMgPSB0aGlzLmdlbmVyYXRlVGVtcG9yYWxJbnNpZ2h0cyhwYXR0ZXJucy50ZW1wb3JhbCk7XG4gICAgICAgIGluc2lnaHRzLnRoZXJhcGV1dGljLnB1c2goLi4udGVtcG9yYWxJbnNpZ2h0cyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIDMuIEJFSEFWSU9SQUwgSU5TSUdIVFMgKERhdnJhbsSxxZ9zYWwgacOnZ8O2csO8bGVyKVxuICAgICAgaWYgKHBhdHRlcm5zLmJlaGF2aW9yYWwgJiYgcGF0dGVybnMuYmVoYXZpb3JhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGJlaGF2aW9yYWxJbnNpZ2h0cyA9IHRoaXMuZ2VuZXJhdGVCZWhhdmlvcmFsSW5zaWdodHMocGF0dGVybnMuYmVoYXZpb3JhbCk7XG4gICAgICAgIGluc2lnaHRzLmJlaGF2aW9yYWwucHVzaCguLi5iZWhhdmlvcmFsSW5zaWdodHMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyA0LiBUUklHR0VSIElOU0lHSFRTIChUZXRpayBpw6dnw7Zyw7xsZXJpKVxuICAgICAgaWYgKHBhdHRlcm5zLnRyaWdnZXJzICYmIHBhdHRlcm5zLnRyaWdnZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlckluc2lnaHRzID0gdGhpcy5nZW5lcmF0ZVRyaWdnZXJJbnNpZ2h0cyhwYXR0ZXJucy50cmlnZ2Vycyk7XG4gICAgICAgIGluc2lnaHRzLnRoZXJhcGV1dGljLnB1c2goLi4udHJpZ2dlckluc2lnaHRzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gNS4gU0VWRVJJVFkgUFJPR1JFU1NJT04gSU5TSUdIVFMgKMWeaWRkZXQgc2V5cmkgacOnZ8O2csO8bGVyaSlcbiAgICAgIGlmIChwYXR0ZXJucy5zZXZlcml0eSAmJiBwYXR0ZXJucy5zZXZlcml0eS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHNldmVyaXR5SW5zaWdodHMgPSB0aGlzLmdlbmVyYXRlU2V2ZXJpdHlJbnNpZ2h0cyhwYXR0ZXJucy5zZXZlcml0eSk7XG4gICAgICAgIGluc2lnaHRzLnByb2dyZXNzLnB1c2goLi4uc2V2ZXJpdHlJbnNpZ2h0cyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIDYuIEVOVklST05NRU5UQUwgSU5TSUdIVFMgKMOHZXZyZXNlbCBpw6dnw7Zyw7xsZXIpXG4gICAgICBpZiAocGF0dGVybnMuZW52aXJvbm1lbnRhbCAmJiBwYXR0ZXJucy5lbnZpcm9ubWVudGFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZW52aXJvbm1lbnRhbEluc2lnaHRzID0gdGhpcy5nZW5lcmF0ZUVudmlyb25tZW50YWxJbnNpZ2h0cyhwYXR0ZXJucy5lbnZpcm9ubWVudGFsKTtcbiAgICAgICAgaW5zaWdodHMudGhlcmFwZXV0aWMucHVzaCguLi5lbnZpcm9ubWVudGFsSW5zaWdodHMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyA3LiBQUk9HUkVTUyBJTlNJR0hUUyAoxLBsZXJsZW1lIGnDp2fDtnLDvGxlcmkpXG4gICAgICBjb25zdCBwcm9ncmVzc0luc2lnaHRzID0gdGhpcy5nZW5lcmF0ZVByb2dyZXNzSW5zaWdodHMocGF0dGVybnMsIGlucHV0KTtcbiAgICAgIGluc2lnaHRzLnByb2dyZXNzLnB1c2goLi4ucHJvZ3Jlc3NJbnNpZ2h0cyk7XG4gICAgICBcbiAgICAgIC8vIDguIE1PVElWQVRJT05BTCBJTlNJR0hUUyAoTW90aXZhc3lvbiBpw6dnw7Zyw7xsZXJpKVxuICAgICAgY29uc3QgbW90aXZhdGlvbmFsSW5zaWdodHMgPSB0aGlzLmdlbmVyYXRlTW90aXZhdGlvbmFsSW5zaWdodHMocGF0dGVybnMpO1xuICAgICAgaW5zaWdodHMubW90aXZhdGlvbmFsLnB1c2goLi4ubW90aXZhdGlvbmFsSW5zaWdodHMpO1xuICAgICAgXG4gICAgICAvLyA5LiBDUk9TUy1QQVRURVJOIElOU0lHSFRTICjDh2FwcmF6IGthbMSxcCBhbmFsaXppKVxuICAgICAgY29uc3QgY3Jvc3NQYXR0ZXJuSW5zaWdodHMgPSB0aGlzLmdlbmVyYXRlQ3Jvc3NQYXR0ZXJuSW5zaWdodHMocGF0dGVybnMpO1xuICAgICAgaW5zaWdodHMudGhlcmFwZXV0aWMucHVzaCguLi5jcm9zc1BhdHRlcm5JbnNpZ2h0cyk7XG4gICAgICBcbiAgICAgIC8vIDEwLiBDQUxDVUxBVEUgTUVUQURBVEFcbiAgICAgIGluc2lnaHRzLm1ldGFkYXRhID0gdGhpcy5jYWxjdWxhdGVJbnNpZ2h0c01ldGFkYXRhKGluc2lnaHRzKTtcbiAgICAgIFxuICAgICAgLy8gMTEuIFBSSU9SSVRJWkUgQU5EIExJTUlUIElOU0lHSFRTIChFbiDDtm5lbWxpIGnDp2fDtnLDvGxlcmkgc2XDpylcbiAgICAgIGluc2lnaHRzLnRoZXJhcGV1dGljID0gdGhpcy5wcmlvcml0aXplSW5zaWdodHMoaW5zaWdodHMudGhlcmFwZXV0aWMpLnNsaWNlKDAsIDUpO1xuICAgICAgaW5zaWdodHMucHJvZ3Jlc3MgPSBpbnNpZ2h0cy5wcm9ncmVzcy5zbGljZSgwLCAzKTtcbiAgICAgIGluc2lnaHRzLmJlaGF2aW9yYWwgPSBpbnNpZ2h0cy5iZWhhdmlvcmFsLnNsaWNlKDAsIDMpO1xuICAgICAgaW5zaWdodHMubW90aXZhdGlvbmFsID0gaW5zaWdodHMubW90aXZhdGlvbmFsLnNsaWNlKDAsIDIpO1xuICAgICAgXG4gICAgICAvLyAxMi4gRkFMTEJBQ0sgSU5TSUdIVCBHRU5FUkFUSU9OIChCb8WfIHNvbnXDpyDDtm5sZW1lKVxuICAgICAgY29uc3QgdG90YWxJbnNpZ2h0cyA9IGluc2lnaHRzLnRoZXJhcGV1dGljLmxlbmd0aCArIGluc2lnaHRzLnByb2dyZXNzLmxlbmd0aCArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zaWdodHMuYmVoYXZpb3JhbC5sZW5ndGggKyBpbnNpZ2h0cy5tb3RpdmF0aW9uYWwubGVuZ3RoO1xuICAgICAgXG4gICAgICBpZiAodG90YWxJbnNpZ2h0cyA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmxvZygn4pqg77iPIE5vIHByaW1hcnkgaW5zaWdodHMgZ2VuZXJhdGVkLCBhZGRpbmcgZmFsbGJhY2sgaW5zaWdodHMuLi4nKTtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tJbnNpZ2h0cyA9IHRoaXMuZ2VuZXJhdGVGYWxsYmFja0luc2lnaHRzKHBhdHRlcm5zLCBpbnB1dCk7XG4gICAgICAgIGluc2lnaHRzLnRoZXJhcGV1dGljLnB1c2goLi4uZmFsbGJhY2tJbnNpZ2h0cy50aGVyYXBldXRpYyk7XG4gICAgICAgIGluc2lnaHRzLnByb2dyZXNzLnB1c2goLi4uZmFsbGJhY2tJbnNpZ2h0cy5wcm9ncmVzcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBUcmFjayBmYWxsYmFjayB1c2FnZSBmb3IgbW9uaXRvcmluZ1xuICAgICAgICB0cmFja0FJSW50ZXJhY3Rpb24oQUlFdmVudFR5cGUuSU5TSUdIVFNfREVMSVZFUkVELCB7XG4gICAgICAgICAgdXNlcklkOiBpbnB1dC51c2VySWQsXG4gICAgICAgICAgc291cmNlOiAnZmFsbGJhY2snLFxuICAgICAgICAgIHJlYXNvbjogJ25vX3ByaW1hcnlfaW5zaWdodHMnLFxuICAgICAgICAgIGluc2lnaHRzQ291bnQ6IGZhbGxiYWNrSW5zaWdodHMudGhlcmFwZXV0aWMubGVuZ3RoICsgZmFsbGJhY2tJbnNpZ2h0cy5wcm9ncmVzcy5sZW5ndGgsXG4gICAgICAgICAgcGF0dGVybnNBdmFpbGFibGU6IE9iamVjdC5rZXlzKHBhdHRlcm5zKS5maWx0ZXIoayA9PiBwYXR0ZXJuc1trXT8ubGVuZ3RoID4gMClcbiAgICAgICAgfSkuY2F0Y2goY29uc29sZS53YXJuKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGluc2lnaHRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdJbnNpZ2h0cyBnZW5lcmF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aGVyYXBldXRpYzogW10sXG4gICAgICAgIHByb2dyZXNzOiBbXSxcbiAgICAgICAgYmVoYXZpb3JhbDogW10sXG4gICAgICAgIG1vdGl2YXRpb25hbDogW10sXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgZ2VuZXJhdGVkQXQ6IERhdGUubm93KCksXG4gICAgICAgICAgY29uZmlkZW5jZTogMCxcbiAgICAgICAgICB0b3RhbEluc2lnaHRzOiAwLFxuICAgICAgICAgIGNhdGVnb3JpZXM6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVRlbXBvcmFsSW5zaWdodHModGVtcG9yYWxQYXR0ZXJuczogYW55W10pOiBhbnlbXSB7XG4gICAgY29uc3QgaW5zaWdodHMgPSBbXTtcbiAgICBcbiAgICB0ZW1wb3JhbFBhdHRlcm5zLmZvckVhY2gocGF0dGVybiA9PiB7XG4gICAgICBzd2l0Y2ggKHBhdHRlcm4udHlwZSkge1xuICAgICAgICBjYXNlICdwZWFrX2hvdXInOlxuICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgdGV4dDogYEtvbXB1bHNpeW9ubGFyxLFuxLF6IGdlbmVsbGlrbGUgJHtwYXR0ZXJuLnRpbWVPZkRheX0gc2FhdGxlcmluZGUgcGlrIHlhcMSxeW9yLiBCdSBzYWF0bGVyZGUgw7ZuY2VkZW4gaGF6xLFybGFubWFrIGZheWRhbMSxIG9sYWJpbGlyLmAsXG4gICAgICAgICAgICBjYXRlZ29yeTogJ3RlbXBvcmFsJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybi5jb25maWRlbmNlLFxuICAgICAgICAgICAgZGF0YTogeyBwZWFrVGltZTogcGF0dGVybi50aW1lT2ZEYXksIGZyZXF1ZW5jeTogcGF0dGVybi5mcmVxdWVuY3kgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZWFrX2RheSc6XG4gICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiBgJHtwYXR0ZXJuLmRheU9mV2Vla30gZ8O8bmxlcmkga29tcHVsc2l5b25sYXLEsW7EsXogZGFoYSBzxLFrIGfDtnLDvGzDvHlvci4gQnUgZ8O8bmxlciBpw6dpbiDDtnplbCBzdHJhdGVqaWxlciBnZWxpxZ90aXJlYmlsaXJzaW5pei5gLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICd0ZW1wb3JhbCcsXG4gICAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybi5jb25maWRlbmNlLFxuICAgICAgICAgICAgZGF0YTogeyBwZWFrRGF5OiBwYXR0ZXJuLmRheU9mV2VlaywgZnJlcXVlbmN5OiBwYXR0ZXJuLmZyZXF1ZW5jeSB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NsdXN0ZXJpbmcnOlxuICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgdGV4dDogJ0tvbXB1bHNpeW9ubGFyxLFuxLF6IGvDvG1lbGVubWVkZSBtZXlkYW5hIGdlbGl5b3IuIEJpciBrb21wdWxzaXlvbmRhbiBzb25yYSBkacSfZXJsZXJpbmkgdGV0aWtsZW1leWkgw7ZubGVtZWsgacOnaW4gYXJhIHRla25pa2xlciBrdWxsYW5hYmlsaXJzaW5pei4nLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICd0ZW1wb3JhbCcsXG4gICAgICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IHBhdHRlcm4uY29uZmlkZW5jZSxcbiAgICAgICAgICAgIGRhdGE6IHsgY2x1c3RlckNvdW50OiBwYXR0ZXJuLmNsdXN0ZXJzLmxlbmd0aCB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vb2RfdHJlbmQnOlxuICAgICAgICAgIGlmIChwYXR0ZXJuLmRpcmVjdGlvbiA9PT0gJ2ltcHJvdmluZycpIHtcbiAgICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgICB0ZXh0OiAnUnVoIGhhbGluaXogc29uIHphbWFubGFyZGEgaXlpbGXFn21lIGXEn2lsaW1pbmRlISBCdSBwb3ppdGlmIHRyZW5kaSBzw7xyZMO8cm1leWUgb2Rha2xhbsSxbi4nLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogJ3Byb2dyZXNzJyxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgICAgICAgICAgYWN0aW9uYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgIGNvbmZpZGVuY2U6IHBhdHRlcm4uY29uZmlkZW5jZSxcbiAgICAgICAgICAgICAgZGF0YTogeyB0cmVuZDogcGF0dGVybi5kaXJlY3Rpb24sIHN0cmVuZ3RoOiBwYXR0ZXJuLnN0cmVuZ3RoIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGF0dGVybi5kaXJlY3Rpb24gPT09ICdkZWNsaW5pbmcnKSB7XG4gICAgICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICAgICAgdGV4dDogJ1J1aCBoYWxpbml6ZGUgZMO8xZ/DvMWfIGfDtnpsZW5peW9yLiBEZXN0ZWsgc3RyYXRlamlsZXJpbml6aSBkZXZyZXllIHNva21hayBpw6dpbiB1eWd1biBiaXIgemFtYW4gb2xhYmlsaXIuJyxcbiAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdhbGVydCcsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgICAgICAgIGFjdGlvbmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGNvbmZpZGVuY2U6IHBhdHRlcm4uY29uZmlkZW5jZSxcbiAgICAgICAgICAgICAgZGF0YTogeyB0cmVuZDogcGF0dGVybi5kaXJlY3Rpb24sIHN0cmVuZ3RoOiBwYXR0ZXJuLnN0cmVuZ3RoIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGhlcmFweV9wcm9ncmVzcyc6XG4gICAgICAgICAgaWYgKHBhdHRlcm4uZGlyZWN0aW9uID09PSAnaW1wcm92aW5nJykge1xuICAgICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICAgIHRleHQ6ICdUZXJhcGkgc2VhbnNsYXLEsW7EsXpkYSBpbGVybGVtZSBrYXlkZWRpeW9yc3VudXohIE1ldmN1dCB5YWtsYcWfxLFtxLFuxLF6xLEgc8O8cmTDvHLDvG4uJyxcbiAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdwcm9ncmVzcycsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgICAgICAgIGFjdGlvbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICBjb25maWRlbmNlOiBwYXR0ZXJuLmNvbmZpZGVuY2UsXG4gICAgICAgICAgICAgIGRhdGE6IHsgZGlyZWN0aW9uOiBwYXR0ZXJuLmRpcmVjdGlvbiwgY29uc2lzdGVuY3k6IHBhdHRlcm4uY29uc2lzdGVuY3kgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBpbnNpZ2h0cztcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVCZWhhdmlvcmFsSW5zaWdodHMoYmVoYXZpb3JhbFBhdHRlcm5zOiBhbnlbXSk6IGFueVtdIHtcbiAgICBjb25zdCBpbnNpZ2h0cyA9IFtdO1xuICAgIFxuICAgIGJlaGF2aW9yYWxQYXR0ZXJucy5mb3JFYWNoKHBhdHRlcm4gPT4ge1xuICAgICAgc3dpdGNoIChwYXR0ZXJuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZG9taW5hbnRfY2F0ZWdvcnknOlxuICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgdGV4dDogYEtvbXB1bHNpeW9ubGFyxLFuxLF6xLFuICUke3BhdHRlcm4ucGVyY2VudGFnZX0naSAke3BhdHRlcm4uY2F0ZWdvcnl9IGthdGVnb3Jpc2luZGUuIEJ1IGFsYW5hIMO2emVsIG3DvGRhaGFsZWxlciBnZWxpxZ90aXJlYmlsaXJzaW5pei5gLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICdiZWhhdmlvcmFsJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybi5jb25maWRlbmNlLFxuICAgICAgICAgICAgZGF0YTogeyBjYXRlZ29yeTogcGF0dGVybi5jYXRlZ29yeSwgcGVyY2VudGFnZTogcGF0dGVybi5wZXJjZW50YWdlIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZHVyYXRpb25fcGF0dGVybic6XG4gICAgICAgICAgaWYgKHBhdHRlcm4udHJlbmQgPT09ICdpbmNyZWFzaW5nJykge1xuICAgICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICAgIHRleHQ6IGBLb21wdWxzaXlvbiBzw7xyZWxlcmluaXogYXJ0xLHFnyBlxJ9pbGltaW5kZSAob3J0YWxhbWEgJHtwYXR0ZXJuLmF2ZXJhZ2VEdXJhdGlvbn0gZGFraWthKS4gRHVyZHVybWEgc3RyYXRlamlsZXJpbml6aSBnw7Z6ZGVuIGdlw6dpcmluLmAsXG4gICAgICAgICAgICAgIGNhdGVnb3J5OiAnYmVoYXZpb3JhbCcsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybi5jb25maWRlbmNlLFxuICAgICAgICAgICAgICBkYXRhOiB7IGF2ZXJhZ2VEdXJhdGlvbjogcGF0dGVybi5hdmVyYWdlRHVyYXRpb24sIHRyZW5kOiBwYXR0ZXJuLnRyZW5kIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGF0dGVybi50cmVuZCA9PT0gJ2RlY3JlYXNpbmcnKSB7XG4gICAgICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICAgICAgdGV4dDogYEtvbXB1bHNpeW9uIHPDvHJlbGVyaW5peiBhemFsxLF5b3IhIEJ1IG9sdW1sdSBnZWxpxZ9pbWkgc8O8cmTDvHLDvG4uYCxcbiAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdwcm9ncmVzcycsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgICAgICAgYWN0aW9uYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgIGNvbmZpZGVuY2U6IHBhdHRlcm4uY29uZmlkZW5jZSxcbiAgICAgICAgICAgICAgZGF0YTogeyBhdmVyYWdlRHVyYXRpb246IHBhdHRlcm4uYXZlcmFnZUR1cmF0aW9uLCB0cmVuZDogcGF0dGVybi50cmVuZCB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NvbXB1bHNpb25faW5kaWNhdG9yJzpcbiAgICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICAgIHRleHQ6IGAke3BhdHRlcm4uY2F0ZWdvcnl9IHRpcGkga29tcHVsc2l5b25sYXJhIHnDtm5lbGlrIGJlbGlydGlsZXIgdGVzcGl0IGVkaWxkaS4gQnUgYWxhbmEgw7Z6ZWwgZWd6ZXJzaXpsZXIgZmF5ZGFsxLEgb2xhYmlsaXIuYCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnYmVoYXZpb3JhbCcsXG4gICAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybi5jb25maWRlbmNlLFxuICAgICAgICAgICAgZGF0YTogeyBjYXRlZ29yeTogcGF0dGVybi5jYXRlZ29yeSwgaW50ZW5zaXR5OiBwYXR0ZXJuLmludGVuc2l0eSB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGluc2lnaHRzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVRyaWdnZXJJbnNpZ2h0cyh0cmlnZ2VyUGF0dGVybnM6IGFueVtdKTogYW55W10ge1xuICAgIGNvbnN0IGluc2lnaHRzID0gW107XG4gICAgXG4gICAgdHJpZ2dlclBhdHRlcm5zLmZvckVhY2gocGF0dGVybiA9PiB7XG4gICAgICBzd2l0Y2ggKHBhdHRlcm4udHlwZSkge1xuICAgICAgICBjYXNlICdzaXR1YXRpb25hbCc6XG4gICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiBgXCIke3BhdHRlcm4uZGVzY3JpcHRpb259XCIgc8Sxa2zEsWtsYSB0ZXRpa2xleWljaSBvbHV5b3IuIEJ1IGR1cnVtbGFyIGnDp2luIMO2bmNlZGVuIHN0cmF0ZWppbGVyIGhhesSxcmxheWFiaWxpcnNpbml6LmAsXG4gICAgICAgICAgICBjYXRlZ29yeTogJ3RyaWdnZXInLFxuICAgICAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IHBhdHRlcm4uY29uZmlkZW5jZSxcbiAgICAgICAgICAgIGRhdGE6IHsgdHJpZ2dlcjogcGF0dGVybi5kZXNjcmlwdGlvbiwgZnJlcXVlbmN5OiBwYXR0ZXJuLmZyZXF1ZW5jeSB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Vtb3Rpb25hbCc6XG4gICAgICAgICAgY29uc3QgZW1vdGlvblR1cmtpc2ggPSB7XG4gICAgICAgICAgICAnYW54aWV0eSc6ICdrYXlnxLEnLFxuICAgICAgICAgICAgJ3N0cmVzcyc6ICdzdHJlcycsXG4gICAgICAgICAgICAncGVyZmVjdGlvbmlzbSc6ICdtw7xrZW1tZWxpeWV0w6dpbGlrJ1xuICAgICAgICAgIH07XG4gICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiBgJHtlbW90aW9uVHVya2lzaFtwYXR0ZXJuLnRyaWdnZXJdIHx8IHBhdHRlcm4udHJpZ2dlcn0gZHVydW1sYXLEsW5kYSBrb21wdWxzaXlvbmxhciB0ZXRpa2xlbml5b3IuIER1eWd1IGTDvHplbmxlbWUgdGVrbmlrbGVyaW5pIGRldnJleWUgYWzEsW4uYCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndHJpZ2dlcicsXG4gICAgICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IHBhdHRlcm4uY29uZmlkZW5jZSxcbiAgICAgICAgICAgIGRhdGE6IHsgZW1vdGlvbmFsVHJpZ2dlcjogcGF0dGVybi50cmlnZ2VyIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbG9jYXRpb24nOlxuICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgdGV4dDogYCR7cGF0dGVybi50cmlnZ2VyfSBrb251bXVuZGEga29tcHVsc2l5b25sYXIgc8Sxa2zEsWtsYSBnw7Zyw7xsw7x5b3IuIEJ1IG9ydGFtZGEgw7Z6ZWwgw7ZubGVtbGVyIGFsYWJpbGlyc2luaXouYCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndHJpZ2dlcicsXG4gICAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybi5jb25maWRlbmNlLFxuICAgICAgICAgICAgZGF0YTogeyBsb2NhdGlvbjogcGF0dGVybi50cmlnZ2VyLCBmcmVxdWVuY3k6IHBhdHRlcm4uZnJlcXVlbmN5IH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gaW5zaWdodHM7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlU2V2ZXJpdHlJbnNpZ2h0cyhzZXZlcml0eVBhdHRlcm5zOiBhbnlbXSk6IGFueVtdIHtcbiAgICBjb25zdCBpbnNpZ2h0cyA9IFtdO1xuICAgIFxuICAgIHNldmVyaXR5UGF0dGVybnMuZm9yRWFjaChwYXR0ZXJuID0+IHtcbiAgICAgIGlmIChwYXR0ZXJuLnR5cGUgPT09ICdzZXZlcml0eV90cmVuZCcpIHtcbiAgICAgICAgc3dpdGNoIChwYXR0ZXJuLmRpcmVjdGlvbikge1xuICAgICAgICAgIGNhc2UgJ2ltcHJvdmluZyc6XG4gICAgICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICAgICAgbWV0cmljOiAnc2V2ZXJpdHlfdHJlbmQnLFxuICAgICAgICAgICAgICB2YWx1ZTogcGF0dGVybi5yZWNlbnRBdmVyYWdlLFxuICAgICAgICAgICAgICBjaGFuZ2U6IC1wYXR0ZXJuLnN0cmVuZ3RoLFxuICAgICAgICAgICAgICBpbnRlcnByZXRhdGlvbjogYMWeaWRkZXQgZMO8emV5aW5kZSBpeWlsZcWfbWUgdmFyISBTb24gdmVyaWxlciAke3BhdHRlcm4ucmVjZW50QXZlcmFnZS50b0ZpeGVkKDEpfSBvcnRhbGFtYSBnw7ZzdGVyaXlvci5gLFxuICAgICAgICAgICAgICBjb25maWRlbmNlOiBwYXR0ZXJuLmNvbmZpZGVuY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnd29yc2VuaW5nJzpcbiAgICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgICBtZXRyaWM6ICdzZXZlcml0eV90cmVuZCcsXG4gICAgICAgICAgICAgIHZhbHVlOiBwYXR0ZXJuLnJlY2VudEF2ZXJhZ2UsXG4gICAgICAgICAgICAgIGNoYW5nZTogcGF0dGVybi5zdHJlbmd0aCxcbiAgICAgICAgICAgICAgaW50ZXJwcmV0YXRpb246IGDFnmlkZGV0IGTDvHpleWluZGUgYXJ0xLHFnyBnw7Z6bGVuaXlvci4gRGVzdGVrIHN0cmF0ZWppbGVyaW5pIGRldnJleWUgYWxtYSB6YW1hbsSxLmAsXG4gICAgICAgICAgICAgIGNvbmZpZGVuY2U6IHBhdHRlcm4uY29uZmlkZW5jZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzdGFibGUnOlxuICAgICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICAgIG1ldHJpYzogJ3NldmVyaXR5X3RyZW5kJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHBhdHRlcm4ucmVjZW50QXZlcmFnZSxcbiAgICAgICAgICAgICAgY2hhbmdlOiAwLFxuICAgICAgICAgICAgICBpbnRlcnByZXRhdGlvbjogJ8WeaWRkZXQgZMO8emV5aSBzdGFiaWwgc2V5cmVkaXlvci4nLFxuICAgICAgICAgICAgICBjb25maWRlbmNlOiBwYXR0ZXJuLmNvbmZpZGVuY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gaW5zaWdodHM7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlRW52aXJvbm1lbnRhbEluc2lnaHRzKGVudmlyb25tZW50YWxQYXR0ZXJuczogYW55W10pOiBhbnlbXSB7XG4gICAgY29uc3QgaW5zaWdodHMgPSBbXTtcbiAgICBcbiAgICBlbnZpcm9ubWVudGFsUGF0dGVybnMuZm9yRWFjaChwYXR0ZXJuID0+IHtcbiAgICAgIGlmIChwYXR0ZXJuLnR5cGUgPT09ICdsb2NhdGlvbicpIHtcbiAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgdGV4dDogYCR7cGF0dGVybi50cmlnZ2VyfSBrb251bXVuZGEga29tcHVsc2l5b25sYXIgc8SxayBnw7Zyw7xsw7x5b3IuIEJ1IG9ydGFtZGEgdGV0aWsgZmFrdMO2cmxlcmluaSBiZWxpcmxleWlwIMO2bmxlbSBhbG1hecSxIGTDvMWfw7xuw7xuLmAsXG4gICAgICAgICAgY2F0ZWdvcnk6ICdlbnZpcm9ubWVudGFsJyxcbiAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWRlbmNlOiBwYXR0ZXJuLmNvbmZpZGVuY2UsXG4gICAgICAgICAgZGF0YTogeyBsb2NhdGlvbjogcGF0dGVybi50cmlnZ2VyLCBmcmVxdWVuY3k6IHBhdHRlcm4uZnJlcXVlbmN5IH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGluc2lnaHRzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVByb2dyZXNzSW5zaWdodHMocGF0dGVybnM6IGFueSwgaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogYW55W10ge1xuICAgIGNvbnN0IGluc2lnaHRzID0gW107XG4gICAgXG4gICAgLy8gRGF0YSByaWNobmVzcyBpbnNpZ2h0XG4gICAgaWYgKHBhdHRlcm5zLm1ldGFkYXRhICYmIHBhdHRlcm5zLm1ldGFkYXRhLmRhdGFQb2ludHMgPiAxMCkge1xuICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgIG1ldHJpYzogJ2RhdGFfcmljaG5lc3MnLFxuICAgICAgICB2YWx1ZTogcGF0dGVybnMubWV0YWRhdGEuZGF0YVBvaW50cyxcbiAgICAgICAgY2hhbmdlOiAwLFxuICAgICAgICBpbnRlcnByZXRhdGlvbjogYCR7cGF0dGVybnMubWV0YWRhdGEuZGF0YVBvaW50c30gdmVyaSBub2t0YXPEsSBpbGUgZ8O8w6dsw7wgYmlyIGFuYWxpeiB5YXBhYmlsaXlvcnV6LmAsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuOVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFBhdHRlcm4gZGV0ZWN0aW9uIGNvbmZpZGVuY2VcbiAgICBpZiAocGF0dGVybnMubWV0YWRhdGEgJiYgcGF0dGVybnMubWV0YWRhdGEuY29uZmlkZW5jZSA+IDAuNykge1xuICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgIG1ldHJpYzogJ3BhdHRlcm5fY29uZmlkZW5jZScsXG4gICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHBhdHRlcm5zLm1ldGFkYXRhLmNvbmZpZGVuY2UgKiAxMDApLFxuICAgICAgICBjaGFuZ2U6IDAsXG4gICAgICAgIGludGVycHJldGF0aW9uOiBgS2FsxLFwIHRlc3BpdGluZGUgJSR7TWF0aC5yb3VuZChwYXR0ZXJucy5tZXRhZGF0YS5jb25maWRlbmNlICogMTAwKX0gZ8O8dmVuIGTDvHpleWkuYCxcbiAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybnMubWV0YWRhdGEuY29uZmlkZW5jZVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBpbnNpZ2h0cztcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVNb3RpdmF0aW9uYWxJbnNpZ2h0cyhwYXR0ZXJuczogYW55KTogYW55W10ge1xuICAgIGNvbnN0IGluc2lnaHRzID0gW107XG4gICAgXG4gICAgLy8gRW5jb3VyYWdlIHBhdHRlcm4gYXdhcmVuZXNzXG4gICAgaWYgKHBhdHRlcm5zLnRlbXBvcmFsICYmIHBhdHRlcm5zLnRlbXBvcmFsLmxlbmd0aCA+IDApIHtcbiAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICB0ZXh0OiAnVmVyaWxlcmluaXppIGFuYWxpeiBldG1laywga2VuZGkga2FsxLFwbGFyxLFuxLF6xLEgYW5sYW1hbsSxesSxIHNhxJ9sxLF5b3IuIEJ1IGZhcmvEsW5kYWzEsWsgaXlpbGXFn21lbmluIGlsayBhZMSxbcSxZMSxci4nLFxuICAgICAgICBjYXRlZ29yeTogJ21vdGl2YXRpb25hbCcsXG4gICAgICAgIHByaW9yaXR5OiAnbG93JyxcbiAgICAgICAgYWN0aW9uYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuOFxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEVuY291cmFnZSBjb25zaXN0ZW5jeVxuICAgIGlmIChwYXR0ZXJucy5tZXRhZGF0YSAmJiBwYXR0ZXJucy5tZXRhZGF0YS5kYXRhUG9pbnRzID49IDUpIHtcbiAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICB0ZXh0OiAnRMO8emVubGkga2F5xLF0IHR1dG1heWEgZGV2YW0gZWRpeW9yc3VudXouIEJ1IHR1dGFybMSxbMSxayB1enVuIHZhZGVsaSBiYcWfYXLEsW7EsW4gYW5haHRhcsSxIScsXG4gICAgICAgIGNhdGVnb3J5OiAnbW90aXZhdGlvbmFsJyxcbiAgICAgICAgcHJpb3JpdHk6ICdsb3cnLFxuICAgICAgICBhY3Rpb25hYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlkZW5jZTogMC45XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGluc2lnaHRzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUNyb3NzUGF0dGVybkluc2lnaHRzKHBhdHRlcm5zOiBhbnkpOiBhbnlbXSB7XG4gICAgY29uc3QgaW5zaWdodHMgPSBbXTtcbiAgICBcbiAgICAvLyBDcm9zcy1wYXR0ZXJuIGFuYWx5c2lzICh0ZW1wb3JhbCArIGJlaGF2aW9yYWwpXG4gICAgaWYgKHBhdHRlcm5zLnRlbXBvcmFsICYmIHBhdHRlcm5zLmJlaGF2aW9yYWwgJiYgcGF0dGVybnMudGVtcG9yYWwubGVuZ3RoID4gMCAmJiBwYXR0ZXJucy5iZWhhdmlvcmFsLmxlbmd0aCA+IDApIHtcbiAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICB0ZXh0OiAnWmFtYW4ga2FsxLFwbGFyxLFuxLF6IGlsZSBkYXZyYW7EscWfIMO2csO8bnTDvGxlcmluaXogYXJhc8SxbmRhIGJhxJ9sYW50xLEgdmFyLiBCdSBpbGnFn2tpeWkgYW5sYXlhcmFrIGRhaGEgZXRraWxpIHN0cmF0ZWppbGVyIGdlbGnFn3RpcmViaWxpcnNpbml6LicsXG4gICAgICAgIGNhdGVnb3J5OiAnY29tcGxleF9wYXR0ZXJuJyxcbiAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICBjb25maWRlbmNlOiAwLjcsXG4gICAgICAgIGRhdGE6IHsgXG4gICAgICAgICAgdGVtcG9yYWxQYXR0ZXJuczogcGF0dGVybnMudGVtcG9yYWwubGVuZ3RoLCBcbiAgICAgICAgICBiZWhhdmlvcmFsUGF0dGVybnM6IHBhdHRlcm5zLmJlaGF2aW9yYWwubGVuZ3RoIFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gSGlnaCBzZXZlcml0eSB3aXRoIHN0cm9uZyBwYXR0ZXJuc1xuICAgIGlmIChwYXR0ZXJucy5zZXZlcml0eSAmJiBwYXR0ZXJucy50ZW1wb3JhbCAmJiBwYXR0ZXJucy5zZXZlcml0eS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBoYXNTZXZlcmVQYXR0ZXJuID0gcGF0dGVybnMuc2V2ZXJpdHkuc29tZShzID0+IHMuZGlyZWN0aW9uID09PSAnd29yc2VuaW5nJyk7XG4gICAgICBpZiAoaGFzU2V2ZXJlUGF0dGVybikge1xuICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiAnxZ5pZGRldCBhcnTEscWfxLEgaWxlIHphbWFuIGthbMSxcGxhcsSxIGJpcmxlxZ90acSfaW5kZSwgw7ZuZ8O2csO8bMO8IG3DvGRhaGFsZSBwbGFubGFyxLEgw7ZuZW0ga2F6YW7EsXlvci4nLFxuICAgICAgICAgIGNhdGVnb3J5OiAnc3RyYXRlZ2ljJyxcbiAgICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICAgIGFjdGlvbmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlkZW5jZTogMC44XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gaW5zaWdodHM7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUluc2lnaHRzTWV0YWRhdGEoaW5zaWdodHM6IGFueSk6IGFueSB7XG4gICAgY29uc3QgYWxsSW5zaWdodHMgPSBbXG4gICAgICAuLi5pbnNpZ2h0cy50aGVyYXBldXRpYyxcbiAgICAgIC4uLmluc2lnaHRzLnByb2dyZXNzLFxuICAgICAgLi4uaW5zaWdodHMuYmVoYXZpb3JhbCxcbiAgICAgIC4uLmluc2lnaHRzLm1vdGl2YXRpb25hbFxuICAgIF07XG4gICAgXG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IFsuLi5uZXcgU2V0KGFsbEluc2lnaHRzLm1hcChpbnNpZ2h0ID0+IGluc2lnaHQuY2F0ZWdvcnkgfHwgJ3Vua25vd24nKSldO1xuICAgIGNvbnN0IGF2Z0NvbmZpZGVuY2UgPSBhbGxJbnNpZ2h0cy5yZWR1Y2UoKHN1bSwgaW5zaWdodCkgPT4gXG4gICAgICBzdW0gKyAoaW5zaWdodC5jb25maWRlbmNlIHx8IDAuNSksIDApIC8gYWxsSW5zaWdodHMubGVuZ3RoO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBnZW5lcmF0ZWRBdDogRGF0ZS5ub3coKSxcbiAgICAgIGNvbmZpZGVuY2U6IGF2Z0NvbmZpZGVuY2UgfHwgMCxcbiAgICAgIHRvdGFsSW5zaWdodHM6IGFsbEluc2lnaHRzLmxlbmd0aCxcbiAgICAgIGNhdGVnb3JpZXNcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBwcmlvcml0aXplSW5zaWdodHMoaW5zaWdodHM6IGFueVtdKTogYW55W10ge1xuICAgIGNvbnN0IHByaW9yaXR5T3JkZXIgPSB7ICdoaWdoJzogMywgJ21lZGl1bSc6IDIsICdsb3cnOiAxIH07XG4gICAgXG4gICAgcmV0dXJuIGluc2lnaHRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IGFQcmlvcml0eSA9IHByaW9yaXR5T3JkZXJbYS5wcmlvcml0eV0gfHwgMDtcbiAgICAgIGNvbnN0IGJQcmlvcml0eSA9IHByaW9yaXR5T3JkZXJbYi5wcmlvcml0eV0gfHwgMDtcbiAgICAgIFxuICAgICAgaWYgKGFQcmlvcml0eSAhPT0gYlByaW9yaXR5KSB7XG4gICAgICAgIHJldHVybiBiUHJpb3JpdHkgLSBhUHJpb3JpdHk7IC8vIEhpZ2ggcHJpb3JpdHkgZmlyc3RcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gSWYgc2FtZSBwcmlvcml0eSwgc29ydCBieSBjb25maWRlbmNlXG4gICAgICByZXR1cm4gKGIuY29uZmlkZW5jZSB8fCAwKSAtIChhLmNvbmZpZGVuY2UgfHwgMCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgYnJlYXRod29yayBhbmFseXNpcyBzaG91bGQgcnVuXG4gICAqL1xuICBwcml2YXRlIHNob3VsZFJ1bkJyZWF0aHdvcmsoaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogYm9vbGVhbiB7XG4gICAgLy8gQWx3YXlzIGNoZWNrIGZvciBicmVhdGh3b3JrIG9wcG9ydHVuaXRpZXNcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFByb2Nlc3MgY29tcHJlaGVuc2l2ZSBicmVhdGh3b3JrIGFuYWx5c2lzIHdpdGggbmV3IHNlcnZpY2UgaW50ZWdyYXRpb25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgcHJvY2Vzc0JyZWF0aHdvcmtBbmFseXNpcyhpbnB1dDogVW5pZmllZFBpcGVsaW5lSW5wdXQpOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBFeHRyYWN0IGNvbnRleHQgZm9yIGJyZWF0aHdvcmsgc3VnZ2VzdGlvblxuICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgbW9vZFNjb3JlOiB0aGlzLmV4dHJhY3RNb29kRnJvbUlucHV0KGlucHV0KSxcbiAgICAgICAgYW54aWV0eUxldmVsOiB0aGlzLmV4dHJhY3RBbnhpZXR5RnJvbUlucHV0KGlucHV0KSxcbiAgICAgICAgcmVjZW50Q29tcHVsc2lvbnM6IHRoaXMuZXh0cmFjdFJlY2VudENvbXB1bHNpb25zKGlucHV0KSxcbiAgICAgICAgdXNlcklucHV0OiB0eXBlb2YgaW5wdXQuY29udGVudCA9PT0gJ3N0cmluZycgPyBpbnB1dC5jb250ZW50IDogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBVc2UgbmV3IGJyZWF0aHdvcmsgc3VnZ2VzdGlvbiBzZXJ2aWNlXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGJyZWF0aHdvcmtTdWdnZXN0aW9uU2VydmljZSB9ID0gYXdhaXQgaW1wb3J0KCcuLi9zZXJ2aWNlcy9icmVhdGh3b3JrU3VnZ2VzdGlvblNlcnZpY2UnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb24gPSBhd2FpdCBicmVhdGh3b3JrU3VnZ2VzdGlvblNlcnZpY2UuZ2VuZXJhdGVTdWdnZXN0aW9uKHtcbiAgICAgICAgICB1c2VySWQ6IGlucHV0LnVzZXJJZCxcbiAgICAgICAgICAuLi5jb250ZXh0LFxuICAgICAgICAgIGN1cnJlbnRUaW1lOiBuZXcgRGF0ZSgpXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKHN1Z2dlc3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFzQnJlYXRod29ya1N1Z2dlc3Rpb246IHRydWUsXG4gICAgICAgICAgICBzdWdnZXN0aW9uOiB7XG4gICAgICAgICAgICAgIGlkOiBzdWdnZXN0aW9uLmlkLFxuICAgICAgICAgICAgICB0cmlnZ2VyOiBzdWdnZXN0aW9uLnRyaWdnZXIsXG4gICAgICAgICAgICAgIHByb3RvY29sOiBzdWdnZXN0aW9uLnByb3RvY29sLFxuICAgICAgICAgICAgICB1cmdlbmN5OiBzdWdnZXN0aW9uLnVyZ2VuY3ksXG4gICAgICAgICAgICAgIGN1c3RvbWl6YXRpb246IHN1Z2dlc3Rpb24uY3VzdG9taXphdGlvbixcbiAgICAgICAgICAgICAgdGltaW5nOiBzdWdnZXN0aW9uLnRpbWluZyxcbiAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBjb25maWRlbmNlOiBzdWdnZXN0aW9uLnRyaWdnZXIuY29uZmlkZW5jZSxcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICdhaV9icmVhdGh3b3JrX3NlcnZpY2UnLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlZEF0OiBzdWdnZXN0aW9uLm1ldGFkYXRhLmdlbmVyYXRlZEF0LFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBzdWdnZXN0aW9uLm1ldGFkYXRhLnByaW9yaXR5XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmhhbmNlbWVudDoge1xuICAgICAgICAgICAgICBjb250ZXh0dWFsUmVsZXZhbmNlOiB0aGlzLmNhbGN1bGF0ZUJyZWF0aHdvcmtSZWxldmFuY2UoY29udGV4dCksXG4gICAgICAgICAgICAgIGZhbGxiYWNrUHJvdG9jb2xzOiBzdWdnZXN0aW9uLm1ldGFkYXRhLmZhbGxiYWNrT3B0aW9ucyxcbiAgICAgICAgICAgICAgYWRhcHRhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB1c2VyUHJlZmVyZW5jZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgdXJnZW5jeUFkanVzdGVkOiBzdWdnZXN0aW9uLnVyZ2VuY3kgIT09ICdsb3cnLFxuICAgICAgICAgICAgICAgIHByb3RvY29sQ3VzdG9taXplZDogc3VnZ2VzdGlvbi5wcm90b2NvbC5uYW1lICE9PSAnYm94J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH0gY2F0Y2ggKHNlcnZpY2VFcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0JyZWF0aHdvcmsgc2VydmljZSB1bmF2YWlsYWJsZSwgdXNpbmcgZmFsbGJhY2s6Jywgc2VydmljZUVycm9yKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIGVuaGFuY2VkIGhldXJpc3RpYyBhbmFseXNpc1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzQnJlYXRod29ya0hldXJpc3RpY3MoY29udGV4dCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB7IGhhc0JyZWF0aHdvcmtTdWdnZXN0aW9uOiBmYWxzZSB9O1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JyZWF0aHdvcmsgYW5hbHlzaXMgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IGhhc0JyZWF0aHdvcmtTdWdnZXN0aW9uOiBmYWxzZSwgZXJyb3I6ICdhbmFseXNpc19mYWlsZWQnIH07XG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICogRmFsbGJhY2sgYnJlYXRod29yayBhbmFseXNpcyB1c2luZyBoZXVyaXN0aWNzXG4gICAqL1xuICBwcml2YXRlIHByb2Nlc3NCcmVhdGh3b3JrSGV1cmlzdGljcyhjb250ZXh0OiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IGFueGlldHlMZXZlbCA9IGNvbnRleHQuYW54aWV0eUxldmVsIHx8IDU7XG4gICAgY29uc3QgbW9vZFNjb3JlID0gY29udGV4dC5tb29kU2NvcmU7XG4gICAgY29uc3QgcmVjZW50Q29tcHVsc2lvbnMgPSBjb250ZXh0LnJlY2VudENvbXB1bHNpb25zIHx8IDA7XG4gICAgXG4gICAgLy8gRGV0ZXJtaW5lIGlmIGJyZWF0aHdvcmsgaXMgbmVlZGVkXG4gICAgbGV0IG5lZWRzQnJlYXRod29yayA9IGZhbHNlO1xuICAgIGxldCB1cmdlbmN5OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnID0gJ2xvdyc7XG4gICAgbGV0IHRyaWdnZXJUeXBlID0gJ21haW50ZW5hbmNlJztcbiAgICBcbiAgICBpZiAoYW54aWV0eUxldmVsID49IDgpIHtcbiAgICAgIG5lZWRzQnJlYXRod29yayA9IHRydWU7XG4gICAgICB1cmdlbmN5ID0gJ2hpZ2gnO1xuICAgICAgdHJpZ2dlclR5cGUgPSAnYW54aWV0eSc7XG4gICAgfSBlbHNlIGlmIChhbnhpZXR5TGV2ZWwgPj0gNikge1xuICAgICAgbmVlZHNCcmVhdGh3b3JrID0gdHJ1ZTtcbiAgICAgIHVyZ2VuY3kgPSAnbWVkaXVtJztcbiAgICAgIHRyaWdnZXJUeXBlID0gJ2FueGlldHknO1xuICAgIH0gZWxzZSBpZiAobW9vZFNjb3JlICYmIG1vb2RTY29yZSA8PSA0KSB7XG4gICAgICBuZWVkc0JyZWF0aHdvcmsgPSB0cnVlO1xuICAgICAgdXJnZW5jeSA9ICdtZWRpdW0nO1xuICAgICAgdHJpZ2dlclR5cGUgPSAnbG93X21vb2QnO1xuICAgIH0gZWxzZSBpZiAocmVjZW50Q29tcHVsc2lvbnMgPj0gMikge1xuICAgICAgbmVlZHNCcmVhdGh3b3JrID0gdHJ1ZTtcbiAgICAgIHVyZ2VuY3kgPSAnbWVkaXVtJztcbiAgICAgIHRyaWdnZXJUeXBlID0gJ3Bvc3RfY29tcHVsc2lvbic7XG4gICAgfVxuICAgIFxuICAgIGlmICghbmVlZHNCcmVhdGh3b3JrKSB7XG4gICAgICByZXR1cm4geyBoYXNCcmVhdGh3b3JrU3VnZ2VzdGlvbjogZmFsc2UgfTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2VsZWN0IHByb3RvY29sIGJhc2VkIG9uIGNvbnRleHRcbiAgICBsZXQgcHJvdG9jb2wgPSAnYm94JztcbiAgICBpZiAoYW54aWV0eUxldmVsID49IDgpIHByb3RvY29sID0gJ3F1aWNrX2NhbG0nO1xuICAgIGVsc2UgaWYgKGFueGlldHlMZXZlbCA+PSA2KSBwcm90b2NvbCA9ICc0LTctOCc7XG4gICAgZWxzZSBpZiAobW9vZFNjb3JlICYmIG1vb2RTY29yZSA8PSAzKSBwcm90b2NvbCA9ICdwYWNlZCc7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc0JyZWF0aHdvcmtTdWdnZXN0aW9uOiB0cnVlLFxuICAgICAgc3VnZ2VzdGlvbjoge1xuICAgICAgICBpZDogYGhldXJpc3RpY18ke0RhdGUubm93KCl9YCxcbiAgICAgICAgdHJpZ2dlcjogeyBcbiAgICAgICAgICB0eXBlOiB0cmlnZ2VyVHlwZSwgXG4gICAgICAgICAgY29uZmlkZW5jZTogYW54aWV0eUxldmVsID49IDcgPyAwLjggOiAwLjYsXG4gICAgICAgICAgY29udGV4dERhdGE6IHsgYW54aWV0eUxldmVsLCBtb29kU2NvcmUsIHJlY2VudENvbXB1bHNpb25zIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJvdG9jb2w6IHsgXG4gICAgICAgICAgbmFtZTogcHJvdG9jb2wsIFxuICAgICAgICAgIGR1cmF0aW9uOiBwcm90b2NvbCA9PT0gJ3F1aWNrX2NhbG0nID8gMTIwIDogMzAwIFxuICAgICAgICB9LFxuICAgICAgICB1cmdlbmN5LFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIGNvbmZpZGVuY2U6IGFueGlldHlMZXZlbCA+PSA3ID8gMC44IDogMC42LFxuICAgICAgICAgIHNvdXJjZTogJ2hldXJpc3RpY19mYWxsYmFjaycsXG4gICAgICAgICAgZ2VuZXJhdGVkQXQ6IERhdGUubm93KClcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVuaGFuY2VtZW50OiB7XG4gICAgICAgIGNvbnRleHR1YWxSZWxldmFuY2U6IHRoaXMuY2FsY3VsYXRlQnJlYXRod29ya1JlbGV2YW5jZShjb250ZXh0KSxcbiAgICAgICAgZmFsbGJhY2tQcm90b2NvbHM6IFsnYm94JywgJ3BhY2VkJ10sXG4gICAgICAgIGFkYXB0YXRpb25zOiB7XG4gICAgICAgICAgdXNlclByZWZlcmVuY2VzOiBmYWxzZSxcbiAgICAgICAgICB1cmdlbmN5QWRqdXN0ZWQ6IHVyZ2VuY3kgIT09ICdsb3cnLFxuICAgICAgICAgIHByb3RvY29sQ3VzdG9taXplZDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgXG4gIHByaXZhdGUgZXh0cmFjdE1vb2RGcm9tSW5wdXQoaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodHlwZW9mIGlucHV0LmNvbnRlbnQgPT09ICdvYmplY3QnICYmIGlucHV0LmNvbnRlbnQubW9vZCkge1xuICAgICAgcmV0dXJuIGlucHV0LmNvbnRlbnQubW9vZDtcbiAgICB9XG4gICAgXG4gICAgaWYgKHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gU2ltcGxlIG1vb2QgZXh0cmFjdGlvbiBmcm9tIHRleHRcbiAgICAgIGNvbnN0IHRleHQgPSBpbnB1dC5jb250ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoL8Onb2suKj8oa8O2dMO8fGJlcmJhdHxtdXRzdXopL2kudGVzdCh0ZXh0KSkgcmV0dXJuIDI7XG4gICAgICBpZiAoL2vDtnTDvHzDvHpnw7xufGtleWlmc2l6L2kudGVzdCh0ZXh0KSkgcmV0dXJuIDQ7XG4gICAgICBpZiAoL2l5aXxnw7x6ZWx8bXV0bHUvaS50ZXN0KHRleHQpKSByZXR1cm4gNztcbiAgICAgIGlmICgvKMOnb2t8YcWfxLFyxLEpLio/KGl5aXxtdXRsdXxoYXJpa2EpL2kudGVzdCh0ZXh0KSkgcmV0dXJuIDk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgXG4gIHByaXZhdGUgZXh0cmFjdEFueGlldHlGcm9tSW5wdXQoaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogbnVtYmVyIHtcbiAgICBpZiAodHlwZW9mIGlucHV0LmNvbnRlbnQgPT09ICdvYmplY3QnICYmIGlucHV0LmNvbnRlbnQuYW54aWV0eSkge1xuICAgICAgcmV0dXJuIGlucHV0LmNvbnRlbnQuYW54aWV0eTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGV4dCA9IGlucHV0LmNvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGxldCBhbnhpZXR5U2NvcmUgPSAwO1xuICAgICAgXG4gICAgICAvLyBIaWdoIGFueGlldHkgaW5kaWNhdG9yc1xuICAgICAgaWYgKC9wYW5pa3xkZWjFn2V0fGtvcmt1bsOnfGRheWFuYW3EsXlvcnVtL2kudGVzdCh0ZXh0KSkgYW54aWV0eVNjb3JlICs9IDQ7XG4gICAgICBpZiAoL2theWfEsXxlbmRpxZ9lfGdlcmdpbi9pLnRlc3QodGV4dCkpIGFueGlldHlTY29yZSArPSAyO1xuICAgICAgaWYgKC8ow6dva3xhxZ/EsXLEsSkuKj8oa2F5Z8SxbMSxfGVuZGnFn2VsaXxnZXJnaW4pL2kudGVzdCh0ZXh0KSkgYW54aWV0eVNjb3JlICs9IDM7XG4gICAgICBpZiAoL25lZmVzLio/YWxhbcSxeW9ydW18w6dhcnDEsW50xLF8dGl0cmVtZS9pLnRlc3QodGV4dCkpIGFueGlldHlTY29yZSArPSAzO1xuICAgICAgXG4gICAgICByZXR1cm4gTWF0aC5taW4oYW54aWV0eVNjb3JlLCAxMCk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiA1OyAvLyBEZWZhdWx0IG5ldXRyYWxcbiAgfVxuICBcbiAgcHJpdmF0ZSBleHRyYWN0UmVjZW50Q29tcHVsc2lvbnMoaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogbnVtYmVyIHtcbiAgICBpZiAodHlwZW9mIGlucHV0LmNvbnRlbnQgPT09ICdvYmplY3QnICYmIGlucHV0LmNvbnRlbnQuY29tcHVsc2lvbnMpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0LmNvbnRlbnQuY29tcHVsc2lvbnMpKSB7XG4gICAgICAgIC8vIENvdW50IHJlY2VudCBjb21wdWxzaW9ucyAobGFzdCAyNCBob3VycylcbiAgICAgICAgY29uc3QgeWVzdGVyZGF5ID0gRGF0ZS5ub3coKSAtICgyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgICAgcmV0dXJuIGlucHV0LmNvbnRlbnQuY29tcHVsc2lvbnMuZmlsdGVyKGMgPT4gXG4gICAgICAgICAgYy50aW1lc3RhbXAgJiYgbmV3IERhdGUoYy50aW1lc3RhbXApLmdldFRpbWUoKSA+IHllc3RlcmRheVxuICAgICAgICApLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gU2ltcGxlIGNvbXB1bHNpb24gaW5kaWNhdG9ycyBmcm9tIHRleHRcbiAgICAgIGNvbnN0IGNvbXB1bHNpb25Xb3JkcyA9IC9rb250cm9sLio/ZXR0aT9tfHRla3Jhci4qP2Jha3Q/xLFtfHnEsWthLio/ZMSxbXx0ZW1pemxlLio/ZGltfHNheS4qP2TEsW0vZ2k7XG4gICAgICBjb25zdCBtYXRjaGVzID0gaW5wdXQuY29udGVudC5tYXRjaChjb21wdWxzaW9uV29yZHMpO1xuICAgICAgcmV0dXJuIG1hdGNoZXMgPyBtYXRjaGVzLmxlbmd0aCA6IDA7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiAwO1xuICB9XG4gIFxuICBwcml2YXRlIGNhbGN1bGF0ZUJyZWF0aHdvcmtSZWxldmFuY2UoY29udGV4dDogYW55KTogbnVtYmVyIHtcbiAgICBsZXQgcmVsZXZhbmNlID0gMC4zOyAvLyBCYXNlIHJlbGV2YW5jZVxuICAgIFxuICAgIGlmIChjb250ZXh0LmFueGlldHlMZXZlbCAmJiBjb250ZXh0LmFueGlldHlMZXZlbCA+PSA2KSByZWxldmFuY2UgKz0gMC40O1xuICAgIGlmIChjb250ZXh0Lm1vb2RTY29yZSAmJiBjb250ZXh0Lm1vb2RTY29yZSA8PSA0KSByZWxldmFuY2UgKz0gMC4zO1xuICAgIGlmIChjb250ZXh0LnJlY2VudENvbXB1bHNpb25zICYmIGNvbnRleHQucmVjZW50Q29tcHVsc2lvbnMgPj0gMSkgcmVsZXZhbmNlICs9IDAuMjtcbiAgICBpZiAoY29udGV4dC51c2VySW5wdXQgJiYgL25lZmVzfHNha2lufHJhaGF0bGF0L2kudGVzdChjb250ZXh0LnVzZXJJbnB1dCkpIHJlbGV2YW5jZSArPSAwLjM7XG4gICAgXG4gICAgcmV0dXJuIE1hdGgubWluKHJlbGV2YW5jZSwgMS4wKTtcbiAgfVxuICBcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBIRUxQRVIgTUVUSE9EU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIFxuICBwcml2YXRlIGV4dHJhY3RUZW1wb3JhbFBhdHRlcm5zKGNvbXB1bHNpb25zOiBhbnlbXSk6IGFueVtdIHtcbiAgICAvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZC9udWxsIGNvbXB1bHNpb25zXG4gICAgaWYgKCFjb21wdWxzaW9ucyB8fCAhQXJyYXkuaXNBcnJheShjb21wdWxzaW9ucykpIHJldHVybiBbXTtcbiAgICBcbiAgICAvLyDwn5qAIFBFUkZPUk1BTkNFIE9QVElNSVpBVElPTjogU2FtcGxlIHJlY2VudCBlbnRyaWVzIG9ubHlcbiAgICAvLyBSZWNlbnQgcGF0dGVybnMgYXJlIG1vcmUgcmVsZXZhbnQgYW5kIHByb2Nlc3NpbmcgaXMgbXVjaCBmYXN0ZXJcbiAgICBjb25zdCBTQU1QTEVfU0laRSA9IDUwOyAvLyBQcm9jZXNzIG1heCA1MCByZWNlbnQgZW50cmllcyBpbnN0ZWFkIG9mIGFsbCAxMDErXG4gICAgY29uc3QgcmVjZW50Q29tcHVsc2lvbnMgPSBjb21wdWxzaW9uc1xuICAgICAgLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGIudGltZXN0YW1wKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLnRpbWVzdGFtcCkuZ2V0VGltZSgpKVxuICAgICAgLnNsaWNlKDAsIFNBTVBMRV9TSVpFKTtcbiAgICBcbiAgICAvLyBHcm91cCBieSBob3VyIG9mIGRheVxuICAgIGNvbnN0IGhvdXJHcm91cHMgPSB7fTtcbiAgICBcbiAgICByZWNlbnRDb21wdWxzaW9ucy5mb3JFYWNoKGMgPT4ge1xuICAgICAgY29uc3QgaG91ciA9IG5ldyBEYXRlKGMudGltZXN0YW1wKS5nZXRIb3VycygpO1xuICAgICAgaG91ckdyb3Vwc1tob3VyXSA9IChob3VyR3JvdXBzW2hvdXJdIHx8IDApICsgMTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBGaW5kIHBlYWsgaG91cnMgd2l0aCBlYXJseSBleGl0XG4gICAgY29uc3QgcGF0dGVybnMgPSBbXTtcbiAgICBjb25zdCBtYXhQYXR0ZXJucyA9IDU7IC8vIExpbWl0IHBhdHRlcm5zIHRvIHByZXZlbnQgb3Zlci1wcm9jZXNzaW5nXG4gICAgXG4gICAgT2JqZWN0LmVudHJpZXMoaG91ckdyb3VwcylcbiAgICAgIC5zb3J0KChbLGFdLCBbLGJdKSA9PiAoYiBhcyBudW1iZXIpIC0gKGEgYXMgbnVtYmVyKSkgLy8gU29ydCBieSBmcmVxdWVuY3lcbiAgICAgIC5mb3JFYWNoKChbaG91ciwgY291bnRdKSA9PiB7XG4gICAgICAgIGlmIChwYXR0ZXJucy5sZW5ndGggPj0gbWF4UGF0dGVybnMpIHJldHVybjsgLy8gRWFybHkgZXhpdFxuICAgICAgICBpZiAoY291bnQgPiAyKSB7XG4gICAgICAgICAgcGF0dGVybnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAncGVha19ob3VyJyxcbiAgICAgICAgICAgIGZyZXF1ZW5jeTogY291bnQgYXMgbnVtYmVyLFxuICAgICAgICAgICAgdGltZU9mRGF5OiBgJHtob3VyfTowMGAsXG4gICAgICAgICAgICB0cmVuZDogJ3N0YWJsZScsXG4gICAgICAgICAgICBzYW1wbGVTaXplOiByZWNlbnRDb21wdWxzaW9ucy5sZW5ndGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHBhdHRlcm5zO1xuICB9XG4gIFxuICBwcml2YXRlIGV4dHJhY3RCZWhhdmlvcmFsUGF0dGVybnMoY29tcHVsc2lvbnM6IGFueVtdKTogYW55W10ge1xuICAgIC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkL251bGwgY29tcHVsc2lvbnNcbiAgICBpZiAoIWNvbXB1bHNpb25zIHx8ICFBcnJheS5pc0FycmF5KGNvbXB1bHNpb25zKSkgcmV0dXJuIFtdO1xuICAgIFxuICAgIC8vIPCfmoAgUEVSRk9STUFOQ0UgT1BUSU1JWkFUSU9OOiBTYW1wbGUgcmVjZW50IGVudHJpZXMgb25seVxuICAgIGNvbnN0IFNBTVBMRV9TSVpFID0gNTA7IC8vIFByb2Nlc3MgbWF4IDUwIHJlY2VudCBlbnRyaWVzIGluc3RlYWQgb2YgYWxsIDEwMStcbiAgICBjb25zdCByZWNlbnRDb21wdWxzaW9ucyA9IGNvbXB1bHNpb25zXG4gICAgICAuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYi50aW1lc3RhbXApLmdldFRpbWUoKSAtIG5ldyBEYXRlKGEudGltZXN0YW1wKS5nZXRUaW1lKCkpXG4gICAgICAuc2xpY2UoMCwgU0FNUExFX1NJWkUpO1xuICAgIFxuICAgIC8vIEdyb3VwIGJ5IHRyaWdnZXJcbiAgICBjb25zdCB0cmlnZ2VyR3JvdXBzID0ge307XG4gICAgXG4gICAgcmVjZW50Q29tcHVsc2lvbnMuZm9yRWFjaChjID0+IHtcbiAgICAgIGNvbnN0IHRyaWdnZXIgPSBjLnRyaWdnZXIgfHwgJ3Vua25vd24nO1xuICAgICAgaWYgKCF0cmlnZ2VyR3JvdXBzW3RyaWdnZXJdKSB7XG4gICAgICAgIHRyaWdnZXJHcm91cHNbdHJpZ2dlcl0gPSB7XG4gICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgdG90YWxTZXZlcml0eTogMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdHJpZ2dlckdyb3Vwc1t0cmlnZ2VyXS5jb3VudCsrO1xuICAgICAgdHJpZ2dlckdyb3Vwc1t0cmlnZ2VyXS50b3RhbFNldmVyaXR5ICs9IHRoaXMuZ2V0Q29tcHVsc2lvblNldmVyaXR5KGMpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIENvbnZlcnQgdG8gcGF0dGVybnMgd2l0aCBlYXJseSBleGl0XG4gICAgY29uc3QgcGF0dGVybnMgPSBbXTtcbiAgICBjb25zdCBtYXhQYXR0ZXJucyA9IDY7IC8vIExpbWl0IHBhdHRlcm5zIHRvIHByZXZlbnQgb3Zlci1wcm9jZXNzaW5nXG4gICAgXG4gICAgT2JqZWN0LmVudHJpZXModHJpZ2dlckdyb3VwcylcbiAgICAgIC5zb3J0KChbLGFdLCBbLGJdKSA9PiAoYiBhcyBhbnkpLmNvdW50IC0gKGEgYXMgYW55KS5jb3VudCkgLy8gU29ydCBieSBmcmVxdWVuY3lcbiAgICAgIC5mb3JFYWNoKChbdHJpZ2dlciwgZGF0YV06IFtzdHJpbmcsIGFueV0pID0+IHtcbiAgICAgICAgaWYgKHBhdHRlcm5zLmxlbmd0aCA+PSBtYXhQYXR0ZXJucykgcmV0dXJuOyAvLyBFYXJseSBleGl0XG4gICAgICAgIGlmIChkYXRhLmNvdW50ID49IDIpIHsgLy8gT25seSBpbmNsdWRlIG1lYW5pbmdmdWwgdHJpZ2dlcnNcbiAgICAgICAgICBwYXR0ZXJucy5wdXNoKHtcbiAgICAgICAgICAgIHRyaWdnZXIsXG4gICAgICAgICAgICByZXNwb25zZTogJ2NvbXB1bHNpb24nLFxuICAgICAgICAgICAgZnJlcXVlbmN5OiBkYXRhLmNvdW50LFxuICAgICAgICAgICAgc2V2ZXJpdHk6IE1hdGgucm91bmQoZGF0YS50b3RhbFNldmVyaXR5IC8gZGF0YS5jb3VudCksXG4gICAgICAgICAgICBzYW1wbGVTaXplOiByZWNlbnRDb21wdWxzaW9ucy5sZW5ndGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHBhdHRlcm5zO1xuICB9XG4gIFxuICBwcml2YXRlIHNob3VsZFJ1bkNCVChpbnB1dDogVW5pZmllZFBpcGVsaW5lSW5wdXQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaW5wdXQudHlwZSA9PT0gJ3ZvaWNlJyB8fCBcbiAgICAgICAgICAgaW5wdXQuY29udGV4dD8uc291cmNlID09PSAnY2J0JyB8fFxuICAgICAgICAgICAodHlwZW9mIGlucHV0LmNvbnRlbnQgPT09ICdzdHJpbmcnICYmIGlucHV0LmNvbnRlbnQubGVuZ3RoID4gNTApO1xuICB9XG4gIFxuICBwcml2YXRlIGdldEVuYWJsZWRNb2R1bGVzKCk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBtb2R1bGVzID0gW107XG4gICAgLy8g4pyFIEZJWEVEOiBVc2UgZGVkaWNhdGVkIHVuaWZpZWQgcGlwZWxpbmUgZmxhZ3MgaW5zdGVhZCBvZiBsZWdhY3kgY29tcG9uZW50IGZsYWdzXG4gICAgaWYgKEZFQVRVUkVfRkxBR1MuaXNFbmFibGVkKCdBSV9VTklGSUVEX1ZPSUNFJykpIG1vZHVsZXMucHVzaCgndm9pY2UnKTtcbiAgICBpZiAoRkVBVFVSRV9GTEFHUy5pc0VuYWJsZWQoJ0FJX1VOSUZJRURfUEFUVEVSTlMnKSkgbW9kdWxlcy5wdXNoKCdwYXR0ZXJucycpO1xuICAgIGlmIChGRUFUVVJFX0ZMQUdTLmlzRW5hYmxlZCgnQUlfVU5JRklFRF9JTlNJR0hUUycpKSBtb2R1bGVzLnB1c2goJ2luc2lnaHRzJyk7XG4gICAgaWYgKEZFQVRVUkVfRkxBR1MuaXNFbmFibGVkKCdBSV9VTklGSUVEX0NCVCcpKSBtb2R1bGVzLnB1c2goJ2NidCcpO1xuICAgIHJldHVybiBtb2R1bGVzO1xuICB9XG4gIFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIENBQ0hFIE1BTkFHRU1FTlRcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBcbiAgcHJpdmF0ZSBnZW5lcmF0ZUNhY2hlS2V5KGlucHV0OiBVbmlmaWVkUGlwZWxpbmVJbnB1dCk6IHN0cmluZyB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHVzZXJJZDogaW5wdXQudXNlcklkLFxuICAgICAgdHlwZTogaW5wdXQudHlwZSxcbiAgICAgIGNvbnRlbnQ6IHR5cGVvZiBpbnB1dC5jb250ZW50ID09PSAnc3RyaW5nJyBcbiAgICAgICAgPyBpbnB1dC5jb250ZW50LnN1YnN0cmluZygwLCAxMDApIFxuICAgICAgICA6IEpTT04uc3RyaW5naWZ5KGlucHV0LmNvbnRlbnQpLnN1YnN0cmluZygwLCAxMDApLFxuICAgICAgc291cmNlOiBpbnB1dC5jb250ZXh0Py5zb3VyY2VcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBgdW5pZmllZDoke2lucHV0LnVzZXJJZH06JHtzaW1wbGVIYXNoKEpTT04uc3RyaW5naWZ5KGRhdGEpKX1gO1xuICB9XG4gIFxuICBwcml2YXRlIGFzeW5jIGdldEZyb21DYWNoZShrZXk6IHN0cmluZyk6IFByb21pc2U8VW5pZmllZFBpcGVsaW5lUmVzdWx0IHwgbnVsbD4ge1xuICAgIC8vIDEuIENoZWNrIGluLW1lbW9yeSBjYWNoZSBmaXJzdCAoZmFzdGVzdClcbiAgICBjb25zdCBtZW1vcnlDYWNoZSA9IHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgXG4gICAgaWYgKG1lbW9yeUNhY2hlKSB7XG4gICAgICBpZiAobWVtb3J5Q2FjaGUuZXhwaXJlcyA8IERhdGUubm93KCkpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIPCfmqsgTkVHQVRJVkUgQ0FDSEUgQllQQVNTOiBTa2lwIGVtcHR5IGluc2lnaHRzIHdpdGggc2hvcnQgVFRMXG4gICAgICAgIGNvbnN0IGluc2lnaHRzQ291bnQgPSB0aGlzLmNvdW50VG90YWxJbnNpZ2h0cyhtZW1vcnlDYWNoZS5yZXN1bHQpO1xuICAgICAgICBjb25zdCByZW1haW5pbmdUVEwgPSBtZW1vcnlDYWNoZS5leHBpcmVzIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgZml2ZU1pbnV0ZXMgPSA1ICogNjAgKiAxMDAwO1xuICAgICAgICBcbiAgICAgICAgaWYgKGluc2lnaHRzQ291bnQgPT09IDAgJiYgcmVtYWluaW5nVFRMIDwgZml2ZU1pbnV0ZXMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+aqyBCeXBhc3NpbmcgbmVnYXRpdmUgY2FjaGU6IGluc2lnaHRzQ291bnQ9JHtpbnNpZ2h0c0NvdW50fSwgcmVtYWluaW5nVFRMPSR7TWF0aC5yb3VuZChyZW1haW5pbmdUVEwvNjAwMDApfW1pbmApO1xuICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgLy8gU2tpcCB0aGlzIGNhY2hlIGVudHJ5IGFuZCBjb250aW51ZSB0byBmcmVzaCBnZW5lcmF0aW9uXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG1lbW9yeUNhY2hlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyAyLiBDaGVjayBTdXBhYmFzZSBjYWNoZSAocGVyc2lzdGVudCwgc2hhcmVkIGFjcm9zcyBkZXZpY2VzKVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdXBhYmFzZUNhY2hlZCA9IGF3YWl0IHRoaXMuZ2V0RnJvbVN1cGFiYXNlQ2FjaGUoa2V5KTtcbiAgICAgIGlmIChzdXBhYmFzZUNhY2hlZCkge1xuICAgICAgICAvLyDwn5qrIE5FR0FUSVZFIENBQ0hFIEJZUEFTUzogQ2hlY2sgZm9yIGVtcHR5IGluc2lnaHRzIGJlZm9yZSByZXN0b3JpbmdcbiAgICAgICAgY29uc3QgaW5zaWdodHNDb3VudCA9IHRoaXMuY291bnRUb3RhbEluc2lnaHRzKHN1cGFiYXNlQ2FjaGVkKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChpbnNpZ2h0c0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYPCfmqsgQnlwYXNzaW5nIG5lZ2F0aXZlIFN1cGFiYXNlIGNhY2hlOiBpbnNpZ2h0c0NvdW50PSR7aW5zaWdodHNDb3VudH1gKTtcbiAgICAgICAgICAvLyBEb24ndCByZXN0b3JlIGVtcHR5IGNhY2hlIHRvIG1lbW9yeSwgY29udGludWUgdG8gZnJlc2ggZ2VuZXJhdGlvblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlc3RvcmUgdG8gbWVtb3J5IGNhY2hlIGZvciBmYXN0ZXIgZnV0dXJlIGFjY2VzcyAodXNlIGRlZmF1bHQgVFRMIGZvciByZXN0b3JlZCBjYWNoZSlcbiAgICAgICAgICB0aGlzLmNhY2hlLnNldChrZXksIHtcbiAgICAgICAgICAgIHJlc3VsdDogc3VwYWJhc2VDYWNoZWQsXG4gICAgICAgICAgICBleHBpcmVzOiBEYXRlLm5vdygpICsgdGhpcy5NT0RVTEVfVFRMUy5kZWZhdWx0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc29sZS5sb2coJ/Cfk6YgQ2FjaGUgcmVzdG9yZWQgZnJvbSBTdXBhYmFzZTonLCBrZXkuc3Vic3RyaW5nKDAsIDMwKSArICcuLi4nKTtcbiAgICAgICAgICByZXR1cm4gc3VwYWJhc2VDYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gU3VwYWJhc2UgY2FjaGUgcmVhZCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgIH1cbiAgICBcbiAgICAvLyAzLiBDaGVjayBBc3luY1N0b3JhZ2UgY2FjaGUgKG9mZmxpbmUgZmFsbGJhY2spXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG9mZmxpbmVDYWNoZSA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICBpZiAob2ZmbGluZUNhY2hlKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2Uob2ZmbGluZUNhY2hlKTtcbiAgICAgICAgaWYgKHBhcnNlZC5leHBpcmVzID4gRGF0ZS5ub3coKSkge1xuICAgICAgICAgIC8vIPCfmqsgTkVHQVRJVkUgQ0FDSEUgQllQQVNTOiBDaGVjayBmb3IgZW1wdHkgaW5zaWdodHMgYmVmb3JlIHJlc3RvcmluZ1xuICAgICAgICAgIGNvbnN0IGluc2lnaHRzQ291bnQgPSB0aGlzLmNvdW50VG90YWxJbnNpZ2h0cyhwYXJzZWQucmVzdWx0KTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoaW5zaWdodHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfmqsgQnlwYXNzaW5nIG5lZ2F0aXZlIEFzeW5jU3RvcmFnZSBjYWNoZTogaW5zaWdodHNDb3VudD0ke2luc2lnaHRzQ291bnR9YCk7XG4gICAgICAgICAgICBhd2FpdCBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbShrZXkpOyAvLyBDbGVhbiB1cCBuZWdhdGl2ZSBjYWNoZVxuICAgICAgICAgICAgLy8gQ29udGludWUgdG8gZnJlc2ggZ2VuZXJhdGlvblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygn8J+TsSBDYWNoZSByZXN0b3JlZCBmcm9tIEFzeW5jU3RvcmFnZTonLCBrZXkuc3Vic3RyaW5nKDAsIDMwKSArICcuLi4nKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZWQucmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhd2FpdCBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEFzeW5jU3RvcmFnZSBjYWNoZSByZWFkIGZhaWxlZDonLCBlcnJvcik7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIFxuICBwcml2YXRlIHNldENhY2hlKGtleTogc3RyaW5nLCByZXN1bHQ6IFVuaWZpZWRQaXBlbGluZVJlc3VsdCwgdHRsPzogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8g4pyFIEZJWEVEOiBVc2UgbW9kdWxlLXNwZWNpZmljIFRUTCBpbnN0ZWFkIG9mIHNpbmdsZSBERUZBVUxUX1RUTFxuICAgIC8vIPCfp6ogVEVTVCBNT0RFOiBPdmVycmlkZSBUVEwgZm9yIGRldGVybWluaXN0aWMgdGVzdGluZ1xuICAgIGNvbnN0IGNhY2hlVFRMID0gdGhpcy5pc1Rlc3RNb2RlID8gdGhpcy50ZXN0VFRMIDogKHR0bCB8fCB0aGlzLk1PRFVMRV9UVExTLmRlZmF1bHQpO1xuICAgIFxuICAgIC8vIDEuIFN0b3JlIGluIG1lbW9yeSBjYWNoZSAoZmFzdGVzdCBhY2Nlc3MpXG4gICAgdGhpcy5jYWNoZS5zZXQoa2V5LCB7XG4gICAgICByZXN1bHQsXG4gICAgICBleHBpcmVzOiBEYXRlLm5vdygpICsgY2FjaGVUVExcbiAgICB9KTtcbiAgICBcbiAgICAvLyAyLiBQZXJzaXN0IHRvIFN1cGFiYXNlIChzaGFyZWQgYWNyb3NzIGRldmljZXMpXG4gICAgdGhpcy5zZXRUb1N1cGFiYXNlQ2FjaGUoa2V5LCByZXN1bHQpO1xuICAgIFxuICAgIC8vIDMuIEFsc28gcGVyc2lzdCB0byBBc3luY1N0b3JhZ2UgZm9yIG9mZmxpbmVcbiAgICB0aGlzLnBlcnNpc3RUb1N0b3JhZ2Uoa2V5LCByZXN1bHQpO1xuICAgIFxuICAgIGNvbnN0IHR0bERpc3BsYXkgPSB0aGlzLmlzVGVzdE1vZGUgXG4gICAgICA/IGAke2NhY2hlVFRMfW1zIChURVNUIE1PREUpYCBcbiAgICAgIDogYCR7TWF0aC5yb3VuZChjYWNoZVRUTCAvICg2MCAqIDYwICogMTAwMCkpfWhgO1xuICAgIGNvbnNvbGUubG9nKGDwn5OmIENhY2hlIHNldCB3aXRoICR7dHRsRGlzcGxheX0gVFRMOmAsIGtleS5zdWJzdHJpbmcoMCwgMzApICsgJy4uLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIPCfp6AgU21hcnQgY2FjaGluZyB3aXRoIGVtcHR5IGluc2lnaHRzIHBvbGljeVxuICAgKiAtIERvbid0IGNhY2hlIHJlc3VsdHMgd2l0aCAwIGluc2lnaHRzIE9SIHVzZSBzaG9ydCBUVEwgKDUtMTAgbWluKVxuICAgKiAtIFVzZSBmdWxsIFRUTCBmb3IgbWVhbmluZ2Z1bCBpbnNpZ2h0c1xuICAgKi9cbiAgcHJpdmF0ZSBzZXRDYWNoZVdpdGhJbnNpZ2h0c1BvbGljeShrZXk6IHN0cmluZywgcmVzdWx0OiBVbmlmaWVkUGlwZWxpbmVSZXN1bHQsIGlucHV0OiBVbmlmaWVkUGlwZWxpbmVJbnB1dCk6IHZvaWQge1xuICAgIGNvbnN0IGluc2lnaHRzQ291bnQgPSB0aGlzLmNvdW50VG90YWxJbnNpZ2h0cyhyZXN1bHQpO1xuICAgIGNvbnN0IG1vZHVsZVRUTCA9IHRoaXMuZ2V0TW9kdWxlVFRMKGlucHV0KTtcbiAgICBcbiAgICAvLyBJZiBubyBpbnNpZ2h0cywgdXNlIHNob3J0IFRUTCB0byBwcmV2ZW50IG5lZ2F0aXZlIGNhY2hpbmdcbiAgICBpZiAoaW5zaWdodHNDb3VudCA9PT0gMCkge1xuICAgICAgY29uc3Qgc2hvcnRUVEwgPSB0aGlzLmlzVGVzdE1vZGUgPyB0aGlzLnRlc3RUVEwgOiA1ICogNjAgKiAxMDAwOyAvLyBUZXN0IG1vZGUgb3IgNSBtaW51dGVzXG4gICAgICBjb25zdCB0dGxEaXNwbGF5ID0gdGhpcy5pc1Rlc3RNb2RlID8gYCR7c2hvcnRUVEx9bXMgKFRFU1QpYCA6IGAke3Nob3J0VFRMIC8gNjAwMDB9bWluYDtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OmIEVtcHR5IGluc2lnaHRzIGRldGVjdGVkICgke2luc2lnaHRzQ291bnR9KSwgdXNpbmcgc2hvcnQgVFRMOiAke3R0bERpc3BsYXl9YCk7XG4gICAgICB0aGlzLnNldENhY2hlKGtleSwgcmVzdWx0LCBzaG9ydFRUTCk7XG4gICAgICBcbiAgICAgIC8vIFRyYWNrIGVtcHR5IGluc2lnaHRzIGNhY2hpbmcgZm9yIG1vbml0b3JpbmdcbiAgICAgIHRyYWNrQUlJbnRlcmFjdGlvbihBSUV2ZW50VHlwZS5JTlNJR0hUU19ERUxJVkVSRUQsIHtcbiAgICAgICAgdXNlcklkOiBpbnB1dC51c2VySWQsXG4gICAgICAgIHNvdXJjZTogJ2VtcHR5X2NhY2hlX3BvbGljeScsXG4gICAgICAgIGluc2lnaHRzQ291bnQ6IDAsXG4gICAgICAgIGNhY2hlS2V5OiBrZXksXG4gICAgICAgIHNob3J0VFRMOiBzaG9ydFRUTFxuICAgICAgfSkuY2F0Y2goY29uc29sZS53YXJuKTtcbiAgICAgIFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyBOb3JtYWwgY2FjaGluZyBmb3IgbWVhbmluZ2Z1bCByZXN1bHRzXG4gICAgY29uc29sZS5sb2coYPCfk6YgQ2FjaGluZyBtZWFuaW5nZnVsIGluc2lnaHRzICgke2luc2lnaHRzQ291bnR9KSwgdXNpbmcgZnVsbCBUVEw6ICR7TWF0aC5yb3VuZChtb2R1bGVUVEwgLyAoNjAgKiA2MCAqIDEwMDApKX1oYCk7XG4gICAgdGhpcy5zZXRDYWNoZShrZXksIHJlc3VsdCwgbW9kdWxlVFRMKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDwn5OKIENvdW50IHRvdGFsIGluc2lnaHRzIGFjcm9zcyBhbGwgY2F0ZWdvcmllc1xuICAgKi9cbiAgcHJpdmF0ZSBjb3VudFRvdGFsSW5zaWdodHMocmVzdWx0OiBVbmlmaWVkUGlwZWxpbmVSZXN1bHQpOiBudW1iZXIge1xuICAgIGlmICghcmVzdWx0Lmluc2lnaHRzKSByZXR1cm4gMDtcbiAgICBcbiAgICBjb25zdCB7IHRoZXJhcGV1dGljID0gW10sIHByb2dyZXNzID0gW10sIGJlaGF2aW9yYWwgPSBbXSwgbW90aXZhdGlvbmFsID0gW10gfSA9IHJlc3VsdC5pbnNpZ2h0cztcbiAgICByZXR1cm4gdGhlcmFwZXV0aWMubGVuZ3RoICsgcHJvZ3Jlc3MubGVuZ3RoICsgYmVoYXZpb3JhbC5sZW5ndGggKyBtb3RpdmF0aW9uYWwubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIPCfp7kgTWFudWFsIGNhY2hlIGludmFsaWRhdGlvbiBmb3IgY2xlYW5pbmcgdXAgc3RhbGUgMC1pbnNpZ2h0IGVudHJpZXNcbiAgICogQ2FsbGVkIHdoZW4gdXNlciBhZGRzL3JlbW92ZXMgZGF0YSB0byByZWZyZXNoIGNhY2hlIHN0YXRlXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgaW52YWxpZGF0ZVN0YWxlQ2FjaGUoKTogUHJvbWlzZTx7IGludmFsaWRhdGVkOiBudW1iZXI7IHJlYXNvbjogc3RyaW5nIH0+IHtcbiAgICBsZXQgaW52YWxpZGF0ZWRDb3VudCA9IDA7XG4gICAgY29uc3QgcmVhc29uID0gJ21hbnVhbF9yZWZyZXNoX2NsZWFudXAnO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyAxLiBDbGVhbiBpbi1tZW1vcnkgY2FjaGVcbiAgICAgIGNvbnN0IG1lbW9yeUtleXMgPSBBcnJheS5mcm9tKHRoaXMuY2FjaGUua2V5cygpKTtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIG1lbW9yeUtleXMpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGNhY2hlZCAmJiB0aGlzLmNvdW50VG90YWxJbnNpZ2h0cyhjYWNoZWQucmVzdWx0KSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgaW52YWxpZGF0ZWRDb3VudCsrO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDwn6e5IEludmFsaWRhdGVkIHN0YWxlIG1lbW9yeSBjYWNoZTogJHtrZXkuc3Vic3RyaW5nKDAsIDMwKX0uLi5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyAyLiBDbGVhbiBBc3luY1N0b3JhZ2UgY2FjaGUgKDAtaW5zaWdodCBlbnRyaWVzKVxuICAgICAgY29uc3QgYWxsS2V5cyA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRBbGxLZXlzKCk7XG4gICAgICBjb25zdCB1bmlmaWVkS2V5cyA9IGFsbEtleXMuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgndW5pZmllZDonKSk7XG4gICAgICBcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIHVuaWZpZWRLZXlzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgY2FjaGVkID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGNhY2hlZCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkLnJlc3VsdCAmJiB0aGlzLmNvdW50VG90YWxJbnNpZ2h0cyhwYXJzZWQucmVzdWx0KSA9PT0gMCkge1xuICAgICAgICAgICAgICBhd2FpdCBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICAgICAgICBpbnZhbGlkYXRlZENvdW50Kys7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn6e5IFJlbW92ZWQgc3RhbGUgQXN5bmNTdG9yYWdlIGNhY2hlOiAke2tleS5zdWJzdHJpbmcoMCwgMzApfS4uLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgaW5kaXZpZHVhbCBrZXkgZXJyb3JzLCBjb250aW51ZSBjbGVhbnVwXG4gICAgICAgICAgY29uc29sZS53YXJuKGDimqDvuI8gRmFpbGVkIHRvIGNsZWFuIGNhY2hlIGtleSAke2tleX06YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgQ2FjaGUgY2xlYW51cCBjb21wbGV0ZWQ6ICR7aW52YWxpZGF0ZWRDb3VudH0gc3RhbGUgZW50cmllcyByZW1vdmVkYCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7IGludmFsaWRhdGVkOiBpbnZhbGlkYXRlZENvdW50LCByZWFzb24gfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIENhY2hlIGNsZWFudXAgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IGludmFsaWRhdGVkOiBpbnZhbGlkYXRlZENvdW50LCByZWFzb246ICdjbGVhbnVwX2ZhaWxlZCcgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+TiiBBbmFseXplIHRyYWNraW5nIHRyZW5kcyBmb3IgZmFsbGJhY2sgcGF0dGVybnMgKG1vdmVkIGZyb20gdHJhY2tpbmcgc2NyZWVuKVxuICAgKiBHZW5lcmF0ZXMgbG9jYWwgaGV1cmlzdGljIHBhdHRlcm5zIGZyb20gY29tcHVsc2lvbiBkYXRhXG4gICAqL1xuICBwcml2YXRlIGFuYWx5emVUcmFja2luZ1RyZW5kcyhlbnRyaWVzOiBhbnlbXSk6IGFueVtdIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50cmllcykgfHwgZW50cmllcy5sZW5ndGggPCA1KSByZXR1cm4gW107XG5cbiAgICBjb25zdCBwYXR0ZXJucyA9IFtdO1xuICAgIFxuICAgIC8vIFRpbWUtYmFzZWQgcGF0dGVybnNcbiAgICBjb25zdCBob3VyQ291bnRzID0gbmV3IEFycmF5KDI0KS5maWxsKDApO1xuICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICBjb25zdCB0aW1lc3RhbXAgPSBlbnRyeS50aW1lc3RhbXAgfHwgZW50cnkuY3JlYXRlZF9hdDtcbiAgICAgIGNvbnN0IGhvdXIgPSBuZXcgRGF0ZSh0aW1lc3RhbXApLmdldEhvdXJzKCk7XG4gICAgICBob3VyQ291bnRzW2hvdXJdKys7XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcGVha0hvdXJzID0gaG91ckNvdW50c1xuICAgICAgLm1hcCgoY291bnQsIGhvdXIpID0+ICh7IGhvdXIsIGNvdW50IH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KVxuICAgICAgLnNsaWNlKDAsIDMpO1xuXG4gICAgaWYgKHBlYWtIb3Vyc1swXS5jb3VudCA+PSAzKSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3RpbWVfcGF0dGVybicsXG4gICAgICAgIHRpdGxlOiBgJHtwZWFrSG91cnNbMF0uaG91cn06MDAgU2FhdGluZGUgWW/En3VubHVrYCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBFbiDDp29rIGtvbXDDvGxzaXlvbiAke3BlYWtIb3Vyc1swXS5ob3VyfTowMCBzYWF0aW5kZSB5YcWfYW7EsXlvciAoJHtwZWFrSG91cnNbMF0uY291bnR9IGtleikuYCxcbiAgICAgICAgc3VnZ2VzdGlvbjogJ0J1IHNhYXRsZXJkZSDDtm5sZXlpY2kgdGVrbmlrbGVyIHV5Z3VsYXnEsW4uJyxcbiAgICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgICBzZXZlcml0eTogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJlc2lzdGFuY2UgdHJlbmRzXG4gICAgY29uc3QgcmVjZW50RW50cmllcyA9IGVudHJpZXMuc2xpY2UoLTEwKTtcbiAgICBjb25zdCByZXNpc3RhbmNlU3VtID0gcmVjZW50RW50cmllcy5yZWR1Y2UoKHN1bSwgZSkgPT4gc3VtICsgKGUucmVzaXN0YW5jZUxldmVsIHx8IGUucmVzaXN0YW5jZV9sZXZlbCB8fCA1KSwgMCk7XG4gICAgY29uc3QgYXZnUmVzaXN0YW5jZSA9IHJlc2lzdGFuY2VTdW0gLyByZWNlbnRFbnRyaWVzLmxlbmd0aDtcbiAgICBcbiAgICBpZiAoYXZnUmVzaXN0YW5jZSA+PSA3KSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3Byb2dyZXNzX3BhdHRlcm4nLFxuICAgICAgICB0aXRsZTogJ0fDvMOnbMO8IERpcmVuw6cgVHJlbmRpJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTb24ga29tcMO8bHNpeW9ubGFyZGEgb3J0YWxhbWEgJHthdmdSZXNpc3RhbmNlLnRvRml4ZWQoMSl9IGRpcmVuw6cgc2V2aXllc2kuYCxcbiAgICAgICAgc3VnZ2VzdGlvbjogJ03DvGtlbW1lbCBpbGVybGVtZSEgQnUgbW90aXZhc3lvbnUga29ydXl1bi4nLFxuICAgICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICAgIHNldmVyaXR5OiAncG9zaXRpdmUnXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGF2Z1Jlc2lzdGFuY2UgPD0gMykge1xuICAgICAgcGF0dGVybnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICd3YXJuaW5nX3BhdHRlcm4nLFxuICAgICAgICB0aXRsZTogJ0TDvMWfw7xrIERpcmVuw6cgVXlhcsSxc8SxJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTb24ga29tcMO8bHNpeW9ubGFyZGEgb3J0YWxhbWEgJHthdmdSZXNpc3RhbmNlLnRvRml4ZWQoMSl9IGRpcmVuw6cgc2V2aXllc2kuYCxcbiAgICAgICAgc3VnZ2VzdGlvbjogJ1RlcmFwaSBlZ3plcnNpemxlcmkgdmUgbWluZGZ1bG5lc3MgdGVrbmlrbGVyaSBkZW5leWluLicsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuODUsXG4gICAgICAgIHNldmVyaXR5OiAnd2FybmluZydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwYXR0ZXJucztcbiAgfVxuXG4gIC8qKlxuICAgKiDwn5SEIEdlbmVyYXRlIGZhbGxiYWNrIGluc2lnaHRzIHdoZW4gcHJpbWFyeSBhbmFseXNpcyB5aWVsZHMgbm8gcmVzdWx0c1xuICAgKiBDcmVhdGVzIGJhc2ljIGFjdGlvbmFibGUgaW5zaWdodHMgZnJvbSBhdmFpbGFibGUgcGF0dGVybnMgZGF0YVxuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUZhbGxiYWNrSW5zaWdodHMocGF0dGVybnM6IGFueSwgaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogYW55IHtcbiAgICBjb25zdCBmYWxsYmFjayA9IHtcbiAgICAgIHRoZXJhcGV1dGljOiBbXSxcbiAgICAgIHByb2dyZXNzOiBbXVxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgLy8g8J+OryBFTkhBTkNFRCBGQUxMQkFDSzogSW50ZWdyYXRlIHRyYWNraW5nIHNjcmVlbiBwYXR0ZXJuc1xuICAgICAgaWYgKGlucHV0LmNvbnRlbnQgJiYgdHlwZW9mIGlucHV0LmNvbnRlbnQgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoaW5wdXQuY29udGVudC5jb21wdWxzaW9ucykpIHtcbiAgICAgICAgY29uc3QgY29tcHVsc2lvbnMgPSBpbnB1dC5jb250ZW50LmNvbXB1bHNpb25zO1xuICAgICAgICBjb25zdCB0cmFja2luZ1BhdHRlcm5zID0gdGhpcy5hbmFseXplVHJhY2tpbmdUcmVuZHMoY29tcHVsc2lvbnMpO1xuICAgICAgICBcbiAgICAgICAgdHJhY2tpbmdQYXR0ZXJucy5mb3JFYWNoKHBhdHRlcm4gPT4ge1xuICAgICAgICAgIGNvbnN0IGluc2lnaHQgPSB7XG4gICAgICAgICAgICB0ZXh0OiBwYXR0ZXJuLmRlc2NyaXB0aW9uICsgJyAnICsgcGF0dGVybi5zdWdnZXN0aW9uLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IHBhdHRlcm4udHlwZSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBwYXR0ZXJuLnNldmVyaXR5ID09PSAncG9zaXRpdmUnID8gJ2hpZ2gnIDogJ21lZGl1bScsXG4gICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogcGF0dGVybi5jb25maWRlbmNlLFxuICAgICAgICAgICAgc291cmNlOiAnZmFsbGJhY2tfdHJhY2tpbmcnXG4gICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAocGF0dGVybi5zZXZlcml0eSA9PT0gJ3Bvc2l0aXZlJykge1xuICAgICAgICAgICAgZmFsbGJhY2sucHJvZ3Jlc3MucHVzaChpbnNpZ2h0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmFsbGJhY2sudGhlcmFwZXV0aWMucHVzaChpbnNpZ2h0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyAxLiBURU1QT1JBTCBQQVRURVJOIEZBTExCQUNLUyAoT3JpZ2luYWwgbG9naWMgcHJlc2VydmVkKVxuICAgICAgaWYgKHBhdHRlcm5zLnRlbXBvcmFsICYmIHBhdHRlcm5zLnRlbXBvcmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcGVha1BhdHRlcm4gPSBwYXR0ZXJucy50ZW1wb3JhbFswXTsgLy8gTW9zdCBzaWduaWZpY2FudCB0ZW1wb3JhbCBwYXR0ZXJuXG4gICAgICAgIGlmIChwZWFrUGF0dGVybi50eXBlID09PSAncGVha19ob3VyJyB8fCBwZWFrUGF0dGVybi5mcmVxdWVuY3kgPiAyKSB7XG4gICAgICAgICAgZmFsbGJhY2sudGhlcmFwZXV0aWMucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiBgJHtwZWFrUGF0dGVybi50aW1lT2ZEYXkgfHwgJ0JlbGlybGkgc2FhdGxlcmRlJ30gZGFoYSB5b8SfdW4gYWt0aXZpdGUgZ8O2csO8bMO8eW9yLiBCdSB6YW1hbmxhcmRhIGRlc3RlayBzdHJhdGVqaWxlcmluaSBoYXTEsXJsYW1hayBmYXlkYWzEsSBvbGFiaWxpci5gLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICd0ZW1wb3JhbF9hd2FyZW5lc3MnLFxuICAgICAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuNyxcbiAgICAgICAgICAgIHNvdXJjZTogJ2ZhbGxiYWNrX3RlbXBvcmFsJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIDIuIEJFSEFWSU9SQUwgUEFUVEVSTiBGQUxMQkFDS1MgIFxuICAgICAgaWYgKHBhdHRlcm5zLmJlaGF2aW9yYWwgJiYgcGF0dGVybnMuYmVoYXZpb3JhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGRvbWluYW50UGF0dGVybiA9IHBhdHRlcm5zLmJlaGF2aW9yYWwuc29ydCgoYSwgYikgPT4gKGIuZnJlcXVlbmN5IHx8IDApIC0gKGEuZnJlcXVlbmN5IHx8IDApKVswXTtcbiAgICAgICAgaWYgKGRvbWluYW50UGF0dGVybi50cmlnZ2VyICYmIGRvbWluYW50UGF0dGVybi5mcmVxdWVuY3kgPiAxKSB7XG4gICAgICAgICAgZmFsbGJhY2sudGhlcmFwZXV0aWMucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiBgRW4gc8SxayBnw7Zyw7xsZW4gdGV0aWsgXCIke2RvbWluYW50UGF0dGVybi50cmlnZ2VyfVwiIGnDp2luIGFsdGVybmF0aWYgYmHFn2Egw6fEsWttYSBzdHJhdGVqaWxlcmkgZ2VsacWfdGlybWVrIHlhcmFybMSxIG9sYWJpbGlyLmAsXG4gICAgICAgICAgICBjYXRlZ29yeTogJ2JlaGF2aW9yYWxfaW5zaWdodCcsXG4gICAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsIFxuICAgICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuNixcbiAgICAgICAgICAgIHNvdXJjZTogJ2ZhbGxiYWNrX2JlaGF2aW9yYWwnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gMy4gRU5WSVJPTk1FTlRBTC9UUklHR0VSIEZBTExCQUNLU1xuICAgICAgaWYgKHBhdHRlcm5zLnRyaWdnZXJzICYmIHBhdHRlcm5zLnRyaWdnZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgY29tbW9uVHJpZ2dlciA9IHBhdHRlcm5zLnRyaWdnZXJzWzBdO1xuICAgICAgICBmYWxsYmFjay50aGVyYXBldXRpYy5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiBgw4dldnJlc2VsIGZha3TDtnJsZXJpbiBldGtpc2luaSBmYXJrIGV0bWVrIMO2bmVtbGkgYmlyIGFkxLFtLiBUZXRpa2xleWljaSBkdXJ1bWxhcsSxIMO2bmNlZGVuIHRhbsSxbWFrIGfDvMOnbGVuZGlyaWNpIG9sYWJpbGlyLmAsXG4gICAgICAgICAgY2F0ZWdvcnk6ICdlbnZpcm9ubWVudGFsX2F3YXJlbmVzcycsXG4gICAgICAgICAgcHJpb3JpdHk6ICdsb3cnLFxuICAgICAgICAgIGFjdGlvbmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlkZW5jZTogMC41LFxuICAgICAgICAgIHNvdXJjZTogJ2ZhbGxiYWNrX2Vudmlyb25tZW50YWwnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyA0LiBHRU5FUkFMIFBST0dSRVNTIEZBTExCQUNLIChhbHdheXMgYXZhaWxhYmxlKVxuICAgICAgaWYgKGlucHV0LmNvbnRleHQ/LnNvdXJjZSkge1xuICAgICAgICBmYWxsYmFjay5wcm9ncmVzcy5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiBgVmVyaSB0b3BsYW1hIHZlIHRha2lwIHPDvHJlY2kgYWt0aWYuIEJ1IHR1dGFybMSxbMSxaywgaWxlcmxlbWV5aSBkZcSfZXJsZW5kaXJtZWsgacOnaW4gZGXEn2VybGkgYmlyIGtheW5hayBvbHXFn3R1cnV5b3IuYCxcbiAgICAgICAgICBjYXRlZ29yeTogJ3Byb2dyZXNzX3RyYWNraW5nJyxcbiAgICAgICAgICBwcmlvcml0eTogJ2xvdycsXG4gICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWRlbmNlOiAwLjgsXG4gICAgICAgICAgc291cmNlOiAnZmFsbGJhY2tfcHJvZ3Jlc3MnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyA1LiBEQVRBIFFVQUxJVFkgSU5TSUdIVFNcbiAgICAgIGNvbnN0IGRhdGFQb2ludHMgPSBwYXR0ZXJucy5tZXRhZGF0YT8uZGF0YVBvaW50cyB8fCAwO1xuICAgICAgaWYgKGRhdGFQb2ludHMgPj0gNSkge1xuICAgICAgICBmYWxsYmFjay5wcm9ncmVzcy5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiBgJHtkYXRhUG9pbnRzfSB2ZXJpIG5va3Rhc8SxIHRvcGxhbmTEsS4gQnUgYmlsZ2lsZXIgemFtYW4gacOnaW5kZSBkYWhhIGRldGF5bMSxIGthbMSxcCBhbmFsaXppIGnDp2luIHlldGVybGkgb2xhY2FrLmAsXG4gICAgICAgICAgY2F0ZWdvcnk6ICdkYXRhX3N1ZmZpY2llbmN5JyxcbiAgICAgICAgICBwcmlvcml0eTogJ2xvdycsXG4gICAgICAgICAgYWN0aW9uYWJsZTogZmFsc2UsXG4gICAgICAgICAgY29uZmlkZW5jZTogMC45LFxuICAgICAgICAgIHNvdXJjZTogJ2ZhbGxiYWNrX2RhdGFfcXVhbGl0eSdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKGDwn5SEIEdlbmVyYXRlZCAke2ZhbGxiYWNrLnRoZXJhcGV1dGljLmxlbmd0aCArIGZhbGxiYWNrLnByb2dyZXNzLmxlbmd0aH0gZmFsbGJhY2sgaW5zaWdodHNgKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0ZhbGxiYWNrIGluc2lnaHQgZ2VuZXJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgLy8gTWluaW1hbCBzYWZldHkgZmFsbGJhY2tcbiAgICAgIGZhbGxiYWNrLnRoZXJhcGV1dGljLnB1c2goe1xuICAgICAgICB0ZXh0OiAnVmVyaWxlciBhbmFsaXogZWRpbGl5b3IuIERhaGEgZmF6bGEgdmVyaSB0b3BsYW5kxLHEn8SxbmRhIGRldGF5bMSxIGnDp2fDtnLDvGxlciBzdW51bGFjYWsuJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdzeXN0ZW1fc3RhdHVzJyxcbiAgICAgICAgcHJpb3JpdHk6ICdsb3cnLFxuICAgICAgICBhY3Rpb25hYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlkZW5jZTogMC41LFxuICAgICAgICBzb3VyY2U6ICdmYWxsYmFja19taW5pbWFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG5cbiAgLyoqXG4gICAqIPCfjqQgR2VuZXJhdGUgaW5zaWdodHMgZW5oYW5jZWQgYnkgdm9pY2UgYW5hbHlzaXMgcmVzdWx0c1xuICAgKiBDcmVhdGVzIHRhcmdldGVkIGluc2lnaHRzIGJhc2VkIG9uIGRldGVjdGVkIHZvaWNlIGNhdGVnb3J5IGFuZCBjb25maWRlbmNlXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlVm9pY2VFbmhhbmNlZEluc2lnaHRzKHZvaWNlSGludHM6IGFueSwgcGF0dGVybnM6IGFueSk6IGFueVtdIHtcbiAgICBjb25zdCBpbnNpZ2h0czogYW55W10gPSBbXTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHZvaWNlQ2F0ZWdvcnksIHZvaWNlQ29uZmlkZW5jZSwgdm9pY2VTdWdnZXN0aW9uIH0gPSB2b2ljZUhpbnRzO1xuXG4gICAgICBzd2l0Y2ggKHZvaWNlQ2F0ZWdvcnkpIHtcbiAgICAgICAgY2FzZSAnT0NEJzpcbiAgICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICAgIHRleHQ6IGBTZXMgYW5hbGl6aW5kZSBPS0IgaWxlIGlsacWfa2lsaSBpw6dlcmlrIHRlc3BpdCBlZGlsZGkuICR7dm9pY2VTdWdnZXN0aW9uIHx8ICdNZXZjdXQgYmHFn2Egw6fEsWttYSBzdHJhdGVqaWxlcmluaXppIGhhdMSxcmxhbWFrIGZheWRhbMSxIG9sYWJpbGlyLid9YCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndm9pY2Vfb2NkX2RldGVjdGlvbicsIFxuICAgICAgICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgICAgICAgIGFjdGlvbmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWRlbmNlOiB2b2ljZUNvbmZpZGVuY2UsXG4gICAgICAgICAgICBzb3VyY2U6ICd2b2ljZV9lbmhhbmNlZCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBZGQgcGF0dGVybi1zcGVjaWZpYyBPQ0QgaW5zaWdodCBpZiBiZWhhdmlvcmFsIHBhdHRlcm5zIGV4aXN0XG4gICAgICAgICAgaWYgKHBhdHRlcm5zLmJlaGF2aW9yYWwgJiYgcGF0dGVybnMuYmVoYXZpb3JhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBkb21pbmFudFBhdHRlcm4gPSBwYXR0ZXJucy5iZWhhdmlvcmFsWzBdO1xuICAgICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICAgIHRleHQ6IGBEYXZyYW7EscWfc2FsIGthbMSxcGxhciB2ZSBzZXMgYW5hbGl6aSBiaXJsaWt0ZSBkZcSfZXJsZW5kaXJpbGRpxJ9pbmRlLCBcIiR7ZG9taW5hbnRQYXR0ZXJuLnRyaWdnZXIgfHwgJ2JlbGlybGkgZHVydW1sYXInfVwiIGnDp2luIEVSUCB0ZWtuaWtsZXJpIHV5Z3VsYW1hayB5YXJhcmzEsSBvbGFiaWxpci5gLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogJ3ZvaWNlX3BhdHRlcm5fY29ycmVsYXRpb24nLFxuICAgICAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgICAgIGFjdGlvbmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGNvbmZpZGVuY2U6IE1hdGgubWluKHZvaWNlQ29uZmlkZW5jZSwgMC44KSxcbiAgICAgICAgICAgICAgc291cmNlOiAndm9pY2VfZW5oYW5jZWQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQ0JUJzpcbiAgICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcbiAgICAgICAgICAgIHRleHQ6IGBCaWxpxZ9zZWwgZGlzdG9yc3lvbmxhciBpbGUgaWxnaWxpIGTDvMWfw7xuY2VsZXIgdGVzcGl0IGVkaWxkaS4gJHt2b2ljZVN1Z2dlc3Rpb24gfHwgJ0TDvMWfw7xuY2UtZHV5Z3UtZGF2cmFuxLHFnyDDvMOnZ2VuaW5pIGluY2VsZW1layBmYXlkYWzEsSBvbGFiaWxpci4nfWAsXG4gICAgICAgICAgICBjYXRlZ29yeTogJ3ZvaWNlX2NidF9kZXRlY3Rpb24nLFxuICAgICAgICAgICAgcHJpb3JpdHk6ICdoaWdoJywgXG4gICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogdm9pY2VDb25maWRlbmNlLFxuICAgICAgICAgICAgc291cmNlOiAndm9pY2VfZW5oYW5jZWQnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnTU9PRCc6XG4gICAgICAgICAgaW5zaWdodHMucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiBgRHV5Z3UgZHVydW0gaWxlIGlsZ2lsaSBpZmFkZWxlciBhbGfEsWxhbmTEsS4gJHt2b2ljZVN1Z2dlc3Rpb24gfHwgJ01vb2QgdHJhY2tpbmcgdmVyaWxlcmluaXogaWxlIGJpcmxpa3RlIGRlxJ9lcmxlbmRpcmlsZGnEn2luZGUgZGFoYSBkZXRheWzEsSBhbmFsaXogeWFwxLFsYWJpbGlyLid9YCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndm9pY2VfbW9vZF9kZXRlY3Rpb24nLFxuICAgICAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgICAgYWN0aW9uYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IHZvaWNlQ29uZmlkZW5jZSxcbiAgICAgICAgICAgIHNvdXJjZTogJ3ZvaWNlX2VuaGFuY2VkJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0JSRUFUSFdPUksnOlxuICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgdGV4dDogYE5lZmVzIMOnYWzEscWfbWFzxLEgdmV5YSByYWhhdGxhbWEgaWxlIGlsZ2lsaSBnZXJla3NpbmltIHRlc3BpdCBlZGlsZGkuICR7dm9pY2VTdWdnZXN0aW9uIHx8ICdEZXJpbiBuZWZlcyB0ZWtuaWtsZXJpIMWfdSBhbmRhIHlhcmFybMSxIG9sYWJpbGlyLid9YCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndm9pY2VfYnJlYXRod29ya19zdWdnZXN0aW9uJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgICAgIGFjdGlvbmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWRlbmNlOiB2b2ljZUNvbmZpZGVuY2UsXG4gICAgICAgICAgICBzb3VyY2U6ICd2b2ljZV9lbmhhbmNlZCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIEdlbmVyaWMgdm9pY2UtZGV0ZWN0ZWQgaW5zaWdodFxuICAgICAgICAgIGlmICh2b2ljZUNvbmZpZGVuY2UgPiAwLjUpIHtcbiAgICAgICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgICAgICB0ZXh0OiBgU2VzIGFuYWxpemluZGUgw7ZuZW1saSBpw6dlcmlrIHRlc3BpdCBlZGlsZGkuIEJ1IGR1cnVtIGnDp2luIG1ldmN1dCBkZXN0ZWsgc3RyYXRlamlsZXJpbml6aSBrdWxsYW5tYXnEsSBkZcSfZXJsZW5kaXJlYmlsaXJzaW5pei5gLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogJ3ZvaWNlX2dlbmVyYWxfZGV0ZWN0aW9uJyxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6ICdsb3cnLFxuICAgICAgICAgICAgICBhY3Rpb25hYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBjb25maWRlbmNlOiB2b2ljZUNvbmZpZGVuY2UsXG4gICAgICAgICAgICAgIHNvdXJjZTogJ3ZvaWNlX2VuaGFuY2VkJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignVm9pY2UtZW5oYW5jZWQgaW5zaWdodCBnZW5lcmF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc2lnaHRzO1xuICB9XG4gIFxuICBwcml2YXRlIGFzeW5jIHBlcnNpc3RUb1N0b3JhZ2Uoa2V5OiBzdHJpbmcsIHJlc3VsdDogVW5pZmllZFBpcGVsaW5lUmVzdWx0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICBrZXksXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgZXhwaXJlczogRGF0ZS5ub3coKSArIHRoaXMuTU9EVUxFX1RUTFMuZGVmYXVsdFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gcGVyc2lzdCB0byBzdG9yYWdlOicsIGVycm9yKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDwn5OmIFN1cGFiYXNlIENhY2hlIExheWVyIC0gUGVyc2lzdGVudCwgQ3Jvc3MtRGV2aWNlIENhY2hlXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEZyb21TdXBhYmFzZUNhY2hlKGtleTogc3RyaW5nKTogUHJvbWlzZTxVbmlmaWVkUGlwZWxpbmVSZXN1bHQgfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOKchSBGSVhFRDogVXNlIGNvcnJlY3QgY29sdW1uIG5hbWVzIGZyb20gYWlfY2FjaGUgdGFibGUgc2NoZW1hXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZpY2Uuc3VwYWJhc2VDbGllbnRcbiAgICAgICAgLmZyb20oJ2FpX2NhY2hlJylcbiAgICAgICAgLnNlbGVjdCgnY29udGVudCcpXG4gICAgICAgIC5lcSgnY2FjaGVfa2V5Jywga2V5KVxuICAgICAgICAubWF5YmVTaW5nbGUoKTtcbiAgICAgIFxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFN1cGFiYXNlIGNhY2hlIHJlYWQgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIHJldHVybiBudWxsOyAvLyBDYWNoZSBtaXNzXG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiAoZGF0YSBhcyBhbnkpLmNvbnRlbnQgYXMgVW5pZmllZFBpcGVsaW5lUmVzdWx0OyAgLy8gVXNlICdjb250ZW50JyBjb2x1bW5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gU3VwYWJhc2UgY2FjaGUgcmVhZCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIFxuICBwcml2YXRlIGFzeW5jIHNldFRvU3VwYWJhc2VDYWNoZShrZXk6IHN0cmluZywgcmVzdWx0OiBVbmlmaWVkUGlwZWxpbmVSZXN1bHQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgLy8gRXh0cmFjdCB1c2VySWQgZnJvbSBrZXkgZm9yIHByb3BlciBSTFNcbiAgICAgIGNvbnN0IHVzZXJJZCA9IGtleS5zcGxpdCgnOicpWzFdO1xuICAgICAgLy8gTWluaW1hbCB1cHNlcnQgZm9yIGNvbXBhdGliaWxpdHkgYWNyb3NzIHNjaGVtYXMgKHRyaWdnZXJzIG1heSBkZXJpdmUgZXhwaXJlc19hdClcbiAgICAgIFxuICAgICAgLy8g4pyFIEZJWEVEOiBVc2UgY29ycmVjdCBjb2x1bW4gbmFtZXMgZnJvbSBhaV9jYWNoZSB0YWJsZSBzY2hlbWFcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmljZS5zdXBhYmFzZUNsaWVudFxuICAgICAgICAuZnJvbSgnYWlfY2FjaGUnKVxuICAgICAgICAudXBzZXJ0KHtcbiAgICAgICAgICBjYWNoZV9rZXk6IGtleSxcbiAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgY29udGVudDogcmVzdWx0XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBvbkNvbmZsaWN0OiAnY2FjaGVfa2V5J1xuICAgICAgICB9KTtcbiAgICAgIFxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFN1cGFiYXNlIGNhY2hlIHdyaXRlIGVycm9yOicsIGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OmIENhY2hlZCB0byBTdXBhYmFzZTonLCBrZXkuc3Vic3RyaW5nKDAsIDMwKSArICcuLi4nKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gU3VwYWJhc2UgY2FjaGUgd3JpdGUgZmFpbGVkOicsIGVycm9yKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gSU5WQUxJREFUSU9OIEhPT0tTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgXG4gIC8vIOKchSBGLTAzIEZJWDogSW52YWxpZGF0aW9uIGhvb2tzIG5vdyBhY2NlcHQgdXNlcklkIHBhcmFtZXRlclxuICBwcml2YXRlIHNldHVwSW52YWxpZGF0aW9uSG9va3MoKTogdm9pZCB7XG4gICAgLy8gSG9vazogTmV3IGNvbXB1bHNpb24gcmVjb3JkZWRcbiAgICB0aGlzLmludmFsaWRhdGlvbkhvb2tzLnNldCgnY29tcHVsc2lvbl9hZGRlZCcsIGFzeW5jICh1c2VySWQ/OiBzdHJpbmcpID0+IHtcbiAgICAgIC8vIOKchSBGSVhFRDogSW52YWxpZGF0ZSBwYXR0ZXJucywgaW5zaWdodHMsIEFORCBwcm9ncmVzcyBhcyBwZXIgc3BlY2lmaWNhdGlvblxuICAgICAgYXdhaXQgdGhpcy5pbnZhbGlkYXRlVXNlckNhY2hlKCdwYXR0ZXJucycsIHVzZXJJZCk7XG4gICAgICBhd2FpdCB0aGlzLmludmFsaWRhdGVVc2VyQ2FjaGUoJ2luc2lnaHRzJywgdXNlcklkKTsgXG4gICAgICBhd2FpdCB0aGlzLmludmFsaWRhdGVVc2VyQ2FjaGUoJ3Byb2dyZXNzJywgdXNlcklkKTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SEIENhY2hlIGludmFsaWRhdGVkOiBwYXR0ZXJucyArIGluc2lnaHRzICsgcHJvZ3Jlc3MgKGNvbXB1bHNpb25fYWRkZWQpJyk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gSG9vazogQ0JUIHRob3VnaHQgcmVjb3JkIGNyZWF0ZWQvdXBkYXRlZFxuICAgIHRoaXMuaW52YWxpZGF0aW9uSG9va3Muc2V0KCdjYnRfcmVjb3JkX2FkZGVkJywgYXN5bmMgKHVzZXJJZD86IHN0cmluZykgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5pbnZhbGlkYXRlVXNlckNhY2hlKCdpbnNpZ2h0cycsIHVzZXJJZCk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gSG9vazogTW9vZCBlbnRyeSBhZGRlZFxuICAgIHRoaXMuaW52YWxpZGF0aW9uSG9va3Muc2V0KCdtb29kX2FkZGVkJywgYXN5bmMgKHVzZXJJZD86IHN0cmluZykgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5pbnZhbGlkYXRlVXNlckNhY2hlKCdhbGwnLCB1c2VySWQpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIEhvb2s6IE1hbnVhbCByZWZyZXNoIHJlcXVlc3RlZFxuICAgIHRoaXMuaW52YWxpZGF0aW9uSG9va3Muc2V0KCdtYW51YWxfcmVmcmVzaCcsICgpID0+IHtcbiAgICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBSRU1PVkVEOiB0aGVyYXB5X2NvbXBsZXRlZCAtIEVSUCBtb2R1bGUgZGVsZXRlZFxuICAgIC8vIFJFTU9WRUQ6IGVycF9jb21wbGV0ZWQgLSBFUlAgbW9kdWxlIGRlbGV0ZWRcbiAgfVxuICBcbiAgLy8g4pyFIEYtMDMgJiBGLTA4IEZJWDogdHJpZ2dlckludmFsaWRhdGlvbiB3aXRoIFJlYWN0IFF1ZXJ5IGludGVncmF0aW9uXG4gIHB1YmxpYyBhc3luYyB0cmlnZ2VySW52YWxpZGF0aW9uKGhvb2s6IHN0cmluZywgdXNlcklkPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaW52YWxpZGF0aW9uSG9va3MuZ2V0KGhvb2spO1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBhd2FpdCBoYW5kbGVyKHVzZXJJZCk7IC8vIOKchSBQYXNzIHVzZXJJZCB0byBoYW5kbGVyXG4gICAgfVxuICAgIFxuICAgIC8vIOKchSBGLTA4IEZJWDogRW1pdCBSZWFjdCBRdWVyeSBjYWNoZSBpbnZhbGlkYXRpb25cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlbWl0QUlJbnZhbGlkYXRpb24gfSA9IGF3YWl0IGltcG9ydCgnQC9ob29rcy91c2VDYWNoZUludmFsaWRhdGlvbicpO1xuICAgICAgZW1pdEFJSW52YWxpZGF0aW9uKGhvb2ssIHVzZXJJZCk7XG4gICAgICBjb25zb2xlLmxvZygn8J+kliBSZWFjdCBRdWVyeSBBSSBpbnZhbGlkYXRpb24gdHJpZ2dlcmVkOicsIGhvb2spO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBGYWlsZWQgdG8gZW1pdCBBSSBjYWNoZSBpbnZhbGlkYXRpb246JywgZXJyb3IpO1xuICAgIH1cbiAgICBcbiAgICAvLyBUcmFjayBpbnZhbGlkYXRpb25cbiAgICBhd2FpdCB0cmFja0FJSW50ZXJhY3Rpb24oQUlFdmVudFR5cGUuQ0FDSEVfSU5WQUxJREFUSU9OLCB7XG4gICAgICBob29rLFxuICAgICAgdXNlcklkLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgfSk7XG4gIH1cbiAgXG4gIHByaXZhdGUgYXN5bmMgaW52YWxpZGF0ZVVzZXJDYWNoZSh0eXBlOiAncGF0dGVybnMnIHwgJ2luc2lnaHRzJyB8ICdwcm9ncmVzcycgfCAnY2J0JyB8ICd2b2ljZScgfCAnYWxsJywgdXNlcklkPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qga2V5c1RvRGVsZXRlOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIHRoaXMuY2FjaGUuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICAvLyBGb3IgdW5pZmllZCBwaXBlbGluZSBjYWNoZSBrZXlzLCB3ZSBuZWVkIHRvIG1hdGNoIHVzZXIgYW5kIGludmFsaWRhdGUgYmFzZWQgb24gdHlwZVxuICAgICAgaWYgKHVzZXJJZCAmJiAha2V5LmluY2x1ZGVzKHVzZXJJZCkpIHJldHVybjtcbiAgICAgIFxuICAgICAgLy8gU2luY2UgdW5pZmllZCBwaXBlbGluZSBjYWNoZSBrZXlzIGFyZSBcInVuaWZpZWQ6dXNlcklkOmhhc2hcIiwgd2UgbmVlZCB0byBpbnZhbGlkYXRlIGRpZmZlcmVudGx5XG4gICAgICBpZiAodHlwZSA9PT0gJ2FsbCcpIHtcbiAgICAgICAgLy8gSW52YWxpZGF0ZSBhbGwgdW5pZmllZCBwaXBlbGluZSBrZXlzIGZvciB0aGlzIHVzZXJcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCd1bmlmaWVkOicpKSB7XG4gICAgICAgICAga2V5c1RvRGVsZXRlLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIHNwZWNpZmljIHR5cGVzLCBpbnZhbGlkYXRlIGFsbCB1bmlmaWVkIGtleXMgKHNpbmNlIHRoZXkgY29udGFpbiBtaXhlZCBkYXRhKVxuICAgICAgICAvLyBUaGlzIGVuc3VyZXMgYW55IGNhY2hlIHRoYXQgbWlnaHQgY29udGFpbiB0aGUgY2hhbmdlZCBkYXRhIHR5cGUgaXMgY2xlYXJlZFxuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ3VuaWZpZWQ6JykpIHtcbiAgICAgICAgICBrZXlzVG9EZWxldGUucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgZGVsZXRlZENvdW50ID0ga2V5c1RvRGVsZXRlLmxlbmd0aDtcbiAgICBrZXlzVG9EZWxldGUuZm9yRWFjaChrZXkgPT4gdGhpcy5jYWNoZS5kZWxldGUoa2V5KSk7XG4gICAgXG4gICAgLy8g8J+TiiBDUklUSUNBTCBGSVg6IFRyYWNrIGNhY2hlIGludmFsaWRhdGlvbiB0ZWxlbWV0cnlcbiAgICBpZiAoZGVsZXRlZENvdW50ID4gMCkge1xuICAgICAgYXdhaXQgdHJhY2tBSUludGVyYWN0aW9uKEFJRXZlbnRUeXBlLkNBQ0hFX0lOVkFMSURBVElPTiwge1xuICAgICAgICB1c2VySWQ6IHVzZXJJZCB8fCAndW5rbm93bicsXG4gICAgICAgIGludmFsaWRhdGlvblR5cGU6IHR5cGUsXG4gICAgICAgIGtleXNEZWxldGVkOiBkZWxldGVkQ291bnQsXG4gICAgICAgIGNhY2hlS2V5czoga2V5c1RvRGVsZXRlLnNsaWNlKDAsIDMpLCAvLyBGaXJzdCAzIGtleXMgZm9yIGRlYnVnZ2luZ1xuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhg8J+Xke+4jyBDYWNoZSBpbnZhbGlkYXRlZDogJHt0eXBlfSAoJHtkZWxldGVkQ291bnR9IGtleXMgZGVsZXRlZClgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQWxzbyBpbnZhbGlkYXRlIFN1cGFiYXNlIGNhY2hlXG4gICAgYXdhaXQgdGhpcy5pbnZhbGlkYXRlU3VwYWJhc2VDYWNoZSh0eXBlLCB1c2VySWQpO1xuICB9XG4gIFxuICAvKipcbiAgICog8J+Xke+4jyBTdXBhYmFzZSBDYWNoZSBJbnZhbGlkYXRpb25cbiAgICovXG4gIC8vIOKchSBGLTAzIEZJWDogQ29ycmVjdCBjbGllbnQgZ2V0dGVyIGFuZCB1bmlmaWVkIGNhY2hlIGtleSBmaWx0ZXJpbmdcbiAgcHJpdmF0ZSBhc3luYyBpbnZhbGlkYXRlU3VwYWJhc2VDYWNoZSh0eXBlOiAncGF0dGVybnMnIHwgJ2luc2lnaHRzJyB8ICdhbGwnLCB1c2VySWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgLy8g4pyFIFVzZSBjb3JyZWN0IGNsaWVudCBnZXR0ZXI6IHN1cGFiYXNlU2VydmljZS5zdXBhYmFzZUNsaWVudCAobm90IC5jbGllbnQpXG4gICAgICBjb25zdCBsaWtlUGF0dGVybiA9IHVzZXJJZCA/IGB1bmlmaWVkOiR7dXNlcklkfTolYCA6ICd1bmlmaWVkOiUnO1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2aWNlLnN1cGFiYXNlQ2xpZW50XG4gICAgICAgIC5mcm9tKCdhaV9jYWNoZScpXG4gICAgICAgIC5kZWxldGUoKVxuICAgICAgICAubGlrZSgnY2FjaGVfa2V5JywgbGlrZVBhdHRlcm4pO1xuICAgICAgXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gU3VwYWJhc2UgY2FjaGUgaW52YWxpZGF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5eR77iPIFN1cGFiYXNlIGNhY2hlIGludmFsaWRhdGVkIGZvciAke3R5cGV9JHt1c2VySWQgPyBgICh1c2VyOiAke3VzZXJJZH0pYCA6ICcnfWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBTdXBhYmFzZSBjYWNoZSBpbnZhbGlkYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gQ0FDSEUgQ0xFQU5VUFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIFxuICBwcml2YXRlIHN0YXJ0Q2FjaGVDbGVhbnVwKCk6IHZvaWQge1xuICAgIC8vIFJ1biBjbGVhbnVwIGV2ZXJ5IGhvdXJcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3Qga2V5c1RvRGVsZXRlOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgXG4gICAgICB0aGlzLmNhY2hlLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlLmV4cGlyZXMgPCBub3cpIHtcbiAgICAgICAgICBrZXlzVG9EZWxldGUucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAga2V5c1RvRGVsZXRlLmZvckVhY2goa2V5ID0+IHRoaXMuY2FjaGUuZGVsZXRlKGtleSkpO1xuICAgICAgXG4gICAgICBpZiAoa2V5c1RvRGVsZXRlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coYPCfp7kgQ2xlYW5lZCAke2tleXNUb0RlbGV0ZS5sZW5ndGh9IGV4cGlyZWQgY2FjaGUgZW50cmllc2ApO1xuICAgICAgfVxuICAgIH0sIDYwICogNjAgKiAxMDAwKTsgLy8gMSBob3VyXG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflK4gUFJFRElDVElWRSBNT09EIElOVEVSVkVOVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIPCflK4gUHJlZGljdGl2ZSBNb29kIEludGVydmVudGlvbiAtIEFJLXBvd2VyZWQgbW9vZCBkcm9wIHByZWRpY3Rpb24gYW5kIHByb2FjdGl2ZSBpbnRlcnZlbnRpb25zXG4gICAqL1xuICBhc3luYyBwcmVkaWN0TW9vZEludGVydmVudGlvbihcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICByZWNlbnRNb29kRW50cmllczogYW55W10sXG4gICAgY3VycmVudE1vb2RTdGF0ZT86IGFueVxuICApOiBQcm9taXNlPHtcbiAgICByaXNrTGV2ZWw6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAnY3JpdGljYWwnO1xuICAgIHByZWRpY3RlZERyb3A/OiB7XG4gICAgICBsaWtlbGlob29kOiBudW1iZXI7XG4gICAgICB0aW1lZnJhbWU6IHN0cmluZztcbiAgICAgIHNldmVyaXR5OiBudW1iZXI7XG4gICAgfTtcbiAgICBpbnRlcnZlbnRpb25zOiBBcnJheTx7XG4gICAgICB0eXBlOiAnaW1tZWRpYXRlJyB8ICdwcmV2ZW50aXZlJyB8ICdlbWVyZ2VuY3knO1xuICAgICAgcHJpb3JpdHk6IG51bWJlcjtcbiAgICAgIGFjdGlvbjogc3RyaW5nO1xuICAgICAgcmVhc29uOiBzdHJpbmc7XG4gICAgICBlZmZlY3RpdmVuZXNzUHJvYmFiaWxpdHk6IG51bWJlcjtcbiAgICB9PjtcbiAgICByaXNrRmFjdG9yczogQXJyYXk8e1xuICAgICAgZmFjdG9yOiBzdHJpbmc7XG4gICAgICBpbXBhY3Q6IG51bWJlcjtcbiAgICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgICB9PjtcbiAgICBlYXJseVdhcm5pbmc/OiB7XG4gICAgICB0cmlnZ2VyZWQ6IGJvb2xlYW47XG4gICAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgICB1cmdlbmN5OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnO1xuICAgIH07XG4gIH0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UriBTdGFydGluZyBwcmVkaWN0aXZlIG1vb2QgaW50ZXJ2ZW50aW9uIGFuYWx5c2lzLi4uJyk7XG5cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIFxuICAgIC8vIFRyYWNrIGludGVydmVudGlvbiBhbmFseXNpcyBzdGFydFxuICAgIGF3YWl0IHRyYWNrQUlJbnRlcmFjdGlvbihBSUV2ZW50VHlwZS5JTlNJR0hUU19SRVFVRVNURUQsIHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIGRhdGFUeXBlOiAncHJlZGljdGl2ZV9tb29kX2ludGVydmVudGlvbicsXG4gICAgICBlbnRyeUNvdW50OiByZWNlbnRNb29kRW50cmllcy5sZW5ndGgsXG4gICAgICB0aW1lc3RhbXA6IHN0YXJ0VGltZVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIDEuIEFOQUxZWkUgUkVDRU5UIFRSRU5EU1xuICAgICAgY29uc3QgdHJlbmRBbmFseXNpcyA9IHRoaXMuYW5hbHl6ZU1vb2RUcmVuZHMocmVjZW50TW9vZEVudHJpZXMpO1xuICAgICAgXG4gICAgICAvLyAyLiBJREVOVElGWSBSSVNLIEZBQ1RPUlNcbiAgICAgIGNvbnN0IHJpc2tGYWN0b3JzID0gdGhpcy5pZGVudGlmeU1vb2RSaXNrRmFjdG9ycyhyZWNlbnRNb29kRW50cmllcywgdHJlbmRBbmFseXNpcyk7XG4gICAgICBcbiAgICAgIC8vIDMuIENBTENVTEFURSBSSVNLIExFVkVMXG4gICAgICBjb25zdCByaXNrTGV2ZWwgPSB0aGlzLmNhbGN1bGF0ZU1vb2RSaXNrTGV2ZWwocmlza0ZhY3RvcnMsIHRyZW5kQW5hbHlzaXMpO1xuICAgICAgXG4gICAgICAvLyA0LiBQUkVESUNUIE1PT0QgRFJPUFxuICAgICAgY29uc3QgcHJlZGljdGVkRHJvcCA9IHRoaXMucHJlZGljdE1vb2REcm9wKHJlY2VudE1vb2RFbnRyaWVzLCB0cmVuZEFuYWx5c2lzLCByaXNrRmFjdG9ycyk7XG4gICAgICBcbiAgICAgIC8vIDUuIEdFTkVSQVRFIElOVEVSVkVOVElPTlNcbiAgICAgIGNvbnN0IGludGVydmVudGlvbnMgPSB0aGlzLmdlbmVyYXRlTW9vZEludGVydmVudGlvbnMocmlza0xldmVsLCByaXNrRmFjdG9ycywgcHJlZGljdGVkRHJvcCk7XG4gICAgICBcbiAgICAgIC8vIDYuIEVBUkxZIFdBUk5JTkcgU1lTVEVNXG4gICAgICBjb25zdCBlYXJseVdhcm5pbmcgPSB0aGlzLmNoZWNrRWFybHlXYXJuaW5nVHJpZ2dlcnMocmlza0xldmVsLCBwcmVkaWN0ZWREcm9wLCByaXNrRmFjdG9ycyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgcmlza0xldmVsLFxuICAgICAgICBwcmVkaWN0ZWREcm9wLFxuICAgICAgICBpbnRlcnZlbnRpb25zLFxuICAgICAgICByaXNrRmFjdG9ycyxcbiAgICAgICAgZWFybHlXYXJuaW5nXG4gICAgICB9O1xuXG4gICAgICAvLyBUcmFjayBzdWNjZXNzZnVsIGludGVydmVudGlvbiBhbmFseXNpc1xuICAgICAgYXdhaXQgdHJhY2tBSUludGVyYWN0aW9uKEFJRXZlbnRUeXBlLklOU0lHSFRTX0RFTElWRVJFRCwge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHNvdXJjZTogJ3ByZWRpY3RpdmVfbW9vZF9pbnRlcnZlbnRpb24nLFxuICAgICAgICBpbnNpZ2h0c0NvdW50OiBpbnRlcnZlbnRpb25zLmxlbmd0aCxcbiAgICAgICAgcHJvY2Vzc2luZ1RpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWUsXG4gICAgICAgIHJpc2tMZXZlbCxcbiAgICAgICAgZWFybHlXYXJuaW5nVHJpZ2dlcmVkOiBlYXJseVdhcm5pbmc/LnRyaWdnZXJlZCB8fCBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKGDinIUgUHJlZGljdGl2ZSBtb29kIGludGVydmVudGlvbiBjb21wbGV0ZWQ6ICR7cmlza0xldmVsfSByaXNrYCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBQcmVkaWN0aXZlIG1vb2QgaW50ZXJ2ZW50aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICBcbiAgICAgIGF3YWl0IHRyYWNrQUlJbnRlcmFjdGlvbihBSUV2ZW50VHlwZS5TWVNURU1fRVJST1IsIHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBjb21wb25lbnQ6ICdwcmVkaWN0aXZlTW9vZEludGVydmVudGlvbicsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvciksXG4gICAgICAgIHByb2Nlc3NpbmdUaW1lOiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lXG4gICAgICB9KTtcblxuICAgICAgLy8gUmV0dXJuIHNhZmUgZmFsbGJhY2tcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJpc2tMZXZlbDogJ2xvdycsXG4gICAgICAgIGludGVydmVudGlvbnM6IFt7XG4gICAgICAgICAgdHlwZTogJ2ltbWVkaWF0ZScsXG4gICAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgICAgYWN0aW9uOiAnRMO8emVubGkgbW9vZCB0YWtpYmluZSBkZXZhbSBlZGluJyxcbiAgICAgICAgICByZWFzb246ICdWZXJpIGFuYWxpemkgc8SxcmFzxLFuZGEgaGF0YSBvbHXFn3R1JyxcbiAgICAgICAgICBlZmZlY3RpdmVuZXNzUHJvYmFiaWxpdHk6IDAuNVxuICAgICAgICB9XSxcbiAgICAgICAgcmlza0ZhY3RvcnM6IFtdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gTU9PRCBUUkVORCBBTkFMWVNJUyBIRUxQRVJTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBwcml2YXRlIGFuYWx5emVNb29kVHJlbmRzKGVudHJpZXM6IGFueVtdKToge1xuICAgIHRyZW5kOiAnZGVjbGluaW5nJyB8ICdzdGFibGUnIHwgJ2ltcHJvdmluZyc7XG4gICAgc2xvcGU6IG51bWJlcjtcbiAgICB2b2xhdGlsaXR5OiBudW1iZXI7XG4gICAgcmVjZW50QXZlcmFnZTogbnVtYmVyO1xuICAgIHdlZWtseUNoYW5nZTogbnVtYmVyO1xuICB9IHtcbiAgICBpZiAoZW50cmllcy5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmVuZDogJ3N0YWJsZScsXG4gICAgICAgIHNsb3BlOiAwLFxuICAgICAgICB2b2xhdGlsaXR5OiAwLFxuICAgICAgICByZWNlbnRBdmVyYWdlOiA1MCxcbiAgICAgICAgd2Vla2x5Q2hhbmdlOiAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFNvcnQgYnkgdGltZXN0YW1wXG4gICAgY29uc3Qgc29ydGVkRW50cmllcyA9IGVudHJpZXMuc29ydCgoYSwgYikgPT4gXG4gICAgICBuZXcgRGF0ZShhLnRpbWVzdGFtcCB8fCBhLmNyZWF0ZWRfYXQpLmdldFRpbWUoKSAtIFxuICAgICAgbmV3IERhdGUoYi50aW1lc3RhbXAgfHwgYi5jcmVhdGVkX2F0KS5nZXRUaW1lKClcbiAgICApO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRyZW5kIChsaW5lYXIgcmVncmVzc2lvbiBzbG9wZSlcbiAgICBjb25zdCBzY29yZXMgPSBzb3J0ZWRFbnRyaWVzLm1hcChlID0+IGUubW9vZF9zY29yZSB8fCBlLm1vb2QgfHwgNTApO1xuICAgIGNvbnN0IG4gPSBzY29yZXMubGVuZ3RoO1xuICAgIGNvbnN0IHN1bVggPSAoKG4gLSAxKSAqIG4pIC8gMjsgLy8gMCArIDEgKyAyICsgLi4uICsgKG4tMSlcbiAgICBjb25zdCBzdW1ZID0gc2NvcmVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgIGNvbnN0IHN1bVhZID0gc2NvcmVzLnJlZHVjZSgoc3VtLCB5LCB4KSA9PiBzdW0gKyAoeCAqIHkpLCAwKTtcbiAgICBjb25zdCBzdW1YWCA9ICgobiAtIDEpICogbiAqICgyICogbiAtIDEpKSAvIDY7XG5cbiAgICBjb25zdCBzbG9wZSA9IChuICogc3VtWFkgLSBzdW1YICogc3VtWSkgLyAobiAqIHN1bVhYIC0gc3VtWCAqIHN1bVgpO1xuICAgIFxuICAgIC8vIERldGVybWluZSB0cmVuZFxuICAgIGxldCB0cmVuZDogJ2RlY2xpbmluZycgfCAnc3RhYmxlJyB8ICdpbXByb3ZpbmcnID0gJ3N0YWJsZSc7XG4gICAgaWYgKHNsb3BlIDwgLTIpIHRyZW5kID0gJ2RlY2xpbmluZyc7XG4gICAgZWxzZSBpZiAoc2xvcGUgPiAyKSB0cmVuZCA9ICdpbXByb3ZpbmcnO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHZvbGF0aWxpdHkgKHN0YW5kYXJkIGRldmlhdGlvbilcbiAgICBjb25zdCBtZWFuID0gc3VtWSAvIG47XG4gICAgY29uc3QgdmFyaWFuY2UgPSBzY29yZXMucmVkdWNlKChzdW0sIHNjb3JlKSA9PiBzdW0gKyBNYXRoLnBvdyhzY29yZSAtIG1lYW4sIDIpLCAwKSAvIG47XG4gICAgY29uc3Qgdm9sYXRpbGl0eSA9IE1hdGguc3FydCh2YXJpYW5jZSk7XG5cbiAgICAvLyBSZWNlbnQgYXZlcmFnZSAobGFzdCAzIGVudHJpZXMpXG4gICAgY29uc3QgcmVjZW50RW50cmllcyA9IHNvcnRlZEVudHJpZXMuc2xpY2UoLTMpO1xuICAgIGNvbnN0IHJlY2VudEF2ZXJhZ2UgPSByZWNlbnRFbnRyaWVzLnJlZHVjZSgoc3VtLCBlKSA9PiBzdW0gKyAoZS5tb29kX3Njb3JlIHx8IGUubW9vZCB8fCA1MCksIDApIC8gcmVjZW50RW50cmllcy5sZW5ndGg7XG5cbiAgICAvLyBXZWVrbHkgY2hhbmdlIChpZiBlbm91Z2ggZGF0YSlcbiAgICBjb25zdCB3ZWVrbHlDaGFuZ2UgPSBlbnRyaWVzLmxlbmd0aCA+PSA3IFxuICAgICAgPyAoc2NvcmVzW3Njb3Jlcy5sZW5ndGggLSAxXSAtIHNjb3Jlc1tNYXRoLm1heCgwLCBzY29yZXMubGVuZ3RoIC0gNyldKVxuICAgICAgOiAwO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRyZW5kLFxuICAgICAgc2xvcGUsXG4gICAgICB2b2xhdGlsaXR5LFxuICAgICAgcmVjZW50QXZlcmFnZSxcbiAgICAgIHdlZWtseUNoYW5nZVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGlkZW50aWZ5TW9vZFJpc2tGYWN0b3JzKGVudHJpZXM6IGFueVtdLCB0cmVuZEFuYWx5c2lzOiBhbnkpOiBBcnJheTx7XG4gICAgZmFjdG9yOiBzdHJpbmc7XG4gICAgaW1wYWN0OiBudW1iZXI7XG4gICAgY29uZmlkZW5jZTogbnVtYmVyO1xuICB9PiB7XG4gICAgY29uc3Qgcmlza0ZhY3RvcnM6IEFycmF5PHsgZmFjdG9yOiBzdHJpbmc7IGltcGFjdDogbnVtYmVyOyBjb25maWRlbmNlOiBudW1iZXIgfT4gPSBbXTtcblxuICAgIC8vIDEuIERFQ0xJTklORyBUUkVORFxuICAgIGlmICh0cmVuZEFuYWx5c2lzLnRyZW5kID09PSAnZGVjbGluaW5nJyAmJiBNYXRoLmFicyh0cmVuZEFuYWx5c2lzLnNsb3BlKSA+IDMpIHtcbiAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xuICAgICAgICBmYWN0b3I6ICdkZWNsaW5pbmdfdHJlbmQnLFxuICAgICAgICBpbXBhY3Q6IE1hdGgubWluKDEwLCBNYXRoLmFicyh0cmVuZEFuYWx5c2lzLnNsb3BlKSAvIDIpLFxuICAgICAgICBjb25maWRlbmNlOiAwLjhcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIDIuIEhJR0ggVk9MQVRJTElUWVxuICAgIGlmICh0cmVuZEFuYWx5c2lzLnZvbGF0aWxpdHkgPiAxNSkge1xuICAgICAgcmlza0ZhY3RvcnMucHVzaCh7XG4gICAgICAgIGZhY3RvcjogJ2hpZ2hfdm9sYXRpbGl0eScsXG4gICAgICAgIGltcGFjdDogdHJlbmRBbmFseXNpcy52b2xhdGlsaXR5IC8gNSxcbiAgICAgICAgY29uZmlkZW5jZTogMC43XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyAzLiBMT1cgUkVDRU5UIEFWRVJBR0VcbiAgICBpZiAodHJlbmRBbmFseXNpcy5yZWNlbnRBdmVyYWdlIDwgMzUpIHtcbiAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xuICAgICAgICBmYWN0b3I6ICdsb3dfcmVjZW50X21vb2QnLFxuICAgICAgICBpbXBhY3Q6ICg1MCAtIHRyZW5kQW5hbHlzaXMucmVjZW50QXZlcmFnZSkgLyAzLFxuICAgICAgICBjb25maWRlbmNlOiAwLjlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIDQuIFJFQ1VSUklORyBQQVRURVJOU1xuICAgIGNvbnN0IHJlY3VycmluZ0xvd0RheXMgPSB0aGlzLmRldGVjdFJlY3VycmluZ0xvd01vb2REYXlzKGVudHJpZXMpO1xuICAgIGlmIChyZWN1cnJpbmdMb3dEYXlzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xuICAgICAgICBmYWN0b3I6ICdyZWN1cnJpbmdfbG93X2RheXMnLFxuICAgICAgICBpbXBhY3Q6IHJlY3VycmluZ0xvd0RheXMubGVuZ3RoICogMixcbiAgICAgICAgY29uZmlkZW5jZTogMC42XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyA1LiBUUklHR0VSIEZSRVFVRU5DWVxuICAgIGNvbnN0IGhpZ2hJbXBhY3RUcmlnZ2VycyA9IHRoaXMuYW5hbHl6ZUhpZ2hJbXBhY3RUcmlnZ2VycyhlbnRyaWVzKTtcbiAgICBpZiAoaGlnaEltcGFjdFRyaWdnZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xuICAgICAgICBmYWN0b3I6ICdmcmVxdWVudF90cmlnZ2VycycsXG4gICAgICAgIGltcGFjdDogaGlnaEltcGFjdFRyaWdnZXJzLmxlbmd0aCAqIDEuNSxcbiAgICAgICAgY29uZmlkZW5jZTogMC43XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmlza0ZhY3RvcnM7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZU1vb2RSaXNrTGV2ZWwocmlza0ZhY3RvcnM6IGFueVtdLCB0cmVuZEFuYWx5c2lzOiBhbnkpOiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2NyaXRpY2FsJyB7XG4gICAgLy8gQ2FsY3VsYXRlIHRvdGFsIHJpc2sgc2NvcmVcbiAgICBjb25zdCB0b3RhbFJpc2sgPSByaXNrRmFjdG9ycy5yZWR1Y2UoKHN1bSwgZmFjdG9yKSA9PiBcbiAgICAgIHN1bSArIChmYWN0b3IuaW1wYWN0ICogZmFjdG9yLmNvbmZpZGVuY2UpLCAwXG4gICAgKTtcblxuICAgIC8vIEFkZGl0aW9uYWwgcmlzayBmcm9tIHRyZW5kIGFuYWx5c2lzXG4gICAgbGV0IHRyZW5kUmlzayA9IDA7XG4gICAgaWYgKHRyZW5kQW5hbHlzaXMudHJlbmQgPT09ICdkZWNsaW5pbmcnKSB0cmVuZFJpc2sgKz0gNTtcbiAgICBpZiAodHJlbmRBbmFseXNpcy5yZWNlbnRBdmVyYWdlIDwgMzApIHRyZW5kUmlzayArPSAxMDtcbiAgICBpZiAodHJlbmRBbmFseXNpcy52b2xhdGlsaXR5ID4gMjApIHRyZW5kUmlzayArPSA1O1xuXG4gICAgY29uc3QgY29tYmluZWRSaXNrID0gdG90YWxSaXNrICsgdHJlbmRSaXNrO1xuXG4gICAgaWYgKGNvbWJpbmVkUmlzayA+PSAyNSkgcmV0dXJuICdjcml0aWNhbCc7XG4gICAgaWYgKGNvbWJpbmVkUmlzayA+PSAxNSkgcmV0dXJuICdoaWdoJztcbiAgICBpZiAoY29tYmluZWRSaXNrID49IDgpIHJldHVybiAnbWVkaXVtJztcbiAgICByZXR1cm4gJ2xvdyc7XG4gIH1cblxuICBwcml2YXRlIHByZWRpY3RNb29kRHJvcChlbnRyaWVzOiBhbnlbXSwgdHJlbmRBbmFseXNpczogYW55LCByaXNrRmFjdG9yczogYW55W10pOiB7XG4gICAgbGlrZWxpaG9vZDogbnVtYmVyO1xuICAgIHRpbWVmcmFtZTogc3RyaW5nO1xuICAgIHNldmVyaXR5OiBudW1iZXI7XG4gIH0gfCB1bmRlZmluZWQge1xuICAgIC8vIE9ubHkgcHJlZGljdCBpZiB0aGVyZSBhcmUgc3VmZmljaWVudCByaXNrIGluZGljYXRvcnNcbiAgICBpZiAocmlza0ZhY3RvcnMubGVuZ3RoID09PSAwIHx8IHRyZW5kQW5hbHlzaXMudHJlbmQgIT09ICdkZWNsaW5pbmcnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSBsaWtlbGlob29kIGJhc2VkIG9uIHJpc2sgZmFjdG9yc1xuICAgIGNvbnN0IHJpc2tTY29yZSA9IHJpc2tGYWN0b3JzLnJlZHVjZSgoc3VtLCBmYWN0b3IpID0+IHN1bSArIGZhY3Rvci5pbXBhY3QgKiBmYWN0b3IuY29uZmlkZW5jZSwgMCk7XG4gICAgY29uc3QgbGlrZWxpaG9vZCA9IE1hdGgubWluKDAuOTUsIHJpc2tTY29yZSAvIDIwKTtcblxuICAgIC8vIERldGVybWluZSB0aW1lZnJhbWUgYmFzZWQgb24gdHJlbmQgc2xvcGVcbiAgICBsZXQgdGltZWZyYW1lID0gJzEtMiBoYWZ0YSc7XG4gICAgaWYgKE1hdGguYWJzKHRyZW5kQW5hbHlzaXMuc2xvcGUpID4gNSkgdGltZWZyYW1lID0gJzMtNSBnw7xuJztcbiAgICBlbHNlIGlmIChNYXRoLmFicyh0cmVuZEFuYWx5c2lzLnNsb3BlKSA+IDMpIHRpbWVmcmFtZSA9ICcxIGhhZnRhJztcblxuICAgIC8vIFByZWRpY3Qgc2V2ZXJpdHkgb2YgZHJvcFxuICAgIGNvbnN0IGN1cnJlbnRMZXZlbCA9IHRyZW5kQW5hbHlzaXMucmVjZW50QXZlcmFnZTtcbiAgICBjb25zdCBwb3RlbnRpYWxEcm9wID0gTWF0aC5hYnModHJlbmRBbmFseXNpcy5zbG9wZSkgKiAzOyAvLyAzIGRheSBwcm9qZWN0aW9uXG4gICAgY29uc3Qgc2V2ZXJpdHkgPSBNYXRoLm1pbigxMCwgcG90ZW50aWFsRHJvcCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGlrZWxpaG9vZCxcbiAgICAgIHRpbWVmcmFtZSxcbiAgICAgIHNldmVyaXR5XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVNb29kSW50ZXJ2ZW50aW9ucyhcbiAgICByaXNrTGV2ZWw6IHN0cmluZywgXG4gICAgcmlza0ZhY3RvcnM6IGFueVtdLCBcbiAgICBwcmVkaWN0ZWREcm9wPzogYW55XG4gICk6IEFycmF5PHtcbiAgICB0eXBlOiAnaW1tZWRpYXRlJyB8ICdwcmV2ZW50aXZlJyB8ICdlbWVyZ2VuY3knO1xuICAgIHByaW9yaXR5OiBudW1iZXI7XG4gICAgYWN0aW9uOiBzdHJpbmc7XG4gICAgcmVhc29uOiBzdHJpbmc7XG4gICAgZWZmZWN0aXZlbmVzc1Byb2JhYmlsaXR5OiBudW1iZXI7XG4gIH0+IHtcbiAgICBjb25zdCBpbnRlcnZlbnRpb25zOiBhbnlbXSA9IFtdO1xuXG4gICAgLy8gSU1NRURJQVRFIElOVEVSVkVOVElPTlNcbiAgICBpZiAocmlza0xldmVsID09PSAnaGlnaCcgfHwgcmlza0xldmVsID09PSAnY3JpdGljYWwnKSB7XG4gICAgICBpbnRlcnZlbnRpb25zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaW1tZWRpYXRlJyxcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGFjdGlvbjogJ0hlbWVuIG5lZmVzIGVnemVyc2l6aSB5YXDEsW4gKDQtNy04IHRla25pxJ9pKScsXG4gICAgICAgIHJlYXNvbjogJ0Fua3NpeWV0ZSB2ZSBzdHJlcyBzZXZpeWVsZXJpbmkgaMSxemxhIGTDvMWfw7xyw7xyJyxcbiAgICAgICAgZWZmZWN0aXZlbmVzc1Byb2JhYmlsaXR5OiAwLjg1XG4gICAgICB9KTtcblxuICAgICAgaW50ZXJ2ZW50aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2ltbWVkaWF0ZScsXG4gICAgICAgIHByaW9yaXR5OiAyLFxuICAgICAgICBhY3Rpb246ICdHw7x2ZW5pbGlyIGJpciBhcmthZGHFnyB2ZXlhIGFpbGUgw7x5ZXNpIGlsZSBrb251xZ91bicsXG4gICAgICAgIHJlYXNvbjogJ1Nvc3lhbCBkZXN0ZWsgbW9vZCBpeWlsZcWfbWVzaW5kZSBrYW7EsXRsYW5txLHFnyBldGtpIGfDtnN0ZXJpcicsXG4gICAgICAgIGVmZmVjdGl2ZW5lc3NQcm9iYWJpbGl0eTogMC43NVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUFJFVkVOVElWRSBJTlRFUlZFTlRJT05TXG4gICAgaWYgKHJpc2tMZXZlbCA9PT0gJ21lZGl1bScgfHwgcmlza0xldmVsID09PSAnaGlnaCcpIHtcbiAgICAgIGludGVydmVudGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdwcmV2ZW50aXZlJyxcbiAgICAgICAgcHJpb3JpdHk6IDMsXG4gICAgICAgIGFjdGlvbjogJ0fDvG5sw7xrIDEwIGRha2lrYSBtaW5kZnVsbmVzcyBtZWRpdGFzeW9udSBiYcWfbGF0xLFuJyxcbiAgICAgICAgcmVhc29uOiAnRMO8emVubGkgbWVkaXRhc3lvbiBtb29kIHN0YWJpbGl0ZXNpbmkgYXJ0xLFyxLFyJyxcbiAgICAgICAgZWZmZWN0aXZlbmVzc1Byb2JhYmlsaXR5OiAwLjcwXG4gICAgICB9KTtcblxuICAgICAgaW50ZXJ2ZW50aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3ByZXZlbnRpdmUnLFxuICAgICAgICBwcmlvcml0eTogNCxcbiAgICAgICAgYWN0aW9uOiAnVXlrdSBydXRpbmluaXppIG9wdGltaXplIGVkaW4gKDIyOjAwLTA2OjAwKScsXG4gICAgICAgIHJlYXNvbjogJ0TDvHplbmxpIHV5a3UgbW9vZCBkZW5nZXNpIGnDp2luIGtyaXRpayBmYWt0w7ZyZMO8cicsXG4gICAgICAgIGVmZmVjdGl2ZW5lc3NQcm9iYWJpbGl0eTogMC44MFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUklTSy1TUEVDSUZJQyBJTlRFUlZFTlRJT05TXG4gICAgcmlza0ZhY3RvcnMuZm9yRWFjaChmYWN0b3IgPT4ge1xuICAgICAgc3dpdGNoIChmYWN0b3IuZmFjdG9yKSB7XG4gICAgICAgIGNhc2UgJ2RlY2xpbmluZ190cmVuZCc6XG4gICAgICAgICAgaW50ZXJ2ZW50aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdwcmV2ZW50aXZlJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiA1LFxuICAgICAgICAgICAgYWN0aW9uOiAnSGFmdGFsxLFrIG1vb2QgdHJhY2tpbmcgcGF0dGVybiBhbmFsaXppIHlhcMSxbicsXG4gICAgICAgICAgICByZWFzb246ICdUcmVuZGluaXppIGFubGF5YXJhayBwcm9ha3RpZiBhZMSxbWxhciBhdGFiaWxpcnNpbml6JyxcbiAgICAgICAgICAgIGVmZmVjdGl2ZW5lc3NQcm9iYWJpbGl0eTogMC42NVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICBjYXNlICdoaWdoX3ZvbGF0aWxpdHknOlxuICAgICAgICAgIGludGVydmVudGlvbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAncHJldmVudGl2ZScsXG4gICAgICAgICAgICBwcmlvcml0eTogNixcbiAgICAgICAgICAgIGFjdGlvbjogJ0fDvG5sw7xrIHlhxZ9hbSBydXRpbmluaXppIHN0YW5kYXJkaXplIGVkaW4nLFxuICAgICAgICAgICAgcmVhc29uOiAnRMO8emVubGkgcnV0aW5sZXIgbW9vZCBkYWxnYWxhbm1hbGFyxLFuxLEgYXphbHTEsXInLFxuICAgICAgICAgICAgZWZmZWN0aXZlbmVzc1Byb2JhYmlsaXR5OiAwLjYwXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZnJlcXVlbnRfdHJpZ2dlcnMnOlxuICAgICAgICAgIGludGVydmVudGlvbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAncHJldmVudGl2ZScsXG4gICAgICAgICAgICBwcmlvcml0eTogNyxcbiAgICAgICAgICAgIGFjdGlvbjogJ1RldGlrbGV5aWNpIGR1cnVtbGFyIGnDp2luIGJhxZ9hIMOnxLFrbWEgc3RyYXRlamlsZXJpIGdlbGnFn3RpcmluJyxcbiAgICAgICAgICAgIHJlYXNvbjogJ1Byb2FrdGlmIHN0cmF0ZWppIG1vb2QgZMO8xZ/DvMWfbGVyaW5pIMO2bmxlcicsXG4gICAgICAgICAgICBlZmZlY3RpdmVuZXNzUHJvYmFiaWxpdHk6IDAuNzBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEVNRVJHRU5DWSBJTlRFUlZFTlRJT05TXG4gICAgaWYgKHJpc2tMZXZlbCA9PT0gJ2NyaXRpY2FsJykge1xuICAgICAgaW50ZXJ2ZW50aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2VtZXJnZW5jeScsXG4gICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICBhY3Rpb246ICdBY2lsIGRlc3RlayBoYXRsYXLEsW5kYW4geWFyZMSxbSBhbMSxbiB2ZXlhIHByb2Zlc3lvbmVsIGRlc3RlayBhcmF5xLFuJyxcbiAgICAgICAgcmVhc29uOiAnS3JpdGlrIG1vb2Qgc2V2aXllbGVyaW5kZSBwcm9mZXN5b25lbCBtw7xkYWhhbGUgZ2VyZWtsaWRpcicsXG4gICAgICAgIGVmZmVjdGl2ZW5lc3NQcm9iYWJpbGl0eTogMC45NVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVydmVudGlvbnMuc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0Vhcmx5V2FybmluZ1RyaWdnZXJzKFxuICAgIHJpc2tMZXZlbDogc3RyaW5nLCBcbiAgICBwcmVkaWN0ZWREcm9wOiBhbnksIFxuICAgIHJpc2tGYWN0b3JzOiBhbnlbXVxuICApOiB7XG4gICAgdHJpZ2dlcmVkOiBib29sZWFuO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICB1cmdlbmN5OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnO1xuICB9IHwgdW5kZWZpbmVkIHtcbiAgICBcbiAgICBpZiAocmlza0xldmVsID09PSAnY3JpdGljYWwnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmlnZ2VyZWQ6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdLcml0aWsgbW9vZCBzZXZpeWVzaSB0ZXNwaXQgZWRpbGRpLiBMw7x0ZmVuIGhlbWVuIGRlc3RlayBhbMSxbi4nLFxuICAgICAgICB1cmdlbmN5OiAnaGlnaCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHJpc2tMZXZlbCA9PT0gJ2hpZ2gnICYmIHByZWRpY3RlZERyb3A/Lmxpa2VsaWhvb2QgPiAwLjcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRyaWdnZXJlZDogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogYFnDvGtzZWsgbW9vZCBkw7zFn8O8xZ8gcmlza2k6ICR7cHJlZGljdGVkRHJvcC50aW1lZnJhbWV9IGnDp2luZGUgZGlra2F0bGkgb2x1bi5gLFxuICAgICAgICB1cmdlbmN5OiAnbWVkaXVtJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAocmlza0xldmVsID09PSAnbWVkaXVtJyAmJiByaXNrRmFjdG9ycy5sZW5ndGggPj0gMykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHJpZ2dlcmVkOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnQmlyZGVuIGZhemxhIHJpc2sgZmFrdMO2csO8IHRlc3BpdCBlZGlsZGkuIFByb2FrdGlmIMO2bmxlbWxlciBhbMSxbi4nLFxuICAgICAgICB1cmdlbmN5OiAnbG93J1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZHMgZm9yIHJpc2sgZmFjdG9yIGRldGVjdGlvblxuICBwcml2YXRlIGRldGVjdFJlY3VycmluZ0xvd01vb2REYXlzKGVudHJpZXM6IGFueVtdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGRheU1vb2RzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXJbXT4gPSB7fTtcbiAgICBcbiAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgY29uc3QgZGF5T2ZXZWVrID0gbmV3IERhdGUoZW50cnkudGltZXN0YW1wIHx8IGVudHJ5LmNyZWF0ZWRfYXQpLmdldERheSgpO1xuICAgICAgY29uc3QgbW9vZCA9IGVudHJ5Lm1vb2Rfc2NvcmUgfHwgZW50cnkubW9vZCB8fCA1MDtcbiAgICAgIFxuICAgICAgaWYgKCFkYXlNb29kc1tkYXlPZldlZWtdKSBkYXlNb29kc1tkYXlPZldlZWtdID0gW107XG4gICAgICBkYXlNb29kc1tkYXlPZldlZWtdLnB1c2gobW9vZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBsb3dNb29kRGF5czogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBkYXlOYW1lcyA9IFsnUGF6YXInLCAnUGF6YXJ0ZXNpJywgJ1NhbMSxJywgJ8OHYXLFn2FtYmEnLCAnUGVyxZ9lbWJlJywgJ0N1bWEnLCAnQ3VtYXJ0ZXNpJ107XG5cbiAgICBPYmplY3QuZW50cmllcyhkYXlNb29kcykuZm9yRWFjaCgoW2RheSwgbW9vZHNdKSA9PiB7XG4gICAgICBjb25zdCBhdmdNb29kID0gbW9vZHMucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkgLyBtb29kcy5sZW5ndGg7XG4gICAgICBpZiAoYXZnTW9vZCA8IDQwICYmIG1vb2RzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIGxvd01vb2REYXlzLnB1c2goZGF5TmFtZXNbcGFyc2VJbnQoZGF5KV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxvd01vb2REYXlzO1xuICB9XG5cbiAgcHJpdmF0ZSBhbmFseXplSGlnaEltcGFjdFRyaWdnZXJzKGVudHJpZXM6IGFueVtdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHRyaWdnZXJJbXBhY3Q6IFJlY29yZDxzdHJpbmcsIHsgdG90YWxJbXBhY3Q6IG51bWJlcjsgY291bnQ6IG51bWJlciB9PiA9IHt9O1xuICAgIFxuICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICBpZiAoZW50cnkudHJpZ2dlcnMgJiYgQXJyYXkuaXNBcnJheShlbnRyeS50cmlnZ2VycykpIHtcbiAgICAgICAgZW50cnkudHJpZ2dlcnMuZm9yRWFjaCgodHJpZ2dlcjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgbW9vZEltcGFjdCA9IDUwIC0gKGVudHJ5Lm1vb2Rfc2NvcmUgfHwgZW50cnkubW9vZCB8fCA1MCk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKCF0cmlnZ2VySW1wYWN0W3RyaWdnZXJdKSB7XG4gICAgICAgICAgICB0cmlnZ2VySW1wYWN0W3RyaWdnZXJdID0geyB0b3RhbEltcGFjdDogMCwgY291bnQ6IDAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgdHJpZ2dlckltcGFjdFt0cmlnZ2VyXS50b3RhbEltcGFjdCArPSBtb29kSW1wYWN0O1xuICAgICAgICAgIHRyaWdnZXJJbXBhY3RbdHJpZ2dlcl0uY291bnQgKz0gMTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModHJpZ2dlckltcGFjdClcbiAgICAgIC5maWx0ZXIoKFtfLCBkYXRhXSkgPT4ge1xuICAgICAgICBjb25zdCBhdmdJbXBhY3QgPSBkYXRhLnRvdGFsSW1wYWN0IC8gZGF0YS5jb3VudDtcbiAgICAgICAgcmV0dXJuIGF2Z0ltcGFjdCA+IDEwICYmIGRhdGEuY291bnQgPj0gMjtcbiAgICAgIH0pXG4gICAgICAubWFwKChbdHJpZ2dlciwgX10pID0+IHRyaWdnZXIpO1xuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDwn5SnIE1JU1NJTkcgUEFUVEVSTiBFWFRSQUNUSU9OIE1FVEhPRFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cblxuICAvKipcbiAgICog8J+TiiBFeHRyYWN0IGVuaGFuY2VkIG1vb2QgdGVtcG9yYWwgcGF0dGVybnMgd2l0aCBkYXNoYm9hcmQgbWV0cmljc1xuICAgKiBHZW5lcmF0ZXMgY29tcHJlaGVuc2l2ZSBtb29kIGFuYWx5dGljcyBmb3IgZGlyZWN0IGRhc2hib2FyZCBjb25zdW1wdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBleHRyYWN0TW9vZFRlbXBvcmFsUGF0dGVybnMobW9vZHM6IGFueVtdKTogYW55W10ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXR0ZXJuczogYW55W10gPSBbXTtcbiAgICAgIGlmICghbW9vZHMgfHwgbW9vZHMubGVuZ3RoID09PSAwKSByZXR1cm4gcGF0dGVybnM7XG5cbiAgICAgIC8vIPCfmoAgUEVSRk9STUFOQ0UgT1BUSU1JWkFUSU9OOiBTYW1wbGUgcmVjZW50IG1vb2QgZW50cmllcyBvbmx5ICBcbiAgICAgIGNvbnN0IFNBTVBMRV9TSVpFID0gMzA7IC8vIFByb2Nlc3MgbWF4IDMwIHJlY2VudCBtb29kcyBpbnN0ZWFkIG9mIGFsbCA3OCtcbiAgICAgIGNvbnN0IHJlY2VudE1vb2RzID0gbW9vZHNcbiAgICAgICAgLmZpbHRlcihtID0+IG0udGltZXN0YW1wICYmIG0ubW9vZF9zY29yZSAhPT0gdW5kZWZpbmVkICYmIG0uZW5lcmd5X2xldmVsICE9PSB1bmRlZmluZWQgJiYgbS5hbnhpZXR5X2xldmVsICE9PSB1bmRlZmluZWQpIC8vIEZpbHRlciB2YWxpZCBNRUEgZW50cmllc1xuICAgICAgICAuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYi50aW1lc3RhbXApLmdldFRpbWUoKSAtIG5ldyBEYXRlKGEudGltZXN0YW1wKS5nZXRUaW1lKCkpXG4gICAgICAgIC5zbGljZSgwLCBTQU1QTEVfU0laRSk7XG5cbiAgICAgIGlmIChyZWNlbnRNb29kcy5sZW5ndGggPT09IDApIHJldHVybiBwYXR0ZXJucztcblxuICAgICAgLy8g8J+TiCBXRUVLTFkgTU9PRCBERUxUQSBBTkFMWVNJU1xuICAgICAgY29uc3Qgd2Vla2x5TW9vZERlbHRhID0gdGhpcy5jYWxjdWxhdGVXZWVrbHlNb29kRGVsdGEocmVjZW50TW9vZHMpO1xuICAgICAgaWYgKHdlZWtseU1vb2REZWx0YSkge1xuICAgICAgICBwYXR0ZXJucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbW9vZF93ZWVrbHlfZGVsdGEnLFxuICAgICAgICAgIHRpdGxlOiAnSGFmdGFsxLFrIE1vb2QgRGXEn2nFn2ltaScsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBTb24gaGFmdGEgbW9vZCBvcnRhbGFtYXPEsTogJHt3ZWVrbHlNb29kRGVsdGEudGhpc1dlZWsudG9GaXhlZCgxKX0sIMO2bmNla2kgaGFmdGE6ICR7d2Vla2x5TW9vZERlbHRhLmxhc3RXZWVrLnRvRml4ZWQoMSl9YCxcbiAgICAgICAgICBwYXR0ZXJuOiBgSGFmdGFsxLFrIGRlbHRhOiAke3dlZWtseU1vb2REZWx0YS5kZWx0YSA+IDAgPyAnKycgOiAnJ30ke3dlZWtseU1vb2REZWx0YS5kZWx0YS50b0ZpeGVkKDEpfWAsXG4gICAgICAgICAgY29uZmlkZW5jZTogd2Vla2x5TW9vZERlbHRhLmNvbmZpZGVuY2UsXG4gICAgICAgICAgc2V2ZXJpdHk6IHdlZWtseU1vb2REZWx0YS5kZWx0YSA8IC0xMCA/ICdoaWdoJyA6IHdlZWtseU1vb2REZWx0YS5kZWx0YSA8IC01ID8gJ21lZGl1bScgOiAnbG93JyxcbiAgICAgICAgICBhY3Rpb25hYmxlOiBNYXRoLmFicyh3ZWVrbHlNb29kRGVsdGEuZGVsdGEpID4gNSxcbiAgICAgICAgICBzdWdnZXN0aW9uOiB3ZWVrbHlNb29kRGVsdGEuZGVsdGEgPCAtMTAgPyAnTW9vZCBkw7zFn8O8xZ8gdHJlbmRpIC0gZGVzdGVrIGFsbWF5xLEgZGXEn2VybGVuZGlyJyA6XG4gICAgICAgICAgICAgICAgICAgICB3ZWVrbHlNb29kRGVsdGEuZGVsdGEgPCAtNSA/ICdIYWZpZiBtb29kIGTDvMWfw7zFn8O8IC0gc2VsZi1jYXJlIHJ1dGlubGVyaW5lIG9kYWtsYW4nIDpcbiAgICAgICAgICAgICAgICAgICAgIHdlZWtseU1vb2REZWx0YS5kZWx0YSA+IDEwID8gJ0fDvHplbCBtb29kIGFydMSxxZ/EsSAtIGJ1IHBveml0aWYgZHVydW11IHPDvHJkw7xyJyA6IFxuICAgICAgICAgICAgICAgICAgICAgJ01vb2Qgc2V2aXllc2kgc3RhYmlsIGfDtnLDvG7DvHlvcicsXG4gICAgICAgICAgLy8g8J+OryBEQVNIQk9BUkQgUkVBRFkgTUVUUklDU1xuICAgICAgICAgIGRhc2hib2FyZE1ldHJpY3M6IHtcbiAgICAgICAgICAgIHdlZWtseURlbHRhOiB3ZWVrbHlNb29kRGVsdGEuZGVsdGEsXG4gICAgICAgICAgICBjdXJyZW50V2Vla0F2Zzogd2Vla2x5TW9vZERlbHRhLnRoaXNXZWVrLFxuICAgICAgICAgICAgcHJldmlvdXNXZWVrQXZnOiB3ZWVrbHlNb29kRGVsdGEubGFzdFdlZWssXG4gICAgICAgICAgICB0cmVuZDogd2Vla2x5TW9vZERlbHRhLmRlbHRhID4gNSA/ICdpbXByb3ZpbmcnIDogd2Vla2x5TW9vZERlbHRhLmRlbHRhIDwgLTUgPyAnZGVjbGluaW5nJyA6ICdzdGFibGUnLFxuICAgICAgICAgICAgZGF0YVBvaW50czogd2Vla2x5TW9vZERlbHRhLmRhdGFQb2ludHNcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNvdXJjZTogJ3VuaWZpZWRfcGlwZWxpbmUnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyDwn5SXIE1FQSBDT1JSRUxBVElPTiBBTkFMWVNJUyAoRW5oYW5jZWQpXG4gICAgICBjb25zdCBtZWFDb3JyZWxhdGlvbiA9IHRoaXMuY2FsY3VsYXRlTUVBQ29ycmVsYXRpb25zKHJlY2VudE1vb2RzKTtcbiAgICAgIGlmIChtZWFDb3JyZWxhdGlvbikge1xuICAgICAgICBwYXR0ZXJucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbW9vZF9tZWFfY29ycmVsYXRpb24nLFxuICAgICAgICAgIHRpdGxlOiAnTW9vZC1FbmVyamktQW5rc2l5ZXRlIMSwbGnFn2tpc2knLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgTUVBIGtvcmVsYXN5b24gYW5hbGl6aTogJHttZWFDb3JyZWxhdGlvbi5wcm9maWxlfWAsXG4gICAgICAgICAgcGF0dGVybjogYE1vb2QtRW5lcmppOiAke21lYUNvcnJlbGF0aW9uLm1vb2RFbmVyZ3kudG9GaXhlZCgyKX0sIE1vb2QtQW5rc2l5ZXRlOiAke21lYUNvcnJlbGF0aW9uLm1vb2RBbnhpZXR5LnRvRml4ZWQoMil9YCxcbiAgICAgICAgICBjb25maWRlbmNlOiBtZWFDb3JyZWxhdGlvbi5jb25maWRlbmNlLFxuICAgICAgICAgIHNldmVyaXR5OiBtZWFDb3JyZWxhdGlvbi5zZXZlcml0eSxcbiAgICAgICAgICBhY3Rpb25hYmxlOiBtZWFDb3JyZWxhdGlvbi5hY3Rpb25hYmxlLFxuICAgICAgICAgIHN1Z2dlc3Rpb246IG1lYUNvcnJlbGF0aW9uLnN1Z2dlc3Rpb24sXG4gICAgICAgICAgLy8g8J+OryBEQVNIQk9BUkQgUkVBRFkgTUVUUklDU1xuICAgICAgICAgIGRhc2hib2FyZE1ldHJpY3M6IHtcbiAgICAgICAgICAgIG1vb2RFbmVyZ3lDb3JyZWxhdGlvbjogbWVhQ29ycmVsYXRpb24ubW9vZEVuZXJneSxcbiAgICAgICAgICAgIG1vb2RBbnhpZXR5Q29ycmVsYXRpb246IG1lYUNvcnJlbGF0aW9uLm1vb2RBbnhpZXR5LFxuICAgICAgICAgICAgZW5lcmd5QW54aWV0eUNvcnJlbGF0aW9uOiBtZWFDb3JyZWxhdGlvbi5lbmVyZ3lBbnhpZXR5LFxuICAgICAgICAgICAgZW1vdGlvbmFsUHJvZmlsZTogbWVhQ29ycmVsYXRpb24ucHJvZmlsZVR5cGUsXG4gICAgICAgICAgICBhdmVyYWdlTW9vZDogbWVhQ29ycmVsYXRpb24uYXZlcmFnZXMubW9vZCxcbiAgICAgICAgICAgIGF2ZXJhZ2VFbmVyZ3k6IG1lYUNvcnJlbGF0aW9uLmF2ZXJhZ2VzLmVuZXJneSxcbiAgICAgICAgICAgIGF2ZXJhZ2VBbnhpZXR5OiBtZWFDb3JyZWxhdGlvbi5hdmVyYWdlcy5hbnhpZXR5LFxuICAgICAgICAgICAgZGF0YVBvaW50czogcmVjZW50TW9vZHMubGVuZ3RoXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzb3VyY2U6ICd1bmlmaWVkX3BpcGVsaW5lJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8g8J+ThSBEQUlMWSBQQVRURVJOUyAoRXhpc3RpbmcgbG9naWMgZW5oYW5jZWQpXG4gICAgICBjb25zdCB3ZWVrbHlEYXRhOiBSZWNvcmQ8bnVtYmVyLCB7IG1vb2Q6IG51bWJlciwgZW5lcmd5OiBudW1iZXIsIGFueGlldHk6IG51bWJlciwgY291bnQ6IG51bWJlciB9PiA9IHt9O1xuICAgICAgcmVjZW50TW9vZHMuZm9yRWFjaChtID0+IHtcbiAgICAgICAgY29uc3QgZGF5T2ZXZWVrID0gbmV3IERhdGUobS50aW1lc3RhbXApLmdldERheSgpO1xuICAgICAgICBpZiAoIXdlZWtseURhdGFbZGF5T2ZXZWVrXSkge1xuICAgICAgICAgIHdlZWtseURhdGFbZGF5T2ZXZWVrXSA9IHsgbW9vZDogMCwgZW5lcmd5OiAwLCBhbnhpZXR5OiAwLCBjb3VudDogMCB9O1xuICAgICAgICB9XG4gICAgICAgIHdlZWtseURhdGFbZGF5T2ZXZWVrXS5tb29kICs9IG0ubW9vZF9zY29yZTtcbiAgICAgICAgd2Vla2x5RGF0YVtkYXlPZldlZWtdLmVuZXJneSArPSBtLmVuZXJneV9sZXZlbDtcbiAgICAgICAgd2Vla2x5RGF0YVtkYXlPZldlZWtdLmFueGlldHkgKz0gbS5hbnhpZXR5X2xldmVsO1xuICAgICAgICB3ZWVrbHlEYXRhW2RheU9mV2Vla10uY291bnQgKz0gMTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGaW5kIHNpZ25pZmljYW50IGRhaWx5IHBhdHRlcm5zIHdpdGggZW5oYW5jZWQgbWV0cmljc1xuICAgICAgY29uc3QgZGF5TmFtZXMgPSBbJ1BhemFyJywgJ1BhemFydGVzaScsICdTYWzEsScsICfDh2FyxZ9hbWJhJywgJ1BlcsWfZW1iZScsICdDdW1hJywgJ0N1bWFydGVzaSddO1xuICAgICAgY29uc3QgbWF4RGFpbHlQYXR0ZXJucyA9IDM7IC8vIExpbWl0IGRhaWx5IHBhdHRlcm5zXG4gICAgICBcbiAgICAgIE9iamVjdC5lbnRyaWVzKHdlZWtseURhdGEpXG4gICAgICAgIC5zb3J0KChbLGFdLCBbLGJdKSA9PiAoYi5tb29kIC8gYi5jb3VudCkgLSAoYS5tb29kIC8gYS5jb3VudCkpIC8vIFNvcnQgYnkgYXZnIG1vb2RcbiAgICAgICAgLmZvckVhY2goKFtkYXksIGRhdGFdKSA9PiB7XG4gICAgICAgICAgaWYgKHBhdHRlcm5zLmZpbHRlcihwID0+IHAudHlwZSA9PT0gJ21vb2RfZGFpbHlfcGF0dGVybicpLmxlbmd0aCA+PSBtYXhEYWlseVBhdHRlcm5zKSByZXR1cm47IC8vIEVhcmx5IGV4aXRcbiAgICAgICAgICBjb25zdCBhdmdNb29kID0gZGF0YS5tb29kIC8gZGF0YS5jb3VudDtcbiAgICAgICAgICBjb25zdCBhdmdFbmVyZ3kgPSBkYXRhLmVuZXJneSAvIGRhdGEuY291bnQ7XG4gICAgICAgICAgY29uc3QgYXZnQW54aWV0eSA9IGRhdGEuYW54aWV0eSAvIGRhdGEuY291bnQ7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGRhdGEuY291bnQgPj0gMiAmJiAoYXZnTW9vZCA+IDcwIHx8IGF2Z01vb2QgPCA0MCkpIHsgLy8gT25seSBzaWduaWZpY2FudCBwYXR0ZXJuc1xuICAgICAgICAgICAgcGF0dGVybnMucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdtb29kX2RhaWx5X3BhdHRlcm4nLFxuICAgICAgICAgICAgICB0aXRsZTogYCR7ZGF5TmFtZXNbcGFyc2VJbnQoZGF5KV19IEfDvG7DvCBQYXR0ZXJuJ2lgLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7ZGF5TmFtZXNbcGFyc2VJbnQoZGF5KV19IGfDvG7DvCBtb29kIG9ydGFsYW1hc8SxOiAke2F2Z01vb2QudG9GaXhlZCgxKX1gLFxuICAgICAgICAgICAgICBwYXR0ZXJuOiBgJHtkYXlOYW1lc1twYXJzZUludChkYXkpXX06IE0ke2F2Z01vb2QudG9GaXhlZCgxKX0vRSR7YXZnRW5lcmd5LnRvRml4ZWQoMSl9L0Eke2F2Z0FueGlldHkudG9GaXhlZCgxKX1gLFxuICAgICAgICAgICAgICBjb25maWRlbmNlOiBNYXRoLm1pbigwLjgsIGRhdGEuY291bnQgLyByZWNlbnRNb29kcy5sZW5ndGggKiA3KSxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IGF2Z01vb2QgPCA0MCA/ICdtZWRpdW0nIDogJ2xvdycsXG4gICAgICAgICAgICAgIGFjdGlvbmFibGU6IGF2Z01vb2QgPCA0MCxcbiAgICAgICAgICAgICAgc3VnZ2VzdGlvbjogYXZnTW9vZCA8IDQwID8gYCR7ZGF5TmFtZXNbcGFyc2VJbnQoZGF5KV19IGfDvG7DvCBtb29kIGRlc3RlxJ9pIHBsYW5sYXlhYmlsaXJzaW5gIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgYCR7ZGF5TmFtZXNbcGFyc2VJbnQoZGF5KV19IGfDvG7DvCBwb3ppdGlmIHBhdHRlcm4naW5pIHPDvHJkw7xyYCxcbiAgICAgICAgICAgICAgLy8g8J+OryBEQVNIQk9BUkQgUkVBRFkgTUVUUklDU1xuICAgICAgICAgICAgICBkYXNoYm9hcmRNZXRyaWNzOiB7XG4gICAgICAgICAgICAgICAgZGF5T2ZXZWVrOiBwYXJzZUludChkYXkpLFxuICAgICAgICAgICAgICAgIGRheU5hbWU6IGRheU5hbWVzW3BhcnNlSW50KGRheSldLFxuICAgICAgICAgICAgICAgIGF2ZXJhZ2VNb29kOiBwYXJzZUZsb2F0KGF2Z01vb2QudG9GaXhlZCgxKSksXG4gICAgICAgICAgICAgICAgYXZlcmFnZUVuZXJneTogcGFyc2VGbG9hdChhdmdFbmVyZ3kudG9GaXhlZCgxKSksXG4gICAgICAgICAgICAgICAgYXZlcmFnZUFueGlldHk6IHBhcnNlRmxvYXQoYXZnQW54aWV0eS50b0ZpeGVkKDEpKSxcbiAgICAgICAgICAgICAgICBzYW1wbGVTaXplOiBkYXRhLmNvdW50LFxuICAgICAgICAgICAgICAgIHNpZ25pZmljYW5jZTogYXZnTW9vZCA+IDcwID8gJ3Bvc2l0aXZlJyA6IGF2Z01vb2QgPCA0MCA/ICduZWdhdGl2ZScgOiAnbmV1dHJhbCdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc291cmNlOiAndW5pZmllZF9waXBlbGluZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIEV4dHJhY3RlZCAke3BhdHRlcm5zLmxlbmd0aH0gZW5oYW5jZWQgbW9vZCBwYXR0ZXJucyB3aXRoIGRhc2hib2FyZCBtZXRyaWNzYCk7XG4gICAgICByZXR1cm4gcGF0dGVybnM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGV4dHJhY3RpbmcgZW5oYW5jZWQgbW9vZCB0ZW1wb3JhbCBwYXR0ZXJuczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIPCfk4ggQ2FsY3VsYXRlIFdlZWtseSBNb29kIERlbHRhIGZvciBkYXNoYm9hcmQgbWV0cmljc1xuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVXZWVrbHlNb29kRGVsdGEobW9vZHM6IGFueVtdKToge1xuICAgIGRlbHRhOiBudW1iZXI7XG4gICAgdGhpc1dlZWs6IG51bWJlcjtcbiAgICBsYXN0V2VlazogbnVtYmVyO1xuICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgICBkYXRhUG9pbnRzOiB7IHRoaXNXZWVrOiBudW1iZXI7IGxhc3RXZWVrOiBudW1iZXIgfTtcbiAgfSB8IG51bGwge1xuICAgIHRyeSB7XG4gICAgICBpZiAobW9vZHMubGVuZ3RoIDwgNSkgcmV0dXJuIG51bGw7XG5cbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBvbmVXZWVrQWdvID0gbmV3IERhdGUobm93LmdldFRpbWUoKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgIGNvbnN0IHR3b1dlZWtzQWdvID0gbmV3IERhdGUobm93LmdldFRpbWUoKSAtIDE0ICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG5cbiAgICAgIGNvbnN0IHRoaXNXZWVrTW9vZHMgPSBtb29kcy5maWx0ZXIobSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShtLnRpbWVzdGFtcCk7XG4gICAgICAgIHJldHVybiBkYXRlID49IG9uZVdlZWtBZ28gJiYgZGF0ZSA8PSBub3c7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbGFzdFdlZWtNb29kcyA9IG1vb2RzLmZpbHRlcihtID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKG0udGltZXN0YW1wKTtcbiAgICAgICAgcmV0dXJuIGRhdGUgPj0gdHdvV2Vla3NBZ28gJiYgZGF0ZSA8IG9uZVdlZWtBZ287XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXNXZWVrTW9vZHMubGVuZ3RoID09PSAwIHx8IGxhc3RXZWVrTW9vZHMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3QgdGhpc1dlZWtBdmcgPSB0aGlzV2Vla01vb2RzLnJlZHVjZSgoc3VtLCBtKSA9PiBzdW0gKyBtLm1vb2Rfc2NvcmUsIDApIC8gdGhpc1dlZWtNb29kcy5sZW5ndGg7XG4gICAgICBjb25zdCBsYXN0V2Vla0F2ZyA9IGxhc3RXZWVrTW9vZHMucmVkdWNlKChzdW0sIG0pID0+IHN1bSArIG0ubW9vZF9zY29yZSwgMCkgLyBsYXN0V2Vla01vb2RzLmxlbmd0aDtcbiAgICAgIGNvbnN0IGRlbHRhID0gdGhpc1dlZWtBdmcgLSBsYXN0V2Vla0F2ZztcblxuICAgICAgLy8gQ29uZmlkZW5jZSBiYXNlZCBvbiBkYXRhIHBvaW50c1xuICAgICAgY29uc3QgbWluRGF0YVBvaW50cyA9IE1hdGgubWluKHRoaXNXZWVrTW9vZHMubGVuZ3RoLCBsYXN0V2Vla01vb2RzLmxlbmd0aCk7XG4gICAgICBjb25zdCBjb25maWRlbmNlID0gTWF0aC5taW4oMC45LCBtaW5EYXRhUG9pbnRzIC8gNyAqIDAuOCk7IC8vIE1heCBjb25maWRlbmNlIHdpdGggNysgZGF0YSBwb2ludHMgcGVyIHdlZWtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVsdGEsXG4gICAgICAgIHRoaXNXZWVrOiB0aGlzV2Vla0F2ZyxcbiAgICAgICAgbGFzdFdlZWs6IGxhc3RXZWVrQXZnLFxuICAgICAgICBjb25maWRlbmNlLFxuICAgICAgICBkYXRhUG9pbnRzOiB7XG4gICAgICAgICAgdGhpc1dlZWs6IHRoaXNXZWVrTW9vZHMubGVuZ3RoLFxuICAgICAgICAgIGxhc3RXZWVrOiBsYXN0V2Vla01vb2RzLmxlbmd0aFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBFcnJvciBjYWxjdWxhdGluZyB3ZWVrbHkgbW9vZCBkZWx0YTonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+UlyBDYWxjdWxhdGUgZW5oYW5jZWQgTUVBIChNb29kLUVuZXJneS1BbnhpZXR5KSBjb3JyZWxhdGlvbnMgZm9yIGRhc2hib2FyZFxuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVNRUFDb3JyZWxhdGlvbnMobW9vZHM6IGFueVtdKToge1xuICAgIG1vb2RFbmVyZ3k6IG51bWJlcjtcbiAgICBtb29kQW54aWV0eTogbnVtYmVyO1xuICAgIGVuZXJneUFueGlldHk6IG51bWJlcjtcbiAgICBwcm9maWxlOiBzdHJpbmc7XG4gICAgcHJvZmlsZVR5cGU6IHN0cmluZztcbiAgICBjb25maWRlbmNlOiBudW1iZXI7XG4gICAgc2V2ZXJpdHk6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCc7XG4gICAgYWN0aW9uYWJsZTogYm9vbGVhbjtcbiAgICBzdWdnZXN0aW9uOiBzdHJpbmc7XG4gICAgYXZlcmFnZXM6IHsgbW9vZDogbnVtYmVyOyBlbmVyZ3k6IG51bWJlcjsgYW54aWV0eTogbnVtYmVyIH07XG4gIH0gfCBudWxsIHtcbiAgICB0cnkge1xuICAgICAgaWYgKG1vb2RzLmxlbmd0aCA8IDUpIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCBtb29kU2NvcmVzID0gbW9vZHMubWFwKG0gPT4gbS5tb29kX3Njb3JlKTtcbiAgICAgIGNvbnN0IGVuZXJneUxldmVscyA9IG1vb2RzLm1hcChtID0+IG0uZW5lcmd5X2xldmVsKTtcbiAgICAgIGNvbnN0IGFueGlldHlMZXZlbHMgPSBtb29kcy5tYXAobSA9PiBtLmFueGlldHlfbGV2ZWwpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgUGVhcnNvbiBjb3JyZWxhdGlvbiBjb2VmZmljaWVudHNcbiAgICAgIGNvbnN0IG1vb2RFbmVyZ3lDb3JyID0gdGhpcy5jYWxjdWxhdGVQZWFyc29uQ29ycmVsYXRpb24obW9vZFNjb3JlcywgZW5lcmd5TGV2ZWxzKTtcbiAgICAgIGNvbnN0IG1vb2RBbnhpZXR5Q29yciA9IHRoaXMuY2FsY3VsYXRlUGVhcnNvbkNvcnJlbGF0aW9uKG1vb2RTY29yZXMsIGFueGlldHlMZXZlbHMpO1xuICAgICAgY29uc3QgZW5lcmd5QW54aWV0eUNvcnIgPSB0aGlzLmNhbGN1bGF0ZVBlYXJzb25Db3JyZWxhdGlvbihlbmVyZ3lMZXZlbHMsIGFueGlldHlMZXZlbHMpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgYXZlcmFnZXNcbiAgICAgIGNvbnN0IGF2ZXJhZ2VzID0ge1xuICAgICAgICBtb29kOiBtb29kU2NvcmVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gbW9vZFNjb3Jlcy5sZW5ndGgsXG4gICAgICAgIGVuZXJneTogZW5lcmd5TGV2ZWxzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gZW5lcmd5TGV2ZWxzLmxlbmd0aCxcbiAgICAgICAgYW54aWV0eTogYW54aWV0eUxldmVscy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIGFueGlldHlMZXZlbHMubGVuZ3RoXG4gICAgICB9O1xuXG4gICAgICAvLyBFbmhhbmNlZCBwcm9maWxlIGRldGVybWluYXRpb25cbiAgICAgIGxldCBwcm9maWxlVHlwZSA9ICdiYWxhbmNlZCc7XG4gICAgICBsZXQgcHJvZmlsZSA9ICdEZW5nZWxpIER1eWd1c2FsIFByb2ZpbCc7XG4gICAgICBsZXQgc2V2ZXJpdHk6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgPSAnbG93JztcbiAgICAgIGxldCBzdWdnZXN0aW9uID0gJ0R1eWd1c2FsIGRlbmdlbiBpeWkgZ8O2csO8bsO8eW9yJztcbiAgICAgIGxldCBhY3Rpb25hYmxlID0gZmFsc2U7XG5cbiAgICAgIC8vIFN0cm9uZyBwb3NpdGl2ZSBtb29kLWVuZXJneSArIG5lZ2F0aXZlIG1vb2QtYW54aWV0eSA9IG9wdGltYWxcbiAgICAgIGlmIChtb29kRW5lcmd5Q29yciA+IDAuNSAmJiBtb29kQW54aWV0eUNvcnIgPCAtMC4zKSB7XG4gICAgICAgIHByb2ZpbGVUeXBlID0gJ29wdGltYWwnO1xuICAgICAgICBwcm9maWxlID0gJ09wdGltYWwgRHV5Z3VzYWwgRGVuZ2UnO1xuICAgICAgICBzdWdnZXN0aW9uID0gJ03DvGtlbW1lbCEgTW9vZCB5w7xrc2Vr4oaSZW5lcmppIGFydMSxeW9yLCBhbmtzaXlldGUgYXphbMSxeW9yJztcbiAgICAgIH1cbiAgICAgIC8vIFN0cm9uZyBuZWdhdGl2ZSBtb29kLWVuZXJneSArIHBvc2l0aXZlIG1vb2QtYW54aWV0eSA9IGRlcHJlc3Npb24gcmlzayAgXG4gICAgICBlbHNlIGlmIChtb29kRW5lcmd5Q29yciA8IC0wLjMgJiYgbW9vZEFueGlldHlDb3JyID4gMC4zKSB7XG4gICAgICAgIHByb2ZpbGVUeXBlID0gJ2RlcHJlc3Npb25fcmlzayc7XG4gICAgICAgIHByb2ZpbGUgPSAnRGVwcmVzaWYgRcSfaWxpbSBSaXNraSc7XG4gICAgICAgIHNldmVyaXR5ID0gJ2hpZ2gnO1xuICAgICAgICBhY3Rpb25hYmxlID0gdHJ1ZTtcbiAgICAgICAgc3VnZ2VzdGlvbiA9ICdNb29kIGTDvMWfdMO8xJ/DvG5kZSBlbmVyamkgZGUgZMO8xZ/DvHlvciwgYW5rc2l5ZXRlIGFydMSxeW9yIC0gcHJvZmVzeW9uZWwgZGVzdGVrIGRlxJ9lcmxlbmRpcic7XG4gICAgICB9XG4gICAgICAvLyBIaWdoIGVuZXJneS1hbnhpZXR5IGNvcnJlbGF0aW9uID0gbWFuaWMgdGVuZGVuY3lcbiAgICAgIGVsc2UgaWYgKGVuZXJneUFueGlldHlDb3JyID4gMC42KSB7XG4gICAgICAgIHByb2ZpbGVUeXBlID0gJ2h5cGVyYXJvdXNhbCc7XG4gICAgICAgIHByb2ZpbGUgPSAnWcO8a3NlayBVeWFyxLFsbWEgRHVydW11JztcbiAgICAgICAgc2V2ZXJpdHkgPSAnbWVkaXVtJztcbiAgICAgICAgYWN0aW9uYWJsZSA9IHRydWU7XG4gICAgICAgIHN1Z2dlc3Rpb24gPSAnRW5lcmppIHZlIGFua3NpeWV0ZSBiaXJsaWt0ZSB5w7xrc2VsaXlvciAtIHNha2lubGXFn3RpcmljaSB0ZWtuaWtsZXIgZmF5ZGFsxLEgb2xhYmlsaXInO1xuICAgICAgfVxuICAgICAgLy8gTG93IG1vb2Qgd2l0aCBoaWdoIGFueGlldHkgY29ycmVsYXRpb25cbiAgICAgIGVsc2UgaWYgKGF2ZXJhZ2VzLm1vb2QgPCA0MCAmJiBNYXRoLmFicyhtb29kQW54aWV0eUNvcnIpID4gMC40KSB7XG4gICAgICAgIHByb2ZpbGVUeXBlID0gJ2FueGlvdXNfbG93X21vb2QnO1xuICAgICAgICBwcm9maWxlID0gJ0theWfEsWzEsSBEw7zFn8O8ayBNb29kJztcbiAgICAgICAgc2V2ZXJpdHkgPSAnbWVkaXVtJztcbiAgICAgICAgYWN0aW9uYWJsZSA9IHRydWU7XG4gICAgICAgIHN1Z2dlc3Rpb24gPSAnRMO8xZ/DvGsgbW9vZCB2ZSBhbmtzaXlldGUgaWxpxZ9raXNpIHRlc3BpdCBlZGlsZGkgLSBtb29kIGRlc3Rla2xleWljaSBha3Rpdml0ZWxlciBkZW5lJztcbiAgICAgIH1cbiAgICAgIC8vIFZlcnkgbG93IGNvcnJlbGF0aW9ucyA9IGRpc2Nvbm5lY3RlZCBlbW90aW9uYWwgc3RhdGVzXG4gICAgICBlbHNlIGlmIChNYXRoLmFicyhtb29kRW5lcmd5Q29ycikgPCAwLjIgJiYgTWF0aC5hYnMobW9vZEFueGlldHlDb3JyKSA8IDAuMikge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdkaXNjb25uZWN0ZWQnO1xuICAgICAgICBwcm9maWxlID0gJ0JhxJ/EsW1zxLF6IER1eWd1c2FsIER1cnVtbGFyJztcbiAgICAgICAgc3VnZ2VzdGlvbiA9ICdNb29kLCBlbmVyamkgdmUgYW5rc2l5ZXRlIGJhxJ/EsW1zxLF6IGRlxJ9pxZ9peW9yIC0gYnUgZGEgbm9ybWFsIG9sYWJpbGlyJztcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29uZmlkZW5jZSA9IE1hdGgubWluKDAuOSwgbW9vZHMubGVuZ3RoIC8gMjApOyAvLyBIaWdoZXIgY29uZmlkZW5jZSB3aXRoIG1vcmUgZGF0YVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb29kRW5lcmd5OiBwYXJzZUZsb2F0KG1vb2RFbmVyZ3lDb3JyLnRvRml4ZWQoMykpLFxuICAgICAgICBtb29kQW54aWV0eTogcGFyc2VGbG9hdChtb29kQW54aWV0eUNvcnIudG9GaXhlZCgzKSksXG4gICAgICAgIGVuZXJneUFueGlldHk6IHBhcnNlRmxvYXQoZW5lcmd5QW54aWV0eUNvcnIudG9GaXhlZCgzKSksXG4gICAgICAgIHByb2ZpbGUsXG4gICAgICAgIHByb2ZpbGVUeXBlLFxuICAgICAgICBjb25maWRlbmNlLFxuICAgICAgICBzZXZlcml0eSxcbiAgICAgICAgYWN0aW9uYWJsZSxcbiAgICAgICAgc3VnZ2VzdGlvbixcbiAgICAgICAgYXZlcmFnZXM6IHtcbiAgICAgICAgICBtb29kOiBwYXJzZUZsb2F0KGF2ZXJhZ2VzLm1vb2QudG9GaXhlZCgxKSksXG4gICAgICAgICAgZW5lcmd5OiBwYXJzZUZsb2F0KGF2ZXJhZ2VzLmVuZXJneS50b0ZpeGVkKDEpKSxcbiAgICAgICAgICBhbnhpZXR5OiBwYXJzZUZsb2F0KGF2ZXJhZ2VzLmFueGlldHkudG9GaXhlZCgxKSlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gRXJyb3IgY2FsY3VsYXRpbmcgTUVBIGNvcnJlbGF0aW9uczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+TiiBDYWxjdWxhdGUgUGVhcnNvbiBjb3JyZWxhdGlvbiBjb2VmZmljaWVudFxuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVQZWFyc29uQ29ycmVsYXRpb24oeDogbnVtYmVyW10sIHk6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgICBpZiAoeC5sZW5ndGggIT09IHkubGVuZ3RoIHx8IHgubGVuZ3RoID09PSAwKSByZXR1cm4gMDtcblxuICAgIGNvbnN0IG4gPSB4Lmxlbmd0aDtcbiAgICBjb25zdCBtZWFuWCA9IHgucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkgLyBuO1xuICAgIGNvbnN0IG1lYW5ZID0geS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIG47XG5cbiAgICBsZXQgbnVtZXJhdG9yID0gMDtcbiAgICBsZXQgc3VtWFNxdWFyZWQgPSAwO1xuICAgIGxldCBzdW1ZU3F1YXJlZCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgY29uc3QgeERpZmYgPSB4W2ldIC0gbWVhblg7XG4gICAgICBjb25zdCB5RGlmZiA9IHlbaV0gLSBtZWFuWTtcbiAgICAgIG51bWVyYXRvciArPSB4RGlmZiAqIHlEaWZmO1xuICAgICAgc3VtWFNxdWFyZWQgKz0geERpZmYgKiB4RGlmZjtcbiAgICAgIHN1bVlTcXVhcmVkICs9IHlEaWZmICogeURpZmY7XG4gICAgfVxuXG4gICAgY29uc3QgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoc3VtWFNxdWFyZWQgKiBzdW1ZU3F1YXJlZCk7XG4gICAgcmV0dXJuIGRlbm9taW5hdG9yID09PSAwID8gMCA6IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIPCfk4ogQ2FsY3VsYXRlIHAtdmFsdWUgZm9yIFBlYXJzb24gY29ycmVsYXRpb24gY29lZmZpY2llbnRcbiAgICogVXNlcyB0LXRlc3QgYXBwcm94aW1hdGlvbjogdCA9IHIgKiBzcXJ0KG4tMikgLyBzcXJ0KDEtcsKyKVxuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVDb3JyZWxhdGlvblBWYWx1ZShyOiBudW1iZXIsIG46IG51bWJlcik6IG51bWJlciB8IG51bGwge1xuICAgIGlmIChuIDwgMyB8fCBNYXRoLmFicyhyKSA+PSAxKSByZXR1cm4gbnVsbDtcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGYgPSBuIC0gMjsgLy8gZGVncmVlcyBvZiBmcmVlZG9tXG4gICAgICBjb25zdCB0ID0gciAqIE1hdGguc3FydChkZikgLyBNYXRoLnNxcnQoMSAtIHIgKiByKTtcbiAgICAgIFxuICAgICAgLy8gQXBwcm94aW1hdGlvbiBvZiB0d28tdGFpbGVkIHQtdGVzdCBwLXZhbHVlIHVzaW5nIHQtZGlzdHJpYnV0aW9uXG4gICAgICBjb25zdCBwID0gdGhpcy5hcHByb3hpbWF0ZVRUZXN0UFZhbHVlKE1hdGguYWJzKHQpLCBkZik7XG4gICAgICBcbiAgICAgIHJldHVybiBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBwKSk7IC8vIENsYW1wIGJldHdlZW4gMCBhbmQgMVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBQLXZhbHVlIGNhbGN1bGF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+nriBBcHByb3hpbWF0ZSB0d28tdGFpbGVkIHQtdGVzdCBwLXZhbHVlXG4gICAqIFVzZXMgc2ltcGxpZmllZCBhcHByb3hpbWF0aW9uIGZvciB0LWRpc3RyaWJ1dGlvblxuICAgKi9cbiAgcHJpdmF0ZSBhcHByb3hpbWF0ZVRUZXN0UFZhbHVlKHQ6IG51bWJlciwgZGY6IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gRm9yIGxhcmdlIGRmICg+MzApLCBub3JtYWwgYXBwcm94aW1hdGlvbiBpcyByZWFzb25hYmxlXG4gICAgaWYgKGRmID4gMzApIHtcbiAgICAgIHJldHVybiAyICogKDEgLSB0aGlzLm5vcm1hbENERih0KSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEZvciBzbWFsbCBkZiwgdXNlIGxvb2t1cCB0YWJsZSBhcHByb3hpbWF0aW9uXG4gICAgY29uc3QgY3JpdGljYWxWYWx1ZXMgPSBbXG4gICAgICB7IGRmOiAyLCB2YWx1ZXM6IFs0LjMwMywgNi45NjUsIDkuOTI1LCAxNC4wODldIH0sICAgLy8gcDogWzAuMSwgMC4wNSwgMC4wMiwgMC4wMV1cbiAgICAgIHsgZGY6IDMsIHZhbHVlczogWzMuMTgyLCA0LjU0MSwgNS44NDEsIDcuNDUzXSB9LFxuICAgICAgeyBkZjogNCwgdmFsdWVzOiBbMi43NzYsIDMuNzQ3LCA0LjYwNCwgNS41OThdIH0sXG4gICAgICB7IGRmOiA1LCB2YWx1ZXM6IFsyLjU3MSwgMy4zNjUsIDQuMDMyLCA0Ljc3M10gfSxcbiAgICAgIHsgZGY6IDEwLCB2YWx1ZXM6IFsyLjIyOCwgMi43NjQsIDMuMTY5LCAzLjU4MV0gfSxcbiAgICAgIHsgZGY6IDIwLCB2YWx1ZXM6IFsyLjA4NiwgMi41MjgsIDIuODQ1LCAzLjE1M10gfSxcbiAgICAgIHsgZGY6IDMwLCB2YWx1ZXM6IFsyLjA0MiwgMi40NTcsIDIuNzUwLCAzLjAzMF0gfVxuICAgIF07XG5cbiAgICAvLyBGaW5kIGNsb3Nlc3QgZGZcbiAgICBjb25zdCBjbG9zZXN0ID0gY3JpdGljYWxWYWx1ZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBcbiAgICAgIE1hdGguYWJzKGN1cnIuZGYgLSBkZikgPCBNYXRoLmFicyhwcmV2LmRmIC0gZGYpID8gY3VyciA6IHByZXZcbiAgICApO1xuXG4gICAgY29uc3QgcExldmVscyA9IFswLjEsIDAuMDUsIDAuMDIsIDAuMDFdO1xuICAgIFxuICAgIC8vIExpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gcC12YWx1ZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsb3Nlc3QudmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodCA8PSBjbG9zZXN0LnZhbHVlc1tpXSkge1xuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIC8vIEFib3ZlIGhpZ2hlc3QgcC12YWx1ZSwgaW50ZXJwb2xhdGUgYmV0d2VlbiAxLjAgYW5kIDAuMVxuICAgICAgICAgIGNvbnN0IHJhdGlvID0gdCAvIGNsb3Nlc3QudmFsdWVzWzBdO1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLjEsIDEuMCAtIHJhdGlvICogMC45KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJbnRlcnBvbGF0ZSBiZXR3ZWVuIHR3byBwLXZhbHVlc1xuICAgICAgICAgIGNvbnN0IHByZXZUID0gaSA9PT0gMCA/IDAgOiBjbG9zZXN0LnZhbHVlc1tpIC0gMV07XG4gICAgICAgICAgY29uc3QgY3VyclQgPSBjbG9zZXN0LnZhbHVlc1tpXTtcbiAgICAgICAgICBjb25zdCBwcmV2UCA9IGkgPT09IDAgPyAxLjAgOiBwTGV2ZWxzW2kgLSAxXTtcbiAgICAgICAgICBjb25zdCBjdXJyUCA9IHBMZXZlbHNbaV07XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgcmF0aW8gPSAodCAtIHByZXZUKSAvIChjdXJyVCAtIHByZXZUKTtcbiAgICAgICAgICByZXR1cm4gcHJldlAgLSByYXRpbyAqIChwcmV2UCAtIGN1cnJQKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBCZWxvdyBsb3dlc3QgY3JpdGljYWwgdmFsdWUsIHZlcnkgc2lnbmlmaWNhbnRcbiAgICByZXR1cm4gMC4wMDE7XG4gIH1cblxuICAvKipcbiAgICog8J+UoiBOb3JtYWwgQ0RGIGFwcHJveGltYXRpb24gKGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uKVxuICAgKi9cbiAgcHJpdmF0ZSBub3JtYWxDREYoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBBYnJhbW93aXR6IGFuZCBTdGVndW4gYXBwcm94aW1hdGlvblxuICAgIGNvbnN0IHQgPSAxIC8gKDEgKyAwLjIzMTY0MTkgKiBNYXRoLmFicyh4KSk7XG4gICAgY29uc3QgZCA9IDAuMzk4OTQyMyAqIE1hdGguZXhwKC14ICogeCAvIDIpO1xuICAgIGNvbnN0IHByb2IgPSBkICogdCAqICgwLjMxOTM4MTUgKyB0ICogKC0wLjM1NjU2MzggKyB0ICogKDEuNzgxNDc3OSArIHQgKiAoLTEuODIxMjU2MCArIHQgKiAxLjMzMDI3NDQpKSkpO1xuICAgIFxuICAgIHJldHVybiB4ID49IDAgPyAxIC0gcHJvYiA6IHByb2I7XG4gIH1cblxuICAvKipcbiAgICog8J+TiiBDT01QUkVIRU5TSVZFIE1PT0QgQU5BTFlUSUNTIFBST0NFU1NPUlxuICAgKiBJbXBsZW1lbnRzIGNsaW5pY2FsLWdyYWRlIG1vb2QgYW5hbHl0aWNzIHdpdGggdm9sYXRpbGl0eSwgcHJvZmlsZXMsIGFuZCBjb3JyZWxhdGlvbnNcbiAgICovXG4gIHByaXZhdGUgcHJvY2Vzc01vb2RBbmFseXRpY3MobW9vZHM6IGFueVtdKTogYW55IHwgbnVsbCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIFN0YXJ0aW5nIGNvbXByZWhlbnNpdmUgbW9vZCBhbmFseXRpY3MgZm9yICR7bW9vZHMubGVuZ3RofSBlbnRyaWVzYCk7XG4gICAgICBcbiAgICAgIGlmICghbW9vZHMgfHwgbW9vZHMubGVuZ3RoIDwgMykge1xuICAgICAgICBjb25zb2xlLmxvZygn4pqg77iPIEluc3VmZmljaWVudCBkYXRhIGZvciBtb29kIGFuYWx5dGljcycpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8g8J+agCBQRVJGT1JNQU5DRTogUHJvY2VzcyBvbmx5IHJlY2VudCA1MCBlbnRyaWVzXG4gICAgICBjb25zdCByZWNlbnRNb29kcyA9IG1vb2RzXG4gICAgICAgIC5maWx0ZXIobSA9PiBtLnRpbWVzdGFtcCAmJiBtLm1vb2Rfc2NvcmUgIT09IHVuZGVmaW5lZCAmJiBtLmVuZXJneV9sZXZlbCAhPT0gdW5kZWZpbmVkICYmIG0uYW54aWV0eV9sZXZlbCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYi50aW1lc3RhbXApLmdldFRpbWUoKSAtIG5ldyBEYXRlKGEudGltZXN0YW1wKS5nZXRUaW1lKCkpXG4gICAgICAgIC5zbGljZSgwLCA1MCk7XG5cbiAgICAgIGlmIChyZWNlbnRNb29kcy5sZW5ndGggPCAzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2Vla2x5RGVsdGE6IDAsXG4gICAgICAgICAgdm9sYXRpbGl0eTogMCxcbiAgICAgICAgICBiYXNlbGluZXM6IHsgbW9vZDogNTAsIGVuZXJneTogNTAsIGFueGlldHk6IDUwIH0sXG4gICAgICAgICAgY29ycmVsYXRpb25zOiB7fSxcbiAgICAgICAgICBzYW1wbGVTaXplOiByZWNlbnRNb29kcy5sZW5ndGgsXG4gICAgICAgICAgZGF0YVF1YWxpdHk6IDAuMSxcbiAgICAgICAgICBjb25maWRlbmNlOiAwLjFcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHJlY2VudE1vb2RzLmxlbmd0aDtcbiAgICAgIFxuICAgICAgLy8gMS4g8J+TiCBXRUVLTFkgREVMVEEgQ0FMQ1VMQVRJT05cbiAgICAgIGNvbnN0IHdlZWtseURlbHRhID0gdGhpcy5jYWxjdWxhdGVBbmFseXRpY3NXZWVrbHlEZWx0YShyZWNlbnRNb29kcyk7XG4gICAgICBcbiAgICAgIC8vIDIuIPCflKUgVk9MQVRJTElUWSBDQUxDVUxBVElPTiAoV2luc29yaXplZCBzdGFuZGFyZCBkZXZpYXRpb24pXG4gICAgICBjb25zdCB2b2xhdGlsaXR5ID0gdGhpcy5jYWxjdWxhdGVWb2xhdGlsaXR5KHJlY2VudE1vb2RzKTtcbiAgICAgIFxuICAgICAgLy8gMy4g8J+TiiBCQVNFTElORVMgKDE0LWRheSBhdmVyYWdlcylcbiAgICAgIGNvbnN0IGJhc2VsaW5lcyA9IHRoaXMuY2FsY3VsYXRlQmFzZWxpbmVzKHJlY2VudE1vb2RzKTtcbiAgICAgIFxuICAgICAgLy8gNC4g8J+UlyBNRUEgQ09SUkVMQVRJT05TXG4gICAgICBjb25zdCBjb3JyZWxhdGlvbnMgPSB0aGlzLmNhbGN1bGF0ZUFuYWx5dGljc01FQUNvcnJlbGF0aW9ucyhyZWNlbnRNb29kcyk7XG4gICAgICBcbiAgICAgIC8vIDUuIPCfk4ogREFUQSBRVUFMSVRZIEFTU0VTU01FTlRcbiAgICAgIGNvbnN0IGRhdGFRdWFsaXR5ID0gdGhpcy5hc3Nlc3NEYXRhUXVhbGl0eShyZWNlbnRNb29kcyk7XG4gICAgICBcbiAgICAgIC8vIDYuIPCfp6AgNyBFTU9USU9OQUwgUFJPRklMRSBDTEFTU0lGSUNBVElPTlxuICAgICAgY29uc3QgcHJvZmlsZSA9IHRoaXMuY2xhc3NpZnlFbW90aW9uYWxQcm9maWxlKGJhc2VsaW5lcywgd2Vla2x5RGVsdGEsIHZvbGF0aWxpdHksIHNhbXBsZVNpemUpO1xuICAgICAgXG4gICAgICAvLyA3LiDij7AgQkVTVCBUSU1FUyBBTkFMWVNJU1xuICAgICAgY29uc3QgYmVzdFRpbWVzID0gdGhpcy5hbmFseXplQmVzdFRpbWVzKHJlY2VudE1vb2RzKTtcbiAgICAgIFxuICAgICAgLy8gOC4g8J+OryBHTE9CQUwgQ09ORklERU5DRSBDQUxDVUxBVElPTlxuICAgICAgY29uc3QgY29uZmlkZW5jZSA9IHRoaXMuY2FsY3VsYXRlR2xvYmFsQ29uZmlkZW5jZShzYW1wbGVTaXplLCBkYXRhUXVhbGl0eSwgcHJvZmlsZS5jb25maWRlbmNlLCBjb3JyZWxhdGlvbnMpO1xuXG4gICAgICBjb25zdCBhbmFseXRpY3MgPSB7XG4gICAgICAgIHdlZWtseURlbHRhOiBwYXJzZUZsb2F0KHdlZWtseURlbHRhLnRvRml4ZWQoMikpLFxuICAgICAgICB2b2xhdGlsaXR5OiBwYXJzZUZsb2F0KHZvbGF0aWxpdHkudG9GaXhlZCgyKSksXG4gICAgICAgIGJhc2VsaW5lcyxcbiAgICAgICAgY29ycmVsYXRpb25zLFxuICAgICAgICBwcm9maWxlLFxuICAgICAgICBiZXN0VGltZXMsXG4gICAgICAgIHNhbXBsZVNpemUsXG4gICAgICAgIGRhdGFRdWFsaXR5OiBwYXJzZUZsb2F0KGRhdGFRdWFsaXR5LnRvRml4ZWQoMykpLFxuICAgICAgICBjb25maWRlbmNlOiBwYXJzZUZsb2F0KGNvbmZpZGVuY2UudG9GaXhlZCgzKSlcbiAgICAgIH07XG5cbiAgICAgIGNvbnNvbGUubG9nKCfwn46vIE1vb2QgYW5hbHl0aWNzIGNvbXBsZXRlZDonLCBhbmFseXRpY3MpO1xuICAgICAgcmV0dXJuIGFuYWx5dGljcztcbiAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgTW9vZCBhbmFseXRpY3MgcHJvY2Vzc2luZyBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3QgZW52aXJvbm1lbnRhbCB0cmlnZ2Vyc1xuICAgKi9cbiAgcHJpdmF0ZSBleHRyYWN0RW52aXJvbm1lbnRhbFRyaWdnZXJzKGNvbnRlbnQ6IGFueSk6IGFueVtdIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdHJpZ2dlcnM6IGFueVtdID0gW107XG4gICAgICBcbiAgICAgIC8vIEVudmlyb25tZW50YWwga2V5d29yZHNcbiAgICAgIGNvbnN0IGVudmlyb25tZW50YWxLZXl3b3JkcyA9IFtcbiAgICAgICAgJ2V2JywgJ29kYScsICdtdXRmYWsnLCAnYmFueW8nLCAnacWfJywgJ29rdWwnLCAnZMSxxZ9hcsSxJywgJ2FyYWJhJywgJ2hhc3RhbmUnLCAnbWHEn2F6YSdcbiAgICAgIF07XG5cbiAgICAgIC8vIENoZWNrIGNvbXB1bHNpb25zIGZvciBlbnZpcm9ubWVudGFsIGNvbnRleHRzXG4gICAgICBpZiAoY29udGVudC5jb21wdWxzaW9ucyAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQuY29tcHVsc2lvbnMpKSB7XG4gICAgICAgIGNvbnRlbnQuY29tcHVsc2lvbnMuZm9yRWFjaCgoYzogYW55KSA9PiB7XG4gICAgICAgICAgY29uc3QgdGV4dCA9IChjLm5vdGVzIHx8IGMudHJpZ2dlciB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBlbnZpcm9ubWVudGFsS2V5d29yZHMuZm9yRWFjaChrZXl3b3JkID0+IHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmluY2x1ZGVzKGtleXdvcmQpKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdlbnZpcm9ubWVudGFsJyxcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiBrZXl3b3JkLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGMuY2F0ZWdvcnkgfHwgJ3Vua25vd24nLFxuICAgICAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuN1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIG1vb2RzIGZvciBlbnZpcm9ubWVudGFsIG1lbnRpb25zXG4gICAgICBpZiAoY29udGVudC5tb29kcyAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQubW9vZHMpKSB7XG4gICAgICAgIGNvbnRlbnQubW9vZHMuZm9yRWFjaCgobTogYW55KSA9PiB7XG4gICAgICAgICAgY29uc3QgdHJpZ2dlcnNfYXJyYXkgPSBtLnRyaWdnZXJzIHx8IFtdO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRyaWdnZXJzX2FycmF5KSkge1xuICAgICAgICAgICAgdHJpZ2dlcnNfYXJyYXkuZm9yRWFjaCgodHJpZ2dlcjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGxvd2VyVHJpZ2dlciA9IHRyaWdnZXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgZW52aXJvbm1lbnRhbEtleXdvcmRzLmZvckVhY2goa2V5d29yZCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxvd2VyVHJpZ2dlci5pbmNsdWRlcyhrZXl3b3JkKSkge1xuICAgICAgICAgICAgICAgICAgdHJpZ2dlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbnZpcm9ubWVudGFsJyxcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjoga2V5d29yZCxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dDogJ21vb2QnLFxuICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlOiAwLjhcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJpZ2dlcnM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGV4dHJhY3RpbmcgZW52aXJvbm1lbnRhbCB0cmlnZ2VyczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cblxuXG4gIC8qKlxuICAgKiBBbmFseXplIHRyaWdnZXJzXG4gICAqL1xuICBwcml2YXRlIGFuYWx5emVUcmlnZ2Vycyhjb250ZW50OiBhbnkpOiBhbnlbXSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRyaWdnZXJzOiBhbnlbXSA9IFtdO1xuICAgICAgXG4gICAgICAvLyBDb21iaW5lIGVudmlyb25tZW50YWwgYW5kIG90aGVyIHRyaWdnZXJzXG4gICAgICBjb25zdCBlbnZUcmlnZ2VycyA9IHRoaXMuZXh0cmFjdEVudmlyb25tZW50YWxUcmlnZ2Vycyhjb250ZW50KTtcbiAgICAgIHRyaWdnZXJzLnB1c2goLi4uZW52VHJpZ2dlcnMpO1xuXG4gICAgICByZXR1cm4gdHJpZ2dlcnM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGFuYWx5emluZyB0cmlnZ2VyczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgc2V2ZXJpdHkgcHJvZ3Jlc3Npb25cbiAgICovXG4gIHByaXZhdGUgYW5hbHl6ZVNldmVyaXR5UHJvZ3Jlc3Npb24oY29udGVudDogYW55KTogYW55W10ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwcm9ncmVzc2lvbjogYW55W10gPSBbXTtcbiAgICAgIFxuICAgICAgaWYgKGNvbnRlbnQuY29tcHVsc2lvbnMgJiYgQXJyYXkuaXNBcnJheShjb250ZW50LmNvbXB1bHNpb25zKSkge1xuICAgICAgICAvLyBDYWxjdWxhdGUgYXZlcmFnZSBzZXZlcml0eS9yZXNpc3RhbmNlIG92ZXIgdGltZVxuICAgICAgICBjb25zdCBzb3J0ZWRDb21wdWxzaW9ucyA9IGNvbnRlbnQuY29tcHVsc2lvbnNcbiAgICAgICAgICAuZmlsdGVyKChjOiBhbnkpID0+IGMudGltZXN0YW1wICYmIHRoaXMuaGFzVmFsaWRTZXZlcml0eShjKSlcbiAgICAgICAgICAuc29ydCgoYTogYW55LCBiOiBhbnkpID0+IG5ldyBEYXRlKGEudGltZXN0YW1wKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShiLnRpbWVzdGFtcCkuZ2V0VGltZSgpKTtcblxuICAgICAgICBpZiAoc29ydGVkQ29tcHVsc2lvbnMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdCA9IHNvcnRlZENvbXB1bHNpb25zLnNsaWNlKDAsIE1hdGguZmxvb3Ioc29ydGVkQ29tcHVsc2lvbnMubGVuZ3RoIC8gMykpO1xuICAgICAgICAgIGNvbnN0IGxhc3QgPSBzb3J0ZWRDb21wdWxzaW9ucy5zbGljZSgtTWF0aC5mbG9vcihzb3J0ZWRDb21wdWxzaW9ucy5sZW5ndGggLyAzKSk7XG5cbiAgICAgICAgICBjb25zdCBmaXJzdEF2ZyA9IGZpcnN0LnJlZHVjZSgoc3VtOiBudW1iZXIsIGM6IGFueSkgPT4gc3VtICsgdGhpcy5nZXRDb21wdWxzaW9uU2V2ZXJpdHkoYyksIDApIC8gZmlyc3QubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IGxhc3RBdmcgPSBsYXN0LnJlZHVjZSgoc3VtOiBudW1iZXIsIGM6IGFueSkgPT4gc3VtICsgdGhpcy5nZXRDb21wdWxzaW9uU2V2ZXJpdHkoYyksIDApIC8gbGFzdC5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAoTWF0aC5hYnMobGFzdEF2ZyAtIGZpcnN0QXZnKSA+IDAuNSkge1xuICAgICAgICAgICAgcHJvZ3Jlc3Npb24ucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdzZXZlcml0eV9wcm9ncmVzc2lvbicsXG4gICAgICAgICAgICAgIHRyZW5kOiBsYXN0QXZnID4gZmlyc3RBdmcgPyAnaW1wcm92aW5nJyA6ICdkZWNsaW5pbmcnLFxuICAgICAgICAgICAgICBjaGFuZ2U6IGxhc3RBdmcgLSBmaXJzdEF2ZyxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGBEaXJlbsOnIHNldml5ZXNpICR7bGFzdEF2ZyA+IGZpcnN0QXZnID8gJ2FydMSxeW9yJyA6ICdhemFsxLF5b3InfWAsXG4gICAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuOFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9ncmVzc2lvbjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gRXJyb3IgYW5hbHl6aW5nIHNldmVyaXR5IHByb2dyZXNzaW9uOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIENCVCBQUk9HUkVTUyBBTkFMWVRJQ1NcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBcbiAgLyoqXG4gICAqIOKchSBORVc6IFByb2Nlc3MgQ0JUIFByb2dyZXNzIEFuYWx5dGljc1xuICAgKiBBbmFseXplcyB0aG91Z2h0IHJlY29yZHMgdG8gZ2VuZXJhdGUgY29tcHJlaGVuc2l2ZSBwcm9ncmVzcyBpbnNpZ2h0c1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzQ0JUUHJvZ3Jlc3NBbmFseXRpY3MoaW5wdXQ6IFVuaWZpZWRQaXBlbGluZUlucHV0KTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY29udGVudCA9IGlucHV0LmNvbnRlbnQgYXMgYW55O1xuICAgICAgY29uc3QgdGhvdWdodFJlY29yZHMgPSBjb250ZW50LnRob3VnaHRSZWNvcmRzIHx8IFtdO1xuICAgICAgY29uc3QgdGltZWZyYW1lID0gY29udGVudC50aW1lZnJhbWUgfHwgJ21vbnRoJztcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYPCfp6AgUHJvY2Vzc2luZyBDQlQgcHJvZ3Jlc3MgYW5hbHl0aWNzIGZvciAke3Rob3VnaHRSZWNvcmRzLmxlbmd0aH0gcmVjb3Jkc2ApO1xuICAgICAgXG4gICAgICBpZiAodGhvdWdodFJlY29yZHMubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpc3RvcnRpb25UcmVuZHM6IFtdLFxuICAgICAgICAgIHRlY2huaXF1ZUVmZmVjdGl2ZW5lc3M6IFtdLFxuICAgICAgICAgIHByb2dyZXNzQW5hbHlzaXM6ICdIZW7DvHogeWV0ZXJsaSB2ZXJpIHlvay4gRW4gYXogMi0zIGTDvMWfw7xuY2Uga2F5ZMSxIGdlcmVrbGkuJyxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFsnRMO8emVubGkgZMO8xZ/DvG5jZSBrYXlkxLEgdHV0bWF5YSBkZXZhbSBldCddLFxuICAgICAgICAgIHJpc2tMZXZlbDogJ2xvdycsXG4gICAgICAgICAgbmV4dEZvY3VzOiAnRGFoYSBmYXpsYSBkw7zFn8O8bmNlIGtheWTEsSB0dXQnLFxuICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICBhbmFseXNpc1RpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICByZWNvcmRDb3VudDogdGhvdWdodFJlY29yZHMubGVuZ3RoLFxuICAgICAgICAgICAgY29uZmlkZW5jZTogMC4zXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyAxLiBESVNUT1JUSU9OIFRSRU5EUyBBTkFMWVNJU1xuICAgICAgY29uc3QgZGlzdG9ydGlvblRyZW5kcyA9IHRoaXMuYW5hbHl6ZUNCVERpc3RvcnRpb25UcmVuZHModGhvdWdodFJlY29yZHMpO1xuICAgICAgXG4gICAgICAvLyAyLiBURUNITklRVUUgRUZGRUNUSVZFTkVTU1xuICAgICAgY29uc3QgdGVjaG5pcXVlRWZmZWN0aXZlbmVzcyA9IHRoaXMuYW5hbHl6ZUNCVFRlY2huaXF1ZUVmZmVjdGl2ZW5lc3ModGhvdWdodFJlY29yZHMpO1xuICAgICAgXG4gICAgICAvLyAzLiBQUk9HUkVTUyBBTkFMWVNJU1xuICAgICAgY29uc3QgcHJvZ3Jlc3NBbmFseXNpcyA9IHRoaXMuZ2VuZXJhdGVDQlRQcm9ncmVzc0FuYWx5c2lzKHRob3VnaHRSZWNvcmRzLCB0aW1lZnJhbWUpO1xuICAgICAgXG4gICAgICAvLyA0LiBSRUNPTU1FTkRBVElPTlNcbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHRoaXMuZ2VuZXJhdGVDQlRSZWNvbW1lbmRhdGlvbnModGhvdWdodFJlY29yZHMsIGRpc3RvcnRpb25UcmVuZHMpO1xuICAgICAgXG4gICAgICAvLyA1LiBSSVNLIExFVkVMIEFTU0VTU01FTlRcbiAgICAgIGNvbnN0IHJpc2tMZXZlbCA9IHRoaXMuYXNzZXNzQ0JUUmlza0xldmVsKHRob3VnaHRSZWNvcmRzKTtcbiAgICAgIFxuICAgICAgLy8gNi4gTkVYVCBGT0NVUyBBUkVBXG4gICAgICBjb25zdCBuZXh0Rm9jdXMgPSB0aGlzLmRldGVybWluZUNCVE5leHRGb2N1cyh0aG91Z2h0UmVjb3JkcywgZGlzdG9ydGlvblRyZW5kcyk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3RvcnRpb25UcmVuZHMsXG4gICAgICAgIHRlY2huaXF1ZUVmZmVjdGl2ZW5lc3MsXG4gICAgICAgIHByb2dyZXNzQW5hbHlzaXMsXG4gICAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgICAgcmlza0xldmVsLFxuICAgICAgICBuZXh0Rm9jdXMsXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgYW5hbHlzaXNUaW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHJlY29yZENvdW50OiB0aG91Z2h0UmVjb3Jkcy5sZW5ndGgsXG4gICAgICAgICAgY29uZmlkZW5jZTogdGhpcy5jYWxjdWxhdGVDQlRQcm9ncmVzc0NvbmZpZGVuY2UodGhvdWdodFJlY29yZHMpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIENCVCBQcm9ncmVzcyBBbmFseXRpY3MgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3RvcnRpb25UcmVuZHM6IFtdLFxuICAgICAgICB0ZWNobmlxdWVFZmZlY3RpdmVuZXNzOiBbXSxcbiAgICAgICAgcHJvZ3Jlc3NBbmFseXNpczogJ0FuYWxpeiBzxLFyYXPEsW5kYSBiaXIgaGF0YSBvbHXFn3R1LiBMw7x0ZmVuIGRhaGEgc29ucmEgdGVrcmFyIGRlbmV5aW4uJyxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbJ1Rla3JhciBkZW5leWViaWxpcnNpbiddLFxuICAgICAgICByaXNrTGV2ZWw6ICdsb3cnLFxuICAgICAgICBuZXh0Rm9jdXM6ICdTaXN0ZW0gaGF0YXPEsSBuZWRlbml5bGUgYmVsaXJsZW5lbWVkaScsXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgYW5hbHlzaXNUaW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHJlY29yZENvdW50OiAwLFxuICAgICAgICAgIGNvbmZpZGVuY2U6IDAsXG4gICAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIENCVCBBbmFseXRpY3MgSGVscGVyIE1ldGhvZHNcbiAgXG4gIHByaXZhdGUgYW5hbHl6ZUNCVERpc3RvcnRpb25UcmVuZHMocmVjb3JkczogYW55W10pOiBBcnJheTx7ZGlzdG9ydGlvbjogc3RyaW5nOyB0cmVuZDogJ2ltcHJvdmluZycgfCAnZGVjbGluaW5nJyB8ICdzdGFibGUnOyBjaGFuZ2U6IG51bWJlcn0+IHtcbiAgICBjb25zdCBkaXN0b3J0aW9uQ291bnRzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcltdPigpO1xuICAgIFxuICAgIC8vIEdyb3VwIGJ5IGRpc3RvcnRpb24gdHlwZSBhbmQgdGltZVxuICAgIHJlY29yZHMuZm9yRWFjaCgocmVjb3JkLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKHJlY29yZC5kaXN0b3J0aW9ucyAmJiBBcnJheS5pc0FycmF5KHJlY29yZC5kaXN0b3J0aW9ucykpIHtcbiAgICAgICAgcmVjb3JkLmRpc3RvcnRpb25zLmZvckVhY2goKGRpc3RvcnRpb246IHN0cmluZykgPT4ge1xuICAgICAgICAgIGlmICghZGlzdG9ydGlvbkNvdW50cy5oYXMoZGlzdG9ydGlvbikpIHtcbiAgICAgICAgICAgIGRpc3RvcnRpb25Db3VudHMuc2V0KGRpc3RvcnRpb24sIFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGlzdG9ydGlvbkNvdW50cy5nZXQoZGlzdG9ydGlvbikhLnB1c2goaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCB0cmVuZHM6IEFycmF5PHtkaXN0b3J0aW9uOiBzdHJpbmc7IHRyZW5kOiAnaW1wcm92aW5nJyB8ICdkZWNsaW5pbmcnIHwgJ3N0YWJsZSc7IGNoYW5nZTogbnVtYmVyfT4gPSBbXTtcbiAgICBcbiAgICBkaXN0b3J0aW9uQ291bnRzLmZvckVhY2goKG9jY3VycmVuY2VzLCBkaXN0b3J0aW9uKSA9PiB7XG4gICAgICBpZiAob2NjdXJyZW5jZXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGZyZXF1ZW5jeSB0cmVuZCAoZWFybHkgdnMgbGF0ZSByZWNvcmRzKVxuICAgICAgICBjb25zdCB0b3RhbFJlY29yZHMgPSByZWNvcmRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbWlkUG9pbnQgPSB0b3RhbFJlY29yZHMgLyAyO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZWFybHlPY2N1cnJlbmNlcyA9IG9jY3VycmVuY2VzLmZpbHRlcihpZHggPT4gaWR4IDwgbWlkUG9pbnQpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbGF0ZU9jY3VycmVuY2VzID0gb2NjdXJyZW5jZXMuZmlsdGVyKGlkeCA9PiBpZHggPj0gbWlkUG9pbnQpLmxlbmd0aDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGVhcmx5UmF0ZSA9IGVhcmx5T2NjdXJyZW5jZXMgLyBNYXRoLmNlaWwobWlkUG9pbnQpO1xuICAgICAgICBjb25zdCBsYXRlUmF0ZSA9IGxhdGVPY2N1cnJlbmNlcyAvIE1hdGguZmxvb3IodG90YWxSZWNvcmRzIC0gbWlkUG9pbnQpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY2hhbmdlID0gbGF0ZVJhdGUgLSBlYXJseVJhdGU7XG4gICAgICAgIFxuICAgICAgICBsZXQgdHJlbmQ6ICdpbXByb3ZpbmcnIHwgJ2RlY2xpbmluZycgfCAnc3RhYmxlJyA9ICdzdGFibGUnO1xuICAgICAgICBpZiAoY2hhbmdlIDwgLTAuMSkgdHJlbmQgPSAnaW1wcm92aW5nJzsgLy8gTGVzcyBmcmVxdWVudCA9IGltcHJvdmluZ1xuICAgICAgICBlbHNlIGlmIChjaGFuZ2UgPiAwLjEpIHRyZW5kID0gJ2RlY2xpbmluZyc7IC8vIE1vcmUgZnJlcXVlbnQgPSBkZWNsaW5pbmdcbiAgICAgICAgXG4gICAgICAgIHRyZW5kcy5wdXNoKHtcbiAgICAgICAgICBkaXN0b3J0aW9uLFxuICAgICAgICAgIHRyZW5kLFxuICAgICAgICAgIGNoYW5nZTogTWF0aC5yb3VuZChjaGFuZ2UgKiAxMDApIC8gMTAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIFNvcnQgYnkgbW9zdCBzaWduaWZpY2FudCBjaGFuZ2VzXG4gICAgcmV0dXJuIHRyZW5kcy5zb3J0KChhLCBiKSA9PiBNYXRoLmFicyhiLmNoYW5nZSkgLSBNYXRoLmFicyhhLmNoYW5nZSkpLnNsaWNlKDAsIDUpO1xuICB9XG4gIFxuICBwcml2YXRlIGFuYWx5emVDQlRUZWNobmlxdWVFZmZlY3RpdmVuZXNzKHJlY29yZHM6IGFueVtdKTogQXJyYXk8e3RlY2huaXF1ZTogc3RyaW5nOyBlZmZlY3RpdmVuZXNzOiBudW1iZXI7IGNvbmZpZGVuY2U6IG51bWJlcn0+IHtcbiAgICBjb25zdCB0ZWNobmlxdWVzOiBBcnJheTx7dGVjaG5pcXVlOiBzdHJpbmc7IGVmZmVjdGl2ZW5lc3M6IG51bWJlcjsgY29uZmlkZW5jZTogbnVtYmVyfT4gPSBbXTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgbW9vZCBpbXByb3ZlbWVudCBhcyB0ZWNobmlxdWUgZWZmZWN0aXZlbmVzc1xuICAgIGNvbnN0IGF2Z01vb2RJbXByb3ZlbWVudCA9IHJlY29yZHMubGVuZ3RoID4gMCBcbiAgICAgID8gcmVjb3Jkcy5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgKChyLm1vb2RBZnRlciB8fCA1KSAtIChyLm1vb2RCZWZvcmUgfHwgNSkpLCAwKSAvIHJlY29yZHMubGVuZ3RoIFxuICAgICAgOiAwO1xuICAgIFxuICAgIGlmIChhdmdNb29kSW1wcm92ZW1lbnQgPiAwKSB7XG4gICAgICB0ZWNobmlxdWVzLnB1c2goe1xuICAgICAgICB0ZWNobmlxdWU6ICdEw7zFn8O8bmNlIEtheWTEsScsXG4gICAgICAgIGVmZmVjdGl2ZW5lc3M6IE1hdGgubWluKDEwLCBNYXRoLnJvdW5kKGF2Z01vb2RJbXByb3ZlbWVudCAqIDEwKSAvIDEwKSxcbiAgICAgICAgY29uZmlkZW5jZTogcmVjb3Jkcy5sZW5ndGggPj0gNSA/IDAuOSA6IDAuNlxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEFuYWx5emUgZXZpZGVuY2UgZ2F0aGVyaW5nIHRlY2huaXF1ZVxuICAgIGNvbnN0IGV2aWRlbmNlUmVjb3JkcyA9IHJlY29yZHMuZmlsdGVyKHIgPT4gci5ldmlkZW5jZUZvciAmJiByLmV2aWRlbmNlQWdhaW5zdCk7XG4gICAgaWYgKGV2aWRlbmNlUmVjb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBldmlkZW5jZUF2Z0ltcHJvdmVtZW50ID0gZXZpZGVuY2VSZWNvcmRzLnJlZHVjZShcbiAgICAgICAgKHN1bSwgcikgPT4gc3VtICsgKChyLm1vb2RBZnRlciB8fCA1KSAtIChyLm1vb2RCZWZvcmUgfHwgNSkpLCAwXG4gICAgICApIC8gZXZpZGVuY2VSZWNvcmRzLmxlbmd0aDtcbiAgICAgIFxuICAgICAgdGVjaG5pcXVlcy5wdXNoKHtcbiAgICAgICAgdGVjaG5pcXVlOiAnS2FuxLF0IFRvcGxhbWEnLFxuICAgICAgICBlZmZlY3RpdmVuZXNzOiBNYXRoLm1pbigxMCwgTWF0aC5yb3VuZChldmlkZW5jZUF2Z0ltcHJvdmVtZW50ICogMTApIC8gMTApLFxuICAgICAgICBjb25maWRlbmNlOiBldmlkZW5jZVJlY29yZHMubGVuZ3RoID49IDMgPyAwLjggOiAwLjVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGVjaG5pcXVlcy5zbGljZSgwLCAzKTtcbiAgfVxuICBcbiAgcHJpdmF0ZSBnZW5lcmF0ZUNCVFByb2dyZXNzQW5hbHlzaXMocmVjb3JkczogYW55W10sIHRpbWVmcmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCByZWNvcmRDb3VudCA9IHJlY29yZHMubGVuZ3RoO1xuICAgIGNvbnN0IGF2Z01vb2RJbXByb3ZlbWVudCA9IHJlY29yZHMubGVuZ3RoID4gMCBcbiAgICAgID8gcmVjb3Jkcy5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgKChyLm1vb2RBZnRlciB8fCA1KSAtIChyLm1vb2RCZWZvcmUgfHwgNSkpLCAwKSAvIHJlY29yZHMubGVuZ3RoIFxuICAgICAgOiAwO1xuICAgIFxuICAgIGNvbnN0IHJlY2VudFJlY29yZHMgPSByZWNvcmRzLnNsaWNlKDAsIE1hdGgubWluKDUsIHJlY29yZHMubGVuZ3RoKSk7XG4gICAgY29uc3QgcmVjZW50QXZnSW1wcm92ZW1lbnQgPSByZWNlbnRSZWNvcmRzLmxlbmd0aCA+IDBcbiAgICAgID8gcmVjZW50UmVjb3Jkcy5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgKChyLm1vb2RBZnRlciB8fCA1KSAtIChyLm1vb2RCZWZvcmUgfHwgNSkpLCAwKSAvIHJlY2VudFJlY29yZHMubGVuZ3RoXG4gICAgICA6IDA7XG4gICAgXG4gICAgaWYgKHJlY29yZENvdW50IDwgNSkge1xuICAgICAgcmV0dXJuIGAke3JlY29yZENvdW50fSBkw7zFn8O8bmNlIGtheWTEsW4gdmFyLiBDQlQgeW9sY3VsdcSfdW51biBiYcWfbGFuZ8SxY8SxbmRhc8SxbiB2ZSBvcnRhbGFtYSAke2F2Z01vb2RJbXByb3ZlbWVudC50b0ZpeGVkKDEpfSBwdWFubMSxayBtb29kIGl5aWxlxZ9tZXNpIHNhxJ9sxLF5b3JzdW4uYDtcbiAgICB9IGVsc2UgaWYgKGF2Z01vb2RJbXByb3ZlbWVudCA+PSAyKSB7XG4gICAgICByZXR1cm4gYCR7cmVjb3JkQ291bnR9IGthecSxdGxhIGfDvMOnbMO8IGJpciBpbGVybGVtZSBnw7ZzdGVyaXlvcnN1bi4gT3J0YWxhbWEgJHthdmdNb29kSW1wcm92ZW1lbnQudG9GaXhlZCgxKX0gcHVhbmzEsWsgbW9vZCBpeWlsZcWfbWVzaSwgQ0JUIHRla25pa2xlcmluaW4gc2FuYSB1eWd1biBvbGR1xJ91bnUgZ8O2c3Rlcml5b3IuYDtcbiAgICB9IGVsc2UgaWYgKGF2Z01vb2RJbXByb3ZlbWVudCA+PSAxKSB7XG4gICAgICByZXR1cm4gYCR7cmVjb3JkQ291bnR9IGthecSxdGxhIGlzdGlrcmFybMSxIGJpciBnZWxpxZ9pbSBzw7xyZWNpIHlhxZ/EsXlvcnN1bi4gJHthdmdNb29kSW1wcm92ZW1lbnQudG9GaXhlZCgxKX0gcHVhbmzEsWsgb3J0YWxhbWEgaXlpbGXFn21lLCBkw7x6ZW5saSBwcmF0aWtsZSBhcnRtYXlhIGRldmFtIGVkZWNlay5gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYCR7cmVjb3JkQ291bnR9IGthecSxdCB0YW1hbWxhZMSxbi4gTW9vZCBpeWlsZcWfbWVzaSBoZW7DvHogYmVrbGVuZW4gc2V2aXllZGUgZGXEn2lsIGFtYSBidSBub3JtYWwgLSBDQlQgYmVjZXJpbGVyaSB6YW1hbiBpw6dpbmRlIGdlbGnFn2lyLmA7XG4gICAgfVxuICB9XG4gIFxuICBwcml2YXRlIGdlbmVyYXRlQ0JUUmVjb21tZW5kYXRpb25zKHJlY29yZHM6IGFueVtdLCBkaXN0b3J0aW9uVHJlbmRzOiBhbnlbXSk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgLy8gQmFzZWQgb24gcmVjb3JkIGZyZXF1ZW5jeVxuICAgIGlmIChyZWNvcmRzLmxlbmd0aCA8IDEwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnRGFoYSBzxLFrIGTDvMWfw7xuY2Uga2F5ZMSxIHR1dGFyYWsgcGF0dGVyblxcJ2xlcmluIGRhaGEgbmV0IGfDtnLDvG5tZXNpbmkgc2HEn2xhJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIEJhc2VkIG9uIG1vb2QgaW1wcm92ZW1lbnRcbiAgICBjb25zdCBhdmdNb29kSW1wcm92ZW1lbnQgPSByZWNvcmRzLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyAoKHIubW9vZEFmdGVyIHx8IDUpIC0gKHIubW9vZEJlZm9yZSB8fCA1KSksIDApIC8gcmVjb3Jkcy5sZW5ndGg7XG4gICAgaWYgKGF2Z01vb2RJbXByb3ZlbWVudCA8IDEpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdLYW7EsXQgdG9wbGFtYSBhZMSxbcSxbmEgZGFoYSBmYXpsYSB6YW1hbiBhecSxcmFyYWsgZMO8xZ/DvG5jZWxlcmluaSBkYWhhIG9iamVrdGlmIGRlxJ9lcmxlbmRpcicpO1xuICAgIH1cbiAgICBcbiAgICAvLyBCYXNlZCBvbiBkaXN0b3J0aW9uIHRyZW5kc1xuICAgIGNvbnN0IGRlY2xpbmluZ0Rpc3RvcnRpb25zID0gZGlzdG9ydGlvblRyZW5kcy5maWx0ZXIoZCA9PiBkLnRyZW5kID09PSAnZGVjbGluaW5nJyk7XG4gICAgaWYgKGRlY2xpbmluZ0Rpc3RvcnRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKGAke2RlY2xpbmluZ0Rpc3RvcnRpb25zWzBdLmRpc3RvcnRpb259IGtvbnVzdW5kYSBla3N0cmEgZGlra2F0IGfDtnN0ZXIgLSBzxLFrbMSxxJ/EsSBhcnTEscWfIGfDtnN0ZXJpeW9yYCk7XG4gICAgfVxuICAgIFxuICAgIC8vIEV2aWRlbmNlIHF1YWxpdHlcbiAgICBjb25zdCBldmlkZW5jZVJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihyID0+IHIuZXZpZGVuY2VGb3IgJiYgci5ldmlkZW5jZUFnYWluc3QpO1xuICAgIGlmIChldmlkZW5jZVJlY29yZHMubGVuZ3RoIDwgcmVjb3Jkcy5sZW5ndGggKiAwLjcpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdMZWhpbmUgdmUgYWxleWhpbmUga2FuxLF0bGFyxLEgZGFoYSBkw7x6ZW5saSBkb2xkdXJtYXlhIG9kYWtsYW4nKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucy5zbGljZSgwLCAzKTtcbiAgfVxuICBcbiAgcHJpdmF0ZSBhc3Nlc3NDQlRSaXNrTGV2ZWwocmVjb3JkczogYW55W10pOiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHtcbiAgICBjb25zdCByZWNlbnRSZWNvcmRzID0gcmVjb3Jkcy5zbGljZSgwLCA1KTtcbiAgICBjb25zdCBhdmdNb29kQmVmb3JlID0gcmVjZW50UmVjb3Jkcy5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgKHIubW9vZEJlZm9yZSB8fCA1KSwgMCkgLyByZWNlbnRSZWNvcmRzLmxlbmd0aDtcbiAgICBjb25zdCBhdmdNb29kSW1wcm92ZW1lbnQgPSByZWNlbnRSZWNvcmRzLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyAoKHIubW9vZEFmdGVyIHx8IDUpIC0gKHIubW9vZEJlZm9yZSB8fCA1KSksIDApIC8gcmVjZW50UmVjb3Jkcy5sZW5ndGg7XG4gICAgXG4gICAgaWYgKGF2Z01vb2RCZWZvcmUgPD0gMyAmJiBhdmdNb29kSW1wcm92ZW1lbnQgPCAwLjUpIHtcbiAgICAgIHJldHVybiAnaGlnaCc7XG4gICAgfSBlbHNlIGlmIChhdmdNb29kQmVmb3JlIDw9IDQgfHwgYXZnTW9vZEltcHJvdmVtZW50IDwgMSkge1xuICAgICAgcmV0dXJuICdtZWRpdW0nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2xvdyc7XG4gICAgfVxuICB9XG4gIFxuICBwcml2YXRlIGRldGVybWluZUNCVE5leHRGb2N1cyhyZWNvcmRzOiBhbnlbXSwgZGlzdG9ydGlvblRyZW5kczogYW55W10pOiBzdHJpbmcge1xuICAgIC8vIEZpbmQgbW9zdCBwcm9ibGVtYXRpYyBkaXN0b3J0aW9uXG4gICAgY29uc3QgZGVjbGluaW5nRGlzdG9ydGlvbnMgPSBkaXN0b3J0aW9uVHJlbmRzLmZpbHRlcihkID0+IGQudHJlbmQgPT09ICdkZWNsaW5pbmcnKTtcbiAgICBpZiAoZGVjbGluaW5nRGlzdG9ydGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGAke2RlY2xpbmluZ0Rpc3RvcnRpb25zWzBdLmRpc3RvcnRpb259IMOnYXJwxLF0bWFzxLFuYSBvZGFrbGFuYDtcbiAgICB9XG4gICAgXG4gICAgLy8gQmFzZWQgb24gZXZpZGVuY2UgdXNhZ2VcbiAgICBjb25zdCBldmlkZW5jZVJlY29yZHMgPSByZWNvcmRzLmZpbHRlcihyID0+IHIuZXZpZGVuY2VGb3IgJiYgci5ldmlkZW5jZUFnYWluc3QpO1xuICAgIGlmIChldmlkZW5jZVJlY29yZHMubGVuZ3RoIDwgcmVjb3Jkcy5sZW5ndGggKiAwLjUpIHtcbiAgICAgIHJldHVybiAnS2FuxLF0IHRvcGxhbWEgYmVjZXJpbGVyaW4gZ2VsacWfdGlyJztcbiAgICB9XG4gICAgXG4gICAgLy8gQmFzZWQgb24gcmVjb3JkIGZyZXF1ZW5jeVxuICAgIGlmIChyZWNvcmRzLmxlbmd0aCA8IDE1KSB7XG4gICAgICByZXR1cm4gJ0TDvHplbmxpIGthecSxdCB0dXRtYSBhbMSxxZ9rYW5sxLHEn8SxbiBnw7zDp2xlbmRpcic7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiAnUmVmcmFtZSB0ZWtuaWtsZXJpbmkgw6dlxZ9pdGxlbmRpcic7XG4gIH1cbiAgXG4gIHByaXZhdGUgY2FsY3VsYXRlQ0JUUHJvZ3Jlc3NDb25maWRlbmNlKHJlY29yZHM6IGFueVtdKTogbnVtYmVyIHtcbiAgICBpZiAocmVjb3Jkcy5sZW5ndGggPCAzKSByZXR1cm4gMC4zO1xuICAgIGlmIChyZWNvcmRzLmxlbmd0aCA8IDcpIHJldHVybiAwLjY7XG4gICAgaWYgKHJlY29yZHMubGVuZ3RoIDwgMTUpIHJldHVybiAwLjg7XG4gICAgcmV0dXJuIDAuOTtcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gTUlTU0lORyBQQVRURVJOIEFOQUxZU0lTIE1FVEhPRFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgcGF0dGVybiBjb25maWRlbmNlIGJhc2VkIG9uIGRhdGEgcG9pbnRzXG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZVBhdHRlcm5Db25maWRlbmNlKGRhdGFQb2ludHM6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGRhdGFQb2ludHMgPCAyKSByZXR1cm4gMC4yO1xuICAgIGlmIChkYXRhUG9pbnRzIDwgNSkgcmV0dXJuIDAuNDtcbiAgICBpZiAoZGF0YVBvaW50cyA8IDEwKSByZXR1cm4gMC42O1xuICAgIGlmIChkYXRhUG9pbnRzIDwgMjApIHJldHVybiAwLjg7XG4gICAgcmV0dXJuIE1hdGgubWluKDAuOTUsIDAuOCArIChkYXRhUG9pbnRzIC0gMjApICogMC4wMSk7XG4gIH1cblxuXG5cblxuXG5cblxuICAvKipcbiAgICogRXh0cmFjdCBlbnZpcm9ubWVudGFsIHRyaWdnZXJzIGZyb20gY29tcHVsc2lvbnNcbiAgICovXG4gIHByaXZhdGUgZXh0cmFjdEVudmlyb25tZW50YWxUcmlnZ2Vycyhjb21wdWxzaW9uczogYW55W10pOiBhbnlbXSB7XG4gICAgaWYgKCFjb21wdWxzaW9ucyB8fCAhQXJyYXkuaXNBcnJheShjb21wdWxzaW9ucykpIHJldHVybiBbXTtcbiAgICBcbiAgICBjb25zdCBwYXR0ZXJucyA9IFtdO1xuICAgIFxuICAgIC8vIFRyaWdnZXIga2V5d29yZCBleHRyYWN0aW9uXG4gICAgY29uc3QgdHJpZ2dlckNvdW50czogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuICAgIGNvbXB1bHNpb25zLmZvckVhY2goYyA9PiB7XG4gICAgICBpZiAoYy50cmlnZ2VyICYmIHR5cGVvZiBjLnRyaWdnZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IGtleXdvcmRzID0gYy50cmlnZ2VyLnRvTG93ZXJDYXNlKCkuc3BsaXQoL1xccysvKTtcbiAgICAgICAga2V5d29yZHMuZm9yRWFjaChrZXl3b3JkID0+IHtcbiAgICAgICAgICBpZiAoa2V5d29yZC5sZW5ndGggPiAyKSB7IC8vIElnbm9yZSBzaG9ydCB3b3Jkc1xuICAgICAgICAgICAgdHJpZ2dlckNvdW50c1trZXl3b3JkXSA9ICh0cmlnZ2VyQ291bnRzW2tleXdvcmRdIHx8IDApICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIENvbnZlcnQgdG8gcGF0dGVybnNcbiAgICBmb3IgKGNvbnN0IFt0cmlnZ2VyLCBjb3VudF0gb2YgT2JqZWN0LmVudHJpZXModHJpZ2dlckNvdW50cykpIHtcbiAgICAgIGlmIChjb3VudCA+IDEpIHsgLy8gTXVsdGlwbGUgb2NjdXJyZW5jZXNcbiAgICAgICAgcGF0dGVybnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2Vudmlyb25tZW50YWxfdHJpZ2dlcicsXG4gICAgICAgICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICAgICAgICBmcmVxdWVuY3k6IGNvdW50LFxuICAgICAgICAgIGNvbmZpZGVuY2U6IHRoaXMuY2FsY3VsYXRlUGF0dGVybkNvbmZpZGVuY2UoY291bnQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcGF0dGVybnM7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdCBtb29kLXJlbGF0ZWQgdGVtcG9yYWwgcGF0dGVybnMgYnkgaG91ciAoT1BUSU1JWkVEIC0gbGlnaHR3ZWlnaHQgdmVyc2lvbilcbiAgICovXG4gIHByaXZhdGUgZXh0cmFjdE1vb2RUZW1wb3JhbFBhdHRlcm5zQnlIb3VyKGRhdGE6IGFueSk6IGFueVtdIHtcbiAgICBjb25zdCBwYXR0ZXJucyA9IFtdO1xuICAgIFxuICAgIGlmIChkYXRhLm1vb2RzICYmIEFycmF5LmlzQXJyYXkoZGF0YS5tb29kcykpIHtcbiAgICAgIC8vIPCfmoAgUEVSRk9STUFOQ0U6IFNhbXBsZSBvbmx5IHJlY2VudCBtb29kcyBhbmQgbGltaXQgcHJvY2Vzc2luZ1xuICAgICAgY29uc3QgU0FNUExFX1NJWkUgPSAyMDsgLy8gTXVjaCBzbWFsbGVyIHNhbXBsZSBmb3IgaG91cmx5IGFuYWx5c2lzXG4gICAgICBjb25zdCByZWNlbnRNb29kcyA9IGRhdGEubW9vZHNcbiAgICAgICAgLnNsaWNlKDAsIFNBTVBMRV9TSVpFKVxuICAgICAgICAuZmlsdGVyKG1vb2QgPT4gbW9vZC50aW1lc3RhbXAgfHwgbW9vZC5jcmVhdGVkX2F0KTtcbiAgICAgIFxuICAgICAgaWYgKHJlY2VudE1vb2RzLmxlbmd0aCA8IDUpIHJldHVybiBbXTsgLy8gRWFybHkgZXhpdCBmb3IgaW5zdWZmaWNpZW50IGRhdGFcbiAgICAgIFxuICAgICAgY29uc3QgbW9vZHNCeUhvdXIgPSBuZXcgQXJyYXkoMjQpLmZpbGwoMCkubWFwKCgpID0+ICh7IHRvdGFsOiAwLCBjb3VudDogMCB9KSk7XG4gICAgICBcbiAgICAgIHJlY2VudE1vb2RzLmZvckVhY2gobW9vZCA9PiB7XG4gICAgICAgIGNvbnN0IGhvdXIgPSBuZXcgRGF0ZShtb29kLnRpbWVzdGFtcCB8fCBtb29kLmNyZWF0ZWRfYXQpLmdldEhvdXJzKCk7XG4gICAgICAgIG1vb2RzQnlIb3VyW2hvdXJdLnRvdGFsICs9IG1vb2QubW9vZF9zY29yZSB8fCA1O1xuICAgICAgICBtb29kc0J5SG91cltob3VyXS5jb3VudCArPSAxO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEZpbmQgc2lnbmlmaWNhbnQgbG93IG1vb2QgcGVyaW9kcyBvbmx5IChlYXJseSBleGl0KVxuICAgICAgY29uc3QgaG91cmx5QXZlcmFnZXMgPSBtb29kc0J5SG91clxuICAgICAgICAubWFwKChoLCBob3VyKSA9PiAoeyBob3VyLCBhdmVyYWdlOiBoLmNvdW50ID4gMCA/IGgudG90YWwgLyBoLmNvdW50IDogNSwgY291bnQ6IGguY291bnQgfSkpXG4gICAgICAgIC5maWx0ZXIoaCA9PiBoLmNvdW50ID49IDIgJiYgaC5hdmVyYWdlIDwgNCk7IC8vIE1vcmUgcmVzdHJpY3RpdmUgZmlsdGVyaW5nXG4gICAgICBcbiAgICAgIGlmIChob3VybHlBdmVyYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBhdHRlcm5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdsb3dfbW9vZF90ZW1wb3JhbF9ob3VybHknLFxuICAgICAgICAgIGhvdXJzOiBob3VybHlBdmVyYWdlcy5zbGljZSgwLCAzKS5tYXAoaCA9PiBoLmhvdXIpLCAvLyBMaW1pdCB0byB0b3AgM1xuICAgICAgICAgIGF2ZXJhZ2VTY29yZTogaG91cmx5QXZlcmFnZXMucmVkdWNlKChzdW0sIGgpID0+IHN1bSArIGguYXZlcmFnZSwgMCkgLyBob3VybHlBdmVyYWdlcy5sZW5ndGgsXG4gICAgICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4oMC43LCBob3VybHlBdmVyYWdlcy5sZW5ndGggLyAxMCksXG4gICAgICAgICAgc2FtcGxlU2l6ZTogcmVjZW50TW9vZHMubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcGF0dGVybnM7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEhFTFBFUiBNRVRIT0RTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBwcml2YXRlIGdyb3VwQnlUaW1lV2luZG93KGNvbXB1bHNpb25zOiBhbnlbXSwgd2luZG93RGF5czogbnVtYmVyKTogYW55W11bXSB7XG4gICAgY29uc3Qgd2luZG93czogYW55W11bXSA9IFtdO1xuICAgIGNvbnN0IHNvcnRlZENvbXB1bHNpb25zID0gWy4uLmNvbXB1bHNpb25zXS5zb3J0KChhLCBiKSA9PiBcbiAgICAgIG5ldyBEYXRlKGEudGltZXN0YW1wKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShiLnRpbWVzdGFtcCkuZ2V0VGltZSgpXG4gICAgKTtcbiAgICBcbiAgICBpZiAoc29ydGVkQ29tcHVsc2lvbnMubGVuZ3RoID09PSAwKSByZXR1cm4gd2luZG93cztcbiAgICBcbiAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZShzb3J0ZWRDb21wdWxzaW9uc1swXS50aW1lc3RhbXApLmdldFRpbWUoKTtcbiAgICBjb25zdCB3aW5kb3dNcyA9IHdpbmRvd0RheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuICAgIFxuICAgIGxldCBjdXJyZW50V2luZG93OiBhbnlbXSA9IFtdO1xuICAgIGxldCBjdXJyZW50V2luZG93U3RhcnQgPSBzdGFydFRpbWU7XG4gICAgXG4gICAgc29ydGVkQ29tcHVsc2lvbnMuZm9yRWFjaChjID0+IHtcbiAgICAgIGNvbnN0IGNUaW1lID0gbmV3IERhdGUoYy50aW1lc3RhbXApLmdldFRpbWUoKTtcbiAgICAgIGlmIChjVGltZSA+PSBjdXJyZW50V2luZG93U3RhcnQgKyB3aW5kb3dNcykge1xuICAgICAgICBpZiAoY3VycmVudFdpbmRvdy5sZW5ndGggPiAwKSB3aW5kb3dzLnB1c2goY3VycmVudFdpbmRvdyk7XG4gICAgICAgIGN1cnJlbnRXaW5kb3cgPSBbY107XG4gICAgICAgIGN1cnJlbnRXaW5kb3dTdGFydCA9IE1hdGguZmxvb3IoKGNUaW1lIC0gc3RhcnRUaW1lKSAvIHdpbmRvd01zKSAqIHdpbmRvd01zICsgc3RhcnRUaW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFdpbmRvdy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGlmIChjdXJyZW50V2luZG93Lmxlbmd0aCA+IDApIHdpbmRvd3MucHVzaChjdXJyZW50V2luZG93KTtcbiAgICByZXR1cm4gd2luZG93cztcbiAgfVxuXG4gIC8qKlxuICAgKiDwn5OKIEV4dHJhY3QgcmVzaXN0YW5jZS9zZXZlcml0eSB2YWx1ZSBmcm9tIGNvbXB1bHNpb24gd2l0aCBmaWVsZCBuYW1lIGZsZXhpYmlsaXR5XG4gICAqL1xuICBwcml2YXRlIGdldENvbXB1bHNpb25TZXZlcml0eShjb21wdWxzaW9uOiBhbnkpOiBudW1iZXIge1xuICAgIHJldHVybiBjb21wdWxzaW9uLnNldmVyaXR5IHx8IGNvbXB1bHNpb24ucmVzaXN0YW5jZUxldmVsIHx8IGNvbXB1bHNpb24ucmVzaXN0YW5jZV9sZXZlbCB8fCBjb21wdWxzaW9uLmludGVuc2l0eSB8fCA1O1xuICB9XG5cbiAgLyoqXG4gICAqIPCfk4ogQ2hlY2sgaWYgY29tcHVsc2lvbiBoYXMgdmFsaWQgc2V2ZXJpdHkvcmVzaXN0YW5jZSBkYXRhXG4gICAqL1xuICBwcml2YXRlIGhhc1ZhbGlkU2V2ZXJpdHkoY29tcHVsc2lvbjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNvbXB1bHNpb24uc2V2ZXJpdHkgIT09IHVuZGVmaW5lZCB8fCBcbiAgICAgICAgICAgY29tcHVsc2lvbi5yZXNpc3RhbmNlTGV2ZWwgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICBjb21wdWxzaW9uLnJlc2lzdGFuY2VfbGV2ZWwgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICBjb21wdWxzaW9uLmludGVuc2l0eSAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVBdmVyYWdlU2V2ZXJpdHkoY29tcHVsc2lvbnM6IGFueVtdKTogbnVtYmVyIHtcbiAgICBpZiAoIWNvbXB1bHNpb25zIHx8ICFBcnJheS5pc0FycmF5KGNvbXB1bHNpb25zKSB8fCBjb21wdWxzaW9ucy5sZW5ndGggPT09IDApIHJldHVybiAwO1xuICAgIGNvbnN0IHRvdGFsID0gY29tcHVsc2lvbnMucmVkdWNlKChzdW0sIGMpID0+IHN1bSArIHRoaXMuZ2V0Q29tcHVsc2lvblNldmVyaXR5KGMpLCAwKTtcbiAgICByZXR1cm4gdG90YWwgLyBjb21wdWxzaW9ucy5sZW5ndGg7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZVR5cGVGcmVxdWVuY3koY29tcHVsc2lvbnM6IGFueVtdKTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gICAgY29uc3QgZnJlcTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuICAgIGlmICghY29tcHVsc2lvbnMgfHwgIUFycmF5LmlzQXJyYXkoY29tcHVsc2lvbnMpKSByZXR1cm4gZnJlcTtcbiAgICBcbiAgICBjb21wdWxzaW9ucy5mb3JFYWNoKGMgPT4ge1xuICAgICAgaWYgKGMudHlwZSkge1xuICAgICAgICBmcmVxW2MudHlwZV0gPSAoZnJlcVtjLnR5cGVdIHx8IDApICsgMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnJlcTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdERheU9mV2Vla1BhdHRlcm4oY29tcHVsc2lvbnM6IGFueVtdKTogYW55IHwgbnVsbCB7XG4gICAgaWYgKCFjb21wdWxzaW9ucyB8fCAhQXJyYXkuaXNBcnJheShjb21wdWxzaW9ucykpIHJldHVybiBudWxsO1xuICAgIFxuICAgIGNvbnN0IGRheUNvdW50cyA9IG5ldyBBcnJheSg3KS5maWxsKDApO1xuICAgIGNvbXB1bHNpb25zLmZvckVhY2goYyA9PiB7XG4gICAgICBjb25zdCBkYXkgPSBuZXcgRGF0ZShjLnRpbWVzdGFtcCkuZ2V0RGF5KCk7XG4gICAgICBkYXlDb3VudHNbZGF5XSsrO1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IG1heENvdW50ID0gTWF0aC5tYXgoLi4uZGF5Q291bnRzKTtcbiAgICBjb25zdCBhdmdDb3VudCA9IGRheUNvdW50cy5yZWR1Y2UoKHN1bSwgY291bnQpID0+IHN1bSArIGNvdW50LCAwKSAvIDc7XG4gICAgXG4gICAgaWYgKG1heENvdW50ID4gYXZnQ291bnQgKiAxLjUpIHsgLy8gU2lnbmlmaWNhbnQgZGV2aWF0aW9uXG4gICAgICBjb25zdCBwZWFrRGF5ID0gZGF5Q291bnRzLmluZGV4T2YobWF4Q291bnQpO1xuICAgICAgY29uc3QgZGF5TmFtZXMgPSBbJ1BhemFyJywgJ1BhemFydGVzaScsICdTYWzEsScsICfDh2FyxZ9hbWJhJywgJ1BlcsWfZW1iZScsICdDdW1hJywgJ0N1bWFydGVzaSddO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZGF5X29mX3dlZWtfcGF0dGVybicsXG4gICAgICAgIHBlYWtEYXk6IHBlYWtEYXksXG4gICAgICAgIGRheU5hbWU6IGRheU5hbWVzW3BlYWtEYXldLFxuICAgICAgICBmcmVxdWVuY3k6IG1heENvdW50LFxuICAgICAgICBjb25maWRlbmNlOiB0aGlzLmNhbGN1bGF0ZVBhdHRlcm5Db25maWRlbmNlKG1heENvdW50KVxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RUZXh0UGF0dGVybnMoY29udGVudDogc3RyaW5nKTogYW55IHtcbiAgICAvLyBTaW1wbGUgdGV4dCBwYXR0ZXJuIGV4dHJhY3Rpb24gZm9yIHZvaWNlL25vdGVzIGlucHV0XG4gICAgY29uc3QgcGF0dGVybnMgPSB7XG4gICAgICBiZWhhdmlvcmFsOiBbXSxcbiAgICAgIHRyaWdnZXJzOiBbXVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgdGV4dCA9IGNvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICAvLyBCZWhhdmlvcmFsIHBhdHRlcm4ga2V5d29yZHNcbiAgICBjb25zdCBiZWhhdmlvcmFsS2V5d29yZHMgPSBbJ3Rla3JhcicsICdrb250cm9sJywgJ3RlbWl6bGlrJywgJ3NheW1hJywgJ3PEsXJhbGFtYSddO1xuICAgIGJlaGF2aW9yYWxLZXl3b3Jkcy5mb3JFYWNoKGtleXdvcmQgPT4ge1xuICAgICAgaWYgKHRleHQuaW5jbHVkZXMoa2V5d29yZCkpIHtcbiAgICAgICAgcGF0dGVybnMuYmVoYXZpb3JhbC5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAndGV4dF9iZWhhdmlvcmFsJyxcbiAgICAgICAgICBrZXl3b3JkOiBrZXl3b3JkLFxuICAgICAgICAgIGNvbnRleHQ6IHRleHQsXG4gICAgICAgICAgY29uZmlkZW5jZTogMC42XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIFRyaWdnZXIgcGF0dGVybiBrZXl3b3Jkc1xuICAgIGNvbnN0IHRyaWdnZXJLZXl3b3JkcyA9IFsnc3RyZXMnLCAnZW5kacWfZScsICdrb3JrdScsICdraXJsaScsICdnw7x2ZW5saWsnXTtcbiAgICB0cmlnZ2VyS2V5d29yZHMuZm9yRWFjaChrZXl3b3JkID0+IHtcbiAgICAgIGlmICh0ZXh0LmluY2x1ZGVzKGtleXdvcmQpKSB7XG4gICAgICAgIHBhdHRlcm5zLnRyaWdnZXJzLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICd0ZXh0X3RyaWdnZXInLFxuICAgICAgICAgIHRyaWdnZXI6IGtleXdvcmQsXG4gICAgICAgICAgY29udGV4dDogdGV4dCxcbiAgICAgICAgICBjb25maWRlbmNlOiAwLjVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHBhdHRlcm5zO1xuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDwn5OKIE1PT0QgQU5BTFlUSUNTIE1BSU4gUFJPQ0VTU09SXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgXG4gIC8qKlxuICAgKiDwn46vIE1haW4gbW9vZCBhbmFseXRpY3MgcHJvY2Vzc29yIC0gZ2VuZXJhdGVzIGNsaW5pY2FsLWdyYWRlIGluc2lnaHRzXG4gICAqL1xuICBwcml2YXRlIHByb2Nlc3NNb29kQW5hbHl0aWNzKG1vb2RzOiBhbnlbXSk6IGFueSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGDwn6euIFByb2Nlc3NpbmcgbW9vZCBhbmFseXRpY3MgZm9yICR7bW9vZHMubGVuZ3RofSBlbnRyaWVzYCk7XG4gICAgICBcbiAgICAgIGlmICghbW9vZHMgfHwgIUFycmF5LmlzQXJyYXkobW9vZHMpIHx8IG1vb2RzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gSW5zdWZmaWNpZW50IG1vb2QgZGF0YSBmb3IgYW5hbHl0aWNzJywgbW9vZHM/Lmxlbmd0aCB8fCAwKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIExpbWl0IHRvIGxhdGVzdCA1MCBlbnRyaWVzIGZvciBwZXJmb3JtYW5jZVxuICAgICAgY29uc3QgcmVjZW50TW9vZHMgPSBtb29kcy5zbGljZSgwLCA1MCk7XG4gICAgICBjb25zb2xlLmxvZyhg8J+TiiBVc2luZyAke3JlY2VudE1vb2RzLmxlbmd0aH0gcmVjZW50IG1vb2QgZW50cmllcyBmb3IgYW5hbHlzaXNgKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGFsbCBjbGluaWNhbCBtZXRyaWNzXG4gICAgICBjb25zdCB3ZWVrbHlEZWx0YSA9IHRoaXMuY2FsY3VsYXRlQW5hbHl0aWNzV2Vla2x5RGVsdGEocmVjZW50TW9vZHMpO1xuICAgICAgY29uc3Qgdm9sYXRpbGl0eSA9IHRoaXMuY2FsY3VsYXRlQW5hbHl0aWNzVm9sYXRpbGl0eShyZWNlbnRNb29kcyk7XG4gICAgICBjb25zdCBiYXNlbGluZXMgPSB0aGlzLmNhbGN1bGF0ZUFuYWx5dGljc0Jhc2VsaW5lcyhyZWNlbnRNb29kcyk7XG4gICAgICBjb25zdCBjb3JyZWxhdGlvbnMgPSB0aGlzLmNhbGN1bGF0ZUFuYWx5dGljc01FQUNvcnJlbGF0aW9ucyhyZWNlbnRNb29kcyk7XG4gICAgICBjb25zdCBkYXRhUXVhbGl0eSA9IHRoaXMuYXNzZXNzQW5hbHl0aWNzRGF0YVF1YWxpdHkocmVjZW50TW9vZHMpO1xuICAgICAgY29uc3QgcHJvZmlsZSA9IHRoaXMuY2xhc3NpZnlBbmFseXRpY3NFbW90aW9uYWxQcm9maWxlKHJlY2VudE1vb2RzLCBiYXNlbGluZXMsIHdlZWtseURlbHRhLCB2b2xhdGlsaXR5LCBjb3JyZWxhdGlvbnMpO1xuICAgICAgY29uc3QgYmVzdFRpbWVzID0gdGhpcy5hbmFseXplQW5hbHl0aWNzQmVzdFRpbWVzKHJlY2VudE1vb2RzKTtcbiAgICAgIGNvbnN0IGNvbmZpZGVuY2UgPSB0aGlzLmNhbGN1bGF0ZUFuYWx5dGljc0dsb2JhbENvbmZpZGVuY2UocmVjZW50TW9vZHMsIGRhdGFRdWFsaXR5LCBwcm9maWxlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICB3ZWVrbHlEZWx0YTogd2Vla2x5RGVsdGEsXG4gICAgICAgIHZvbGF0aWxpdHk6IHZvbGF0aWxpdHksXG4gICAgICAgIGJhc2VsaW5lczogYmFzZWxpbmVzLFxuICAgICAgICBjb3JyZWxhdGlvbnM6IGNvcnJlbGF0aW9ucyxcbiAgICAgICAgcHJvZmlsZTogcHJvZmlsZSxcbiAgICAgICAgYmVzdFRpbWVzOiBiZXN0VGltZXMsXG4gICAgICAgIHNhbXBsZVNpemU6IHJlY2VudE1vb2RzLmxlbmd0aCxcbiAgICAgICAgZGF0YVF1YWxpdHk6IGRhdGFRdWFsaXR5LFxuICAgICAgICBjb25maWRlbmNlOiBjb25maWRlbmNlXG4gICAgICB9O1xuXG4gICAgICBjb25zb2xlLmxvZygn4pyFIE1vb2QgYW5hbHl0aWNzIGNvbXBsZXRlZDonLCB7XG4gICAgICAgIHdlZWtseURlbHRhLFxuICAgICAgICB2b2xhdGlsaXR5LFxuICAgICAgICBwcm9maWxlVHlwZTogcHJvZmlsZT8udHlwZSxcbiAgICAgICAgY29uZmlkZW5jZVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBNb29kIGFuYWx5dGljcyBwcm9jZXNzaW5nIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCfk4ogTU9PRCBBTkFMWVRJQ1MgSEVMUEVSIEZVTkNUSU9OU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIPCfk4ogQ2FsY3VsYXRlIG1vb2Qgdm9sYXRpbGl0eSB1c2luZyB3aW5zb3JpemVkIHN0YW5kYXJkIGRldmlhdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVBbmFseXRpY3NWb2xhdGlsaXR5KG1vb2RzOiBhbnlbXSk6IG51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChtb29kcy5sZW5ndGggPCAyKSByZXR1cm4gMDtcbiAgICAgIFxuICAgICAgY29uc3Qgc2NvcmVzID0gbW9vZHMubWFwKG0gPT4gbS5tb29kX3Njb3JlKS5maWx0ZXIocyA9PiBzICE9PSBudWxsICYmIHMgIT09IHVuZGVmaW5lZCk7XG4gICAgICBpZiAoc2NvcmVzLmxlbmd0aCA8IDIpIHJldHVybiAwO1xuICAgICAgXG4gICAgICAvLyBXaW5zb3JpemUgYXQgNXRoIGFuZCA5NXRoIHBlcmNlbnRpbGVzIHRvIHJlZHVjZSBvdXRsaWVyIGltcGFjdFxuICAgICAgY29uc3Qgc29ydGVkID0gWy4uLnNjb3Jlc10uc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgY29uc3QgcDVJbmRleCA9IE1hdGguZmxvb3Ioc29ydGVkLmxlbmd0aCAqIDAuMDUpO1xuICAgICAgY29uc3QgcDk1SW5kZXggPSBNYXRoLmNlaWwoc29ydGVkLmxlbmd0aCAqIDAuOTUpIC0gMTtcbiAgICAgIGNvbnN0IHA1VmFsdWUgPSBzb3J0ZWRbcDVJbmRleF07XG4gICAgICBjb25zdCBwOTVWYWx1ZSA9IHNvcnRlZFtwOTVJbmRleF07XG4gICAgICBcbiAgICAgIGNvbnN0IHdpbnNvcml6ZWQgPSBzY29yZXMubWFwKHMgPT4gTWF0aC5taW4oTWF0aC5tYXgocywgcDVWYWx1ZSksIHA5NVZhbHVlKSk7XG4gICAgICBcbiAgICAgIGNvbnN0IG1lYW4gPSB3aW5zb3JpemVkLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBzLCAwKSAvIHdpbnNvcml6ZWQubGVuZ3RoO1xuICAgICAgY29uc3QgdmFyaWFuY2UgPSB3aW5zb3JpemVkLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBNYXRoLnBvdyhzIC0gbWVhbiwgMiksIDApIC8gd2luc29yaXplZC5sZW5ndGg7XG4gICAgICBcbiAgICAgIHJldHVybiBNYXRoLnNxcnQodmFyaWFuY2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBWb2xhdGlsaXR5IGNhbGN1bGF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+TiiBDYWxjdWxhdGUgMTQtZGF5IGJhc2VsaW5lcyBmb3IgbW9vZCwgZW5lcmd5LCBhbnhpZXR5XG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZUFuYWx5dGljc0Jhc2VsaW5lcyhtb29kczogYW55W10pOiBhbnkge1xuICAgIHRyeSB7XG4gICAgICBpZiAobW9vZHMubGVuZ3RoID09PSAwKSByZXR1cm4geyBtb29kOiA1MCwgZW5lcmd5OiA1MCwgYW54aWV0eTogNTAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVjZW50MTREYXlzID0gbW9vZHMuc2xpY2UoMCwgTWF0aC5taW4oNTAsIG1vb2RzLmxlbmd0aCkpOyAvLyBVc2UgYXZhaWxhYmxlIGRhdGFcbiAgICAgIFxuICAgICAgY29uc3QgbW9vZFNjb3JlcyA9IHJlY2VudDE0RGF5cy5tYXAobSA9PiBtLm1vb2Rfc2NvcmUpLmZpbHRlcihzID0+IHMgIT09IG51bGwgJiYgcyAhPT0gdW5kZWZpbmVkKTtcbiAgICAgIGNvbnN0IGVuZXJneVNjb3JlcyA9IHJlY2VudDE0RGF5cy5tYXAobSA9PiBtLmVuZXJneV9sZXZlbCkuZmlsdGVyKHMgPT4gcyAhPT0gbnVsbCAmJiBzICE9PSB1bmRlZmluZWQpO1xuICAgICAgY29uc3QgYW54aWV0eVNjb3JlcyA9IHJlY2VudDE0RGF5cy5tYXAobSA9PiBtLmFueGlldHlfbGV2ZWwpLmZpbHRlcihzID0+IHMgIT09IG51bGwgJiYgcyAhPT0gdW5kZWZpbmVkKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbW9vZDogbW9vZFNjb3Jlcy5sZW5ndGggPiAwID8gbW9vZFNjb3Jlcy5yZWR1Y2UoKHN1bSwgcykgPT4gc3VtICsgcywgMCkgLyBtb29kU2NvcmVzLmxlbmd0aCA6IDUwLFxuICAgICAgICBlbmVyZ3k6IGVuZXJneVNjb3Jlcy5sZW5ndGggPiAwID8gZW5lcmd5U2NvcmVzLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBzLCAwKSAvIGVuZXJneVNjb3Jlcy5sZW5ndGggOiA1MCxcbiAgICAgICAgYW54aWV0eTogYW54aWV0eVNjb3Jlcy5sZW5ndGggPiAwID8gYW54aWV0eVNjb3Jlcy5yZWR1Y2UoKHN1bSwgcykgPT4gc3VtICsgcywgMCkgLyBhbnhpZXR5U2NvcmVzLmxlbmd0aCA6IDUwXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBCYXNlbGluZXMgY2FsY3VsYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IG1vb2Q6IDUwLCBlbmVyZ3k6IDUwLCBhbnhpZXR5OiA1MCB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDwn5OIIENhbGN1bGF0ZSB3ZWVrbHkgbW9vZCBkZWx0YSB3aXRoIGZhbGxiYWNrIGZvciBsaW1pdGVkIGRhdGFcbiAgICovXG4gIHByaXZhdGUgY2FsY3VsYXRlQW5hbHl0aWNzV2Vla2x5RGVsdGEobW9vZHM6IGFueVtdKTogbnVtYmVyIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IG9uZVdlZWtBZ28gPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpIC0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgY29uc3QgdHdvV2Vla3NBZ28gPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpIC0gMTQgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcblxuICAgICAgbGV0IHRoaXNXZWVrTW9vZHMgPSBtb29kcy5maWx0ZXIobSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShtLnRpbWVzdGFtcCk7XG4gICAgICAgIHJldHVybiBkYXRlID49IG9uZVdlZWtBZ28gJiYgZGF0ZSA8PSBub3c7XG4gICAgICB9KTtcblxuICAgICAgbGV0IGxhc3RXZWVrTW9vZHMgPSBtb29kcy5maWx0ZXIobSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShtLnRpbWVzdGFtcCk7XG4gICAgICAgIHJldHVybiBkYXRlID49IHR3b1dlZWtzQWdvICYmIGRhdGUgPCBvbmVXZWVrQWdvO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEZhbGxiYWNrIGZvciBsaW1pdGVkIGRhdGE6IGRlZ3JhZGUgdG8gMyszIGRheXNcbiAgICAgIGlmICh0aGlzV2Vla01vb2RzLmxlbmd0aCA8IDIgfHwgbGFzdFdlZWtNb29kcy5sZW5ndGggPCAyKSB7XG4gICAgICAgIGNvbnN0IHRocmVlRGF5c0FnbyA9IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgLSAzICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgICAgIGNvbnN0IHNpeERheXNBZ28gPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpIC0gNiAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICBcbiAgICAgICAgdGhpc1dlZWtNb29kcyA9IG1vb2RzLmZpbHRlcihtID0+IHtcbiAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUobS50aW1lc3RhbXApO1xuICAgICAgICAgIHJldHVybiBkYXRlID49IHRocmVlRGF5c0FnbyAmJiBkYXRlIDw9IG5vdztcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBsYXN0V2Vla01vb2RzID0gbW9vZHMuZmlsdGVyKG0gPT4ge1xuICAgICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShtLnRpbWVzdGFtcCk7XG4gICAgICAgICAgcmV0dXJuIGRhdGUgPj0gc2l4RGF5c0FnbyAmJiBkYXRlIDwgdGhyZWVEYXlzQWdvO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXNXZWVrTW9vZHMubGVuZ3RoID09PSAwIHx8IGxhc3RXZWVrTW9vZHMubGVuZ3RoID09PSAwKSByZXR1cm4gMDtcblxuICAgICAgY29uc3QgdGhpc1dlZWtBdmcgPSB0aGlzV2Vla01vb2RzLnJlZHVjZSgoc3VtLCBtKSA9PiBzdW0gKyBtLm1vb2Rfc2NvcmUsIDApIC8gdGhpc1dlZWtNb29kcy5sZW5ndGg7XG4gICAgICBjb25zdCBsYXN0V2Vla0F2ZyA9IGxhc3RXZWVrTW9vZHMucmVkdWNlKChzdW0sIG0pID0+IHN1bSArIG0ubW9vZF9zY29yZSwgMCkgLyBsYXN0V2Vla01vb2RzLmxlbmd0aDtcbiAgICAgIFxuICAgICAgcmV0dXJuIHRoaXNXZWVrQXZnIC0gbGFzdFdlZWtBdmc7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFdlZWtseSBkZWx0YSBjYWxjdWxhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIPCflKUgQ2FsY3VsYXRlIHZvbGF0aWxpdHkgdXNpbmcgd2luc29yaXplZCBzdGFuZGFyZCBkZXZpYXRpb25cbiAgICovXG4gIHByaXZhdGUgY2FsY3VsYXRlVm9sYXRpbGl0eShtb29kczogYW55W10pOiBudW1iZXIge1xuICAgIHRyeSB7XG4gICAgICBpZiAobW9vZHMubGVuZ3RoIDwgMykgcmV0dXJuIDA7XG4gICAgICBcbiAgICAgIC8vIFVzZSBsYXN0IDE0IGRheXMgb2YgbW9vZCBzY29yZXNcbiAgICAgIGNvbnN0IHR3b1dlZWtzQWdvID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIDE0ICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgICBjb25zdCByZWNlbnRNb29kcyA9IG1vb2RzLmZpbHRlcihtID0+IG5ldyBEYXRlKG0udGltZXN0YW1wKSA+PSB0d29XZWVrc0Fnbyk7XG4gICAgICBcbiAgICAgIGlmIChyZWNlbnRNb29kcy5sZW5ndGggPCAzKSByZXR1cm4gMDtcbiAgICAgIFxuICAgICAgY29uc3QgbW9vZFNjb3JlcyA9IHJlY2VudE1vb2RzLm1hcChtID0+IG0ubW9vZF9zY29yZSk7XG4gICAgICBcbiAgICAgIC8vIFdpbnNvcml6ZSBhdCA1dGggYW5kIDk1dGggcGVyY2VudGlsZXNcbiAgICAgIGNvbnN0IHNvcnRlZCA9IFsuLi5tb29kU2NvcmVzXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICBjb25zdCBwNUluZGV4ID0gTWF0aC5mbG9vcigwLjA1ICogc29ydGVkLmxlbmd0aCk7XG4gICAgICBjb25zdCBwOTVJbmRleCA9IE1hdGguZmxvb3IoMC45NSAqIHNvcnRlZC5sZW5ndGgpO1xuICAgICAgY29uc3QgcDVWYWx1ZSA9IHNvcnRlZFtwNUluZGV4XTtcbiAgICAgIGNvbnN0IHA5NVZhbHVlID0gc29ydGVkW3A5NUluZGV4XTtcbiAgICAgIFxuICAgICAgY29uc3Qgd2luc29yaXplZCA9IG1vb2RTY29yZXMubWFwKHNjb3JlID0+IHtcbiAgICAgICAgaWYgKHNjb3JlIDwgcDVWYWx1ZSkgcmV0dXJuIHA1VmFsdWU7XG4gICAgICAgIGlmIChzY29yZSA+IHA5NVZhbHVlKSByZXR1cm4gcDk1VmFsdWU7XG4gICAgICAgIHJldHVybiBzY29yZTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBDYWxjdWxhdGUgc3RhbmRhcmQgZGV2aWF0aW9uXG4gICAgICBjb25zdCBtZWFuID0gd2luc29yaXplZC5yZWR1Y2UoKHN1bSwgc2NvcmUpID0+IHN1bSArIHNjb3JlLCAwKSAvIHdpbnNvcml6ZWQubGVuZ3RoO1xuICAgICAgY29uc3QgdmFyaWFuY2UgPSB3aW5zb3JpemVkLnJlZHVjZSgoc3VtLCBzY29yZSkgPT4gc3VtICsgTWF0aC5wb3coc2NvcmUgLSBtZWFuLCAyKSwgMCkgLyB3aW5zb3JpemVkLmxlbmd0aDtcbiAgICAgIFxuICAgICAgcmV0dXJuIE1hdGguc3FydCh2YXJpYW5jZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFZvbGF0aWxpdHkgY2FsY3VsYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDwn5OKIENhbGN1bGF0ZSBiYXNlbGluZXMgKDE0LWRheSBhdmVyYWdlcylcbiAgICovXG4gIHByaXZhdGUgY2FsY3VsYXRlQmFzZWxpbmVzKG1vb2RzOiBhbnlbXSk6IHsgbW9vZDogbnVtYmVyOyBlbmVyZ3k6IG51bWJlcjsgYW54aWV0eTogbnVtYmVyIH0ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0d29XZWVrc0FnbyA9IG5ldyBEYXRlKERhdGUubm93KCkgLSAxNCAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgY29uc3QgcmVjZW50TW9vZHMgPSBtb29kcy5maWx0ZXIobSA9PiBuZXcgRGF0ZShtLnRpbWVzdGFtcCkgPj0gdHdvV2Vla3NBZ28pO1xuICAgICAgXG4gICAgICBpZiAocmVjZW50TW9vZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7IG1vb2Q6IDUwLCBlbmVyZ3k6IDUwLCBhbnhpZXR5OiA1MCB9O1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBhdmdNb29kID0gcmVjZW50TW9vZHMucmVkdWNlKChzdW0sIG0pID0+IHN1bSArIG0ubW9vZF9zY29yZSwgMCkgLyByZWNlbnRNb29kcy5sZW5ndGg7XG4gICAgICBjb25zdCBhdmdFbmVyZ3kgPSByZWNlbnRNb29kcy5yZWR1Y2UoKHN1bSwgbSkgPT4gc3VtICsgbS5lbmVyZ3lfbGV2ZWwsIDApIC8gcmVjZW50TW9vZHMubGVuZ3RoO1xuICAgICAgY29uc3QgYXZnQW54aWV0eSA9IHJlY2VudE1vb2RzLnJlZHVjZSgoc3VtLCBtKSA9PiBzdW0gKyBtLmFueGlldHlfbGV2ZWwsIDApIC8gcmVjZW50TW9vZHMubGVuZ3RoO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb29kOiBwYXJzZUZsb2F0KGF2Z01vb2QudG9GaXhlZCgxKSksXG4gICAgICAgIGVuZXJneTogcGFyc2VGbG9hdChhdmdFbmVyZ3kudG9GaXhlZCgxKSksXG4gICAgICAgIGFueGlldHk6IHBhcnNlRmxvYXQoYXZnQW54aWV0eS50b0ZpeGVkKDEpKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gQmFzZWxpbmVzIGNhbGN1bGF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4geyBtb29kOiA1MCwgZW5lcmd5OiA1MCwgYW54aWV0eTogNTAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+UlyBDYWxjdWxhdGUgTUVBIGNvcnJlbGF0aW9ucyB3aXRoIG4+PTEwIHRocmVzaG9sZFxuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVBbmFseXRpY3NNRUFDb3JyZWxhdGlvbnMobW9vZHM6IGFueVtdKTogYW55IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY29ycmVsYXRpb25zOiBhbnkgPSB7fTtcbiAgICAgIFxuICAgICAgaWYgKG1vb2RzLmxlbmd0aCA8IDEwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbW9vZEVuZXJneTogeyByOiBudWxsLCBuOiBtb29kcy5sZW5ndGgsIHA6IG51bGwgfSxcbiAgICAgICAgICBtb29kQW54aWV0eTogeyByOiBudWxsLCBuOiBtb29kcy5sZW5ndGgsIHA6IG51bGwgfSxcbiAgICAgICAgICBlbmVyZ3lBbnhpZXR5OiB7IHI6IG51bGwsIG46IG1vb2RzLmxlbmd0aCwgcDogbnVsbCB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IG1vb2RTY29yZXMgPSBtb29kcy5tYXAobSA9PiBtLm1vb2Rfc2NvcmUpO1xuICAgICAgY29uc3QgZW5lcmd5TGV2ZWxzID0gbW9vZHMubWFwKG0gPT4gbS5lbmVyZ3lfbGV2ZWwpO1xuICAgICAgY29uc3QgYW54aWV0eUxldmVscyA9IG1vb2RzLm1hcChtID0+IG0uYW54aWV0eV9sZXZlbCk7XG4gICAgICBcbiAgICAgIGNvbnN0IG1vb2RFbmVyZ3lSID0gdGhpcy5jYWxjdWxhdGVQZWFyc29uQ29ycmVsYXRpb24obW9vZFNjb3JlcywgZW5lcmd5TGV2ZWxzKTtcbiAgICAgIGNvbnN0IG1vb2RBbnhpZXR5UiA9IHRoaXMuY2FsY3VsYXRlUGVhcnNvbkNvcnJlbGF0aW9uKG1vb2RTY29yZXMsIGFueGlldHlMZXZlbHMpO1xuICAgICAgY29uc3QgZW5lcmd5QW54aWV0eVIgPSB0aGlzLmNhbGN1bGF0ZVBlYXJzb25Db3JyZWxhdGlvbihlbmVyZ3lMZXZlbHMsIGFueGlldHlMZXZlbHMpO1xuICAgICAgXG4gICAgICAvLyBDYWxjdWxhdGUgcC12YWx1ZXMgZm9yIGVhY2ggY29ycmVsYXRpb25cbiAgICAgIGNvbnN0IG1vb2RFbmVyZ3lQID0gdGhpcy5jYWxjdWxhdGVDb3JyZWxhdGlvblBWYWx1ZShtb29kRW5lcmd5UiwgbW9vZHMubGVuZ3RoKTtcbiAgICAgIGNvbnN0IG1vb2RBbnhpZXR5UCA9IHRoaXMuY2FsY3VsYXRlQ29ycmVsYXRpb25QVmFsdWUobW9vZEFueGlldHlSLCBtb29kcy5sZW5ndGgpO1xuICAgICAgY29uc3QgZW5lcmd5QW54aWV0eVAgPSB0aGlzLmNhbGN1bGF0ZUNvcnJlbGF0aW9uUFZhbHVlKGVuZXJneUFueGlldHlSLCBtb29kcy5sZW5ndGgpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb29kRW5lcmd5OiB7XG4gICAgICAgICAgcjogcGFyc2VGbG9hdChtb29kRW5lcmd5Ui50b0ZpeGVkKDMpKSxcbiAgICAgICAgICBuOiBtb29kcy5sZW5ndGgsXG4gICAgICAgICAgcDogbW9vZEVuZXJneVAgPyBwYXJzZUZsb2F0KG1vb2RFbmVyZ3lQLnRvRml4ZWQoNCkpIDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBtb29kQW54aWV0eToge1xuICAgICAgICAgIHI6IHBhcnNlRmxvYXQobW9vZEFueGlldHlSLnRvRml4ZWQoMykpLFxuICAgICAgICAgIG46IG1vb2RzLmxlbmd0aCxcbiAgICAgICAgICBwOiBtb29kQW54aWV0eVAgPyBwYXJzZUZsb2F0KG1vb2RBbnhpZXR5UC50b0ZpeGVkKDQpKSA6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZW5lcmd5QW54aWV0eToge1xuICAgICAgICAgIHI6IHBhcnNlRmxvYXQoZW5lcmd5QW54aWV0eVIudG9GaXhlZCgzKSksXG4gICAgICAgICAgbjogbW9vZHMubGVuZ3RoLFxuICAgICAgICAgIHA6IGVuZXJneUFueGlldHlQID8gcGFyc2VGbG9hdChlbmVyZ3lBbnhpZXR5UC50b0ZpeGVkKDQpKSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTUVBIGNvcnJlbGF0aW9ucyBjYWxjdWxhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDwn5OKIEFzc2VzcyBkYXRhIHF1YWxpdHkgKDAtMSBzY2FsZSlcbiAgICovXG4gIHByaXZhdGUgYXNzZXNzRGF0YVF1YWxpdHkobW9vZHM6IGFueVtdKTogbnVtYmVyIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHF1YWxpdHlTY29yZSA9IDA7XG4gICAgICBcbiAgICAgIC8vIFNhbXBsZSBzaXplIGNvbXBvbmVudCAoMC0wLjQpXG4gICAgICBjb25zdCBzYW1wbGVTaXplU2NvcmUgPSBNYXRoLm1pbigwLjQsIG1vb2RzLmxlbmd0aCAvIDUwICogMC40KTtcbiAgICAgIHF1YWxpdHlTY29yZSArPSBzYW1wbGVTaXplU2NvcmU7XG4gICAgICBcbiAgICAgIC8vIE1pc3NpbmcgZGF0YSBjb21wb25lbnQgKDAtMC4zKVxuICAgICAgY29uc3QgY29tcGxldGVNb29kcyA9IG1vb2RzLmZpbHRlcihtID0+IFxuICAgICAgICBtLm1vb2Rfc2NvcmUgIT09IHVuZGVmaW5lZCAmJiBcbiAgICAgICAgbS5lbmVyZ3lfbGV2ZWwgIT09IHVuZGVmaW5lZCAmJiBcbiAgICAgICAgbS5hbnhpZXR5X2xldmVsICE9PSB1bmRlZmluZWRcbiAgICAgICk7XG4gICAgICBjb25zdCBtaXNzaW5nUmF0aW8gPSAxIC0gKGNvbXBsZXRlTW9vZHMubGVuZ3RoIC8gbW9vZHMubGVuZ3RoKTtcbiAgICAgIGNvbnN0IG1pc3NpbmdTY29yZSA9IE1hdGgubWF4KDAsIDAuMyAtIG1pc3NpbmdSYXRpbyAqIDAuMyk7XG4gICAgICBxdWFsaXR5U2NvcmUgKz0gbWlzc2luZ1Njb3JlO1xuICAgICAgXG4gICAgICAvLyBPdXRsaWVyIGNvbXBvbmVudCAoMC0wLjMpXG4gICAgICBjb25zdCBtb29kU2NvcmVzID0gY29tcGxldGVNb29kcy5tYXAobSA9PiBtLm1vb2Rfc2NvcmUpO1xuICAgICAgaWYgKG1vb2RTY29yZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBtZWFuID0gbW9vZFNjb3Jlcy5yZWR1Y2UoKHN1bSwgc2NvcmUpID0+IHN1bSArIHNjb3JlLCAwKSAvIG1vb2RTY29yZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBzdGQgPSBNYXRoLnNxcnQobW9vZFNjb3Jlcy5yZWR1Y2UoKHN1bSwgc2NvcmUpID0+IHN1bSArIE1hdGgucG93KHNjb3JlIC0gbWVhbiwgMiksIDApIC8gbW9vZFNjb3Jlcy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBvdXRsaWVycyA9IG1vb2RTY29yZXMuZmlsdGVyKHNjb3JlID0+IE1hdGguYWJzKHNjb3JlIC0gbWVhbikgPiAyICogc3RkKTtcbiAgICAgICAgY29uc3Qgb3V0bGllclJhdGlvID0gb3V0bGllcnMubGVuZ3RoIC8gbW9vZFNjb3Jlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG91dGxpZXJTY29yZSA9IE1hdGgubWF4KDAsIDAuMyAtIG91dGxpZXJSYXRpbyAqIDAuMyk7XG4gICAgICAgIHF1YWxpdHlTY29yZSArPSBvdXRsaWVyU2NvcmU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBNYXRoLm1pbigxLCBxdWFsaXR5U2NvcmUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBEYXRhIHF1YWxpdHkgYXNzZXNzbWVudCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIDAuNTsgLy8gRGVmYXVsdCBtaWRkbGUgc2NvcmVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+noCBDbGFzc2lmeSBlbW90aW9uYWwgcHJvZmlsZSAoNyB0eXBlcyB3aXRoIHByaW9yaXR5KVxuICAgKi9cbiAgcHJpdmF0ZSBjbGFzc2lmeUVtb3Rpb25hbFByb2ZpbGUoXG4gICAgYmFzZWxpbmVzOiB7IG1vb2Q6IG51bWJlcjsgZW5lcmd5OiBudW1iZXI7IGFueGlldHk6IG51bWJlciB9LFxuICAgIHdlZWtseURlbHRhOiBudW1iZXIsXG4gICAgdm9sYXRpbGl0eTogbnVtYmVyLFxuICAgIHNhbXBsZVNpemU6IG51bWJlclxuICApOiB7IHR5cGU6IHN0cmluZzsgY29uZmlkZW5jZTogbnVtYmVyOyByYXRpb25hbGU6IHN0cmluZ1tdIH0ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByYXRpb25hbGU6IHN0cmluZ1tdID0gW107XG4gICAgICBsZXQgcHJvZmlsZVR5cGUgPSAnc3RhYmxlJztcbiAgICAgIGxldCBjb25maWRlbmNlID0gMC41O1xuICAgICAgXG4gICAgICAvLyBQcmlvcml0eSBvcmRlcjogc3RyZXNzZWQgPiB2b2xhdGlsZSA+IGZhdGlndWVkID4gcmVjb3ZlcmluZyA+IHJlc2lsaWVudCA+IGVsZXZhdGVkID4gc3RhYmxlXG4gICAgICBcbiAgICAgIC8vIDEuIFNUUkVTU0VEOiBiYXNlbGluZS5tb29kIDwgNDAgQU5EIGJhc2VsaW5lLmFueGlldHkgPiA2MFxuICAgICAgaWYgKGJhc2VsaW5lcy5tb29kIDwgNDAgJiYgYmFzZWxpbmVzLmFueGlldHkgPiA2MCkge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdzdHJlc3NlZCc7XG4gICAgICAgIHJhdGlvbmFsZS5wdXNoKGBEw7zFn8O8ayBtb29kICgke2Jhc2VsaW5lcy5tb29kfSkgdmUgecO8a3NlayBhbmtzaXlldGUgKCR7YmFzZWxpbmVzLmFueGlldHl9KWApO1xuICAgICAgICBjb25maWRlbmNlID0gMC44O1xuICAgICAgfVxuICAgICAgLy8gMi4gVk9MQVRJTEU6IHZvbGF0aWxpdHkgPiAxNVxuICAgICAgZWxzZSBpZiAodm9sYXRpbGl0eSA+IDE1KSB7XG4gICAgICAgIHByb2ZpbGVUeXBlID0gJ3ZvbGF0aWxlJztcbiAgICAgICAgcmF0aW9uYWxlLnB1c2goYFnDvGtzZWsgbW9vZCB2b2xhdGlsaXRlc2kgKCR7dm9sYXRpbGl0eS50b0ZpeGVkKDEpfSlgKTtcbiAgICAgICAgY29uZmlkZW5jZSA9IDAuNztcbiAgICAgIH1cbiAgICAgIC8vIDMuIEZBVElHVUVEOiBiYXNlbGluZS5lbmVyZ3kgPCA0MCBBTkQgYmFzZWxpbmUubW9vZCA8IDU1XG4gICAgICBlbHNlIGlmIChiYXNlbGluZXMuZW5lcmd5IDwgNDAgJiYgYmFzZWxpbmVzLm1vb2QgPCA1NSkge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdmYXRpZ3VlZCc7XG4gICAgICAgIHJhdGlvbmFsZS5wdXNoKGBEw7zFn8O8ayBlbmVyamkgKCR7YmFzZWxpbmVzLmVuZXJneX0pIHZlIG9ydGEtZMO8xZ/DvGsgbW9vZCAoJHtiYXNlbGluZXMubW9vZH0pYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjc1O1xuICAgICAgfVxuICAgICAgLy8gNC4gUkVDT1ZFUklORzogd2Vla2x5RGVsdGEgPiA4IEFORCA0MCDiiaQgYmFzZWxpbmUubW9vZCDiiaQgNjBcbiAgICAgIGVsc2UgaWYgKHdlZWtseURlbHRhID4gOCAmJiBiYXNlbGluZXMubW9vZCA+PSA0MCAmJiBiYXNlbGluZXMubW9vZCA8PSA2MCkge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdyZWNvdmVyaW5nJztcbiAgICAgICAgcmF0aW9uYWxlLnB1c2goYFBveml0aWYgaGFmdGFsxLFrIHRyZW5kICgrJHt3ZWVrbHlEZWx0YS50b0ZpeGVkKDEpfSkgdmUgb3J0YSBtb29kYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjc7XG4gICAgICB9XG4gICAgICAvLyA1LiBSRVNJTElFTlQ6IGJhc2VsaW5lLm1vb2QgPiA2MCBBTkQgdm9sYXRpbGl0eSA8IDEwIEFORCBiYXNlbGluZS5hbnhpZXR5IDwgNTBcbiAgICAgIGVsc2UgaWYgKGJhc2VsaW5lcy5tb29kID4gNjAgJiYgdm9sYXRpbGl0eSA8IDEwICYmIGJhc2VsaW5lcy5hbnhpZXR5IDwgNTApIHtcbiAgICAgICAgcHJvZmlsZVR5cGUgPSAncmVzaWxpZW50JztcbiAgICAgICAgcmF0aW9uYWxlLnB1c2goYFnDvGtzZWsgbW9vZCAoJHtiYXNlbGluZXMubW9vZH0pLCBkw7zFn8O8ayB2b2xhdGlsaXRlICgke3ZvbGF0aWxpdHkudG9GaXhlZCgxKX0pLCBkw7zFn8O8ayBhbmtzaXlldGVgKTtcbiAgICAgICAgY29uZmlkZW5jZSA9IDAuODU7XG4gICAgICB9XG4gICAgICAvLyA2LiBFTEVWQVRFRDogYmFzZWxpbmUubW9vZCA+IDcwIEFORCB2b2xhdGlsaXR5IGTDvMWfw7xrXG4gICAgICBlbHNlIGlmIChiYXNlbGluZXMubW9vZCA+IDcwICYmIHZvbGF0aWxpdHkgPCAxMikge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdlbGV2YXRlZCc7XG4gICAgICAgIHJhdGlvbmFsZS5wdXNoKGBZw7xrc2VrIG1vb2Qgc2V2aXllc2kgKCR7YmFzZWxpbmVzLm1vb2R9KSB2ZSBzdGFiaWwgZHVydW1gKTtcbiAgICAgICAgY29uZmlkZW5jZSA9IDAuNzU7XG4gICAgICB9XG4gICAgICAvLyA3LiBTVEFCTEU6IHZvbGF0aWxpdHkgPCA4IEFORCB8d2Vla2x5RGVsdGF8IDwgNSAoZGVmYXVsdClcbiAgICAgIGVsc2UgaWYgKHZvbGF0aWxpdHkgPCA4ICYmIE1hdGguYWJzKHdlZWtseURlbHRhKSA8IDUpIHtcbiAgICAgICAgcHJvZmlsZVR5cGUgPSAnc3RhYmxlJztcbiAgICAgICAgcmF0aW9uYWxlLnB1c2goYETDvMWfw7xrIHZvbGF0aWxpdGUgKCR7dm9sYXRpbGl0eS50b0ZpeGVkKDEpfSkgdmUgbWluaW1hbCBoYWZ0YWzEsWsgZGXEn2nFn2ltYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjY7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFkanVzdCBjb25maWRlbmNlIGJhc2VkIG9uIHNhbXBsZSBzaXplXG4gICAgICBjb25zdCBzYW1wbGVTaXplTXVsdGlwbGllciA9IE1hdGgubWluKDEsIHNhbXBsZVNpemUgLyAyMCk7XG4gICAgICBjb25maWRlbmNlID0gY29uZmlkZW5jZSAqIHNhbXBsZVNpemVNdWx0aXBsaWVyO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwcm9maWxlVHlwZSxcbiAgICAgICAgY29uZmlkZW5jZTogcGFyc2VGbG9hdChjb25maWRlbmNlLnRvRml4ZWQoMykpLFxuICAgICAgICByYXRpb25hbGVcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVtb3Rpb25hbCBwcm9maWxlIGNsYXNzaWZpY2F0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnc3RhYmxlJyxcbiAgICAgICAgY29uZmlkZW5jZTogMC4zLFxuICAgICAgICByYXRpb25hbGU6IFsnUHJvZmlsIHPEsW7EsWZsYW1hc8SxIGJhxZ9hcsSxc8SxeiAtIHZhcnNhecSxbGFuIHN0YWJpbCBwcm9maWwnXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog4o+wIEFuYWx5emUgYmVzdCB0aW1lcyAoZGF5IG9mIHdlZWsgYW5kIHRpbWUgb2YgZGF5KVxuICAgKi9cbiAgcHJpdmF0ZSBhbmFseXplQmVzdFRpbWVzKG1vb2RzOiBhbnlbXSk6IHsgZGF5T2ZXZWVrPzogc3RyaW5nOyB0aW1lT2ZEYXk/OiBzdHJpbmc7IGNvbmZpZGVuY2U6IG51bWJlciB9IHtcbiAgICB0cnkge1xuICAgICAgaWYgKG1vb2RzLmxlbmd0aCA8IDcpIHtcbiAgICAgICAgcmV0dXJuIHsgY29uZmlkZW5jZTogMC4xIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIERheSBvZiB3ZWVrIGFuYWx5c2lzXG4gICAgICBjb25zdCBkYXlTdGF0czogUmVjb3JkPG51bWJlciwgeyB0b3RhbDogbnVtYmVyOyBjb3VudDogbnVtYmVyIH0+ID0ge307XG4gICAgICBjb25zdCBob3VyU3RhdHM6IFJlY29yZDxudW1iZXIsIHsgdG90YWw6IG51bWJlcjsgY291bnQ6IG51bWJlciB9PiA9IHt9O1xuICAgICAgXG4gICAgICBtb29kcy5mb3JFYWNoKG0gPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUobS50aW1lc3RhbXApO1xuICAgICAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgICAgICBjb25zdCBob3VyID0gZGF0ZS5nZXRIb3VycygpO1xuICAgICAgICBcbiAgICAgICAgLy8gRGF5IHN0YXRzXG4gICAgICAgIGlmICghZGF5U3RhdHNbZGF5T2ZXZWVrXSkgZGF5U3RhdHNbZGF5T2ZXZWVrXSA9IHsgdG90YWw6IDAsIGNvdW50OiAwIH07XG4gICAgICAgIGRheVN0YXRzW2RheU9mV2Vla10udG90YWwgKz0gbS5tb29kX3Njb3JlO1xuICAgICAgICBkYXlTdGF0c1tkYXlPZldlZWtdLmNvdW50ICs9IDE7XG4gICAgICAgIFxuICAgICAgICAvLyBIb3VyIHN0YXRzXG4gICAgICAgIGlmICghaG91clN0YXRzW2hvdXJdKSBob3VyU3RhdHNbaG91cl0gPSB7IHRvdGFsOiAwLCBjb3VudDogMCB9O1xuICAgICAgICBob3VyU3RhdHNbaG91cl0udG90YWwgKz0gbS5tb29kX3Njb3JlO1xuICAgICAgICBob3VyU3RhdHNbaG91cl0uY291bnQgKz0gMTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBGaW5kIGJlc3QgZGF5XG4gICAgICBsZXQgYmVzdERheSA9ICcnO1xuICAgICAgbGV0IGJlc3REYXlTY29yZSA9IDA7XG4gICAgICBjb25zdCBkYXlOYW1lcyA9IFsnUGF6YXInLCAnUGF6YXJ0ZXNpJywgJ1NhbMSxJywgJ8OHYXLFn2FtYmEnLCAnUGVyxZ9lbWJlJywgJ0N1bWEnLCAnQ3VtYXJ0ZXNpJ107XG4gICAgICBcbiAgICAgIE9iamVjdC5lbnRyaWVzKGRheVN0YXRzKS5mb3JFYWNoKChbZGF5LCBzdGF0c10pID0+IHtcbiAgICAgICAgaWYgKHN0YXRzLmNvdW50ID49IDIpIHsgLy8gQXQgbGVhc3QgMiBkYXRhIHBvaW50c1xuICAgICAgICAgIGNvbnN0IGF2Z1Njb3JlID0gc3RhdHMudG90YWwgLyBzdGF0cy5jb3VudDtcbiAgICAgICAgICBpZiAoYXZnU2NvcmUgPiBiZXN0RGF5U2NvcmUpIHtcbiAgICAgICAgICAgIGJlc3REYXlTY29yZSA9IGF2Z1Njb3JlO1xuICAgICAgICAgICAgYmVzdERheSA9IGRheU5hbWVzW3BhcnNlSW50KGRheSldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEZpbmQgYmVzdCB0aW1lIG9mIGRheVxuICAgICAgbGV0IGJlc3RUaW1lU2xvdCA9ICcnO1xuICAgICAgbGV0IGJlc3RUaW1lU2NvcmUgPSAwO1xuICAgICAgXG4gICAgICBPYmplY3QuZW50cmllcyhob3VyU3RhdHMpLmZvckVhY2goKFtob3VyLCBzdGF0c10pID0+IHtcbiAgICAgICAgaWYgKHN0YXRzLmNvdW50ID49IDIpIHtcbiAgICAgICAgICBjb25zdCBhdmdTY29yZSA9IHN0YXRzLnRvdGFsIC8gc3RhdHMuY291bnQ7XG4gICAgICAgICAgaWYgKGF2Z1Njb3JlID4gYmVzdFRpbWVTY29yZSkge1xuICAgICAgICAgICAgYmVzdFRpbWVTY29yZSA9IGF2Z1Njb3JlO1xuICAgICAgICAgICAgY29uc3QgaCA9IHBhcnNlSW50KGhvdXIpO1xuICAgICAgICAgICAgaWYgKGggPj0gNiAmJiBoIDwgMTIpIGJlc3RUaW1lU2xvdCA9ICdTYWJhaCc7XG4gICAgICAgICAgICBlbHNlIGlmIChoID49IDEyICYmIGggPCAxOCkgYmVzdFRpbWVTbG90ID0gJ8OWxJ9sZWRlbiBzb25yYSc7XG4gICAgICAgICAgICBlbHNlIGlmIChoID49IDE4ICYmIGggPCAyMikgYmVzdFRpbWVTbG90ID0gJ0FrxZ9hbSc7XG4gICAgICAgICAgICBlbHNlIGJlc3RUaW1lU2xvdCA9ICdHZWNlJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBjb25maWRlbmNlID0gTWF0aC5taW4oMC44LCBtb29kcy5sZW5ndGggLyAzMCAqIDAuOCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRheU9mV2VlazogYmVzdERheSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRpbWVPZkRheTogYmVzdFRpbWVTbG90IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgY29uZmlkZW5jZTogcGFyc2VGbG9hdChjb25maWRlbmNlLnRvRml4ZWQoMykpXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBCZXN0IHRpbWVzIGFuYWx5c2lzIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4geyBjb25maWRlbmNlOiAwLjEgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+OryBDYWxjdWxhdGUgZ2xvYmFsIGNvbmZpZGVuY2Ugc2NvcmVcbiAgICovXG4gIHByaXZhdGUgY2FsY3VsYXRlR2xvYmFsQ29uZmlkZW5jZShcbiAgICBzYW1wbGVTaXplOiBudW1iZXIsXG4gICAgZGF0YVF1YWxpdHk6IG51bWJlcixcbiAgICBwcm9maWxlQ29uZmlkZW5jZTogbnVtYmVyLFxuICAgIGNvcnJlbGF0aW9uczogYW55XG4gICk6IG51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFNhbXBsZSBzaXplIGNvbXBvbmVudCAoMC0wLjQpXG4gICAgICBjb25zdCBzYW1wbGVDb21wb25lbnQgPSBNYXRoLm1pbigwLjQsIHNhbXBsZVNpemUgLyA1MCAqIDAuNCk7XG4gICAgICBcbiAgICAgIC8vIERhdGEgcXVhbGl0eSBjb21wb25lbnQgKDAtMC4zKVxuICAgICAgY29uc3QgcXVhbGl0eUNvbXBvbmVudCA9IGRhdGFRdWFsaXR5ICogMC4zO1xuICAgICAgXG4gICAgICAvLyBQcm9maWxlIGNvbmZpZGVuY2UgY29tcG9uZW50ICgwLTAuMilcbiAgICAgIGNvbnN0IHByb2ZpbGVDb21wb25lbnQgPSBwcm9maWxlQ29uZmlkZW5jZSAqIDAuMjtcbiAgICAgIFxuICAgICAgLy8gQ29ycmVsYXRpb24gc2lnbmFsIHN0cmVuZ3RoIGNvbXBvbmVudCAoMC0wLjEpXG4gICAgICBsZXQgY29ycmVsYXRpb25Db21wb25lbnQgPSAwO1xuICAgICAgaWYgKGNvcnJlbGF0aW9ucy5tb29kRW5lcmd5Py5yICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGF2Z0NvcnJlbGF0aW9uU3RyZW5ndGggPSAoXG4gICAgICAgICAgTWF0aC5hYnMoY29ycmVsYXRpb25zLm1vb2RFbmVyZ3k/LnIgfHwgMCkgK1xuICAgICAgICAgIE1hdGguYWJzKGNvcnJlbGF0aW9ucy5tb29kQW54aWV0eT8uciB8fCAwKSArXG4gICAgICAgICAgTWF0aC5hYnMoY29ycmVsYXRpb25zLmVuZXJneUFueGlldHk/LnIgfHwgMClcbiAgICAgICAgKSAvIDM7XG4gICAgICAgIGNvcnJlbGF0aW9uQ29tcG9uZW50ID0gYXZnQ29ycmVsYXRpb25TdHJlbmd0aCAqIDAuMTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgdG90YWxDb25maWRlbmNlID0gc2FtcGxlQ29tcG9uZW50ICsgcXVhbGl0eUNvbXBvbmVudCArIHByb2ZpbGVDb21wb25lbnQgKyBjb3JyZWxhdGlvbkNvbXBvbmVudDtcbiAgICAgIFxuICAgICAgcmV0dXJuIE1hdGgubWluKDAuOTUsIHRvdGFsQ29uZmlkZW5jZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEdsb2JhbCBjb25maWRlbmNlIGNhbGN1bGF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gMC4zO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICog8J+TiiBBc3Nlc3MgZGF0YSBxdWFsaXR5IGZvciBhbmFseXRpY3NcbiAgICovXG4gIHByaXZhdGUgYXNzZXNzQW5hbHl0aWNzRGF0YVF1YWxpdHkobW9vZHM6IGFueVtdKTogbnVtYmVyIHtcbiAgICB0cnkge1xuICAgICAgaWYgKG1vb2RzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDAuMTtcbiAgICAgIFxuICAgICAgbGV0IHF1YWxpdHlTY29yZSA9IDA7XG4gICAgICBcbiAgICAgIC8vIFNhbXBsZSBzaXplIHNjb3JpbmdcbiAgICAgIGlmIChtb29kcy5sZW5ndGggPj0gMzApIHF1YWxpdHlTY29yZSArPSAwLjQ7XG4gICAgICBlbHNlIGlmIChtb29kcy5sZW5ndGggPj0gMTQpIHF1YWxpdHlTY29yZSArPSAwLjM7XG4gICAgICBlbHNlIGlmIChtb29kcy5sZW5ndGggPj0gNykgcXVhbGl0eVNjb3JlICs9IDAuMjtcbiAgICAgIGVsc2UgcXVhbGl0eVNjb3JlICs9IDAuMTtcbiAgICAgIFxuICAgICAgLy8gTWlzc2luZyBkYXRhIHJhdGlvXG4gICAgICBjb25zdCB2YWxpZE1vb2RTY29yZXMgPSBtb29kcy5maWx0ZXIobSA9PiBtLm1vb2Rfc2NvcmUgIT09IG51bGwgJiYgbS5tb29kX3Njb3JlICE9PSB1bmRlZmluZWQpO1xuICAgICAgY29uc3QgbWlzc2luZ1JhdGlvID0gMSAtICh2YWxpZE1vb2RTY29yZXMubGVuZ3RoIC8gbW9vZHMubGVuZ3RoKTtcbiAgICAgIGNvbnN0IG1pc3NpbmdTY29yZSA9IE1hdGgubWF4KDAsIDAuMyAtIG1pc3NpbmdSYXRpbyAqIDAuMyk7XG4gICAgICBxdWFsaXR5U2NvcmUgKz0gbWlzc2luZ1Njb3JlO1xuICAgICAgXG4gICAgICAvLyBPdXRsaWVyIGRldGVjdGlvblxuICAgICAgaWYgKHZhbGlkTW9vZFNjb3Jlcy5sZW5ndGggPj0gNSkge1xuICAgICAgICBjb25zdCBzY29yZXMgPSB2YWxpZE1vb2RTY29yZXMubWFwKG0gPT4gbS5tb29kX3Njb3JlKTtcbiAgICAgICAgY29uc3QgbWVhbiA9IHNjb3Jlcy5yZWR1Y2UoKHN1bSwgcykgPT4gc3VtICsgcywgMCkgLyBzY29yZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBzdGQgPSBNYXRoLnNxcnQoc2NvcmVzLnJlZHVjZSgoc3VtLCBzY29yZSkgPT4gc3VtICsgTWF0aC5wb3coc2NvcmUgLSBtZWFuLCAyKSwgMCkgLyBzY29yZXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgb3V0bGllcnMgPSBzY29yZXMuZmlsdGVyKHNjb3JlID0+IE1hdGguYWJzKHNjb3JlIC0gbWVhbikgPiAyICogc3RkKTtcbiAgICAgICAgY29uc3Qgb3V0bGllclJhdGlvID0gb3V0bGllcnMubGVuZ3RoIC8gc2NvcmVzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgb3V0bGllclNjb3JlID0gTWF0aC5tYXgoMCwgMC4zIC0gb3V0bGllclJhdGlvICogMC4zKTtcbiAgICAgICAgcXVhbGl0eVNjb3JlICs9IG91dGxpZXJTY29yZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIE1hdGgubWluKDEsIHF1YWxpdHlTY29yZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEFuYWx5dGljcyBkYXRhIHF1YWxpdHkgYXNzZXNzbWVudCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIDAuMTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog8J+noCBDbGFzc2lmeSBhbmFseXRpY3MgZW1vdGlvbmFsIHByb2ZpbGUgKDcgdHlwZXMgd2l0aCBwcmlvcml0eSlcbiAgICovXG4gIHByaXZhdGUgY2xhc3NpZnlBbmFseXRpY3NFbW90aW9uYWxQcm9maWxlKFxuICAgIG1vb2RzOiBhbnlbXSxcbiAgICBiYXNlbGluZXM6IHsgbW9vZDogbnVtYmVyOyBlbmVyZ3k6IG51bWJlcjsgYW54aWV0eTogbnVtYmVyIH0sXG4gICAgd2Vla2x5RGVsdGE6IG51bWJlcixcbiAgICB2b2xhdGlsaXR5OiBudW1iZXIsXG4gICAgY29ycmVsYXRpb25zOiBhbnlcbiAgKTogeyB0eXBlOiBzdHJpbmc7IGNvbmZpZGVuY2U6IG51bWJlcjsgcmF0aW9uYWxlOiBzdHJpbmdbXSB9IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmF0aW9uYWxlOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgbGV0IHByb2ZpbGVUeXBlID0gJ3N0YWJsZSc7XG4gICAgICBsZXQgY29uZmlkZW5jZSA9IDAuNTtcbiAgICAgIFxuICAgICAgLy8gUHJpb3JpdHkgb3JkZXI6IHN0cmVzc2VkID4gdm9sYXRpbGUgPiBmYXRpZ3VlZCA+IHJlY292ZXJpbmcgPiByZXNpbGllbnQgPiBlbGV2YXRlZCA+IHN0YWJsZVxuICAgICAgXG4gICAgICAvLyAxLiBTVFJFU1NFRDogYmFzZWxpbmUubW9vZCA8IDQwIEFORCBiYXNlbGluZS5hbnhpZXR5ID4gNjBcbiAgICAgIGlmIChiYXNlbGluZXMubW9vZCA8IDQwICYmIGJhc2VsaW5lcy5hbnhpZXR5ID4gNjApIHtcbiAgICAgICAgcHJvZmlsZVR5cGUgPSAnc3RyZXNzZWQnO1xuICAgICAgICByYXRpb25hbGUucHVzaChgRMO8xZ/DvGsgbW9vZCAoJHtiYXNlbGluZXMubW9vZC50b0ZpeGVkKDEpfSkgdmUgecO8a3NlayBhbmtzaXlldGUgKCR7YmFzZWxpbmVzLmFueGlldHkudG9GaXhlZCgxKX0pYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjg7XG4gICAgICB9XG4gICAgICAvLyAyLiBWT0xBVElMRTogdm9sYXRpbGl0eSA+IDE1XG4gICAgICBlbHNlIGlmICh2b2xhdGlsaXR5ID4gMTUpIHtcbiAgICAgICAgcHJvZmlsZVR5cGUgPSAndm9sYXRpbGUnO1xuICAgICAgICByYXRpb25hbGUucHVzaChgWcO8a3NlayBtb29kIHZvbGF0aWxpdGVzaSAoJHt2b2xhdGlsaXR5LnRvRml4ZWQoMSl9KWApO1xuICAgICAgICBjb25maWRlbmNlID0gMC43O1xuICAgICAgfVxuICAgICAgLy8gMy4gRkFUSUdVRUQ6IGJhc2VsaW5lLmVuZXJneSA8IDQwIEFORCBiYXNlbGluZS5tb29kIDwgNTVcbiAgICAgIGVsc2UgaWYgKGJhc2VsaW5lcy5lbmVyZ3kgPCA0MCAmJiBiYXNlbGluZXMubW9vZCA8IDU1KSB7XG4gICAgICAgIHByb2ZpbGVUeXBlID0gJ2ZhdGlndWVkJztcbiAgICAgICAgcmF0aW9uYWxlLnB1c2goYETDvMWfw7xrIGVuZXJqaSAoJHtiYXNlbGluZXMuZW5lcmd5LnRvRml4ZWQoMSl9KSB2ZSBvcnRhLWTDvMWfw7xrIG1vb2QgKCR7YmFzZWxpbmVzLm1vb2QudG9GaXhlZCgxKX0pYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjc1O1xuICAgICAgfVxuICAgICAgLy8gNC4gUkVDT1ZFUklORzogd2Vla2x5RGVsdGEgPiA4IEFORCA0MCDiiaQgYmFzZWxpbmUubW9vZCDiiaQgNjBcbiAgICAgIGVsc2UgaWYgKHdlZWtseURlbHRhID4gOCAmJiBiYXNlbGluZXMubW9vZCA+PSA0MCAmJiBiYXNlbGluZXMubW9vZCA8PSA2MCkge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdyZWNvdmVyaW5nJztcbiAgICAgICAgcmF0aW9uYWxlLnB1c2goYFBveml0aWYgaGFmdGFsxLFrIHRyZW5kICgrJHt3ZWVrbHlEZWx0YS50b0ZpeGVkKDEpfSkgdmUgb3J0YSBtb29kICgke2Jhc2VsaW5lcy5tb29kLnRvRml4ZWQoMSl9KWApO1xuICAgICAgICBjb25maWRlbmNlID0gMC42O1xuICAgICAgfVxuICAgICAgLy8gNS4gUkVTSUxJRU5UOiBiYXNlbGluZS5tb29kIOKJpSA2NSBBTkQgdm9sYXRpbGl0eSDiiaQgOCBBTkQgYmFzZWxpbmUuYW54aWV0eSDiiaQgNDBcbiAgICAgIGVsc2UgaWYgKGJhc2VsaW5lcy5tb29kID49IDY1ICYmIHZvbGF0aWxpdHkgPD0gOCAmJiBiYXNlbGluZXMuYW54aWV0eSA8PSA0MCkge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdyZXNpbGllbnQnO1xuICAgICAgICByYXRpb25hbGUucHVzaChgWcO8a3NlayBtb29kICgke2Jhc2VsaW5lcy5tb29kLnRvRml4ZWQoMSl9KSwgZMO8xZ/DvGsgdm9sYXRpbGl0ZSAoJHt2b2xhdGlsaXR5LnRvRml4ZWQoMSl9KSB2ZSBkw7zFn8O8ayBhbmtzaXlldGUgKCR7YmFzZWxpbmVzLmFueGlldHkudG9GaXhlZCgxKX0pYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjg1O1xuICAgICAgfVxuICAgICAgLy8gNi4gRUxFVkFURUQ6IGJhc2VsaW5lLm1vb2Qg4omlIDcwXG4gICAgICBlbHNlIGlmIChiYXNlbGluZXMubW9vZCA+PSA3MCkge1xuICAgICAgICBwcm9maWxlVHlwZSA9ICdlbGV2YXRlZCc7XG4gICAgICAgIHJhdGlvbmFsZS5wdXNoKGBZw7xrc2VrIG1vb2QgYmFzZWxpbmUgKCR7YmFzZWxpbmVzLm1vb2QudG9GaXhlZCgxKX0pYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjc7XG4gICAgICB9XG4gICAgICAvLyA3LiBTVEFCTEU6IGRlZmF1bHQgY2FzZVxuICAgICAgZWxzZSB7XG4gICAgICAgIHByb2ZpbGVUeXBlID0gJ3N0YWJsZSc7XG4gICAgICAgIHJhdGlvbmFsZS5wdXNoKGBEZW5nZWxpIGR1eWd1c2FsIGR1cnVtIChtb29kOiAke2Jhc2VsaW5lcy5tb29kLnRvRml4ZWQoMSl9LCB2b2xhdGlsaXRlOiAke3ZvbGF0aWxpdHkudG9GaXhlZCgxKX0pYCk7XG4gICAgICAgIGNvbmZpZGVuY2UgPSAwLjU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB7IHR5cGU6IHByb2ZpbGVUeXBlLCBjb25maWRlbmNlLCByYXRpb25hbGUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gQW5hbHl0aWNzIGVtb3Rpb25hbCBwcm9maWxlIGNsYXNzaWZpY2F0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4geyB0eXBlOiAnc3RhYmxlJywgY29uZmlkZW5jZTogMC4zLCByYXRpb25hbGU6IFsnQW5hbGl6IGhhdGFzxLEgbmVkZW5peWxlIHZhcnNhecSxbGFuIHByb2ZpbCddIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOKPsCBBbmFseXplIGJlc3QgdGltZXMgZm9yIG1vb2QgKGRheSBvZiB3ZWVrL3RpbWUgb2YgZGF5KVxuICAgKi9cbiAgcHJpdmF0ZSBhbmFseXplQW5hbHl0aWNzQmVzdFRpbWVzKG1vb2RzOiBhbnlbXSk6IHsgZGF5T2ZXZWVrPzogc3RyaW5nOyB0aW1lT2ZEYXk/OiBzdHJpbmc7IGNvbmZpZGVuY2U6IG51bWJlciB9IHtcbiAgICB0cnkge1xuICAgICAgaWYgKG1vb2RzLmxlbmd0aCA8IDcpIHJldHVybiB7IGNvbmZpZGVuY2U6IDAuMSB9O1xuICAgICAgXG4gICAgICBjb25zdCBkYXlPZldlZWtDb3VudHM6IHsgW2tleTogc3RyaW5nXTogeyBjb3VudDogbnVtYmVyOyBhdmdNb29kOiBudW1iZXIgfSB9ID0ge307XG4gICAgICBjb25zdCB0aW1lT2ZEYXlDb3VudHM6IHsgW2tleTogc3RyaW5nXTogeyBjb3VudDogbnVtYmVyOyBhdmdNb29kOiBudW1iZXIgfSB9ID0ge307XG4gICAgICBcbiAgICAgIGNvbnN0IGRheU5hbWVzID0gWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddO1xuICAgICAgXG4gICAgICBtb29kcy5mb3JFYWNoKG1vb2QgPT4ge1xuICAgICAgICBpZiAobW9vZC5tb29kX3Njb3JlICYmIG1vb2QuY3JlYXRlZF9hdCkge1xuICAgICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShtb29kLmNyZWF0ZWRfYXQpO1xuICAgICAgICAgIGNvbnN0IGRheU9mV2VlayA9IGRheU5hbWVzW2RhdGUuZ2V0RGF5KCldO1xuICAgICAgICAgIGNvbnN0IGhvdXIgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgICAgICAgY29uc3QgdGltZVNsb3QgPSBob3VyIDwgMTIgPyAnbW9ybmluZycgOiBob3VyIDwgMTggPyAnYWZ0ZXJub29uJyA6ICdldmVuaW5nJztcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBEYXkgb2Ygd2VlayBhbmFseXNpc1xuICAgICAgICAgIGlmICghZGF5T2ZXZWVrQ291bnRzW2RheU9mV2Vla10pIHtcbiAgICAgICAgICAgIGRheU9mV2Vla0NvdW50c1tkYXlPZldlZWtdID0geyBjb3VudDogMCwgYXZnTW9vZDogMCB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXlPZldlZWtDb3VudHNbZGF5T2ZXZWVrXS5jb3VudCsrO1xuICAgICAgICAgIGRheU9mV2Vla0NvdW50c1tkYXlPZldlZWtdLmF2Z01vb2QgKz0gbW9vZC5tb29kX3Njb3JlO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFRpbWUgb2YgZGF5IGFuYWx5c2lzXG4gICAgICAgICAgaWYgKCF0aW1lT2ZEYXlDb3VudHNbdGltZVNsb3RdKSB7XG4gICAgICAgICAgICB0aW1lT2ZEYXlDb3VudHNbdGltZVNsb3RdID0geyBjb3VudDogMCwgYXZnTW9vZDogMCB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aW1lT2ZEYXlDb3VudHNbdGltZVNsb3RdLmNvdW50Kys7XG4gICAgICAgICAgdGltZU9mRGF5Q291bnRzW3RpbWVTbG90XS5hdmdNb29kICs9IG1vb2QubW9vZF9zY29yZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSBhdmVyYWdlcyBhbmQgZmluZCBiZXN0IHRpbWVzXG4gICAgICBsZXQgYmVzdERheSA9ICcnO1xuICAgICAgbGV0IGJlc3REYXlNb29kID0gMDtcbiAgICAgIE9iamVjdC5rZXlzKGRheU9mV2Vla0NvdW50cykuZm9yRWFjaChkYXkgPT4ge1xuICAgICAgICBjb25zdCBhdmdNb29kID0gZGF5T2ZXZWVrQ291bnRzW2RheV0uYXZnTW9vZCAvIGRheU9mV2Vla0NvdW50c1tkYXldLmNvdW50O1xuICAgICAgICBkYXlPZldlZWtDb3VudHNbZGF5XS5hdmdNb29kID0gYXZnTW9vZDtcbiAgICAgICAgaWYgKGF2Z01vb2QgPiBiZXN0RGF5TW9vZCAmJiBkYXlPZldlZWtDb3VudHNbZGF5XS5jb3VudCA+PSAyKSB7XG4gICAgICAgICAgYmVzdERheSA9IGRheTtcbiAgICAgICAgICBiZXN0RGF5TW9vZCA9IGF2Z01vb2Q7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBsZXQgYmVzdFRpbWUgPSAnJztcbiAgICAgIGxldCBiZXN0VGltZU1vb2QgPSAwO1xuICAgICAgT2JqZWN0LmtleXModGltZU9mRGF5Q291bnRzKS5mb3JFYWNoKHRpbWUgPT4ge1xuICAgICAgICBjb25zdCBhdmdNb29kID0gdGltZU9mRGF5Q291bnRzW3RpbWVdLmF2Z01vb2QgLyB0aW1lT2ZEYXlDb3VudHNbdGltZV0uY291bnQ7XG4gICAgICAgIHRpbWVPZkRheUNvdW50c1t0aW1lXS5hdmdNb29kID0gYXZnTW9vZDtcbiAgICAgICAgaWYgKGF2Z01vb2QgPiBiZXN0VGltZU1vb2QgJiYgdGltZU9mRGF5Q291bnRzW3RpbWVdLmNvdW50ID49IDIpIHtcbiAgICAgICAgICBiZXN0VGltZSA9IHRpbWU7XG4gICAgICAgICAgYmVzdFRpbWVNb29kID0gYXZnTW9vZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRheU9mV2VlazogYmVzdERheSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRpbWVPZkRheTogYmVzdFRpbWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBjb25maWRlbmNlOiBNYXRoLm1pbigwLjgsIG1vb2RzLmxlbmd0aCAvIDIwKSAvLyBDb25maWRlbmNlIGluY3JlYXNlcyB3aXRoIG1vcmUgZGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gQW5hbHl0aWNzIGJlc3QgdGltZXMgYW5hbHlzaXMgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IGNvbmZpZGVuY2U6IDAuMSB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDwn46vIENhbGN1bGF0ZSBnbG9iYWwgY29uZmlkZW5jZSBzY29yZSBmb3IgYW5hbHl0aWNzXG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZUFuYWx5dGljc0dsb2JhbENvbmZpZGVuY2UobW9vZHM6IGFueVtdLCBkYXRhUXVhbGl0eTogbnVtYmVyLCBwcm9maWxlOiBhbnkpOiBudW1iZXIge1xuICAgIHRyeSB7XG4gICAgICBsZXQgY29uZmlkZW5jZSA9IDA7XG4gICAgICBcbiAgICAgIC8vIEJhc2UgY29uZmlkZW5jZSBmcm9tIGRhdGEgcXVhbGl0eSAoNDAlIHdlaWdodClcbiAgICAgIGNvbmZpZGVuY2UgKz0gZGF0YVF1YWxpdHkgKiAwLjQ7XG4gICAgICBcbiAgICAgIC8vIFNhbXBsZSBzaXplIGNvbmZpZGVuY2UgKDMwJSB3ZWlnaHQpXG4gICAgICBjb25zdCBzYW1wbGVTaXplID0gbW9vZHMubGVuZ3RoO1xuICAgICAgaWYgKHNhbXBsZVNpemUgPj0gMzApIGNvbmZpZGVuY2UgKz0gMC4zO1xuICAgICAgZWxzZSBpZiAoc2FtcGxlU2l6ZSA+PSAxNCkgY29uZmlkZW5jZSArPSAwLjI7XG4gICAgICBlbHNlIGlmIChzYW1wbGVTaXplID49IDcpIGNvbmZpZGVuY2UgKz0gMC4xO1xuICAgICAgZWxzZSBjb25maWRlbmNlICs9IDAuMDU7XG4gICAgICBcbiAgICAgIC8vIFByb2ZpbGUgY29uZmlkZW5jZSAoMjAlIHdlaWdodClcbiAgICAgIGlmIChwcm9maWxlICYmIHByb2ZpbGUuY29uZmlkZW5jZSkge1xuICAgICAgICBjb25maWRlbmNlICs9IHByb2ZpbGUuY29uZmlkZW5jZSAqIDAuMjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gRGF0YSByZWNlbmN5IGJvb3N0ICgxMCUgd2VpZ2h0KVxuICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgIGNvbnN0IHJlY2VudENvdW50ID0gbW9vZHMuZmlsdGVyKG0gPT4ge1xuICAgICAgICBjb25zdCBtb29kVGltZSA9IG5ldyBEYXRlKG0uY3JlYXRlZF9hdCkuZ2V0VGltZSgpO1xuICAgICAgICBjb25zdCBkYXlzRGlmZiA9IChub3cgLSBtb29kVGltZSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCk7XG4gICAgICAgIHJldHVybiBkYXlzRGlmZiA8PSA3O1xuICAgICAgfSkubGVuZ3RoO1xuICAgICAgXG4gICAgICBpZiAocmVjZW50Q291bnQgPj0gMykgY29uZmlkZW5jZSArPSAwLjE7XG4gICAgICBlbHNlIGlmIChyZWNlbnRDb3VudCA+PSAxKSBjb25maWRlbmNlICs9IDAuMDU7XG4gICAgICBcbiAgICAgIHJldHVybiBNYXRoLm1pbigxLCBNYXRoLm1heCgwLjEsIGNvbmZpZGVuY2UpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gQW5hbHl0aWNzIGdsb2JhbCBjb25maWRlbmNlIGNhbGN1bGF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gMC4zO1xuICAgIH1cbiAgfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBFWFBPUlQgU0lOR0xFVE9OIElOU1RBTkNFXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBjb25zdCB1bmlmaWVkUGlwZWxpbmUgPSBVbmlmaWVkQUlQaXBlbGluZS5nZXRJ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