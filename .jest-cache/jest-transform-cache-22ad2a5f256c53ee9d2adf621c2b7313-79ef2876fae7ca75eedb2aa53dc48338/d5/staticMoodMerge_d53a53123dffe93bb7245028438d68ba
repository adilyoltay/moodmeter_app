a5f28abbc7a431575602d6a42056e039
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.staticMoodMergeService = exports.intelligentMergeService = exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _moodDeletionCache = require("./moodDeletionCache");
function intelligentMoodMerge() {
  return _intelligentMoodMerge.apply(this, arguments);
}
function _intelligentMoodMerge() {
  _intelligentMoodMerge = (0, _asyncToGenerator2.default)(function* () {
    var localEntries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var remoteEntries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var userId = arguments.length > 2 ? arguments[2] : undefined;
    console.log(`üîÑ Starting static mood merge for user: ${userId || 'unknown'}`);
    var recentlyDeletedIds = [];
    if (userId) {
      try {
        recentlyDeletedIds = yield _moodDeletionCache.moodDeletionCache.getRecentlyDeletedIds(userId);
        console.log(`üóëÔ∏è Found ${recentlyDeletedIds.length} recently deleted entries to filter:`, recentlyDeletedIds);
        if (recentlyDeletedIds.length > 0) {
          console.log(`üîç Will filter entries matching these deleted IDs:`, recentlyDeletedIds.slice(0, 3));
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to get deletion cache:', error);
      }
    }
    var stats = {
      localCount: localEntries.length,
      remoteCount: remoteEntries.length,
      mergedCount: 0,
      duplicatesRemoved: 0,
      conflictsResolved: 0
    };
    var filteredRemoteEntries = remoteEntries.filter(function (entry) {
      var isDeleted = recentlyDeletedIds.includes(entry.id) || entry.local_id && recentlyDeletedIds.includes(entry.local_id) || entry.remote_id && recentlyDeletedIds.includes(entry.remote_id);
      if (isDeleted) {
        console.log(`üóëÔ∏è Filtering out deleted remote entry: ${entry.id}`);
      }
      return !isDeleted;
    });
    var filteredLocalEntries = localEntries.filter(function (entry) {
      var isDeleted = recentlyDeletedIds.includes(entry.id) || entry.local_id && recentlyDeletedIds.includes(entry.local_id) || entry.remote_id && recentlyDeletedIds.includes(entry.remote_id);
      if (isDeleted) {
        console.log(`üóëÔ∏è DELETION FILTER: Filtering out deleted local entry: ${entry.id}`, {
          matchedBy: recentlyDeletedIds.includes(entry.id) ? 'id' : entry.local_id && recentlyDeletedIds.includes(entry.local_id) ? 'local_id' : 'remote_id',
          deletedIds: recentlyDeletedIds
        });
      }
      return !isDeleted;
    });
    var mergedEntries = (0, _toConsumableArray2.default)(filteredRemoteEntries);
    var remoteIds = new Set(filteredRemoteEntries.map(function (entry) {
      return entry.id;
    }));
    var remoteHashes = new Set(filteredRemoteEntries.map(function (entry) {
      return entry.content_hash;
    }).filter(Boolean));
    var remoteContentHashes = new Set(filteredRemoteEntries.map(function (entry) {
      return entry.content_hash;
    }).filter(Boolean));
    var remoteLocalIds = new Set(filteredRemoteEntries.map(function (entry) {
      return entry.local_id;
    }).filter(Boolean));
    var remoteRemoteIds = new Set(filteredRemoteEntries.map(function (entry) {
      return entry.remote_id || entry.id;
    }).filter(Boolean));
    console.log(`üîç Merge analysis: Remote has ${remoteIds.size} IDs, ${remoteContentHashes.size} content hashes, ${remoteLocalIds.size} local_ids`);
    var localIdCounts = new Map();
    filteredLocalEntries.forEach(function (entry) {
      var count = localIdCounts.get(entry.id) || 0;
      localIdCounts.set(entry.id, count + 1);
    });
    var duplicateLocalIds = Array.from(localIdCounts.entries()).filter(function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        id = _ref2[0],
        count = _ref2[1];
      return count > 1;
    }).map(function (_ref3) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        id = _ref4[0],
        count = _ref4[1];
      return {
        id: id,
        count: count
      };
    });
    if (duplicateLocalIds.length > 0) {
      console.warn('üö® DUPLICATE LOCAL ENTRIES DETECTED:', duplicateLocalIds);
      duplicateLocalIds.forEach(function (_ref5) {
        var id = _ref5.id,
          count = _ref5.count;
        console.warn(`   ‚ö†Ô∏è ID: ${id} appears ${count} times in local entries`);
      });
    }
    var uniqueLocalEntries = Array.from(new Map(filteredLocalEntries.map(function (entry) {
      return [entry.id, entry];
    })).values());
    if (uniqueLocalEntries.length !== filteredLocalEntries.length) {
      var removedCount = filteredLocalEntries.length - uniqueLocalEntries.length;
      console.log(`üßπ Removed ${removedCount} duplicate local entries before merge`);
    }
    for (var localEntry of uniqueLocalEntries) {
      var shouldSkip = false;
      var skipReason = '';
      if (remoteIds.has(localEntry.id)) {
        shouldSkip = true;
        skipReason = 'exact_id_match';
      }
      if (!shouldSkip && localEntry.local_id && remoteLocalIds.has(localEntry.local_id)) {
        shouldSkip = true;
        skipReason = 'local_id_mapping';
      }
      if (!shouldSkip && localEntry.remote_id && remoteIds.has(localEntry.remote_id)) {
        shouldSkip = true;
        skipReason = 'remote_id_mapping';
      }
      if (!shouldSkip && localEntry.content_hash && remoteContentHashes.has(localEntry.content_hash)) {
        shouldSkip = true;
        skipReason = 'content_hash_duplicate';
        stats.duplicatesRemoved++;
      }
      if (!shouldSkip && !localEntry.content_hash) {
        var tempHash = generateTempContentHash(localEntry);
        if (remoteContentHashes.has(tempHash)) {
          shouldSkip = true;
          skipReason = 'content_similarity';
          stats.duplicatesRemoved++;
        }
      }
      if (shouldSkip) {
        console.log(`üîÑ Skipping local entry ${localEntry.id}: ${skipReason}`);
        continue;
      }
      console.log(`‚ûï Adding unique local entry: ${localEntry.id}`);
      mergedEntries.push(localEntry);
    }
    function generateTempContentHash(entry) {
      var contentText = `${entry.user_id}|${entry.mood_score}|${entry.energy_level}|${entry.anxiety_level}|${(entry.notes || '').trim().toLowerCase()}`;
      var hash = 0;
      for (var i = 0; i < contentText.length; i++) {
        var char = contentText.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return Math.abs(hash).toString(36);
    }
    stats.mergedCount = mergedEntries.length;
    var statsWithSync = Object.assign({}, stats, {
      syncSuccess: true
    });
    mergedEntries.sort(function (a, b) {
      var timeA = new Date(a.created_at || a.timestamp || 0).getTime();
      var timeB = new Date(b.created_at || b.timestamp || 0).getTime();
      return timeB - timeA;
    });
    console.log(`‚úÖ Static merge complete:`, statsWithSync);
    return {
      mergedEntries: mergedEntries,
      conflicts: [],
      stats: statsWithSync
    };
  });
  return _intelligentMoodMerge.apply(this, arguments);
}
function shouldMerge() {
  return _shouldMerge.apply(this, arguments);
}
function _shouldMerge() {
  _shouldMerge = (0, _asyncToGenerator2.default)(function* () {
    return true;
  });
  return _shouldMerge.apply(this, arguments);
}
var staticMoodMergeService = exports.staticMoodMergeService = {
  intelligentMoodMerge: intelligentMoodMerge,
  shouldMerge: shouldMerge
};
var intelligentMergeService = exports.intelligentMergeService = staticMoodMergeService;
var _default = exports.default = staticMoodMergeService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,