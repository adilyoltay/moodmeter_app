{"version":3,"names":["_moodDeletionCache","require","intelligentMoodMerge","_intelligentMoodMerge","apply","arguments","_asyncToGenerator2","default","localEntries","length","undefined","remoteEntries","userId","console","log","recentlyDeletedIds","moodDeletionCache","getRecentlyDeletedIds","slice","error","warn","stats","localCount","remoteCount","mergedCount","duplicatesRemoved","conflictsResolved","filteredRemoteEntries","filter","entry","isDeleted","includes","id","local_id","remote_id","filteredLocalEntries","matchedBy","deletedIds","mergedEntries","_toConsumableArray2","remoteIds","Set","map","remoteHashes","content_hash","Boolean","remoteContentHashes","remoteLocalIds","remoteRemoteIds","size","localIdCounts","Map","forEach","count","get","set","duplicateLocalIds","Array","from","entries","_ref","_ref2","_slicedToArray2","_ref3","_ref4","_ref5","uniqueLocalEntries","values","removedCount","localEntry","shouldSkip","skipReason","has","tempHash","generateTempContentHash","push","contentText","user_id","mood_score","energy_level","anxiety_level","notes","trim","toLowerCase","hash","i","char","charCodeAt","Math","abs","toString","statsWithSync","Object","assign","syncSuccess","sort","a","b","timeA","Date","created_at","timestamp","getTime","timeB","conflicts","shouldMerge","_shouldMerge","staticMoodMergeService","exports","intelligentMergeService","_default"],"sources":["staticMoodMerge.ts"],"sourcesContent":["/**\n * Static Mood Merge Service\n * \n * AI tabanlƒ± intelligentMoodMergeService yerine kullanƒ±lacak basit merge servisi.\n * Kurallar:\n * 1. Remote (Supabase) verisi her zaman local'a g√∂re √∂ncelikli\n * 2. Timestamp bazlƒ± conflict resolution\n * 3. Duplicate detection content_hash ile\n */\n\nimport type { MoodEntry } from '@/services/moodTrackingService';\nimport { moodDeletionCache } from './moodDeletionCache';\n\ninterface MergeResult {\n  mergedEntries: MoodEntry[];\n  conflicts: any[];\n  stats: {\n    localCount: number;\n    remoteCount: number;\n    mergedCount: number;\n    duplicatesRemoved: number;\n    conflictsResolved: number;\n    syncSuccess: boolean; // For backward compatibility\n  };\n}\n\ninterface MergeService {\n  intelligentMoodMerge(\n    localEntries: MoodEntry[],\n    remoteEntries: MoodEntry[],\n    userId?: string\n  ): Promise<MergeResult>;\n  \n  shouldMerge(...args: any[]): Promise<boolean>;\n}\n\n/**\n * Simple merge logic:\n * 1. Remote entries √∂ncelikli (Supabase truth source)\n * 2. Local-only entries remote'a eklenir\n * 3. Duplicate detection content_hash ile\n * 4. Conflict durumunda remote wins\n */\nasync function intelligentMoodMerge(\n  localEntries: MoodEntry[] = [],\n  remoteEntries: MoodEntry[] = [],\n  userId?: string\n): Promise<MergeResult> {\n  console.log(`üîÑ Starting static mood merge for user: ${userId || 'unknown'}`);\n  \n  // üóëÔ∏è CRITICAL FIX: Filter deleted entries before merge\n  let recentlyDeletedIds: string[] = [];\n  if (userId) {\n    try {\n      recentlyDeletedIds = await moodDeletionCache.getRecentlyDeletedIds(userId);\n      console.log(`üóëÔ∏è Found ${recentlyDeletedIds.length} recently deleted entries to filter:`, recentlyDeletedIds);\n      \n      // üîç DEBUG: Log what we're filtering against\n      if (recentlyDeletedIds.length > 0) {\n        console.log(`üîç Will filter entries matching these deleted IDs:`, recentlyDeletedIds.slice(0, 3));\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to get deletion cache:', error);\n    }\n  }\n  \n  const stats = {\n    localCount: localEntries.length,\n    remoteCount: remoteEntries.length,\n    mergedCount: 0,\n    duplicatesRemoved: 0,\n    conflictsResolved: 0\n  };\n\n  // üóëÔ∏è CRITICAL FIX: Filter out deleted entries from both local and remote\n  const filteredRemoteEntries = remoteEntries.filter(entry => {\n    const isDeleted = recentlyDeletedIds.includes(entry.id) || \n                     (entry.local_id && recentlyDeletedIds.includes(entry.local_id)) ||\n                     (entry.remote_id && recentlyDeletedIds.includes(entry.remote_id));\n    if (isDeleted) {\n      console.log(`üóëÔ∏è Filtering out deleted remote entry: ${entry.id}`);\n    }\n    return !isDeleted;\n  });\n  \n  const filteredLocalEntries = localEntries.filter(entry => {\n    const isDeleted = recentlyDeletedIds.includes(entry.id) || \n                     (entry.local_id && recentlyDeletedIds.includes(entry.local_id)) ||\n                     (entry.remote_id && recentlyDeletedIds.includes(entry.remote_id));\n    if (isDeleted) {\n      console.log(`üóëÔ∏è DELETION FILTER: Filtering out deleted local entry: ${entry.id}`, {\n        matchedBy: recentlyDeletedIds.includes(entry.id) ? 'id' : \n                  (entry.local_id && recentlyDeletedIds.includes(entry.local_id)) ? 'local_id' :\n                  'remote_id',\n        deletedIds: recentlyDeletedIds\n      });\n    }\n    return !isDeleted;\n  });\n\n  // Remote entries'i base olarak al (truth source) - filtered\n  const mergedEntries = [...filteredRemoteEntries];\n  const remoteIds = new Set(filteredRemoteEntries.map(entry => entry.id));\n  const remoteHashes = new Set(filteredRemoteEntries.map(entry => entry.content_hash).filter(Boolean));\n\n  // üîç ENHANCED DUPLICATE DETECTION: Build comprehensive ID and content maps - from filtered entries\n  const remoteContentHashes = new Set(filteredRemoteEntries.map(entry => entry.content_hash).filter(Boolean));\n  const remoteLocalIds = new Set(filteredRemoteEntries.map(entry => entry.local_id).filter(Boolean));\n  const remoteRemoteIds = new Set(filteredRemoteEntries.map(entry => entry.remote_id || entry.id).filter(Boolean));\n\n  console.log(`üîç Merge analysis: Remote has ${remoteIds.size} IDs, ${remoteContentHashes.size} content hashes, ${remoteLocalIds.size} local_ids`);\n\n  // üêõ DEBUG: Check for duplicate local entries before processing\n  const localIdCounts = new Map<string, number>();\n  filteredLocalEntries.forEach(entry => {\n    const count = localIdCounts.get(entry.id) || 0;\n    localIdCounts.set(entry.id, count + 1);\n  });\n  \n  const duplicateLocalIds = Array.from(localIdCounts.entries())\n    .filter(([id, count]) => count > 1)\n    .map(([id, count]) => ({ id, count }));\n  \n  if (duplicateLocalIds.length > 0) {\n    console.warn('üö® DUPLICATE LOCAL ENTRIES DETECTED:', duplicateLocalIds);\n    duplicateLocalIds.forEach(({ id, count }) => {\n      console.warn(`   ‚ö†Ô∏è ID: ${id} appears ${count} times in local entries`);\n    });\n  }\n\n  // üîß CRITICAL FIX: Deduplicate local entries by ID before processing\n  const uniqueLocalEntries = Array.from(\n    new Map(filteredLocalEntries.map(entry => [entry.id, entry])).values()\n  );\n  \n  if (uniqueLocalEntries.length !== filteredLocalEntries.length) {\n    const removedCount = filteredLocalEntries.length - uniqueLocalEntries.length;\n    console.log(`üßπ Removed ${removedCount} duplicate local entries before merge`);\n  }\n\n  // Local entries'den remote'da olmayan ve duplicate olmayan'larƒ± ekle - from deduplicated entries\n  for (const localEntry of uniqueLocalEntries) {\n    let shouldSkip = false;\n    let skipReason = '';\n\n    // 1. EXACT ID MATCH CHECK (original logic)\n    if (remoteIds.has(localEntry.id)) {\n      shouldSkip = true;\n      skipReason = 'exact_id_match';\n    }\n\n    // 2. LOCAL_ID MAPPING CHECK (new - critical for mood_xxx ‚Üî UUID mapping)\n    if (!shouldSkip && localEntry.local_id && remoteLocalIds.has(localEntry.local_id)) {\n      shouldSkip = true; \n      skipReason = 'local_id_mapping';\n    }\n\n    // 3. REMOTE_ID MAPPING CHECK (new - for UUID entries)\n    if (!shouldSkip && localEntry.remote_id && remoteIds.has(localEntry.remote_id)) {\n      shouldSkip = true;\n      skipReason = 'remote_id_mapping';  \n    }\n\n    // 4. CONTENT HASH CHECK (enhanced)\n    if (!shouldSkip && localEntry.content_hash && remoteContentHashes.has(localEntry.content_hash)) {\n      shouldSkip = true;\n      skipReason = 'content_hash_duplicate';\n      stats.duplicatesRemoved++;\n    }\n\n    // 5. FALLBACK CONTENT SIMILARITY CHECK (new - for entries without content_hash)\n    if (!shouldSkip && !localEntry.content_hash) {\n      // Generate temporary content hash for comparison\n      const tempHash = generateTempContentHash(localEntry);\n      if (remoteContentHashes.has(tempHash)) {\n        shouldSkip = true;\n        skipReason = 'content_similarity';\n        stats.duplicatesRemoved++;\n      }\n    }\n\n    if (shouldSkip) {\n      console.log(`üîÑ Skipping local entry ${localEntry.id}: ${skipReason}`);\n      continue;\n    }\n\n    // Bu local entry benzersiz, ekle\n    console.log(`‚ûï Adding unique local entry: ${localEntry.id}`);\n    mergedEntries.push(localEntry);\n  }\n\n  // Helper function for content hash generation\n  function generateTempContentHash(entry: MoodEntry): string {\n    const contentText = `${entry.user_id}|${entry.mood_score}|${entry.energy_level}|${entry.anxiety_level}|${(entry.notes || '').trim().toLowerCase()}`;\n    let hash = 0;\n    for (let i = 0; i < contentText.length; i++) {\n      const char = contentText.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  stats.mergedCount = mergedEntries.length;\n  \n  // Add syncSuccess for backward compatibility\n  const statsWithSync = {\n    ...stats,\n    syncSuccess: true // Static merge always succeeds\n  };\n\n  // Timestamp'a g√∂re sƒ±rala (en yeni en ba≈üta)\n  mergedEntries.sort((a, b) => {\n    const timeA = new Date(a.created_at || a.timestamp || 0).getTime();\n    const timeB = new Date(b.created_at || b.timestamp || 0).getTime();\n    return timeB - timeA;\n  });\n\n  console.log(`‚úÖ Static merge complete:`, statsWithSync);\n\n  return {\n    mergedEntries,\n    conflicts: [], // Static merge'de conflict yok, remote wins\n    stats: statsWithSync\n  };\n}\n\n/**\n * Her zaman merge'e izin ver (AI logic yok)\n */\nasync function shouldMerge(...args: any[]): Promise<boolean> {\n  return true;\n}\n\nexport const staticMoodMergeService: MergeService = {\n  intelligentMoodMerge,\n  shouldMerge\n};\n\n// Backward compatibility i√ßin export\nexport const intelligentMergeService = staticMoodMergeService;\n\nexport default staticMoodMergeService;\n"],"mappings":"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","ignoreList":[]}