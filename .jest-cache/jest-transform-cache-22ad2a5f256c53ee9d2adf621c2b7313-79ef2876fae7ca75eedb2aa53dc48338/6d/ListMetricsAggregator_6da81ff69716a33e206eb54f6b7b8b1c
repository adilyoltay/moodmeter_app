64ba8eab1cadbe03d4ab5bad9ce5eb8d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _VirtualizeUtils = require("./VirtualizeUtils");
var _invariant = _interopRequireDefault(require("invariant"));
var ListMetricsAggregator = exports.default = function () {
  function ListMetricsAggregator() {
    (0, _classCallCheck2.default)(this, ListMetricsAggregator);
    this._averageCellLength = 0;
    this._cellMetrics = new Map();
    this._highestMeasuredCellIndex = 0;
    this._measuredCellsLength = 0;
    this._measuredCellsCount = 0;
    this._orientation = {
      horizontal: false,
      rtl: false
    };
  }
  return (0, _createClass2.default)(ListMetricsAggregator, [{
    key: "notifyCellLayout",
    value: function notifyCellLayout(_ref) {
      var cellIndex = _ref.cellIndex,
        cellKey = _ref.cellKey,
        orientation = _ref.orientation,
        layout = _ref.layout;
      this._invalidateIfOrientationChanged(orientation);
      var next = {
        index: cellIndex,
        length: this._selectLength(layout),
        isMounted: true,
        offset: this.flowRelativeOffset(layout)
      };
      var curr = this._cellMetrics.get(cellKey);
      if (!curr || next.offset !== curr.offset || next.length !== curr.length) {
        if (curr) {
          var dLength = next.length - curr.length;
          this._measuredCellsLength += dLength;
        } else {
          this._measuredCellsLength += next.length;
          this._measuredCellsCount += 1;
        }
        this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;
        this._cellMetrics.set(cellKey, next);
        this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);
        return true;
      } else {
        curr.isMounted = true;
        return false;
      }
    }
  }, {
    key: "notifyCellUnmounted",
    value: function notifyCellUnmounted(cellKey) {
      var curr = this._cellMetrics.get(cellKey);
      if (curr) {
        curr.isMounted = false;
      }
    }
  }, {
    key: "notifyListContentLayout",
    value: function notifyListContentLayout(_ref2) {
      var orientation = _ref2.orientation,
        layout = _ref2.layout;
      this._invalidateIfOrientationChanged(orientation);
      this._contentLength = this._selectLength(layout);
    }
  }, {
    key: "getAverageCellLength",
    value: function getAverageCellLength() {
      return this._averageCellLength;
    }
  }, {
    key: "getHighestMeasuredCellIndex",
    value: function getHighestMeasuredCellIndex() {
      return this._highestMeasuredCellIndex;
    }
  }, {
    key: "getCellMetricsApprox",
    value: function getCellMetricsApprox(index, props) {
      var frame = this.getCellMetrics(index, props);
      if (frame && frame.index === index) {
        return frame;
      } else {
        var offset;
        var highestMeasuredCellIndex = this.getHighestMeasuredCellIndex();
        if (highestMeasuredCellIndex < index) {
          var highestMeasuredCellFrame = this.getCellMetrics(highestMeasuredCellIndex, props);
          if (highestMeasuredCellFrame) {
            offset = highestMeasuredCellFrame.offset + highestMeasuredCellFrame.length + this._averageCellLength * (index - highestMeasuredCellIndex - 1);
          }
        }
        if (offset == null) {
          offset = this._averageCellLength * index;
        }
        var data = props.data,
          getItemCount = props.getItemCount;
        (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);
        return {
          length: this._averageCellLength,
          offset: offset,
          index: index,
          isMounted: false
        };
      }
    }
  }, {
    key: "getCellMetrics",
    value: function getCellMetrics(index, props) {
      var _props$keyExtractor;
      var data = props.data,
        getItem = props.getItem,
        getItemCount = props.getItemCount,
        getItemLayout = props.getItemLayout;
      (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);
      var keyExtractor = (_props$keyExtractor = props.keyExtractor) != null ? _props$keyExtractor : _VirtualizeUtils.keyExtractor;
      var frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));
      if (frame && frame.index === index) {
        return frame;
      }
      if (getItemLayout) {
        var _getItemLayout = getItemLayout(data, index),
          length = _getItemLayout.length,
          offset = _getItemLayout.offset;
        return {
          index: index,
          length: length,
          offset: offset,
          isMounted: true
        };
      }
      return null;
    }
  }, {
    key: "getCellOffsetApprox",
    value: function getCellOffsetApprox(index, props) {
      if (Number.isInteger(index)) {
        return this.getCellMetricsApprox(index, props).offset;
      } else {
        var frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);
        var remainder = index - Math.floor(index);
        return frameMetrics.offset + remainder * frameMetrics.length;
      }
    }
  }, {
    key: "getContentLength",
    value: function getContentLength() {
      var _this$_contentLength;
      return (_this$_contentLength = this._contentLength) != null ? _this$_contentLength : 0;
    }
  }, {
    key: "hasContentLength",
    value: function hasContentLength() {
      return this._contentLength != null;
    }
  }, {
    key: "flowRelativeOffset",
    value: function flowRelativeOffset(layout, referenceContentLength) {
      var _this$_orientation = this._orientation,
        horizontal = _this$_orientation.horizontal,
        rtl = _this$_orientation.rtl;
      if (horizontal && rtl) {
        var contentLength = referenceContentLength != null ? referenceContentLength : this._contentLength;
        (0, _invariant.default)(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
        return contentLength - (this._selectOffset(layout) + this._selectLength(layout));
      } else {
        return this._selectOffset(layout);
      }
    }
  }, {
    key: "cartesianOffset",
    value: function cartesianOffset(flowRelativeOffset) {
      var _this$_orientation2 = this._orientation,
        horizontal = _this$_orientation2.horizontal,
        rtl = _this$_orientation2.rtl;
      if (horizontal && rtl) {
        (0, _invariant.default)(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
        return this._contentLength - flowRelativeOffset;
      } else {
        return flowRelativeOffset;
      }
    }
  }, {
    key: "_invalidateIfOrientationChanged",
    value: function _invalidateIfOrientationChanged(orientation) {
      if (orientation.rtl !== this._orientation.rtl) {
        this._cellMetrics.clear();
      }
      if (orientation.horizontal !== this._orientation.horizontal) {
        this._averageCellLength = 0;
        this._highestMeasuredCellIndex = 0;
        this._measuredCellsLength = 0;
        this._measuredCellsCount = 0;
      }
      this._orientation = orientation;
    }
  }, {
    key: "_selectLength",
    value: function _selectLength(_ref3) {
      var width = _ref3.width,
        height = _ref3.height;
      return this._orientation.horizontal ? width : height;
    }
  }, {
    key: "_selectOffset",
    value: function _selectOffset(_ref4) {
      var x = _ref4.x,
        y = _ref4.y;
      return this._orientation.horizontal ? x : y;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,