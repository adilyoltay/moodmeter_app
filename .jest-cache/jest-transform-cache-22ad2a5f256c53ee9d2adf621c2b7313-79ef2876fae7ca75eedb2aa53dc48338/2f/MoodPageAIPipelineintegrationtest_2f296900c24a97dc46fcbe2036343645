5d1a0775b7d6e65221a9724cefe8ab6f
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return _qualityRibbonFixtures.mockAsyncStorage;
});
_getJestObj().mock("../../features/ai/core/UnifiedAIPipeline");
_getJestObj().mock("../../features/ai/hooks/useAdaptiveSuggestion");
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry");
_getJestObj().mock("../../constants/featureFlags", function () {
  return {
    FEATURE_FLAGS: {
      isEnabled: jest.fn(function (flag) {
        if (flag === 'AI_UNIFIED_PIPELINE') return true;
        return false;
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _mood = _interopRequireDefault(require("@/app/(tabs)/mood"));
var _AuthContext = require("../../contexts/AuthContext");
var _qualityRibbonFixtures = require("../fixtures/qualityRibbonFixtures");
var _seedData = require("../fixtures/seedData");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Mood Page AI Pipeline Integration', function () {
  var mockUser;
  var mockUnifiedPipeline;
  var mockUseAdaptiveSuggestion;
  beforeEach(function () {
    jest.clearAllMocks();
    mockUser = {
      id: 'test-user-123',
      email: 'test@example.com'
    };
    mockUnifiedPipeline = {
      process: jest.fn().mockResolvedValue(_qualityRibbonFixtures.mockUnifiedPipelineResult)
    };
    mockUseAdaptiveSuggestion = {
      generateSuggestionFromPipeline: jest.fn().mockResolvedValue(_qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality),
      trackSuggestionClick: jest.fn(),
      trackSuggestionDismissal: jest.fn(),
      snoozeSuggestion: jest.fn()
    };
    var moodEntries = (0, _qualityRibbonFixtures.generateMoodEntries)(10);
    _qualityRibbonFixtures.mockAsyncStorage.getItem.mockImplementation(function (key) {
      if (key.includes('mood_entries')) {
        return Promise.resolve(JSON.stringify(moodEntries));
      }
      return Promise.resolve(null);
    });
    require("../../features/ai/core/UnifiedAIPipeline").unifiedPipeline = mockUnifiedPipeline;
    require("../../features/ai/hooks/useAdaptiveSuggestion").useAdaptiveSuggestion = jest.fn(function () {
      return mockUseAdaptiveSuggestion;
    });
  });
  var renderMoodPage = function renderMoodPage() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
      value: {
        user: mockUser,
        loading: false
      },
      children: (0, _jsxRuntime.jsx)(_mood.default, {})
    }));
  };
  describe('AI Pipeline Integration', function () {
    it('should trigger unified pipeline with mood data', (0, _asyncToGenerator2.default)(function* () {
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUnifiedPipeline.process).toHaveBeenCalledWith(expect.objectContaining({
          userId: 'test-user-123',
          content: expect.any(Array),
          type: 'data',
          context: expect.objectContaining({
            source: 'mood',
            trigger: 'mood_analysis'
          })
        }));
      });
    }));
    it('should process pipeline result and generate insights', (0, _asyncToGenerator2.default)(function* () {
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUnifiedPipeline.process).toHaveBeenCalled();
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUseAdaptiveSuggestion.generateSuggestionFromPipeline).toHaveBeenCalledWith('test-user-123', _qualityRibbonFixtures.mockUnifiedPipelineResult, 'mood');
      });
    }));
    it('should handle pipeline errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockUnifiedPipeline.process.mockRejectedValueOnce(new Error('Pipeline error'));
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText(/Mood Takibi/)).toBeTruthy();
      });
      expect(component.queryByTestId('adaptive-suggestion-card')).toBeNull();
    }));
  });
  describe('Quality Metadata Generation', function () {
    it('should generate quality metadata from pipeline result', (0, _asyncToGenerator2.default)(function* () {
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUseAdaptiveSuggestion.generateSuggestionFromPipeline).toHaveBeenCalled();
      });
      yield (0, _reactNative.waitFor)(function () {
        var adaptiveSuggestionCard = component.getByTestId('adaptive-suggestion-card');
        expect(adaptiveSuggestionCard).toBeTruthy();
        (0, _qualityRibbonFixtures.expectQualityRibbonToShow)(component, 'unified', 'high', 15);
      });
    }));
    it('should show different quality levels based on analytics', (0, _asyncToGenerator2.default)(function* () {
      var lowQualityResult = Object.assign({}, _qualityRibbonFixtures.mockUnifiedPipelineResult, {
        analytics: {
          mood: {
            confidence: 0.45,
            sampleSize: 3,
            dataQuality: 0.5
          }
        }
      });
      mockUnifiedPipeline.process.mockResolvedValueOnce(lowQualityResult);
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        var ribbon = component.getByTestId('quality-ribbon');
        expect(ribbon).toBeTruthy();
        expect(component.getByText('Low')).toBeTruthy();
      });
    }));
    it('should show Cache vs Fresh badges correctly', (0, _asyncToGenerator2.default)(function* () {
      _qualityRibbonFixtures.mockUnifiedPipelineResult.metadata.source = 'fresh';
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText('Fresh')).toBeTruthy();
      });
      _qualityRibbonFixtures.mockUnifiedPipelineResult.metadata.source = 'cache';
      mockUnifiedPipeline.process.mockResolvedValueOnce(_qualityRibbonFixtures.mockUnifiedPipelineResult);
      var refreshControl = component.getByTestId('mood-refresh-control');
      (0, _reactNative.fireEvent)(refreshControl, 'refresh');
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText('Cache')).toBeTruthy();
      });
    }));
  });
  describe('Quality Ribbon Rendering', function () {
    it('should render Quality Ribbon with correct badges', (0, _asyncToGenerator2.default)(function* () {
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        var suggestionCard = component.getByTestId('adaptive-suggestion-card');
        expect(suggestionCard).toBeTruthy();
      });
      expect(component.getByText('Fresh')).toBeTruthy();
      expect(component.getByText('High')).toBeTruthy();
      expect(component.getByText('n=15')).toBeTruthy();
      expect(component.getByText(/\d+m/)).toBeTruthy();
    }));
    it('should handle missing quality metadata gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockUseAdaptiveSuggestion.generateSuggestionFromPipeline.mockResolvedValueOnce(Object.assign({}, _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality));
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByTestId('adaptive-suggestion-card')).toBeTruthy();
        expect(component.queryByTestId('quality-ribbon')).toBeNull();
      });
    }));
    it('should show sample size badge only when available', (0, _asyncToGenerator2.default)(function* () {
      var metaWithoutSampleSize = Object.assign({}, _qualityRibbonFixtures.mockQualityMeta.highQuality, {
        sampleSize: undefined
      });
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        var ribbon = component.getByTestId('quality-ribbon');
        expect(ribbon).toBeTruthy();
        expect(component.getByText('Fresh')).toBeTruthy();
        expect(component.getByText('High')).toBeTruthy();
        expect(component.queryByText(/n=\d+/)).toBeNull();
      });
    }));
  });
  describe('User Interactions', function () {
    it('should handle suggestion acceptance', (0, _asyncToGenerator2.default)(function* () {
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByTestId('adaptive-suggestion-card')).toBeTruthy();
      });
      var acceptButton = component.getByText('Şimdi Dene');
      _reactNative.fireEvent.press(acceptButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUseAdaptiveSuggestion.trackSuggestionClick).toHaveBeenCalledWith('test-user-123', _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality);
      });
    }));
    it('should handle suggestion dismissal', (0, _asyncToGenerator2.default)(function* () {
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByTestId('adaptive-suggestion-card')).toBeTruthy();
      });
      var dismissButton = component.getByText('Daha Sonra');
      _reactNative.fireEvent.press(dismissButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUseAdaptiveSuggestion.trackSuggestionDismissal).toHaveBeenCalledWith('test-user-123', _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality);
      });
      expect(component.queryByTestId('adaptive-suggestion-card')).toBeNull();
    }));
  });
  describe('Analytics Integration', function () {
    it('should include mood analytics in quality calculation', (0, _asyncToGenerator2.default)(function* () {
      var analyticsResult = Object.assign({}, _qualityRibbonFixtures.mockUnifiedPipelineResult, {
        analytics: {
          mood: {
            confidence: 0.92,
            sampleSize: 20,
            volatility: 0.6,
            weeklyDelta: 1.5,
            dataQuality: 0.95,
            baselines: {
              mood: 7.2
            },
            correlations: {
              exercise: 0.7
            },
            bestTimes: ['morning']
          }
        }
      });
      mockUnifiedPipeline.process.mockResolvedValueOnce(analyticsResult);
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText('High')).toBeTruthy();
        expect(component.getByText('n=20')).toBeTruthy();
        expect(component.getByText('Fresh')).toBeTruthy();
      });
    }));
    it('should show appropriate quality for different data volumes', (0, _asyncToGenerator2.default)(function* () {
      var scenarios = [{
        sampleSize: 2,
        expectedQuality: 'Low'
      }, {
        sampleSize: 5,
        expectedQuality: 'Med'
      }, {
        sampleSize: 12,
        expectedQuality: 'High'
      }];
      var _loop = function* _loop(scenario) {
        var analyticsResult = Object.assign({}, _qualityRibbonFixtures.mockUnifiedPipelineResult, {
          analytics: {
            mood: {
              confidence: scenario.sampleSize >= 7 ? 0.85 : 0.65,
              sampleSize: scenario.sampleSize,
              dataQuality: 0.8
            }
          }
        });
        mockUnifiedPipeline.process.mockResolvedValueOnce(analyticsResult);
        var component = renderMoodPage();
        yield (0, _reactNative.waitFor)(function () {
          expect(component.getByText(scenario.expectedQuality)).toBeTruthy();
          expect(component.getByText(`n=${scenario.sampleSize}`)).toBeTruthy();
        });
        component.unmount();
      };
      for (var scenario of scenarios) {
        yield* _loop(scenario);
      }
    }));
  });
  describe('Performance', function () {
    it('should complete pipeline processing within acceptable time', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByTestId('adaptive-suggestion-card')).toBeTruthy();
      });
      var endTime = Date.now();
      var processingTime = endTime - startTime;
      expect(processingTime).toBeLessThan(5000);
    }));
    it('should not block UI during pipeline processing', (0, _asyncToGenerator2.default)(function* () {
      var component = renderMoodPage();
      expect(component.getByText('Mood Takibi')).toBeTruthy();
      expect(component.queryByText('Yükleniyor...')).toBeTruthy();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.queryByText('Yükleniyor...')).toBeNull();
      });
    }));
  });
  describe('🔢 N-Threshold Quality Testing', function () {
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.clearAllTestData)();
    }));
    it.each([['high', 16, 'High', 'Fresh'], ['medium', 10, 'Med', 'Cache'], ['low', 4, 'Low', 'Fast']])('[QR:mood:%s] should show %s quality for %i mood entries', function () {
      var _ref15 = (0, _asyncToGenerator2.default)(function* (scenario, sampleSize, expectedQuality, expectedSource) {
        yield (0, _seedData.seedTestData)(scenario, ['mood']);
        var pipelineResult = (0, _seedData.createMockPipelineResult)(scenario === 'high' ? 'unified' : scenario === 'medium' ? 'cache' : 'heuristic', scenario, 'mood');
        mockUnifiedPipeline.process.mockResolvedValue(pipelineResult);
        var scenarioConfig = _seedData.MOOD_SCENARIOS[scenario];
        mockUseAdaptiveSuggestion.generateSuggestionFromPipeline.mockResolvedValueOnce(Object.assign({}, _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality, {
          meta: {
            source: pipelineResult.metadata.source === 'fresh' ? 'unified' : pipelineResult.metadata.source,
            qualityLevel: scenarioConfig.qualityLevel,
            sampleSize: scenarioConfig.sampleSize,
            freshnessMs: Date.now() - (pipelineResult.metadata.processedAt || Date.now())
          }
        }));
        var component = renderMoodPage();
        yield (0, _reactNative.waitFor)(function () {
          expect(component.getByTestId('adaptive-suggestion-card')).toBeTruthy();
        }, {
          timeout: 8000
        });
        yield (0, _reactNative.waitFor)(function () {
          expect(component.getByText(expectedSource)).toBeTruthy();
          expect(component.getByText(expectedQuality)).toBeTruthy();
          expect(component.getByText(`n=${sampleSize}`)).toBeTruthy();
        });
      });
      return function (_x, _x2, _x3, _x4) {
        return _ref15.apply(this, arguments);
      };
    }());
    it('[QR:mood:medium] should handle mood data exactly at threshold boundaries', (0, _asyncToGenerator2.default)(function* () {
      var boundaryScenario = {
        sampleSize: 7,
        expectedQuality: 'Med'
      };
      yield (0, _seedData.seedTestData)('medium', ['mood']);
      var result = (0, _seedData.createMockPipelineResult)('cache', 'medium', 'mood');
      result.analytics.mood.sampleSize = boundaryScenario.sampleSize;
      mockUnifiedPipeline.process.mockResolvedValue(result);
      mockUseAdaptiveSuggestion.generateSuggestionFromPipeline.mockResolvedValueOnce(Object.assign({}, _qualityRibbonFixtures.mockAdaptiveSuggestions.mediumQuality, {
        meta: {
          source: 'cache',
          qualityLevel: 'medium',
          sampleSize: boundaryScenario.sampleSize,
          freshnessMs: 3600000
        }
      }));
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText('Cache')).toBeTruthy();
        expect(component.getByText(boundaryScenario.expectedQuality)).toBeTruthy();
        expect(component.getByText(`n=${boundaryScenario.sampleSize}`)).toBeTruthy();
      });
    }));
  });
  describe('🕐 Fresh/Cache Transitions for Mood', function () {
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.clearAllTestData)();
    }));
    it('[QR:mood:cache] should transition from Fresh to Cache based on TTL', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('high', ['mood']);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'high', 'mood');
      mockUnifiedPipeline.process.mockResolvedValueOnce(freshResult);
      mockUseAdaptiveSuggestion.generateSuggestionFromPipeline.mockResolvedValueOnce(Object.assign({}, _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality, {
        meta: {
          source: 'unified',
          qualityLevel: 'high',
          sampleSize: 16,
          freshnessMs: 0
        }
      }));
      var component = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
        value: {
          user: mockUser,
          loading: false
        },
        children: (0, _jsxRuntime.jsx)(_mood.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText('Fresh')).toBeTruthy();
      });
      yield (0, _seedData.waitForDuration)(_seedData.TEST_ENV.TTL_MS + 1000);
      var cachedResult = (0, _seedData.createMockPipelineResult)('cache', 'high', 'mood');
      mockUnifiedPipeline.process.mockResolvedValueOnce(cachedResult);
      mockUseAdaptiveSuggestion.generateSuggestionFromPipeline.mockResolvedValueOnce(Object.assign({}, _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality, {
        meta: {
          source: 'cache',
          qualityLevel: 'high',
          sampleSize: 16,
          freshnessMs: _seedData.TEST_ENV.TTL_MS
        }
      }));
      component.unmount();
      var newComponent = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
        value: {
          user: mockUser,
          loading: false
        },
        children: (0, _jsxRuntime.jsx)(_mood.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(newComponent.getByText('Cache')).toBeTruthy();
        expect(newComponent.getByText(/\d+[sm]/)).toBeTruthy();
      }, {
        timeout: 8000
      });
    }));
  });
  describe('🚫 Mood Quality Ribbon Hiding', function () {
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.clearAllTestData)();
    }));
    it('[QR:mood:hidden] should hide Quality Ribbon when mood suggestion metadata is missing', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('low', ['mood']);
      mockUseAdaptiveSuggestion.generateSuggestionFromPipeline.mockResolvedValueOnce(Object.assign({}, _qualityRibbonFixtures.mockAdaptiveSuggestions.lowQuality, {
        meta: undefined
      }));
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByTestId('adaptive-suggestion-card')).toBeTruthy();
        expect(component.queryByTestId('quality-ribbon')).toBeNull();
        expect(component.queryByText('Fresh')).toBeNull();
        expect(component.queryByText('Cache')).toBeNull();
        expect(component.queryByText('Fast')).toBeNull();
      });
    }));
    it('[QR:mood:hidden] should hide Quality Ribbon when mood pipeline fails', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('medium', ['mood']);
      mockUnifiedPipeline.process.mockRejectedValueOnce(new Error('Mood pipeline failed'));
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText('Mood Takibi')).toBeTruthy();
        expect(component.queryByTestId('adaptive-suggestion-card')).toBeNull();
        expect(component.queryByTestId('quality-ribbon')).toBeNull();
      });
    }));
  });
  describe('🧪 Test Mode Integration for Mood', function () {
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.clearAllTestData)();
    }));
    it('should respect TEST_TTL_MS for mood cache expiry', (0, _asyncToGenerator2.default)(function* () {
      expect(_seedData.TEST_ENV.MODE).toBe(true);
      expect(_seedData.TEST_ENV.TTL_MS).toBe(5000);
      yield (0, _seedData.seedTestData)('high', ['mood']);
      var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'mood');
      mockUnifiedPipeline.process.mockResolvedValue(result);
      mockUseAdaptiveSuggestion.generateSuggestionFromPipeline.mockResolvedValueOnce(Object.assign({}, _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality, {
        meta: {
          source: 'unified',
          qualityLevel: 'high',
          sampleSize: 16,
          freshnessMs: 0
        }
      }));
      var component = renderMoodPage();
      yield (0, _reactNative.waitFor)(function () {
        expect(component.getByText('Fresh')).toBeTruthy();
        expect(component.getByText('High')).toBeTruthy();
        expect(component.getByText('n=16')).toBeTruthy();
      });
      expect(process.env.TEST_MODE).toBe('1');
      expect(process.env.TEST_TTL_MS).toBe('5000');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,