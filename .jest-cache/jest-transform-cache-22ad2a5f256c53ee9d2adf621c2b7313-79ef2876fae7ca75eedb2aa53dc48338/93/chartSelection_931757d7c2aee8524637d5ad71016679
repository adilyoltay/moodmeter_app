e324dcc9724ce1ebfaae8e5126ab23a1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emitSelectionHelper = emitSelectionHelper;
exports.formatXLabel = formatXLabel;
exports.getXLabelVisibility = getXLabelVisibility;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _lastKey = null;
var _lastResult = null;
function formatXLabel(item, timeRange, locale) {
  var key = `${timeRange}|${item.date}|${item.label || ''}|${locale}`;
  if (_lastKey === key && _lastResult) return _lastResult;
  var result = '';
  if (timeRange === 'day') {
    var k = item.date || '';
    var hh = k.includes('#') ? k.split('#')[1] : '00';
    var h = parseInt(hh, 10) || 0;
    result = String(h).padStart(2, '0');
  } else if (timeRange === 'week') {
    var d = new Date(`${item.date}T00:00:00`);
    var daysShort = ['Pz', 'Pt', 'Sa', 'Ça', 'Pe', 'Cu', 'Ct'];
    result = daysShort[d.getDay()];
  } else if (timeRange === 'month') {
    var label = item.label || '';
    var match = label.match(/^(\d+)/);
    if (match) result = match[1];else {
      var _d = new Date(item.date);
      result = _d.getDate().toString();
    }
  } else {
    var _d2 = new Date(item.date);
    result = new Intl.DateTimeFormat(locale, {
      month: 'short'
    }).format(_d2);
  }
  _lastKey = key;
  _lastResult = result;
  return result;
}
function getXLabelVisibility(index, total, timeRange, contentWidth) {
  if (timeRange === 'day') {
    var dw = contentWidth / Math.max(1, total);
    var _step = 1;
    if (dw < 12) _step = 4;else if (dw < 18) _step = 3;else if (dw < 28) _step = 2;else _step = 1;
    return index % _step === 0;
  }
  var minLabelPx = timeRange === 'week' ? 18 : timeRange === 'month' ? 22 : timeRange === '6months' ? 28 : 36;
  var step = Math.max(1, Math.ceil(total * minLabelPx / Math.max(1, contentWidth)));
  if (index === 0 || index === total - 1) return true;
  return index % step === 0;
}
function emitSelectionHelper(args) {
  var _data$aggregated;
  var data = args.data,
    timeRange = args.timeRange,
    contentWidth = args.contentWidth,
    chartWidth = args.chartWidth,
    dayWindowStart = args.dayWindowStart,
    dayWindowSize = args.dayWindowSize,
    index = args.index,
    locale = args.locale,
    AXIS_WIDTH = args.AXIS_WIDTH,
    onSelectionChange = args.onSelectionChange;
  var items = timeRange === 'day' ? (data.hourlyAverages || []).slice(dayWindowStart, dayWindowStart + dayWindowSize).map(function (h) {
    return {
      date: h.dateKey
    };
  }) : ((_data$aggregated = data.aggregated) == null ? void 0 : _data$aggregated.data) || [];
  var n = items.length;
  if (index === null || index < 0 || index > n - 1) {
    onSelectionChange == null || onSelectionChange(null);
    return;
  }
  var totalCount = 0;
  var hasData = false;
  if (timeRange === 'day') {
    var _rawHourlyDataPoints;
    var hourItem = items[index];
    var rp = ((_rawHourlyDataPoints = data.rawHourlyDataPoints) == null || (_rawHourlyDataPoints = _rawHourlyDataPoints[hourItem.date]) == null ? void 0 : _rawHourlyDataPoints.entries) || [];
    totalCount = rp.length;
    hasData = totalCount > 0;
  } else {
    var b = items[index];
    totalCount = Number(b.count || 0);
    hasData = totalCount > 0;
  }
  if (!hasData || totalCount === 0) {
    var found = -1;
    for (var step = 1; step < n; step++) {
      var left = index - step;
      var right = index + step;
      var check = function check(k) {
        if (k < 0 || k >= n) return false;
        if (timeRange === 'day') {
          var _rawHourlyDataPoints2;
          var it = items[k];
          var _rp = ((_rawHourlyDataPoints2 = data.rawHourlyDataPoints) == null || (_rawHourlyDataPoints2 = _rawHourlyDataPoints2[it.date]) == null ? void 0 : _rawHourlyDataPoints2.entries) || [];
          return _rp.length > 0;
        } else {
          return Number(items[k].count || 0) > 0;
        }
      };
      if (check(left)) {
        found = left;
        break;
      }
      if (check(right)) {
        found = right;
        break;
      }
    }
    if (found === -1) {
      onSelectionChange == null || onSelectionChange(null);
      return;
    }
    return emitSelectionHelper(Object.assign({}, args, {
      index: found
    }));
  }
  var dw = contentWidth / Math.max(1, n);
  var x = AXIS_WIDTH + index * dw + dw / 2;
  var labelText = '';
  var dateSel = '';
  if (timeRange === 'day') {
    var it = items[index];
    var _String$split = String(it.date).split('#'),
      _String$split2 = (0, _slicedToArray2.default)(_String$split, 2),
      dstr = _String$split2[0],
      hh = _String$split2[1];
    var d = new Date(`${dstr}T00:00:00.000Z`);
    var h = parseInt(hh || '0', 10);
    var mon = new Intl.DateTimeFormat(locale, {
      month: 'short'
    }).format(d);
    var day = d.getDate();
    var year = d.getFullYear();
    labelText = `${day} ${mon} ${year} • ${String(h).padStart(2, '0')}:00`;
    dateSel = it.date;
  } else {
    var _b = items[index];
    if (timeRange === 'week') {
      var _d3 = new Date(`${_b.date}T00:00:00.000Z`);
      var monthsLongShort = ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'];
      labelText = `${_d3.getDate()} ${monthsLongShort[_d3.getMonth()]} ${_d3.getFullYear()}`;
    } else {
      labelText = _b.label || '';
    }
    dateSel = _b.date;
  }
  onSelectionChange == null || onSelectionChange({
    date: dateSel,
    index: index,
    totalCount: totalCount,
    label: labelText,
    x: x,
    chartWidth: chartWidth,
    bucketCount: n
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,