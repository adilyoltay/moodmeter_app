5c1bf852d002516dbdda2bb18161bcfb
_getJestObj().mock("../../lib/supabase", function () {
  return {
    supabase: mockClient
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _supabase = _interopRequireDefault(require("../../services/supabase"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var callLog = [];
function qb(table) {
  var state = {
    table: table,
    filters: []
  };
  var api = {
    select: jest.fn(function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      callLog.push({
        op: 'select',
        table: table,
        args: args
      });
      return api;
    }),
    upsert: jest.fn(function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      callLog.push({
        op: 'upsert',
        table: table,
        args: args
      });
      return api;
    }),
    insert: jest.fn(function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      callLog.push({
        op: 'insert',
        table: table,
        args: args
      });
      return api;
    }),
    update: jest.fn(function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      callLog.push({
        op: 'update',
        table: table,
        args: args
      });
      return api;
    }),
    delete: jest.fn(function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      callLog.push({
        op: 'delete',
        table: table,
        args: args
      });
      return api;
    }),
    eq: jest.fn(function (field, value) {
      state.filters.push({
        field: field,
        value: value
      });
      return api;
    }),
    maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        data: null,
        error: null
      };
    })),
    single: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        data: {
          ok: true
        },
        error: null
      };
    }))
  };
  return api;
}
var mockAuth = {
  getUser: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return {
      user: {
        id: 'user-1',
        email: 'new@user.test',
        user_metadata: {
          name: 'New User'
        },
        app_metadata: {
          provider: 'email'
        }
      }
    };
  })),
  updateUser: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return {
      data: {},
      error: null
    };
  }))
};
var mockClient = {
  from: jest.fn(function (table) {
    return qb(table);
  }),
  auth: mockAuth
};
beforeEach(function () {
  callLog.length = 0;
  jest.clearAllMocks();
});
describe('Signup + Onboarding Supabase writes', function () {
  test('createGamificationProfile ensures users row upsert when missing', (0, _asyncToGenerator2.default)(function* () {
    var qbUsers = qb('users');
    mockClient.from.mockImplementation(function (table) {
      if (table === 'users') {
        qbUsers.single.mockResolvedValueOnce({
          data: null,
          error: null
        });
        return qbUsers;
      }
      return qb(table);
    });
    var res = yield _supabase.default.createGamificationProfile('user-1');
    var usersUpsert = callLog.find(function (l) {
      return l.op === 'upsert' && l.table === 'users';
    });
    expect(usersUpsert).toBeTruthy();
    var upsertBody = usersUpsert.args[0];
    expect(upsertBody).toMatchObject({
      id: 'user-1',
      email: 'new@user.test',
      provider: 'email'
    });
    var gpUpsert = callLog.find(function (l) {
      return l.op === 'upsert' && l.table === 'gamification_profiles';
    });
    expect(gpUpsert).toBeTruthy();
    expect(res === null || typeof res === 'object').toBe(true);
  }));
  test('upsertUserProfile maps onboarding payload correctly into user_profiles', (0, _asyncToGenerator2.default)(function* () {
    var userId = 'user-2';
    var payload = {
      profile: {
        age: 27,
        gender: 'male',
        locale: 'tr-TR',
        timezone: 'Europe/Istanbul'
      },
      motivation: ['stress_reduction', 'mental_clarity'],
      first_mood: {
        score: 6,
        tags: ['work', 'sleep']
      },
      lifestyle: {
        sleep_hours: 5,
        exercise: 'Regular',
        social: 'High'
      },
      reminders: {
        enabled: true,
        time: '21:30',
        days: ['Mon', 'Wed'],
        timezone: 'Europe/Istanbul'
      },
      feature_flags: {
        a: true,
        b: false
      },
      consent: {
        accepted: true
      }
    };
    mockClient.from.mockImplementation(function (table) {
      return qb(table);
    });
    yield _supabase.default.upsertUserProfile(userId, payload);
    var upsert = callLog.find(function (l) {
      return l.op === 'upsert' && l.table === 'user_profiles';
    });
    expect(upsert).toBeTruthy();
    var body = upsert.args[0];
    expect(body.user_id).toBe(userId);
    expect(body.motivations).toEqual(['stress_reduction', 'mental_clarity']);
    expect(body.first_mood_score).toBe(5);
    expect(body.first_mood_tags).toEqual(['work', 'sleep']);
    expect(body.reminder_enabled).toBe(true);
    expect(body.reminder_time).toBe('21:30');
    expect(body.feature_flags).toEqual({
      a: true,
      b: false
    });
    expect(body.onboarding_version).toBe(2);
    expect(typeof body.onboarding_completed_at).toBe('string');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,