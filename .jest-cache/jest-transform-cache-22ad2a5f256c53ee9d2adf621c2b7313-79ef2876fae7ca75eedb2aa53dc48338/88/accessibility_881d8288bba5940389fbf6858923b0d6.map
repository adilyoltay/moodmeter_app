{"version":3,"names":["_reactNative","require","_componentTree","_findAll","_hostComponentNames","_textContent","_textInput","accessibilityStateKeys","exports","accessibilityValueKeys","isHiddenFromAccessibility","element","_ref","arguments","length","undefined","cache","current","isCurrentSubtreeInaccessible","get","isSubtreeInaccessible","set","parent","isInaccessible","_reactNative$StyleShe","props","accessibilityElementsHidden","importantForAccessibility","flatStyle","StyleSheet","flatten","style","display","hostSiblings","getHostSiblings","some","sibling","computeAriaModal","isAccessibilityElement","isHostImage","alt","accessible","isHostText","isHostTextInput","isHostSwitch","getRole","_element$props$role","explicitRole","role","accessibilityRole","normalizeRole","_element$props$ariaM","accessibilityViewIsModal","computeAriaLabel","_element$props$ariaL","_element$props$ariaL2","labelElementId","accessibilityLabelledBy","rootElement","getUnsafeRootElement","labelElement","findAll","node","isHostElement","nativeID","includeHiddenElements","getTextContent","explicitLabel","accessibilityLabel","computeAriaBusy","_ref2","_ref3","_props$ariaBusy","_props$accessibilityS","accessibilityState","busy","computeAriaChecked","_props$ariaChecked","_props$accessibilityS2","value","rolesSupportingCheckedState","checked","computeAriaDisabled","_ref4","_props$ariaDisabled","_props$accessibilityS3","isEditableTextInput","disabled","computeAriaExpanded","_ref5","_props$ariaExpanded","_props$accessibilityS4","expanded","computeAriaSelected","_ref6","_ref7","_props$ariaSelected","_props$accessibilityS5","selected","computeAriaValue","_element$props","accessibilityValue","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","max","min","now","text","computeAccessibleName","_computeAriaLabel","checkbox","radio","switch"],"sources":["../../src/helpers/accessibility.ts"],"sourcesContent":["import type { AccessibilityRole, AccessibilityState, AccessibilityValue, Role } from 'react-native';\nimport { StyleSheet } from 'react-native';\nimport type { ReactTestInstance } from 'react-test-renderer';\n\nimport { getHostSiblings, getUnsafeRootElement, isHostElement } from './component-tree';\nimport { findAll } from './find-all';\nimport { isHostImage, isHostSwitch, isHostText, isHostTextInput } from './host-component-names';\nimport { getTextContent } from './text-content';\nimport { isEditableTextInput } from './text-input';\n\ntype IsInaccessibleOptions = {\n  cache?: WeakMap<ReactTestInstance, boolean>;\n};\n\nexport const accessibilityStateKeys: (keyof AccessibilityState)[] = [\n  'disabled',\n  'selected',\n  'checked',\n  'busy',\n  'expanded',\n];\n\nexport const accessibilityValueKeys: (keyof AccessibilityValue)[] = ['min', 'max', 'now', 'text'];\n\nexport function isHiddenFromAccessibility(\n  element: ReactTestInstance | null,\n  { cache }: IsInaccessibleOptions = {},\n): boolean {\n  if (element == null) {\n    return true;\n  }\n\n  let current: ReactTestInstance | null = element;\n  while (current) {\n    let isCurrentSubtreeInaccessible = cache?.get(current);\n\n    if (isCurrentSubtreeInaccessible === undefined) {\n      isCurrentSubtreeInaccessible = isSubtreeInaccessible(current);\n      cache?.set(current, isCurrentSubtreeInaccessible);\n    }\n\n    if (isCurrentSubtreeInaccessible) {\n      return true;\n    }\n\n    current = current.parent;\n  }\n\n  return false;\n}\n\n/** RTL-compatibility alias for `isHiddenFromAccessibility` */\nexport const isInaccessible = isHiddenFromAccessibility;\n\nfunction isSubtreeInaccessible(element: ReactTestInstance): boolean {\n  // Null props can happen for React.Fragments\n  if (element.props == null) {\n    return false;\n  }\n\n  // See: https://reactnative.dev/docs/accessibility#aria-hidden\n  if (element.props['aria-hidden']) {\n    return true;\n  }\n\n  // iOS: accessibilityElementsHidden\n  // See: https://reactnative.dev/docs/accessibility#accessibilityelementshidden-ios\n  if (element.props.accessibilityElementsHidden) {\n    return true;\n  }\n\n  // Android: importantForAccessibility\n  // See: https://reactnative.dev/docs/accessibility#importantforaccessibility-android\n  if (element.props.importantForAccessibility === 'no-hide-descendants') {\n    return true;\n  }\n\n  // Note that `opacity: 0` is not treated as inaccessible on iOS\n  const flatStyle = StyleSheet.flatten(element.props.style) ?? {};\n  if (flatStyle.display === 'none') return true;\n\n  // iOS: accessibilityViewIsModal or aria-modal\n  // See: https://reactnative.dev/docs/accessibility#accessibilityviewismodal-ios\n  const hostSiblings = getHostSiblings(element);\n  if (hostSiblings.some((sibling) => computeAriaModal(sibling))) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isAccessibilityElement(element: ReactTestInstance | null): boolean {\n  if (element == null) {\n    return false;\n  }\n\n  // https://github.com/facebook/react-native/blob/8dabed60f456e76a9e53273b601446f34de41fb5/packages/react-native/Libraries/Image/Image.ios.js#L172\n  if (isHostImage(element) && element.props.alt !== undefined) {\n    return true;\n  }\n\n  if (element.props.accessible !== undefined) {\n    return element.props.accessible;\n  }\n\n  return isHostText(element) || isHostTextInput(element) || isHostSwitch(element);\n}\n\n/**\n * Returns the accessibility role for given element. It will return explicit\n * role from either `role` or `accessibilityRole` props if set.\n *\n * If explicit role is not available, it would try to return default element\n * role:\n * - `text` for `Text` elements\n *\n * In all other cases this functions returns `none`.\n *\n * @param element\n * @returns\n */\nexport function getRole(element: ReactTestInstance): Role | AccessibilityRole {\n  const explicitRole = element.props.role ?? element.props.accessibilityRole;\n  if (explicitRole) {\n    return normalizeRole(explicitRole);\n  }\n\n  if (isHostText(element)) {\n    return 'text';\n  }\n\n  // Note: host Image elements report \"image\" role in screen reader only on Android, but not on iOS.\n  // It's better to require explicit role for Image elements.\n\n  return 'none';\n}\n\n/**\n * There are some duplications between (ARIA) `Role` and `AccessibilityRole` types.\n * Resolve them by using ARIA `Role` type where possible.\n *\n * @param role Role to normalize\n * @returns Normalized role\n */\nexport function normalizeRole(role: string): Role | AccessibilityRole {\n  if (role === 'image') {\n    return 'img';\n  }\n\n  return role as Role | AccessibilityRole;\n}\n\nexport function computeAriaModal(element: ReactTestInstance): boolean | undefined {\n  return element.props['aria-modal'] ?? element.props.accessibilityViewIsModal;\n}\n\nexport function computeAriaLabel(element: ReactTestInstance): string | undefined {\n  const labelElementId = element.props['aria-labelledby'] ?? element.props.accessibilityLabelledBy;\n  if (labelElementId) {\n    const rootElement = getUnsafeRootElement(element);\n    const labelElement = findAll(\n      rootElement,\n      (node) => isHostElement(node) && node.props.nativeID === labelElementId,\n      { includeHiddenElements: true },\n    );\n    if (labelElement.length > 0) {\n      return getTextContent(labelElement[0]);\n    }\n  }\n\n  const explicitLabel = element.props['aria-label'] ?? element.props.accessibilityLabel;\n  if (explicitLabel) {\n    return explicitLabel;\n  }\n\n  //https://github.com/facebook/react-native/blob/8dabed60f456e76a9e53273b601446f34de41fb5/packages/react-native/Libraries/Image/Image.ios.js#L173\n  if (isHostImage(element) && element.props.alt) {\n    return element.props.alt;\n  }\n\n  return undefined;\n}\n\n// See: https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State#busy-state\nexport function computeAriaBusy({ props }: ReactTestInstance): boolean {\n  return props['aria-busy'] ?? props.accessibilityState?.busy ?? false;\n}\n\n// See: https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State#checked-state\nexport function computeAriaChecked(element: ReactTestInstance): AccessibilityState['checked'] {\n  const { props } = element;\n\n  if (isHostSwitch(element)) {\n    return props.value;\n  }\n\n  const role = getRole(element);\n  if (!rolesSupportingCheckedState[role]) {\n    return undefined;\n  }\n\n  return props['aria-checked'] ?? props.accessibilityState?.checked;\n}\n\n// See: https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State#disabled-state\nexport function computeAriaDisabled(element: ReactTestInstance): boolean {\n  if (isHostTextInput(element) && !isEditableTextInput(element)) {\n    return true;\n  }\n\n  const { props } = element;\n\n  if (isHostText(element) && props.disabled) {\n    return true;\n  }\n\n  return props['aria-disabled'] ?? props.accessibilityState?.disabled ?? false;\n}\n\n// See: https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State#expanded-state\nexport function computeAriaExpanded({ props }: ReactTestInstance): boolean | undefined {\n  return props['aria-expanded'] ?? props.accessibilityState?.expanded;\n}\n\n// See: https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State#selected-state\nexport function computeAriaSelected({ props }: ReactTestInstance): boolean {\n  return props['aria-selected'] ?? props.accessibilityState?.selected ?? false;\n}\n\nexport function computeAriaValue(element: ReactTestInstance): AccessibilityValue {\n  const {\n    accessibilityValue,\n    'aria-valuemax': ariaValueMax,\n    'aria-valuemin': ariaValueMin,\n    'aria-valuenow': ariaValueNow,\n    'aria-valuetext': ariaValueText,\n  } = element.props;\n\n  return {\n    max: ariaValueMax ?? accessibilityValue?.max,\n    min: ariaValueMin ?? accessibilityValue?.min,\n    now: ariaValueNow ?? accessibilityValue?.now,\n    text: ariaValueText ?? accessibilityValue?.text,\n  };\n}\n\nexport function computeAccessibleName(element: ReactTestInstance): string | undefined {\n  return computeAriaLabel(element) ?? getTextContent(element);\n}\n\ntype RoleSupportMap = Partial<Record<Role | AccessibilityRole, true>>;\n\nexport const rolesSupportingCheckedState: RoleSupportMap = {\n  checkbox: true,\n  radio: true,\n  switch: true,\n};\n"],"mappings":"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","ignoreList":[]}