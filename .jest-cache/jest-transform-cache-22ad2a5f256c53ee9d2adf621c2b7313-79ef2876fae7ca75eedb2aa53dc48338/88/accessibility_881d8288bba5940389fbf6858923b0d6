44cf2db9a17be0a536256b35b1486b3e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accessibilityValueKeys = exports.accessibilityStateKeys = void 0;
exports.computeAccessibleName = computeAccessibleName;
exports.computeAriaBusy = computeAriaBusy;
exports.computeAriaChecked = computeAriaChecked;
exports.computeAriaDisabled = computeAriaDisabled;
exports.computeAriaExpanded = computeAriaExpanded;
exports.computeAriaLabel = computeAriaLabel;
exports.computeAriaModal = computeAriaModal;
exports.computeAriaSelected = computeAriaSelected;
exports.computeAriaValue = computeAriaValue;
exports.getRole = getRole;
exports.isAccessibilityElement = isAccessibilityElement;
exports.isHiddenFromAccessibility = isHiddenFromAccessibility;
exports.isInaccessible = void 0;
exports.normalizeRole = normalizeRole;
exports.rolesSupportingCheckedState = void 0;
var _reactNative = require("react-native");
var _componentTree = require("./component-tree");
var _findAll = require("./find-all");
var _hostComponentNames = require("./host-component-names");
var _textContent = require("./text-content");
var _textInput = require("./text-input");
var accessibilityStateKeys = exports.accessibilityStateKeys = ['disabled', 'selected', 'checked', 'busy', 'expanded'];
var accessibilityValueKeys = exports.accessibilityValueKeys = ['min', 'max', 'now', 'text'];
function isHiddenFromAccessibility(element) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    cache = _ref.cache;
  if (element == null) {
    return true;
  }
  var current = element;
  while (current) {
    var isCurrentSubtreeInaccessible = cache == null ? void 0 : cache.get(current);
    if (isCurrentSubtreeInaccessible === undefined) {
      isCurrentSubtreeInaccessible = isSubtreeInaccessible(current);
      cache == null || cache.set(current, isCurrentSubtreeInaccessible);
    }
    if (isCurrentSubtreeInaccessible) {
      return true;
    }
    current = current.parent;
  }
  return false;
}
var isInaccessible = exports.isInaccessible = isHiddenFromAccessibility;
function isSubtreeInaccessible(element) {
  var _reactNative$StyleShe;
  if (element.props == null) {
    return false;
  }
  if (element.props['aria-hidden']) {
    return true;
  }
  if (element.props.accessibilityElementsHidden) {
    return true;
  }
  if (element.props.importantForAccessibility === 'no-hide-descendants') {
    return true;
  }
  var flatStyle = (_reactNative$StyleShe = _reactNative.StyleSheet.flatten(element.props.style)) != null ? _reactNative$StyleShe : {};
  if (flatStyle.display === 'none') return true;
  var hostSiblings = (0, _componentTree.getHostSiblings)(element);
  if (hostSiblings.some(function (sibling) {
    return computeAriaModal(sibling);
  })) {
    return true;
  }
  return false;
}
function isAccessibilityElement(element) {
  if (element == null) {
    return false;
  }
  if ((0, _hostComponentNames.isHostImage)(element) && element.props.alt !== undefined) {
    return true;
  }
  if (element.props.accessible !== undefined) {
    return element.props.accessible;
  }
  return (0, _hostComponentNames.isHostText)(element) || (0, _hostComponentNames.isHostTextInput)(element) || (0, _hostComponentNames.isHostSwitch)(element);
}
function getRole(element) {
  var _element$props$role;
  var explicitRole = (_element$props$role = element.props.role) != null ? _element$props$role : element.props.accessibilityRole;
  if (explicitRole) {
    return normalizeRole(explicitRole);
  }
  if ((0, _hostComponentNames.isHostText)(element)) {
    return 'text';
  }
  return 'none';
}
function normalizeRole(role) {
  if (role === 'image') {
    return 'img';
  }
  return role;
}
function computeAriaModal(element) {
  var _element$props$ariaM;
  return (_element$props$ariaM = element.props['aria-modal']) != null ? _element$props$ariaM : element.props.accessibilityViewIsModal;
}
function computeAriaLabel(element) {
  var _element$props$ariaL, _element$props$ariaL2;
  var labelElementId = (_element$props$ariaL = element.props['aria-labelledby']) != null ? _element$props$ariaL : element.props.accessibilityLabelledBy;
  if (labelElementId) {
    var rootElement = (0, _componentTree.getUnsafeRootElement)(element);
    var labelElement = (0, _findAll.findAll)(rootElement, function (node) {
      return (0, _componentTree.isHostElement)(node) && node.props.nativeID === labelElementId;
    }, {
      includeHiddenElements: true
    });
    if (labelElement.length > 0) {
      return (0, _textContent.getTextContent)(labelElement[0]);
    }
  }
  var explicitLabel = (_element$props$ariaL2 = element.props['aria-label']) != null ? _element$props$ariaL2 : element.props.accessibilityLabel;
  if (explicitLabel) {
    return explicitLabel;
  }
  if ((0, _hostComponentNames.isHostImage)(element) && element.props.alt) {
    return element.props.alt;
  }
  return undefined;
}
function computeAriaBusy(_ref2) {
  var _ref3, _props$ariaBusy, _props$accessibilityS;
  var props = _ref2.props;
  return (_ref3 = (_props$ariaBusy = props['aria-busy']) != null ? _props$ariaBusy : (_props$accessibilityS = props.accessibilityState) == null ? void 0 : _props$accessibilityS.busy) != null ? _ref3 : false;
}
function computeAriaChecked(element) {
  var _props$ariaChecked, _props$accessibilityS2;
  var props = element.props;
  if ((0, _hostComponentNames.isHostSwitch)(element)) {
    return props.value;
  }
  var role = getRole(element);
  if (!rolesSupportingCheckedState[role]) {
    return undefined;
  }
  return (_props$ariaChecked = props['aria-checked']) != null ? _props$ariaChecked : (_props$accessibilityS2 = props.accessibilityState) == null ? void 0 : _props$accessibilityS2.checked;
}
function computeAriaDisabled(element) {
  var _ref4, _props$ariaDisabled, _props$accessibilityS3;
  if ((0, _hostComponentNames.isHostTextInput)(element) && !(0, _textInput.isEditableTextInput)(element)) {
    return true;
  }
  var props = element.props;
  if ((0, _hostComponentNames.isHostText)(element) && props.disabled) {
    return true;
  }
  return (_ref4 = (_props$ariaDisabled = props['aria-disabled']) != null ? _props$ariaDisabled : (_props$accessibilityS3 = props.accessibilityState) == null ? void 0 : _props$accessibilityS3.disabled) != null ? _ref4 : false;
}
function computeAriaExpanded(_ref5) {
  var _props$ariaExpanded, _props$accessibilityS4;
  var props = _ref5.props;
  return (_props$ariaExpanded = props['aria-expanded']) != null ? _props$ariaExpanded : (_props$accessibilityS4 = props.accessibilityState) == null ? void 0 : _props$accessibilityS4.expanded;
}
function computeAriaSelected(_ref6) {
  var _ref7, _props$ariaSelected, _props$accessibilityS5;
  var props = _ref6.props;
  return (_ref7 = (_props$ariaSelected = props['aria-selected']) != null ? _props$ariaSelected : (_props$accessibilityS5 = props.accessibilityState) == null ? void 0 : _props$accessibilityS5.selected) != null ? _ref7 : false;
}
function computeAriaValue(element) {
  var _element$props = element.props,
    accessibilityValue = _element$props.accessibilityValue,
    ariaValueMax = _element$props['aria-valuemax'],
    ariaValueMin = _element$props['aria-valuemin'],
    ariaValueNow = _element$props['aria-valuenow'],
    ariaValueText = _element$props['aria-valuetext'];
  return {
    max: ariaValueMax != null ? ariaValueMax : accessibilityValue == null ? void 0 : accessibilityValue.max,
    min: ariaValueMin != null ? ariaValueMin : accessibilityValue == null ? void 0 : accessibilityValue.min,
    now: ariaValueNow != null ? ariaValueNow : accessibilityValue == null ? void 0 : accessibilityValue.now,
    text: ariaValueText != null ? ariaValueText : accessibilityValue == null ? void 0 : accessibilityValue.text
  };
}
function computeAccessibleName(element) {
  var _computeAriaLabel;
  return (_computeAriaLabel = computeAriaLabel(element)) != null ? _computeAriaLabel : (0, _textContent.getTextContent)(element);
}
var rolesSupportingCheckedState = exports.rolesSupportingCheckedState = {
  checkbox: true,
  radio: true,
  switch: true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,