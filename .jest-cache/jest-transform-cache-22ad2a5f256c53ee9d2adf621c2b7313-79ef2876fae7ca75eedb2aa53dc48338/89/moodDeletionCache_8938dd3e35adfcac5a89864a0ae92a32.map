{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","MoodDeletionCacheService","exports","_classCallCheck2","default","CACHE_KEY","DEFAULT_TTL","_createClass2","key","value","_markAsDeleted","_asyncToGenerator2","entryId","userId","deleteReason","arguments","length","undefined","console","log","now","Date","record","deletedAt","expiresAt","cache","getCache","AsyncStorage","setItem","JSON","stringify","toLocaleString","error","markAsDeleted","_x","_x2","apply","_isRecentlyDeleted","removeFromCache","isRecentlyDeleted","_x3","_getRecentlyDeletedIds","deletedIds","Object","values","forEach","push","getRecentlyDeletedIds","_x4","_cleanupExpired","cleanedCount","updatedCache","entries","_ref","_ref2","_slicedToArray2","cleanupExpired","_getStats","stats","totalRecords","keys","expiredRecords","userBreakdown","reasonBreakdown","getStats","_clearCache","removeItem","clearCache","_getCache","cached","getItem","parse","_removeFromCache","_x5","getInstance","instance","moodDeletionCache"],"sources":["moodDeletionCache.ts"],"sourcesContent":["/**\n * üóëÔ∏è Mood Deletion Cache Service\n * Tracks recently deleted mood entries to prevent IntelligentMerge from restoring them\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface DeletedEntryRecord {\n  entryId: string;\n  userId: string;\n  deletedAt: number;\n  deleteReason: 'user_initiated' | 'user_initiated_offline' | 'cleanup' | 'sync_conflict';\n  expiresAt: number;\n}\n\nexport class MoodDeletionCacheService {\n  private static instance: MoodDeletionCacheService;\n  private readonly CACHE_KEY = 'mood_deletion_cache';\n  private readonly DEFAULT_TTL = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n  \n  static getInstance(): MoodDeletionCacheService {\n    if (!MoodDeletionCacheService.instance) {\n      MoodDeletionCacheService.instance = new MoodDeletionCacheService();\n    }\n    return MoodDeletionCacheService.instance;\n  }\n\n  /**\n   * üóëÔ∏è Mark an entry as recently deleted\n   */\n  async markAsDeleted(\n    entryId: string, \n    userId: string, \n    deleteReason: DeletedEntryRecord['deleteReason'] = 'user_initiated'\n  ): Promise<void> {\n    try {\n      console.log(`üóëÔ∏è Marking entry as deleted in cache: ${entryId}`);\n      \n      const now = Date.now();\n      const record: DeletedEntryRecord = {\n        entryId,\n        userId,\n        deletedAt: now,\n        deleteReason,\n        expiresAt: now + this.DEFAULT_TTL\n      };\n      \n      // Get existing cache\n      const cache = await this.getCache();\n      \n      // Add new record\n      cache[entryId] = record;\n      \n      // Save updated cache\n      await AsyncStorage.setItem(this.CACHE_KEY, JSON.stringify(cache));\n      \n      console.log(`‚úÖ Entry ${entryId} marked as deleted (expires: ${new Date(record.expiresAt).toLocaleString()})`);\n      \n    } catch (error) {\n      console.error('‚ùå Failed to mark entry as deleted:', error);\n    }\n  }\n\n  /**\n   * üîç Check if an entry was recently deleted\n   */\n  async isRecentlyDeleted(entryId: string): Promise<boolean> {\n    try {\n      const cache = await this.getCache();\n      const record = cache[entryId];\n      \n      if (!record) {\n        return false;\n      }\n      \n      // Check if expired\n      if (Date.now() > record.expiresAt) {\n        console.log(`‚è∞ Deletion record expired for ${entryId}, removing from cache`);\n        await this.removeFromCache(entryId);\n        return false;\n      }\n      \n      console.log(`üóëÔ∏è Entry ${entryId} is recently deleted (deleted at: ${new Date(record.deletedAt).toLocaleString()})`);\n      return true;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to check deletion status:', error);\n      return false;\n    }\n  }\n\n  /**\n   * üìã Get list of recently deleted entry IDs for a user\n   */\n  async getRecentlyDeletedIds(userId: string): Promise<string[]> {\n    try {\n      const cache = await this.getCache();\n      const now = Date.now();\n      const deletedIds: string[] = [];\n      \n      Object.values(cache).forEach(record => {\n        if (record.userId === userId && now <= record.expiresAt) {\n          deletedIds.push(record.entryId);\n        }\n      });\n      \n      return deletedIds;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get recently deleted IDs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * üßπ Clean up expired deletion records\n   */\n  async cleanupExpired(): Promise<number> {\n    try {\n      const cache = await this.getCache();\n      const now = Date.now();\n      let cleanedCount = 0;\n      \n      const updatedCache: Record<string, DeletedEntryRecord> = {};\n      \n      Object.entries(cache).forEach(([entryId, record]) => {\n        if (now <= record.expiresAt) {\n          updatedCache[entryId] = record;\n        } else {\n          cleanedCount++;\n          console.log(`‚è∞ Removing expired deletion record: ${entryId}`);\n        }\n      });\n      \n      if (cleanedCount > 0) {\n        await AsyncStorage.setItem(this.CACHE_KEY, JSON.stringify(updatedCache));\n        console.log(`üßπ Cleaned up ${cleanedCount} expired deletion records`);\n      }\n      \n      return cleanedCount;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to cleanup expired records:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * üìä Get deletion cache stats\n   */\n  async getStats(): Promise<{\n    totalRecords: number;\n    expiredRecords: number;\n    userBreakdown: Record<string, number>;\n    reasonBreakdown: Record<string, number>;\n  }> {\n    try {\n      const cache = await this.getCache();\n      const now = Date.now();\n      \n      const stats = {\n        totalRecords: Object.keys(cache).length,\n        expiredRecords: 0,\n        userBreakdown: {} as Record<string, number>,\n        reasonBreakdown: {} as Record<string, number>\n      };\n      \n      Object.values(cache).forEach(record => {\n        // Count by user\n        stats.userBreakdown[record.userId] = (stats.userBreakdown[record.userId] || 0) + 1;\n        \n        // Count by reason\n        stats.reasonBreakdown[record.deleteReason] = (stats.reasonBreakdown[record.deleteReason] || 0) + 1;\n        \n        // Count expired\n        if (now > record.expiresAt) {\n          stats.expiredRecords++;\n        }\n      });\n      \n      return stats;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get deletion cache stats:', error);\n      return {\n        totalRecords: 0,\n        expiredRecords: 0,\n        userBreakdown: {},\n        reasonBreakdown: {}\n      };\n    }\n  }\n\n  /**\n   * üß™ Clear all deletion records (for testing/debugging)\n   */\n  async clearCache(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(this.CACHE_KEY);\n      console.log('üßπ Deletion cache cleared');\n    } catch (error) {\n      console.error('‚ùå Failed to clear deletion cache:', error);\n    }\n  }\n\n  // =============================================================================\n  // PRIVATE METHODS\n  // =============================================================================\n\n  private async getCache(): Promise<Record<string, DeletedEntryRecord>> {\n    try {\n      const cached = await AsyncStorage.getItem(this.CACHE_KEY);\n      return cached ? JSON.parse(cached) : {};\n    } catch (error) {\n      console.error('‚ùå Failed to get deletion cache:', error);\n      return {};\n    }\n  }\n\n  private async removeFromCache(entryId: string): Promise<void> {\n    try {\n      const cache = await this.getCache();\n      delete cache[entryId];\n      await AsyncStorage.setItem(this.CACHE_KEY, JSON.stringify(cache));\n    } catch (error) {\n      console.error('‚ùå Failed to remove from deletion cache:', error);\n    }\n  }\n}\n\n// Singleton instance\nexport const moodDeletionCache = MoodDeletionCacheService.getInstance();\n"],"mappings":"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","ignoreList":[]}