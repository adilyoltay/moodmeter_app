b10de128b93b84393cf55288e1483fbf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moodDeletionCache = exports.MoodDeletionCacheService = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var MoodDeletionCacheService = exports.MoodDeletionCacheService = function () {
  function MoodDeletionCacheService() {
    (0, _classCallCheck2.default)(this, MoodDeletionCacheService);
    this.CACHE_KEY = 'mood_deletion_cache';
    this.DEFAULT_TTL = 7 * 24 * 60 * 60 * 1000;
  }
  return (0, _createClass2.default)(MoodDeletionCacheService, [{
    key: "markAsDeleted",
    value: (function () {
      var _markAsDeleted = (0, _asyncToGenerator2.default)(function* (entryId, userId) {
        var deleteReason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'user_initiated';
        try {
          console.log(`üóëÔ∏è Marking entry as deleted in cache: ${entryId}`);
          var now = Date.now();
          var record = {
            entryId: entryId,
            userId: userId,
            deletedAt: now,
            deleteReason: deleteReason,
            expiresAt: now + this.DEFAULT_TTL
          };
          var cache = yield this.getCache();
          cache[entryId] = record;
          yield _asyncStorage.default.setItem(this.CACHE_KEY, JSON.stringify(cache));
          console.log(`‚úÖ Entry ${entryId} marked as deleted (expires: ${new Date(record.expiresAt).toLocaleString()})`);
        } catch (error) {
          console.error('‚ùå Failed to mark entry as deleted:', error);
        }
      });
      function markAsDeleted(_x, _x2) {
        return _markAsDeleted.apply(this, arguments);
      }
      return markAsDeleted;
    }())
  }, {
    key: "isRecentlyDeleted",
    value: (function () {
      var _isRecentlyDeleted = (0, _asyncToGenerator2.default)(function* (entryId) {
        try {
          var cache = yield this.getCache();
          var record = cache[entryId];
          if (!record) {
            return false;
          }
          if (Date.now() > record.expiresAt) {
            console.log(`‚è∞ Deletion record expired for ${entryId}, removing from cache`);
            yield this.removeFromCache(entryId);
            return false;
          }
          console.log(`üóëÔ∏è Entry ${entryId} is recently deleted (deleted at: ${new Date(record.deletedAt).toLocaleString()})`);
          return true;
        } catch (error) {
          console.error('‚ùå Failed to check deletion status:', error);
          return false;
        }
      });
      function isRecentlyDeleted(_x3) {
        return _isRecentlyDeleted.apply(this, arguments);
      }
      return isRecentlyDeleted;
    }())
  }, {
    key: "getRecentlyDeletedIds",
    value: (function () {
      var _getRecentlyDeletedIds = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          var cache = yield this.getCache();
          var now = Date.now();
          var deletedIds = [];
          Object.values(cache).forEach(function (record) {
            if (record.userId === userId && now <= record.expiresAt) {
              deletedIds.push(record.entryId);
            }
          });
          return deletedIds;
        } catch (error) {
          console.error('‚ùå Failed to get recently deleted IDs:', error);
          return [];
        }
      });
      function getRecentlyDeletedIds(_x4) {
        return _getRecentlyDeletedIds.apply(this, arguments);
      }
      return getRecentlyDeletedIds;
    }())
  }, {
    key: "cleanupExpired",
    value: (function () {
      var _cleanupExpired = (0, _asyncToGenerator2.default)(function* () {
        try {
          var cache = yield this.getCache();
          var now = Date.now();
          var cleanedCount = 0;
          var updatedCache = {};
          Object.entries(cache).forEach(function (_ref) {
            var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              entryId = _ref2[0],
              record = _ref2[1];
            if (now <= record.expiresAt) {
              updatedCache[entryId] = record;
            } else {
              cleanedCount++;
              console.log(`‚è∞ Removing expired deletion record: ${entryId}`);
            }
          });
          if (cleanedCount > 0) {
            yield _asyncStorage.default.setItem(this.CACHE_KEY, JSON.stringify(updatedCache));
            console.log(`üßπ Cleaned up ${cleanedCount} expired deletion records`);
          }
          return cleanedCount;
        } catch (error) {
          console.error('‚ùå Failed to cleanup expired records:', error);
          return 0;
        }
      });
      function cleanupExpired() {
        return _cleanupExpired.apply(this, arguments);
      }
      return cleanupExpired;
    }())
  }, {
    key: "getStats",
    value: (function () {
      var _getStats = (0, _asyncToGenerator2.default)(function* () {
        try {
          var cache = yield this.getCache();
          var now = Date.now();
          var stats = {
            totalRecords: Object.keys(cache).length,
            expiredRecords: 0,
            userBreakdown: {},
            reasonBreakdown: {}
          };
          Object.values(cache).forEach(function (record) {
            stats.userBreakdown[record.userId] = (stats.userBreakdown[record.userId] || 0) + 1;
            stats.reasonBreakdown[record.deleteReason] = (stats.reasonBreakdown[record.deleteReason] || 0) + 1;
            if (now > record.expiresAt) {
              stats.expiredRecords++;
            }
          });
          return stats;
        } catch (error) {
          console.error('‚ùå Failed to get deletion cache stats:', error);
          return {
            totalRecords: 0,
            expiredRecords: 0,
            userBreakdown: {},
            reasonBreakdown: {}
          };
        }
      });
      function getStats() {
        return _getStats.apply(this, arguments);
      }
      return getStats;
    }())
  }, {
    key: "clearCache",
    value: (function () {
      var _clearCache = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _asyncStorage.default.removeItem(this.CACHE_KEY);
          console.log('üßπ Deletion cache cleared');
        } catch (error) {
          console.error('‚ùå Failed to clear deletion cache:', error);
        }
      });
      function clearCache() {
        return _clearCache.apply(this, arguments);
      }
      return clearCache;
    }())
  }, {
    key: "getCache",
    value: function () {
      var _getCache = (0, _asyncToGenerator2.default)(function* () {
        try {
          var cached = yield _asyncStorage.default.getItem(this.CACHE_KEY);
          return cached ? JSON.parse(cached) : {};
        } catch (error) {
          console.error('‚ùå Failed to get deletion cache:', error);
          return {};
        }
      });
      function getCache() {
        return _getCache.apply(this, arguments);
      }
      return getCache;
    }()
  }, {
    key: "removeFromCache",
    value: function () {
      var _removeFromCache = (0, _asyncToGenerator2.default)(function* (entryId) {
        try {
          var cache = yield this.getCache();
          delete cache[entryId];
          yield _asyncStorage.default.setItem(this.CACHE_KEY, JSON.stringify(cache));
        } catch (error) {
          console.error('‚ùå Failed to remove from deletion cache:', error);
        }
      });
      function removeFromCache(_x5) {
        return _removeFromCache.apply(this, arguments);
      }
      return removeFromCache;
    }()
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!MoodDeletionCacheService.instance) {
        MoodDeletionCacheService.instance = new MoodDeletionCacheService();
      }
      return MoodDeletionCacheService.instance;
    }
  }]);
}();
var moodDeletionCache = exports.moodDeletionCache = MoodDeletionCacheService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,