f44b81753e9835f47560adf3be45102e
_getJestObj().mock("../../services/supabase", function () {
  return {
    __esModule: true,
    default: {
      supabaseClient: {
        from: jest.fn(function () {
          return {
            select: jest.fn(function () {
              return {
                eq: jest.fn(function () {
                  return {
                    maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            upsert: jest.fn((0, _asyncToGenerator2.default)(function* () {
              return {
                data: null,
                error: null
              };
            })),
            delete: jest.fn(function () {
              return {
                eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            }),
            like: jest.fn(function () {
              return {
                delete: jest.fn(function () {
                  return {
                    eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            eq: jest.fn(function () {
              return {
                maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            })
          };
        })
      }
    }
  };
});
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry", function () {
  var actual = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
  return Object.assign({
    __esModule: true
  }, actual, {
    trackAIInteraction: jest.fn((0, _asyncToGenerator2.default)(function* () {}))
  });
});
_getJestObj().mock("../../hooks/useCacheInvalidation", function () {
  return {
    __esModule: true,
    emitAIInvalidation: function emitAIInvalidation() {
      return mockEmitAIInvalidation.apply(void 0, arguments);
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var unifiedPipeline;
var actualTelemetry = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
var AIEventType = actualTelemetry.AIEventType;
var mockEmitAIInvalidation = jest.fn();
describe('System Today - Unified Pipeline', function () {
  var userId = _seedData.TEST_ENV.SEED_USER_ID;
  var trackAIInteraction;
  beforeAll(function () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.TEST_SEED_USER_ID = userId;
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    jest.resetModules();
    unifiedPipeline = require("../../features/ai/core/UnifiedAIPipeline").unifiedPipeline;
    trackAIInteraction = require("../../features/ai/telemetry/aiTelemetry").trackAIInteraction;
  });
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield _asyncStorage.default.clear();
  }));
  it('[QRsys:today:fresh] processes fresh and writes unified:* cache', (0, _asyncToGenerator2.default)(function* () {
    var moodsRaw = (0, _seedData.generateMoodData)(_seedData.MOOD_SCENARIOS.high);
    var moods = moodsRaw.map(function (m) {
      return Object.assign({}, m, {
        timestamp: m.created_at,
        mood_score: m.mood_level
      });
    });
    var result = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    expect(result.metadata.source).toBe('fresh');
    var calls = trackAIInteraction.mock.calls.map(function (args) {
      return args[0];
    });
    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_STARTED);
    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_COMPLETED);
  }));
  it('[QRsys:today:cache] returns cache on subsequent run', (0, _asyncToGenerator2.default)(function* () {
    var moodsRaw = (0, _seedData.generateMoodData)(_seedData.MOOD_SCENARIOS.medium);
    var moods = moodsRaw.map(function (m) {
      return Object.assign({}, m, {
        timestamp: m.created_at,
        mood_score: m.mood_level
      });
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var second = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    expect(second.metadata.source).toBe('cache');
    var calls = trackAIInteraction.mock.calls.map(function (args) {
      return args[0];
    });
    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_CACHE_HIT);
  }));
  it('[QRsys:today:invalidate] emits invalidation and reruns pipeline', (0, _asyncToGenerator2.default)(function* () {
    var moodsRaw = (0, _seedData.generateMoodData)(_seedData.MOOD_SCENARIOS.low);
    var moods = moodsRaw.map(function (m) {
      return Object.assign({}, m, {
        timestamp: m.created_at,
        mood_score: m.mood_level
      });
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    yield unifiedPipeline.triggerInvalidation('mood_added', userId);
    var eventTypes = trackAIInteraction.mock.calls.map(function (args) {
      return args[0];
    });
    expect(eventTypes).toContain(AIEventType.CACHE_INVALIDATION);
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var afterInvalidate = trackAIInteraction.mock.calls.filter(function (c) {
      return [AIEventType.UNIFIED_PIPELINE_STARTED, AIEventType.UNIFIED_PIPELINE_COMPLETED].includes(c[0]);
    }).length;
    expect(afterInvalidate).toBeGreaterThanOrEqual(2);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,