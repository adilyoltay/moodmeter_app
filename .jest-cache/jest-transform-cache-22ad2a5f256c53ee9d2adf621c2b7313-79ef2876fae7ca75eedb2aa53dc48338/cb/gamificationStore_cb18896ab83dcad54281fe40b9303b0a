54fadbfac3b7fb05614df42f8051a8df
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGamificationStore = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _zustand = require("zustand");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _storage = require("../utils/storage");
var _supabase = _interopRequireDefault(require("../services/supabase"));
var _featureFlags = require("../constants/featureFlags");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ACHIEVEMENTS = [{
  id: 'first_session',
  title: 'İlk Adım',
  description: 'İlk terapi egzersizini tamamla. En zor olan ilk adımı attın. Bu cesaretin bir sembolüdür.',
  category: 'Resistance',
  icon: 'trophy',
  rarity: 'Common',
  criteria: {
    type: 'milestone',
    target: 1
  },
  healingPoints: 20
}, {
  id: 'anxiety_reducer',
  title: 'Kaygı Azaltıcısı',
  description: 'Kompulsiyonla başa çıkarken kaygını %50\'den fazla azalt. Kaygının doğal olarak azaldığını gözlemledin. Bu, OKB yönetiminin temelidir.',
  category: 'Resistance',
  icon: 'shield-check',
  rarity: 'Rare',
  criteria: {
    type: 'percentage',
    target: 50
  },
  healingPoints: 50
}, {
  id: 'therapy_warrior',
  title: 'Terapi Savaşçısı',
  description: '10 terapi egzersizi tamamla. Zorluklarla yüzleşme konusunda ustalaşıyorsun.',
  category: 'Resistance',
  icon: 'sword-cross',
  rarity: 'Epic',
  criteria: {
    type: 'count',
    target: 10
  },
  healingPoints: 100
}, {
  id: 'resistance_wall',
  title: 'Direnç Duvarı',
  description: 'Bir günde 5 kompulsiyona karşı diren. Kompulsiyonlara "hayır" deme gücünü gösterdin. Kontrol sende.',
  category: 'Resistance',
  icon: 'hand-front-right',
  rarity: 'Rare',
  criteria: {
    type: 'count',
    target: 5
  },
  healingPoints: 40
}, {
  id: 'high_resistance_master',
  title: 'Yüksek Direnç Ustası',
  description: '20 kez 8/10 üzeri direnç göster. İrade gücün güçleniyor.',
  category: 'Resistance',
  icon: 'arm-flex',
  rarity: 'Epic',
  criteria: {
    type: 'count',
    target: 20
  },
  healingPoints: 80
}, {
  id: 'mindful_tracker',
  title: 'Farkındalık Takipçisi',
  description: '7 gün üst üste kompulsiyon kaydı tut. Kendini gözlemleme becerisini geliştiriyorsun.',
  category: 'Mindfulness',
  icon: 'brain',
  rarity: 'Common',
  criteria: {
    type: 'streak',
    target: 7
  },
  healingPoints: 30
}, {
  id: 'pattern_recognizer',
  title: 'Örüntü Tanıyıcı',
  description: '50 kompulsiyon kaydı oluştur. Tetikleyicilerini ve örüntülerini tanımaya başladın.',
  category: 'Mindfulness',
  icon: 'eye-check',
  rarity: 'Rare',
  criteria: {
    type: 'count',
    target: 50
  },
  healingPoints: 60
}];
var MICRO_REWARDS = {
  voice_mood_checkin: {
    points: 1,
    message: '+1 ✨ Mood Check‑in',
    trigger: 'voice_mood_checkin'
  },
  mood_manual_checkin: {
    points: 1,
    message: '+1 ✍️ Mood (manuel) kaydı',
    trigger: 'mood_manual_checkin'
  },
  breathwork_completed: {
    points: 2,
    message: '+2 🌬️ Breathwork tamamlandı',
    trigger: 'breathwork_completed'
  },
  first_activity_of_day: {
    points: 3,
    message: '+3 ☀️ Günün ilk aktivitesi',
    trigger: 'first_activity_of_day'
  },
  streak_milestone_7: {
    points: 10,
    message: '+10 🔥 7 Günlük Streak!',
    trigger: 'streak_milestone_7'
  },
  streak_milestone_21: {
    points: 25,
    message: '+25 🔥 21 Günlük Streak!',
    trigger: 'streak_milestone_21'
  },
  multi_module_day_2: {
    points: 3,
    message: '+3 🧩 2 modülde aktif oldun',
    trigger: 'multi_module_day_2'
  },
  multi_module_day_3: {
    points: 5,
    message: '+5 🧩 3 modülde aktif oldun',
    trigger: 'multi_module_day_3'
  },
  weekly_consistency_5: {
    points: 7,
    message: '+7 📆 Haftada 5 gün aktif!',
    trigger: 'weekly_consistency_5'
  }
};
var useGamificationStore = exports.useGamificationStore = (0, _zustand.create)(function (set, get) {
  return {
    profile: {
      streakCurrent: 0,
      streakBest: 0,
      unlockedAchievements: [],
      healingPointsToday: 0,
      healingPointsTotal: 0,
      streakLevel: 'seedling',
      lastActivityDate: new Date().toISOString().split('T')[0],
      lastFirstActivityAwardDate: undefined,
      streakMilestonesAwarded: [],
      modulesActiveDate: undefined,
      modulesActiveToday: [],
      multiModuleDayAwarded: 0,
      weekKey: undefined,
      activeDaysThisWeek: 0,
      weeklyConsistencyAwarded: false
    },
    achievements: ACHIEVEMENTS,
    lastMicroReward: undefined,
    lastPointsCalculation: undefined,
    currentMissions: [],
    isLoading: true,
    currentUserId: undefined,
    setUserId: function setUserId(userId) {
      set({
        currentUserId: userId
      });
    },
    initializeGamification: function () {
      var _initializeGamification = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          var uid = userId || get().currentUserId;
          if (!uid) {
            console.warn('No userId provided for gamification initialization');
            set({
              isLoading: false
            });
            return;
          }
          var storageKey = _storage.StorageKeys.GAMIFICATION(uid);
          var stored = yield _asyncStorage.default.getItem(storageKey);
          if (stored) {
            var profile = JSON.parse(stored);
            var today = new Date().toISOString().split('T')[0];
            var lastKey = String(profile.lastActivityDate || today);
            var daysDiff = function () {
              try {
                var _lastKey$split$map = lastKey.split('-').map(function (n) {
                    return parseInt(n, 10);
                  }),
                  _lastKey$split$map2 = (0, _slicedToArray2.default)(_lastKey$split$map, 3),
                  y1 = _lastKey$split$map2[0],
                  m1 = _lastKey$split$map2[1],
                  d1 = _lastKey$split$map2[2];
                var now = new Date();
                var y2 = now.getUTCFullYear();
                var m2 = now.getUTCMonth() + 1;
                var d2 = now.getUTCDate();
                var t1 = Date.UTC(y1, m1 - 1, d1);
                var t2 = Date.UTC(y2, m2 - 1, d2);
                return Math.floor((t2 - t1) / 86400000);
              } catch (_unused) {
                return 0;
              }
            }();
            if (daysDiff > 1) {
              profile.streakCurrent = 0;
            }
            if (profile.lastActivityDate !== today) {
              profile.healingPointsToday = 0;
              profile.modulesActiveDate = today;
              profile.modulesActiveToday = [];
              profile.multiModuleDayAwarded = 0;
              profile.lastFirstActivityAwardDate = undefined;
            }
            set({
              profile: profile,
              isLoading: false,
              currentUserId: uid
            });
          } else {
            set({
              isLoading: false,
              currentUserId: uid
            });
          }
        } catch (error) {
          console.error('Failed to load gamification profile:', error);
          set({
            isLoading: false
          });
        }
      });
      function initializeGamification(_x) {
        return _initializeGamification.apply(this, arguments);
      }
      return initializeGamification;
    }(),
    updateStreak: function () {
      var _updateStreak = (0, _asyncToGenerator2.default)(function* () {
        var _get = get(),
          profile = _get.profile;
        var today = new Date().toISOString().split('T')[0];
        if (profile.lastActivityDate === today) {
          if (profile.streakCurrent === 0) {
            var _updatedProfile = Object.assign({}, profile, {
              streakCurrent: 1,
              streakBest: Math.max(1, profile.streakBest),
              streakLevel: 'seedling',
              lastActivityDate: today
            });
            set({
              profile: _updatedProfile
            });
            yield get().saveProfile();
          }
          return;
        }
        var lastKey = String(profile.lastActivityDate || today);
        var daysDiff = function () {
          try {
            var _lastKey$split$map3 = lastKey.split('-').map(function (n) {
                return parseInt(n, 10);
              }),
              _lastKey$split$map4 = (0, _slicedToArray2.default)(_lastKey$split$map3, 3),
              y1 = _lastKey$split$map4[0],
              m1 = _lastKey$split$map4[1],
              d1 = _lastKey$split$map4[2];
            var now = new Date();
            var y2 = now.getUTCFullYear();
            var m2 = now.getUTCMonth() + 1;
            var d2 = now.getUTCDate();
            var t1 = Date.UTC(y1, m1 - 1, d1);
            var t2 = Date.UTC(y2, m2 - 1, d2);
            return Math.floor((t2 - t1) / 86400000);
          } catch (_unused2) {
            return 0;
          }
        }();
        var newStreak = profile.streakCurrent;
        if (daysDiff === 1) {
          newStreak = profile.streakCurrent + 1;
        } else if (daysDiff > 1) {
          newStreak = 1;
        }
        var streakLevel = 'seedling';
        if (newStreak >= 21) {
          streakLevel = 'master';
        } else if (newStreak >= 7) {
          streakLevel = 'warrior';
        }
        var updatedProfile = Object.assign({}, profile, {
          streakCurrent: newStreak,
          streakBest: Math.max(newStreak, profile.streakBest),
          streakLevel: streakLevel,
          lastActivityDate: today,
          healingPointsToday: 0
        });
        set({
          profile: updatedProfile
        });
        yield get().saveProfile();
        try {
          var _get2 = get(),
            awardMicroReward = _get2.awardMicroReward;
          if (newStreak === 7) {
            yield awardMicroReward('streak_milestone_7');
          } else if (newStreak === 21) {
            yield awardMicroReward('streak_milestone_21');
          }
        } catch (e) {
          console.warn('⚠️ Streak milestone reward failed:', e);
        }
      });
      function updateStreak() {
        return _updateStreak.apply(this, arguments);
      }
      return updateStreak;
    }(),
    checkAchievements: function () {
      var _checkAchievements = (0, _asyncToGenerator2.default)(function* (type, data) {
        var _get3 = get(),
          profile = _get3.profile,
          achievements = _get3.achievements;
        var newlyUnlocked = [];
        for (var achievement of achievements) {
          if (profile.unlockedAchievements.includes(achievement.id)) {
            continue;
          }
          var shouldUnlock = false;
          switch (achievement.id) {
            case 'mindful_tracker':
              if (profile.streakCurrent >= 7) {
                shouldUnlock = true;
              }
              break;
          }
          if (shouldUnlock) {
            achievement.unlockedAt = new Date();
            newlyUnlocked.push(achievement);
            profile.unlockedAchievements.push(achievement.id);
            profile.healingPointsTotal += achievement.healingPoints;
            yield Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
          }
        }
        if (newlyUnlocked.length > 0) {
          set({
            profile: profile
          });
          yield get().saveProfile();
        }
        return newlyUnlocked;
      });
      function checkAchievements(_x2, _x3) {
        return _checkAchievements.apply(this, arguments);
      }
      return checkAchievements;
    }(),
    awardMicroReward: function () {
      var _awardMicroReward = (0, _asyncToGenerator2.default)(function* (trigger, context) {
        var _profile$modulesActiv;
        var today = new Date().toISOString().split('T')[0];
        var state = get();
        var profile = state.profile;
        var reward = MICRO_REWARDS[trigger];
        if (!reward) {
          console.warn(`⚠️ Micro reward not found for trigger: ${trigger}`);
          return;
        }
        if (profile.modulesActiveDate !== today) {
          profile = Object.assign({}, profile, {
            modulesActiveDate: today,
            modulesActiveToday: [],
            multiModuleDayAwarded: 0
          });
        }
        if (trigger !== 'first_activity_of_day' && profile.lastFirstActivityAwardDate !== today) {
          yield state.awardMicroReward('first_activity_of_day');
          profile = get().profile;
        }
        var trackModule = function trackModule(mod) {
          var setMods = new Set(profile.modulesActiveToday || []);
          setMods.add(mod);
          profile = Object.assign({}, profile, {
            modulesActiveToday: Array.from(setMods),
            modulesActiveDate: today
          });
          set({
            profile: profile
          });
        };
        if (trigger === 'voice_mood_checkin' || trigger === 'mood_manual_checkin') {
          trackModule('mood');
        } else if (trigger === 'breathwork_completed') {
          trackModule('breathwork');
        }
        if (trigger === 'breathwork_completed') {
          try {
            var _get4 = get(),
              updateStreak = _get4.updateStreak;
            yield updateStreak();
          } catch (_unused3) {}
        }
        var modsCount = ((_profile$modulesActiv = profile.modulesActiveToday) == null ? void 0 : _profile$modulesActiv.length) || 0;
        if (trigger !== 'multi_module_day_2' && trigger !== 'multi_module_day_3') {
          if (modsCount >= 2 && (profile.multiModuleDayAwarded || 0) < 2) {
            yield state.awardMicroReward('multi_module_day_2');
            profile = Object.assign({}, get().profile, {
              multiModuleDayAwarded: 2
            });
            set({
              profile: profile
            });
          }
          if (modsCount >= 3 && (profile.multiModuleDayAwarded || 0) < 3) {
            yield state.awardMicroReward('multi_module_day_3');
            profile = Object.assign({}, get().profile, {
              multiModuleDayAwarded: 3
            });
            set({
              profile: profile
            });
          }
        }
        if (trigger === 'first_activity_of_day') {
          if (profile.lastFirstActivityAwardDate === today) return;
          var getISOWeek = function getISOWeek(d) {
            var date = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
            date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7));
            var yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
            var weekNo = Math.ceil(((date - yearStart) / 86400000 + 1) / 7);
            return `${date.getUTCFullYear()}-W${String(weekNo).padStart(2, '0')}`;
          };
          var now = new Date();
          var currentWeekKey = getISOWeek(now);
          var activeDaysThisWeek = profile.activeDaysThisWeek || 0;
          var weekKey = profile.weekKey;
          var weeklyConsistencyAwarded = !!profile.weeklyConsistencyAwarded;
          if (weekKey !== currentWeekKey) {
            weekKey = currentWeekKey;
            activeDaysThisWeek = 0;
            weeklyConsistencyAwarded = false;
          }
          activeDaysThisWeek += 1;
          profile = Object.assign({}, profile, {
            lastFirstActivityAwardDate: today,
            weekKey: weekKey,
            activeDaysThisWeek: activeDaysThisWeek,
            weeklyConsistencyAwarded: weeklyConsistencyAwarded
          });
          set({
            profile: profile
          });
          if (activeDaysThisWeek >= 5 && !weeklyConsistencyAwarded) {
            yield state.awardMicroReward('weekly_consistency_5');
            set({
              profile: Object.assign({}, get().profile, {
                weeklyConsistencyAwarded: true
              })
            });
          }
        }
        if (trigger === 'streak_milestone_7' || trigger === 'streak_milestone_21') {
          var milestone = trigger === 'streak_milestone_7' ? 7 : 21;
          var awarded = new Set(profile.streakMilestonesAwarded || []);
          if (awarded.has(milestone)) return;
          awarded.add(milestone);
          profile = Object.assign({}, profile, {
            streakMilestonesAwarded: Array.from(awarded)
          });
          set({
            profile: profile
          });
        }
        var isWeekend = [0, 6].includes(new Date().getDay());
        var streakMult = 1 + Math.min(5, Math.floor((profile.streakCurrent || 0) / 7)) * 0.1;
        var difficultyMult = 1;
        var durationBonus = 0;
        if (trigger === 'breathwork_completed') {
          var dur = Number((context == null ? void 0 : context.durationMs) || 0);
          var minutes = Math.max(0, Math.round(dur / 60000));
          durationBonus = Math.min(3, Math.floor(minutes / 5));
          var diff = ((context == null ? void 0 : context.difficulty) || '').toLowerCase();
          if (diff === 'medium') difficultyMult = 1.2;else if (diff === 'hard') difficultyMult = 1.5;else difficultyMult = 1.0;
        }
        var computed = Math.round(reward.points * difficultyMult * streakMult) + durationBonus;
        if (isWeekend) computed *= 2;
        var updatedProfile = Object.assign({}, profile, {
          healingPointsToday: (profile.healingPointsToday || 0) + computed,
          healingPointsTotal: (profile.healingPointsTotal || 0) + computed
        });
        set({
          profile: updatedProfile,
          lastMicroReward: Object.assign({}, reward, {
            points: computed,
            message: function () {
              var details = [];
              if (trigger === 'breathwork_completed') {
                if (context != null && context.durationMs) details.push(`${Math.round(context.durationMs / 60000)}dk`);
                if (difficultyMult > 1) details.push(`zorluk x${difficultyMult}`);
              }
              if (streakMult > 1) details.push(`streak x${streakMult.toFixed(1)}`);
              var baseMsg = reward.message + (details.length ? ` (${details.join(', ')})` : '');
              return isWeekend ? `${baseMsg} x2` : baseMsg;
            }()
          })
        });
        yield state.saveProfile();
        yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      });
      function awardMicroReward(_x4, _x5) {
        return _awardMicroReward.apply(this, arguments);
      }
      return awardMicroReward;
    }(),
    getStreakInfo: function getStreakInfo() {
      var _get5 = get(),
        profile = _get5.profile;
      var levelInfo = {
        seedling: {
          name: 'Fidan 🌱',
          description: 'İlk adımların çok değerli.',
          nextLevel: 7,
          icon: 'sprout'
        },
        warrior: {
          name: 'Savaşçı ⚔️',
          description: 'Kararlılığınla beynine yeni yollar öğretiyorsun.',
          nextLevel: 21,
          icon: 'sword-cross'
        },
        master: {
          name: 'Usta 🧘',
          description: 'Bu artık bir alışkanlık. Zorluklarla başa çıkma becerinde ustalaşıyorsun.',
          nextLevel: undefined,
          icon: 'meditation'
        }
      };
      var currentLevel = levelInfo[profile.streakLevel];
      return {
        current: profile.streakCurrent,
        best: profile.streakBest,
        level: profile.streakLevel,
        levelName: currentLevel.name,
        levelDescription: currentLevel.description,
        nextLevelAt: currentLevel.nextLevel,
        icon: currentLevel.icon
      };
    },
    saveProfile: function () {
      var _saveProfile = (0, _asyncToGenerator2.default)(function* () {
        var _get6 = get(),
          profile = _get6.profile,
          currentUserId = _get6.currentUserId;
        if (!currentUserId) {
          console.warn('No userId to save gamification profile.');
          return;
        }
        try {
          var storageKey = _storage.StorageKeys.GAMIFICATION(currentUserId);
          yield _asyncStorage.default.setItem(storageKey, JSON.stringify(profile));
          try {
            yield _supabase.default.updateGamificationProfile(currentUserId, {
              healing_points_total: profile.healingPointsTotal || 0,
              healing_points_today: profile.healingPointsToday || 0,
              streak_count: profile.streakCurrent || 0,
              streak_last_update: new Date(profile.lastActivityDate || new Date()).toISOString().split('T')[0],
              level: profile.streakLevel === 'seedling' ? 1 : profile.streakLevel === 'warrior' ? 2 : 3,
              achievements: profile.unlockedAchievements || [],
              micro_rewards: []
            });
            console.log('✅ Gamification profile saved to database');
          } catch (dbError) {
            console.error('❌ Database save failed (offline mode):', dbError);
          }
        } catch (error) {
          console.error('Failed to save gamification profile:', error);
        }
      });
      function saveProfile() {
        return _saveProfile.apply(this, arguments);
      }
      return saveProfile;
    }(),
    awardUnifiedPoints: function () {
      var _awardUnifiedPoints = (0, _asyncToGenerator2.default)(function* (action) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var moduleData = arguments.length > 2 ? arguments[2] : undefined;
        var _get7 = get(),
          currentUserId = _get7.currentUserId;
        if (!currentUserId) {
          console.warn('No userId to award unified points.');
          return {
            basePoints: 0,
            contextMultipliers: {},
            totalPoints: 0,
            reasoning: ['No user ID']
          };
        }
        if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_DYNAMIC_GAMIFICATION')) {
          var staticReward = MICRO_REWARDS[action];
          if (staticReward) {
            yield get().awardMicroReward(action);
            return {
              basePoints: staticReward.points,
              contextMultipliers: {
                difficultyBonus: 1,
                streakMultiplier: 1,
                progressBonus: 1,
                timingBonus: 1,
                consistencyBonus: 1,
                achievementMultiplier: 1,
                honestyBonus: 1,
                improvementBonus: 1,
                detailBonus: 1
              },
              totalPoints: staticReward.points,
              reasoning: [`Static reward: ${staticReward.points} points`],
              breakdown: [{
                reason: `Static ${action}`,
                points: staticReward.points
              }]
            };
          }
          return {
            basePoints: 0,
            contextMultipliers: {
              difficultyBonus: 1,
              streakMultiplier: 1,
              progressBonus: 1,
              timingBonus: 1,
              consistencyBonus: 1,
              achievementMultiplier: 1,
              honestyBonus: 1,
              improvementBonus: 1,
              detailBonus: 1
            },
            totalPoints: 0,
            reasoning: ['Feature disabled'],
            breakdown: []
          };
        }
        try {
          var pointsCalculation = {
            basePoints: 0,
            totalPoints: 0
          };
          set({
            lastPointsCalculation: pointsCalculation
          });
          var _get8 = get(),
            profile = _get8.profile;
          set({
            profile: Object.assign({}, profile, {
              healingPointsToday: profile.healingPointsToday + pointsCalculation.totalPoints,
              healingPointsTotal: profile.healingPointsTotal + pointsCalculation.totalPoints
            })
          });
          if (pointsCalculation.totalPoints >= 50) {
            yield Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
          } else {
            yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
          }
          return pointsCalculation;
        } catch (error) {
          console.error('Unified points award failed:', error);
          return {
            basePoints: 0,
            contextMultipliers: {
              difficultyBonus: 1,
              streakMultiplier: 1,
              progressBonus: 1,
              timingBonus: 1,
              consistencyBonus: 1,
              achievementMultiplier: 1,
              honestyBonus: 1,
              improvementBonus: 1,
              detailBonus: 1
            },
            totalPoints: 0,
            reasoning: ['Error occurred'],
            breakdown: []
          };
        }
      });
      function awardUnifiedPoints(_x6) {
        return _awardUnifiedPoints.apply(this, arguments);
      }
      return awardUnifiedPoints;
    }(),
    generateUnifiedMissions: function () {
      var _generateUnifiedMissions = (0, _asyncToGenerator2.default)(function* () {
        var _get9 = get(),
          currentUserId = _get9.currentUserId;
        if (!currentUserId) {
          console.warn('No userId to generate unified missions.');
          return [];
        }
        if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_DYNAMIC_MISSIONS')) {
          return [];
        }
        try {
          var missions = [];
          set({
            currentMissions: missions
          });
          return missions;
        } catch (error) {
          console.error('Unified mission generation failed:', error);
          return [];
        }
      });
      function generateUnifiedMissions() {
        return _generateUnifiedMissions.apply(this, arguments);
      }
      return generateUnifiedMissions;
    }(),
    updateMissionProgress: function () {
      var _updateMissionProgress = (0, _asyncToGenerator2.default)(function* () {
        console.warn('updateMissionProgress is disabled');
        return false;
      });
      function updateMissionProgress() {
        return _updateMissionProgress.apply(this, arguments);
      }
      return updateMissionProgress;
    }(),
    getMissionsForToday: function getMissionsForToday() {
      return [];
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,