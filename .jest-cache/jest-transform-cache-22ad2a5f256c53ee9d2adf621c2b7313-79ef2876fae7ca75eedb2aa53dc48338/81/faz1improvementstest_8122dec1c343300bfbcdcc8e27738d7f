51c27d8ab8d947fdd0a805a9e3151ac2
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    addEventListener: jest.fn(function () {
      return jest.fn();
    }),
    fetch: jest.fn(function () {
      return Promise.resolve({
        isConnected: true
      });
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require9 = require("@jest/globals"),
    jest = _require9.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = {
  setItem: jest.fn(),
  getItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
  getAllKeys: jest.fn(),
  multiGet: jest.fn(),
  multiSet: jest.fn(),
  multiRemove: jest.fn()
};
var originalConsoleLog = console.log;
var originalConsoleWarn = console.warn;
var originalConsoleError = console.error;
beforeAll(function () {
  console.log = jest.fn();
  console.warn = jest.fn();
  console.error = jest.fn();
});
afterAll(function () {
  console.log = originalConsoleLog;
  console.warn = originalConsoleWarn;
  console.error = originalConsoleError;
});
describe('FAZ 1: OfflineSyncService Entity Support', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.resetModules();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
  });
  test('should support voice_checkin entity type in type definition', function () {
    var _require = require("../services/offlineSync"),
      OfflineSyncService = _require.OfflineSyncService;
    var testItem = {
      type: 'CREATE',
      entity: 'voice_checkin',
      data: {
        user_id: 'test-user',
        text: 'Test voice text',
        mood: 75
      }
    };
    var service = OfflineSyncService.getInstance();
    expect(service).toBeDefined();
    expect((0, _asyncToGenerator2.default)(function* () {
      yield service.addToSyncQueue(testItem);
    })).not.toThrow();
  });
  test('should support thought_record entity type in type definition', function () {
    var _require2 = require("../services/offlineSync"),
      OfflineSyncService = _require2.OfflineSyncService;
    var testItem = {
      type: 'CREATE',
      entity: 'thought_record',
      data: {
        user_id: 'test-user',
        thought: 'Test thought',
        distortions: ['catastrophizing']
      }
    };
    var service = OfflineSyncService.getInstance();
    expect(service).toBeDefined();
    expect((0, _asyncToGenerator2.default)(function* () {
      yield service.addToSyncQueue(testItem);
    })).not.toThrow();
  });
  test('should add voice_checkin to sync queue', (0, _asyncToGenerator2.default)(function* () {
    var _require3 = require("../services/offlineSync"),
      OfflineSyncService = _require3.OfflineSyncService;
    var service = OfflineSyncService.getInstance();
    var voiceCheckinData = {
      user_id: 'test-user-123',
      text: 'I am feeling anxious today',
      mood: 40,
      trigger: 'anxiety',
      confidence: 0.85,
      lang: 'en'
    };
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'voice_checkin',
      data: voiceCheckinData
    });
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
    var calls = mockAsyncStorage.setItem.mock.calls;
    var queueCall = calls.find(function (call) {
      return call[0].includes('syncQueue');
    });
    expect(queueCall).toBeDefined();
    if (queueCall) {
      var savedData = JSON.parse(queueCall[1]);
      expect(savedData.length).toBeGreaterThanOrEqual(1);
      var voiceCheckin = savedData.find(function (item) {
        return item.entity === 'voice_checkin';
      });
      expect(voiceCheckin).toBeDefined();
      expect(voiceCheckin.entity).toBe('voice_checkin');
      expect(voiceCheckin.data).toMatchObject(voiceCheckinData);
    }
  }));
  test('should add thought_record to sync queue', (0, _asyncToGenerator2.default)(function* () {
    var _require4 = require("../services/offlineSync"),
      OfflineSyncService = _require4.OfflineSyncService;
    var service = OfflineSyncService.getInstance();
    var thoughtRecordData = {
      user_id: 'test-user-456',
      thought: 'I will fail the presentation',
      distortions: ['catastrophizing', 'fortune_telling'],
      evidence_for: 'I stuttered last time',
      evidence_against: 'I have prepared well',
      reframe: 'I will do my best'
    };
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'thought_record',
      data: thoughtRecordData
    });
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
    var calls = mockAsyncStorage.setItem.mock.calls;
    var queueCall = calls.find(function (call) {
      return call[0].includes('syncQueue');
    });
    expect(queueCall).toBeDefined();
    if (queueCall) {
      var savedData = JSON.parse(queueCall[1]);
      expect(savedData.length).toBeGreaterThanOrEqual(1);
      var thoughtRecord = savedData.find(function (item) {
        return item.entity === 'thought_record';
      });
      expect(thoughtRecord).toBeDefined();
      expect(thoughtRecord.entity).toBe('thought_record');
      expect(thoughtRecord.data).toMatchObject(thoughtRecordData);
    }
  }));
});
describe('FAZ 1: Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
  });
  test('should handle CBT record with both formats', (0, _asyncToGenerator2.default)(function* () {
    var _require5 = require("../services/offlineSync"),
      OfflineSyncService = _require5.OfflineSyncService;
    var service = OfflineSyncService.getInstance();
    var cbtData = {
      user_id: 'test-user',
      thought: 'Negative thought',
      distortions: ['all_or_nothing'],
      evidence_for: 'Some evidence',
      evidence_against: 'Counter evidence',
      reframe: 'Balanced view',
      mood_before: 3,
      mood_after: 7
    };
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'thought_record',
      data: cbtData
    });
    var thoughtData = {
      user_id: 'test-user',
      automatic_thought: 'Automatic negative thought',
      emotions: ['anxiety', 'fear'],
      balanced_thought: 'More balanced perspective'
    };
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'thought_record',
      data: thoughtData
    });
    expect(mockAsyncStorage.setItem).toHaveBeenCalledTimes(2);
  }));
  test('should handle multiple items in queue', (0, _asyncToGenerator2.default)(function* () {
    var _require6 = require("../services/offlineSync"),
      OfflineSyncService = _require6.OfflineSyncService;
    var service = OfflineSyncService.getInstance();
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'voice_checkin',
      data: {
        user_id: 'user1',
        text: 'First voice'
      }
    });
    mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify([{
      id: 'existing-item',
      type: 'CREATE',
      entity: 'voice_checkin',
      data: {
        user_id: 'user1',
        text: 'First voice'
      },
      timestamp: Date.now(),
      retryCount: 0
    }]));
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'thought_record',
      data: {
        user_id: 'user1',
        thought: 'Some thought'
      }
    });
    var calls = mockAsyncStorage.setItem.mock.calls;
    var lastQueueCall = calls[calls.length - 1];
    if (lastQueueCall && lastQueueCall[0].includes('syncQueue')) {
      var savedData = JSON.parse(lastQueueCall[1]);
      expect(savedData.length).toBeGreaterThanOrEqual(2);
    }
  }));
});
describe('FAZ 1: Sync Method Implementation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('syncVoiceCheckin method should be defined', function () {
    var offlineSyncModule = require("../services/offlineSync");
    expect(offlineSyncModule.OfflineSyncService).toBeDefined();
    var service = offlineSyncModule.OfflineSyncService.getInstance();
    expect(service.processSyncQueue).toBeDefined();
  });
  test('syncThoughtRecord method should be defined', function () {
    var offlineSyncModule = require("../services/offlineSync");
    var service = offlineSyncModule.OfflineSyncService.getInstance();
    expect(service.processSyncQueue).toBeDefined();
  });
});
describe('FAZ 1: Error Handling', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('should handle sync failures gracefully', (0, _asyncToGenerator2.default)(function* () {
    var _require7 = require("../services/offlineSync"),
      OfflineSyncService = _require7.OfflineSyncService;
    var service = OfflineSyncService.getInstance();
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'voice_checkin',
      data: {
        user_id: null,
        text: ''
      }
    });
    expect((0, _asyncToGenerator2.default)(function* () {
      yield service.processSyncQueue();
    })).not.toThrow();
  }));
  test('should handle storage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
    var _require8 = require("../services/offlineSync"),
      OfflineSyncService = _require8.OfflineSyncService;
    var service = OfflineSyncService.getInstance();
    mockAsyncStorage.setItem.mockRejectedValueOnce(new Error('Storage full'));
    yield service.addToSyncQueue({
      type: 'CREATE',
      entity: 'voice_checkin',
      data: {
        user_id: 'test',
        text: 'test'
      }
    });
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,