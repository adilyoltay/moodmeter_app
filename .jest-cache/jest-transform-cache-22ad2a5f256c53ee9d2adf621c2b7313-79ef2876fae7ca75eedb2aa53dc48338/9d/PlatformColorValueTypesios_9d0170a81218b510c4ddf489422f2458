c11833c8bc78ca5d3a69d27f2b472e7c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = exports.DynamicColorIOSPrivate = void 0;
var PlatformColor = exports.PlatformColor = function PlatformColor() {
  for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
    names[_key] = arguments[_key];
  }
  return {
    semantic: names
  };
};
var DynamicColorIOSPrivate = exports.DynamicColorIOSPrivate = function DynamicColorIOSPrivate(tuple) {
  return {
    dynamic: {
      light: tuple.light,
      dark: tuple.dark,
      highContrastLight: tuple.highContrastLight,
      highContrastDark: tuple.highContrastDark
    }
  };
};
var _normalizeColorObject = function _normalizeColorObject(color) {
  if ('semantic' in color) {
    return color;
  } else if ('dynamic' in color && color.dynamic !== undefined) {
    var normalizeColor = require("./normalizeColor").default;
    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: normalizeColor(dynamic.light),
        dark: normalizeColor(dynamic.dark),
        highContrastLight: normalizeColor(dynamic.highContrastLight),
        highContrastDark: normalizeColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }
  return null;
};
var normalizeColorObject = exports.normalizeColorObject = _normalizeColorObject;
var _processColorObject = function _processColorObject(color) {
  if ('dynamic' in color && color.dynamic != null) {
    var processColor = require("./processColor").default;
    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: processColor(dynamic.light),
        dark: processColor(dynamic.dark),
        highContrastLight: processColor(dynamic.highContrastLight),
        highContrastDark: processColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }
  return color;
};
var processColorObject = exports.processColorObject = _processColorObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,