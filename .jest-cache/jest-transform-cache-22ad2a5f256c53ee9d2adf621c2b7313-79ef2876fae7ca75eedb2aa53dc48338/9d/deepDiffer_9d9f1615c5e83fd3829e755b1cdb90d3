095fd83aa1e32e8ce76d859939b6d4be
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var logListeners;
function unstable_setLogListeners(listeners) {
  logListeners = listeners;
}
function deepDiffer(one, two) {
  var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
  var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
  var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
  if (maxDepth === 0) {
    return true;
  }
  if (one === two) {
    return false;
  }
  if (typeof one === 'function' && typeof two === 'function') {
    var unsafelyIgnoreFunctions = options == null ? void 0 : options.unsafelyIgnoreFunctions;
    if (unsafelyIgnoreFunctions == null) {
      if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
        logListeners.onDifferentFunctionsIgnored(one.name, two.name);
      }
      unsafelyIgnoreFunctions = true;
    }
    return !unsafelyIgnoreFunctions;
  }
  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }
  if (typeof two !== 'object' || two === null) {
    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {
    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
        return true;
      }
    }
    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }
  return false;
}
deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
var _default = exports.default = deepDiffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJsb2dMaXN0ZW5lcnMiLCJ1bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJkZWVwRGlmZmVyIiwib25lIiwidHdvIiwibWF4RGVwdGhPck9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtYXliZU9wdGlvbnMiLCJvcHRpb25zIiwibWF4RGVwdGgiLCJ1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucyIsIm9uRGlmZmVyZW50RnVuY3Rpb25zSWdub3JlZCIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsIkFycmF5IiwiaXNBcnJheSIsImxlbiIsImlpIiwia2V5IiwidHdvS2V5IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJkZWVwRGlmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxubGV0IGxvZ0xpc3RlbmVycztcblxudHlwZSBMb2dMaXN0ZW5lcnMgPSB7XG4gICtvbkRpZmZlcmVudEZ1bmN0aW9uc0lnbm9yZWQ6IChuYW1lT25lOiA/c3RyaW5nLCBuYW1lVHdvOiA/c3RyaW5nKSA9PiB2b2lkLFxufTtcblxudHlwZSBPcHRpb25zID0geyt1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucz86IGJvb2xlYW59O1xuXG5mdW5jdGlvbiB1bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnMobGlzdGVuZXJzOiA/TG9nTGlzdGVuZXJzKSB7XG4gIGxvZ0xpc3RlbmVycyA9IGxpc3RlbmVycztcbn1cblxuLypcbiAqIEByZXR1cm5zIHtib29sfSB0cnVlIGlmIGRpZmZlcmVudCwgZmFsc2UgaWYgZXF1YWxcbiAqL1xuZnVuY3Rpb24gZGVlcERpZmZlcihcbiAgb25lOiBhbnksXG4gIHR3bzogYW55LFxuICBtYXhEZXB0aE9yT3B0aW9uczogT3B0aW9ucyB8IG51bWJlciA9IC0xLFxuICBtYXliZU9wdGlvbnM/OiBPcHRpb25zLFxuKTogYm9vbGVhbiB7XG4gIGNvbnN0IG9wdGlvbnMgPVxuICAgIHR5cGVvZiBtYXhEZXB0aE9yT3B0aW9ucyA9PT0gJ251bWJlcicgPyBtYXliZU9wdGlvbnMgOiBtYXhEZXB0aE9yT3B0aW9ucztcbiAgY29uc3QgbWF4RGVwdGggPVxuICAgIHR5cGVvZiBtYXhEZXB0aE9yT3B0aW9ucyA9PT0gJ251bWJlcicgPyBtYXhEZXB0aE9yT3B0aW9ucyA6IC0xO1xuICBpZiAobWF4RGVwdGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAob25lID09PSB0d28pIHtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IG9uIGlkZW50aWNhbCBvYmplY3QgcmVmZXJlbmNlcyBpbnN0ZWFkIG9mIHRyYXZlcnNpbmcgdGhlbS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBvbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR3byA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFdlIGNvbnNpZGVyIGFsbCBmdW5jdGlvbnMgZXF1YWwgdW5sZXNzIGV4cGxpY2l0bHkgY29uZmlndXJlZCBvdGhlcndpc2VcbiAgICBsZXQgdW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMgPSBvcHRpb25zPy51bnNhZmVseUlnbm9yZUZ1bmN0aW9ucztcbiAgICBpZiAodW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMgPT0gbnVsbCkge1xuICAgICAgaWYgKFxuICAgICAgICBsb2dMaXN0ZW5lcnMgJiZcbiAgICAgICAgbG9nTGlzdGVuZXJzLm9uRGlmZmVyZW50RnVuY3Rpb25zSWdub3JlZCAmJlxuICAgICAgICAoIW9wdGlvbnMgfHwgISgndW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMnIGluIG9wdGlvbnMpKVxuICAgICAgKSB7XG4gICAgICAgIGxvZ0xpc3RlbmVycy5vbkRpZmZlcmVudEZ1bmN0aW9uc0lnbm9yZWQob25lLm5hbWUsIHR3by5uYW1lKTtcbiAgICAgIH1cbiAgICAgIHVuc2FmZWx5SWdub3JlRnVuY3Rpb25zID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICF1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucztcbiAgfVxuICBpZiAodHlwZW9mIG9uZSAhPT0gJ29iamVjdCcgfHwgb25lID09PSBudWxsKSB7XG4gICAgLy8gUHJpbWl0aXZlcyBjYW4gYmUgZGlyZWN0bHkgY29tcGFyZWRcbiAgICByZXR1cm4gb25lICE9PSB0d287XG4gIH1cbiAgaWYgKHR5cGVvZiB0d28gIT09ICdvYmplY3QnIHx8IHR3byA9PT0gbnVsbCkge1xuICAgIC8vIFdlIGtub3cgdGhleSBhcmUgZGlmZmVyZW50IGJlY2F1c2UgdGhlIHByZXZpb3VzIGNhc2Ugd291bGQgaGF2ZSB0cmlnZ2VyZWRcbiAgICAvLyBvdGhlcndpc2UuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9uZS5jb25zdHJ1Y3RvciAhPT0gdHdvLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob25lKSkge1xuICAgIC8vIFdlIGtub3cgdHdvIGlzIGFsc28gYW4gYXJyYXkgYmVjYXVzZSB0aGUgY29uc3RydWN0b3JzIGFyZSBlcXVhbFxuICAgIGNvbnN0IGxlbiA9IG9uZS5sZW5ndGg7XG4gICAgaWYgKHR3by5sZW5ndGggIT09IGxlbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgIGlmIChkZWVwRGlmZmVyKG9uZVtpaV0sIHR3b1tpaV0sIG1heERlcHRoIC0gMSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9uZSkge1xuICAgICAgaWYgKGRlZXBEaWZmZXIob25lW2tleV0sIHR3b1trZXldLCBtYXhEZXB0aCAtIDEsIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR3b0tleSBpbiB0d28pIHtcbiAgICAgIC8vIFRoZSBvbmx5IGNhc2Ugd2UgaGF2ZW4ndCBjaGVja2VkIHlldCBpcyBrZXlzIHRoYXQgYXJlIGluIHR3byBidXQgYXJlbid0XG4gICAgICAvLyBpbiBvbmUsIHdoaWNoIG1lYW5zIHRoZXkgYXJlIGRpZmZlcmVudC5cbiAgICAgIGlmIChvbmVbdHdvS2V5XSA9PT0gdW5kZWZpbmVkICYmIHR3b1t0d29LZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZGVlcERpZmZlci51bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnMgPSB1bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnM7XG5leHBvcnQgZGVmYXVsdCBkZWVwRGlmZmVyO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxPQUFBO0FBRWIsSUFBSUMsWUFBWTtBQVFoQixTQUFTQyx3QkFBd0JBLENBQUNDLFNBQXdCLEVBQUU7RUFDMURGLFlBQVksR0FBR0UsU0FBUztBQUMxQjtBQUtBLFNBQVNDLFVBQVVBLENBQ2pCQyxHQUFRLEVBQ1JDLEdBQVEsRUFHQztFQUFBLElBRlRDLGlCQUFtQyxHQUFBQyxTQUFBLENBQUFDLE1BQUEs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