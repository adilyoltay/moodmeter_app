69d41720923f1b7b2f2a3ceb481939ca
var _statistics = require("../../utils/statistics");
describe('quantiles()', function () {
  it('handles empty array', function () {
    var q = (0, _statistics.quantiles)([]);
    expect(q.p25).toBeNaN();
    expect(q.p50).toBeNaN();
    expect(q.p75).toBeNaN();
  });
  it('single element', function () {
    var q = (0, _statistics.quantiles)([42]);
    expect(q).toEqual({
      p25: 42,
      p50: 42,
      p75: 42
    });
  });
  it('monotonic sequence', function () {
    var q = (0, _statistics.quantiles)([0, 10, 20, 30, 40, 50, 60, 70]);
    expect(q.p50).toBeCloseTo(35, 6);
    expect(q.p25).toBeCloseTo(17.5, 6);
    expect(q.p75).toBeCloseTo(52.5, 6);
  });
});
describe('recencyAlpha()', function () {
  it('maps to [0.5,1.0]', function () {
    var a0 = (0, _statistics.recencyAlpha)(0, 0, 1000);
    var aMid = (0, _statistics.recencyAlpha)(500, 0, 1000);
    var a1 = (0, _statistics.recencyAlpha)(1000, 0, 1000);
    expect(a0).toBeCloseTo(0.5, 6);
    expect(aMid).toBeGreaterThan(0.5);
    expect(a1).toBeCloseTo(1.0, 6);
  });
});
describe('jitterXY()', function () {
  it('deterministic for same seedKey', function () {
    var a = (0, _statistics.jitterXY)('seed-123');
    var b = (0, _statistics.jitterXY)('seed-123');
    expect(a).toEqual(b);
  });
  it('bounded by xMax/yMax', function () {
    var _jitterXY = (0, _statistics.jitterXY)('abc', 10, 2),
      jx = _jitterXY.jx,
      jy = _jitterXY.jy;
    expect(Math.abs(jx)).toBeLessThanOrEqual(10);
    expect(Math.abs(jy)).toBeLessThanOrEqual(2);
  });
});
describe('energyToColor()', function () {
  it('returns hsla string', function () {
    var c = (0, _statistics.energyToColor)(5, 0.8, false);
    expect(c.startsWith('hsla(')).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RhdGlzdGljcyIsInJlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwicSIsInF1YW50aWxlcyIsImV4cGVjdCIsInAyNSIsInRvQmVOYU4iLCJwNTAiLCJwNzUiLCJ0b0VxdWFsIiwidG9CZUNsb3NlVG8iLCJhMCIsInJlY2VuY3lBbHBoYSIsImFNaWQiLCJhMSIsInRvQmVHcmVhdGVyVGhhbiIsImEiLCJqaXR0ZXJYWSIsImIiLCJfaml0dGVyWFkiLCJqeCIsImp5IiwiTWF0aCIsImFicyIsInRvQmVMZXNzVGhhbk9yRXF1YWwiLCJjIiwiZW5lcmd5VG9Db2xvciIsInN0YXJ0c1dpdGgiLCJ0b0JlIl0sInNvdXJjZXMiOlsic3RhdGlzdGljcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHF1YW50aWxlcywgcmVjZW5jeUFscGhhLCBqaXR0ZXJYWSwgZW5lcmd5VG9Db2xvciB9IGZyb20gJ0AvdXRpbHMvc3RhdGlzdGljcyc7XG5cbmRlc2NyaWJlKCdxdWFudGlsZXMoKScsICgpID0+IHtcbiAgaXQoJ2hhbmRsZXMgZW1wdHkgYXJyYXknLCAoKSA9PiB7XG4gICAgY29uc3QgcSA9IHF1YW50aWxlcyhbXSk7XG4gICAgZXhwZWN0KHEucDI1KS50b0JlTmFOKCk7XG4gICAgZXhwZWN0KHEucDUwKS50b0JlTmFOKCk7XG4gICAgZXhwZWN0KHEucDc1KS50b0JlTmFOKCk7XG4gIH0pO1xuICBpdCgnc2luZ2xlIGVsZW1lbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgcSA9IHF1YW50aWxlcyhbNDJdKTtcbiAgICBleHBlY3QocSkudG9FcXVhbCh7IHAyNTogNDIsIHA1MDogNDIsIHA3NTogNDIgfSk7XG4gIH0pO1xuICBpdCgnbW9ub3RvbmljIHNlcXVlbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHEgPSBxdWFudGlsZXMoWzAsIDEwLCAyMCwgMzAsIDQwLCA1MCwgNjAsIDcwXSk7XG4gICAgZXhwZWN0KHEucDUwKS50b0JlQ2xvc2VUbygzNSwgNik7XG4gICAgZXhwZWN0KHEucDI1KS50b0JlQ2xvc2VUbygxNy41LCA2KTtcbiAgICBleHBlY3QocS5wNzUpLnRvQmVDbG9zZVRvKDUyLjUsIDYpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgncmVjZW5jeUFscGhhKCknLCAoKSA9PiB7XG4gIGl0KCdtYXBzIHRvIFswLjUsMS4wXScsICgpID0+IHtcbiAgICBjb25zdCBhMCA9IHJlY2VuY3lBbHBoYSgwLCAwLCAxMDAwKTtcbiAgICBjb25zdCBhTWlkID0gcmVjZW5jeUFscGhhKDUwMCwgMCwgMTAwMCk7XG4gICAgY29uc3QgYTEgPSByZWNlbmN5QWxwaGEoMTAwMCwgMCwgMTAwMCk7XG4gICAgZXhwZWN0KGEwKS50b0JlQ2xvc2VUbygwLjUsIDYpO1xuICAgIGV4cGVjdChhTWlkKS50b0JlR3JlYXRlclRoYW4oMC41KTtcbiAgICBleHBlY3QoYTEpLnRvQmVDbG9zZVRvKDEuMCwgNik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdqaXR0ZXJYWSgpJywgKCkgPT4ge1xuICBpdCgnZGV0ZXJtaW5pc3RpYyBmb3Igc2FtZSBzZWVkS2V5JywgKCkgPT4ge1xuICAgIGNvbnN0IGEgPSBqaXR0ZXJYWSgnc2VlZC0xMjMnKTtcbiAgICBjb25zdCBiID0gaml0dGVyWFkoJ3NlZWQtMTIzJyk7XG4gICAgZXhwZWN0KGEpLnRvRXF1YWwoYik7XG4gIH0pO1xuICBpdCgnYm91bmRlZCBieSB4TWF4L3lNYXgnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBqeCwgankgfSA9IGppdHRlclhZKCdhYmMnLCAxMCwgMik7XG4gICAgZXhwZWN0KE1hdGguYWJzKGp4KSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMCk7XG4gICAgZXhwZWN0KE1hdGguYWJzKGp5KSkudG9CZUxlc3NUaGFuT3JFcXVhbCgyKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2VuZXJneVRvQ29sb3IoKScsICgpID0+IHtcbiAgaXQoJ3JldHVybnMgaHNsYSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgY29uc3QgYyA9IGVuZXJneVRvQ29sb3IoNSwgMC44LCBmYWxzZSk7XG4gICAgZXhwZWN0KGMuc3RhcnRzV2l0aCgnaHNsYSgnKSkudG9CZSh0cnVlKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsV0FBQSxHQUFBQyxPQUFBO0FBRUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtFQUM1QkMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLFlBQU07SUFDOUIsSUFBTUMsQ0FBQyxHQUFHLElBQUFDLHFCQUFTLEVBQUMsRUFBRSxDQUFDO0lBQ3ZCQyxNQUFNLENBQUNGLENBQUMsQ0FBQ0csR0FBRyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCRixNQUFNLENBQUNGLENBQUMsQ0FBQ0ssR0FBRyxDQUFDLENBQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCRixNQUFNLENBQUNGLENBQUMsQ0FBQ00sR0FBRyxDQUFDLENBQUNGLE9BQU8sQ0FBQyxDQUFDO0VBQ3pCLENBQUMsQ0FBQztFQUNGTCxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtJQUN6QixJQUFNQyxDQUFDLEdBQUcsSUFBQUMscUJBQVMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCQyxNQUFNLENBQUNGLENBQUMsQ0FBQyxDQUFDTyxPQUFPLENBQUM7TUFBRUosR0FBRyxFQUFFLEVBQUU7TUFBRUUsR0FBRyxFQUFFLEVBQUU7TUFBRUMsR0FBRyxFQUFFO0lBQUcsQ0FBQyxDQUFDO0VBQ2xELENBQUMsQ0FBQztFQUNGUCxFQUFFLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtJQUM3QixJQUFNQyxDQUFDLEdBQUcsSUFBQUMscUJBQVMsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNwREMsTUFBTSxDQUFDRixDQUFDLENBQUNLLEdBQUcsQ0FBQyxDQUFDRyxXQUFXLENBQUMsRUFBRSxF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