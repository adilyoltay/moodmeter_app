8d5ddae5825f54239947fa9742730053
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModuleOrchestrator = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _featureFlags = require("../../../constants/featureFlags");
var ModuleOrchestrator = exports.ModuleOrchestrator = function () {
  function ModuleOrchestrator() {
    (0, _classCallCheck2.default)(this, ModuleOrchestrator);
    this.modules = new Map();
    this.isInitialized = false;
    this.defaultTimeout = 3000;
  }
  return (0, _createClass2.default)(ModuleOrchestrator, [{
    key: "initialize",
    value: (function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        if (this.isInitialized) {
          return;
        }
        try {
          console.log('üéº Initializing ModuleOrchestrator...');
          yield this.registerModules();
          yield this.initializeModules();
          this.isInitialized = true;
          console.log('‚úÖ ModuleOrchestrator initialized');
        } catch (error) {
          console.error('‚ùå ModuleOrchestrator initialization failed:', error);
          throw error;
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }())
  }, {
    key: "registerModules",
    value: (function () {
      var _registerModules = (0, _asyncToGenerator2.default)(function* () {
        this.registerModule('mood', new MoodHandler());
        if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_CBT_ENGINE')) {
          this.registerModule('cbt', new CBTHandler());
        }
        this.registerModule('ocd', new OCDHandler());
        this.registerModule('breathwork', new BreathworkHandler());
        this.registerModule('other', new OtherHandler());
      });
      function registerModules() {
        return _registerModules.apply(this, arguments);
      }
      return registerModules;
    }())
  }, {
    key: "registerModule",
    value: function registerModule(key, handler) {
      this.modules.set(key, handler);
      console.log(`üì¶ Registered module: ${handler.name}`);
    }
  }, {
    key: "initializeModules",
    value: (function () {
      var _initializeModules = (0, _asyncToGenerator2.default)(function* () {
        var initPromises = [];
        var _loop = function* _loop(module) {
          if (module.initialize) {
            initPromises.push(module.initialize().catch(function (error) {
              console.warn(`‚ö†Ô∏è Module ${module.name} initialization failed:`, error);
            }));
          }
        };
        for (var _ref of this.modules) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var key = _ref2[0];
          var module = _ref2[1];
          yield* _loop(module);
        }
        yield Promise.all(initPromises);
      });
      function initializeModules() {
        return _initializeModules.apply(this, arguments);
      }
      return initializeModules;
    }())
  }, {
    key: "process",
    value: (function () {
      var _process = (0, _asyncToGenerator2.default)(function* (result) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var startTime = Date.now();
        try {
          if (!this.isInitialized) {
            yield this.initialize();
          }
          var handler = this.findHandler(result.quickClass);
          if (!handler) {
            console.warn(`‚ö†Ô∏è No handler found for class: ${result.quickClass}`);
            return this.createFallbackResponse(result);
          }
          var timeout = options.timeout || this.defaultTimeout;
          var response = yield this.processWithTimeout(handler, result, timeout);
          response.metadata = Object.assign({}, response.metadata, {
            processingTimeMs: Date.now() - startTime,
            moduleUsed: handler.name
          });
          return response;
        } catch (error) {
          console.error('‚ùå ModuleOrchestrator.process error:', error);
          return this.createErrorResponse(result, error);
        }
      });
      function process(_x) {
        return _process.apply(this, arguments);
      }
      return process;
    }())
  }, {
    key: "findHandler",
    value: function findHandler(quickClass) {
      var directKey = quickClass.toLowerCase();
      if (this.modules.has(directKey)) {
        var handler = this.modules.get(directKey);
        if (handler.canHandle(quickClass)) {
          return handler;
        }
      }
      for (var _handler of this.modules.values()) {
        if (_handler.canHandle(quickClass)) {
          return _handler;
        }
      }
      return this.modules.get('other') || null;
    }
  }, {
    key: "processWithTimeout",
    value: (function () {
      var _processWithTimeout = (0, _asyncToGenerator2.default)(function* (handler, result, timeout) {
        return Promise.race([handler.process(result), new Promise(function (_, reject) {
          return setTimeout(function () {
            return reject(new Error('Module processing timeout'));
          }, timeout);
        })]);
      });
      function processWithTimeout(_x2, _x3, _x4) {
        return _processWithTimeout.apply(this, arguments);
      }
      return processWithTimeout;
    }())
  }, {
    key: "createFallbackResponse",
    value: function createFallbackResponse(result) {
      return {
        success: true,
        action: 'AUTO_SAVE',
        data: {
          message: 'ƒ∞≈üleminiz kaydedildi',
          processed: true
        },
        metadata: {
          moduleUsed: 'fallback'
        }
      };
    }
  }, {
    key: "createErrorResponse",
    value: function createErrorResponse(result, error) {
      return {
        success: false,
        action: 'AUTO_SAVE',
        data: {
          message: 'ƒ∞≈ülem sƒ±rasƒ±nda bir hata olu≈ütu',
          processed: false
        },
        metadata: {
          moduleUsed: 'error'
        }
      };
    }
  }, {
    key: "cleanup",
    value: (function () {
      var _cleanup = (0, _asyncToGenerator2.default)(function* () {
        var cleanupPromises = [];
        var _loop2 = function* _loop2(module) {
          if (module.cleanup) {
            cleanupPromises.push(module.cleanup().catch(function (error) {
              console.warn(`‚ö†Ô∏è Module ${module.name} cleanup failed:`, error);
            }));
          }
        };
        for (var module of this.modules.values()) {
          yield* _loop2(module);
        }
        yield Promise.all(cleanupPromises);
        this.modules.clear();
        this.isInitialized = false;
      });
      function cleanup() {
        return _cleanup.apply(this, arguments);
      }
      return cleanup;
    }())
  }]);
}();
var MoodHandler = function () {
  function MoodHandler() {
    (0, _classCallCheck2.default)(this, MoodHandler);
    this.name = 'MoodHandler';
  }
  return (0, _createClass2.default)(MoodHandler, [{
    key: "canHandle",
    value: function canHandle(quickClass) {
      return quickClass === 'MOOD';
    }
  }, {
    key: "process",
    value: function () {
      var _process2 = (0, _asyncToGenerator2.default)(function* (result) {
        var _result$payload;
        return {
          success: true,
          action: 'AUTO_SAVE',
          data: {
            screen: 'mood',
            params: {
              mood: ((_result$payload = result.payload) == null ? void 0 : _result$payload.mood) || 50,
              confidence: result.confidence
            },
            message: 'Ruh haliniz kaydedildi',
            processed: true
          }
        };
      });
      function process(_x5) {
        return _process2.apply(this, arguments);
      }
      return process;
    }()
  }]);
}();
var CBTHandler = function () {
  function CBTHandler() {
    (0, _classCallCheck2.default)(this, CBTHandler);
    this.name = 'CBTHandler';
  }
  return (0, _createClass2.default)(CBTHandler, [{
    key: "canHandle",
    value: function canHandle(quickClass) {
      return quickClass === 'CBT';
    }
  }, {
    key: "process",
    value: function () {
      var _process3 = (0, _asyncToGenerator2.default)(function* (result) {
        var _result$payload2;
        return {
          success: true,
          action: 'OPEN_SCREEN',
          data: {
            screen: 'cbt',
            params: {
              prefill: true,
              text: (_result$payload2 = result.payload) == null ? void 0 : _result$payload2.originalText,
              trigger: 'voice'
            },
            message: 'D√º≈ü√ºnce kaydƒ± a√ßƒ±lƒ±yor',
            processed: true
          }
        };
      });
      function process(_x6) {
        return _process3.apply(this, arguments);
      }
      return process;
    }()
  }]);
}();
var OCDHandler = function () {
  function OCDHandler() {
    (0, _classCallCheck2.default)(this, OCDHandler);
    this.name = 'OCDHandler';
  }
  return (0, _createClass2.default)(OCDHandler, [{
    key: "canHandle",
    value: function canHandle(quickClass) {
      return quickClass === 'OCD';
    }
  }, {
    key: "process",
    value: function () {
      var _process4 = (0, _asyncToGenerator2.default)(function* (result) {
        var _result$payload3, _result$payload4;
        return {
          success: true,
          action: 'OPEN_SCREEN',
          data: {
            screen: 'tracking',
            params: {
              prefill: true,
              category: ((_result$payload3 = result.payload) == null ? void 0 : _result$payload3.category) || 'other',
              text: (_result$payload4 = result.payload) == null ? void 0 : _result$payload4.originalText
            },
            message: 'Takƒ±ntƒ± kaydƒ± a√ßƒ±lƒ±yor',
            processed: true
          }
        };
      });
      function process(_x7) {
        return _process4.apply(this, arguments);
      }
      return process;
    }()
  }]);
}();
var TerapiHandler = function () {
  function TerapiHandler() {
    (0, _classCallCheck2.default)(this, TerapiHandler);
    this.name = 'TerapiHandler';
  }
  return (0, _createClass2.default)(TerapiHandler, [{
    key: "canHandle",
    value: function canHandle(quickClass) {
      return quickClass === 'Terapi';
    }
  }, {
    key: "process",
    value: function () {
      var _process5 = (0, _asyncToGenerator2.default)(function* (result) {
        var _result$payload5, _result$payload6;
        return {
          success: true,
          action: 'OPEN_SCREEN',
          data: {
            screen: 'erp',
            params: {
              prefill: true,
              category: (_result$payload5 = result.payload) == null ? void 0 : _result$payload5.category,
              text: (_result$payload6 = result.payload) == null ? void 0 : _result$payload6.originalText
            },
            message: 'Terapi egzersizi ba≈ülatƒ±lƒ±yor',
            processed: true
          }
        };
      });
      function process(_x8) {
        return _process5.apply(this, arguments);
      }
      return process;
    }()
  }]);
}();
var BreathworkHandler = function () {
  function BreathworkHandler() {
    (0, _classCallCheck2.default)(this, BreathworkHandler);
    this.name = 'BreathworkHandler';
  }
  return (0, _createClass2.default)(BreathworkHandler, [{
    key: "canHandle",
    value: function canHandle(quickClass) {
      return quickClass === 'BREATHWORK';
    }
  }, {
    key: "process",
    value: function () {
      var _process6 = (0, _asyncToGenerator2.default)(function* (result) {
        var _result$payload7;
        var protocol = 'box';
        var anxietyLevel = (_result$payload7 = result.payload) == null ? void 0 : _result$payload7.anxietyLevel;
        if (anxietyLevel && anxietyLevel >= 7) {
          protocol = '478';
        } else if (anxietyLevel && anxietyLevel <= 3) {
          protocol = 'paced';
        }
        return {
          success: true,
          action: 'SUGGEST_BREATHWORK',
          data: {
            screen: 'breathwork',
            params: {
              protocol: protocol,
              autoStart: true,
              source: 'checkin',
              anxietyLevel: anxietyLevel
            },
            message: 'Nefes egzersizi √∂neriliyor',
            processed: true
          }
        };
      });
      function process(_x9) {
        return _process6.apply(this, arguments);
      }
      return process;
    }()
  }]);
}();
var OtherHandler = function () {
  function OtherHandler() {
    (0, _classCallCheck2.default)(this, OtherHandler);
    this.name = 'OtherHandler';
  }
  return (0, _createClass2.default)(OtherHandler, [{
    key: "canHandle",
    value: function canHandle(quickClass) {
      return true;
    }
  }, {
    key: "process",
    value: function () {
      var _process7 = (0, _asyncToGenerator2.default)(function* (result) {
        return {
          success: true,
          action: 'AUTO_SAVE',
          data: {
            message: 'Kaydƒ±nƒ±z alƒ±ndƒ±',
            processed: true
          }
        };
      });
      function process(_x0) {
        return _process7.apply(this, arguments);
      }
      return process;
    }()
  }]);
}();
var _default = exports.default = ModuleOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,