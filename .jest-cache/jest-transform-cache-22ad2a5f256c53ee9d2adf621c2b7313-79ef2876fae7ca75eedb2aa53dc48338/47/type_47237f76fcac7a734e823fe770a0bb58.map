{"version":3,"names":["_errors","require","_hostComponentNames","_pointerEvents","_textInput","_nativeState","_eventBuilder","_utils","_parseKeys","type","_x","_x2","_x3","_type","apply","arguments","_asyncToGenerator2","default","element","text","options","isHostTextInput","ErrorWithStack","isEditableTextInput","isPointerEventEnabled","keys","parseKeys","skipPress","dispatchEvent","EventBuilder","Common","touch","focus","wait","config","currentText","getTextInputValue","key","previousText","proposedText","applyKey","isAccepted","isTextChangeAccepted","emitTypingEvents","finalText","submitEditing","TextInput","skipBlur","endEditing","blur","_x4","_x5","_emitTypingEvents","_ref","isMultiline","props","multiline","keyPress","nativeState","valueForElement","set","change","selectionRange","start","length","end","selectionChange","contentSize","getTextContentSize","contentSizeChange","slice","maxLength","undefined"],"sources":["../../../src/user-event/type/type.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\n\nimport { ErrorWithStack } from '../../helpers/errors';\nimport { isHostTextInput } from '../../helpers/host-component-names';\nimport { isPointerEventEnabled } from '../../helpers/pointer-events';\nimport { getTextInputValue, isEditableTextInput } from '../../helpers/text-input';\nimport { nativeState } from '../../native-state';\nimport { EventBuilder } from '../event-builder';\nimport type { UserEventConfig, UserEventInstance } from '../setup';\nimport { dispatchEvent, getTextContentSize, wait } from '../utils';\nimport { parseKeys } from './parse-keys';\n\nexport interface TypeOptions {\n  skipPress?: boolean;\n  submitEditing?: boolean;\n  skipBlur?: boolean;\n}\n\nexport async function type(\n  this: UserEventInstance,\n  element: ReactTestInstance,\n  text: string,\n  options?: TypeOptions,\n): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `type() works only with host \"TextInput\" elements. Passed element has type \"${element.type}\".`,\n      type,\n    );\n  }\n\n  // Skip events if the element is disabled\n  if (!isEditableTextInput(element) || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  const keys = parseKeys(text);\n\n  if (!options?.skipPress) {\n    await dispatchEvent(element, 'pressIn', EventBuilder.Common.touch());\n  }\n\n  await dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  if (!options?.skipPress) {\n    await wait(this.config);\n    await dispatchEvent(element, 'pressOut', EventBuilder.Common.touch());\n  }\n\n  let currentText = getTextInputValue(element);\n  for (const key of keys) {\n    const previousText = getTextInputValue(element);\n    const proposedText = applyKey(previousText, key);\n    const isAccepted = isTextChangeAccepted(element, proposedText);\n    currentText = isAccepted ? proposedText : previousText;\n\n    await emitTypingEvents(element, {\n      config: this.config,\n      key,\n      text: currentText,\n      isAccepted,\n    });\n  }\n\n  const finalText = getTextInputValue(element);\n  await wait(this.config);\n\n  if (options?.submitEditing) {\n    await dispatchEvent(element, 'submitEditing', EventBuilder.TextInput.submitEditing(finalText));\n  }\n\n  if (!options?.skipBlur) {\n    await dispatchEvent(element, 'endEditing', EventBuilder.TextInput.endEditing(finalText));\n    await dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n  }\n}\n\ntype EmitTypingEventsContext = {\n  config: UserEventConfig;\n  key: string;\n  text: string;\n  isAccepted?: boolean;\n};\n\nexport async function emitTypingEvents(\n  element: ReactTestInstance,\n  { config, key, text, isAccepted }: EmitTypingEventsContext,\n) {\n  const isMultiline = element.props.multiline === true;\n\n  await wait(config);\n  await dispatchEvent(element, 'keyPress', EventBuilder.TextInput.keyPress(key));\n\n  // Platform difference (based on experiments):\n  // - iOS and RN Web: TextInput emits only `keyPress` event when max length has been reached\n  // - Android: TextInputs does not emit any events\n  if (isAccepted === false) {\n    return;\n  }\n\n  nativeState.valueForElement.set(element, text);\n  await dispatchEvent(element, 'change', EventBuilder.TextInput.change(text));\n  await dispatchEvent(element, 'changeText', text);\n\n  const selectionRange = {\n    start: text.length,\n    end: text.length,\n  };\n  await dispatchEvent(\n    element,\n    'selectionChange',\n    EventBuilder.TextInput.selectionChange(selectionRange),\n  );\n\n  // According to the docs only multiline TextInput emits contentSizeChange event\n  // @see: https://reactnative.dev/docs/textinput#oncontentsizechange\n  if (isMultiline) {\n    const contentSize = getTextContentSize(text);\n    await dispatchEvent(\n      element,\n      'contentSizeChange',\n      EventBuilder.TextInput.contentSizeChange(contentSize),\n    );\n  }\n}\n\nfunction applyKey(text: string, key: string) {\n  if (key === 'Enter') {\n    return `${text}\\n`;\n  }\n\n  if (key === 'Backspace') {\n    return text.slice(0, -1);\n  }\n\n  return text + key;\n}\n\nfunction isTextChangeAccepted(element: ReactTestInstance, text: string) {\n  const maxLength = element.props.maxLength;\n  return maxLength === undefined || text.length <= maxLength;\n}\n"],"mappings":";;;;;;;;;AAEA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,UAAA,GAAAH,OAAA;AACA,IAAAI,YAAA,GAAAJ,OAAA;AACA,IAAAK,aAAA,GAAAL,OAAA;AAEA,IAAAM,MAAA,GAAAN,OAAA;AACA,IAAAO,UAAA,GAAAP,OAAA;AAAA,SAQsBQ,IAAIA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,MAAA;EAAAA,KAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAnB,WAELC,OAA0B,EAC1BC,IAAY,EACZC,OAAqB,EACN;IACf,IAAI,CAAC,IAAAlB,mBAAA,CAAAmB,eAAe,EAACH,OAAO,CAAC,EAAE;MAC7B,MAAM,IAAIlB,OAAA,CAAAsB,cAAc,CACtB,8EAA8EJ,OAAO,CAACT,IAAI,IAAI,EAC9FA,IACF,CAAC;IACH;IAGA,IAAI,CAAC,IAAAL,UAAA,CAAAmB,mBAAmB,EAACL,OAAO,CAAC,IAAI,CAAC,IAAAf,cAAA,CAAAqB,qBAAqB,EAACN,OAAO,CAAC,EAAE;MACpE;IACF;IAEA,IAAMO,IAAI,GAAG,IAAAjB,UAAA,CAAAkB,SAAS,EAACP,IAAI,CAAC;IAE5B,IAAI,EAACC,OAAO,YAAPA,OAAO,CAAEO,SAAS,GAAE;MACvB,MAAM,IAAApB,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,SAAS,EAAEZ,aAAA,CAAAuB,YAAY,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACtE;IAEA,MAAM,IAAAxB,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,OAAO,EAAEZ,aAAA,CAAAuB,YAAY,CAACC,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC;IAElE,IAAI,EAACZ,OAAO,YAAPA,OAAO,CAAEO,SAAS,GAAE;MACvB,MAAM,IAAApB,MAAA,CAAA0B,IAAI,EAAC,IAAI,CAACC,MAAM,CAAC;MACvB,MAAM,IAAA3B,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,UAAU,EAAEZ,aAAA,CAAAuB,YAAY,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACvE;IAEA,IAAII,WAAW,GAAG,IAAA/B,UAAA,CAAAgC,iBAAiB,EAAClB,OAAO,CAAC;IAC5C,KAAK,IAAMmB,GAAG,IAAIZ,IAAI,EAAE;MACtB,IAAMa,YAAY,GAAG,IAAAlC,UAAA,CAAAgC,iBAAiB,EAAClB,OAAO,CAAC;MAC/C,IAAMqB,YAAY,GAAGC,QAAQ,CAACF,YAAY,EAAED,GAAG,CAAC;MAChD,IAAMI,UAAU,GAAGC,oBAAoB,CAACxB,OAAO,EAAEqB,YAAY,CAAC;MAC9DJ,WAAW,GAAGM,UAAU,GAAGF,YAAY,GAAGD,YAAY;MAEtD,MAAMK,gBAAgB,CAACzB,OAAO,EAAE;QAC9BgB,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBG,GAAG,EAAHA,GAAG;QACHlB,IAAI,EAAEgB,WAAW;QACjBM,UAAA,EAAAA;MACF,CAAC,CAAC;IACJ;IAEA,IAAMG,SAAS,GAAG,IAAAxC,UAAA,CAAAgC,iBAAiB,EAAClB,OAAO,CAAC;IAC5C,MAAM,IAAAX,MAAA,CAAA0B,IAAI,EAAC,IAAI,CAACC,MAAM,CAAC;IAEvB,IAAId,OAAO,YAAPA,OAAO,CAAEyB,aAAa,EAAE;MAC1B,MAAM,IAAAtC,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,eAAe,EAAEZ,aAAA,CAAAuB,YAAY,CAACiB,SAAS,CAACD,aAAa,CAACD,SAAS,CAAC,CAAC;IAChG;IAEA,IAAI,EAACxB,OAAO,YAAPA,OAAO,CAAE2B,QAAQ,GAAE;MACtB,MAAM,IAAAxC,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,YAAY,EAAEZ,aAAA,CAAAuB,YAAY,CAACiB,SAAS,CAACE,UAAU,CAACJ,SAAS,CAAC,CAAC;MACxF,MAAM,IAAArC,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,MAAM,EAAEZ,aAAA,CAAAuB,YAAY,CAACC,MAAM,CAACmB,IAAI,CAAC,CAAC,CAAC;IAClE;EACF;EAAA,OAAApC,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SASsB4B,gBAAgBA,CAAAO,GAAA,EAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAtC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAqC,kBAAA;EAAAA,iBAAA,OAAApC,kBAAA,CAAAC,OAAA,EAA/B,WACLC,OAA0B,EAAAmC,IAAA,EAE1B;IAAA,IADEnB,MAAM,GAAAmB,IAAA,CAANnB,MAAM;MAAEG,GAAG,GAAAgB,IAAA,CAAHhB,GAAG;MAAElB,IAAI,GAAAkC,IAAA,CAAJlC,IAAI;MAAEsB,UAAA,GAAAY,IAAA,CAAAZ,UAAA;IAErB,IAAMa,WAAW,GAAGpC,OAAO,CAACqC,KAAK,CAACC,SAAS,KAAK,IAAI;IAEpD,MAAM,IAAAjD,MAAA,CAAA0B,IAAI,EAACC,MAAM,CAAC;IAClB,MAAM,IAAA3B,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,UAAU,EAAEZ,aAAA,CAAAuB,YAAY,CAACiB,SAAS,CAACW,QAAQ,CAACpB,GAAG,CAAC,CAAC;IAK9E,IAAII,UAAU,KAAK,KAAK,EAAE;MACxB;IACF;IAEApC,YAAA,CAAAqD,WAAW,CAACC,eAAe,CAACC,GAAG,CAAC1C,OAAO,EAAEC,IAAI,CAAC;IAC9C,MAAM,IAAAZ,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,QAAQ,EAAEZ,aAAA,CAAAuB,YAAY,CAACiB,SAAS,CAACe,MAAM,CAAC1C,IAAI,CAAC,CAAC;IAC3E,MAAM,IAAAZ,MAAA,CAAAqB,aAAa,EAACV,OAAO,EAAE,YAAY,EAAEC,IAAI,CAAC;IAEhD,IAAM2C,cAAc,GAAG;MACrBC,KAAK,EAAE5C,IAAI,CAAC6C,MAAM;MAClBC,GAAG,EAAE9C,IAAI,CAAC6C;IACZ,CAAC;IACD,MAAM,IAAAzD,MAAA,CAAAqB,aAAa,EACjBV,OAAO,EACP,iBAAiB,EACjBZ,aAAA,CAAAuB,YAAY,CAACiB,SAAS,CAACoB,eAAe,CAACJ,cAAc,CACvD,CAAC;IAID,IAAIR,WAAW,EAAE;MACf,IAAMa,WAAW,GAAG,IAAA5D,MAAA,CAAA6D,kBAAkB,EAACjD,IAAI,CAAC;MAC5C,MAAM,IAAAZ,MAAA,CAAAqB,aAAa,EACjBV,OAAO,EACP,mBAAmB,EACnBZ,aAAA,CAAAuB,YAAY,CAACiB,SAAS,CAACuB,iBAAiB,CAACF,WAAW,CACtD,CAAC;IACH;EACF;EAAA,OAAAf,iBAAA,CAAAtC,KAAA,OAAAC,SAAA;AAAA;AAEA,SAASyB,QAAQA,CAACrB,IAAY,EAAEkB,GAAW,EAAE;EAC3C,IAAIA,GAAG,KAAK,OAAO,EAAE;IACnB,OAAO,GAAGlB,IAAI,IAAI;EACpB;EAEA,IAAIkB,GAAG,KAAK,WAAW,EAAE;IACvB,OAAOlB,IAAI,CAACmD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B;EAEA,OAAOnD,IAAI,GAAGkB,GAAG;AACnB;AAEA,SAASK,oBAAoBA,CAACxB,OAA0B,EAAEC,IAAY,EAAE;EACtE,IAAMoD,SAAS,GAAGrD,OAAO,CAACqC,KAAK,CAACgB,SAAS;EACzC,OAAOA,SAAS,KAAKC,SAAS,IAAIrD,IAAI,CAAC6C,MAAM,IAAIO,SAAS;AAC5D","ignoreList":[]}