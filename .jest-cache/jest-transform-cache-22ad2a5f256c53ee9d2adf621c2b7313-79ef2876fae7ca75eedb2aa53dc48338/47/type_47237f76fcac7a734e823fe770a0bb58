0c405c182cff454b4303a023f4c23540
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emitTypingEvents = emitTypingEvents;
exports.type = type;
var _errors = require("../../helpers/errors");
var _hostComponentNames = require("../../helpers/host-component-names");
var _pointerEvents = require("../../helpers/pointer-events");
var _textInput = require("../../helpers/text-input");
var _nativeState = require("../../native-state");
var _eventBuilder = require("../event-builder");
var _utils = require("../utils");
var _parseKeys = require("./parse-keys");
function type(_x, _x2, _x3) {
  return _type.apply(this, arguments);
}
function _type() {
  _type = (0, _asyncToGenerator2.default)(function* (element, text, options) {
    if (!(0, _hostComponentNames.isHostTextInput)(element)) {
      throw new _errors.ErrorWithStack(`type() works only with host "TextInput" elements. Passed element has type "${element.type}".`, type);
    }
    if (!(0, _textInput.isEditableTextInput)(element) || !(0, _pointerEvents.isPointerEventEnabled)(element)) {
      return;
    }
    var keys = (0, _parseKeys.parseKeys)(text);
    if (!(options != null && options.skipPress)) {
      yield (0, _utils.dispatchEvent)(element, 'pressIn', _eventBuilder.EventBuilder.Common.touch());
    }
    yield (0, _utils.dispatchEvent)(element, 'focus', _eventBuilder.EventBuilder.Common.focus());
    if (!(options != null && options.skipPress)) {
      yield (0, _utils.wait)(this.config);
      yield (0, _utils.dispatchEvent)(element, 'pressOut', _eventBuilder.EventBuilder.Common.touch());
    }
    var currentText = (0, _textInput.getTextInputValue)(element);
    for (var key of keys) {
      var previousText = (0, _textInput.getTextInputValue)(element);
      var proposedText = applyKey(previousText, key);
      var isAccepted = isTextChangeAccepted(element, proposedText);
      currentText = isAccepted ? proposedText : previousText;
      yield emitTypingEvents(element, {
        config: this.config,
        key: key,
        text: currentText,
        isAccepted: isAccepted
      });
    }
    var finalText = (0, _textInput.getTextInputValue)(element);
    yield (0, _utils.wait)(this.config);
    if (options != null && options.submitEditing) {
      yield (0, _utils.dispatchEvent)(element, 'submitEditing', _eventBuilder.EventBuilder.TextInput.submitEditing(finalText));
    }
    if (!(options != null && options.skipBlur)) {
      yield (0, _utils.dispatchEvent)(element, 'endEditing', _eventBuilder.EventBuilder.TextInput.endEditing(finalText));
      yield (0, _utils.dispatchEvent)(element, 'blur', _eventBuilder.EventBuilder.Common.blur());
    }
  });
  return _type.apply(this, arguments);
}
function emitTypingEvents(_x4, _x5) {
  return _emitTypingEvents.apply(this, arguments);
}
function _emitTypingEvents() {
  _emitTypingEvents = (0, _asyncToGenerator2.default)(function* (element, _ref) {
    var config = _ref.config,
      key = _ref.key,
      text = _ref.text,
      isAccepted = _ref.isAccepted;
    var isMultiline = element.props.multiline === true;
    yield (0, _utils.wait)(config);
    yield (0, _utils.dispatchEvent)(element, 'keyPress', _eventBuilder.EventBuilder.TextInput.keyPress(key));
    if (isAccepted === false) {
      return;
    }
    _nativeState.nativeState.valueForElement.set(element, text);
    yield (0, _utils.dispatchEvent)(element, 'change', _eventBuilder.EventBuilder.TextInput.change(text));
    yield (0, _utils.dispatchEvent)(element, 'changeText', text);
    var selectionRange = {
      start: text.length,
      end: text.length
    };
    yield (0, _utils.dispatchEvent)(element, 'selectionChange', _eventBuilder.EventBuilder.TextInput.selectionChange(selectionRange));
    if (isMultiline) {
      var contentSize = (0, _utils.getTextContentSize)(text);
      yield (0, _utils.dispatchEvent)(element, 'contentSizeChange', _eventBuilder.EventBuilder.TextInput.contentSizeChange(contentSize));
    }
  });
  return _emitTypingEvents.apply(this, arguments);
}
function applyKey(text, key) {
  if (key === 'Enter') {
    return `${text}\n`;
  }
  if (key === 'Backspace') {
    return text.slice(0, -1);
  }
  return text + key;
}
function isTextChangeAccepted(element, text) {
  var maxLength = element.props.maxLength;
  return maxLength === undefined || text.length <= maxLength;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,