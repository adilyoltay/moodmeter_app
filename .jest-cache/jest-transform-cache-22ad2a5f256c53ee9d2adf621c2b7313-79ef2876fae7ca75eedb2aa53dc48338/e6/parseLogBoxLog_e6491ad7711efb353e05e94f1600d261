41960e06e1eb915c886b4a13f2d2b1f9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasComponentStack = hasComponentStack;
exports.parseComponentStack = parseComponentStack;
exports.parseInterpolation = parseInterpolation;
exports.parseLogBoxException = parseLogBoxException;
exports.parseLogBoxLog = parseLogBoxLog;
exports.withoutANSIColorStyles = withoutANSIColorStyles;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _parseErrorStack = _interopRequireDefault(require("../../Core/Devtools/parseErrorStack"));
var _UTFSequence = _interopRequireDefault(require("../../UTFSequence"));
var _stringifySafe = _interopRequireDefault(require("../../Utilities/stringifySafe"));
var _ansiRegex = _interopRequireDefault(require("ansi-regex"));
var ANSI_REGEX = (0, _ansiRegex.default)().source;
var RE_TRANSFORM_ERROR = /^TransformError /;
var RE_COMPONENT_STACK_LINE = /\n {4}(in|at) /;
var RE_COMPONENT_STACK_LINE_GLOBAL = /\n {4}(in|at) /g;
var RE_COMPONENT_STACK_LINE_OLD = / {4}in/;
var RE_COMPONENT_STACK_LINE_NEW = / {4}at/;
var RE_COMPONENT_STACK_LINE_STACK_FRAME = /@.*\n/;
var RE_BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \((\d+):(\d+)\)\n\n([\s\S]+)/;
var RE_COMPONENT_STACK_WITH_SOURCE = /(.*) \(at (.*\.(?:js|jsx|ts|tsx)):([\d]+)\)/;
var RE_COMPONENT_STACK_NO_SOURCE = /(.*) \(created by .*\)/;
var RE_BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*):? (?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?)(\/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+?)\n([ >]{2}[\t-\r 0-9\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+ \|(?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+|\x1B(?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+)/;
var RE_METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*) \(([0-9]+):([0-9]+)\)\n\n((?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+)/;
var RE_BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(['^', `(?:${ANSI_REGEX})*`, '>', `(?:${ANSI_REGEX})*`, ' +', '[0-9]+', ' \\|'].join(''), 'm');
function hasComponentStack(args) {
  for (var arg of args) {
    if (typeof arg === 'string' && isComponentStack(arg)) {
      return true;
    }
  }
  return false;
}
var SUBSTITUTION = _UTFSequence.default.BOM + '%s';
function parseInterpolation(args) {
  var categoryParts = [];
  var contentParts = [];
  var substitutionOffsets = [];
  var remaining = (0, _toConsumableArray2.default)(args);
  if (typeof remaining[0] === 'string') {
    var formatString = String(remaining.shift());
    var formatStringParts = formatString.split('%s');
    var substitutionCount = formatStringParts.length - 1;
    var substitutions = remaining.splice(0, substitutionCount);
    var categoryString = '';
    var contentString = '';
    var substitutionIndex = 0;
    for (var formatStringPart of formatStringParts) {
      categoryString += formatStringPart;
      contentString += formatStringPart;
      if (substitutionIndex < substitutionCount) {
        if (substitutionIndex < substitutions.length) {
          var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : (0, _stringifySafe.default)(substitutions[substitutionIndex]);
          substitutionOffsets.push({
            length: substitution.length,
            offset: contentString.length
          });
          categoryString += SUBSTITUTION;
          contentString += substitution;
        } else {
          substitutionOffsets.push({
            length: 2,
            offset: contentString.length
          });
          categoryString += '%s';
          contentString += '%s';
        }
        substitutionIndex++;
      }
    }
    categoryParts.push(categoryString);
    contentParts.push(contentString);
  }
  var remainingArgs = remaining.map(function (arg) {
    return typeof arg === 'string' ? arg : (0, _stringifySafe.default)(arg);
  });
  categoryParts.push.apply(categoryParts, (0, _toConsumableArray2.default)(remainingArgs));
  contentParts.push.apply(contentParts, (0, _toConsumableArray2.default)(remainingArgs));
  return {
    category: categoryParts.join(' '),
    message: {
      content: contentParts.join(' '),
      substitutions: substitutionOffsets
    }
  };
}
function isComponentStack(consoleArgument) {
  var isOldComponentStackFormat = RE_COMPONENT_STACK_LINE_OLD.test(consoleArgument);
  var isNewComponentStackFormat = RE_COMPONENT_STACK_LINE_NEW.test(consoleArgument);
  var isNewJSCComponentStackFormat = RE_COMPONENT_STACK_LINE_STACK_FRAME.test(consoleArgument);
  return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;
}
function parseComponentStack(message) {
  var stack = (0, _parseErrorStack.default)(message);
  if (stack && stack.length > 0) {
    return {
      type: 'stack',
      stack: stack.map(function (frame) {
        return {
          content: frame.methodName,
          collapse: frame.collapse || false,
          fileName: frame.file == null ? 'unknown' : frame.file,
          location: {
            column: frame.column == null ? -1 : frame.column,
            row: frame.lineNumber == null ? -1 : frame.lineNumber
          }
        };
      })
    };
  }
  var legacyStack = message.split(RE_COMPONENT_STACK_LINE_GLOBAL).map(function (s) {
    if (!s) {
      return null;
    }
    var match = s.match(RE_COMPONENT_STACK_WITH_SOURCE);
    if (match) {
      var _match$slice = match.slice(1),
        _match$slice2 = (0, _slicedToArray2.default)(_match$slice, 3),
        content = _match$slice2[0],
        fileName = _match$slice2[1],
        row = _match$slice2[2];
      return {
        content: content,
        fileName: fileName,
        location: {
          column: -1,
          row: parseInt(row, 10)
        }
      };
    }
    var matchWithoutSource = s.match(RE_COMPONENT_STACK_NO_SOURCE);
    if (matchWithoutSource) {
      return {
        content: matchWithoutSource[1],
        fileName: '',
        location: null
      };
    }
    return null;
  }).filter(Boolean);
  return {
    type: 'legacy',
    stack: legacyStack
  };
}
function parseLogBoxException(error) {
  var message = error.originalMessage != null ? error.originalMessage : 'Unknown';
  var metroInternalError = message.match(RE_METRO_ERROR_FORMAT);
  if (metroInternalError) {
    var _metroInternalError$s = metroInternalError.slice(1),
      _metroInternalError$s2 = (0, _slicedToArray2.default)(_metroInternalError$s, 5),
      content = _metroInternalError$s2[0],
      fileName = _metroInternalError$s2[1],
      row = _metroInternalError$s2[2],
      column = _metroInternalError$s2[3],
      codeFrame = _metroInternalError$s2[4];
    return {
      level: 'fatal',
      type: 'Metro Error',
      stack: [],
      isComponentError: false,
      componentStackType: 'legacy',
      componentStack: [],
      codeFrame: {
        fileName: fileName,
        location: {
          row: parseInt(row, 10),
          column: parseInt(column, 10)
        },
        content: codeFrame
      },
      message: {
        content: content,
        substitutions: []
      },
      category: `${fileName}-${row}-${column}`,
      extraData: error.extraData
    };
  }
  var babelTransformError = message.match(RE_BABEL_TRANSFORM_ERROR_FORMAT);
  if (babelTransformError) {
    var _babelTransformError$ = babelTransformError.slice(1),
      _babelTransformError$2 = (0, _slicedToArray2.default)(_babelTransformError$, 5),
      _fileName = _babelTransformError$2[0],
      _content = _babelTransformError$2[1],
      _row = _babelTransformError$2[2],
      _column = _babelTransformError$2[3],
      _codeFrame = _babelTransformError$2[4];
    return {
      level: 'syntax',
      stack: [],
      isComponentError: false,
      componentStackType: 'legacy',
      componentStack: [],
      codeFrame: {
        fileName: _fileName,
        location: {
          row: parseInt(_row, 10),
          column: parseInt(_column, 10)
        },
        content: _codeFrame
      },
      message: {
        content: _content,
        substitutions: []
      },
      category: `${_fileName}-${_row}-${_column}`,
      extraData: error.extraData
    };
  }
  if (RE_BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {
    var babelCodeFrameError = message.match(RE_BABEL_CODE_FRAME_ERROR_FORMAT);
    if (babelCodeFrameError) {
      var _babelCodeFrameError$ = babelCodeFrameError.slice(1),
        _babelCodeFrameError$2 = (0, _slicedToArray2.default)(_babelCodeFrameError$, 3),
        _fileName2 = _babelCodeFrameError$2[0],
        _content2 = _babelCodeFrameError$2[1],
        _codeFrame2 = _babelCodeFrameError$2[2];
      return {
        level: 'syntax',
        stack: [],
        isComponentError: false,
        componentStackType: 'legacy',
        componentStack: [],
        codeFrame: {
          fileName: _fileName2,
          location: null,
          content: _codeFrame2
        },
        message: {
          content: _content2,
          substitutions: []
        },
        category: `${_fileName2}-${1}-${1}`,
        extraData: error.extraData
      };
    }
  }
  if (message.match(RE_TRANSFORM_ERROR)) {
    return {
      level: 'syntax',
      stack: error.stack,
      isComponentError: error.isComponentError,
      componentStackType: 'legacy',
      componentStack: [],
      message: {
        content: message,
        substitutions: []
      },
      category: message,
      extraData: error.extraData
    };
  }
  var componentStack = error.componentStack;
  if (error.isFatal || error.isComponentError) {
    if (componentStack != null) {
      var _parseComponentStack = parseComponentStack(componentStack),
        type = _parseComponentStack.type,
        stack = _parseComponentStack.stack;
      return Object.assign({
        level: 'fatal',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStackType: type,
        componentStack: stack,
        extraData: error.extraData
      }, parseInterpolation([message]));
    } else {
      return Object.assign({
        level: 'fatal',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStackType: 'legacy',
        componentStack: [],
        extraData: error.extraData
      }, parseInterpolation([message]));
    }
  }
  if (componentStack != null) {
    var _parseComponentStack2 = parseComponentStack(componentStack),
      _type = _parseComponentStack2.type,
      _stack = _parseComponentStack2.stack;
    return Object.assign({
      level: 'error',
      stack: error.stack,
      isComponentError: error.isComponentError,
      componentStackType: _type,
      componentStack: _stack,
      extraData: error.extraData
    }, parseInterpolation([message]));
  }
  return Object.assign({
    level: 'error',
    stack: error.stack,
    isComponentError: error.isComponentError,
    extraData: error.extraData
  }, parseLogBoxLog([message]));
}
function withoutANSIColorStyles(message) {
  if (typeof message !== 'string') {
    return message;
  }
  return message.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
}
function parseLogBoxLog(args) {
  var message = withoutANSIColorStyles(args[0]);
  var argsWithoutComponentStack = [];
  var componentStack = [];
  var componentStackType = 'legacy';
  if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {
    var lastArg = args[args.length - 1];
    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {
      argsWithoutComponentStack = args.slice(0, -1);
      argsWithoutComponentStack[0] = message.slice(0, -2);
      var _parseComponentStack3 = parseComponentStack(lastArg),
        type = _parseComponentStack3.type,
        stack = _parseComponentStack3.stack;
      componentStack = stack;
      componentStackType = type;
    }
  }
  if (componentStack.length === 0 && argsWithoutComponentStack.length === 0) {
    for (var arg of args) {
      if (typeof arg === 'string' && isComponentStack(arg)) {
        var messageEndIndex = arg.search(RE_COMPONENT_STACK_LINE);
        if (messageEndIndex < 0) {
          messageEndIndex = arg.search(/\n/);
        }
        if (messageEndIndex > 0) {
          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));
        }
        var _parseComponentStack4 = parseComponentStack(arg),
          _type2 = _parseComponentStack4.type,
          _stack2 = _parseComponentStack4.stack;
        componentStack = _stack2;
        componentStackType = _type2;
      } else {
        argsWithoutComponentStack.push(arg);
      }
    }
  }
  return Object.assign({}, parseInterpolation(argsWithoutComponentStack), {
    componentStack: componentStack,
    componentStackType: componentStackType
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,