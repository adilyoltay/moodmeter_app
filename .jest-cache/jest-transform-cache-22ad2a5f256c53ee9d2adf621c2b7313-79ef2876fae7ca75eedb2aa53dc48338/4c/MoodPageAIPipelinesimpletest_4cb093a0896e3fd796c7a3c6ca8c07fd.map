{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","removeItem","clear","Object","defineProperty","exports","value","_require","require","describe","thresholdScenarios","days","quality","expectedBadge","it","moodAnalytics","totalEntries","dateRange","start","Date","now","end","determinedQuality","expect","toBe","boundaryDays","TEST_TTL_MS","currentMeta","source","freshnessMs","processedAt","toBeLessThan","expiredMeta","toBeGreaterThan","cachedMeta","sampleSize","suggestion","content","meta","shouldShowRibbon","undefined","error","Error","e","toBeTruthy","averageMoodScore","trendDirection","consistency","isHighQuality","toBeGreaterThanOrEqual","sparseMoodData","TEST_MODE","process","env","parseInt","moodCacheTTL"],"sources":["MoodPageAIPipeline.simple.test.tsx"],"sourcesContent":["/**\n * ðŸ§ª Simplified Integration Tests - Mood Page Quality Ribbon\n * \n * Uses minimal components to avoid RNTL rendering issues\n */\n\nimport type { ProvenanceSource, QualityLevel } from '@/features/ai/insights/insightRegistry';\n\n// Mock dependencies\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n}));\n\ndescribe('Mood Page Quality Ribbon - Simplified Tests', () => {\n  \n  describe('[QR:mood:threshold] N-Threshold Quality Tests', () => {\n    const thresholdScenarios = [\n      { days: 16, quality: 'high' as QualityLevel, expectedBadge: 'High' },\n      { days: 10, quality: 'medium' as QualityLevel, expectedBadge: 'Med' },\n      { days: 4, quality: 'low' as QualityLevel, expectedBadge: 'Low' }\n    ];\n\n    it('[QR:mood:high] should show High quality for 16 days of data', () => {\n      const days = 16;\n      const quality = 'high' as QualityLevel;\n      const expectedBadge = 'High';\n      \n      // Simulate mood analytics with specific sample size\n      const moodAnalytics = {\n        totalEntries: days,\n        dateRange: {\n          start: new Date(Date.now() - days * 24 * 60 * 60 * 1000),\n          end: new Date()\n        }\n      };\n      \n      // Determine quality based on n-threshold\n      let determinedQuality: QualityLevel;\n      if (moodAnalytics.totalEntries >= 14) {\n        determinedQuality = 'high';\n      } else if (moodAnalytics.totalEntries >= 7) {\n        determinedQuality = 'medium';\n      } else {\n        determinedQuality = 'low';\n      }\n      \n      expect(determinedQuality).toBe(quality);\n      expect(moodAnalytics.totalEntries).toBe(days);\n    });\n\n    it('[QR:mood:medium] should show Med quality for 10 days of data', () => {\n      const days = 10;\n      const quality = 'medium' as QualityLevel;\n      const expectedBadge = 'Med';\n      \n      // Simulate mood analytics with specific sample size\n      const moodAnalytics = {\n        totalEntries: days,\n        dateRange: {\n          start: new Date(Date.now() - days * 24 * 60 * 60 * 1000),\n          end: new Date()\n        }\n      };\n      \n      // Determine quality based on n-threshold\n      let determinedQuality: QualityLevel;\n      if (moodAnalytics.totalEntries >= 14) {\n        determinedQuality = 'high';\n      } else if (moodAnalytics.totalEntries >= 7) {\n        determinedQuality = 'medium';\n      } else {\n        determinedQuality = 'low';\n      }\n      \n      expect(determinedQuality).toBe(quality);\n      expect(moodAnalytics.totalEntries).toBe(days);\n    });\n\n    it('[QR:mood:low] should show Low quality for 4 days of data', () => {\n      const days = 4;\n      const quality = 'low' as QualityLevel;\n      const expectedBadge = 'Low';\n      \n      // Simulate mood analytics with specific sample size\n      const moodAnalytics = {\n        totalEntries: days,\n        dateRange: {\n          start: new Date(Date.now() - days * 24 * 60 * 60 * 1000),\n          end: new Date()\n        }\n      };\n      \n      // Determine quality based on n-threshold\n      let determinedQuality: QualityLevel;\n      if (moodAnalytics.totalEntries >= 14) {\n        determinedQuality = 'high';\n      } else if (moodAnalytics.totalEntries >= 7) {\n        determinedQuality = 'medium';\n      } else {\n        determinedQuality = 'low';\n      }\n      \n      expect(determinedQuality).toBe(quality);\n      expect(moodAnalytics.totalEntries).toBe(days);\n    });\n\n    it('[QR:mood:medium] should handle boundary at exactly 7 days', () => {\n      const boundaryDays = 7;\n      \n      const moodAnalytics = {\n        totalEntries: boundaryDays\n      };\n      \n      // Exactly 7 should be medium\n      const quality = moodAnalytics.totalEntries >= 14 ? 'high' :\n                     moodAnalytics.totalEntries >= 7 ? 'medium' : 'low';\n      \n      expect(quality).toBe('medium');\n    });\n\n    it('[QR:mood:high] should handle boundary at exactly 14 days', () => {\n      const boundaryDays = 14;\n      \n      const moodAnalytics = {\n        totalEntries: boundaryDays\n      };\n      \n      // Exactly 14 should be high\n      const quality = moodAnalytics.totalEntries >= 14 ? 'high' :\n                     moodAnalytics.totalEntries >= 7 ? 'medium' : 'low';\n      \n      expect(quality).toBe('high');\n    });\n  });\n\n  describe('[QR:mood:cache] Cache Behavior Tests', () => {\n    it('[QR:mood:cache] should transition from Fresh to Cache based on TTL', () => {\n      const TEST_TTL_MS = 5000;\n      \n      // Initial Fresh state\n      let currentMeta = {\n        source: 'unified' as ProvenanceSource,\n        freshnessMs: 1000,\n        processedAt: Date.now()\n      };\n      \n      expect(currentMeta.source).toBe('unified');\n      expect(currentMeta.freshnessMs).toBeLessThan(TEST_TTL_MS);\n      \n      // After TTL expires\n      const expiredMeta = {\n        source: 'cache' as ProvenanceSource,\n        freshnessMs: TEST_TTL_MS + 1000,\n        processedAt: Date.now() - TEST_TTL_MS - 1000\n      };\n      \n      expect(expiredMeta.source).toBe('cache');\n      expect(expiredMeta.freshnessMs).toBeGreaterThan(TEST_TTL_MS);\n    });\n\n    it('[QR:mood:cache] should show Cache badge for cached mood data', () => {\n      const cachedMeta = {\n        source: 'cache' as ProvenanceSource,\n        quality: 'high' as QualityLevel,\n        sampleSize: 20,\n        freshnessMs: 3600000 // 1 hour old\n      };\n      \n      expect(cachedMeta.source).toBe('cache');\n      expect(cachedMeta.freshnessMs).toBeGreaterThan(60000); // Older than 1 minute\n    });\n  });\n\n  describe('[QR:mood:hidden] Visibility Tests', () => {\n    it('[QR:mood:hidden] should hide when metadata is missing', () => {\n      const suggestion = {\n        content: 'Mood suggestion text',\n        meta: null // No metadata\n      };\n      \n      const shouldShowRibbon = suggestion.meta !== null && suggestion.meta !== undefined;\n      \n      expect(shouldShowRibbon).toBe(false);\n    });\n\n    it('[QR:mood:hidden] should hide when pipeline fails', () => {\n      let error = null;\n      \n      // Simulate pipeline failure\n      try {\n        throw new Error('Mood pipeline processing failed');\n      } catch (e) {\n        error = e;\n      }\n      \n      const shouldShowRibbon = error === null;\n      \n      expect(shouldShowRibbon).toBe(false);\n      expect(error).toBeTruthy();\n    });\n  });\n\n  describe('[QR:mood:analytics] Analytics Integration Tests', () => {\n    it('[QR:mood:high] should include mood analytics in quality calculation', () => {\n      const moodAnalytics = {\n        totalEntries: 30,\n        averageMoodScore: 7.5,\n        trendDirection: 'improving' as const,\n        consistency: 0.85\n      };\n      \n      // High quality criteria\n      const isHighQuality = \n        moodAnalytics.totalEntries >= 14 &&\n        moodAnalytics.consistency > 0.7;\n      \n      expect(isHighQuality).toBe(true);\n      expect(moodAnalytics.totalEntries).toBeGreaterThanOrEqual(14);\n    });\n\n    it('[QR:mood:low] should handle sparse mood data correctly', () => {\n      const sparseMoodData = {\n        totalEntries: 2,\n        dateRange: {\n          start: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n          end: new Date()\n        }\n      };\n      \n      const quality = sparseMoodData.totalEntries >= 14 ? 'high' :\n                     sparseMoodData.totalEntries >= 7 ? 'medium' : 'low';\n      \n      expect(quality).toBe('low');\n      expect(sparseMoodData.totalEntries).toBeLessThan(7);\n    });\n  });\n\n  describe('[QR:mood:testmode] Test Mode Behavior', () => {\n    it('[QR:mood:testmode] should respect TEST_TTL_MS for mood cache', () => {\n      const TEST_MODE = process.env.TEST_MODE === '1';\n      const TEST_TTL_MS = parseInt(process.env.TEST_TTL_MS || '5000');\n      \n      expect(TEST_MODE).toBe(true);\n      expect(TEST_TTL_MS).toBe(5000);\n      \n      // Mood cache should use test TTL\n      const moodCacheTTL = TEST_MODE ? TEST_TTL_MS : 3600000;\n      expect(moodCacheTTL).toBe(5000);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}