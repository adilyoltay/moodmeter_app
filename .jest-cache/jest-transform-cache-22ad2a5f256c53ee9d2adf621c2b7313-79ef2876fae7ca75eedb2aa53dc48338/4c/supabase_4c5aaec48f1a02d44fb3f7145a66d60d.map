{"version":3,"names":["_netinfo","_interopRequireDefault","require","_aiTelemetry","_deadLetterQueue","_categoryMapping","Linking","_interopRequireWildcard","_expoConstants","_expoAuthSession","_supabase","_privacy","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","SUPABASE_URL","_env2","env","EXPO_PUBLIC_SUPABASE_URL","SUPABASE_ANON_KEY","EXPO_PUBLIC_SUPABASE_ANON_KEY","console","error","__DEV__","Error","warn","SupabaseNativeService","_classCallCheck2","currentUser","userProfileCache","Map","client","sharedClient","log","_createClass2","key","value","_initialize","_asyncToGenerator2","_yield$this$client$au","auth","refreshSession","session","data","message","user","_session$user$app_met","email","provider","app_metadata","confirmed","email_confirmed_at","_yield$this$client$au2","getSession","currentSession","sessionError","_currentSession$user$","initialize","apply","arguments","_signUpWithEmail","password","name","_yield$this$client$au3","signUp","options","full_name","needsConfirmation","signUpWithEmail","_x","_x2","_x3","_signInWithEmail","_yield$this$client$au4","signInWithPassword","signInWithEmail","_x4","_x5","_signInWithGoogle","isExpoGo","Constants","appOwnership","redirectUrl","makeRedirectUri","path","createURL","_yield$this$client$au5","signInWithOAuth","redirectTo","queryParams","access_type","prompt","skipBrowserRedirect","JSON","stringify","url","signInWithGoogle","_signOut","_this","net","NetInfo","fetch","isOnline","isConnected","isInternetReachable","tryGlobal","_ref","attempt","max","trackAIInteraction","AIEventType","SYSTEM_STATUS","event","_unused","_yield$_this$client$a","signOut","scope","Promise","setTimeout","globalOk","_unused2","_unused3","_setSession","tokens","_yield$this$client$au6","setSession","access_token","refresh_token","_x6","_resendEmailConfirmation","_yield$this$client$au7","resend","type","resendEmailConfirmation","_x7","onAuthStateChange","callback","_this2","_session$user","_session$user2","_session$user3","_session$user4","hasSession","hasUser","accessToken","getCurrentUser","_getUserProfile","userId","_options$cacheMs","cacheMs","forceRefresh","cached","Date","now","fetchedAt","_yield$this$client$fr","from","select","eq","single","code","id","user_id","ocd_symptoms","daily_goal","ybocs_score","ybocs_severity","onboarding_completed","created_at","toISOString","updated_at","getUserProfile","_x8","_x9","_createUserProfile","_yield$this$client$fr2","insert","createUserProfile","_x0","_x1","_x10","_x11","_saveUserProfile","profile","ensureUserProfileExists","_yield$this$client$fr3","upsert","assign","saveUserProfile","_x12","_upsertAIProfile","profileData","onboardingCompleted","length","undefined","payload","profile_data","completed_at","_yield$this$client$fr4","onConflict","upsertAIProfile","_x13","_x14","_upsertAITreatmentPlan","planData","status","plan_data","_yield$this$client$fr5","upsertAITreatmentPlan","_x15","_x16","mapCategoryForDatabase","category","mapToDatabaseCategory","_saveCompulsion","compulsion","_sanitizedCompulsion$","sanitizedCompulsion","notes","sanitizePII","trigger","mappedCompulsion","subcategory","timestamp","standardized","dataStandardizer","standardizeCompulsionData","_yield$this$client$fr6","saveCompulsion","_x17","_getCompulsions","startDate","endDate","query","order","ascending","gte","lte","_yield$query","compulsions","map","record","getCompulsions","_x18","_x19","_x20","_deleteCompulsion","uuidRegex","test","_yield$this$client$fr7","delete","deleteCompulsion","_x21","_createGamificationProfile","_yield$this$client$fr8","streak_count","healing_points_total","healing_points_today","streak_last_update","split","level","achievements","micro_rewards","createGamificationProfile","_x22","_ensureUserProfileExists","_yield$this$client$fr9","existingUser","_yield$this$client$au8","getUser","authUser","_authUser$user$user_m","_authUser$user$email","_authUser$user$app_me","_yield$this$client$fr0","user_metadata","_x23","_updateGamificationProfile","updates","_yield$this$client$fr1","update","deadLetterQueue","addToDeadLetter","entity","errorMessage","STORAGE_RETRY_SUCCESS","attempts","_unused4","updateGamificationProfile","_x24","_x25","_createCompulsion","saved","createCompulsion","_x26","_getUserCompulsions","limit","_yield$this$client$fr10","getUserCompulsions","_x27","computeContentHash","text","normalized","trim","replace","toLowerCase","hash","char","charCodeAt","Math","abs","toString","_saveVoiceCheckin","_error$message","sanitizedRecord","contentHash","mood","confidence","lang","content_hash","_yield$this$client$fr11","ignoreDuplicates","includes","saveVoiceCheckin","_x28","_saveThoughtRecord","_error$message2","automatic_thought","evidence_for","evidence_against","new_view","distortions","_yield$this$client$fr12","saveThoughtRecord","_x29","_saveCBTRecord","thought","reframe","random","substr","_yield$this$client$fr13","mood_before","mood_after","saveCBTRecord","_x30","_getCBTRecords","dateRange","start","end","_yield$query$limit","getCBTRecords","_x31","_x32","_deleteCBTRecord","recordId","_yield$this$client$fr14","deleteCBTRecord","_x33","_saveVoiceSessionSummary","started_at","ended_at","duration_ms","transcription_count","error_count","saveVoiceSessionSummary","_x34","_saveBreathSession","_yield$this$client$fr15","saveBreathSession","_x35","_saveMoodEntry","entry","sanitizedEntry","contentText","round","mood_score","energy_level","anxiety_level","slice","_yield$this$client$fr16","_error$message3","saveMoodEntry","_x36","_getMoodEntries","days","setDate","getDate","_yield$this$client$fr17","supabaseError","details","hint","getMoodEntries","_x37","_updateMoodEntry","entryId","_yield$this$client$fr18","updateMoodEntry","_x38","_x39","_deleteMoodEntry","isUUID","_yield$this$client$fr19","deleteMoodEntry","_x40","_deleteVoiceCheckin","checkinId","_yield$this$client$fr20","deleteVoiceCheckin","_x41","_deleteThoughtRecord","_yield$this$client$fr21","deleteThoughtRecord","_x42","initializeSupabase","_initializeSupabase","supabaseService","exports","_default"],"sources":["supabase.ts"],"sourcesContent":["import { SupabaseClient, User, Session, AuthError } from '@supabase/supabase-js';\nimport NetInfo from '@react-native-community/netinfo';\nimport { trackAIInteraction, AIEventType } from '@/features/ai/telemetry/aiTelemetry';\nimport deadLetterQueue from '@/services/sync/deadLetterQueue';\nimport { mapToCanonicalCategory, mapToDatabaseCategory } from '@/utils/categoryMapping';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\nimport { makeRedirectUri } from 'expo-auth-session';\nimport { supabase as sharedClient } from '@/lib/supabase';\nimport { sanitizePII } from '@/utils/privacy'; // ‚úÖ F-06 FIX: Add PII sanitization\n\n// üîê SECURE CONFIGURATION - Environment variables are REQUIRED\nconst SUPABASE_URL = process.env.EXPO_PUBLIC_SUPABASE_URL;\nconst SUPABASE_ANON_KEY = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;\n\n// üö® CRITICAL SECURITY CHECK: No fallback values for security\nif (!SUPABASE_URL || !SUPABASE_ANON_KEY) {\n  console.error('üö® CRITICAL: Supabase credentials missing from environment variables');\n  console.error('Required: EXPO_PUBLIC_SUPABASE_URL, EXPO_PUBLIC_SUPABASE_ANON_KEY');\n  \n  // Production'da g√ºvenli bir ≈üekilde app'i kapatmak yerine hata fƒ±rlat\n  if (!__DEV__) {\n    throw new Error('SUPABASE_CREDENTIALS_MISSING: Application cannot start without proper credentials');\n  }\n  \n  console.warn('‚ö†Ô∏è Development mode: Using demo credentials for testing');\n  // Development'da fallback sadece test i√ßin\n}\n\n// ===========================\n// DATABASE TYPES\n// ===========================\n\nexport interface UserProfile {\n  id: string;\n  email: string;\n  name: string;\n  provider: 'email' | 'google';\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface OCDProfile {\n  id: string;\n  user_id: string;\n  ocd_symptoms: string[];\n  daily_goal: number;\n  ybocs_score: number;\n  ybocs_severity: string;\n  onboarding_completed: boolean;\n  created_at: string;\n}\n\nexport interface CompulsionRecord {\n  id: string;\n  user_id: string;\n  category: string;\n  subcategory?: string;\n  resistance_level: number;\n  trigger?: string;\n  notes?: string;\n  timestamp: string;\n}\n\n\n\nexport interface TherapySession {\n  id: string;\n  user_id: string;\n  exercise_id: string;\n  exercise_name: string;\n  category: string;\n  duration_seconds: number;\n  anxiety_initial: number;\n  anxiety_final: number;\n  anxiety_readings: any[];\n  completed: boolean;\n  timestamp: string;\n}\n\nexport interface GamificationProfile {\n  user_id: string;\n  streak_count: number;\n  healing_points_total: number;\n  healing_points_today: number;\n  streak_last_update: string; // date (YYYY-MM-DD)\n  level: number;\n  achievements: string[];\n  micro_rewards: any[];\n  // created_at Supabase ≈üemasƒ±nda yok; updated_at trigger ile g√ºncellenir\n  updated_at?: string;\n}\n\nexport interface VoiceCheckinRecord {\n  id?: string;\n  user_id: string;\n  text: string;\n  mood: number;\n  trigger: string;\n  confidence: number;\n  lang: string;\n  created_at?: string;\n}\n\nexport interface ThoughtRecordItem {\n  id?: string;\n  user_id: string;\n  automatic_thought: string;\n  evidence_for?: string;\n  evidence_against?: string;\n  distortions: string[];\n  new_view?: string;\n  lang: string;\n  created_at?: string;\n}\n\nexport interface VoiceSessionDB {\n  id?: string;\n  user_id: string;\n  started_at: string;\n  ended_at?: string;\n  duration_ms?: number;\n  transcription_count?: number;\n  error_count?: number;\n  created_at?: string;\n}\n\nexport type BreathSessionDB = {\n  user_id: string;\n  protocol: 'box' | '478' | 'paced';\n  duration_ms: number;\n  started_at: string;\n  completed_at?: string | null;\n};\n\n// ===========================\n// AUTH RESULT TYPES\n// ===========================\n\nexport interface AuthResult {\n  user: User | null;\n  session: Session | null;\n  needsConfirmation?: boolean;\n}\n\nexport interface SignUpResult extends AuthResult {\n  needsConfirmation: boolean;\n}\n\n// ===========================\n// SUPABASE SERVICE CLASS\n// ===========================\n\nclass SupabaseNativeService {\n  private client: SupabaseClient;\n  private currentUser: User | null = null;\n  private userProfileCache: Map<string, { data: OCDProfile | null; fetchedAt: number }> = new Map();\n\n  constructor() {\n    // Tek supabase client kullanƒ±mƒ± (lib/supabase.ts)\n    // Ortak istemci, storage/refresh ayarlarƒ±nƒ± zaten i√ßerir\n    // Ortam deƒüi≈ükenleri lib i√ßinde doƒürulanƒ±r\n    this.client = sharedClient as unknown as SupabaseClient;\n    console.log('‚úÖ Supabase Native Service initialized (shared client)');\n  }\n\n  // ===========================\n  // CORE AUTH METHODS\n  // ===========================\n\n  async initialize(): Promise<User | null> {\n    try {\n      console.log('üîê Initializing Supabase auth...');\n      \n      // First, try to refresh the session to catch any OAuth callbacks\n      console.log('üîê Attempting session refresh...');\n      const { data: { session }, error } = await this.client.auth.refreshSession();\n      \n      if (error) {\n        console.log('üîê Session refresh error (normal if no session):', error.message);\n      }\n      \n      if (session?.user) {\n        this.currentUser = session.user;\n        console.log('‚úÖ Refreshed session found:', {\n          email: session.user.email,\n          provider: session.user.app_metadata?.provider,\n          confirmed: !!session.user.email_confirmed_at\n        });\n        return session.user;\n      } else {\n        console.log('üîê No session from refresh, checking current session...');\n      }\n      \n      // If no refreshed session, get current session\n      console.log('üîê Getting current session...');\n      const { data: { session: currentSession }, error: sessionError } = await this.client.auth.getSession();\n      \n      if (sessionError) {\n        console.error('‚ùå Session error:', sessionError);\n        return null;\n      }\n      \n      if (currentSession?.user) {\n        this.currentUser = currentSession.user;\n        console.log('‚úÖ Existing session found:', {\n          email: currentSession.user.email,\n          provider: currentSession.user.app_metadata?.provider,\n          confirmed: !!currentSession.user.email_confirmed_at\n        });\n        return currentSession.user;\n      }\n      \n      console.log('‚ÑπÔ∏è No existing session');\n      return null;\n    } catch (error) {\n      console.error('‚ùå Auth initialization failed:', error);\n      return null;\n    }\n  }\n\n  async signUpWithEmail(email: string, password: string, name: string): Promise<SignUpResult> {\n    try {\n      console.log('üìß Supabase native signup:', email);\n      \n      const { data, error } = await this.client.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            name,\n            full_name: name,\n            provider: 'email'\n          }\n        }\n      });\n\n      if (error) {\n        console.error('‚ùå Signup error:', error);\n        throw error;\n      }\n\n      // Check if email confirmation is needed\n      if (data.user && !data.session) {\n        console.log('üìß Email confirmation required for:', email);\n        return {\n          user: data.user,\n          session: null,\n          needsConfirmation: true\n        };\n      }\n\n      // Immediate login (email confirmation disabled)\n      if (data.user && data.session) {\n        this.currentUser = data.user;\n        console.log('‚úÖ Immediate signup success:', email);\n        return {\n          user: data.user,\n          session: data.session,\n          needsConfirmation: false\n        };\n      }\n\n      throw new Error('Unexpected signup result');\n    } catch (error) {\n      console.error('‚ùå Supabase signup failed:', error);\n      throw error;\n    }\n  }\n\n  async signInWithEmail(email: string, password: string): Promise<AuthResult> {\n    try {\n      console.log('üîê Supabase native login:', email);\n      \n      const { data, error } = await this.client.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        console.error('‚ùå Login error:', error);\n        throw error;\n      }\n\n      if (data.user && data.session) {\n        this.currentUser = data.user;\n        console.log('‚úÖ Login successful:', email);\n        return {\n          user: data.user,\n          session: data.session\n        };\n      }\n\n      throw new Error('Login failed: No user or session');\n    } catch (error) {\n      console.error('‚ùå Supabase login failed:', error);\n      throw error;\n    }\n  }\n\n  async signInWithGoogle(): Promise<any> {\n    try {\n      console.log('üîê Google OAuth initiation...');\n      // Use proxy redirect in Expo Go to avoid IP-based deep links and loops\n      const isExpoGo = Constants.appOwnership === 'expo';\n      const redirectUrl = isExpoGo\n        ? makeRedirectUri({ path: 'auth/callback' })\n        : Linking.createURL('auth/callback');\n      console.log('üîê Redirect URL will be:', redirectUrl);\n      \n      const { data, error } = await this.client.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: redirectUrl,\n          queryParams: {\n            access_type: 'offline',\n            prompt: 'consent',\n          },\n          skipBrowserRedirect: true,\n        }\n      });\n\n      if (error) {\n        console.error('‚ùå Google OAuth error:', error);\n        throw error;\n      }\n      \n      console.log('üîê Google OAuth data received:', JSON.stringify(data, null, 2));\n      \n      // Return the URL for in-app WebView instead of opening browser\n      if (data.url) {\n        console.log('üîê OAuth URL ready for WebView:', data.url);\n        return data; // Return data with URL for WebView\n      } else {\n        console.error('‚ùå No OAuth URL received from Supabase');\n        throw new Error('No OAuth URL received');\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Google OAuth failed:', error);\n      throw error;\n    }\n  }\n\n  async signOut(): Promise<void> {\n    try {\n      console.log('üîê Signing out...');\n      const net = await NetInfo.fetch();\n      const isOnline = !!net.isConnected && net.isInternetReachable !== false;\n\n      const tryGlobal = async () => {\n        let attempt = 0;\n        const max = 3;\n        while (attempt < max) {\n          try {\n            attempt++;\n            if (attempt > 1) {\n              try { await trackAIInteraction(AIEventType.SYSTEM_STATUS, { event: 'auth_signout_retry', attempt }); } catch {}\n            }\n            const { error } = await this.client.auth.signOut({ scope: 'global' } as any);\n            if (error) throw error;\n            return true;\n          } catch (e) {\n            if (attempt >= max) return false;\n            await new Promise(r => setTimeout(r, 300 * attempt));\n          }\n        }\n        return false;\n      };\n\n      let globalOk = false;\n      if (isOnline) globalOk = await tryGlobal();\n\n      if (!globalOk) {\n        try { await this.client.auth.signOut({ scope: 'local' } as any); } catch {}\n      }\n\n      this.currentUser = null;\n      console.log(`‚úÖ Sign out successful (${globalOk ? 'global' : 'local'})`);\n    } catch (error) {\n      console.error('‚ùå Sign out failed:', error);\n      // Ensure local state cleared even if error thrown\n      this.currentUser = null;\n      try { await this.client.auth.signOut({ scope: 'local' } as any); } catch {}\n      throw error;\n    }\n  }\n\n  async setSession(tokens: { access_token: string; refresh_token: string }): Promise<void> {\n    try {\n      if (__DEV__) console.log('üîê Setting session with tokens (masked)...');\n      \n      const { data, error } = await this.client.auth.setSession({\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token\n      });\n      \n      if (error) {\n        console.error('‚ùå Set session error:', error);\n        throw error;\n      }\n      \n      if (data.user) {\n        this.currentUser = data.user;\n        console.log('‚úÖ Session set successfully, user:', data.user.email);\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Set session failed:', error);\n      throw error;\n    }\n  }\n\n  async resendEmailConfirmation(email: string): Promise<void> {\n    try {\n      const { error } = await this.client.auth.resend({\n        type: 'signup',\n        email: email\n      });\n\n      if (error) throw error;\n      console.log('‚úÖ Email confirmation resent to:', email);\n    } catch (error) {\n      console.error('‚ùå Resend email confirmation failed:', error);\n      throw error;\n    }\n  }\n\n  // ===========================\n  // AUTH STATE MANAGEMENT\n  // ===========================\n\n  onAuthStateChange(callback: (event: string, session: Session | null) => void) {\n    return this.client.auth.onAuthStateChange((event, session) => {\n      console.log('üîê Auth state changed:', event, 'User:', session?.user?.email || 'none');\n      console.log('üîê Session details:', {\n        hasSession: !!session,\n        hasUser: !!session?.user,\n        email: session?.user?.email,\n        provider: session?.user?.app_metadata?.provider,\n        confirmed: session?.user?.email_confirmed_at,\n        accessToken: session?.access_token ? 'present' : 'missing'\n      });\n      this.currentUser = session?.user || null;\n      callback(event, session);\n    });\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUser;\n  }\n\n  // ===========================\n  // DATABASE OPERATIONS\n  // ===========================\n\n  async getUserProfile(userId: string, options?: { forceRefresh?: boolean; cacheMs?: number }): Promise<OCDProfile | null> {\n    try {\n      const cacheMs = options?.cacheMs ?? 60_000;\n      const forceRefresh = options?.forceRefresh === true;\n      const cached = this.userProfileCache.get(userId);\n      if (!forceRefresh && cached && Date.now() - cached.fetchedAt < cacheMs) {\n        if (__DEV__) console.log('üóÑÔ∏è Using cached user profile for', userId);\n        return cached.data;\n      }\n      console.log('üîç Fetching user profile from database...', userId);\n      \n      const { data, error } = await this.client\n        .from('user_profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      console.log('‚úÖ User profile fetched from database');\n      this.userProfileCache.set(userId, { data: data ?? null, fetchedAt: Date.now() });\n      return data ?? null;\n    } catch (error) {\n      console.error('‚ùå Get user profile failed:', error);\n      \n      // üîß DEV MODE: Return fallback profile to prevent app crashes\n      if (__DEV__) {\n        console.log('üîß DEV: Returning fallback profile to continue app functionality');\n        return {\n          id: userId,\n          user_id: userId,\n          ocd_symptoms: ['contamination', 'checking'], // Default symptoms\n          daily_goal: 3,\n          ybocs_score: 12,\n          ybocs_severity: 'mild',\n          onboarding_completed: true,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n      }\n      \n      return null;\n    }\n  }\n\n  async createUserProfile(userId: string, email: string, name: string, provider: 'email' | 'google'): Promise<UserProfile> {\n    try {\n      const { data, error } = await this.client\n        .from('users')\n        .insert({\n          id: userId,\n          email,\n          name,\n          provider,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      console.log('‚úÖ User profile created:', email);\n      return data;\n    } catch (error) {\n      console.error('‚ùå Create user profile failed:', error);\n      throw error;\n    }\n  }\n\n  // ===========================\n  // USER PROFILE METHODS\n  // ===========================\n\n  async saveUserProfile(profile: Omit<OCDProfile, 'id' | 'created_at'>): Promise<OCDProfile> {\n    try {\n      console.log('üîÑ Saving user profile to database...', profile);\n      \n      // Ensure user exists in public.users table\n      await this.ensureUserProfileExists(profile.user_id);\n      \n      const { data, error } = await this.client\n        .from('user_profiles')\n        .upsert({\n          ...profile,\n          updated_at: new Date().toISOString(),\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      console.log('‚úÖ User profile saved to database:', data.user_id);\n      return data;\n    } catch (error) {\n      console.error('‚ùå Save user profile failed:', error);\n      throw error;\n    }\n  }\n\n  // ===========================\n  // AI PROFILES & TREATMENT PLANS\n  // ===========================\n  /**\n   * AI profili upsert eder. Onboarding tamamlandƒ±ysa completed_at set edilir.\n   */\n  async upsertAIProfile(\n    userId: string,\n    profileData: any,\n    onboardingCompleted: boolean = true\n  ): Promise<void> {\n    try {\n      await this.ensureUserProfileExists(userId);\n\n      const payload: any = {\n        user_id: userId,\n        profile_data: profileData,\n        onboarding_completed: onboardingCompleted,\n        updated_at: new Date().toISOString(),\n      };\n      if (onboardingCompleted) {\n        payload.completed_at = new Date().toISOString();\n      }\n\n      const { error } = await this.client\n        .from('ai_profiles')\n        .upsert(payload, { onConflict: 'user_id' });\n\n      if (error) throw error;\n      console.log('‚úÖ AI profile upserted:', userId);\n    } catch (error) {\n      console.error('‚ùå upsertAIProfile failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * AI tedavi planƒ±nƒ± upsert eder.\n   */\n  async upsertAITreatmentPlan(\n    userId: string,\n    planData: any,\n    status: string = 'active'\n  ): Promise<void> {\n    try {\n      await this.ensureUserProfileExists(userId);\n\n      const payload = {\n        user_id: userId,\n        plan_data: planData,\n        status,\n        updated_at: new Date().toISOString(),\n      };\n\n      const { error } = await this.client\n        .from('ai_treatment_plans')\n        .upsert(payload, { onConflict: 'user_id' });\n\n      if (error) throw error;\n      console.log('‚úÖ AI treatment plan upserted:', userId);\n    } catch (error) {\n      console.error('‚ùå upsertAITreatmentPlan failed:', error);\n      throw error;\n    }\n  }\n\n  // ===========================\n  // COMPULSION METHODS\n  // ===========================\n\n  private mapCategoryForDatabase(category: string): string {\n    // DB CHECK constraint ile uyumlu kategoriye indirger\n    return mapToDatabaseCategory(category);\n  }\n\n  // ‚úÖ F-06 FIX: Add PII sanitization for server-bound writes\n  async saveCompulsion(compulsion: Omit<CompulsionRecord, 'id' | 'timestamp'>): Promise<CompulsionRecord> {\n    try {\n      console.log('üîÑ Saving compulsion to database...', compulsion);\n      \n      // Ensure user exists in public.users table\n      await this.ensureUserProfileExists(compulsion.user_id);\n      \n      // ‚úÖ Sanitize PII fields before server write\n      const sanitizedCompulsion = {\n        ...compulsion,\n        notes: sanitizePII(compulsion.notes || ''),\n        trigger: sanitizePII(compulsion.trigger || ''),\n      };\n      \n      // Map category to canonical/DB-safe and preserve original label in subcategory if provided\n      const mappedCompulsion = {\n        ...sanitizedCompulsion,\n        subcategory: sanitizedCompulsion.subcategory ?? sanitizedCompulsion.category,\n        category: this.mapCategoryForDatabase(sanitizedCompulsion.category),\n        timestamp: new Date().toISOString(),\n      };\n      \n      // Standardize payload (date/category/limits)\n      const standardized = require('@/utils/dataStandardization').dataStandardizer.standardizeCompulsionData(mappedCompulsion);\n      \n      const { data, error } = await this.client\n        .from('compulsions')\n        .upsert(standardized, { onConflict: 'id' })\n        .select()\n        .single();\n\n      if (error) throw error;\n      console.log('‚úÖ Compulsion saved to database:', data.id);\n      return data;\n    } catch (error) {\n      console.error('‚ùå Save compulsion failed:', error);\n      throw error;\n    }\n  }\n\n  async getCompulsions(userId: string, startDate?: string, endDate?: string): Promise<CompulsionRecord[]> {\n    try {\n      console.log('üîç Fetching compulsions from database...', { userId, startDate, endDate });\n      \n      let query = this.client\n        .from('compulsions')\n        .select('*')\n        .eq('user_id', userId)\n        .order('timestamp', { ascending: false });\n\n      if (startDate) query = query.gte('timestamp', startDate);\n      if (endDate) query = query.lte('timestamp', endDate);\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n      \n      // Restore original categories from subcategory field\n      const compulsions = (data || []).map(record => ({\n        ...record,\n        category: record.subcategory || record.category, // Use subcategory if available, fallback to category\n      }));\n\n      console.log(`‚úÖ Fetched ${compulsions.length} compulsions from database`);\n      return compulsions;\n    } catch (error) {\n      console.error('‚ùå Get compulsions failed:', error);\n      return [];\n    }\n  }\n\n  async deleteCompulsion(id: string): Promise<void> {\n    try {\n      console.log('üóëÔ∏è Deleting compulsion from database...', id);\n      \n      // Check if ID is a valid UUID (Supabase format)\n      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n      if (!uuidRegex.test(id)) {\n        console.log('‚ö†Ô∏è Skipping database delete - ID is not a valid UUID (likely a local-only record):', id);\n        return; // Skip database delete for local-only records\n      }\n      \n      const { error } = await this.client\n        .from('compulsions')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      console.log('‚úÖ Compulsion deleted from database:', id);\n    } catch (error) {\n      console.error('‚ùå Delete compulsion failed:', error);\n      throw error;\n    }\n  }\n\n  // ===========================\n  // ‚úÖ REMOVED: ERP SESSION METHODS - ERP module deleted\n  // ===========================\n\n  // ‚úÖ REMOVED: deleteERPSession method - ERP module deleted\n\n  // ===========================\n  // GAMIFICATION METHODS\n  // ===========================\n\n  async createGamificationProfile(userId: string): Promise<GamificationProfile | null> {\n    try {\n      // First ensure user exists in public.users table\n      await this.ensureUserProfileExists(userId);\n      \n      const { data, error } = await this.client\n        .from('gamification_profiles')\n        .upsert({\n          user_id: userId,\n          streak_count: 0,\n          healing_points_total: 0,\n          healing_points_today: 0,\n          streak_last_update: new Date().toISOString().split('T')[0],\n          level: 1,\n          achievements: [],\n          micro_rewards: [],\n          // created_at DB'de yok; updated_at trigger ile g√ºncellenir\n        }, {\n          onConflict: 'user_id'\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      console.log('‚úÖ Gamification profile created/updated:', userId);\n      return data;\n    } catch (error) {\n      console.error('‚ùå Create gamification profile failed:', error);\n      // Don't throw error, return null to prevent app crash\n      return null;\n    }\n  }\n\n  private async ensureUserProfileExists(userId: string): Promise<void> {\n    try {\n      // Check if user exists in public.users\n      const { data: existingUser } = await this.client\n        .from('users')\n        .select('id')\n        .eq('id', userId)\n        .single();\n\n      if (!existingUser) {\n        // Get user info from auth.users\n        const { data: authUser } = await this.client.auth.getUser();\n        \n        if (authUser.user && authUser.user.id === userId) {\n          // Upsert user profile (avoid duplicate key with triggers)\n          const { error } = await this.client\n            .from('users')\n            .upsert({\n              id: userId,\n              email: authUser.user.email || '',\n              name: authUser.user.user_metadata?.name || authUser.user.email?.split('@')[0] || 'User',\n              provider: authUser.user.app_metadata?.provider || 'email',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            }, { onConflict: 'id' });\n\n          if (error) throw error;\n          console.log('‚úÖ User profile upserted in public.users:', userId);\n        }\n      }\n    } catch (error) {\n      console.error('‚ùå Ensure user profile failed:', error);\n      throw error;\n    }\n  }\n\n  async updateGamificationProfile(userId: string, updates: Partial<Omit<GamificationProfile, 'user_id' | 'updated_at'>>): Promise<void> {\n    try {\n      console.log('üîÑ Updating gamification profile...', { userId, updates });\n      \n      const { error } = await this.client\n        .from('gamification_profiles')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('user_id', userId);\n\n      if (error) throw error;\n      console.log('‚úÖ Gamification profile updated:', userId);\n    } catch (error) {\n      console.error('‚ùå Update gamification profile failed:', error);\n      // Offline-first fallback: enqueue for retry and proceed without throwing\n      try {\n        await deadLetterQueue.addToDeadLetter({\n          id: `gpf_${Date.now()}`,\n          type: 'update',\n          entity: 'gamification_profiles',\n          data: { user_id: userId, updates },\n          errorMessage: 'update_gamification_profile_failed',\n        } as any, error);\n        await trackAIInteraction(AIEventType.STORAGE_RETRY_SUCCESS, { key: 'gamification_profile_dead_letter', attempts: 0 });\n      } catch {}\n      // Do not rethrow to avoid redbox; UI continues and sync will retry later\n    }\n  }\n\n  // ===========================\n  // COMPULSION MANAGEMENT  \n  // ===========================\n\n  async createCompulsion(compulsion: Omit<CompulsionRecord, 'id' | 'timestamp'>): Promise<CompulsionRecord | null> {\n    try {\n      console.log('üìù Creating compulsion:', compulsion);\n      // User profile existence is ensured inside saveCompulsion; no need to duplicate here\n      // Reuse saveCompulsion to avoid duplication\n      const saved = await this.saveCompulsion(compulsion);\n      console.log('‚úÖ Compulsion created via saveCompulsion:', saved?.id);\n      return saved;\n    } catch (error) {\n      console.error('‚ùå Failed to create compulsion:', error);\n      return null;\n    }\n  }\n\n  async getUserCompulsions(userId: string, limit: number = 50): Promise<CompulsionRecord[]> {\n    try {\n      const { data, error } = await this.client\n        .from('compulsions')\n        .select('*')\n        .eq('user_id', userId)\n        .order('timestamp', { ascending: false })\n        .limit(limit);\n      \n      if (error) {\n        console.error('‚ùå Error fetching compulsions:', error);\n        return [];\n      }\n      \n      return data || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch compulsions:', error);\n      return [];\n    }\n  }\n\n  // ===========================\n  // NEW: VOICE CHECK-IN / THOUGHT RECORD / VOICE SESSION\n  // ===========================\n\n  /**\n   * Compute content hash for text (client-side SHA-256)\n   */\n  private computeContentHash(text: string): string {\n    // Normalize text: trim, collapse spaces, lowercase\n    const normalized = text.trim().replace(/\\s+/g, ' ').toLowerCase();\n    \n    // Simple hash function for client-side (not cryptographic)\n    // In production, use a proper SHA-256 library\n    let hash = 0;\n    for (let i = 0; i < normalized.length; i++) {\n      const char = normalized.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash).toString(16);\n  }\n\n  // ‚úÖ F-06 FIX: Add PII sanitization for voice checkin fields\n  async saveVoiceCheckin(record: VoiceCheckinRecord): Promise<void> {\n    try {\n      await this.ensureUserProfileExists(record.user_id);\n      \n      // ‚úÖ Sanitize PII fields before server write\n      const sanitizedRecord = {\n        ...record,\n        text: sanitizePII(record.text || ''),\n        trigger: sanitizePII(record.trigger || ''),\n      };\n      \n      // Compute content hash for idempotency using sanitized text\n      const contentHash = this.computeContentHash(sanitizedRecord.text);\n      \n      const payload = {\n        user_id: sanitizedRecord.user_id,\n        text: sanitizedRecord.text,\n        mood: sanitizedRecord.mood,\n        trigger: sanitizedRecord.trigger,\n        confidence: sanitizedRecord.confidence,\n        lang: sanitizedRecord.lang,\n        content_hash: contentHash,\n        created_at: sanitizedRecord.created_at || new Date().toISOString(),\n      };\n      \n      // Use idempotent upsert with content_hash\n      const { error } = await this.client\n        .from('voice_checkins')\n        .upsert(payload, { \n          onConflict: 'user_id,content_hash',\n          ignoreDuplicates: true \n        });\n        \n      if (error && !error.message?.includes('duplicate')) {\n        console.warn('‚ö†Ô∏è saveVoiceCheckin error:', error);\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è saveVoiceCheckin skipped:', (error as any)?.message);\n    }\n  }\n\n  // ‚úÖ F-06 FIX: Add PII sanitization for thought record fields\n  async saveThoughtRecord(record: ThoughtRecordItem): Promise<void> {\n    try {\n      await this.ensureUserProfileExists(record.user_id);\n      \n      // ‚úÖ Sanitize PII fields before server write\n      const sanitizedRecord = {\n        ...record,\n        automatic_thought: sanitizePII(record.automatic_thought || ''),\n        evidence_for: sanitizePII(record.evidence_for || ''),\n        evidence_against: sanitizePII(record.evidence_against || ''),\n        new_view: sanitizePII(record.new_view || ''),\n      };\n      \n      // Compute content hash from sanitized automatic thought\n      const contentHash = this.computeContentHash(sanitizedRecord.automatic_thought);\n      \n      const payload = {\n        user_id: sanitizedRecord.user_id,\n        automatic_thought: sanitizedRecord.automatic_thought,\n        evidence_for: sanitizedRecord.evidence_for,\n        evidence_against: sanitizedRecord.evidence_against,\n        distortions: sanitizedRecord.distortions,\n        new_view: sanitizedRecord.new_view,\n        lang: sanitizedRecord.lang,\n        content_hash: contentHash,\n        created_at: sanitizedRecord.created_at || new Date().toISOString(),\n      };\n      // Use idempotent upsert with content_hash\n      const { error } = await this.client\n        .from('thought_records')\n        .upsert(payload, { \n          onConflict: 'user_id,content_hash',\n          ignoreDuplicates: true \n        });\n        \n      if (error && !error.message?.includes('duplicate')) {\n        console.warn('‚ö†Ô∏è saveThoughtRecord error:', error);\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è saveThoughtRecord skipped (table may not exist):', (error as any)?.message);\n    }\n  }\n\n  // ===========================\n  // CBT THOUGHT RECORDS\n  // ===========================\n\n  // ‚úÖ F-06 FIX: Add PII sanitization for CBT record fields\n  async saveCBTRecord(record: {\n    user_id: string;\n    thought: string;\n    distortions: string[];\n    evidence_for?: string;\n    evidence_against?: string;\n    reframe: string;\n    mood_before: number;\n    mood_after: number;\n    trigger?: string;\n    notes?: string;\n    content_hash?: string; // Allow manual content_hash to bypass trigger\n  }): Promise<{ id: string } | null> {\n    try {\n      await this.ensureUserProfileExists(record.user_id);\n      \n      // ‚úÖ Sanitize PII fields before server write\n      const sanitizedRecord = {\n        ...record,\n        thought: sanitizePII(record.thought || ''),\n        evidence_for: sanitizePII(record.evidence_for || ''),\n        evidence_against: sanitizePII(record.evidence_against || ''),\n        reframe: sanitizePII(record.reframe || ''),\n        trigger: sanitizePII(record.trigger || ''),\n        notes: sanitizePII(record.notes || ''),\n      };\n      \n      // Generate content_hash if not provided (to bypass problematic trigger)\n      const contentHash = sanitizedRecord.content_hash || `cbt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const { data, error } = await this.client\n        .from('thought_records')\n        .insert({\n          user_id: sanitizedRecord.user_id,\n          thought: sanitizedRecord.thought,\n          distortions: sanitizedRecord.distortions || [],\n          evidence_for: sanitizedRecord.evidence_for || null,\n          evidence_against: sanitizedRecord.evidence_against || null,\n          reframe: sanitizedRecord.reframe,\n          mood_before: sanitizedRecord.mood_before,\n          mood_after: sanitizedRecord.mood_after,\n          trigger: sanitizedRecord.trigger || null,\n          notes: sanitizedRecord.notes || null,\n          content_hash: contentHash, // Manual hash to bypass trigger\n          created_at: new Date().toISOString()\n        })\n        .select('id')\n        .single();\n\n      if (error) throw error;\n      console.log('‚úÖ CBT record saved:', data.id);\n      return data;\n    } catch (error) {\n      console.error('‚ùå Failed to save CBT record:', error);\n      // Offline fallback\n      await deadLetterQueue.addToDeadLetter({\n        id: `cbt_${Date.now()}`,\n        type: 'create',\n        entity: 'thought_records',\n        data: record,\n        errorMessage: 'save_cbt_record_failed',\n      } as any, error);\n      return null;\n    }\n  }\n\n  async getCBTRecords(userId: string, dateRange?: { start: Date; end: Date }): Promise<any[]> {\n    try {\n      let query = this.client\n        .from('thought_records')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (dateRange) {\n        query = query\n          .gte('created_at', dateRange.start.toISOString())\n          .lte('created_at', dateRange.end.toISOString());\n      }\n\n      const { data, error } = await query.limit(100);\n      \n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch CBT records:', error);\n      return [];\n    }\n  }\n\n  async deleteCBTRecord(recordId: string): Promise<void> {\n    try {\n      const { error } = await this.client\n        .from('thought_records')\n        .delete()\n        .eq('id', recordId);\n\n      if (error) throw error;\n      console.log('‚úÖ CBT record deleted:', recordId);\n    } catch (error) {\n      console.error('‚ùå Failed to delete CBT record:', error);\n      // Queue for retry\n      await deadLetterQueue.addToDeadLetter({\n        id: `cbt_del_${Date.now()}`,\n        type: 'delete',\n        entity: 'thought_records',\n        data: { id: recordId },\n        errorMessage: 'delete_cbt_record_failed',\n      } as any, error);\n    }\n  }\n\n  async saveVoiceSessionSummary(session: VoiceSessionDB): Promise<void> {\n    try {\n      await this.ensureUserProfileExists(session.user_id);\n      const payload = {\n        user_id: session.user_id,\n        started_at: session.started_at,\n        ended_at: session.ended_at,\n        duration_ms: session.duration_ms,\n        transcription_count: session.transcription_count,\n        error_count: session.error_count,\n        created_at: session.created_at || new Date().toISOString(),\n      };\n      await this.client\n        .from('voice_sessions')\n        .upsert(payload, { onConflict: 'user_id,started_at' });\n    } catch (error) {\n      console.warn('‚ö†Ô∏è saveVoiceSessionSummary skipped (table may not exist):', (error as any)?.message);\n    }\n  }\n\n  async saveBreathSession(session: BreathSessionDB): Promise<void> {\n    try {\n      const { data, error } = await this.client\n        .from('breath_sessions')\n        .upsert(session, { onConflict: 'id' });\n      if (error) throw error;\n    } catch (error) {\n      console.warn('‚ö†Ô∏è saveBreathSession skipped (table may not exist):', (error as any)?.message);\n    }\n  }\n\n  // ===========================\n  // UTILITY METHODS\n  // ===========================\n  \n  // ===========================\n  // MOOD METHODS\n  // ===========================\n  \n  // ‚úÖ F-02 FIX: Standardize idempotency with content_hash and upsert\n  async saveMoodEntry(entry: {\n    user_id: string;\n    mood_score: number;\n    energy_level: number;\n    anxiety_level: number;\n    notes?: string;\n    trigger?: string;\n  }): Promise<any> {\n    try {\n      console.log('üîÑ Saving mood entry...', entry);\n      \n      // Ensure user exists\n      await this.ensureUserProfileExists(entry.user_id);\n      \n      // ‚úÖ F-06 FIX: Sanitize PII fields before server write\n      const sanitizedEntry = {\n        ...entry,\n        notes: sanitizePII(entry.notes || ''),\n        trigger: sanitizePII(entry.trigger || ''),\n      };\n      \n      // ‚úÖ Generate content_hash for idempotency (client-side) using sanitized data\n      const contentText = `${sanitizedEntry.user_id}|${Math.round(sanitizedEntry.mood_score)}|${Math.round(sanitizedEntry.energy_level)}|${Math.round(sanitizedEntry.anxiety_level)}|${sanitizedEntry.notes.trim().toLowerCase()}|${sanitizedEntry.trigger.trim().toLowerCase()}|${new Date().toISOString().slice(0,10)}`;\n      const content_hash = this.computeContentHash(contentText);\n      \n      const payload = {\n        ...sanitizedEntry,\n        content_hash,\n        created_at: new Date().toISOString(),\n      };\n      \n      // ‚úÖ Use upsert with conflict resolution on (user_id, content_hash)\n      const { data, error } = await this.client\n        .from('mood_entries')\n        .upsert(payload, { \n          onConflict: 'user_id,content_hash',\n          ignoreDuplicates: true \n        })\n        .select()\n        .single();\n      \n      if (error) {\n        // ‚úÖ Handle unique constraint violation gracefully\n        if (error.code === '23505' || error.message?.includes('duplicate')) {\n          console.log('‚ÑπÔ∏è Mood entry already exists (duplicate prevented)');\n          return null; // Graceful handling of duplicates\n        }\n        throw error;\n      }\n      \n      console.log('‚úÖ Mood entry saved:', data?.id || 'duplicate_prevented');\n      return data;\n    } catch (error) {\n      console.error('‚ùå Save mood entry failed:', error);\n      throw error;\n    }\n  }\n  \n  async getMoodEntries(userId: string, days: number = 7): Promise<any[]> {\n    try {\n      console.log('üîç Fetching mood entries...', { userId, days });\n      \n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      \n      const { data, error } = await this.client\n        .from('mood_entries')\n        .select('*')\n        .eq('user_id', userId)\n        .gte('created_at', startDate.toISOString())\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      console.log(`‚úÖ Fetched ${data?.length || 0} mood entries`);\n      return data || [];\n    } catch (error) {\n      console.error('‚ùå Get mood entries failed:', error);\n      \n      // Additional error context for debugging\n      if (error && typeof error === 'object') {\n        const supabaseError = error as any;\n        if (supabaseError.code) {\n          console.error('üîç Supabase Error Details:', {\n            code: supabaseError.code,\n            message: supabaseError.message,\n            details: supabaseError.details,\n            hint: supabaseError.hint\n          });\n        }\n      }\n      \n      return [];\n    }\n  }\n  \n  async updateMoodEntry(entryId: string, updates: Partial<{\n    mood_score: number;\n    energy_level: number;\n    anxiety_level: number;\n    notes: string;\n    trigger: string;\n  }>): Promise<any> {\n    try {\n      const { data, error } = await this.client\n        .from('mood_entries')\n        .update(updates)\n        .eq('id', entryId)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('‚ùå Update mood entry failed:', error);\n      throw error;\n    }\n  }\n  \n  async deleteMoodEntry(entryId: string): Promise<void> {\n    try {\n      console.log('üóëÔ∏è Attempting to delete mood entry:', entryId);\n      \n      // ‚úÖ HOTFIX: Check if ID looks like a UUID\n      const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(entryId);\n      \n      if (!isUUID) {\n        console.warn('‚ö†Ô∏è Invalid UUID format detected:', entryId);\n        console.log('üí° This appears to be a client-generated ID (mood_timestamp_random)');\n        console.log('üîÑ Skipping server delete - entry was likely never synced or already deleted');\n        // Gracefully skip - client-generated IDs don't exist on server\n        return;\n      }\n      \n      const { error } = await this.client\n        .from('mood_entries')\n        .delete()\n        .eq('id', entryId);\n      \n      if (error) throw error;\n      console.log('‚úÖ Mood entry deleted successfully from server:', entryId);\n      \n    } catch (error) {\n      console.error('‚ùå Delete mood entry failed:', error);\n      throw error;\n    }\n  }\n\n  // ‚úÖ F-04 FIX: Add missing deleteVoiceCheckin method\n  // üö® HOTFIX: Handle potential UUID validation issues\n  async deleteVoiceCheckin(checkinId: string): Promise<void> {\n    try {\n      console.log('üóëÔ∏è Attempting to delete voice checkin:', checkinId);\n      \n      // ‚úÖ HOTFIX: Check if ID looks like a UUID\n      const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(checkinId);\n      \n      if (!isUUID) {\n        console.warn('‚ö†Ô∏è Invalid UUID format detected for voice checkin:', checkinId);\n        console.log('üîÑ Skipping server delete - entry may not exist on server');\n        return;\n      }\n      \n      const { error } = await this.client\n        .from('voice_checkins')\n        .delete()\n        .eq('id', checkinId);\n\n      if (error) throw error;\n      console.log('‚úÖ Voice checkin deleted successfully from server:', checkinId);\n    } catch (error) {\n      console.error('‚ùå Failed to delete voice checkin:', error);\n      throw error;\n    }\n  }\n\n  // ‚úÖ F-04 FIX: Add missing deleteThoughtRecord method (separate from deleteCBTRecord)\n  // üö® HOTFIX: Handle potential UUID validation issues\n  async deleteThoughtRecord(recordId: string): Promise<void> {\n    try {\n      console.log('üóëÔ∏è Attempting to delete thought record:', recordId);\n      \n      // ‚úÖ HOTFIX: Check if ID looks like a UUID\n      const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(recordId);\n      \n      if (!isUUID) {\n        console.warn('‚ö†Ô∏è Invalid UUID format detected for thought record:', recordId);\n        console.log('üîÑ Skipping server delete - entry may not exist on server');\n        return;\n      }\n      \n      const { error } = await this.client\n        .from('thought_records')\n        .delete()\n        .eq('id', recordId);\n\n      if (error) throw error;\n      console.log('‚úÖ Thought record deleted successfully from server:', recordId);\n    } catch (error) {\n      console.error('‚ùå Failed to delete thought record:', error);\n      throw error;\n    }\n  }\n\n  // ===========================\n\n  get supabaseClient() {\n    return this.client;\n  }\n}\n\n// ===========================\n// INITIALIZATION HELPER\n// ===========================\n\nexport async function initializeSupabase(): Promise<User | null> {\n  return await supabaseService.initialize();\n}\n\n// ===========================\n// EXPORT SINGLETON\n// ===========================\n\nexport const supabaseService = new SupabaseNativeService();\nexport default supabaseService;\n"],"mappings":"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","ignoreList":[]}