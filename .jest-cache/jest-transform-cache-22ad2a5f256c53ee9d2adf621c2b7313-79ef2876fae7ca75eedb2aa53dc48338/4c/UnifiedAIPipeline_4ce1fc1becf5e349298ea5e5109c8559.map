{"version":3,"names":["_featureFlags","require","_asyncStorage","_interopRequireDefault","_aiTelemetry","_supabase","simpleHash","str","hash","length","toString","i","char","charCodeAt","Math","abs","UnifiedAIPipeline","exports","_classCallCheck2","default","cache","Map","isTestMode","process","env","TEST_MODE","testTTL","parseInt","TEST_TTL_MS","MODULE_TTLS","insights","patterns","voice","progress","cbt","invalidationHooks","setupInvalidationHooks","startCacheCleanup","_createClass2","key","value","getModuleTTL","input","_input$context","_input$context2","_input$context3","type","context","source","_process","_asyncToGenerator2","startTime","Date","now","FEATURE_FLAGS","isEnabled","console","log","trackAIInteraction","AIEventType","UNIFIED_PIPELINE_DISABLED","userId","inputType","pipeline","reason","timestamp","metadata","pipelineVersion","processedAt","cacheTTL","processingTime","cacheKey","generateCacheKey","UNIFIED_PIPELINE_STARTED","cached","getFromCache","UNIFIED_PIPELINE_CACHE_HIT","Object","assign","result","executePipeline","setCacheWithInsightsPolicy","UNIFIED_PIPELINE_COMPLETED","modules","getEnabledModules","resultSize","JSON","stringify","_x","apply","arguments","_executePipeline","moduleTTL","promises","push","processVoiceAnalysis","then","processPatternRecognition","shouldRunCBT","processCBTAnalysis","shouldRunBreathwork","processBreathworkAnalysis","breathwork","Promise","allSettled","_result$voice","voiceHints","category","voiceCategory","voiceConfidence","confidence","voiceSuggestion","suggestion","undefined","enhancedInput","hints","processInsightsGeneration","Array","isArray","_patternsArray$find","patternsArray","moodAnalytics","find","p","analytics","mood","content","cbtRecords","validRecords","filter","r","mood_before","mood_after","deltas","map","avgDelta","reduce","sum","d","deltaVariance","pow","volatility","sqrt","recentRecords","slice","olderRecords","weeklyDelta","recentAvg","olderAvg","min","sampleSize","round","dataQuality","baselines","moodImprovement","toFixed","compulsions","dayGroups","forEach","c","day","toDateString","dailyCounts","values","avgDaily","count","variance","sortedDays","entries","sort","_ref","_ref2","_ref3","_slicedToArray2","a","_ref4","b","getTime","recentDays","olderDays","_ref5","_ref6","_ref7","_ref8","tracking","_x2","_processVoiceAnalysis","_yield$import","unifiedVoiceAnalysis","analysis","route","error","warn","generateHeuristicVoiceAnalysis","_x3","_processPatternRecognition","temporal","behavioral","environmental","triggers","severity","analysisTime","dataPoints","extractTemporalPatterns","moods","_patterns$temporal","_toConsumableArray2","extractMoodTemporalPatterns","processMoodAnalytics","hasAdvancedAnalytics","_moodAnalytics$profil","MOOD_ANALYTICS_COMPUTED","profile","correlationsAvailable","keys","correlations","telemetryError","extractBehavioralPatterns","extractEnvironmentalTriggers","analyzeTriggers","analyzeSeverityProgression","calculatePatternConfidence","_patterns$behavioral","_patterns$triggers","textPatterns","extractTextPatterns","_x4","_processCBTAnalysis","analysisRequest","processCBTProgressAnalytics","text","description","notes","distortions","reframes","techniques","thoughtRecord","urgency","textLength","detectedDistortions","detectCognitiveDistortions","generateThoughtRecord","generateCBTReframes","recommendCBTTechniques","assessCognitiveDistortionSeverity","calculateCBTUrgency","calculateCBTConfidence","_yield$import2","cbtEngine","enabled","engineDistortions","detectDistortions","engineReframes","suggestReframes","concat","name","max","engineError","_x5","lowerText","toLowerCase","catastrophizingPatterns","pattern","weight","catastrophizingEvidence","catastrophizingScore","_ref9","matches","match","evidence","allOrNothingPatterns","allOrNothingEvidence","allOrNothingScore","_ref0","mindReadingPatterns","mindReadingEvidence","mindReadingScore","_ref1","personalizationPatterns","personalizationEvidence","personalizationScore","_ref10","labelingPatterns","labelingEvidence","labelingScore","_ref11","primaryDistortion","automaticThought","substring","emotion","extractEmotionFromText","intensity","calculateEmotionalIntensity","distortion","balancedThought","createdAt","toISOString","_generateCBTReframes","Set","_x6","_x7","distortionNames","includes","priority","avgConfidence","intensityWords","intensityMatches","avgDistortionConfidence","lengthBonus","moodKeywords","ocdKeywords","cbtKeywords","breathworkKeywords","moodCount","keyword","ocdCount","cbtCount","breathworkCount","maxCount","extractedData","trigger","keywordMatches","emotions","_ref12","_ref13","test","intensifiers","baseIntensity","intensifierBonus","_processInsightsGeneration","_input$context4","_insights$progress2","_insights$motivationa","_insights$therapeutic5","therapeutic","motivational","generatedAt","totalInsights","categories","_insights$therapeutic","voiceEnhancedInsights","generateVoiceEnhancedInsights","INSIGHTS_DELIVERED","insightsHintsApplied","enhancedInsightsCount","originalPatternsCount","k","_patterns$k","_insights$therapeutic2","temporalInsights","generateTemporalInsights","_insights$behavioral","behavioralInsights","generateBehavioralInsights","_insights$therapeutic3","triggerInsights","generateTriggerInsights","_insights$progress","severityInsights","generateSeverityInsights","_insights$therapeutic4","environmentalInsights","generateEnvironmentalInsights","progressInsights","generateProgressInsights","motivationalInsights","generateMotivationalInsights","crossPatternInsights","generateCrossPatternInsights","calculateInsightsMetadata","prioritizeInsights","_insights$therapeutic6","_insights$progress3","fallbackInsights","generateFallbackInsights","insightsCount","patternsAvailable","_patterns$k2","catch","_x8","_x9","temporalPatterns","timeOfDay","actionable","data","peakTime","frequency","dayOfWeek","peakDay","clusterCount","clusters","direction","trend","strength","consistency","behavioralPatterns","percentage","averageDuration","triggerPatterns","emotionTurkish","emotionalTrigger","location","severityPatterns","metric","recentAverage","change","interpretation","environmentalPatterns","hasSeverePattern","some","s","allInsights","insight","priorityOrder","aPriority","bPriority","_processBreathworkAnalysis","moodScore","extractMoodFromInput","anxietyLevel","extractAnxietyFromInput","recentCompulsions","extractRecentCompulsions","userInput","_yield$import3","breathworkSuggestionService","generateSuggestion","currentTime","hasBreathworkSuggestion","id","protocol","customization","timing","enhancement","contextualRelevance","calculateBreathworkRelevance","fallbackProtocols","fallbackOptions","adaptations","userPreferences","urgencyAdjusted","protocolCustomized","serviceError","processBreathworkHeuristics","_x0","needsBreathwork","triggerType","contextData","duration","anxiety","anxietyScore","yesterday","compulsionWords","relevance","SAMPLE_SIZE","hourGroups","hour","getHours","maxPatterns","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_this","triggerGroups","totalSeverity","getCompulsionSeverity","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","response","_input$context5","_input$context6","_getFromCache","memoryCache","get","expires","delete","countTotalInsights","remainingTTL","fiveMinutes","supabaseCached","getFromSupabaseCache","set","offlineCache","AsyncStorage","getItem","parsed","parse","removeItem","_x1","setCache","ttl","setToSupabaseCache","persistToStorage","ttlDisplay","shortTTL","_result$insights","_result$insights$ther","_result$insights$prog","_result$insights$beha","_result$insights$moti","_invalidateStaleCache","invalidatedCount","memoryKeys","from","allKeys","getAllKeys","unifiedKeys","startsWith","invalidated","invalidateStaleCache","analyzeTrackingTrends","hourCounts","fill","entry","created_at","peakHours","title","recentEntries","resistanceSum","e","resistanceLevel","resistance_level","avgResistance","fallback","_input$context7","_patterns$metadata","trackingPatterns","peakPattern","dominantPattern","commonTrigger","_persistToStorage","setItem","_x10","_x11","_getFromSupabaseCache","_yield$supabaseServic","supabaseService","supabaseClient","select","eq","maybeSingle","expiresAt","expires_at","_x12","_setToSupabaseCache","split","ttlHours","_yield$supabaseServic2","upsert","cache_key","user_id","computed_at","ttl_hours","onConflict","_x13","_x14","_this2","_ref26","invalidateUserCache","_x15","_ref27","_x16","_ref28","_x17","clear","_triggerInvalidation","hook","handler","_yield$import4","emitAIInvalidation","CACHE_INVALIDATION","triggerInvalidation","_x18","_x19","_invalidateUserCache","_this3","keysToDelete","_","deletedCount","invalidationType","keysDeleted","cacheKeys","invalidateSupabaseCache","_x20","_x21","_invalidateSupabaseCache","query","like","_yield$query","_x22","_x23","_this4","setInterval","_predictMoodIntervention","recentMoodEntries","currentMoodState","INSIGHTS_REQUESTED","dataType","entryCount","trendAnalysis","analyzeMoodTrends","riskFactors","identifyMoodRiskFactors","riskLevel","calculateMoodRiskLevel","predictedDrop","predictMoodDrop","interventions","generateMoodInterventions","earlyWarning","checkEarlyWarningTriggers","earlyWarningTriggered","triggered","SYSTEM_ERROR","component","Error","message","String","action","effectivenessProbability","predictMoodIntervention","_x24","_x25","_x26","slope","weeklyChange","sortedEntries","scores","mood_score","n","sumX","sumY","sumXY","y","x","sumXX","mean","score","factor","impact","recurringLowDays","detectRecurringLowMoodDays","highImpactTriggers","analyzeHighImpactTriggers","totalRisk","trendRisk","combinedRisk","riskScore","likelihood","timeframe","currentLevel","potentialDrop","dayMoods","getDay","lowMoodDays","dayNames","_ref29","_ref30","avgMood","triggerImpact","moodImpact","totalImpact","_ref31","_ref32","avgImpact","_ref33","_ref34","recentMoods","m","energy_level","anxiety_level","weeklyMoodDelta","calculateWeeklyMoodDelta","thisWeek","lastWeek","delta","dashboardMetrics","currentWeekAvg","previousWeekAvg","meaCorrelation","calculateMEACorrelations","moodEnergy","moodAnxiety","moodEnergyCorrelation","moodAnxietyCorrelation","energyAnxietyCorrelation","energyAnxiety","emotionalProfile","profileType","averageMood","averages","averageEnergy","energy","averageAnxiety","weeklyData","maxDailyPatterns","_ref35","_ref36","_ref37","_ref38","_ref39","_ref40","avgEnergy","avgAnxiety","dayName","parseFloat","significance","oneWeekAgo","twoWeeksAgo","thisWeekMoods","date","lastWeekMoods","thisWeekAvg","lastWeekAvg","minDataPoints","moodScores","energyLevels","anxietyLevels","moodEnergyCorr","calculatePearsonCorrelation","moodAnxietyCorr","energyAnxietyCorr","meanX","meanY","numerator","sumXSquared","sumYSquared","xDiff","yDiff","denominator","calculateCorrelationPValue","df","t","approximateTTestPValue","normalCDF","criticalValues","closest","prev","curr","pLevels","ratio","prevT","currT","prevP","currP","exp","prob","calculateAnalyticsWeeklyDelta","calculateAnalyticsVolatility","calculateAnalyticsBaselines","calculateAnalyticsMEACorrelations","assessAnalyticsDataQuality","classifyAnalyticsEmotionalProfile","bestTimes","analyzeAnalyticsBestTimes","calculateAnalyticsGlobalConfidence","triggerCounts","keywords","_ref41","_ref42","envTriggers","_this5","progression","sortedCompulsions","hasValidSeverity","first","floor","last","firstAvg","lastAvg","_processCBTProgressAnalytics","thoughtRecords","distortionTrends","techniqueEffectiveness","progressAnalysis","recommendations","nextFocus","recordCount","analyzeCBTDistortionTrends","analyzeCBTTechniqueEffectiveness","generateCBTProgressAnalysis","generateCBTRecommendations","assessCBTRiskLevel","determineCBTNextFocus","calculateCBTProgressConfidence","_x27","records","distortionCounts","record","index","has","trends","occurrences","totalRecords","midPoint","earlyOccurrences","idx","lateOccurrences","earlyRate","ceil","lateRate","avgMoodImprovement","moodAfter","moodBefore","technique","effectiveness","evidenceRecords","evidenceFor","evidenceAgainst","evidenceAvgImprovement","recentAvgImprovement","decliningDistortions","avgMoodBefore","extractMoodTemporalPatternsByHour","moodsByHour","total","hourlyAverages","h","average","hours","averageScore","groupByTimeWindow","windowDays","windows","windowMs","currentWindow","currentWindowStart","cTime","compulsion","calculateAverageSeverity","_this6","calculateTypeFrequency","freq","extractDayOfWeekPattern","dayCounts","avgCount","indexOf","behavioralKeywords","triggerKeywords","sorted","p5Index","p95Index","p5Value","p95Value","winsorized","recent14Days","energyScores","anxietyScores","threeDaysAgo","sixDaysAgo","calculateVolatility","calculateBaselines","moodEnergyR","moodAnxietyR","energyAnxietyR","moodEnergyP","moodAnxietyP","energyAnxietyP","assessDataQuality","qualityScore","sampleSizeScore","completeMoods","missingRatio","missingScore","std","outliers","outlierRatio","outlierScore","classifyEmotionalProfile","rationale","sampleSizeMultiplier","analyzeBestTimes","dayStats","hourStats","bestDay","bestDayScore","_ref43","_ref44","stats","avgScore","bestTimeSlot","bestTimeScore","_ref45","_ref46","calculateGlobalConfidence","profileConfidence","_correlations$moodEne","sampleComponent","qualityComponent","profileComponent","correlationComponent","_correlations$moodEne2","_correlations$moodAnx","_correlations$energyA","avgCorrelationStrength","totalConfidence","validMoodScores","dayOfWeekCounts","timeOfDayCounts","timeSlot","bestDayMood","bestTime","bestTimeMood","time","recentCount","moodTime","daysDiff","getInstance","instance","unifiedPipeline"],"sources":["UnifiedAIPipeline.ts"],"sourcesContent":["/**\n * 🚀 Unified AI Pipeline v1.0\n * \n * Tüm AI analizlerini tek pipeline'da toplar:\n * - Voice Analysis (Unified Voice)\n * - Pattern Recognition\n * - Insights Generation\n * - CBT Analysis\n * \n * ✅ FIXED: Module-specific cache TTLs implemented:\n * - Voice Analysis: 1h TTL\n * - Pattern Recognition: 12h TTL  \n * - Insights Generation: 24h TTL\n * - CBT Analysis: 24h TTL\n */\n\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { trackAIInteraction, AIEventType } from '../telemetry/aiTelemetry';\nimport supabaseService from '@/services/supabase';\nimport { smartMoodJournalingService } from '../services/smartMoodJournalingService';\n\n/**\n * Simple deterministic hash function for React Native\n * Replaces crypto module which is not available in React Native\n */\nfunction simpleHash(str: string): string {\n  let hash = 0;\n  if (str.length === 0) return hash.toString(16);\n  \n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  return Math.abs(hash).toString(16);\n}\n\n// ============================================================================\n// TYPES & INTERFACES\n// ============================================================================\n\nexport interface UnifiedPipelineInput {\n  userId: string;\n  content: string | any; // Voice text, user data, etc.\n  type: 'voice' | 'data' | 'mixed';\n  context?: {\n    source: 'today' | 'tracking' | 'cbt' | 'mood';\n    timestamp?: number;\n    metadata?: Record<string, any>;\n  };\n}\n\nexport interface UnifiedPipelineResult {\n  // Voice Analysis Results\n  voice?: {\n    category: 'MOOD' | 'CBT' | 'OCD' | 'BREATHWORK' | 'OTHER';\n    confidence: number;\n    suggestion?: string;\n    route?: string;\n  };\n  \n  // 🚀 ENHANCED ANALYTICS: Clinical-grade mood analytics\n  analytics?: {\n    mood?: {\n      weeklyDelta: number;\n      volatility: number;\n      baselines: {\n        mood: number;\n        energy: number;\n        anxiety: number;\n      };\n      correlations: {\n        moodEnergy?: {\n          r: number | null;\n          n: number;\n          p?: number | null;\n        };\n        moodAnxiety?: {\n          r: number | null;\n          n: number;\n          p?: number | null;\n        };\n        energyAnxiety?: {\n          r: number | null;\n          n: number;\n          p?: number | null;\n        };\n      };\n      profile?: {\n        type: 'resilient' | 'stressed' | 'fatigued' | 'elevated' | 'stable' | 'volatile' | 'recovering';\n        confidence: number;\n        rationale: string[];\n      };\n      bestTimes?: {\n        dayOfWeek?: string;\n        timeOfDay?: string;\n        confidence: number;\n      };\n      sampleSize: number;\n      dataQuality: number;\n      confidence: number;\n    };\n  };\n  \n  // Pattern Recognition Results (Enhanced for Dashboard)\n  patterns?: {\n    temporal: Array<{\n      type: string;\n      frequency?: number;\n      timeOfDay?: string;\n      trend?: 'increasing' | 'decreasing' | 'stable';\n      // Enhanced mood pattern fields\n      title?: string;\n      description?: string;\n      pattern?: string;\n      confidence?: number;\n      severity?: 'low' | 'medium' | 'high';\n      actionable?: boolean;\n      suggestion?: string;\n      source?: string;\n      // 🎯 Dashboard Ready Metrics\n      dashboardMetrics?: {\n        // Weekly Delta Metrics\n        weeklyDelta?: number;\n        currentWeekAvg?: number;\n        previousWeekAvg?: number;\n        trend?: 'improving' | 'declining' | 'stable';\n        // MEA Correlation Metrics\n        moodEnergyCorrelation?: number;\n        moodAnxietyCorrelation?: number;\n        energyAnxietyCorrelation?: number;\n        emotionalProfile?: string;\n        averageMood?: number;\n        averageEnergy?: number;\n        averageAnxiety?: number;\n        // Daily Pattern Metrics\n        dayOfWeek?: number;\n        dayName?: string;\n        significance?: 'positive' | 'negative' | 'neutral';\n        sampleSize?: number;\n        dataPoints?: number | { thisWeek: number; lastWeek: number };\n      };\n    }>;\n    behavioral: Array<{\n      trigger: string;\n      response: string;\n      frequency: number;\n      severity: number;\n    }>;\n    environmental: Array<{\n      location?: string;\n      context: string;\n      correlation: number;\n    }>;\n  } | Array<any>; // Allow flexible array format for mood patterns\n  \n  // Insights Results\n  insights?: {\n    therapeutic: Array<{\n      text: string;\n      category: string;\n      priority: 'high' | 'medium' | 'low';\n      actionable: boolean;\n    }>;\n    progress: Array<{\n      metric: string;\n      value: number;\n      change: number;\n      interpretation: string;\n    }>;\n  };\n  \n  // CBT Analysis Results\n  cbt?: {\n    distortions: string[];\n    reframes: string[];\n    techniques: string[];\n    confidence: number;\n  };\n  \n  // Metadata\n  metadata: {\n    pipelineVersion: string;\n    processedAt: number;\n    cacheTTL: number;\n    source: 'cache' | 'fresh';\n    processingTime: number;\n  };\n}\n\n// ============================================================================\n// MAIN PIPELINE CLASS\n// ============================================================================\n\nexport class UnifiedAIPipeline {\n  private static instance: UnifiedAIPipeline;\n  private cache: Map<string, { result: UnifiedPipelineResult; expires: number }> = new Map();\n  \n  // 🧪 Test mode detection\n  private readonly isTestMode = process.env.TEST_MODE === '1';\n  private readonly testTTL = parseInt(process.env.TEST_TTL_MS || '5000', 10);\n  \n  // ✅ FIXED: Module-specific cache TTLs as per specification  \n  private readonly MODULE_TTLS = {\n    insights: 24 * 60 * 60 * 1000,    // 24 hours\n    patterns: 12 * 60 * 60 * 1000,    // 12 hours  \n    voice: 1 * 60 * 60 * 1000,        // 1 hour\n    progress: 6 * 60 * 60 * 1000,     // 6 hours\n    cbt: 24 * 60 * 60 * 1000,         // 24 hours (same as insights)\n    default: 24 * 60 * 60 * 1000      // 24 hours fallback\n  };\n  \n  private invalidationHooks: Map<string, () => void> = new Map();\n  \n  private constructor() {\n    this.setupInvalidationHooks();\n    this.startCacheCleanup();\n  }\n  \n  static getInstance(): UnifiedAIPipeline {\n    if (!UnifiedAIPipeline.instance) {\n      UnifiedAIPipeline.instance = new UnifiedAIPipeline();\n    }\n    return UnifiedAIPipeline.instance;\n  }\n  \n  // ============================================================================\n  // CACHE TTL MANAGEMENT\n  // ============================================================================\n  \n  /**\n   * Get module-specific TTL based on input type and content\n   */\n  private getModuleTTL(input: UnifiedPipelineInput): number {\n    // Determine primary module based on input type\n    switch (input.type) {\n      case 'voice':\n        return this.MODULE_TTLS.voice;\n      case 'data':\n        // For data inputs, determine by context source\n        if (input.context?.source === 'mood') return this.MODULE_TTLS.patterns;\n        if (input.context?.source === 'cbt') return this.MODULE_TTLS.cbt;\n        if (input.context?.source === 'tracking') return this.MODULE_TTLS.patterns;\n        return this.MODULE_TTLS.insights; // Default for data\n      case 'mixed':\n        // Mixed inputs typically generate insights\n        return this.MODULE_TTLS.insights;\n      default:\n        return this.MODULE_TTLS.default;\n    }\n  }\n\n  // ============================================================================\n  // MAIN PROCESSING METHOD\n  // ============================================================================\n  \n  async process(input: UnifiedPipelineInput): Promise<UnifiedPipelineResult> {\n    const startTime = Date.now();\n    \n    // 🛡️ MASTER FEATURE FLAG CHECK - Critical: Pipeline must be enabled\n    if (!FEATURE_FLAGS.isEnabled('AI_UNIFIED_PIPELINE')) {\n      console.log('⚠️ UnifiedAIPipeline: Feature disabled, returning empty result');\n      \n      // Track disabled pipeline attempt\n      await trackAIInteraction(AIEventType.UNIFIED_PIPELINE_DISABLED, {\n        userId: input.userId,\n        inputType: input.type,\n        pipeline: 'unified',\n        reason: 'feature_flag_disabled',\n        timestamp: startTime\n      });\n      \n      // Return minimal empty result when disabled\n      return {\n        metadata: {\n          pipelineVersion: '1.0.0',\n          processedAt: Date.now(),\n          cacheTTL: 0,\n          source: 'disabled',\n          processingTime: Date.now() - startTime\n        }\n      };\n    }\n    \n    const cacheKey = this.generateCacheKey(input);\n    \n    // 📊 Track pipeline start\n    await trackAIInteraction(AIEventType.UNIFIED_PIPELINE_STARTED, {\n      userId: input.userId,\n      inputType: input.type,\n      pipeline: 'unified',\n      cacheKey,\n      timestamp: startTime\n    });\n    \n    // 1. Check cache first\n    const cached = await this.getFromCache(cacheKey);\n    if (cached) {\n      await trackAIInteraction(AIEventType.UNIFIED_PIPELINE_CACHE_HIT, {\n        userId: input.userId,\n        pipeline: 'unified',\n        cacheKey,\n        processingTime: Date.now() - startTime\n      });\n      \n      return {\n        ...cached,\n        metadata: {\n          ...cached.metadata,\n          source: 'cache'\n        }\n      };\n    }\n    \n    // 2. Process through pipeline\n    const result = await this.executePipeline(input);\n    \n    // 3. Smart cache with empty insights policy\n    this.setCacheWithInsightsPolicy(cacheKey, result, input);\n    \n    // 4. Track pipeline completion telemetry\n    const processingTime = Date.now() - startTime;\n    await trackAIInteraction(AIEventType.UNIFIED_PIPELINE_COMPLETED, {\n      userId: input.userId,\n      pipeline: 'unified',\n      processingTime,\n      modules: this.getEnabledModules(),\n      cacheKey,\n      resultSize: JSON.stringify(result).length\n    });\n    \n    return {\n      ...result,\n      metadata: {\n        ...result.metadata,\n        source: 'fresh',\n        processingTime: Date.now() - startTime\n      }\n    };\n  }\n  \n  // ============================================================================\n  // PIPELINE EXECUTION\n  // ============================================================================\n  \n  private async executePipeline(input: UnifiedPipelineInput): Promise<UnifiedPipelineResult> {\n    const startTime = Date.now();\n    const moduleTTL = this.getModuleTTL(input);\n    \n    const result: UnifiedPipelineResult = {\n      metadata: {\n        pipelineVersion: '1.0.0',\n        processedAt: Date.now(),\n        cacheTTL: moduleTTL,\n        source: 'fresh',\n        processingTime: 0 // Will be updated by main process method\n      }\n    };\n    \n    // Run analyses in parallel where possible\n    const promises: Promise<void>[] = [];\n    \n    // 1. Voice Analysis (if voice input)\n    if (input.type === 'voice' || input.type === 'mixed') {\n      promises.push(\n        this.processVoiceAnalysis(input).then(voice => {\n          result.voice = voice;\n        })\n      );\n    }\n    \n    // 2. Pattern Recognition (always run)\n    promises.push(\n      this.processPatternRecognition(input).then(patterns => {\n        result.patterns = patterns;\n      })\n    );\n    \n    // 3. CBT Analysis (if relevant)\n    if (this.shouldRunCBT(input)) {\n      promises.push(\n        this.processCBTAnalysis(input).then(cbt => {\n          result.cbt = cbt;\n        })\n      );\n    }\n    \n    // 4. Breathwork Analysis (NEW - Week 2)\n    if (this.shouldRunBreathwork(input)) {\n      promises.push(\n        this.processBreathworkAnalysis(input).then(breathwork => {\n          result.breathwork = breathwork;\n        })\n      );\n    }\n    \n    // Wait for parallel analyses\n    await Promise.allSettled(promises);\n    \n    // 4. Insights Generation with Voice→Insights Bridge (depends on patterns, so run after)\n    if (result.patterns) {\n      // 🎯 Voice→Insights Bridge: Pass voice analysis results as hints for better insights\n      const voiceHints = result.voice?.category ? {\n        voiceCategory: result.voice.category,\n        voiceConfidence: result.voice.confidence,\n        voiceSuggestion: result.voice.suggestion\n      } : undefined;\n      \n      const enhancedInput = voiceHints ? {\n        ...input,\n        context: {\n          ...input.context,\n          hints: voiceHints\n        }\n      } : input;\n      \n      result.insights = await this.processInsightsGeneration(enhancedInput, result.patterns);\n    }\n    \n    // 📊 Extract analytics from patterns if available (mood analytics)\n    if (result.patterns && Array.isArray(result.patterns)) {\n      const patternsArray = result.patterns as any[];\n      const moodAnalytics = patternsArray.find(p => p.moodAnalytics)?.moodAnalytics;\n      if (moodAnalytics) {\n        result.analytics = {\n          mood: moodAnalytics\n        };\n        console.log('📊 Enhanced mood analytics attached to result');\n      }\n    } else if (result.patterns && (result.patterns as any).moodAnalytics) {\n      result.analytics = {\n        mood: (result.patterns as any).moodAnalytics\n      };\n    }\n    \n    // 📊 PHASE 2: Minimal analytics for CBT/Tracking (scaffold)\n    // Generate basic analytics when input contains CBT or tracking data\n    if (input.content && typeof input.content === 'object') {\n      const content = input.content as any;\n      \n      // ✅ CBT Analytics (minimal)\n      if (content.cbtRecords && Array.isArray(content.cbtRecords) && content.cbtRecords.length > 0) {\n        const cbtRecords = content.cbtRecords;\n        const validRecords = cbtRecords.filter((r: any) => \n          r.mood_before != null && r.mood_after != null\n        );\n        \n        if (validRecords.length > 0) {\n          // Compute simple aggregates\n          const deltas = validRecords.map((r: any) => r.mood_after - r.mood_before);\n          const avgDelta = deltas.reduce((sum, d) => sum + d, 0) / deltas.length;\n          const deltaVariance = deltas.reduce((sum, d) => sum + Math.pow(d - avgDelta, 2), 0) / deltas.length;\n          const volatility = Math.sqrt(deltaVariance);\n          \n          // Weekly delta proxy - assume recent records are more recent\n          const recentRecords = validRecords.slice(-7);\n          const olderRecords = validRecords.slice(-14, -7);\n          let weeklyDelta = 0;\n          if (recentRecords.length > 0 && olderRecords.length > 0) {\n            const recentAvg = recentRecords.reduce((sum, r) => sum + (r.mood_after - r.mood_before), 0) / recentRecords.length;\n            const olderAvg = olderRecords.reduce((sum, r) => sum + (r.mood_after - r.mood_before), 0) / olderRecords.length;\n            weeklyDelta = recentAvg - olderAvg;\n          }\n          \n          const confidence = Math.min(0.8, 0.5 + (validRecords.length * 0.05)); // Scale with data volume\n          \n          result.analytics = result.analytics || {};\n          result.analytics.cbt = {\n            sampleSize: validRecords.length,\n            volatility: Math.round(volatility * 10) / 10, // Round to 1 decimal\n            weeklyDelta: Math.round(weeklyDelta * 10) / 10,\n            confidence,\n            dataQuality: confidence,\n            baselines: {\n              moodImprovement: avgDelta\n            }\n          };\n          \n          console.log(`📊 Minimal CBT analytics: sampleSize=${validRecords.length}, volatility=${volatility.toFixed(1)}, weeklyDelta=${weeklyDelta.toFixed(1)}`);\n        }\n      }\n      \n      // ✅ Tracking Analytics (minimal)\n      if (content.compulsions && Array.isArray(content.compulsions) && content.compulsions.length > 0) {\n        const compulsions = content.compulsions;\n        const sampleSize = compulsions.length;\n        \n        // Group by day for volatility calculation\n        const dayGroups: { [key: string]: number } = {};\n        compulsions.forEach((c: any) => {\n          if (c.timestamp) {\n            const day = new Date(c.timestamp).toDateString();\n            dayGroups[day] = (dayGroups[day] || 0) + 1;\n          }\n        });\n        \n        const dailyCounts = Object.values(dayGroups);\n        let volatility = 0;\n        if (dailyCounts.length > 1) {\n          const avgDaily = dailyCounts.reduce((sum, count) => sum + count, 0) / dailyCounts.length;\n          const variance = dailyCounts.reduce((sum, count) => sum + Math.pow(count - avgDaily, 2), 0) / dailyCounts.length;\n          volatility = Math.sqrt(variance);\n        }\n        \n        // Weekly delta proxy - compare recent 3 days vs prior 3 days\n        const sortedDays = Object.entries(dayGroups).sort(([a], [b]) => \n          new Date(a).getTime() - new Date(b).getTime()\n        );\n        let weeklyDelta = 0;\n        if (sortedDays.length >= 6) {\n          const recentDays = sortedDays.slice(-3);\n          const olderDays = sortedDays.slice(-6, -3);\n          const recentAvg = recentDays.reduce((sum, [, count]) => sum + count, 0) / recentDays.length;\n          const olderAvg = olderDays.reduce((sum, [, count]) => sum + count, 0) / olderDays.length;\n          weeklyDelta = recentAvg - olderAvg;\n        }\n        \n        const confidence = Math.min(0.8, 0.4 + (sampleSize * 0.02)); // Conservative confidence for tracking\n        \n        result.analytics = result.analytics || {};\n        result.analytics.tracking = {\n          sampleSize,\n          volatility: Math.round(volatility * 10) / 10,\n          weeklyDelta: Math.round(weeklyDelta * 10) / 10,\n          confidence,\n          dataQuality: confidence,\n          baselines: {\n            compulsions: dailyCounts.length > 0 ? \n              Math.round((dailyCounts.reduce((sum, count) => sum + count, 0) / dailyCounts.length) * 10) / 10 : 0\n          }\n        };\n        \n        console.log(`📊 Minimal Tracking analytics: sampleSize=${sampleSize}, volatility=${volatility.toFixed(1)}, weeklyDelta=${weeklyDelta.toFixed(1)}`);\n      }\n    }\n    \n    return result;\n  }\n  \n  // ============================================================================\n  // INDIVIDUAL PROCESSORS\n  // ============================================================================\n  \n  private async processVoiceAnalysis(input: UnifiedPipelineInput): Promise<any> {\n    try {\n      // Import lazily for better performance\n      const { unifiedVoiceAnalysis } = await import('../services/checkinService');\n      \n      // ✅ FIXED: Pass userId string instead of object to unifiedVoiceAnalysis \n      const analysis = await unifiedVoiceAnalysis(\n        typeof input.content === 'string' ? input.content : JSON.stringify(input.content),\n        input.userId  // Correct parameter: userId string, not object\n      );\n      \n      return {\n        category: analysis.type,\n        confidence: analysis.confidence,\n        suggestion: analysis.suggestion,\n        route: analysis.route\n      };\n    } catch (error) {\n      console.warn('Voice analysis failed, using heuristic fallback:', error);\n      \n      // ✅ FIXED: Centralized heuristic fallback (moved from UI layer)\n      return this.generateHeuristicVoiceAnalysis(\n        typeof input.content === 'string' ? input.content : JSON.stringify(input.content)\n      );\n    }\n  }\n  \n  private async processPatternRecognition(input: UnifiedPipelineInput): Promise<any> {\n    try {\n      const patterns = {\n        temporal: [],\n        behavioral: [],\n        environmental: [],\n        triggers: [],\n        severity: [],\n        metadata: {\n          analysisTime: Date.now(),\n          dataPoints: 0,\n          confidence: 0\n        }\n      };\n      \n      // Extract patterns from user data\n      if (typeof input.content === 'object') {\n        const content = input.content;\n        \n        // 1. TEMPORAL PATTERNS (Zaman bazlı kalıplar)\n        if (content.compulsions && Array.isArray(content.compulsions)) {\n          patterns.temporal = this.extractTemporalPatterns(content.compulsions);\n          patterns.metadata.dataPoints += content.compulsions.length;\n        }\n        \n        if (content.moods && Array.isArray(content.moods)) {\n          patterns.temporal.push(...this.extractMoodTemporalPatterns(content.moods));\n          patterns.metadata.dataPoints += content.moods.length;\n          \n          // 📊 ENHANCED: Comprehensive mood analytics\n          console.log(`🎯 Starting mood analytics processing for ${content.moods.length} mood entries`);\n          const moodAnalytics = this.processMoodAnalytics(content.moods);\n          console.log('📊 Mood analytics result:', moodAnalytics);\n          if (moodAnalytics) {\n            // Store analytics in result for dashboard consumption\n            patterns.moodAnalytics = moodAnalytics;\n            patterns.metadata.hasAdvancedAnalytics = true;\n            \n            // 📊 Telemetry: Track mood analytics computation\n            try {\n              trackAIInteraction(AIEventType.MOOD_ANALYTICS_COMPUTED, {\n                weeklyDelta: moodAnalytics.weeklyDelta,\n                volatility: moodAnalytics.volatility,\n                profile: moodAnalytics.profile?.type,\n                sampleSize: moodAnalytics.sampleSize,\n                dataQuality: moodAnalytics.dataQuality,\n                confidence: moodAnalytics.confidence,\n                correlationsAvailable: Object.keys(moodAnalytics.correlations).length\n              });\n            } catch (telemetryError) {\n              console.warn('⚠️ Mood analytics telemetry failed:', telemetryError);\n            }\n          }\n        }\n        \n        // if (content.erpSessions && Array.isArray(content.erpSessions)) { // Removed Terapi\n          // patterns.temporal.push(...this.extractTerapiTemporalPatterns(content.erpSessions)); // Removed Terapi\n          // patterns.metadata.dataPoints += content.erpSessions.length; // Removed Terapi\n        // } // Removed Terapi\n        \n        // 2. BEHAVIORAL PATTERNS (Davranışsal kalıplar)  \n        if (content.compulsions && Array.isArray(content.compulsions)) {\n          patterns.behavioral = this.extractBehavioralPatterns(content.compulsions);\n        }\n        \n        // 3. ENVIRONMENTAL TRIGGERS (Çevresel tetikleyiciler)\n        patterns.environmental = this.extractEnvironmentalTriggers(content);\n        \n        // 4. TRIGGER ANALYSIS (Tetik analizi)\n        patterns.triggers = this.analyzeTriggers(content);\n        \n        // 5. SEVERITY PROGRESSION (Şiddet seyrı)\n        patterns.severity = this.analyzeSeverityProgression(content);\n        \n        // 6. CALCULATE CONFIDENCE (Güven skoru hesaplama)\n        patterns.metadata.confidence = this.calculatePatternConfidence(patterns.metadata.dataPoints);\n      }\n      \n      // Handle text input (voice/notes)\n      if (typeof input.content === 'string') {\n        const textPatterns = this.extractTextPatterns(input.content);\n        patterns.behavioral.push(...textPatterns.behavioral);\n        patterns.triggers.push(...textPatterns.triggers);\n        patterns.metadata.dataPoints += 1;\n        patterns.metadata.confidence = 0.6; // Text analysis has medium confidence\n      }\n      \n      return patterns;\n    } catch (error) {\n      console.error('Pattern recognition error:', error);\n      return { \n        temporal: [], \n        behavioral: [], \n        environmental: [], \n        triggers: [],\n        severity: [],\n        metadata: { analysisTime: Date.now(), dataPoints: 0, confidence: 0 }\n      };\n    }\n  }\n  \n  private async processCBTAnalysis(input: UnifiedPipelineInput): Promise<any> {\n    try {\n      // ✅ FIXED: Check if this is a progress analytics request\n      if (typeof input.content === 'object' && input.content.analysisRequest === 'comprehensive_cbt_progress_analytics') {\n        return await this.processCBTProgressAnalytics(input);\n      }\n      \n      const text = typeof input.content === 'string' \n        ? input.content \n        : input.content.description || input.content.notes || '';\n      \n      if (!text || text.length < 5) {\n        return null;\n      }\n      \n      const analysis = {\n        distortions: [],\n        reframes: [],\n        techniques: [],\n        thoughtRecord: null,\n        severity: 0,\n        urgency: 'low',\n        metadata: {\n          analysisTime: Date.now(),\n          textLength: text.length,\n          confidence: 0\n        }\n      };\n      \n      // 1. COGNITIVE DISTORTION DETECTION\n      const detectedDistortions = this.detectCognitiveDistortions(text);\n      analysis.distortions = detectedDistortions;\n      \n      // 2. AUTOMATIC THOUGHT RECORD GENERATION\n      if (detectedDistortions.length > 0) {\n        analysis.thoughtRecord = this.generateThoughtRecord(text, detectedDistortions);\n      }\n      \n      // 3. REFRAME SUGGESTIONS\n      analysis.reframes = await this.generateCBTReframes(text, detectedDistortions);\n      \n      // 4. CBT TECHNIQUE RECOMMENDATIONS\n      analysis.techniques = this.recommendCBTTechniques(detectedDistortions, text);\n      \n      // 5. SEVERITY ASSESSMENT\n      analysis.severity = this.assessCognitiveDistortionSeverity(text, detectedDistortions);\n      \n      // 6. URGENCY CALCULATION\n      analysis.urgency = this.calculateCBTUrgency(analysis.severity, detectedDistortions);\n      \n      // 7. CONFIDENCE CALCULATION\n      analysis.metadata.confidence = this.calculateCBTConfidence(detectedDistortions, text.length);\n      \n      // Try to use cbtEngine if available (fallback to built-in logic)\n      try {\n        const { cbtEngine } = await import('../engines/cbtEngine');\n        \n        if (cbtEngine.enabled) {\n          const engineDistortions = await cbtEngine.detectDistortions(text);\n          const engineReframes = await cbtEngine.suggestReframes(text, engineDistortions);\n          \n          // Merge engine results with built-in analysis\n          analysis.distortions = [...analysis.distortions, ...engineDistortions.map(d => ({ name: d.name, confidence: d.confidence }))];\n          analysis.reframes = [...analysis.reframes, ...engineReframes];\n          analysis.metadata.confidence = Math.max(analysis.metadata.confidence, 0.85);\n        }\n      } catch (engineError) {\n        console.warn('CBT Engine unavailable, using built-in analysis:', engineError);\n      }\n      \n      return analysis;\n    } catch (error) {\n      console.error('CBT analysis failed:', error);\n      return null;\n    }\n  }\n\n  private detectCognitiveDistortions(text: string): Array<{name: string, confidence: number, evidence: string[]}> {\n    const distortions = [];\n    const lowerText = text.toLowerCase();\n    \n    // Catastrophizing (Felaketleştirme)\n    const catastrophizingPatterns = [\n      { pattern: /ya\\s+.*?olursa/gi, weight: 0.8 },\n      { pattern: /kesin.*?olacak/gi, weight: 0.7 },\n      { pattern: /felaket|korkunç|berbat/gi, weight: 0.6 },\n      { pattern: /mahvol.*?|bitecek|dayanamam/gi, weight: 0.9 }\n    ];\n    \n    const catastrophizingEvidence = [];\n    let catastrophizingScore = 0;\n    \n    catastrophizingPatterns.forEach(({ pattern, weight }) => {\n      const matches = text.match(pattern);\n      if (matches) {\n        catastrophizingScore += matches.length * weight;\n        catastrophizingEvidence.push(...matches);\n      }\n    });\n    \n    if (catastrophizingScore > 0.5) {\n      distortions.push({\n        name: 'catastrophizing',\n        confidence: Math.min(catastrophizingScore, 1),\n        evidence: catastrophizingEvidence.slice(0, 3) // Max 3 examples\n      });\n    }\n    \n    // All-or-Nothing Thinking (Hep-Hiç Düşünce)\n    const allOrNothingPatterns = [\n      { pattern: /asla.*?olmaz|hiçbir zaman/gi, weight: 0.8 },\n      { pattern: /her zaman|hep|hiç/gi, weight: 0.6 },\n      { pattern: /tamamen.*?başarısız|mükemmel.*?olmalı/gi, weight: 0.9 }\n    ];\n    \n    const allOrNothingEvidence = [];\n    let allOrNothingScore = 0;\n    \n    allOrNothingPatterns.forEach(({ pattern, weight }) => {\n      const matches = text.match(pattern);\n      if (matches) {\n        allOrNothingScore += matches.length * weight;\n        allOrNothingEvidence.push(...matches);\n      }\n    });\n    \n    if (allOrNothingScore > 0.4) {\n      distortions.push({\n        name: 'all_or_nothing',\n        confidence: Math.min(allOrNothingScore, 1),\n        evidence: allOrNothingEvidence.slice(0, 3)\n      });\n    }\n    \n    // Mind Reading (Zihin Okuma)\n    const mindReadingPatterns = [\n      { pattern: /herkes.*?düşünüyor|kesin.*?düşünüyor/gi, weight: 0.8 },\n      { pattern: /benden nefret|beni sevmiyor/gi, weight: 0.9 },\n      { pattern: /yargılıyor|dalga geçiyor|aptal sanıyor/gi, weight: 0.7 }\n    ];\n    \n    const mindReadingEvidence = [];\n    let mindReadingScore = 0;\n    \n    mindReadingPatterns.forEach(({ pattern, weight }) => {\n      const matches = text.match(pattern);\n      if (matches) {\n        mindReadingScore += matches.length * weight;\n        mindReadingEvidence.push(...matches);\n      }\n    });\n    \n    if (mindReadingScore > 0.4) {\n      distortions.push({\n        name: 'mind_reading',\n        confidence: Math.min(mindReadingScore, 1),\n        evidence: mindReadingEvidence.slice(0, 3)\n      });\n    }\n    \n    // Personalization (Kişiselleştirme)\n    const personalizationPatterns = [\n      { pattern: /benim yüzümden|benim suçum/gi, weight: 0.9 },\n      { pattern: /ben sebep oldum|hep ben/gi, weight: 0.8 },\n      { pattern: /benden kaynaklı/gi, weight: 0.7 }\n    ];\n    \n    const personalizationEvidence = [];\n    let personalizationScore = 0;\n    \n    personalizationPatterns.forEach(({ pattern, weight }) => {\n      const matches = text.match(pattern);\n      if (matches) {\n        personalizationScore += matches.length * weight;\n        personalizationEvidence.push(...matches);\n      }\n    });\n    \n    if (personalizationScore > 0.4) {\n      distortions.push({\n        name: 'personalization',\n        confidence: Math.min(personalizationScore, 1),\n        evidence: personalizationEvidence.slice(0, 3)\n      });\n    }\n    \n    // Labeling (Etiketleme)\n    const labelingPatterns = [\n      { pattern: /ben.*?başarısızım|ben.*?aptalım/gi, weight: 0.9 },\n      { pattern: /ben.*?değersizim|ben.*?beceriksizim/gi, weight: 0.9 },\n      { pattern: /hiçbir işe yaramıyorum/gi, weight: 0.8 }\n    ];\n    \n    const labelingEvidence = [];\n    let labelingScore = 0;\n    \n    labelingPatterns.forEach(({ pattern, weight }) => {\n      const matches = text.match(pattern);\n      if (matches) {\n        labelingScore += matches.length * weight;\n        labelingEvidence.push(...matches);\n      }\n    });\n    \n    if (labelingScore > 0.4) {\n      distortions.push({\n        name: 'labeling',\n        confidence: Math.min(labelingScore, 1),\n        evidence: labelingEvidence.slice(0, 3)\n      });\n    }\n    \n    return distortions;\n  }\n\n  private generateThoughtRecord(text: string, distortions: any[]): any {\n    const primaryDistortion = distortions[0];\n    if (!primaryDistortion) return null;\n    \n    return {\n      automaticThought: text.substring(0, 200), // First 200 chars as automatic thought\n      emotion: this.extractEmotionFromText(text),\n      intensity: this.calculateEmotionalIntensity(text),\n      distortion: primaryDistortion.name,\n      evidence: primaryDistortion.evidence,\n      balancedThought: '', // Will be filled by user or AI reframes\n      createdAt: new Date().toISOString()\n    };\n  }\n\n  private async generateCBTReframes(text: string, distortions: any[]): Promise<string[]> {\n    const reframes = [];\n    \n    // Generate distortion-specific reframes\n    distortions.forEach(distortion => {\n      switch (distortion.name) {\n        case 'catastrophizing':\n          reframes.push(\n            'Bu durumun gerçekte ne kadar kötü olabileceğini gerçekçi bir şekilde değerlendirebilirim.',\n            'Geçmişte benzer durumlarla başa çıktığımı hatırlıyorum.',\n            'En kötü senaryo gerçekleşse bile, bunun üstesinden gelme yolları vardır.'\n          );\n          break;\n        case 'all_or_nothing':\n          reframes.push(\n            'Bu durum siyah-beyaz değil, grinin tonları var.',\n            'Mükemmel olmak zorunda değilim, yeterince iyi olmak da değerlidir.',\n            'Her şeyin bir spektrumu olduğunu hatırlamalıyım.'\n          );\n          break;\n        case 'mind_reading':\n          reframes.push(\n            'Başkalarının ne düşündüğünü gerçekten bilemem.',\n            'İnsanlar genellikle kendi sorunlarıyla meşguller, beni o kadar düşünmüyorlar.',\n            'Varsayımlarım gerçek olmayabilir, doğrudan sormak daha iyi olabilir.'\n          );\n          break;\n        case 'personalization':\n          reframes.push(\n            'Her şey benim kontrolümde değil ve her şeyden sorumlu değilim.',\n            'Bu duruma birçok faktör katkıda bulunmuş olabilir.',\n            'Kendimi gereksiz yere suçlamak yerine çözüm odaklı düşünebilirim.'\n          );\n          break;\n        case 'labeling':\n          reframes.push(\n            'Ben bir davranışım değilim, bu sadece bir hata.',\n            'Herkes hata yapar, bu beni kötü bir insan yapmaz.',\n            'Kendimle daha şefkatli konuşmalıyım.'\n          );\n          break;\n      }\n    });\n    \n    // Generic reframes if no specific distortions\n    if (reframes.length === 0) {\n      reframes.push(\n        'Bu düşüncenin bana ne kadar faydası var?',\n        'Bu durumu daha dengeli bir şekilde nasıl değerlendirebilirim?',\n        'En iyi arkadaşıma ne söylerdim?'\n      );\n    }\n    \n    // Remove duplicates and limit to 3\n    return [...new Set(reframes)].slice(0, 3);\n  }\n\n  private recommendCBTTechniques(distortions: any[], text: string): Array<{name: string, description: string, priority: number}> {\n    const techniques = [];\n    const distortionNames = distortions.map(d => d.name);\n    \n    // Technique recommendations based on detected distortions\n    if (distortionNames.includes('catastrophizing')) {\n      techniques.push({\n        name: 'Probability Estimation',\n        description: 'Korkulan durumun gerçekleşme olasılığını gerçekçi bir şekilde değerlendirin (0-100%).',\n        priority: 9\n      });\n      techniques.push({\n        name: 'Decatastrophizing',\n        description: 'En kötü senaryo gerçekleşse bile nasıl başa çıkabileceğinizi planlayın.',\n        priority: 8\n      });\n    }\n    \n    if (distortionNames.includes('all_or_nothing')) {\n      techniques.push({\n        name: 'Continuum Technique',\n        description: 'Durumu 0-100 skalasında değerlendirerek gri alanları keşfedin.',\n        priority: 9\n      });\n    }\n    \n    if (distortionNames.includes('mind_reading')) {\n      techniques.push({\n        name: 'Evidence Testing',\n        description: 'Başkalarının düşüncelerine dair varsayımlarınız için kanıt arayın.',\n        priority: 8\n      });\n      techniques.push({\n        name: 'Alternative Perspectives',\n        description: 'Durumu farklı açılardan değerlendirin.',\n        priority: 7\n      });\n    }\n    \n    // General techniques\n    techniques.push({\n      name: 'Thought Record',\n      description: 'Düşüncelerinizi yazarak analiz edin ve dengeli alternatifler bulun.',\n      priority: 6\n    });\n    \n    techniques.push({\n      name: 'Self-Compassion',\n      description: 'Kendinize en iyi arkadaşınıza davranır gibi şefkatli davranın.',\n      priority: 5\n    });\n    \n    // Sort by priority and return top 3\n    return techniques\n      .sort((a, b) => b.priority - a.priority)\n      .slice(0, 3);\n  }\n\n  private assessCognitiveDistortionSeverity(text: string, distortions: any[]): number {\n    if (distortions.length === 0) return 0;\n    \n    // Base severity from number of distortions\n    let severity = Math.min(distortions.length * 2, 6);\n    \n    // Increase severity based on confidence\n    const avgConfidence = distortions.reduce((sum, d) => sum + d.confidence, 0) / distortions.length;\n    severity += avgConfidence * 2;\n    \n    // Increase severity for emotional intensity words\n    const intensityWords = /çok|aşırı|korkunç|berbat|dayanamam|mahvoldum/gi;\n    const intensityMatches = text.match(intensityWords);\n    if (intensityMatches) {\n      severity += Math.min(intensityMatches.length * 0.5, 2);\n    }\n    \n    return Math.min(Math.round(severity), 10);\n  }\n\n  private calculateCBTUrgency(severity: number, distortions: any[]): 'low' | 'medium' | 'high' {\n    if (severity >= 8) return 'high';\n    if (severity >= 5) return 'medium';\n    return 'low';\n  }\n\n  private calculateCBTConfidence(distortions: any[], textLength: number): number {\n    if (distortions.length === 0) return 0.3;\n    \n    const avgDistortionConfidence = distortions.reduce((sum, d) => sum + d.confidence, 0) / distortions.length;\n    const lengthBonus = Math.min(textLength / 100, 0.2); // Bonus for longer text\n    \n    return Math.min(avgDistortionConfidence + lengthBonus, 0.95);\n  }\n\n  /**\n   * ✅ FIXED: Centralized heuristic voice fallback (moved from UI layer)\n   * Generate basic heuristic analysis when sophisticated voice analysis fails\n   */\n  private generateHeuristicVoiceAnalysis(text: string): any {\n    const lowerText = text.toLowerCase();\n    \n    // Simple keyword-based classification\n    const moodKeywords = ['mutlu', 'üzgün', 'yorgun', 'iyi', 'kötü', 'harika', 'berbat', 'mükemmel', 'mood', 'hissediyorum'];\n    const ocdKeywords = ['kompulsiyon', 'takıntı', 'kontrol', 'temizlik', 'yıkama', 'sayma', 'düzen', 'simetri'];\n    const cbtKeywords = ['düşünce', 'olumsuz', 'kaygı', 'endişe', 'korku', 'çarpıtma', 'yanlış', 'doğru'];\n    const breathworkKeywords = ['nefes', 'sakin', 'rahatlama', 'stres', 'gergin', 'soluk'];\n    \n    // Count keyword matches\n    const moodCount = moodKeywords.filter(keyword => lowerText.includes(keyword)).length;\n    const ocdCount = ocdKeywords.filter(keyword => lowerText.includes(keyword)).length;\n    const cbtCount = cbtKeywords.filter(keyword => lowerText.includes(keyword)).length;\n    const breathworkCount = breathworkKeywords.filter(keyword => lowerText.includes(keyword)).length;\n    \n    // Determine category based on highest count\n    let category = 'MOOD'; // default\n    let confidence = 0.3; // low confidence for heuristic\n    let maxCount = moodCount;\n    \n    if (ocdCount > maxCount) {\n      category = 'OCD';\n      maxCount = ocdCount;\n    }\n    if (cbtCount > maxCount) {\n      category = 'CBT';\n      maxCount = cbtCount;\n    }\n    if (breathworkCount > maxCount) {\n      category = 'BREATHWORK';\n      maxCount = breathworkCount;\n    }\n    \n    // Adjust confidence based on matches\n    confidence = Math.min(0.6, 0.3 + (maxCount * 0.1));\n    \n    return {\n      category,\n      confidence,\n      suggestion: 'Heuristic analysis tamamlandı',\n      route: 'SUGGEST_SCREEN',\n      extractedData: {\n        mood: Math.max(1, Math.min(10, 5 + (maxCount - 2))), // 1-10 range, neutral=5\n        trigger: category === 'OCD' ? 'compulsion_detected' :\n                category === 'CBT' ? 'negative_thought' :\n                category === 'BREATHWORK' ? 'anxiety_detected' : 'mood_expression'\n      },\n      metadata: {\n        source: 'unified_heuristic_fallback',\n        processingTime: 0,\n        keywordMatches: { moodCount, ocdCount, cbtCount, breathworkCount }\n      }\n    };\n  }\n\n  private extractEmotionFromText(text: string): string {\n    const emotions = {\n      'üzgün': /üzgün|üzülü|kederli|melankolik/gi,\n      'öfkeli': /öfkeli|sinirli|kızgın|rahatsız/gi,\n      'kaygılı': /kaygılı|endişeli|gergin|stresli/gi,\n      'korku': /korku|panik|dehşet/gi,\n      'utanç': /utanç|mahcup|rezil/gi\n    };\n    \n    for (const [emotion, pattern] of Object.entries(emotions)) {\n      if (pattern.test(text)) {\n        return emotion;\n      }\n    }\n    \n    return 'belirsiz';\n  }\n\n  private calculateEmotionalIntensity(text: string): number {\n    const intensifiers = text.match(/çok|aşırı|son derece|fazlasıyla|tam/gi);\n    const baseIntensity = 5;\n    const intensifierBonus = intensifiers ? Math.min(intensifiers.length * 2, 4) : 0;\n    \n    return Math.min(baseIntensity + intensifierBonus, 10);\n  }\n  \n  private async processInsightsGeneration(\n    input: UnifiedPipelineInput, \n    patterns: any\n  ): Promise<any> {\n    try {\n      const insights = {\n        therapeutic: [],\n        progress: [],\n        behavioral: [],\n        motivational: [],\n        metadata: {\n          generatedAt: Date.now(),\n          confidence: 0,\n          totalInsights: 0,\n          categories: []\n        }\n      };\n      \n      // 1. VOICE-ENHANCED INSIGHTS (Ses analizi destekli)\n      const voiceHints = input.context?.hints;\n      if (voiceHints?.voiceCategory && voiceHints.voiceConfidence > 0.7) {\n        const voiceEnhancedInsights = this.generateVoiceEnhancedInsights(voiceHints, patterns);\n        insights.therapeutic.push(...voiceEnhancedInsights);\n        console.log(`🎤 Added ${voiceEnhancedInsights.length} voice-enhanced insights for category: ${voiceHints.voiceCategory}`);\n        \n        // 📊 Track voice insights application\n        try {\n          await trackAIInteraction(AIEventType.INSIGHTS_DELIVERED, {\n            userId: input.userId,\n            source: 'voice_enhanced_insights',\n            insightsHintsApplied: true,\n            voiceCategory: voiceHints.voiceCategory,\n            voiceConfidence: voiceHints.voiceConfidence,\n            enhancedInsightsCount: voiceEnhancedInsights.length,\n            originalPatternsCount: Object.keys(patterns).filter(k => patterns[k]?.length > 0).length\n          });\n        } catch (error) {\n          console.warn('⚠️ Voice insights telemetry failed:', error);\n        }\n      }\n\n      // 2. TEMPORAL INSIGHTS (Zaman bazlı içgörüler)\n      if (patterns.temporal && patterns.temporal.length > 0) {\n        const temporalInsights = this.generateTemporalInsights(patterns.temporal);\n        insights.therapeutic.push(...temporalInsights);\n      }\n      \n      // 3. BEHAVIORAL INSIGHTS (Davranışsal içgörüler)\n      if (patterns.behavioral && patterns.behavioral.length > 0) {\n        const behavioralInsights = this.generateBehavioralInsights(patterns.behavioral);\n        insights.behavioral.push(...behavioralInsights);\n      }\n      \n      // 4. TRIGGER INSIGHTS (Tetik içgörüleri)\n      if (patterns.triggers && patterns.triggers.length > 0) {\n        const triggerInsights = this.generateTriggerInsights(patterns.triggers);\n        insights.therapeutic.push(...triggerInsights);\n      }\n      \n      // 5. SEVERITY PROGRESSION INSIGHTS (Şiddet seyri içgörüleri)\n      if (patterns.severity && patterns.severity.length > 0) {\n        const severityInsights = this.generateSeverityInsights(patterns.severity);\n        insights.progress.push(...severityInsights);\n      }\n      \n      // 6. ENVIRONMENTAL INSIGHTS (Çevresel içgörüler)\n      if (patterns.environmental && patterns.environmental.length > 0) {\n        const environmentalInsights = this.generateEnvironmentalInsights(patterns.environmental);\n        insights.therapeutic.push(...environmentalInsights);\n      }\n      \n      // 7. PROGRESS INSIGHTS (İlerleme içgörüleri)\n      const progressInsights = this.generateProgressInsights(patterns, input);\n      insights.progress.push(...progressInsights);\n      \n      // 8. MOTIVATIONAL INSIGHTS (Motivasyon içgörüleri)\n      const motivationalInsights = this.generateMotivationalInsights(patterns);\n      insights.motivational.push(...motivationalInsights);\n      \n      // 9. CROSS-PATTERN INSIGHTS (Çapraz kalıp analizi)\n      const crossPatternInsights = this.generateCrossPatternInsights(patterns);\n      insights.therapeutic.push(...crossPatternInsights);\n      \n      // 10. CALCULATE METADATA\n      insights.metadata = this.calculateInsightsMetadata(insights);\n      \n      // 11. PRIORITIZE AND LIMIT INSIGHTS (En önemli içgörüleri seç)\n      insights.therapeutic = this.prioritizeInsights(insights.therapeutic).slice(0, 5);\n      insights.progress = insights.progress.slice(0, 3);\n      insights.behavioral = insights.behavioral.slice(0, 3);\n      insights.motivational = insights.motivational.slice(0, 2);\n      \n      // 12. FALLBACK INSIGHT GENERATION (Boş sonuç önleme)\n      const totalInsights = insights.therapeutic.length + insights.progress.length + \n                           insights.behavioral.length + insights.motivational.length;\n      \n      if (totalInsights === 0) {\n        console.log('⚠️ No primary insights generated, adding fallback insights...');\n        const fallbackInsights = this.generateFallbackInsights(patterns, input);\n        insights.therapeutic.push(...fallbackInsights.therapeutic);\n        insights.progress.push(...fallbackInsights.progress);\n        \n        // Track fallback usage for monitoring\n        trackAIInteraction(AIEventType.INSIGHTS_DELIVERED, {\n          userId: input.userId,\n          source: 'fallback',\n          reason: 'no_primary_insights',\n          insightsCount: fallbackInsights.therapeutic.length + fallbackInsights.progress.length,\n          patternsAvailable: Object.keys(patterns).filter(k => patterns[k]?.length > 0)\n        }).catch(console.warn);\n      }\n      \n      return insights;\n    } catch (error) {\n      console.error('Insights generation failed:', error);\n      return {\n        therapeutic: [],\n        progress: [],\n        behavioral: [],\n        motivational: [],\n        metadata: {\n          generatedAt: Date.now(),\n          confidence: 0,\n          totalInsights: 0,\n          categories: []\n        }\n      };\n    }\n  }\n\n  private generateTemporalInsights(temporalPatterns: any[]): any[] {\n    const insights = [];\n    \n    temporalPatterns.forEach(pattern => {\n      switch (pattern.type) {\n        case 'peak_hour':\n          insights.push({\n            text: `Kompulsiyonlarınız genellikle ${pattern.timeOfDay} saatlerinde pik yapıyor. Bu saatlerde önceden hazırlanmak faydalı olabilir.`,\n            category: 'temporal',\n            priority: 'high',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { peakTime: pattern.timeOfDay, frequency: pattern.frequency }\n          });\n          break;\n        case 'peak_day':\n          insights.push({\n            text: `${pattern.dayOfWeek} günleri kompulsiyonlarınız daha sık görülüyor. Bu günler için özel stratejiler geliştirebilirsiniz.`,\n            category: 'temporal',\n            priority: 'medium',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { peakDay: pattern.dayOfWeek, frequency: pattern.frequency }\n          });\n          break;\n        case 'clustering':\n          insights.push({\n            text: 'Kompulsiyonlarınız kümelenmede meydana geliyor. Bir kompulsiyondan sonra diğerlerini tetiklemeyi önlemek için ara teknikler kullanabilirsiniz.',\n            category: 'temporal',\n            priority: 'high',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { clusterCount: pattern.clusters.length }\n          });\n          break;\n        case 'mood_trend':\n          if (pattern.direction === 'improving') {\n            insights.push({\n              text: 'Ruh haliniz son zamanlarda iyileşme eğiliminde! Bu pozitif trendi sürdürmeye odaklanın.',\n              category: 'progress',\n              priority: 'high',\n              actionable: false,\n              confidence: pattern.confidence,\n              data: { trend: pattern.direction, strength: pattern.strength }\n            });\n          } else if (pattern.direction === 'declining') {\n            insights.push({\n              text: 'Ruh halinizde düşüş gözleniyor. Destek stratejilerinizi devreye sokmak için uygun bir zaman olabilir.',\n              category: 'alert',\n              priority: 'high',\n              actionable: true,\n              confidence: pattern.confidence,\n              data: { trend: pattern.direction, strength: pattern.strength }\n            });\n          }\n          break;\n        case 'therapy_progress':\n          if (pattern.direction === 'improving') {\n            insights.push({\n              text: 'Terapi seanslarınızda ilerleme kaydediyorsunuz! Mevcut yaklaşımınızı sürdürün.',\n              category: 'progress',\n              priority: 'high',\n              actionable: false,\n              confidence: pattern.confidence,\n              data: { direction: pattern.direction, consistency: pattern.consistency }\n            });\n          }\n          break;\n      }\n    });\n    \n    return insights;\n  }\n\n  private generateBehavioralInsights(behavioralPatterns: any[]): any[] {\n    const insights = [];\n    \n    behavioralPatterns.forEach(pattern => {\n      switch (pattern.type) {\n        case 'dominant_category':\n          insights.push({\n            text: `Kompulsiyonlarınızın %${pattern.percentage}'i ${pattern.category} kategorisinde. Bu alana özel müdahaleler geliştirebilirsiniz.`,\n            category: 'behavioral',\n            priority: 'high',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { category: pattern.category, percentage: pattern.percentage }\n          });\n          break;\n        case 'duration_pattern':\n          if (pattern.trend === 'increasing') {\n            insights.push({\n              text: `Kompulsiyon süreleriniz artış eğiliminde (ortalama ${pattern.averageDuration} dakika). Durdurma stratejilerinizi gözden geçirin.`,\n              category: 'behavioral',\n              priority: 'medium',\n              actionable: true,\n              confidence: pattern.confidence,\n              data: { averageDuration: pattern.averageDuration, trend: pattern.trend }\n            });\n          } else if (pattern.trend === 'decreasing') {\n            insights.push({\n              text: `Kompulsiyon süreleriniz azalıyor! Bu olumlu gelişimi sürdürün.`,\n              category: 'progress',\n              priority: 'medium',\n              actionable: false,\n              confidence: pattern.confidence,\n              data: { averageDuration: pattern.averageDuration, trend: pattern.trend }\n            });\n          }\n          break;\n        case 'compulsion_indicator':\n          insights.push({\n            text: `${pattern.category} tipi kompulsiyonlara yönelik belirtiler tespit edildi. Bu alana özel egzersizler faydalı olabilir.`,\n            category: 'behavioral',\n            priority: 'medium',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { category: pattern.category, intensity: pattern.intensity }\n          });\n          break;\n      }\n    });\n    \n    return insights;\n  }\n\n  private generateTriggerInsights(triggerPatterns: any[]): any[] {\n    const insights = [];\n    \n    triggerPatterns.forEach(pattern => {\n      switch (pattern.type) {\n        case 'situational':\n          insights.push({\n            text: `\"${pattern.description}\" sıklıkla tetikleyici oluyor. Bu durumlar için önceden stratejiler hazırlayabilirsiniz.`,\n            category: 'trigger',\n            priority: 'medium',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { trigger: pattern.description, frequency: pattern.frequency }\n          });\n          break;\n        case 'emotional':\n          const emotionTurkish = {\n            'anxiety': 'kaygı',\n            'stress': 'stres',\n            'perfectionism': 'mükemmeliyetçilik'\n          };\n          insights.push({\n            text: `${emotionTurkish[pattern.trigger] || pattern.trigger} durumlarında kompulsiyonlar tetikleniyor. Duygu düzenleme tekniklerini devreye alın.`,\n            category: 'trigger',\n            priority: 'high',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { emotionalTrigger: pattern.trigger }\n          });\n          break;\n        case 'location':\n          insights.push({\n            text: `${pattern.trigger} konumunda kompulsiyonlar sıklıkla görülüyor. Bu ortamda özel önlemler alabilirsiniz.`,\n            category: 'trigger',\n            priority: 'medium',\n            actionable: true,\n            confidence: pattern.confidence,\n            data: { location: pattern.trigger, frequency: pattern.frequency }\n          });\n          break;\n      }\n    });\n    \n    return insights;\n  }\n\n  private generateSeverityInsights(severityPatterns: any[]): any[] {\n    const insights = [];\n    \n    severityPatterns.forEach(pattern => {\n      if (pattern.type === 'severity_trend') {\n        switch (pattern.direction) {\n          case 'improving':\n            insights.push({\n              metric: 'severity_trend',\n              value: pattern.recentAverage,\n              change: -pattern.strength,\n              interpretation: `Şiddet düzeyinde iyileşme var! Son veriler ${pattern.recentAverage.toFixed(1)} ortalama gösteriyor.`,\n              confidence: pattern.confidence\n            });\n            break;\n          case 'worsening':\n            insights.push({\n              metric: 'severity_trend',\n              value: pattern.recentAverage,\n              change: pattern.strength,\n              interpretation: `Şiddet düzeyinde artış gözleniyor. Destek stratejilerini devreye alma zamanı.`,\n              confidence: pattern.confidence\n            });\n            break;\n          case 'stable':\n            insights.push({\n              metric: 'severity_trend',\n              value: pattern.recentAverage,\n              change: 0,\n              interpretation: 'Şiddet düzeyi stabil seyrediyor.',\n              confidence: pattern.confidence\n            });\n            break;\n        }\n      }\n    });\n    \n    return insights;\n  }\n\n  private generateEnvironmentalInsights(environmentalPatterns: any[]): any[] {\n    const insights = [];\n    \n    environmentalPatterns.forEach(pattern => {\n      if (pattern.type === 'location') {\n        insights.push({\n          text: `${pattern.trigger} konumunda kompulsiyonlar sık görülüyor. Bu ortamda tetik faktörlerini belirleyip önlem almayı düşünün.`,\n          category: 'environmental',\n          priority: 'medium',\n          actionable: true,\n          confidence: pattern.confidence,\n          data: { location: pattern.trigger, frequency: pattern.frequency }\n        });\n      }\n    });\n    \n    return insights;\n  }\n\n  private generateProgressInsights(patterns: any, input: UnifiedPipelineInput): any[] {\n    const insights = [];\n    \n    // Data richness insight\n    if (patterns.metadata && patterns.metadata.dataPoints > 10) {\n      insights.push({\n        metric: 'data_richness',\n        value: patterns.metadata.dataPoints,\n        change: 0,\n        interpretation: `${patterns.metadata.dataPoints} veri noktası ile güçlü bir analiz yapabiliyoruz.`,\n        confidence: 0.9\n      });\n    }\n    \n    // Pattern detection confidence\n    if (patterns.metadata && patterns.metadata.confidence > 0.7) {\n      insights.push({\n        metric: 'pattern_confidence',\n        value: Math.round(patterns.metadata.confidence * 100),\n        change: 0,\n        interpretation: `Kalıp tespitinde %${Math.round(patterns.metadata.confidence * 100)} güven düzeyi.`,\n        confidence: patterns.metadata.confidence\n      });\n    }\n    \n    return insights;\n  }\n\n  private generateMotivationalInsights(patterns: any): any[] {\n    const insights = [];\n    \n    // Encourage pattern awareness\n    if (patterns.temporal && patterns.temporal.length > 0) {\n      insights.push({\n        text: 'Verilerinizi analiz etmek, kendi kalıplarınızı anlamanızı sağlıyor. Bu farkındalık iyileşmenin ilk adımıdır.',\n        category: 'motivational',\n        priority: 'low',\n        actionable: false,\n        confidence: 0.8\n      });\n    }\n    \n    // Encourage consistency\n    if (patterns.metadata && patterns.metadata.dataPoints >= 5) {\n      insights.push({\n        text: 'Düzenli kayıt tutmaya devam ediyorsunuz. Bu tutarlılık uzun vadeli başarının anahtarı!',\n        category: 'motivational',\n        priority: 'low',\n        actionable: false,\n        confidence: 0.9\n      });\n    }\n    \n    return insights;\n  }\n\n  private generateCrossPatternInsights(patterns: any): any[] {\n    const insights = [];\n    \n    // Cross-pattern analysis (temporal + behavioral)\n    if (patterns.temporal && patterns.behavioral && patterns.temporal.length > 0 && patterns.behavioral.length > 0) {\n      insights.push({\n        text: 'Zaman kalıplarınız ile davranış örüntüleriniz arasında bağlantı var. Bu ilişkiyi anlayarak daha etkili stratejiler geliştirebilirsiniz.',\n        category: 'complex_pattern',\n        priority: 'medium',\n        actionable: true,\n        confidence: 0.7,\n        data: { \n          temporalPatterns: patterns.temporal.length, \n          behavioralPatterns: patterns.behavioral.length \n        }\n      });\n    }\n    \n    // High severity with strong patterns\n    if (patterns.severity && patterns.temporal && patterns.severity.length > 0) {\n      const hasSeverePattern = patterns.severity.some(s => s.direction === 'worsening');\n      if (hasSeverePattern) {\n        insights.push({\n          text: 'Şiddet artışı ile zaman kalıpları birleştiğinde, öngörülü müdahale planları önem kazanıyor.',\n          category: 'strategic',\n          priority: 'high',\n          actionable: true,\n          confidence: 0.8\n        });\n      }\n    }\n    \n    return insights;\n  }\n\n  private calculateInsightsMetadata(insights: any): any {\n    const allInsights = [\n      ...insights.therapeutic,\n      ...insights.progress,\n      ...insights.behavioral,\n      ...insights.motivational\n    ];\n    \n    const categories = [...new Set(allInsights.map(insight => insight.category || 'unknown'))];\n    const avgConfidence = allInsights.reduce((sum, insight) => \n      sum + (insight.confidence || 0.5), 0) / allInsights.length;\n    \n    return {\n      generatedAt: Date.now(),\n      confidence: avgConfidence || 0,\n      totalInsights: allInsights.length,\n      categories\n    };\n  }\n\n  private prioritizeInsights(insights: any[]): any[] {\n    const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };\n    \n    return insights.sort((a, b) => {\n      const aPriority = priorityOrder[a.priority] || 0;\n      const bPriority = priorityOrder[b.priority] || 0;\n      \n      if (aPriority !== bPriority) {\n        return bPriority - aPriority; // High priority first\n      }\n      \n      // If same priority, sort by confidence\n      return (b.confidence || 0) - (a.confidence || 0);\n    });\n  }\n  \n  /**\n   * Determine if breathwork analysis should run\n   */\n  private shouldRunBreathwork(input: UnifiedPipelineInput): boolean {\n    // Always check for breathwork opportunities\n    return true;\n  }\n  \n  /**\n   * Process comprehensive breathwork analysis with new service integration\n   */\n  private async processBreathworkAnalysis(input: UnifiedPipelineInput): Promise<any> {\n    try {\n      // Extract context for breathwork suggestion\n      const context = {\n        moodScore: this.extractMoodFromInput(input),\n        anxietyLevel: this.extractAnxietyFromInput(input),\n        recentCompulsions: this.extractRecentCompulsions(input),\n        userInput: typeof input.content === 'string' ? input.content : undefined\n      };\n      \n      // Use new breathwork suggestion service\n      try {\n        const { breathworkSuggestionService } = await import('../services/breathworkSuggestionService');\n        \n        const suggestion = await breathworkSuggestionService.generateSuggestion({\n          userId: input.userId,\n          ...context,\n          currentTime: new Date()\n        });\n        \n        if (suggestion) {\n          return {\n            hasBreathworkSuggestion: true,\n            suggestion: {\n              id: suggestion.id,\n              trigger: suggestion.trigger,\n              protocol: suggestion.protocol,\n              urgency: suggestion.urgency,\n              customization: suggestion.customization,\n              timing: suggestion.timing,\n              metadata: {\n                confidence: suggestion.trigger.confidence,\n                source: 'ai_breathwork_service',\n                generatedAt: suggestion.metadata.generatedAt,\n                priority: suggestion.metadata.priority\n              }\n            },\n            enhancement: {\n              contextualRelevance: this.calculateBreathworkRelevance(context),\n              fallbackProtocols: suggestion.metadata.fallbackOptions,\n              adaptations: {\n                userPreferences: true,\n                urgencyAdjusted: suggestion.urgency !== 'low',\n                protocolCustomized: suggestion.protocol.name !== 'box'\n              }\n            }\n          };\n        }\n        \n      } catch (serviceError) {\n        console.warn('Breathwork service unavailable, using fallback:', serviceError);\n        \n        // Fallback to enhanced heuristic analysis\n        return this.processBreathworkHeuristics(context);\n      }\n      \n      return { hasBreathworkSuggestion: false };\n      \n    } catch (error) {\n      console.error('Breathwork analysis failed:', error);\n      return { hasBreathworkSuggestion: false, error: 'analysis_failed' };\n    }\n  }\n  \n  /**\n   * Fallback breathwork analysis using heuristics\n   */\n  private processBreathworkHeuristics(context: any): any {\n    const anxietyLevel = context.anxietyLevel || 5;\n    const moodScore = context.moodScore;\n    const recentCompulsions = context.recentCompulsions || 0;\n    \n    // Determine if breathwork is needed\n    let needsBreathwork = false;\n    let urgency: 'low' | 'medium' | 'high' = 'low';\n    let triggerType = 'maintenance';\n    \n    if (anxietyLevel >= 8) {\n      needsBreathwork = true;\n      urgency = 'high';\n      triggerType = 'anxiety';\n    } else if (anxietyLevel >= 6) {\n      needsBreathwork = true;\n      urgency = 'medium';\n      triggerType = 'anxiety';\n    } else if (moodScore && moodScore <= 4) {\n      needsBreathwork = true;\n      urgency = 'medium';\n      triggerType = 'low_mood';\n    } else if (recentCompulsions >= 2) {\n      needsBreathwork = true;\n      urgency = 'medium';\n      triggerType = 'post_compulsion';\n    }\n    \n    if (!needsBreathwork) {\n      return { hasBreathworkSuggestion: false };\n    }\n    \n    // Select protocol based on context\n    let protocol = 'box';\n    if (anxietyLevel >= 8) protocol = 'quick_calm';\n    else if (anxietyLevel >= 6) protocol = '4-7-8';\n    else if (moodScore && moodScore <= 3) protocol = 'paced';\n    \n    return {\n      hasBreathworkSuggestion: true,\n      suggestion: {\n        id: `heuristic_${Date.now()}`,\n        trigger: { \n          type: triggerType, \n          confidence: anxietyLevel >= 7 ? 0.8 : 0.6,\n          contextData: { anxietyLevel, moodScore, recentCompulsions }\n        },\n        protocol: { \n          name: protocol, \n          duration: protocol === 'quick_calm' ? 120 : 300 \n        },\n        urgency,\n        metadata: {\n          confidence: anxietyLevel >= 7 ? 0.8 : 0.6,\n          source: 'heuristic_fallback',\n          generatedAt: Date.now()\n        }\n      },\n      enhancement: {\n        contextualRelevance: this.calculateBreathworkRelevance(context),\n        fallbackProtocols: ['box', 'paced'],\n        adaptations: {\n          userPreferences: false,\n          urgencyAdjusted: urgency !== 'low',\n          protocolCustomized: false\n        }\n      }\n    };\n  }\n  \n  private extractMoodFromInput(input: UnifiedPipelineInput): number | undefined {\n    if (typeof input.content === 'object' && input.content.mood) {\n      return input.content.mood;\n    }\n    \n    if (typeof input.content === 'string') {\n      // Simple mood extraction from text\n      const text = input.content.toLowerCase();\n      if (/çok.*?(kötü|berbat|mutsuz)/i.test(text)) return 2;\n      if (/kötü|üzgün|keyifsiz/i.test(text)) return 4;\n      if (/iyi|güzel|mutlu/i.test(text)) return 7;\n      if (/(çok|aşırı).*?(iyi|mutlu|harika)/i.test(text)) return 9;\n    }\n    \n    return undefined;\n  }\n  \n  private extractAnxietyFromInput(input: UnifiedPipelineInput): number {\n    if (typeof input.content === 'object' && input.content.anxiety) {\n      return input.content.anxiety;\n    }\n    \n    if (typeof input.content === 'string') {\n      const text = input.content.toLowerCase();\n      let anxietyScore = 0;\n      \n      // High anxiety indicators\n      if (/panik|dehşet|korkunç|dayanamıyorum/i.test(text)) anxietyScore += 4;\n      if (/kaygı|endişe|gergin/i.test(text)) anxietyScore += 2;\n      if (/(çok|aşırı).*?(kaygılı|endişeli|gergin)/i.test(text)) anxietyScore += 3;\n      if (/nefes.*?alamıyorum|çarpıntı|titreme/i.test(text)) anxietyScore += 3;\n      \n      return Math.min(anxietyScore, 10);\n    }\n    \n    return 5; // Default neutral\n  }\n  \n  private extractRecentCompulsions(input: UnifiedPipelineInput): number {\n    if (typeof input.content === 'object' && input.content.compulsions) {\n      if (Array.isArray(input.content.compulsions)) {\n        // Count recent compulsions (last 24 hours)\n        const yesterday = Date.now() - (24 * 60 * 60 * 1000);\n        return input.content.compulsions.filter(c => \n          c.timestamp && new Date(c.timestamp).getTime() > yesterday\n        ).length;\n      }\n    }\n    \n    if (typeof input.content === 'string') {\n      // Simple compulsion indicators from text\n      const compulsionWords = /kontrol.*?etti?m|tekrar.*?bakt?ım|yıka.*?dım|temizle.*?dim|say.*?dım/gi;\n      const matches = input.content.match(compulsionWords);\n      return matches ? matches.length : 0;\n    }\n    \n    return 0;\n  }\n  \n  private calculateBreathworkRelevance(context: any): number {\n    let relevance = 0.3; // Base relevance\n    \n    if (context.anxietyLevel && context.anxietyLevel >= 6) relevance += 0.4;\n    if (context.moodScore && context.moodScore <= 4) relevance += 0.3;\n    if (context.recentCompulsions && context.recentCompulsions >= 1) relevance += 0.2;\n    if (context.userInput && /nefes|sakin|rahatlat/i.test(context.userInput)) relevance += 0.3;\n    \n    return Math.min(relevance, 1.0);\n  }\n  \n  // ============================================================================\n  // HELPER METHODS\n  // ============================================================================\n  \n  private extractTemporalPatterns(compulsions: any[]): any[] {\n    // Guard against undefined/null compulsions\n    if (!compulsions || !Array.isArray(compulsions)) return [];\n    \n    // 🚀 PERFORMANCE OPTIMIZATION: Sample recent entries only\n    // Recent patterns are more relevant and processing is much faster\n    const SAMPLE_SIZE = 50; // Process max 50 recent entries instead of all 101+\n    const recentCompulsions = compulsions\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, SAMPLE_SIZE);\n    \n    // Group by hour of day\n    const hourGroups = {};\n    \n    recentCompulsions.forEach(c => {\n      const hour = new Date(c.timestamp).getHours();\n      hourGroups[hour] = (hourGroups[hour] || 0) + 1;\n    });\n    \n    // Find peak hours with early exit\n    const patterns = [];\n    const maxPatterns = 5; // Limit patterns to prevent over-processing\n    \n    Object.entries(hourGroups)\n      .sort(([,a], [,b]) => (b as number) - (a as number)) // Sort by frequency\n      .forEach(([hour, count]) => {\n        if (patterns.length >= maxPatterns) return; // Early exit\n        if (count > 2) {\n          patterns.push({\n            type: 'peak_hour',\n            frequency: count as number,\n            timeOfDay: `${hour}:00`,\n            trend: 'stable',\n            sampleSize: recentCompulsions.length\n          });\n        }\n      });\n    \n    return patterns;\n  }\n  \n  private extractBehavioralPatterns(compulsions: any[]): any[] {\n    // Guard against undefined/null compulsions\n    if (!compulsions || !Array.isArray(compulsions)) return [];\n    \n    // 🚀 PERFORMANCE OPTIMIZATION: Sample recent entries only\n    const SAMPLE_SIZE = 50; // Process max 50 recent entries instead of all 101+\n    const recentCompulsions = compulsions\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, SAMPLE_SIZE);\n    \n    // Group by trigger\n    const triggerGroups = {};\n    \n    recentCompulsions.forEach(c => {\n      const trigger = c.trigger || 'unknown';\n      if (!triggerGroups[trigger]) {\n        triggerGroups[trigger] = {\n          count: 0,\n          totalSeverity: 0\n        };\n      }\n      triggerGroups[trigger].count++;\n      triggerGroups[trigger].totalSeverity += this.getCompulsionSeverity(c);\n    });\n    \n    // Convert to patterns with early exit\n    const patterns = [];\n    const maxPatterns = 6; // Limit patterns to prevent over-processing\n    \n    Object.entries(triggerGroups)\n      .sort(([,a], [,b]) => (b as any).count - (a as any).count) // Sort by frequency\n      .forEach(([trigger, data]: [string, any]) => {\n        if (patterns.length >= maxPatterns) return; // Early exit\n        if (data.count >= 2) { // Only include meaningful triggers\n          patterns.push({\n            trigger,\n            response: 'compulsion',\n            frequency: data.count,\n            severity: Math.round(data.totalSeverity / data.count),\n            sampleSize: recentCompulsions.length\n          });\n        }\n      });\n    \n    return patterns;\n  }\n  \n  private shouldRunCBT(input: UnifiedPipelineInput): boolean {\n    return input.type === 'voice' || \n           input.context?.source === 'cbt' ||\n           (typeof input.content === 'string' && input.content.length > 50);\n  }\n  \n  private getEnabledModules(): string[] {\n    const modules = [];\n    // ✅ FIXED: Use dedicated unified pipeline flags instead of legacy component flags\n    if (FEATURE_FLAGS.isEnabled('AI_UNIFIED_VOICE')) modules.push('voice');\n    if (FEATURE_FLAGS.isEnabled('AI_UNIFIED_PATTERNS')) modules.push('patterns');\n    if (FEATURE_FLAGS.isEnabled('AI_UNIFIED_INSIGHTS')) modules.push('insights');\n    if (FEATURE_FLAGS.isEnabled('AI_UNIFIED_CBT')) modules.push('cbt');\n    return modules;\n  }\n  \n  // ============================================================================\n  // CACHE MANAGEMENT\n  // ============================================================================\n  \n  private generateCacheKey(input: UnifiedPipelineInput): string {\n    const data = {\n      userId: input.userId,\n      type: input.type,\n      content: typeof input.content === 'string' \n        ? input.content.substring(0, 100) \n        : JSON.stringify(input.content).substring(0, 100),\n      source: input.context?.source\n    };\n    \n    return `unified:${input.userId}:${simpleHash(JSON.stringify(data))}`;\n  }\n  \n  private async getFromCache(key: string): Promise<UnifiedPipelineResult | null> {\n    // 1. Check in-memory cache first (fastest)\n    const memoryCache = this.cache.get(key);\n    \n    if (memoryCache) {\n      if (memoryCache.expires < Date.now()) {\n        this.cache.delete(key);\n      } else {\n        // 🚫 NEGATIVE CACHE BYPASS: Skip empty insights with short TTL\n        const insightsCount = this.countTotalInsights(memoryCache.result);\n        const remainingTTL = memoryCache.expires - Date.now();\n        const fiveMinutes = 5 * 60 * 1000;\n        \n        if (insightsCount === 0 && remainingTTL < fiveMinutes) {\n          console.log(`🚫 Bypassing negative cache: insightsCount=${insightsCount}, remainingTTL=${Math.round(remainingTTL/60000)}min`);\n          this.cache.delete(key);\n          // Skip this cache entry and continue to fresh generation\n        } else {\n          return memoryCache.result;\n        }\n      }\n    }\n    \n    // 2. Check Supabase cache (persistent, shared across devices)\n    try {\n      const supabaseCached = await this.getFromSupabaseCache(key);\n      if (supabaseCached) {\n        // 🚫 NEGATIVE CACHE BYPASS: Check for empty insights before restoring\n        const insightsCount = this.countTotalInsights(supabaseCached);\n        \n        if (insightsCount === 0) {\n          console.log(`🚫 Bypassing negative Supabase cache: insightsCount=${insightsCount}`);\n          // Don't restore empty cache to memory, continue to fresh generation\n        } else {\n          // Restore to memory cache for faster future access (use default TTL for restored cache)\n          this.cache.set(key, {\n            result: supabaseCached,\n            expires: Date.now() + this.MODULE_TTLS.default\n          });\n          \n          console.log('📦 Cache restored from Supabase:', key.substring(0, 30) + '...');\n          return supabaseCached;\n        }\n      }\n    } catch (error) {\n      console.warn('⚠️ Supabase cache read failed:', error);\n    }\n    \n    // 3. Check AsyncStorage cache (offline fallback)\n    try {\n      const offlineCache = await AsyncStorage.getItem(key);\n      if (offlineCache) {\n        const parsed = JSON.parse(offlineCache);\n        if (parsed.expires > Date.now()) {\n          // 🚫 NEGATIVE CACHE BYPASS: Check for empty insights before restoring\n          const insightsCount = this.countTotalInsights(parsed.result);\n          \n          if (insightsCount === 0) {\n            console.log(`🚫 Bypassing negative AsyncStorage cache: insightsCount=${insightsCount}`);\n            await AsyncStorage.removeItem(key); // Clean up negative cache\n            // Continue to fresh generation\n          } else {\n            console.log('📱 Cache restored from AsyncStorage:', key.substring(0, 30) + '...');\n            return parsed.result;\n          }\n        } else {\n          await AsyncStorage.removeItem(key);\n        }\n      }\n    } catch (error) {\n      console.warn('⚠️ AsyncStorage cache read failed:', error);\n    }\n    \n    return null;\n  }\n  \n  private setCache(key: string, result: UnifiedPipelineResult, ttl?: number): void {\n    // ✅ FIXED: Use module-specific TTL instead of single DEFAULT_TTL\n    // 🧪 TEST MODE: Override TTL for deterministic testing\n    const cacheTTL = this.isTestMode ? this.testTTL : (ttl || this.MODULE_TTLS.default);\n    \n    // 1. Store in memory cache (fastest access)\n    this.cache.set(key, {\n      result,\n      expires: Date.now() + cacheTTL\n    });\n    \n    // 2. Persist to Supabase (shared across devices)\n    this.setToSupabaseCache(key, result);\n    \n    // 3. Also persist to AsyncStorage for offline\n    this.persistToStorage(key, result);\n    \n    const ttlDisplay = this.isTestMode \n      ? `${cacheTTL}ms (TEST MODE)` \n      : `${Math.round(cacheTTL / (60 * 60 * 1000))}h`;\n    console.log(`📦 Cache set with ${ttlDisplay} TTL:`, key.substring(0, 30) + '...');\n  }\n\n  /**\n   * 🧠 Smart caching with empty insights policy\n   * - Don't cache results with 0 insights OR use short TTL (5-10 min)\n   * - Use full TTL for meaningful insights\n   */\n  private setCacheWithInsightsPolicy(key: string, result: UnifiedPipelineResult, input: UnifiedPipelineInput): void {\n    const insightsCount = this.countTotalInsights(result);\n    const moduleTTL = this.getModuleTTL(input);\n    \n    // If no insights, use short TTL to prevent negative caching\n    if (insightsCount === 0) {\n      const shortTTL = this.isTestMode ? this.testTTL : 5 * 60 * 1000; // Test mode or 5 minutes\n      const ttlDisplay = this.isTestMode ? `${shortTTL}ms (TEST)` : `${shortTTL / 60000}min`;\n      console.log(`📦 Empty insights detected (${insightsCount}), using short TTL: ${ttlDisplay}`);\n      this.setCache(key, result, shortTTL);\n      \n      // Track empty insights caching for monitoring\n      trackAIInteraction(AIEventType.INSIGHTS_DELIVERED, {\n        userId: input.userId,\n        source: 'empty_cache_policy',\n        insightsCount: 0,\n        cacheKey: key,\n        shortTTL: shortTTL\n      }).catch(console.warn);\n      \n      return;\n    }\n    \n    // Normal caching for meaningful results\n    console.log(`📦 Caching meaningful insights (${insightsCount}), using full TTL: ${Math.round(moduleTTL / (60 * 60 * 1000))}h`);\n    this.setCache(key, result, moduleTTL);\n  }\n\n  /**\n   * 📊 Count total insights across all categories\n   */\n  private countTotalInsights(result: UnifiedPipelineResult): number {\n    if (!result.insights) return 0;\n    \n    const { therapeutic = [], progress = [], behavioral = [], motivational = [] } = result.insights;\n    return therapeutic.length + progress.length + behavioral.length + motivational.length;\n  }\n\n  /**\n   * 🧹 Manual cache invalidation for cleaning up stale 0-insight entries\n   * Called when user adds/removes data to refresh cache state\n   */\n  public async invalidateStaleCache(): Promise<{ invalidated: number; reason: string }> {\n    let invalidatedCount = 0;\n    const reason = 'manual_refresh_cleanup';\n    \n    try {\n      // 1. Clean in-memory cache\n      const memoryKeys = Array.from(this.cache.keys());\n      for (const key of memoryKeys) {\n        const cached = this.cache.get(key);\n        if (cached && this.countTotalInsights(cached.result) === 0) {\n          this.cache.delete(key);\n          invalidatedCount++;\n          console.log(`🧹 Invalidated stale memory cache: ${key.substring(0, 30)}...`);\n        }\n      }\n      \n      // 2. Clean AsyncStorage cache (0-insight entries)\n      const allKeys = await AsyncStorage.getAllKeys();\n      const unifiedKeys = allKeys.filter(key => key.startsWith('unified:'));\n      \n      for (const key of unifiedKeys) {\n        try {\n          const cached = await AsyncStorage.getItem(key);\n          if (cached) {\n            const parsed = JSON.parse(cached);\n            if (parsed.result && this.countTotalInsights(parsed.result) === 0) {\n              await AsyncStorage.removeItem(key);\n              invalidatedCount++;\n              console.log(`🧹 Removed stale AsyncStorage cache: ${key.substring(0, 30)}...`);\n            }\n          }\n        } catch (error) {\n          // Ignore individual key errors, continue cleanup\n          console.warn(`⚠️ Failed to clean cache key ${key}:`, error);\n        }\n      }\n      \n      console.log(`✅ Cache cleanup completed: ${invalidatedCount} stale entries removed`);\n      \n      return { invalidated: invalidatedCount, reason };\n    } catch (error) {\n      console.error('❌ Cache cleanup failed:', error);\n      return { invalidated: invalidatedCount, reason: 'cleanup_failed' };\n    }\n  }\n\n  /**\n   * 📊 Analyze tracking trends for fallback patterns (moved from tracking screen)\n   * Generates local heuristic patterns from compulsion data\n   */\n  private analyzeTrackingTrends(entries: any[]): any[] {\n    if (!Array.isArray(entries) || entries.length < 5) return [];\n\n    const patterns = [];\n    \n    // Time-based patterns\n    const hourCounts = new Array(24).fill(0);\n    entries.forEach(entry => {\n      const timestamp = entry.timestamp || entry.created_at;\n      const hour = new Date(timestamp).getHours();\n      hourCounts[hour]++;\n    });\n    \n    const peakHours = hourCounts\n      .map((count, hour) => ({ hour, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 3);\n\n    if (peakHours[0].count >= 3) {\n      patterns.push({\n        type: 'time_pattern',\n        title: `${peakHours[0].hour}:00 Saatinde Yoğunluk`,\n        description: `En çok kompülsiyon ${peakHours[0].hour}:00 saatinde yaşanıyor (${peakHours[0].count} kez).`,\n        suggestion: 'Bu saatlerde önleyici teknikler uygulayın.',\n        confidence: 0.8,\n        severity: 'medium'\n      });\n    }\n\n    // Resistance trends\n    const recentEntries = entries.slice(-10);\n    const resistanceSum = recentEntries.reduce((sum, e) => sum + (e.resistanceLevel || e.resistance_level || 5), 0);\n    const avgResistance = resistanceSum / recentEntries.length;\n    \n    if (avgResistance >= 7) {\n      patterns.push({\n        type: 'progress_pattern',\n        title: 'Güçlü Direnç Trendi',\n        description: `Son kompülsiyonlarda ortalama ${avgResistance.toFixed(1)} direnç seviyesi.`,\n        suggestion: 'Mükemmel ilerleme! Bu motivasyonu koruyun.',\n        confidence: 0.9,\n        severity: 'positive'\n      });\n    } else if (avgResistance <= 3) {\n      patterns.push({\n        type: 'warning_pattern',\n        title: 'Düşük Direnç Uyarısı',\n        description: `Son kompülsiyonlarda ortalama ${avgResistance.toFixed(1)} direnç seviyesi.`,\n        suggestion: 'Terapi egzersizleri ve mindfulness teknikleri deneyin.',\n        confidence: 0.85,\n        severity: 'warning'\n      });\n    }\n\n    return patterns;\n  }\n\n  /**\n   * 🔄 Generate fallback insights when primary analysis yields no results\n   * Creates basic actionable insights from available patterns data\n   */\n  private generateFallbackInsights(patterns: any, input: UnifiedPipelineInput): any {\n    const fallback = {\n      therapeutic: [],\n      progress: []\n    };\n\n    try {\n      // 🎯 ENHANCED FALLBACK: Integrate tracking screen patterns\n      if (input.content && typeof input.content === 'object' && Array.isArray(input.content.compulsions)) {\n        const compulsions = input.content.compulsions;\n        const trackingPatterns = this.analyzeTrackingTrends(compulsions);\n        \n        trackingPatterns.forEach(pattern => {\n          const insight = {\n            text: pattern.description + ' ' + pattern.suggestion,\n            category: pattern.type,\n            priority: pattern.severity === 'positive' ? 'high' : 'medium',\n            actionable: true,\n            confidence: pattern.confidence,\n            source: 'fallback_tracking'\n          };\n          \n          if (pattern.severity === 'positive') {\n            fallback.progress.push(insight);\n          } else {\n            fallback.therapeutic.push(insight);\n          }\n        });\n      }\n      \n      // 1. TEMPORAL PATTERN FALLBACKS (Original logic preserved)\n      if (patterns.temporal && patterns.temporal.length > 0) {\n        const peakPattern = patterns.temporal[0]; // Most significant temporal pattern\n        if (peakPattern.type === 'peak_hour' || peakPattern.frequency > 2) {\n          fallback.therapeutic.push({\n            text: `${peakPattern.timeOfDay || 'Belirli saatlerde'} daha yoğun aktivite görülüyor. Bu zamanlarda destek stratejilerini hatırlamak faydalı olabilir.`,\n            category: 'temporal_awareness',\n            priority: 'medium',\n            actionable: true,\n            confidence: 0.7,\n            source: 'fallback_temporal'\n          });\n        }\n      }\n\n      // 2. BEHAVIORAL PATTERN FALLBACKS  \n      if (patterns.behavioral && patterns.behavioral.length > 0) {\n        const dominantPattern = patterns.behavioral.sort((a, b) => (b.frequency || 0) - (a.frequency || 0))[0];\n        if (dominantPattern.trigger && dominantPattern.frequency > 1) {\n          fallback.therapeutic.push({\n            text: `En sık görülen tetik \"${dominantPattern.trigger}\" için alternatif başa çıkma stratejileri geliştirmek yararlı olabilir.`,\n            category: 'behavioral_insight',\n            priority: 'medium', \n            actionable: true,\n            confidence: 0.6,\n            source: 'fallback_behavioral'\n          });\n        }\n      }\n\n      // 3. ENVIRONMENTAL/TRIGGER FALLBACKS\n      if (patterns.triggers && patterns.triggers.length > 0) {\n        const commonTrigger = patterns.triggers[0];\n        fallback.therapeutic.push({\n          text: `Çevresel faktörlerin etkisini fark etmek önemli bir adım. Tetikleyici durumları önceden tanımak güçlendirici olabilir.`,\n          category: 'environmental_awareness',\n          priority: 'low',\n          actionable: true,\n          confidence: 0.5,\n          source: 'fallback_environmental'\n        });\n      }\n\n      // 4. GENERAL PROGRESS FALLBACK (always available)\n      if (input.context?.source) {\n        fallback.progress.push({\n          text: `Veri toplama ve takip süreci aktif. Bu tutarlılık, ilerlemeyi değerlendirmek için değerli bir kaynak oluşturuyor.`,\n          category: 'progress_tracking',\n          priority: 'low',\n          actionable: true,\n          confidence: 0.8,\n          source: 'fallback_progress'\n        });\n      }\n\n      // 5. DATA QUALITY INSIGHTS\n      const dataPoints = patterns.metadata?.dataPoints || 0;\n      if (dataPoints >= 5) {\n        fallback.progress.push({\n          text: `${dataPoints} veri noktası toplandı. Bu bilgiler zaman içinde daha detaylı kalıp analizi için yeterli olacak.`,\n          category: 'data_sufficiency',\n          priority: 'low',\n          actionable: false,\n          confidence: 0.9,\n          source: 'fallback_data_quality'\n        });\n      }\n\n      console.log(`🔄 Generated ${fallback.therapeutic.length + fallback.progress.length} fallback insights`);\n\n    } catch (error) {\n      console.warn('Fallback insight generation failed:', error);\n      // Minimal safety fallback\n      fallback.therapeutic.push({\n        text: 'Veriler analiz ediliyor. Daha fazla veri toplandığında detaylı içgörüler sunulacak.',\n        category: 'system_status',\n        priority: 'low',\n        actionable: false,\n        confidence: 0.5,\n        source: 'fallback_minimal'\n      });\n    }\n\n    return fallback;\n  }\n\n  /**\n   * 🎤 Generate insights enhanced by voice analysis results\n   * Creates targeted insights based on detected voice category and confidence\n   */\n  private generateVoiceEnhancedInsights(voiceHints: any, patterns: any): any[] {\n    const insights: any[] = [];\n\n    try {\n      const { voiceCategory, voiceConfidence, voiceSuggestion } = voiceHints;\n\n      switch (voiceCategory) {\n        case 'OCD':\n          insights.push({\n            text: `Ses analizinde OKB ile ilişkili içerik tespit edildi. ${voiceSuggestion || 'Mevcut başa çıkma stratejilerinizi hatırlamak faydalı olabilir.'}`,\n            category: 'voice_ocd_detection', \n            priority: 'high',\n            actionable: true,\n            confidence: voiceConfidence,\n            source: 'voice_enhanced'\n          });\n          \n          // Add pattern-specific OCD insight if behavioral patterns exist\n          if (patterns.behavioral && patterns.behavioral.length > 0) {\n            const dominantPattern = patterns.behavioral[0];\n            insights.push({\n              text: `Davranışsal kalıplar ve ses analizi birlikte değerlendirildiğinde, \"${dominantPattern.trigger || 'belirli durumlar'}\" için ERP teknikleri uygulamak yararlı olabilir.`,\n              category: 'voice_pattern_correlation',\n              priority: 'medium',\n              actionable: true,\n              confidence: Math.min(voiceConfidence, 0.8),\n              source: 'voice_enhanced'\n            });\n          }\n          break;\n\n        case 'CBT':\n          insights.push({\n            text: `Bilişsel distorsyonlar ile ilgili düşünceler tespit edildi. ${voiceSuggestion || 'Düşünce-duygu-davranış üçgenini incelemek faydalı olabilir.'}`,\n            category: 'voice_cbt_detection',\n            priority: 'high', \n            actionable: true,\n            confidence: voiceConfidence,\n            source: 'voice_enhanced'\n          });\n          break;\n\n        case 'MOOD':\n          insights.push({\n            text: `Duygu durum ile ilgili ifadeler algılandı. ${voiceSuggestion || 'Mood tracking verileriniz ile birlikte değerlendirildiğinde daha detaylı analiz yapılabilir.'}`,\n            category: 'voice_mood_detection',\n            priority: 'medium',\n            actionable: true,\n            confidence: voiceConfidence,\n            source: 'voice_enhanced'\n          });\n          break;\n\n        case 'BREATHWORK':\n          insights.push({\n            text: `Nefes çalışması veya rahatlama ile ilgili gereksinim tespit edildi. ${voiceSuggestion || 'Derin nefes teknikleri şu anda yararlı olabilir.'}`,\n            category: 'voice_breathwork_suggestion',\n            priority: 'medium',\n            actionable: true,\n            confidence: voiceConfidence,\n            source: 'voice_enhanced'\n          });\n          break;\n\n        default:\n          // Generic voice-detected insight\n          if (voiceConfidence > 0.5) {\n            insights.push({\n              text: `Ses analizinde önemli içerik tespit edildi. Bu durum için mevcut destek stratejilerinizi kullanmayı değerlendirebilirsiniz.`,\n              category: 'voice_general_detection',\n              priority: 'low',\n              actionable: true,\n              confidence: voiceConfidence,\n              source: 'voice_enhanced'\n            });\n          }\n      }\n\n    } catch (error) {\n      console.warn('Voice-enhanced insight generation failed:', error);\n    }\n\n    return insights;\n  }\n  \n  private async persistToStorage(key: string, result: UnifiedPipelineResult): Promise<void> {\n    try {\n      await AsyncStorage.setItem(\n        key,\n        JSON.stringify({\n          result,\n          expires: Date.now() + this.MODULE_TTLS.default\n        })\n      );\n    } catch (error) {\n      console.warn('Failed to persist to storage:', error);\n    }\n  }\n  \n  /**\n   * 📦 Supabase Cache Layer - Persistent, Cross-Device Cache\n   */\n  private async getFromSupabaseCache(key: string): Promise<UnifiedPipelineResult | null> {\n    try {\n      // ✅ FIXED: Use correct column names from ai_cache table schema\n      const { data, error } = await supabaseService.supabaseClient\n        .from('ai_cache')\n        .select('content, expires_at')  // 'content' not 'cached_result'\n        .eq('cache_key', key)\n        .maybeSingle();\n      \n      if (error) {\n        console.warn('⚠️ Supabase cache read error:', error);\n        return null;\n      }\n      \n      if (!data) {\n        return null; // Cache miss\n      }\n      \n      // Check expiration\n      const now = new Date();\n      const expiresAt = new Date(data.expires_at);\n      if (now > expiresAt) {\n        // Cleanup expired entry\n        await supabaseService.supabaseClient\n          .from('ai_cache')\n          .delete()\n          .eq('cache_key', key);\n        return null;\n      }\n      \n      return data.content as UnifiedPipelineResult;  // Use 'content' column\n    } catch (error) {\n      console.warn('⚠️ Supabase cache read failed:', error);\n      return null;\n    }\n  }\n  \n  private async setToSupabaseCache(key: string, result: UnifiedPipelineResult): Promise<void> {\n    try {\n      // Extract userId from key for proper RLS\n      const userId = key.split(':')[1];\n      const ttlHours = this.MODULE_TTLS.default / (1000 * 60 * 60); // Convert ms to hours\n      \n      // ✅ FIXED: Use correct column names from ai_cache table schema\n      const { error } = await supabaseService.supabaseClient\n        .from('ai_cache')\n        .upsert({\n          cache_key: key,\n          user_id: userId,\n          content: result,  // Use 'content' column\n          computed_at: new Date().toISOString(),\n          ttl_hours: Math.round(ttlHours),  // TTL in hours\n          // expires_at is calculated automatically by trigger\n        }, {\n          onConflict: 'cache_key'\n        });\n      \n      if (error) {\n        console.warn('⚠️ Supabase cache write error:', error);\n      } else {\n        console.log('📦 Cached to Supabase:', key.substring(0, 30) + '...');\n      }\n    } catch (error) {\n      console.warn('⚠️ Supabase cache write failed:', error);\n    }\n  }\n  \n  // ============================================================================\n  // INVALIDATION HOOKS\n  // ============================================================================\n  \n  // ✅ F-03 FIX: Invalidation hooks now accept userId parameter\n  private setupInvalidationHooks(): void {\n    // Hook: New compulsion recorded\n    this.invalidationHooks.set('compulsion_added', async (userId?: string) => {\n      // ✅ FIXED: Invalidate patterns, insights, AND progress as per specification\n      await this.invalidateUserCache('patterns', userId);\n      await this.invalidateUserCache('insights', userId); \n      await this.invalidateUserCache('progress', userId);\n      console.log('🔄 Cache invalidated: patterns + insights + progress (compulsion_added)');\n    });\n    \n    // Hook: CBT thought record created/updated\n    this.invalidationHooks.set('cbt_record_added', async (userId?: string) => {\n      await this.invalidateUserCache('insights', userId);\n    });\n    \n    // Hook: Mood entry added\n    this.invalidationHooks.set('mood_added', async (userId?: string) => {\n      await this.invalidateUserCache('all', userId);\n    });\n    \n    // Hook: Manual refresh requested\n    this.invalidationHooks.set('manual_refresh', () => {\n      this.cache.clear();\n    });\n    \n    // REMOVED: therapy_completed - ERP module deleted\n    // REMOVED: erp_completed - ERP module deleted\n  }\n  \n  // ✅ F-03 & F-08 FIX: triggerInvalidation with React Query integration\n  public async triggerInvalidation(hook: string, userId?: string): Promise<void> {\n    const handler = this.invalidationHooks.get(hook);\n    if (handler) {\n      await handler(userId); // ✅ Pass userId to handler\n    }\n    \n    // ✅ F-08 FIX: Emit React Query cache invalidation\n    try {\n      const { emitAIInvalidation } = await import('@/hooks/useCacheInvalidation');\n      emitAIInvalidation(hook, userId);\n      console.log('🤖 React Query AI invalidation triggered:', hook);\n    } catch (error) {\n      console.warn('⚠️ Failed to emit AI cache invalidation:', error);\n    }\n    \n    // Track invalidation\n    await trackAIInteraction(AIEventType.CACHE_INVALIDATION, {\n      hook,\n      userId,\n      timestamp: Date.now()\n    });\n  }\n  \n  private async invalidateUserCache(type: 'patterns' | 'insights' | 'progress' | 'cbt' | 'voice' | 'all', userId?: string): Promise<void> {\n    const keysToDelete: string[] = [];\n    \n    this.cache.forEach((_, key) => {\n      // For unified pipeline cache keys, we need to match user and invalidate based on type\n      if (userId && !key.includes(userId)) return;\n      \n      // Since unified pipeline cache keys are \"unified:userId:hash\", we need to invalidate differently\n      if (type === 'all') {\n        // Invalidate all unified pipeline keys for this user\n        if (key.startsWith('unified:')) {\n          keysToDelete.push(key);\n        }\n      } else {\n        // For specific types, invalidate all unified keys (since they contain mixed data)\n        // This ensures any cache that might contain the changed data type is cleared\n        if (key.startsWith('unified:')) {\n          keysToDelete.push(key);\n        }\n      }\n    });\n    \n    const deletedCount = keysToDelete.length;\n    keysToDelete.forEach(key => this.cache.delete(key));\n    \n    // 📊 CRITICAL FIX: Track cache invalidation telemetry\n    if (deletedCount > 0) {\n      await trackAIInteraction(AIEventType.CACHE_INVALIDATION, {\n        userId: userId || 'unknown',\n        invalidationType: type,\n        keysDeleted: deletedCount,\n        cacheKeys: keysToDelete.slice(0, 3), // First 3 keys for debugging\n        timestamp: Date.now()\n      });\n      \n      console.log(`🗑️ Cache invalidated: ${type} (${deletedCount} keys deleted)`);\n    }\n    \n    // Also invalidate Supabase cache\n    await this.invalidateSupabaseCache(type, userId);\n  }\n  \n  /**\n   * 🗑️ Supabase Cache Invalidation\n   */\n  // ✅ F-03 FIX: Correct client getter and unified cache key filtering\n  private async invalidateSupabaseCache(type: 'patterns' | 'insights' | 'all', userId?: string): Promise<void> {\n    try {\n      // ✅ Use correct client getter: supabaseService.supabaseClient (not .client)\n      let query = supabaseService.supabaseClient\n        .from('ai_cache')\n        .delete()\n        .like('cache_key', 'unified:%'); // ✅ Use LIKE for unified cache keys\n      \n      if (userId) {\n        query = query.eq('user_id', userId);\n      }\n      \n      const { error } = await query;\n      \n      if (error) {\n        console.warn('⚠️ Supabase cache invalidation error:', error);\n      } else {\n        console.log(`🗑️ Supabase cache invalidated for ${type}${userId ? ` (user: ${userId})` : ''}`);\n      }\n    } catch (error) {\n      console.warn('⚠️ Supabase cache invalidation failed:', error);\n    }\n  }\n  \n  // ============================================================================\n  // CACHE CLEANUP\n  // ============================================================================\n  \n  private startCacheCleanup(): void {\n    // Run cleanup every hour\n    setInterval(() => {\n      const now = Date.now();\n      const keysToDelete: string[] = [];\n      \n      this.cache.forEach((value, key) => {\n        if (value.expires < now) {\n          keysToDelete.push(key);\n        }\n      });\n      \n      keysToDelete.forEach(key => this.cache.delete(key));\n      \n      if (keysToDelete.length > 0) {\n        console.log(`🧹 Cleaned ${keysToDelete.length} expired cache entries`);\n      }\n    }, 60 * 60 * 1000); // 1 hour\n  }\n\n  // ============================================================================\n  // 🔮 PREDICTIVE MOOD INTERVENTION\n  // ============================================================================\n\n  /**\n   * 🔮 Predictive Mood Intervention - AI-powered mood drop prediction and proactive interventions\n   */\n  async predictMoodIntervention(\n    userId: string,\n    recentMoodEntries: any[],\n    currentMoodState?: any\n  ): Promise<{\n    riskLevel: 'low' | 'medium' | 'high' | 'critical';\n    predictedDrop?: {\n      likelihood: number;\n      timeframe: string;\n      severity: number;\n    };\n    interventions: Array<{\n      type: 'immediate' | 'preventive' | 'emergency';\n      priority: number;\n      action: string;\n      reason: string;\n      effectivenessProbability: number;\n    }>;\n    riskFactors: Array<{\n      factor: string;\n      impact: number;\n      confidence: number;\n    }>;\n    earlyWarning?: {\n      triggered: boolean;\n      message: string;\n      urgency: 'low' | 'medium' | 'high';\n    };\n  }> {\n    console.log('🔮 Starting predictive mood intervention analysis...');\n\n    const startTime = Date.now();\n    \n    // Track intervention analysis start\n    await trackAIInteraction(AIEventType.INSIGHTS_REQUESTED, {\n      userId,\n      dataType: 'predictive_mood_intervention',\n      entryCount: recentMoodEntries.length,\n      timestamp: startTime\n    });\n\n    try {\n      // 1. ANALYZE RECENT TRENDS\n      const trendAnalysis = this.analyzeMoodTrends(recentMoodEntries);\n      \n      // 2. IDENTIFY RISK FACTORS\n      const riskFactors = this.identifyMoodRiskFactors(recentMoodEntries, trendAnalysis);\n      \n      // 3. CALCULATE RISK LEVEL\n      const riskLevel = this.calculateMoodRiskLevel(riskFactors, trendAnalysis);\n      \n      // 4. PREDICT MOOD DROP\n      const predictedDrop = this.predictMoodDrop(recentMoodEntries, trendAnalysis, riskFactors);\n      \n      // 5. GENERATE INTERVENTIONS\n      const interventions = this.generateMoodInterventions(riskLevel, riskFactors, predictedDrop);\n      \n      // 6. EARLY WARNING SYSTEM\n      const earlyWarning = this.checkEarlyWarningTriggers(riskLevel, predictedDrop, riskFactors);\n\n      const result = {\n        riskLevel,\n        predictedDrop,\n        interventions,\n        riskFactors,\n        earlyWarning\n      };\n\n      // Track successful intervention analysis\n      await trackAIInteraction(AIEventType.INSIGHTS_DELIVERED, {\n        userId,\n        source: 'predictive_mood_intervention',\n        insightsCount: interventions.length,\n        processingTime: Date.now() - startTime,\n        riskLevel,\n        earlyWarningTriggered: earlyWarning?.triggered || false\n      });\n\n      console.log(`✅ Predictive mood intervention completed: ${riskLevel} risk`);\n      return result;\n\n    } catch (error) {\n      console.error('❌ Predictive mood intervention failed:', error);\n      \n      await trackAIInteraction(AIEventType.SYSTEM_ERROR, {\n        userId,\n        component: 'predictiveMoodIntervention',\n        error: error instanceof Error ? error.message : String(error),\n        processingTime: Date.now() - startTime\n      });\n\n      // Return safe fallback\n      return {\n        riskLevel: 'low',\n        interventions: [{\n          type: 'immediate',\n          priority: 1,\n          action: 'Düzenli mood takibine devam edin',\n          reason: 'Veri analizi sırasında hata oluştu',\n          effectivenessProbability: 0.5\n        }],\n        riskFactors: []\n      };\n    }\n  }\n\n  // ============================================================================\n  // MOOD TREND ANALYSIS HELPERS\n  // ============================================================================\n\n  private analyzeMoodTrends(entries: any[]): {\n    trend: 'declining' | 'stable' | 'improving';\n    slope: number;\n    volatility: number;\n    recentAverage: number;\n    weeklyChange: number;\n  } {\n    if (entries.length < 3) {\n      return {\n        trend: 'stable',\n        slope: 0,\n        volatility: 0,\n        recentAverage: 50,\n        weeklyChange: 0\n      };\n    }\n\n    // Sort by timestamp\n    const sortedEntries = entries.sort((a, b) => \n      new Date(a.timestamp || a.created_at).getTime() - \n      new Date(b.timestamp || b.created_at).getTime()\n    );\n\n    // Calculate trend (linear regression slope)\n    const scores = sortedEntries.map(e => e.mood_score || e.mood || 50);\n    const n = scores.length;\n    const sumX = ((n - 1) * n) / 2; // 0 + 1 + 2 + ... + (n-1)\n    const sumY = scores.reduce((a, b) => a + b, 0);\n    const sumXY = scores.reduce((sum, y, x) => sum + (x * y), 0);\n    const sumXX = ((n - 1) * n * (2 * n - 1)) / 6;\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    \n    // Determine trend\n    let trend: 'declining' | 'stable' | 'improving' = 'stable';\n    if (slope < -2) trend = 'declining';\n    else if (slope > 2) trend = 'improving';\n\n    // Calculate volatility (standard deviation)\n    const mean = sumY / n;\n    const variance = scores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / n;\n    const volatility = Math.sqrt(variance);\n\n    // Recent average (last 3 entries)\n    const recentEntries = sortedEntries.slice(-3);\n    const recentAverage = recentEntries.reduce((sum, e) => sum + (e.mood_score || e.mood || 50), 0) / recentEntries.length;\n\n    // Weekly change (if enough data)\n    const weeklyChange = entries.length >= 7 \n      ? (scores[scores.length - 1] - scores[Math.max(0, scores.length - 7)])\n      : 0;\n\n    return {\n      trend,\n      slope,\n      volatility,\n      recentAverage,\n      weeklyChange\n    };\n  }\n\n  private identifyMoodRiskFactors(entries: any[], trendAnalysis: any): Array<{\n    factor: string;\n    impact: number;\n    confidence: number;\n  }> {\n    const riskFactors: Array<{ factor: string; impact: number; confidence: number }> = [];\n\n    // 1. DECLINING TREND\n    if (trendAnalysis.trend === 'declining' && Math.abs(trendAnalysis.slope) > 3) {\n      riskFactors.push({\n        factor: 'declining_trend',\n        impact: Math.min(10, Math.abs(trendAnalysis.slope) / 2),\n        confidence: 0.8\n      });\n    }\n\n    // 2. HIGH VOLATILITY\n    if (trendAnalysis.volatility > 15) {\n      riskFactors.push({\n        factor: 'high_volatility',\n        impact: trendAnalysis.volatility / 5,\n        confidence: 0.7\n      });\n    }\n\n    // 3. LOW RECENT AVERAGE\n    if (trendAnalysis.recentAverage < 35) {\n      riskFactors.push({\n        factor: 'low_recent_mood',\n        impact: (50 - trendAnalysis.recentAverage) / 3,\n        confidence: 0.9\n      });\n    }\n\n    // 4. RECURRING PATTERNS\n    const recurringLowDays = this.detectRecurringLowMoodDays(entries);\n    if (recurringLowDays.length > 0) {\n      riskFactors.push({\n        factor: 'recurring_low_days',\n        impact: recurringLowDays.length * 2,\n        confidence: 0.6\n      });\n    }\n\n    // 5. TRIGGER FREQUENCY\n    const highImpactTriggers = this.analyzeHighImpactTriggers(entries);\n    if (highImpactTriggers.length > 0) {\n      riskFactors.push({\n        factor: 'frequent_triggers',\n        impact: highImpactTriggers.length * 1.5,\n        confidence: 0.7\n      });\n    }\n\n    return riskFactors;\n  }\n\n  private calculateMoodRiskLevel(riskFactors: any[], trendAnalysis: any): 'low' | 'medium' | 'high' | 'critical' {\n    // Calculate total risk score\n    const totalRisk = riskFactors.reduce((sum, factor) => \n      sum + (factor.impact * factor.confidence), 0\n    );\n\n    // Additional risk from trend analysis\n    let trendRisk = 0;\n    if (trendAnalysis.trend === 'declining') trendRisk += 5;\n    if (trendAnalysis.recentAverage < 30) trendRisk += 10;\n    if (trendAnalysis.volatility > 20) trendRisk += 5;\n\n    const combinedRisk = totalRisk + trendRisk;\n\n    if (combinedRisk >= 25) return 'critical';\n    if (combinedRisk >= 15) return 'high';\n    if (combinedRisk >= 8) return 'medium';\n    return 'low';\n  }\n\n  private predictMoodDrop(entries: any[], trendAnalysis: any, riskFactors: any[]): {\n    likelihood: number;\n    timeframe: string;\n    severity: number;\n  } | undefined {\n    // Only predict if there are sufficient risk indicators\n    if (riskFactors.length === 0 || trendAnalysis.trend !== 'declining') {\n      return undefined;\n    }\n\n    // Calculate likelihood based on risk factors\n    const riskScore = riskFactors.reduce((sum, factor) => sum + factor.impact * factor.confidence, 0);\n    const likelihood = Math.min(0.95, riskScore / 20);\n\n    // Determine timeframe based on trend slope\n    let timeframe = '1-2 hafta';\n    if (Math.abs(trendAnalysis.slope) > 5) timeframe = '3-5 gün';\n    else if (Math.abs(trendAnalysis.slope) > 3) timeframe = '1 hafta';\n\n    // Predict severity of drop\n    const currentLevel = trendAnalysis.recentAverage;\n    const potentialDrop = Math.abs(trendAnalysis.slope) * 3; // 3 day projection\n    const severity = Math.min(10, potentialDrop);\n\n    return {\n      likelihood,\n      timeframe,\n      severity\n    };\n  }\n\n  private generateMoodInterventions(\n    riskLevel: string, \n    riskFactors: any[], \n    predictedDrop?: any\n  ): Array<{\n    type: 'immediate' | 'preventive' | 'emergency';\n    priority: number;\n    action: string;\n    reason: string;\n    effectivenessProbability: number;\n  }> {\n    const interventions: any[] = [];\n\n    // IMMEDIATE INTERVENTIONS\n    if (riskLevel === 'high' || riskLevel === 'critical') {\n      interventions.push({\n        type: 'immediate',\n        priority: 1,\n        action: 'Hemen nefes egzersizi yapın (4-7-8 tekniği)',\n        reason: 'Anksiyete ve stres seviyelerini hızla düşürür',\n        effectivenessProbability: 0.85\n      });\n\n      interventions.push({\n        type: 'immediate',\n        priority: 2,\n        action: 'Güvenilir bir arkadaş veya aile üyesi ile konuşun',\n        reason: 'Sosyal destek mood iyileşmesinde kanıtlanmış etki gösterir',\n        effectivenessProbability: 0.75\n      });\n    }\n\n    // PREVENTIVE INTERVENTIONS\n    if (riskLevel === 'medium' || riskLevel === 'high') {\n      interventions.push({\n        type: 'preventive',\n        priority: 3,\n        action: 'Günlük 10 dakika mindfulness meditasyonu başlatın',\n        reason: 'Düzenli meditasyon mood stabilitesini artırır',\n        effectivenessProbability: 0.70\n      });\n\n      interventions.push({\n        type: 'preventive',\n        priority: 4,\n        action: 'Uyku rutininizi optimize edin (22:00-06:00)',\n        reason: 'Düzenli uyku mood dengesi için kritik faktördür',\n        effectivenessProbability: 0.80\n      });\n    }\n\n    // RISK-SPECIFIC INTERVENTIONS\n    riskFactors.forEach(factor => {\n      switch (factor.factor) {\n        case 'declining_trend':\n          interventions.push({\n            type: 'preventive',\n            priority: 5,\n            action: 'Haftalık mood tracking pattern analizi yapın',\n            reason: 'Trendinizi anlayarak proaktif adımlar atabilirsiniz',\n            effectivenessProbability: 0.65\n          });\n          break;\n          \n        case 'high_volatility':\n          interventions.push({\n            type: 'preventive',\n            priority: 6,\n            action: 'Günlük yaşam rutininizi standardize edin',\n            reason: 'Düzenli rutinler mood dalgalanmalarını azaltır',\n            effectivenessProbability: 0.60\n          });\n          break;\n\n        case 'frequent_triggers':\n          interventions.push({\n            type: 'preventive',\n            priority: 7,\n            action: 'Tetikleyici durumlar için başa çıkma stratejileri geliştirin',\n            reason: 'Proaktif strateji mood düşüşlerini önler',\n            effectivenessProbability: 0.70\n          });\n          break;\n      }\n    });\n\n    // EMERGENCY INTERVENTIONS\n    if (riskLevel === 'critical') {\n      interventions.push({\n        type: 'emergency',\n        priority: 0,\n        action: 'Acil destek hatlarından yardım alın veya profesyonel destek arayın',\n        reason: 'Kritik mood seviyelerinde profesyonel müdahale gereklidir',\n        effectivenessProbability: 0.95\n      });\n    }\n\n    return interventions.sort((a, b) => a.priority - b.priority);\n  }\n\n  private checkEarlyWarningTriggers(\n    riskLevel: string, \n    predictedDrop: any, \n    riskFactors: any[]\n  ): {\n    triggered: boolean;\n    message: string;\n    urgency: 'low' | 'medium' | 'high';\n  } | undefined {\n    \n    if (riskLevel === 'critical') {\n      return {\n        triggered: true,\n        message: 'Kritik mood seviyesi tespit edildi. Lütfen hemen destek alın.',\n        urgency: 'high'\n      };\n    }\n\n    if (riskLevel === 'high' && predictedDrop?.likelihood > 0.7) {\n      return {\n        triggered: true,\n        message: `Yüksek mood düşüş riski: ${predictedDrop.timeframe} içinde dikkatli olun.`,\n        urgency: 'medium'\n      };\n    }\n\n    if (riskLevel === 'medium' && riskFactors.length >= 3) {\n      return {\n        triggered: true,\n        message: 'Birden fazla risk faktörü tespit edildi. Proaktif önlemler alın.',\n        urgency: 'low'\n      };\n    }\n\n    return undefined;\n  }\n\n  // Helper methods for risk factor detection\n  private detectRecurringLowMoodDays(entries: any[]): string[] {\n    const dayMoods: Record<number, number[]> = {};\n    \n    entries.forEach(entry => {\n      const dayOfWeek = new Date(entry.timestamp || entry.created_at).getDay();\n      const mood = entry.mood_score || entry.mood || 50;\n      \n      if (!dayMoods[dayOfWeek]) dayMoods[dayOfWeek] = [];\n      dayMoods[dayOfWeek].push(mood);\n    });\n\n    const lowMoodDays: string[] = [];\n    const dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];\n\n    Object.entries(dayMoods).forEach(([day, moods]) => {\n      const avgMood = moods.reduce((a, b) => a + b, 0) / moods.length;\n      if (avgMood < 40 && moods.length >= 2) {\n        lowMoodDays.push(dayNames[parseInt(day)]);\n      }\n    });\n\n    return lowMoodDays;\n  }\n\n  private analyzeHighImpactTriggers(entries: any[]): string[] {\n    const triggerImpact: Record<string, { totalImpact: number; count: number }> = {};\n    \n    entries.forEach(entry => {\n      if (entry.triggers && Array.isArray(entry.triggers)) {\n        entry.triggers.forEach((trigger: string) => {\n          const moodImpact = 50 - (entry.mood_score || entry.mood || 50);\n          \n          if (!triggerImpact[trigger]) {\n            triggerImpact[trigger] = { totalImpact: 0, count: 0 };\n          }\n          \n          triggerImpact[trigger].totalImpact += moodImpact;\n          triggerImpact[trigger].count += 1;\n        });\n      }\n    });\n\n    return Object.entries(triggerImpact)\n      .filter(([_, data]) => {\n        const avgImpact = data.totalImpact / data.count;\n        return avgImpact > 10 && data.count >= 2;\n      })\n      .map(([trigger, _]) => trigger);\n  }\n\n  // ============================================================================\n  // 🔧 MISSING PATTERN EXTRACTION METHODS\n  // ============================================================================\n\n\n\n  /**\n   * 📊 Extract enhanced mood temporal patterns with dashboard metrics\n   * Generates comprehensive mood analytics for direct dashboard consumption\n   */\n  private extractMoodTemporalPatterns(moods: any[]): any[] {\n    try {\n      const patterns: any[] = [];\n      if (!moods || moods.length === 0) return patterns;\n\n      // 🚀 PERFORMANCE OPTIMIZATION: Sample recent mood entries only  \n      const SAMPLE_SIZE = 30; // Process max 30 recent moods instead of all 78+\n      const recentMoods = moods\n        .filter(m => m.timestamp && m.mood_score !== undefined && m.energy_level !== undefined && m.anxiety_level !== undefined) // Filter valid MEA entries\n        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n        .slice(0, SAMPLE_SIZE);\n\n      if (recentMoods.length === 0) return patterns;\n\n      // 📈 WEEKLY MOOD DELTA ANALYSIS\n      const weeklyMoodDelta = this.calculateWeeklyMoodDelta(recentMoods);\n      if (weeklyMoodDelta) {\n        patterns.push({\n          type: 'mood_weekly_delta',\n          title: 'Haftalık Mood Değişimi',\n          description: `Son hafta mood ortalaması: ${weeklyMoodDelta.thisWeek.toFixed(1)}, önceki hafta: ${weeklyMoodDelta.lastWeek.toFixed(1)}`,\n          pattern: `Haftalık delta: ${weeklyMoodDelta.delta > 0 ? '+' : ''}${weeklyMoodDelta.delta.toFixed(1)}`,\n          confidence: weeklyMoodDelta.confidence,\n          severity: weeklyMoodDelta.delta < -10 ? 'high' : weeklyMoodDelta.delta < -5 ? 'medium' : 'low',\n          actionable: Math.abs(weeklyMoodDelta.delta) > 5,\n          suggestion: weeklyMoodDelta.delta < -10 ? 'Mood düşüş trendi - destek almayı değerlendir' :\n                     weeklyMoodDelta.delta < -5 ? 'Hafif mood düşüşü - self-care rutinlerine odaklan' :\n                     weeklyMoodDelta.delta > 10 ? 'Güzel mood artışı - bu pozitif durumu sürdür' : \n                     'Mood seviyesi stabil görünüyor',\n          // 🎯 DASHBOARD READY METRICS\n          dashboardMetrics: {\n            weeklyDelta: weeklyMoodDelta.delta,\n            currentWeekAvg: weeklyMoodDelta.thisWeek,\n            previousWeekAvg: weeklyMoodDelta.lastWeek,\n            trend: weeklyMoodDelta.delta > 5 ? 'improving' : weeklyMoodDelta.delta < -5 ? 'declining' : 'stable',\n            dataPoints: weeklyMoodDelta.dataPoints\n          },\n          source: 'unified_pipeline'\n        });\n      }\n\n      // 🔗 MEA CORRELATION ANALYSIS (Enhanced)\n      const meaCorrelation = this.calculateMEACorrelations(recentMoods);\n      if (meaCorrelation) {\n        patterns.push({\n          type: 'mood_mea_correlation',\n          title: 'Mood-Enerji-Anksiyete İlişkisi',\n          description: `MEA korelasyon analizi: ${meaCorrelation.profile}`,\n          pattern: `Mood-Enerji: ${meaCorrelation.moodEnergy.toFixed(2)}, Mood-Anksiyete: ${meaCorrelation.moodAnxiety.toFixed(2)}`,\n          confidence: meaCorrelation.confidence,\n          severity: meaCorrelation.severity,\n          actionable: meaCorrelation.actionable,\n          suggestion: meaCorrelation.suggestion,\n          // 🎯 DASHBOARD READY METRICS\n          dashboardMetrics: {\n            moodEnergyCorrelation: meaCorrelation.moodEnergy,\n            moodAnxietyCorrelation: meaCorrelation.moodAnxiety,\n            energyAnxietyCorrelation: meaCorrelation.energyAnxiety,\n            emotionalProfile: meaCorrelation.profileType,\n            averageMood: meaCorrelation.averages.mood,\n            averageEnergy: meaCorrelation.averages.energy,\n            averageAnxiety: meaCorrelation.averages.anxiety,\n            dataPoints: recentMoods.length\n          },\n          source: 'unified_pipeline'\n        });\n      }\n\n      // 📅 DAILY PATTERNS (Existing logic enhanced)\n      const weeklyData: Record<number, { mood: number, energy: number, anxiety: number, count: number }> = {};\n      recentMoods.forEach(m => {\n        const dayOfWeek = new Date(m.timestamp).getDay();\n        if (!weeklyData[dayOfWeek]) {\n          weeklyData[dayOfWeek] = { mood: 0, energy: 0, anxiety: 0, count: 0 };\n        }\n        weeklyData[dayOfWeek].mood += m.mood_score;\n        weeklyData[dayOfWeek].energy += m.energy_level;\n        weeklyData[dayOfWeek].anxiety += m.anxiety_level;\n        weeklyData[dayOfWeek].count += 1;\n      });\n\n      // Find significant daily patterns with enhanced metrics\n      const dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];\n      const maxDailyPatterns = 3; // Limit daily patterns\n      \n      Object.entries(weeklyData)\n        .sort(([,a], [,b]) => (b.mood / b.count) - (a.mood / a.count)) // Sort by avg mood\n        .forEach(([day, data]) => {\n          if (patterns.filter(p => p.type === 'mood_daily_pattern').length >= maxDailyPatterns) return; // Early exit\n          const avgMood = data.mood / data.count;\n          const avgEnergy = data.energy / data.count;\n          const avgAnxiety = data.anxiety / data.count;\n          \n          if (data.count >= 2 && (avgMood > 70 || avgMood < 40)) { // Only significant patterns\n            patterns.push({\n              type: 'mood_daily_pattern',\n              title: `${dayNames[parseInt(day)]} Günü Pattern'i`,\n              description: `${dayNames[parseInt(day)]} günü mood ortalaması: ${avgMood.toFixed(1)}`,\n              pattern: `${dayNames[parseInt(day)]}: M${avgMood.toFixed(1)}/E${avgEnergy.toFixed(1)}/A${avgAnxiety.toFixed(1)}`,\n              confidence: Math.min(0.8, data.count / recentMoods.length * 7),\n              severity: avgMood < 40 ? 'medium' : 'low',\n              actionable: avgMood < 40,\n              suggestion: avgMood < 40 ? `${dayNames[parseInt(day)]} günü mood desteği planlayabilirsin` : \n                         `${dayNames[parseInt(day)]} günü pozitif pattern'ini sürdür`,\n              // 🎯 DASHBOARD READY METRICS\n              dashboardMetrics: {\n                dayOfWeek: parseInt(day),\n                dayName: dayNames[parseInt(day)],\n                averageMood: parseFloat(avgMood.toFixed(1)),\n                averageEnergy: parseFloat(avgEnergy.toFixed(1)),\n                averageAnxiety: parseFloat(avgAnxiety.toFixed(1)),\n                sampleSize: data.count,\n                significance: avgMood > 70 ? 'positive' : avgMood < 40 ? 'negative' : 'neutral'\n              },\n              source: 'unified_pipeline'\n            });\n          }\n        });\n\n      console.log(`📊 Extracted ${patterns.length} enhanced mood patterns with dashboard metrics`);\n      return patterns;\n    } catch (error) {\n      console.warn('⚠️ Error extracting enhanced mood temporal patterns:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 📈 Calculate Weekly Mood Delta for dashboard metrics\n   */\n  private calculateWeeklyMoodDelta(moods: any[]): {\n    delta: number;\n    thisWeek: number;\n    lastWeek: number;\n    confidence: number;\n    dataPoints: { thisWeek: number; lastWeek: number };\n  } | null {\n    try {\n      if (moods.length < 5) return null;\n\n      const now = new Date();\n      const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n\n      const thisWeekMoods = moods.filter(m => {\n        const date = new Date(m.timestamp);\n        return date >= oneWeekAgo && date <= now;\n      });\n\n      const lastWeekMoods = moods.filter(m => {\n        const date = new Date(m.timestamp);\n        return date >= twoWeeksAgo && date < oneWeekAgo;\n      });\n\n      if (thisWeekMoods.length === 0 || lastWeekMoods.length === 0) return null;\n\n      const thisWeekAvg = thisWeekMoods.reduce((sum, m) => sum + m.mood_score, 0) / thisWeekMoods.length;\n      const lastWeekAvg = lastWeekMoods.reduce((sum, m) => sum + m.mood_score, 0) / lastWeekMoods.length;\n      const delta = thisWeekAvg - lastWeekAvg;\n\n      // Confidence based on data points\n      const minDataPoints = Math.min(thisWeekMoods.length, lastWeekMoods.length);\n      const confidence = Math.min(0.9, minDataPoints / 7 * 0.8); // Max confidence with 7+ data points per week\n\n      return {\n        delta,\n        thisWeek: thisWeekAvg,\n        lastWeek: lastWeekAvg,\n        confidence,\n        dataPoints: {\n          thisWeek: thisWeekMoods.length,\n          lastWeek: lastWeekMoods.length\n        }\n      };\n    } catch (error) {\n      console.warn('⚠️ Error calculating weekly mood delta:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 🔗 Calculate enhanced MEA (Mood-Energy-Anxiety) correlations for dashboard\n   */\n  private calculateMEACorrelations(moods: any[]): {\n    moodEnergy: number;\n    moodAnxiety: number;\n    energyAnxiety: number;\n    profile: string;\n    profileType: string;\n    confidence: number;\n    severity: 'low' | 'medium' | 'high';\n    actionable: boolean;\n    suggestion: string;\n    averages: { mood: number; energy: number; anxiety: number };\n  } | null {\n    try {\n      if (moods.length < 5) return null;\n\n      const moodScores = moods.map(m => m.mood_score);\n      const energyLevels = moods.map(m => m.energy_level);\n      const anxietyLevels = moods.map(m => m.anxiety_level);\n\n      // Calculate Pearson correlation coefficients\n      const moodEnergyCorr = this.calculatePearsonCorrelation(moodScores, energyLevels);\n      const moodAnxietyCorr = this.calculatePearsonCorrelation(moodScores, anxietyLevels);\n      const energyAnxietyCorr = this.calculatePearsonCorrelation(energyLevels, anxietyLevels);\n\n      // Calculate averages\n      const averages = {\n        mood: moodScores.reduce((a, b) => a + b, 0) / moodScores.length,\n        energy: energyLevels.reduce((a, b) => a + b, 0) / energyLevels.length,\n        anxiety: anxietyLevels.reduce((a, b) => a + b, 0) / anxietyLevels.length\n      };\n\n      // Enhanced profile determination\n      let profileType = 'balanced';\n      let profile = 'Dengeli Duygusal Profil';\n      let severity: 'low' | 'medium' | 'high' = 'low';\n      let suggestion = 'Duygusal dengen iyi görünüyor';\n      let actionable = false;\n\n      // Strong positive mood-energy + negative mood-anxiety = optimal\n      if (moodEnergyCorr > 0.5 && moodAnxietyCorr < -0.3) {\n        profileType = 'optimal';\n        profile = 'Optimal Duygusal Denge';\n        suggestion = 'Mükemmel! Mood yüksek→enerji artıyor, anksiyete azalıyor';\n      }\n      // Strong negative mood-energy + positive mood-anxiety = depression risk  \n      else if (moodEnergyCorr < -0.3 && moodAnxietyCorr > 0.3) {\n        profileType = 'depression_risk';\n        profile = 'Depresif Eğilim Riski';\n        severity = 'high';\n        actionable = true;\n        suggestion = 'Mood düştüğünde enerji de düşüyor, anksiyete artıyor - profesyonel destek değerlendir';\n      }\n      // High energy-anxiety correlation = manic tendency\n      else if (energyAnxietyCorr > 0.6) {\n        profileType = 'hyperarousal';\n        profile = 'Yüksek Uyarılma Durumu';\n        severity = 'medium';\n        actionable = true;\n        suggestion = 'Enerji ve anksiyete birlikte yükseliyor - sakinleştirici teknikler faydalı olabilir';\n      }\n      // Low mood with high anxiety correlation\n      else if (averages.mood < 40 && Math.abs(moodAnxietyCorr) > 0.4) {\n        profileType = 'anxious_low_mood';\n        profile = 'Kaygılı Düşük Mood';\n        severity = 'medium';\n        actionable = true;\n        suggestion = 'Düşük mood ve anksiyete ilişkisi tespit edildi - mood destekleyici aktiviteler dene';\n      }\n      // Very low correlations = disconnected emotional states\n      else if (Math.abs(moodEnergyCorr) < 0.2 && Math.abs(moodAnxietyCorr) < 0.2) {\n        profileType = 'disconnected';\n        profile = 'Bağımsız Duygusal Durumlar';\n        suggestion = 'Mood, enerji ve anksiyete bağımsız değişiyor - bu da normal olabilir';\n      }\n\n      const confidence = Math.min(0.9, moods.length / 20); // Higher confidence with more data\n\n      return {\n        moodEnergy: parseFloat(moodEnergyCorr.toFixed(3)),\n        moodAnxiety: parseFloat(moodAnxietyCorr.toFixed(3)),\n        energyAnxiety: parseFloat(energyAnxietyCorr.toFixed(3)),\n        profile,\n        profileType,\n        confidence,\n        severity,\n        actionable,\n        suggestion,\n        averages: {\n          mood: parseFloat(averages.mood.toFixed(1)),\n          energy: parseFloat(averages.energy.toFixed(1)),\n          anxiety: parseFloat(averages.anxiety.toFixed(1))\n        }\n      };\n    } catch (error) {\n      console.warn('⚠️ Error calculating MEA correlations:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 📊 Calculate Pearson correlation coefficient\n   */\n  private calculatePearsonCorrelation(x: number[], y: number[]): number {\n    if (x.length !== y.length || x.length === 0) return 0;\n\n    const n = x.length;\n    const meanX = x.reduce((a, b) => a + b, 0) / n;\n    const meanY = y.reduce((a, b) => a + b, 0) / n;\n\n    let numerator = 0;\n    let sumXSquared = 0;\n    let sumYSquared = 0;\n\n    for (let i = 0; i < n; i++) {\n      const xDiff = x[i] - meanX;\n      const yDiff = y[i] - meanY;\n      numerator += xDiff * yDiff;\n      sumXSquared += xDiff * xDiff;\n      sumYSquared += yDiff * yDiff;\n    }\n\n    const denominator = Math.sqrt(sumXSquared * sumYSquared);\n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  /**\n   * 📊 Calculate p-value for Pearson correlation coefficient\n   * Uses t-test approximation: t = r * sqrt(n-2) / sqrt(1-r²)\n   */\n  private calculateCorrelationPValue(r: number, n: number): number | null {\n    if (n < 3 || Math.abs(r) >= 1) return null;\n    \n    try {\n      const df = n - 2; // degrees of freedom\n      const t = r * Math.sqrt(df) / Math.sqrt(1 - r * r);\n      \n      // Approximation of two-tailed t-test p-value using t-distribution\n      const p = this.approximateTTestPValue(Math.abs(t), df);\n      \n      return Math.min(1, Math.max(0, p)); // Clamp between 0 and 1\n    } catch (error) {\n      console.warn('⚠️ P-value calculation failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 🧮 Approximate two-tailed t-test p-value\n   * Uses simplified approximation for t-distribution\n   */\n  private approximateTTestPValue(t: number, df: number): number {\n    // For large df (>30), normal approximation is reasonable\n    if (df > 30) {\n      return 2 * (1 - this.normalCDF(t));\n    }\n    \n    // For small df, use lookup table approximation\n    const criticalValues = [\n      { df: 2, values: [4.303, 6.965, 9.925, 14.089] },   // p: [0.1, 0.05, 0.02, 0.01]\n      { df: 3, values: [3.182, 4.541, 5.841, 7.453] },\n      { df: 4, values: [2.776, 3.747, 4.604, 5.598] },\n      { df: 5, values: [2.571, 3.365, 4.032, 4.773] },\n      { df: 10, values: [2.228, 2.764, 3.169, 3.581] },\n      { df: 20, values: [2.086, 2.528, 2.845, 3.153] },\n      { df: 30, values: [2.042, 2.457, 2.750, 3.030] }\n    ];\n\n    // Find closest df\n    const closest = criticalValues.reduce((prev, curr) => \n      Math.abs(curr.df - df) < Math.abs(prev.df - df) ? curr : prev\n    );\n\n    const pLevels = [0.1, 0.05, 0.02, 0.01];\n    \n    // Linear interpolation between p-values\n    for (let i = 0; i < closest.values.length; i++) {\n      if (t <= closest.values[i]) {\n        if (i === 0) {\n          // Above highest p-value, interpolate between 1.0 and 0.1\n          const ratio = t / closest.values[0];\n          return Math.max(0.1, 1.0 - ratio * 0.9);\n        } else {\n          // Interpolate between two p-values\n          const prevT = i === 0 ? 0 : closest.values[i - 1];\n          const currT = closest.values[i];\n          const prevP = i === 0 ? 1.0 : pLevels[i - 1];\n          const currP = pLevels[i];\n          \n          const ratio = (t - prevT) / (currT - prevT);\n          return prevP - ratio * (prevP - currP);\n        }\n      }\n    }\n    \n    // Below lowest critical value, very significant\n    return 0.001;\n  }\n\n  /**\n   * 🔢 Normal CDF approximation (cumulative distribution function)\n   */\n  private normalCDF(x: number): number {\n    // Abramowitz and Stegun approximation\n    const t = 1 / (1 + 0.2316419 * Math.abs(x));\n    const d = 0.3989423 * Math.exp(-x * x / 2);\n    const prob = d * t * (0.3193815 + t * (-0.3565638 + t * (1.7814779 + t * (-1.8212560 + t * 1.3302744))));\n    \n    return x >= 0 ? 1 - prob : prob;\n  }\n\n  /**\n   * 📊 COMPREHENSIVE MOOD ANALYTICS PROCESSOR\n   * Implements clinical-grade mood analytics with volatility, profiles, and correlations\n   */\n  private processMoodAnalytics(moods: any[]): any | null {\n    try {\n      console.log(`📊 Starting comprehensive mood analytics for ${moods.length} entries`);\n      \n      if (!moods || moods.length < 3) {\n        console.log('⚠️ Insufficient data for mood analytics');\n        return null;\n      }\n\n      // 🚀 PERFORMANCE: Process only recent 50 entries\n      const recentMoods = moods\n        .filter(m => m.timestamp && m.mood_score !== undefined && m.energy_level !== undefined && m.anxiety_level !== undefined)\n        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n        .slice(0, 50);\n\n      if (recentMoods.length < 3) {\n        return {\n          weeklyDelta: 0,\n          volatility: 0,\n          baselines: { mood: 50, energy: 50, anxiety: 50 },\n          correlations: {},\n          sampleSize: recentMoods.length,\n          dataQuality: 0.1,\n          confidence: 0.1\n        };\n      }\n\n      const sampleSize = recentMoods.length;\n      \n      // 1. 📈 WEEKLY DELTA CALCULATION\n      const weeklyDelta = this.calculateAnalyticsWeeklyDelta(recentMoods);\n      \n      // 2. 🔥 VOLATILITY CALCULATION (Winsorized standard deviation)\n      const volatility = this.calculateVolatility(recentMoods);\n      \n      // 3. 📊 BASELINES (14-day averages)\n      const baselines = this.calculateBaselines(recentMoods);\n      \n      // 4. 🔗 MEA CORRELATIONS\n      const correlations = this.calculateAnalyticsMEACorrelations(recentMoods);\n      \n      // 5. 📊 DATA QUALITY ASSESSMENT\n      const dataQuality = this.assessDataQuality(recentMoods);\n      \n      // 6. 🧠 7 EMOTIONAL PROFILE CLASSIFICATION\n      const profile = this.classifyEmotionalProfile(baselines, weeklyDelta, volatility, sampleSize);\n      \n      // 7. ⏰ BEST TIMES ANALYSIS\n      const bestTimes = this.analyzeBestTimes(recentMoods);\n      \n      // 8. 🎯 GLOBAL CONFIDENCE CALCULATION\n      const confidence = this.calculateGlobalConfidence(sampleSize, dataQuality, profile.confidence, correlations);\n\n      const analytics = {\n        weeklyDelta: parseFloat(weeklyDelta.toFixed(2)),\n        volatility: parseFloat(volatility.toFixed(2)),\n        baselines,\n        correlations,\n        profile,\n        bestTimes,\n        sampleSize,\n        dataQuality: parseFloat(dataQuality.toFixed(3)),\n        confidence: parseFloat(confidence.toFixed(3))\n      };\n\n      console.log('🎯 Mood analytics completed:', analytics);\n      return analytics;\n      \n    } catch (error) {\n      console.error('❌ Mood analytics processing failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Extract environmental triggers\n   */\n  private extractEnvironmentalTriggers(content: any): any[] {\n    try {\n      const triggers: any[] = [];\n      \n      // Environmental keywords\n      const environmentalKeywords = [\n        'ev', 'oda', 'mutfak', 'banyo', 'iş', 'okul', 'dışarı', 'araba', 'hastane', 'mağaza'\n      ];\n\n      // Check compulsions for environmental contexts\n      if (content.compulsions && Array.isArray(content.compulsions)) {\n        content.compulsions.forEach((c: any) => {\n          const text = (c.notes || c.trigger || '').toLowerCase();\n          environmentalKeywords.forEach(keyword => {\n            if (text.includes(keyword)) {\n              triggers.push({\n                type: 'environmental',\n                trigger: keyword,\n                context: c.category || 'unknown',\n                confidence: 0.7\n              });\n            }\n          });\n        });\n      }\n\n      // Check moods for environmental mentions\n      if (content.moods && Array.isArray(content.moods)) {\n        content.moods.forEach((m: any) => {\n          const triggers_array = m.triggers || [];\n          if (Array.isArray(triggers_array)) {\n            triggers_array.forEach((trigger: string) => {\n              const lowerTrigger = trigger.toLowerCase();\n              environmentalKeywords.forEach(keyword => {\n                if (lowerTrigger.includes(keyword)) {\n                  triggers.push({\n                    type: 'environmental',\n                    trigger: keyword,\n                    context: 'mood',\n                    confidence: 0.8\n                  });\n                }\n              });\n            });\n          }\n        });\n      }\n\n      return triggers;\n    } catch (error) {\n      console.warn('⚠️ Error extracting environmental triggers:', error);\n      return [];\n    }\n  }\n\n\n\n  /**\n   * Analyze triggers\n   */\n  private analyzeTriggers(content: any): any[] {\n    try {\n      const triggers: any[] = [];\n      \n      // Combine environmental and other triggers\n      const envTriggers = this.extractEnvironmentalTriggers(content);\n      triggers.push(...envTriggers);\n\n      return triggers;\n    } catch (error) {\n      console.warn('⚠️ Error analyzing triggers:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Analyze severity progression\n   */\n  private analyzeSeverityProgression(content: any): any[] {\n    try {\n      const progression: any[] = [];\n      \n      if (content.compulsions && Array.isArray(content.compulsions)) {\n        // Calculate average severity/resistance over time\n        const sortedCompulsions = content.compulsions\n          .filter((c: any) => c.timestamp && this.hasValidSeverity(c))\n          .sort((a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n\n        if (sortedCompulsions.length >= 3) {\n          const first = sortedCompulsions.slice(0, Math.floor(sortedCompulsions.length / 3));\n          const last = sortedCompulsions.slice(-Math.floor(sortedCompulsions.length / 3));\n\n          const firstAvg = first.reduce((sum: number, c: any) => sum + this.getCompulsionSeverity(c), 0) / first.length;\n          const lastAvg = last.reduce((sum: number, c: any) => sum + this.getCompulsionSeverity(c), 0) / last.length;\n\n          if (Math.abs(lastAvg - firstAvg) > 0.5) {\n            progression.push({\n              type: 'severity_progression',\n              trend: lastAvg > firstAvg ? 'improving' : 'declining',\n              change: lastAvg - firstAvg,\n              description: `Direnç seviyesi ${lastAvg > firstAvg ? 'artıyor' : 'azalıyor'}`,\n              confidence: 0.8\n            });\n          }\n        }\n      }\n\n      return progression;\n    } catch (error) {\n      console.warn('⚠️ Error analyzing severity progression:', error);\n      return [];\n    }\n  }\n\n  // ============================================================================\n  // CBT PROGRESS ANALYTICS\n  // ============================================================================\n  \n  /**\n   * ✅ NEW: Process CBT Progress Analytics\n   * Analyzes thought records to generate comprehensive progress insights\n   */\n  private async processCBTProgressAnalytics(input: UnifiedPipelineInput): Promise<any> {\n    try {\n      const content = input.content as any;\n      const thoughtRecords = content.thoughtRecords || [];\n      const timeframe = content.timeframe || 'month';\n      \n      console.log(`🧠 Processing CBT progress analytics for ${thoughtRecords.length} records`);\n      \n      if (thoughtRecords.length < 2) {\n        return {\n          distortionTrends: [],\n          techniqueEffectiveness: [],\n          progressAnalysis: 'Henüz yeterli veri yok. En az 2-3 düşünce kaydı gerekli.',\n          recommendations: ['Düzenli düşünce kaydı tutmaya devam et'],\n          riskLevel: 'low',\n          nextFocus: 'Daha fazla düşünce kaydı tut',\n          metadata: {\n            analysisTime: Date.now(),\n            recordCount: thoughtRecords.length,\n            confidence: 0.3\n          }\n        };\n      }\n      \n      // 1. DISTORTION TRENDS ANALYSIS\n      const distortionTrends = this.analyzeCBTDistortionTrends(thoughtRecords);\n      \n      // 2. TECHNIQUE EFFECTIVENESS\n      const techniqueEffectiveness = this.analyzeCBTTechniqueEffectiveness(thoughtRecords);\n      \n      // 3. PROGRESS ANALYSIS\n      const progressAnalysis = this.generateCBTProgressAnalysis(thoughtRecords, timeframe);\n      \n      // 4. RECOMMENDATIONS\n      const recommendations = this.generateCBTRecommendations(thoughtRecords, distortionTrends);\n      \n      // 5. RISK LEVEL ASSESSMENT\n      const riskLevel = this.assessCBTRiskLevel(thoughtRecords);\n      \n      // 6. NEXT FOCUS AREA\n      const nextFocus = this.determineCBTNextFocus(thoughtRecords, distortionTrends);\n      \n      return {\n        distortionTrends,\n        techniqueEffectiveness,\n        progressAnalysis,\n        recommendations,\n        riskLevel,\n        nextFocus,\n        metadata: {\n          analysisTime: Date.now(),\n          recordCount: thoughtRecords.length,\n          confidence: this.calculateCBTProgressConfidence(thoughtRecords)\n        }\n      };\n      \n    } catch (error) {\n      console.error('❌ CBT Progress Analytics failed:', error);\n      return {\n        distortionTrends: [],\n        techniqueEffectiveness: [],\n        progressAnalysis: 'Analiz sırasında bir hata oluştu. Lütfen daha sonra tekrar deneyin.',\n        recommendations: ['Tekrar deneyebilirsin'],\n        riskLevel: 'low',\n        nextFocus: 'Sistem hatası nedeniyle belirlenemedi',\n        metadata: {\n          analysisTime: Date.now(),\n          recordCount: 0,\n          confidence: 0,\n          error: error.message\n        }\n      };\n    }\n  }\n  \n  // CBT Analytics Helper Methods\n  \n  private analyzeCBTDistortionTrends(records: any[]): Array<{distortion: string; trend: 'improving' | 'declining' | 'stable'; change: number}> {\n    const distortionCounts = new Map<string, number[]>();\n    \n    // Group by distortion type and time\n    records.forEach((record, index) => {\n      if (record.distortions && Array.isArray(record.distortions)) {\n        record.distortions.forEach((distortion: string) => {\n          if (!distortionCounts.has(distortion)) {\n            distortionCounts.set(distortion, []);\n          }\n          distortionCounts.get(distortion)!.push(index);\n        });\n      }\n    });\n    \n    const trends: Array<{distortion: string; trend: 'improving' | 'declining' | 'stable'; change: number}> = [];\n    \n    distortionCounts.forEach((occurrences, distortion) => {\n      if (occurrences.length >= 2) {\n        // Calculate frequency trend (early vs late records)\n        const totalRecords = records.length;\n        const midPoint = totalRecords / 2;\n        \n        const earlyOccurrences = occurrences.filter(idx => idx < midPoint).length;\n        const lateOccurrences = occurrences.filter(idx => idx >= midPoint).length;\n        \n        const earlyRate = earlyOccurrences / Math.ceil(midPoint);\n        const lateRate = lateOccurrences / Math.floor(totalRecords - midPoint);\n        \n        const change = lateRate - earlyRate;\n        \n        let trend: 'improving' | 'declining' | 'stable' = 'stable';\n        if (change < -0.1) trend = 'improving'; // Less frequent = improving\n        else if (change > 0.1) trend = 'declining'; // More frequent = declining\n        \n        trends.push({\n          distortion,\n          trend,\n          change: Math.round(change * 100) / 100\n        });\n      }\n    });\n    \n    // Sort by most significant changes\n    return trends.sort((a, b) => Math.abs(b.change) - Math.abs(a.change)).slice(0, 5);\n  }\n  \n  private analyzeCBTTechniqueEffectiveness(records: any[]): Array<{technique: string; effectiveness: number; confidence: number}> {\n    const techniques: Array<{technique: string; effectiveness: number; confidence: number}> = [];\n    \n    // Calculate mood improvement as technique effectiveness\n    const avgMoodImprovement = records.length > 0 \n      ? records.reduce((sum, r) => sum + ((r.moodAfter || 5) - (r.moodBefore || 5)), 0) / records.length \n      : 0;\n    \n    if (avgMoodImprovement > 0) {\n      techniques.push({\n        technique: 'Düşünce Kaydı',\n        effectiveness: Math.min(10, Math.round(avgMoodImprovement * 10) / 10),\n        confidence: records.length >= 5 ? 0.9 : 0.6\n      });\n    }\n    \n    // Analyze evidence gathering technique\n    const evidenceRecords = records.filter(r => r.evidenceFor && r.evidenceAgainst);\n    if (evidenceRecords.length > 0) {\n      const evidenceAvgImprovement = evidenceRecords.reduce(\n        (sum, r) => sum + ((r.moodAfter || 5) - (r.moodBefore || 5)), 0\n      ) / evidenceRecords.length;\n      \n      techniques.push({\n        technique: 'Kanıt Toplama',\n        effectiveness: Math.min(10, Math.round(evidenceAvgImprovement * 10) / 10),\n        confidence: evidenceRecords.length >= 3 ? 0.8 : 0.5\n      });\n    }\n    \n    return techniques.slice(0, 3);\n  }\n  \n  private generateCBTProgressAnalysis(records: any[], timeframe: string): string {\n    const recordCount = records.length;\n    const avgMoodImprovement = records.length > 0 \n      ? records.reduce((sum, r) => sum + ((r.moodAfter || 5) - (r.moodBefore || 5)), 0) / records.length \n      : 0;\n    \n    const recentRecords = records.slice(0, Math.min(5, records.length));\n    const recentAvgImprovement = recentRecords.length > 0\n      ? recentRecords.reduce((sum, r) => sum + ((r.moodAfter || 5) - (r.moodBefore || 5)), 0) / recentRecords.length\n      : 0;\n    \n    if (recordCount < 5) {\n      return `${recordCount} düşünce kaydın var. CBT yolculuğunun başlangıcındasın ve ortalama ${avgMoodImprovement.toFixed(1)} puanlık mood iyileşmesi sağlıyorsun.`;\n    } else if (avgMoodImprovement >= 2) {\n      return `${recordCount} kayıtla güçlü bir ilerleme gösteriyorsun. Ortalama ${avgMoodImprovement.toFixed(1)} puanlık mood iyileşmesi, CBT tekniklerinin sana uygun olduğunu gösteriyor.`;\n    } else if (avgMoodImprovement >= 1) {\n      return `${recordCount} kayıtla istikrarlı bir gelişim süreci yaşıyorsun. ${avgMoodImprovement.toFixed(1)} puanlık ortalama iyileşme, düzenli pratikle artmaya devam edecek.`;\n    } else {\n      return `${recordCount} kayıt tamamladın. Mood iyileşmesi henüz beklenen seviyede değil ama bu normal - CBT becerileri zaman içinde gelişir.`;\n    }\n  }\n  \n  private generateCBTRecommendations(records: any[], distortionTrends: any[]): string[] {\n    const recommendations: string[] = [];\n    \n    // Based on record frequency\n    if (records.length < 10) {\n      recommendations.push('Daha sık düşünce kaydı tutarak pattern\\'lerin daha net görünmesini sağla');\n    }\n    \n    // Based on mood improvement\n    const avgMoodImprovement = records.reduce((sum, r) => sum + ((r.moodAfter || 5) - (r.moodBefore || 5)), 0) / records.length;\n    if (avgMoodImprovement < 1) {\n      recommendations.push('Kanıt toplama adımına daha fazla zaman ayırarak düşüncelerini daha objektif değerlendir');\n    }\n    \n    // Based on distortion trends\n    const decliningDistortions = distortionTrends.filter(d => d.trend === 'declining');\n    if (decliningDistortions.length > 0) {\n      recommendations.push(`${decliningDistortions[0].distortion} konusunda ekstra dikkat göster - sıklığı artış gösteriyor`);\n    }\n    \n    // Evidence quality\n    const evidenceRecords = records.filter(r => r.evidenceFor && r.evidenceAgainst);\n    if (evidenceRecords.length < records.length * 0.7) {\n      recommendations.push('Lehine ve aleyhine kanıtları daha düzenli doldurmaya odaklan');\n    }\n    \n    return recommendations.slice(0, 3);\n  }\n  \n  private assessCBTRiskLevel(records: any[]): 'low' | 'medium' | 'high' {\n    const recentRecords = records.slice(0, 5);\n    const avgMoodBefore = recentRecords.reduce((sum, r) => sum + (r.moodBefore || 5), 0) / recentRecords.length;\n    const avgMoodImprovement = recentRecords.reduce((sum, r) => sum + ((r.moodAfter || 5) - (r.moodBefore || 5)), 0) / recentRecords.length;\n    \n    if (avgMoodBefore <= 3 && avgMoodImprovement < 0.5) {\n      return 'high';\n    } else if (avgMoodBefore <= 4 || avgMoodImprovement < 1) {\n      return 'medium';\n    } else {\n      return 'low';\n    }\n  }\n  \n  private determineCBTNextFocus(records: any[], distortionTrends: any[]): string {\n    // Find most problematic distortion\n    const decliningDistortions = distortionTrends.filter(d => d.trend === 'declining');\n    if (decliningDistortions.length > 0) {\n      return `${decliningDistortions[0].distortion} çarpıtmasına odaklan`;\n    }\n    \n    // Based on evidence usage\n    const evidenceRecords = records.filter(r => r.evidenceFor && r.evidenceAgainst);\n    if (evidenceRecords.length < records.length * 0.5) {\n      return 'Kanıt toplama becerilerin geliştir';\n    }\n    \n    // Based on record frequency\n    if (records.length < 15) {\n      return 'Düzenli kayıt tutma alışkanlığın güçlendir';\n    }\n    \n    return 'Reframe tekniklerini çeşitlendir';\n  }\n  \n  private calculateCBTProgressConfidence(records: any[]): number {\n    if (records.length < 3) return 0.3;\n    if (records.length < 7) return 0.6;\n    if (records.length < 15) return 0.8;\n    return 0.9;\n  }\n\n  // ============================================================================\n  // MISSING PATTERN ANALYSIS METHODS\n  // ============================================================================\n\n  /**\n   * Calculate pattern confidence based on data points\n   */\n  private calculatePatternConfidence(dataPoints: number): number {\n    if (dataPoints < 2) return 0.2;\n    if (dataPoints < 5) return 0.4;\n    if (dataPoints < 10) return 0.6;\n    if (dataPoints < 20) return 0.8;\n    return Math.min(0.95, 0.8 + (dataPoints - 20) * 0.01);\n  }\n\n\n\n\n\n\n\n  /**\n   * Extract environmental triggers from compulsions\n   */\n  private extractEnvironmentalTriggers(compulsions: any[]): any[] {\n    if (!compulsions || !Array.isArray(compulsions)) return [];\n    \n    const patterns = [];\n    \n    // Trigger keyword extraction\n    const triggerCounts: Record<string, number> = {};\n    compulsions.forEach(c => {\n      if (c.trigger && typeof c.trigger === 'string') {\n        const keywords = c.trigger.toLowerCase().split(/\\s+/);\n        keywords.forEach(keyword => {\n          if (keyword.length > 2) { // Ignore short words\n            triggerCounts[keyword] = (triggerCounts[keyword] || 0) + 1;\n          }\n        });\n      }\n    });\n    \n    // Convert to patterns\n    for (const [trigger, count] of Object.entries(triggerCounts)) {\n      if (count > 1) { // Multiple occurrences\n        patterns.push({\n          type: 'environmental_trigger',\n          trigger: trigger,\n          frequency: count,\n          confidence: this.calculatePatternConfidence(count)\n        });\n      }\n    }\n    \n    return patterns;\n  }\n\n  /**\n   * Extract mood-related temporal patterns by hour (OPTIMIZED - lightweight version)\n   */\n  private extractMoodTemporalPatternsByHour(data: any): any[] {\n    const patterns = [];\n    \n    if (data.moods && Array.isArray(data.moods)) {\n      // 🚀 PERFORMANCE: Sample only recent moods and limit processing\n      const SAMPLE_SIZE = 20; // Much smaller sample for hourly analysis\n      const recentMoods = data.moods\n        .slice(0, SAMPLE_SIZE)\n        .filter(mood => mood.timestamp || mood.created_at);\n      \n      if (recentMoods.length < 5) return []; // Early exit for insufficient data\n      \n      const moodsByHour = new Array(24).fill(0).map(() => ({ total: 0, count: 0 }));\n      \n      recentMoods.forEach(mood => {\n        const hour = new Date(mood.timestamp || mood.created_at).getHours();\n        moodsByHour[hour].total += mood.mood_score || 5;\n        moodsByHour[hour].count += 1;\n      });\n      \n      // Find significant low mood periods only (early exit)\n      const hourlyAverages = moodsByHour\n        .map((h, hour) => ({ hour, average: h.count > 0 ? h.total / h.count : 5, count: h.count }))\n        .filter(h => h.count >= 2 && h.average < 4); // More restrictive filtering\n      \n      if (hourlyAverages.length > 0) {\n        patterns.push({\n          type: 'low_mood_temporal_hourly',\n          hours: hourlyAverages.slice(0, 3).map(h => h.hour), // Limit to top 3\n          averageScore: hourlyAverages.reduce((sum, h) => sum + h.average, 0) / hourlyAverages.length,\n          confidence: Math.min(0.7, hourlyAverages.length / 10),\n          sampleSize: recentMoods.length\n        });\n      }\n    }\n    \n    return patterns;\n  }\n\n  // ============================================================================\n  // HELPER METHODS\n  // ============================================================================\n\n  private groupByTimeWindow(compulsions: any[], windowDays: number): any[][] {\n    const windows: any[][] = [];\n    const sortedCompulsions = [...compulsions].sort((a, b) => \n      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    );\n    \n    if (sortedCompulsions.length === 0) return windows;\n    \n    const startTime = new Date(sortedCompulsions[0].timestamp).getTime();\n    const windowMs = windowDays * 24 * 60 * 60 * 1000;\n    \n    let currentWindow: any[] = [];\n    let currentWindowStart = startTime;\n    \n    sortedCompulsions.forEach(c => {\n      const cTime = new Date(c.timestamp).getTime();\n      if (cTime >= currentWindowStart + windowMs) {\n        if (currentWindow.length > 0) windows.push(currentWindow);\n        currentWindow = [c];\n        currentWindowStart = Math.floor((cTime - startTime) / windowMs) * windowMs + startTime;\n      } else {\n        currentWindow.push(c);\n      }\n    });\n    \n    if (currentWindow.length > 0) windows.push(currentWindow);\n    return windows;\n  }\n\n  /**\n   * 📊 Extract resistance/severity value from compulsion with field name flexibility\n   */\n  private getCompulsionSeverity(compulsion: any): number {\n    return compulsion.severity || compulsion.resistanceLevel || compulsion.resistance_level || compulsion.intensity || 5;\n  }\n\n  /**\n   * 📊 Check if compulsion has valid severity/resistance data\n   */\n  private hasValidSeverity(compulsion: any): boolean {\n    return compulsion.severity !== undefined || \n           compulsion.resistanceLevel !== undefined ||\n           compulsion.resistance_level !== undefined ||\n           compulsion.intensity !== undefined;\n  }\n\n  private calculateAverageSeverity(compulsions: any[]): number {\n    if (!compulsions || !Array.isArray(compulsions) || compulsions.length === 0) return 0;\n    const total = compulsions.reduce((sum, c) => sum + this.getCompulsionSeverity(c), 0);\n    return total / compulsions.length;\n  }\n\n  private calculateTypeFrequency(compulsions: any[]): Record<string, number> {\n    const freq: Record<string, number> = {};\n    if (!compulsions || !Array.isArray(compulsions)) return freq;\n    \n    compulsions.forEach(c => {\n      if (c.type) {\n        freq[c.type] = (freq[c.type] || 0) + 1;\n      }\n    });\n    return freq;\n  }\n\n  private extractDayOfWeekPattern(compulsions: any[]): any | null {\n    if (!compulsions || !Array.isArray(compulsions)) return null;\n    \n    const dayCounts = new Array(7).fill(0);\n    compulsions.forEach(c => {\n      const day = new Date(c.timestamp).getDay();\n      dayCounts[day]++;\n    });\n    \n    const maxCount = Math.max(...dayCounts);\n    const avgCount = dayCounts.reduce((sum, count) => sum + count, 0) / 7;\n    \n    if (maxCount > avgCount * 1.5) { // Significant deviation\n      const peakDay = dayCounts.indexOf(maxCount);\n      const dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];\n      \n      return {\n        type: 'day_of_week_pattern',\n        peakDay: peakDay,\n        dayName: dayNames[peakDay],\n        frequency: maxCount,\n        confidence: this.calculatePatternConfidence(maxCount)\n      };\n    }\n    \n    return null;\n  }\n\n  private extractTextPatterns(content: string): any {\n    // Simple text pattern extraction for voice/notes input\n    const patterns = {\n      behavioral: [],\n      triggers: []\n    };\n    \n    const text = content.toLowerCase();\n    \n    // Behavioral pattern keywords\n    const behavioralKeywords = ['tekrar', 'kontrol', 'temizlik', 'sayma', 'sıralama'];\n    behavioralKeywords.forEach(keyword => {\n      if (text.includes(keyword)) {\n        patterns.behavioral.push({\n          type: 'text_behavioral',\n          keyword: keyword,\n          context: text,\n          confidence: 0.6\n        });\n      }\n    });\n    \n    // Trigger pattern keywords\n    const triggerKeywords = ['stres', 'endişe', 'korku', 'kirli', 'güvenlik'];\n    triggerKeywords.forEach(keyword => {\n      if (text.includes(keyword)) {\n        patterns.triggers.push({\n          type: 'text_trigger',\n          trigger: keyword,\n          context: text,\n          confidence: 0.5\n        });\n      }\n    });\n    \n    return patterns;\n  }\n\n  // ============================================================================\n  // 📊 MOOD ANALYTICS MAIN PROCESSOR\n  // ============================================================================\n  \n  /**\n   * 🎯 Main mood analytics processor - generates clinical-grade insights\n   */\n  private processMoodAnalytics(moods: any[]): any {\n    try {\n      console.log(`🧮 Processing mood analytics for ${moods.length} entries`);\n      \n      if (!moods || !Array.isArray(moods) || moods.length < 3) {\n        console.warn('⚠️ Insufficient mood data for analytics', moods?.length || 0);\n        return null;\n      }\n\n      // Limit to latest 50 entries for performance\n      const recentMoods = moods.slice(0, 50);\n      console.log(`📊 Using ${recentMoods.length} recent mood entries for analysis`);\n\n      // Calculate all clinical metrics\n      const weeklyDelta = this.calculateAnalyticsWeeklyDelta(recentMoods);\n      const volatility = this.calculateAnalyticsVolatility(recentMoods);\n      const baselines = this.calculateAnalyticsBaselines(recentMoods);\n      const correlations = this.calculateAnalyticsMEACorrelations(recentMoods);\n      const dataQuality = this.assessAnalyticsDataQuality(recentMoods);\n      const profile = this.classifyAnalyticsEmotionalProfile(recentMoods, baselines, weeklyDelta, volatility, correlations);\n      const bestTimes = this.analyzeAnalyticsBestTimes(recentMoods);\n      const confidence = this.calculateAnalyticsGlobalConfidence(recentMoods, dataQuality, profile);\n\n      const result = {\n        weeklyDelta: weeklyDelta,\n        volatility: volatility,\n        baselines: baselines,\n        correlations: correlations,\n        profile: profile,\n        bestTimes: bestTimes,\n        sampleSize: recentMoods.length,\n        dataQuality: dataQuality,\n        confidence: confidence\n      };\n\n      console.log('✅ Mood analytics completed:', {\n        weeklyDelta,\n        volatility,\n        profileType: profile?.type,\n        confidence\n      });\n\n      return result;\n    } catch (error) {\n      console.error('❌ Mood analytics processing failed:', error);\n      return null;\n    }\n  }\n\n  // ============================================================================\n  // 📊 MOOD ANALYTICS HELPER FUNCTIONS\n  // ============================================================================\n\n  /**\n   * 📊 Calculate mood volatility using winsorized standard deviation\n   */\n  private calculateAnalyticsVolatility(moods: any[]): number {\n    try {\n      if (moods.length < 2) return 0;\n      \n      const scores = moods.map(m => m.mood_score).filter(s => s !== null && s !== undefined);\n      if (scores.length < 2) return 0;\n      \n      // Winsorize at 5th and 95th percentiles to reduce outlier impact\n      const sorted = [...scores].sort((a, b) => a - b);\n      const p5Index = Math.floor(sorted.length * 0.05);\n      const p95Index = Math.ceil(sorted.length * 0.95) - 1;\n      const p5Value = sorted[p5Index];\n      const p95Value = sorted[p95Index];\n      \n      const winsorized = scores.map(s => Math.min(Math.max(s, p5Value), p95Value));\n      \n      const mean = winsorized.reduce((sum, s) => sum + s, 0) / winsorized.length;\n      const variance = winsorized.reduce((sum, s) => sum + Math.pow(s - mean, 2), 0) / winsorized.length;\n      \n      return Math.sqrt(variance);\n    } catch (error) {\n      console.warn('⚠️ Volatility calculation failed:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 📊 Calculate 14-day baselines for mood, energy, anxiety\n   */\n  private calculateAnalyticsBaselines(moods: any[]): any {\n    try {\n      if (moods.length === 0) return { mood: 50, energy: 50, anxiety: 50 };\n      \n      const recent14Days = moods.slice(0, Math.min(50, moods.length)); // Use available data\n      \n      const moodScores = recent14Days.map(m => m.mood_score).filter(s => s !== null && s !== undefined);\n      const energyScores = recent14Days.map(m => m.energy_level).filter(s => s !== null && s !== undefined);\n      const anxietyScores = recent14Days.map(m => m.anxiety_level).filter(s => s !== null && s !== undefined);\n      \n      return {\n        mood: moodScores.length > 0 ? moodScores.reduce((sum, s) => sum + s, 0) / moodScores.length : 50,\n        energy: energyScores.length > 0 ? energyScores.reduce((sum, s) => sum + s, 0) / energyScores.length : 50,\n        anxiety: anxietyScores.length > 0 ? anxietyScores.reduce((sum, s) => sum + s, 0) / anxietyScores.length : 50\n      };\n    } catch (error) {\n      console.warn('⚠️ Baselines calculation failed:', error);\n      return { mood: 50, energy: 50, anxiety: 50 };\n    }\n  }\n\n  /**\n   * 📈 Calculate weekly mood delta with fallback for limited data\n   */\n  private calculateAnalyticsWeeklyDelta(moods: any[]): number {\n    try {\n      const now = new Date();\n      const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n\n      let thisWeekMoods = moods.filter(m => {\n        const date = new Date(m.timestamp);\n        return date >= oneWeekAgo && date <= now;\n      });\n\n      let lastWeekMoods = moods.filter(m => {\n        const date = new Date(m.timestamp);\n        return date >= twoWeeksAgo && date < oneWeekAgo;\n      });\n\n      // Fallback for limited data: degrade to 3+3 days\n      if (thisWeekMoods.length < 2 || lastWeekMoods.length < 2) {\n        const threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);\n        const sixDaysAgo = new Date(now.getTime() - 6 * 24 * 60 * 60 * 1000);\n        \n        thisWeekMoods = moods.filter(m => {\n          const date = new Date(m.timestamp);\n          return date >= threeDaysAgo && date <= now;\n        });\n        \n        lastWeekMoods = moods.filter(m => {\n          const date = new Date(m.timestamp);\n          return date >= sixDaysAgo && date < threeDaysAgo;\n        });\n      }\n\n      if (thisWeekMoods.length === 0 || lastWeekMoods.length === 0) return 0;\n\n      const thisWeekAvg = thisWeekMoods.reduce((sum, m) => sum + m.mood_score, 0) / thisWeekMoods.length;\n      const lastWeekAvg = lastWeekMoods.reduce((sum, m) => sum + m.mood_score, 0) / lastWeekMoods.length;\n      \n      return thisWeekAvg - lastWeekAvg;\n    } catch (error) {\n      console.warn('⚠️ Weekly delta calculation failed:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 🔥 Calculate volatility using winsorized standard deviation\n   */\n  private calculateVolatility(moods: any[]): number {\n    try {\n      if (moods.length < 3) return 0;\n      \n      // Use last 14 days of mood scores\n      const twoWeeksAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);\n      const recentMoods = moods.filter(m => new Date(m.timestamp) >= twoWeeksAgo);\n      \n      if (recentMoods.length < 3) return 0;\n      \n      const moodScores = recentMoods.map(m => m.mood_score);\n      \n      // Winsorize at 5th and 95th percentiles\n      const sorted = [...moodScores].sort((a, b) => a - b);\n      const p5Index = Math.floor(0.05 * sorted.length);\n      const p95Index = Math.floor(0.95 * sorted.length);\n      const p5Value = sorted[p5Index];\n      const p95Value = sorted[p95Index];\n      \n      const winsorized = moodScores.map(score => {\n        if (score < p5Value) return p5Value;\n        if (score > p95Value) return p95Value;\n        return score;\n      });\n      \n      // Calculate standard deviation\n      const mean = winsorized.reduce((sum, score) => sum + score, 0) / winsorized.length;\n      const variance = winsorized.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / winsorized.length;\n      \n      return Math.sqrt(variance);\n    } catch (error) {\n      console.warn('⚠️ Volatility calculation failed:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 📊 Calculate baselines (14-day averages)\n   */\n  private calculateBaselines(moods: any[]): { mood: number; energy: number; anxiety: number } {\n    try {\n      const twoWeeksAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);\n      const recentMoods = moods.filter(m => new Date(m.timestamp) >= twoWeeksAgo);\n      \n      if (recentMoods.length === 0) {\n        return { mood: 50, energy: 50, anxiety: 50 };\n      }\n      \n      const avgMood = recentMoods.reduce((sum, m) => sum + m.mood_score, 0) / recentMoods.length;\n      const avgEnergy = recentMoods.reduce((sum, m) => sum + m.energy_level, 0) / recentMoods.length;\n      const avgAnxiety = recentMoods.reduce((sum, m) => sum + m.anxiety_level, 0) / recentMoods.length;\n      \n      return {\n        mood: parseFloat(avgMood.toFixed(1)),\n        energy: parseFloat(avgEnergy.toFixed(1)),\n        anxiety: parseFloat(avgAnxiety.toFixed(1))\n      };\n    } catch (error) {\n      console.warn('⚠️ Baselines calculation failed:', error);\n      return { mood: 50, energy: 50, anxiety: 50 };\n    }\n  }\n\n  /**\n   * 🔗 Calculate MEA correlations with n>=10 threshold\n   */\n  private calculateAnalyticsMEACorrelations(moods: any[]): any {\n    try {\n      const correlations: any = {};\n      \n      if (moods.length < 10) {\n        return {\n          moodEnergy: { r: null, n: moods.length, p: null },\n          moodAnxiety: { r: null, n: moods.length, p: null },\n          energyAnxiety: { r: null, n: moods.length, p: null }\n        };\n      }\n      \n      const moodScores = moods.map(m => m.mood_score);\n      const energyLevels = moods.map(m => m.energy_level);\n      const anxietyLevels = moods.map(m => m.anxiety_level);\n      \n      const moodEnergyR = this.calculatePearsonCorrelation(moodScores, energyLevels);\n      const moodAnxietyR = this.calculatePearsonCorrelation(moodScores, anxietyLevels);\n      const energyAnxietyR = this.calculatePearsonCorrelation(energyLevels, anxietyLevels);\n      \n      // Calculate p-values for each correlation\n      const moodEnergyP = this.calculateCorrelationPValue(moodEnergyR, moods.length);\n      const moodAnxietyP = this.calculateCorrelationPValue(moodAnxietyR, moods.length);\n      const energyAnxietyP = this.calculateCorrelationPValue(energyAnxietyR, moods.length);\n\n      return {\n        moodEnergy: {\n          r: parseFloat(moodEnergyR.toFixed(3)),\n          n: moods.length,\n          p: moodEnergyP ? parseFloat(moodEnergyP.toFixed(4)) : null\n        },\n        moodAnxiety: {\n          r: parseFloat(moodAnxietyR.toFixed(3)),\n          n: moods.length,\n          p: moodAnxietyP ? parseFloat(moodAnxietyP.toFixed(4)) : null\n        },\n        energyAnxiety: {\n          r: parseFloat(energyAnxietyR.toFixed(3)),\n          n: moods.length,\n          p: energyAnxietyP ? parseFloat(energyAnxietyP.toFixed(4)) : null\n        }\n      };\n    } catch (error) {\n      console.warn('⚠️ MEA correlations calculation failed:', error);\n      return {};\n    }\n  }\n\n  /**\n   * 📊 Assess data quality (0-1 scale)\n   */\n  private assessDataQuality(moods: any[]): number {\n    try {\n      let qualityScore = 0;\n      \n      // Sample size component (0-0.4)\n      const sampleSizeScore = Math.min(0.4, moods.length / 50 * 0.4);\n      qualityScore += sampleSizeScore;\n      \n      // Missing data component (0-0.3)\n      const completeMoods = moods.filter(m => \n        m.mood_score !== undefined && \n        m.energy_level !== undefined && \n        m.anxiety_level !== undefined\n      );\n      const missingRatio = 1 - (completeMoods.length / moods.length);\n      const missingScore = Math.max(0, 0.3 - missingRatio * 0.3);\n      qualityScore += missingScore;\n      \n      // Outlier component (0-0.3)\n      const moodScores = completeMoods.map(m => m.mood_score);\n      if (moodScores.length > 0) {\n        const mean = moodScores.reduce((sum, score) => sum + score, 0) / moodScores.length;\n        const std = Math.sqrt(moodScores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / moodScores.length);\n        const outliers = moodScores.filter(score => Math.abs(score - mean) > 2 * std);\n        const outlierRatio = outliers.length / moodScores.length;\n        const outlierScore = Math.max(0, 0.3 - outlierRatio * 0.3);\n        qualityScore += outlierScore;\n      }\n      \n      return Math.min(1, qualityScore);\n    } catch (error) {\n      console.warn('⚠️ Data quality assessment failed:', error);\n      return 0.5; // Default middle score\n    }\n  }\n\n  /**\n   * 🧠 Classify emotional profile (7 types with priority)\n   */\n  private classifyEmotionalProfile(\n    baselines: { mood: number; energy: number; anxiety: number },\n    weeklyDelta: number,\n    volatility: number,\n    sampleSize: number\n  ): { type: string; confidence: number; rationale: string[] } {\n    try {\n      const rationale: string[] = [];\n      let profileType = 'stable';\n      let confidence = 0.5;\n      \n      // Priority order: stressed > volatile > fatigued > recovering > resilient > elevated > stable\n      \n      // 1. STRESSED: baseline.mood < 40 AND baseline.anxiety > 60\n      if (baselines.mood < 40 && baselines.anxiety > 60) {\n        profileType = 'stressed';\n        rationale.push(`Düşük mood (${baselines.mood}) ve yüksek anksiyete (${baselines.anxiety})`);\n        confidence = 0.8;\n      }\n      // 2. VOLATILE: volatility > 15\n      else if (volatility > 15) {\n        profileType = 'volatile';\n        rationale.push(`Yüksek mood volatilitesi (${volatility.toFixed(1)})`);\n        confidence = 0.7;\n      }\n      // 3. FATIGUED: baseline.energy < 40 AND baseline.mood < 55\n      else if (baselines.energy < 40 && baselines.mood < 55) {\n        profileType = 'fatigued';\n        rationale.push(`Düşük enerji (${baselines.energy}) ve orta-düşük mood (${baselines.mood})`);\n        confidence = 0.75;\n      }\n      // 4. RECOVERING: weeklyDelta > 8 AND 40 ≤ baseline.mood ≤ 60\n      else if (weeklyDelta > 8 && baselines.mood >= 40 && baselines.mood <= 60) {\n        profileType = 'recovering';\n        rationale.push(`Pozitif haftalık trend (+${weeklyDelta.toFixed(1)}) ve orta mood`);\n        confidence = 0.7;\n      }\n      // 5. RESILIENT: baseline.mood > 60 AND volatility < 10 AND baseline.anxiety < 50\n      else if (baselines.mood > 60 && volatility < 10 && baselines.anxiety < 50) {\n        profileType = 'resilient';\n        rationale.push(`Yüksek mood (${baselines.mood}), düşük volatilite (${volatility.toFixed(1)}), düşük anksiyete`);\n        confidence = 0.85;\n      }\n      // 6. ELEVATED: baseline.mood > 70 AND volatility düşük\n      else if (baselines.mood > 70 && volatility < 12) {\n        profileType = 'elevated';\n        rationale.push(`Yüksek mood seviyesi (${baselines.mood}) ve stabil durum`);\n        confidence = 0.75;\n      }\n      // 7. STABLE: volatility < 8 AND |weeklyDelta| < 5 (default)\n      else if (volatility < 8 && Math.abs(weeklyDelta) < 5) {\n        profileType = 'stable';\n        rationale.push(`Düşük volatilite (${volatility.toFixed(1)}) ve minimal haftalık değişim`);\n        confidence = 0.6;\n      }\n      \n      // Adjust confidence based on sample size\n      const sampleSizeMultiplier = Math.min(1, sampleSize / 20);\n      confidence = confidence * sampleSizeMultiplier;\n      \n      return {\n        type: profileType,\n        confidence: parseFloat(confidence.toFixed(3)),\n        rationale\n      };\n    } catch (error) {\n      console.warn('⚠️ Emotional profile classification failed:', error);\n      return {\n        type: 'stable',\n        confidence: 0.3,\n        rationale: ['Profil sınıflaması başarısız - varsayılan stabil profil']\n      };\n    }\n  }\n\n  /**\n   * ⏰ Analyze best times (day of week and time of day)\n   */\n  private analyzeBestTimes(moods: any[]): { dayOfWeek?: string; timeOfDay?: string; confidence: number } {\n    try {\n      if (moods.length < 7) {\n        return { confidence: 0.1 };\n      }\n      \n      // Day of week analysis\n      const dayStats: Record<number, { total: number; count: number }> = {};\n      const hourStats: Record<number, { total: number; count: number }> = {};\n      \n      moods.forEach(m => {\n        const date = new Date(m.timestamp);\n        const dayOfWeek = date.getDay();\n        const hour = date.getHours();\n        \n        // Day stats\n        if (!dayStats[dayOfWeek]) dayStats[dayOfWeek] = { total: 0, count: 0 };\n        dayStats[dayOfWeek].total += m.mood_score;\n        dayStats[dayOfWeek].count += 1;\n        \n        // Hour stats\n        if (!hourStats[hour]) hourStats[hour] = { total: 0, count: 0 };\n        hourStats[hour].total += m.mood_score;\n        hourStats[hour].count += 1;\n      });\n      \n      // Find best day\n      let bestDay = '';\n      let bestDayScore = 0;\n      const dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];\n      \n      Object.entries(dayStats).forEach(([day, stats]) => {\n        if (stats.count >= 2) { // At least 2 data points\n          const avgScore = stats.total / stats.count;\n          if (avgScore > bestDayScore) {\n            bestDayScore = avgScore;\n            bestDay = dayNames[parseInt(day)];\n          }\n        }\n      });\n      \n      // Find best time of day\n      let bestTimeSlot = '';\n      let bestTimeScore = 0;\n      \n      Object.entries(hourStats).forEach(([hour, stats]) => {\n        if (stats.count >= 2) {\n          const avgScore = stats.total / stats.count;\n          if (avgScore > bestTimeScore) {\n            bestTimeScore = avgScore;\n            const h = parseInt(hour);\n            if (h >= 6 && h < 12) bestTimeSlot = 'Sabah';\n            else if (h >= 12 && h < 18) bestTimeSlot = 'Öğleden sonra';\n            else if (h >= 18 && h < 22) bestTimeSlot = 'Akşam';\n            else bestTimeSlot = 'Gece';\n          }\n        }\n      });\n      \n      const confidence = Math.min(0.8, moods.length / 30 * 0.8);\n      \n      return {\n        dayOfWeek: bestDay || undefined,\n        timeOfDay: bestTimeSlot || undefined,\n        confidence: parseFloat(confidence.toFixed(3))\n      };\n    } catch (error) {\n      console.warn('⚠️ Best times analysis failed:', error);\n      return { confidence: 0.1 };\n    }\n  }\n\n  /**\n   * 🎯 Calculate global confidence score\n   */\n  private calculateGlobalConfidence(\n    sampleSize: number,\n    dataQuality: number,\n    profileConfidence: number,\n    correlations: any\n  ): number {\n    try {\n      // Sample size component (0-0.4)\n      const sampleComponent = Math.min(0.4, sampleSize / 50 * 0.4);\n      \n      // Data quality component (0-0.3)\n      const qualityComponent = dataQuality * 0.3;\n      \n      // Profile confidence component (0-0.2)\n      const profileComponent = profileConfidence * 0.2;\n      \n      // Correlation signal strength component (0-0.1)\n      let correlationComponent = 0;\n      if (correlations.moodEnergy?.r !== null) {\n        const avgCorrelationStrength = (\n          Math.abs(correlations.moodEnergy?.r || 0) +\n          Math.abs(correlations.moodAnxiety?.r || 0) +\n          Math.abs(correlations.energyAnxiety?.r || 0)\n        ) / 3;\n        correlationComponent = avgCorrelationStrength * 0.1;\n      }\n      \n      const totalConfidence = sampleComponent + qualityComponent + profileComponent + correlationComponent;\n      \n      return Math.min(0.95, totalConfidence);\n    } catch (error) {\n      console.warn('⚠️ Global confidence calculation failed:', error);\n      return 0.3;\n    }\n  }\n  /**\n   * 📊 Assess data quality for analytics\n   */\n  private assessAnalyticsDataQuality(moods: any[]): number {\n    try {\n      if (moods.length === 0) return 0.1;\n      \n      let qualityScore = 0;\n      \n      // Sample size scoring\n      if (moods.length >= 30) qualityScore += 0.4;\n      else if (moods.length >= 14) qualityScore += 0.3;\n      else if (moods.length >= 7) qualityScore += 0.2;\n      else qualityScore += 0.1;\n      \n      // Missing data ratio\n      const validMoodScores = moods.filter(m => m.mood_score !== null && m.mood_score !== undefined);\n      const missingRatio = 1 - (validMoodScores.length / moods.length);\n      const missingScore = Math.max(0, 0.3 - missingRatio * 0.3);\n      qualityScore += missingScore;\n      \n      // Outlier detection\n      if (validMoodScores.length >= 5) {\n        const scores = validMoodScores.map(m => m.mood_score);\n        const mean = scores.reduce((sum, s) => sum + s, 0) / scores.length;\n        const std = Math.sqrt(scores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / scores.length);\n        const outliers = scores.filter(score => Math.abs(score - mean) > 2 * std);\n        const outlierRatio = outliers.length / scores.length;\n        const outlierScore = Math.max(0, 0.3 - outlierRatio * 0.3);\n        qualityScore += outlierScore;\n      }\n      \n      return Math.min(1, qualityScore);\n    } catch (error) {\n      console.warn('⚠️ Analytics data quality assessment failed:', error);\n      return 0.1;\n    }\n  }\n\n  /**\n   * 🧠 Classify analytics emotional profile (7 types with priority)\n   */\n  private classifyAnalyticsEmotionalProfile(\n    moods: any[],\n    baselines: { mood: number; energy: number; anxiety: number },\n    weeklyDelta: number,\n    volatility: number,\n    correlations: any\n  ): { type: string; confidence: number; rationale: string[] } {\n    try {\n      const rationale: string[] = [];\n      let profileType = 'stable';\n      let confidence = 0.5;\n      \n      // Priority order: stressed > volatile > fatigued > recovering > resilient > elevated > stable\n      \n      // 1. STRESSED: baseline.mood < 40 AND baseline.anxiety > 60\n      if (baselines.mood < 40 && baselines.anxiety > 60) {\n        profileType = 'stressed';\n        rationale.push(`Düşük mood (${baselines.mood.toFixed(1)}) ve yüksek anksiyete (${baselines.anxiety.toFixed(1)})`);\n        confidence = 0.8;\n      }\n      // 2. VOLATILE: volatility > 15\n      else if (volatility > 15) {\n        profileType = 'volatile';\n        rationale.push(`Yüksek mood volatilitesi (${volatility.toFixed(1)})`);\n        confidence = 0.7;\n      }\n      // 3. FATIGUED: baseline.energy < 40 AND baseline.mood < 55\n      else if (baselines.energy < 40 && baselines.mood < 55) {\n        profileType = 'fatigued';\n        rationale.push(`Düşük enerji (${baselines.energy.toFixed(1)}) ve orta-düşük mood (${baselines.mood.toFixed(1)})`);\n        confidence = 0.75;\n      }\n      // 4. RECOVERING: weeklyDelta > 8 AND 40 ≤ baseline.mood ≤ 60\n      else if (weeklyDelta > 8 && baselines.mood >= 40 && baselines.mood <= 60) {\n        profileType = 'recovering';\n        rationale.push(`Pozitif haftalık trend (+${weeklyDelta.toFixed(1)}) ve orta mood (${baselines.mood.toFixed(1)})`);\n        confidence = 0.6;\n      }\n      // 5. RESILIENT: baseline.mood ≥ 65 AND volatility ≤ 8 AND baseline.anxiety ≤ 40\n      else if (baselines.mood >= 65 && volatility <= 8 && baselines.anxiety <= 40) {\n        profileType = 'resilient';\n        rationale.push(`Yüksek mood (${baselines.mood.toFixed(1)}), düşük volatilite (${volatility.toFixed(1)}) ve düşük anksiyete (${baselines.anxiety.toFixed(1)})`);\n        confidence = 0.85;\n      }\n      // 6. ELEVATED: baseline.mood ≥ 70\n      else if (baselines.mood >= 70) {\n        profileType = 'elevated';\n        rationale.push(`Yüksek mood baseline (${baselines.mood.toFixed(1)})`);\n        confidence = 0.7;\n      }\n      // 7. STABLE: default case\n      else {\n        profileType = 'stable';\n        rationale.push(`Dengeli duygusal durum (mood: ${baselines.mood.toFixed(1)}, volatilite: ${volatility.toFixed(1)})`);\n        confidence = 0.5;\n      }\n      \n      return { type: profileType, confidence, rationale };\n    } catch (error) {\n      console.warn('⚠️ Analytics emotional profile classification failed:', error);\n      return { type: 'stable', confidence: 0.3, rationale: ['Analiz hatası nedeniyle varsayılan profil'] };\n    }\n  }\n\n  /**\n   * ⏰ Analyze best times for mood (day of week/time of day)\n   */\n  private analyzeAnalyticsBestTimes(moods: any[]): { dayOfWeek?: string; timeOfDay?: string; confidence: number } {\n    try {\n      if (moods.length < 7) return { confidence: 0.1 };\n      \n      const dayOfWeekCounts: { [key: string]: { count: number; avgMood: number } } = {};\n      const timeOfDayCounts: { [key: string]: { count: number; avgMood: number } } = {};\n      \n      const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      \n      moods.forEach(mood => {\n        if (mood.mood_score && mood.created_at) {\n          const date = new Date(mood.created_at);\n          const dayOfWeek = dayNames[date.getDay()];\n          const hour = date.getHours();\n          const timeSlot = hour < 12 ? 'morning' : hour < 18 ? 'afternoon' : 'evening';\n          \n          // Day of week analysis\n          if (!dayOfWeekCounts[dayOfWeek]) {\n            dayOfWeekCounts[dayOfWeek] = { count: 0, avgMood: 0 };\n          }\n          dayOfWeekCounts[dayOfWeek].count++;\n          dayOfWeekCounts[dayOfWeek].avgMood += mood.mood_score;\n          \n          // Time of day analysis\n          if (!timeOfDayCounts[timeSlot]) {\n            timeOfDayCounts[timeSlot] = { count: 0, avgMood: 0 };\n          }\n          timeOfDayCounts[timeSlot].count++;\n          timeOfDayCounts[timeSlot].avgMood += mood.mood_score;\n        }\n      });\n      \n      // Calculate averages and find best times\n      let bestDay = '';\n      let bestDayMood = 0;\n      Object.keys(dayOfWeekCounts).forEach(day => {\n        const avgMood = dayOfWeekCounts[day].avgMood / dayOfWeekCounts[day].count;\n        dayOfWeekCounts[day].avgMood = avgMood;\n        if (avgMood > bestDayMood && dayOfWeekCounts[day].count >= 2) {\n          bestDay = day;\n          bestDayMood = avgMood;\n        }\n      });\n      \n      let bestTime = '';\n      let bestTimeMood = 0;\n      Object.keys(timeOfDayCounts).forEach(time => {\n        const avgMood = timeOfDayCounts[time].avgMood / timeOfDayCounts[time].count;\n        timeOfDayCounts[time].avgMood = avgMood;\n        if (avgMood > bestTimeMood && timeOfDayCounts[time].count >= 2) {\n          bestTime = time;\n          bestTimeMood = avgMood;\n        }\n      });\n      \n      return {\n        dayOfWeek: bestDay || undefined,\n        timeOfDay: bestTime || undefined,\n        confidence: Math.min(0.8, moods.length / 20) // Confidence increases with more data\n      };\n    } catch (error) {\n      console.warn('⚠️ Analytics best times analysis failed:', error);\n      return { confidence: 0.1 };\n    }\n  }\n\n  /**\n   * 🎯 Calculate global confidence score for analytics\n   */\n  private calculateAnalyticsGlobalConfidence(moods: any[], dataQuality: number, profile: any): number {\n    try {\n      let confidence = 0;\n      \n      // Base confidence from data quality (40% weight)\n      confidence += dataQuality * 0.4;\n      \n      // Sample size confidence (30% weight)\n      const sampleSize = moods.length;\n      if (sampleSize >= 30) confidence += 0.3;\n      else if (sampleSize >= 14) confidence += 0.2;\n      else if (sampleSize >= 7) confidence += 0.1;\n      else confidence += 0.05;\n      \n      // Profile confidence (20% weight)\n      if (profile && profile.confidence) {\n        confidence += profile.confidence * 0.2;\n      }\n      \n      // Data recency boost (10% weight)\n      const now = Date.now();\n      const recentCount = moods.filter(m => {\n        const moodTime = new Date(m.created_at).getTime();\n        const daysDiff = (now - moodTime) / (1000 * 60 * 60 * 24);\n        return daysDiff <= 7;\n      }).length;\n      \n      if (recentCount >= 3) confidence += 0.1;\n      else if (recentCount >= 1) confidence += 0.05;\n      \n      return Math.min(1, Math.max(0.1, confidence));\n    } catch (error) {\n      console.warn('⚠️ Analytics global confidence calculation failed:', error);\n      return 0.3;\n    }\n  }\n}\n\n// ============================================================================\n// EXPORT SINGLETON INSTANCE\n// ============================================================================\n\nexport const unifiedPipeline = UnifiedAIPipeline.getInstance();\n"],"mappings":"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","ignoreList":[]}