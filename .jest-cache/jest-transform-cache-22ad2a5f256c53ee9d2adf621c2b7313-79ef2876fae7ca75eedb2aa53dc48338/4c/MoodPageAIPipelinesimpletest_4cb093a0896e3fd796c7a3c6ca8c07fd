9dbdc6701cb580471b644d82f3011b58
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Mood Page Quality Ribbon - Simplified Tests', function () {
  describe('[QR:mood:threshold] N-Threshold Quality Tests', function () {
    var thresholdScenarios = [{
      days: 16,
      quality: 'high',
      expectedBadge: 'High'
    }, {
      days: 10,
      quality: 'medium',
      expectedBadge: 'Med'
    }, {
      days: 4,
      quality: 'low',
      expectedBadge: 'Low'
    }];
    it('[QR:mood:high] should show High quality for 16 days of data', function () {
      var days = 16;
      var quality = 'high';
      var expectedBadge = 'High';
      var moodAnalytics = {
        totalEntries: days,
        dateRange: {
          start: new Date(Date.now() - days * 24 * 60 * 60 * 1000),
          end: new Date()
        }
      };
      var determinedQuality;
      if (moodAnalytics.totalEntries >= 14) {
        determinedQuality = 'high';
      } else if (moodAnalytics.totalEntries >= 7) {
        determinedQuality = 'medium';
      } else {
        determinedQuality = 'low';
      }
      expect(determinedQuality).toBe(quality);
      expect(moodAnalytics.totalEntries).toBe(days);
    });
    it('[QR:mood:medium] should show Med quality for 10 days of data', function () {
      var days = 10;
      var quality = 'medium';
      var expectedBadge = 'Med';
      var moodAnalytics = {
        totalEntries: days,
        dateRange: {
          start: new Date(Date.now() - days * 24 * 60 * 60 * 1000),
          end: new Date()
        }
      };
      var determinedQuality;
      if (moodAnalytics.totalEntries >= 14) {
        determinedQuality = 'high';
      } else if (moodAnalytics.totalEntries >= 7) {
        determinedQuality = 'medium';
      } else {
        determinedQuality = 'low';
      }
      expect(determinedQuality).toBe(quality);
      expect(moodAnalytics.totalEntries).toBe(days);
    });
    it('[QR:mood:low] should show Low quality for 4 days of data', function () {
      var days = 4;
      var quality = 'low';
      var expectedBadge = 'Low';
      var moodAnalytics = {
        totalEntries: days,
        dateRange: {
          start: new Date(Date.now() - days * 24 * 60 * 60 * 1000),
          end: new Date()
        }
      };
      var determinedQuality;
      if (moodAnalytics.totalEntries >= 14) {
        determinedQuality = 'high';
      } else if (moodAnalytics.totalEntries >= 7) {
        determinedQuality = 'medium';
      } else {
        determinedQuality = 'low';
      }
      expect(determinedQuality).toBe(quality);
      expect(moodAnalytics.totalEntries).toBe(days);
    });
    it('[QR:mood:medium] should handle boundary at exactly 7 days', function () {
      var boundaryDays = 7;
      var moodAnalytics = {
        totalEntries: boundaryDays
      };
      var quality = moodAnalytics.totalEntries >= 14 ? 'high' : moodAnalytics.totalEntries >= 7 ? 'medium' : 'low';
      expect(quality).toBe('medium');
    });
    it('[QR:mood:high] should handle boundary at exactly 14 days', function () {
      var boundaryDays = 14;
      var moodAnalytics = {
        totalEntries: boundaryDays
      };
      var quality = moodAnalytics.totalEntries >= 14 ? 'high' : moodAnalytics.totalEntries >= 7 ? 'medium' : 'low';
      expect(quality).toBe('high');
    });
  });
  describe('[QR:mood:cache] Cache Behavior Tests', function () {
    it('[QR:mood:cache] should transition from Fresh to Cache based on TTL', function () {
      var TEST_TTL_MS = 5000;
      var currentMeta = {
        source: 'unified',
        freshnessMs: 1000,
        processedAt: Date.now()
      };
      expect(currentMeta.source).toBe('unified');
      expect(currentMeta.freshnessMs).toBeLessThan(TEST_TTL_MS);
      var expiredMeta = {
        source: 'cache',
        freshnessMs: TEST_TTL_MS + 1000,
        processedAt: Date.now() - TEST_TTL_MS - 1000
      };
      expect(expiredMeta.source).toBe('cache');
      expect(expiredMeta.freshnessMs).toBeGreaterThan(TEST_TTL_MS);
    });
    it('[QR:mood:cache] should show Cache badge for cached mood data', function () {
      var cachedMeta = {
        source: 'cache',
        quality: 'high',
        sampleSize: 20,
        freshnessMs: 3600000
      };
      expect(cachedMeta.source).toBe('cache');
      expect(cachedMeta.freshnessMs).toBeGreaterThan(60000);
    });
  });
  describe('[QR:mood:hidden] Visibility Tests', function () {
    it('[QR:mood:hidden] should hide when metadata is missing', function () {
      var suggestion = {
        content: 'Mood suggestion text',
        meta: null
      };
      var shouldShowRibbon = suggestion.meta !== null && suggestion.meta !== undefined;
      expect(shouldShowRibbon).toBe(false);
    });
    it('[QR:mood:hidden] should hide when pipeline fails', function () {
      var error = null;
      try {
        throw new Error('Mood pipeline processing failed');
      } catch (e) {
        error = e;
      }
      var shouldShowRibbon = error === null;
      expect(shouldShowRibbon).toBe(false);
      expect(error).toBeTruthy();
    });
  });
  describe('[QR:mood:analytics] Analytics Integration Tests', function () {
    it('[QR:mood:high] should include mood analytics in quality calculation', function () {
      var moodAnalytics = {
        totalEntries: 30,
        averageMoodScore: 7.5,
        trendDirection: 'improving',
        consistency: 0.85
      };
      var isHighQuality = moodAnalytics.totalEntries >= 14 && moodAnalytics.consistency > 0.7;
      expect(isHighQuality).toBe(true);
      expect(moodAnalytics.totalEntries).toBeGreaterThanOrEqual(14);
    });
    it('[QR:mood:low] should handle sparse mood data correctly', function () {
      var sparseMoodData = {
        totalEntries: 2,
        dateRange: {
          start: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
          end: new Date()
        }
      };
      var quality = sparseMoodData.totalEntries >= 14 ? 'high' : sparseMoodData.totalEntries >= 7 ? 'medium' : 'low';
      expect(quality).toBe('low');
      expect(sparseMoodData.totalEntries).toBeLessThan(7);
    });
  });
  describe('[QR:mood:testmode] Test Mode Behavior', function () {
    it('[QR:mood:testmode] should respect TEST_TTL_MS for mood cache', function () {
      var TEST_MODE = process.env.TEST_MODE === '1';
      var TEST_TTL_MS = parseInt(process.env.TEST_TTL_MS || '5000');
      expect(TEST_MODE).toBe(true);
      expect(TEST_TTL_MS).toBe(5000);
      var moodCacheTTL = TEST_MODE ? TEST_TTL_MS : 3600000;
      expect(moodCacheTTL).toBe(5000);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,