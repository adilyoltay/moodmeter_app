253caa8652571623b2547e3af194b246
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateTextComplexity = calculateTextComplexity;
exports.default = void 0;
exports.hasComplexPatterns = hasComplexPatterns;
exports.isTimeSensitive = isTimeSensitive;
exports.makeGatingDecision = makeGatingDecision;
exports.needsLLMAnalysis = needsLLMAnalysis;
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _Constants$expoConfig, _Constants$expoConfig2, _Constants$expoConfig3, _Constants$expoConfig4;
var THRESHOLDS = {
  heuristicMoodBreathwork: parseFloat(((_Constants$expoConfig = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig = _Constants$expoConfig.extra) == null ? void 0 : _Constants$expoConfig.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_HEURISTIC_MOOD) || '0.65'),
  llmLow: parseFloat(((_Constants$expoConfig2 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig2 = _Constants$expoConfig2.extra) == null ? void 0 : _Constants$expoConfig2.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_LOW) || '0.60'),
  llmComplex: parseFloat(((_Constants$expoConfig3 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig3 = _Constants$expoConfig3.extra) == null ? void 0 : _Constants$expoConfig3.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_COMPLEX) || '0.80'),
  textLength: parseInt(((_Constants$expoConfig4 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig4 = _Constants$expoConfig4.extra) == null ? void 0 : _Constants$expoConfig4.EXPO_PUBLIC_AI_TEXT_LENGTH_THRESHOLD) || '280')
};
function needsLLMAnalysis(params) {
  var decision = makeGatingDecision(params);
  if (__DEV__) {
    console.log('🔍 LLM Gating Decision:', {
      needsLLM: decision.needsLLM,
      reason: decision.reason,
      params: {
        class: params.quickClass,
        confidence: params.heuristicConfidence,
        textLen: params.textLen
      }
    });
  }
  return decision.needsLLM;
}
function makeGatingDecision(params) {
  if (['MOOD', 'BREATHWORK'].includes(params.quickClass)) {
    if (params.heuristicConfidence >= THRESHOLDS.heuristicMoodBreathwork) {
      return {
        needsLLM: false,
        reason: 'high_confidence_simple_class',
        confidence: params.heuristicConfidence
      };
    }
  }
  if (params.textLen > THRESHOLDS.textLength && params.heuristicConfidence < THRESHOLDS.llmComplex) {
    return {
      needsLLM: true,
      reason: 'complex_text_low_confidence',
      confidence: params.heuristicConfidence,
      suggestedTimeout: 5000
    };
  }
  if (params.heuristicConfidence < THRESHOLDS.llmLow) {
    return {
      needsLLM: true,
      reason: 'very_low_confidence',
      confidence: params.heuristicConfidence,
      suggestedTimeout: 3000
    };
  }
  if (params.lastSimilarHashAt) {
    var hoursSinceLastSimilar = (Date.now() - params.lastSimilarHashAt) / (1000 * 60 * 60);
    if (hoursSinceLastSimilar < 1) {
      return {
        needsLLM: false,
        reason: 'recent_similar_request',
        confidence: params.heuristicConfidence
      };
    }
  }
  if (['CBT', 'OCD', 'Terapi'].includes(params.quickClass)) {
    if (params.heuristicConfidence < THRESHOLDS.llmComplex) {
      return {
        needsLLM: true,
        reason: 'therapeutic_class_medium_confidence',
        confidence: params.heuristicConfidence,
        suggestedTimeout: 4000
      };
    }
  }
  if (params.userPreference === 'simple') {
    return {
      needsLLM: false,
      reason: 'user_prefers_simple',
      confidence: params.heuristicConfidence
    };
  }
  if (params.userPreference === 'advanced' && params.heuristicConfidence < 0.9) {
    return {
      needsLLM: true,
      reason: 'user_prefers_advanced',
      confidence: params.heuristicConfidence,
      suggestedTimeout: 5000
    };
  }
  if (params.contextImportance === 'high' && params.heuristicConfidence < 0.85) {
    return {
      needsLLM: true,
      reason: 'high_context_importance',
      confidence: params.heuristicConfidence,
      suggestedTimeout: 5000
    };
  }
  if (params.hasComplexPatterns) {
    return {
      needsLLM: true,
      reason: 'complex_patterns_detected',
      confidence: params.heuristicConfidence,
      suggestedTimeout: 4000
    };
  }
  return {
    needsLLM: false,
    reason: 'default_sufficient_confidence',
    confidence: params.heuristicConfidence
  };
}
function hasComplexPatterns(text) {
  var patterns = [/(?:asla|her zaman|kesin|imkansız).*(?:asla|her zaman|kesin|imkansız)/i, /(?:ama|fakat|ancak|yine de).*(?:ama|fakat|ancak|yine de)/i, /(?:takıntı|kontrol|temizlik).*(?:takıntı|kontrol|temizlik)/i, /(?:üzgün|kızgın|endişeli).*(?:mutlu|rahat|huzurlu)/i, /\?.*\?/];
  return patterns.some(function (pattern) {
    return pattern.test(text);
  });
}
function calculateTextComplexity(text) {
  var score = 0;
  if (text.length > 100) score += 0.2;
  if (text.length > 200) score += 0.2;
  if (text.length > 400) score += 0.2;
  var sentences = text.split(/[.!?]+/).filter(function (s) {
    return s.trim().length > 0;
  });
  if (sentences.length > 3) score += 0.2;
  if (hasComplexPatterns(text)) score += 0.2;
  return Math.min(score, 1);
}
function isTimeSensitive(quickClass, keywords) {
  var urgentKeywords = ['acil', 'hemen', 'şimdi', 'yardım', 'panik'];
  var hasUrgentKeyword = keywords.some(function (k) {
    return urgentKeywords.includes(k.toLowerCase());
  });
  var urgentClasses = ['Terapi', 'BREATHWORK'];
  var isUrgentClass = urgentClasses.includes(quickClass);
  return hasUrgentKeyword || isUrgentClass;
}
var _default = exports.default = needsLLMAnalysis;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,