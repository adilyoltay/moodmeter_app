{"version":3,"names":["_expoConstants","_interopRequireDefault","require","_Constants$expoConfig","_Constants$expoConfig2","_Constants$expoConfig3","_Constants$expoConfig4","THRESHOLDS","heuristicMoodBreathwork","parseFloat","Constants","expoConfig","extra","EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_HEURISTIC_MOOD","llmLow","EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_LOW","llmComplex","EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_COMPLEX","textLength","parseInt","EXPO_PUBLIC_AI_TEXT_LENGTH_THRESHOLD","needsLLMAnalysis","params","decision","makeGatingDecision","__DEV__","console","log","needsLLM","reason","class","quickClass","confidence","heuristicConfidence","textLen","includes","suggestedTimeout","lastSimilarHashAt","hoursSinceLastSimilar","Date","now","userPreference","contextImportance","hasComplexPatterns","text","patterns","some","pattern","test","calculateTextComplexity","score","length","sentences","split","filter","s","trim","Math","min","isTimeSensitive","keywords","urgentKeywords","hasUrgentKeyword","k","toLowerCase","urgentClasses","isUrgentClass","_default","exports","default"],"sources":["needsLLMAnalysis.ts"],"sourcesContent":["/**\n * 🎯 LLM Gating Logic - Deterministic rules for when to use LLM\n * \n * This module implements smart gating logic to determine when LLM analysis\n * is truly needed vs when heuristics are sufficient.\n * \n * Decision factors:\n * - Quick class type\n * - Heuristic confidence level\n * - Text complexity/length\n * - Recent similar requests\n * \n * @module needsLLMAnalysis\n * @since v1.0.0\n */\n\nimport { QuickClass } from './CoreAnalysisService';\nimport Constants from 'expo-constants';\n\n// =============================================================================\n// 🔧 CONFIGURATION\n// =============================================================================\n\n/**\n * Gating thresholds from environment\n */\nconst THRESHOLDS = {\n  heuristicMoodBreathwork: parseFloat(\n    Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_HEURISTIC_MOOD || '0.65'\n  ),\n  llmLow: parseFloat(\n    Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_LOW || '0.60'\n  ),\n  llmComplex: parseFloat(\n    Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_COMPLEX || '0.80'\n  ),\n  textLength: parseInt(\n    Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_TEXT_LENGTH_THRESHOLD || '280'\n  ),\n};\n\n// =============================================================================\n// 🎯 GATING PARAMETERS\n// =============================================================================\n\n/**\n * Parameters for LLM gating decision\n */\nexport interface LLMGatingParams {\n  quickClass: QuickClass;\n  heuristicConfidence: number;\n  textLen: number;\n  lastSimilarHashAt?: number;\n  hasComplexPatterns?: boolean;\n  userPreference?: 'simple' | 'balanced' | 'advanced';\n  contextImportance?: 'low' | 'medium' | 'high';\n}\n\n/**\n * Gating decision result\n */\nexport interface GatingDecision {\n  needsLLM: boolean;\n  reason: string;\n  confidence: number;\n  suggestedTimeout?: number;\n}\n\n// =============================================================================\n// 🎯 MAIN GATING FUNCTION\n// =============================================================================\n\n/**\n * Determine if LLM analysis is needed based on deterministic rules\n * \n * @param params - Gating parameters\n * @returns boolean - true if LLM should be used\n */\nexport function needsLLMAnalysis(params: LLMGatingParams): boolean {\n  const decision = makeGatingDecision(params);\n  \n  // Log decision for telemetry\n  if (__DEV__) {\n    console.log('🔍 LLM Gating Decision:', {\n      needsLLM: decision.needsLLM,\n      reason: decision.reason,\n      params: {\n        class: params.quickClass,\n        confidence: params.heuristicConfidence,\n        textLen: params.textLen,\n      },\n    });\n  }\n  \n  return decision.needsLLM;\n}\n\n/**\n * Make detailed gating decision with reasoning\n * \n * @param params - Gating parameters\n * @returns GatingDecision - Detailed decision with reasoning\n */\nexport function makeGatingDecision(params: LLMGatingParams): GatingDecision {\n  // Rule 1: Simple MOOD and BREATHWORK with high confidence don't need LLM\n  if (['MOOD', 'BREATHWORK'].includes(params.quickClass)) {\n    if (params.heuristicConfidence >= THRESHOLDS.heuristicMoodBreathwork) {\n      return {\n        needsLLM: false,\n        reason: 'high_confidence_simple_class',\n        confidence: params.heuristicConfidence,\n      };\n    }\n  }\n  \n  // Rule 2: Long complex text with low confidence needs LLM\n  if (params.textLen > THRESHOLDS.textLength && \n      params.heuristicConfidence < THRESHOLDS.llmComplex) {\n    return {\n      needsLLM: true,\n      reason: 'complex_text_low_confidence',\n      confidence: params.heuristicConfidence,\n      suggestedTimeout: 5000, // 5 seconds for complex analysis\n    };\n  }\n  \n  // Rule 3: Very low confidence always needs LLM\n  if (params.heuristicConfidence < THRESHOLDS.llmLow) {\n    return {\n      needsLLM: true,\n      reason: 'very_low_confidence',\n      confidence: params.heuristicConfidence,\n      suggestedTimeout: 3000,\n    };\n  }\n  \n  // Rule 4: Recent similar request doesn't need LLM (deduplication)\n  if (params.lastSimilarHashAt) {\n    const hoursSinceLastSimilar = (Date.now() - params.lastSimilarHashAt) / (1000 * 60 * 60);\n    if (hoursSinceLastSimilar < 1) {\n      return {\n        needsLLM: false,\n        reason: 'recent_similar_request',\n        confidence: params.heuristicConfidence,\n      };\n    }\n  }\n  \n  // Rule 5: CBT, OCD, Terapi with medium confidence need LLM\n  if (['CBT', 'OCD', 'Terapi'].includes(params.quickClass)) {\n    if (params.heuristicConfidence < THRESHOLDS.llmComplex) {\n      return {\n        needsLLM: true,\n        reason: 'therapeutic_class_medium_confidence',\n        confidence: params.heuristicConfidence,\n        suggestedTimeout: 4000,\n      };\n    }\n  }\n  \n  // Rule 6: User preference override\n  if (params.userPreference === 'simple') {\n    return {\n      needsLLM: false,\n      reason: 'user_prefers_simple',\n      confidence: params.heuristicConfidence,\n    };\n  }\n  \n  if (params.userPreference === 'advanced' && params.heuristicConfidence < 0.9) {\n    return {\n      needsLLM: true,\n      reason: 'user_prefers_advanced',\n      confidence: params.heuristicConfidence,\n      suggestedTimeout: 5000,\n    };\n  }\n  \n  // Rule 7: High context importance override\n  if (params.contextImportance === 'high' && params.heuristicConfidence < 0.85) {\n    return {\n      needsLLM: true,\n      reason: 'high_context_importance',\n      confidence: params.heuristicConfidence,\n      suggestedTimeout: 5000,\n    };\n  }\n  \n  // Rule 8: Complex patterns detected\n  if (params.hasComplexPatterns) {\n    return {\n      needsLLM: true,\n      reason: 'complex_patterns_detected',\n      confidence: params.heuristicConfidence,\n      suggestedTimeout: 4000,\n    };\n  }\n  \n  // Default: Don't use LLM if we have reasonable confidence\n  return {\n    needsLLM: false,\n    reason: 'default_sufficient_confidence',\n    confidence: params.heuristicConfidence,\n  };\n}\n\n// =============================================================================\n// 🔧 HELPER FUNCTIONS\n// =============================================================================\n\n/**\n * Check if text contains complex patterns that warrant LLM analysis\n * \n * @param text - Text to analyze\n * @returns boolean - true if complex patterns detected\n */\nexport function hasComplexPatterns(text: string): boolean {\n  const patterns = [\n    // Multiple cognitive distortions\n    /(?:asla|her zaman|kesin|imkansız).*(?:asla|her zaman|kesin|imkansız)/i,\n    \n    // Contradictions\n    /(?:ama|fakat|ancak|yine de).*(?:ama|fakat|ancak|yine de)/i,\n    \n    // Multiple symptoms\n    /(?:takıntı|kontrol|temizlik).*(?:takıntı|kontrol|temizlik)/i,\n    \n    // Emotional complexity\n    /(?:üzgün|kızgın|endişeli).*(?:mutlu|rahat|huzurlu)/i,\n    \n    // Question patterns\n    /\\?.*\\?/,\n  ];\n  \n  return patterns.some(pattern => pattern.test(text));\n}\n\n/**\n * Calculate text complexity score\n * \n * @param text - Text to analyze\n * @returns number - Complexity score (0-1)\n */\nexport function calculateTextComplexity(text: string): number {\n  let score = 0;\n  \n  // Length factor\n  if (text.length > 100) score += 0.2;\n  if (text.length > 200) score += 0.2;\n  if (text.length > 400) score += 0.2;\n  \n  // Sentence count\n  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n  if (sentences.length > 3) score += 0.2;\n  \n  // Complex patterns\n  if (hasComplexPatterns(text)) score += 0.2;\n  \n  return Math.min(score, 1);\n}\n\n/**\n * Determine if request is time-sensitive\n * \n * @param quickClass - Classification\n * @param keywords - Keywords in text\n * @returns boolean - true if time-sensitive\n */\nexport function isTimeSensitive(quickClass: QuickClass, keywords: string[]): boolean {\n  const urgentKeywords = ['acil', 'hemen', 'şimdi', 'yardım', 'panik'];\n  const hasUrgentKeyword = keywords.some(k => urgentKeywords.includes(k.toLowerCase()));\n  \n  const urgentClasses: QuickClass[] = ['Terapi', 'BREATHWORK'];\n  const isUrgentClass = urgentClasses.includes(quickClass);\n  \n  return hasUrgentKeyword || isUrgentClass;\n}\n\n// =============================================================================\n// 🚀 EXPORTS\n// =============================================================================\n\nexport default needsLLMAnalysis;\nexport type { LLMGatingParams, GatingDecision };\n"],"mappings":"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","ignoreList":[]}