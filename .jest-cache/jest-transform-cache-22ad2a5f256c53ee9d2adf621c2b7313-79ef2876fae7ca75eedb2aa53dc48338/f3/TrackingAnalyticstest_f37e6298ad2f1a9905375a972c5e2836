57ab5766c01d2fb836238dc1d45d7ed6
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry");
_getJestObj().mock("../../services/supabase");
_getJestObj().mock("../../constants/featureFlags", function () {
  return {
    FEATURE_FLAGS: {
      isEnabled: jest.fn(function (flag) {
        if (flag === 'AI_UNIFIED_PIPELINE') return true;
        return false;
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _UnifiedAIPipeline = require("../../features/ai/core/UnifiedAIPipeline");
var _qualityRibbonFixtures = require("../fixtures/qualityRibbonFixtures");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Tracking Analytics Integration', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    (0, _qualityRibbonFixtures.mockDateNow)(1640995200000);
  });
  describe('Daily Pattern Analysis', function () {
    it('should group compulsions by day correctly', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-01T15:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-01T20:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-02T09:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-02T14:00:00Z'
      }, {
        type: 'organizing',
        timestamp: '2022-01-03T11:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics = result.analytics) == null ? void 0 : _result$analytics.tracking).toMatchObject({
        sampleSize: 6,
        volatility: expect.any(Number),
        weeklyDelta: expect.any(Number),
        confidence: expect.any(Number),
        baselines: {
          compulsions: expect.any(Number)
        }
      });
      expect(result.analytics.tracking.baselines.compulsions).toBeCloseTo(2.0, 1);
    }));
    it('should handle single-day data', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics2, _result$analytics3, _result$analytics4;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-01T15:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-01T20:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics2 = result.analytics) == null || (_result$analytics2 = _result$analytics2.tracking) == null ? void 0 : _result$analytics2.sampleSize).toBe(3);
      expect((_result$analytics3 = result.analytics) == null || (_result$analytics3 = _result$analytics3.tracking) == null ? void 0 : _result$analytics3.volatility).toBe(0);
      expect((_result$analytics4 = result.analytics) == null || (_result$analytics4 = _result$analytics4.tracking) == null || (_result$analytics4 = _result$analytics4.baselines) == null ? void 0 : _result$analytics4.compulsions).toBe(3);
    }));
    it('should skip analytics for empty data', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics5;
      var compulsions = [];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics5 = result.analytics) == null ? void 0 : _result$analytics5.tracking).toBeUndefined();
    }));
  });
  describe('Volatility Calculation', function () {
    it('should calculate daily count volatility correctly', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics6;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-02T09:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-02T11:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-02T13:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-02T15:00:00Z'
      }, {
        type: 'organizing',
        timestamp: '2022-01-02T17:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-03T14:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-03T16:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics6 = result.analytics) == null || (_result$analytics6 = _result$analytics6.tracking) == null ? void 0 : _result$analytics6.volatility).toBeCloseTo(1.7, 1);
    }));
    it('should handle consistent daily patterns (low volatility)', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics7;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-01T15:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-01T20:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-02T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-02T15:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-02T20:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-03T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-03T15:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-03T20:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics7 = result.analytics) == null || (_result$analytics7 = _result$analytics7.tracking) == null ? void 0 : _result$analytics7.volatility).toBe(0);
    }));
  });
  describe('Weekly Delta Trends', function () {
    it('should calculate weekly trend correctly', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics8;
      var baseTimestamp = Date.now();
      var recentCompulsions = [{
        type: 'washing',
        timestamp: new Date(baseTimestamp - 1 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'checking',
        timestamp: new Date(baseTimestamp - 1 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'counting',
        timestamp: new Date(baseTimestamp - 1 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'washing',
        timestamp: new Date(baseTimestamp - 2 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'checking',
        timestamp: new Date(baseTimestamp - 2 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'counting',
        timestamp: new Date(baseTimestamp - 3 * 24 * 60 * 60 * 1000).toISOString()
      }];
      var olderCompulsions = [{
        type: 'washing',
        timestamp: new Date(baseTimestamp - 4 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'checking',
        timestamp: new Date(baseTimestamp - 5 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'counting',
        timestamp: new Date(baseTimestamp - 6 * 24 * 60 * 60 * 1000).toISOString()
      }];
      var compulsions = [].concat(recentCompulsions, olderCompulsions);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics8 = result.analytics) == null || (_result$analytics8 = _result$analytics8.tracking) == null ? void 0 : _result$analytics8.weeklyDelta).toBeCloseTo(1.0, 1);
    }));
    it('should show negative delta for improving (decreasing) trend', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics9;
      var baseTimestamp = Date.now();
      var recentCompulsions = [{
        type: 'washing',
        timestamp: new Date(baseTimestamp - 1 * 24 * 60 * 60 * 1000).toISOString()
      }];
      var olderCompulsions = [{
        type: 'washing',
        timestamp: new Date(baseTimestamp - 4 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'checking',
        timestamp: new Date(baseTimestamp - 4 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'counting',
        timestamp: new Date(baseTimestamp - 4 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'washing',
        timestamp: new Date(baseTimestamp - 5 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'checking',
        timestamp: new Date(baseTimestamp - 5 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'washing',
        timestamp: new Date(baseTimestamp - 6 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        type: 'checking',
        timestamp: new Date(baseTimestamp - 6 * 24 * 60 * 60 * 1000).toISOString()
      }];
      var compulsions = [].concat(recentCompulsions, olderCompulsions);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics9 = result.analytics) == null || (_result$analytics9 = _result$analytics9.tracking) == null ? void 0 : _result$analytics9.weeklyDelta).toBeLessThan(0);
    }));
    it('should handle insufficient data for weekly comparison', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics0;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-01T15:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics0 = result.analytics) == null || (_result$analytics0 = _result$analytics0.tracking) == null ? void 0 : _result$analytics0.weeklyDelta).toBe(0);
    }));
  });
  describe('Confidence Calculation', function () {
    it('should scale confidence based on sample size', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        compulsionCount: 5,
        expectedConfidenceRange: [0.50, 0.60]
      }, {
        compulsionCount: 15,
        expectedConfidenceRange: [0.65, 0.75]
      }, {
        compulsionCount: 30,
        expectedConfidenceRange: [0.70, 0.80]
      }, {
        compulsionCount: 100,
        expectedConfidenceRange: [0.80, 0.80]
      }];
      for (var testCase of testCases) {
        var _result$analytics1;
        var compulsions = (0, _qualityRibbonFixtures.generateCompulsions)(testCase.compulsionCount);
        var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
          userId: 'test-user',
          content: {
            compulsions: compulsions
          },
          type: 'data',
          context: {
            source: 'today'
          }
        });
        var confidence = ((_result$analytics1 = result.analytics) == null || (_result$analytics1 = _result$analytics1.tracking) == null ? void 0 : _result$analytics1.confidence) || 0;
        expect(confidence).toBeGreaterThanOrEqual(testCase.expectedConfidenceRange[0]);
        expect(confidence).toBeLessThanOrEqual(testCase.expectedConfidenceRange[1]);
      }
    }));
    it('should use conservative confidence scaling for tracking', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics10;
      var compulsions = (0, _qualityRibbonFixtures.generateCompulsions)(10);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics10 = result.analytics) == null || (_result$analytics10 = _result$analytics10.tracking) == null ? void 0 : _result$analytics10.confidence).toBeLessThan(0.8);
    }));
  });
  describe('Baseline Calculation', function () {
    it('should calculate daily average baseline correctly', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics11;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-01T12:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-01T15:00:00Z'
      }, {
        type: 'organizing',
        timestamp: '2022-01-01T18:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-02T11:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-02T16:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-03T09:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-03T11:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-03T13:00:00Z'
      }, {
        type: 'organizing',
        timestamp: '2022-01-03T15:00:00Z'
      }, {
        type: 'washing',
        timestamp: '2022-01-03T17:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-03T19:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics11 = result.analytics) == null || (_result$analytics11 = _result$analytics11.tracking) == null || (_result$analytics11 = _result$analytics11.baselines) == null ? void 0 : _result$analytics11.compulsions).toBeCloseTo(4.0, 1);
    }));
    it('should round baseline to one decimal place', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics12;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-02T11:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-02T16:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics12 = result.analytics) == null || (_result$analytics12 = _result$analytics12.tracking) == null || (_result$analytics12 = _result$analytics12.baselines) == null ? void 0 : _result$analytics12.compulsions).toBe(1.5);
    }));
  });
  describe('Quality Ribbon Integration', function () {
    it('should provide data for high-quality ribbon with rich dataset', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics13;
      var compulsions = (0, _qualityRibbonFixtures.generateCompulsions)(50);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics13 = result.analytics) == null ? void 0 : _result$analytics13.tracking).toMatchObject({
        sampleSize: 50,
        confidence: expect.any(Number),
        dataQuality: expect.any(Number)
      });
      expect(result.analytics.tracking.sampleSize).toBeGreaterThan(20);
      expect(result.analytics.tracking.confidence).toBeGreaterThan(0.7);
    }));
    it('should provide medium quality data for moderate dataset', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics14, _result$analytics15, _result$analytics16;
      var compulsions = (0, _qualityRibbonFixtures.generateCompulsions)(12);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics14 = result.analytics) == null || (_result$analytics14 = _result$analytics14.tracking) == null ? void 0 : _result$analytics14.confidence).toBeGreaterThan(0.5);
      expect((_result$analytics15 = result.analytics) == null || (_result$analytics15 = _result$analytics15.tracking) == null ? void 0 : _result$analytics15.confidence).toBeLessThan(0.8);
      expect((_result$analytics16 = result.analytics) == null || (_result$analytics16 = _result$analytics16.tracking) == null ? void 0 : _result$analytics16.sampleSize).toBe(12);
    }));
  });
  describe('Edge Cases', function () {
    it('should handle compulsions without timestamps', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics17;
      var compulsions = [{
        type: 'washing'
      }, {
        type: 'checking',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'counting'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics17 = result.analytics) == null || (_result$analytics17 = _result$analytics17.tracking) == null ? void 0 : _result$analytics17.sampleSize).toBe(3);
    }));
    it('should handle extreme daily variations', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics18, _result$analytics19;
      var compulsions = [].concat((0, _toConsumableArray2.default)(Array.from({
        length: 20
      }, function (_, i) {
        return {
          type: 'washing',
          timestamp: `2022-01-02T${String(i % 24).padStart(2, '0')}:00:00Z`
        };
      })), [{
        type: 'checking',
        timestamp: '2022-01-03T10:00:00Z'
      }]);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics18 = result.analytics) == null || (_result$analytics18 = _result$analytics18.tracking) == null ? void 0 : _result$analytics18.volatility).toBeGreaterThan(5);
      expect((_result$analytics19 = result.analytics) == null || (_result$analytics19 = _result$analytics19.tracking) == null ? void 0 : _result$analytics19.sampleSize).toBe(21);
    }));
    it('should handle identical timestamps', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics20, _result$analytics21;
      var compulsions = [{
        type: 'washing',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'checking',
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        type: 'counting',
        timestamp: '2022-01-01T10:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: compulsions
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics20 = result.analytics) == null || (_result$analytics20 = _result$analytics20.tracking) == null || (_result$analytics20 = _result$analytics20.baselines) == null ? void 0 : _result$analytics20.compulsions).toBe(3);
      expect((_result$analytics21 = result.analytics) == null || (_result$analytics21 = _result$analytics21.tracking) == null ? void 0 : _result$analytics21.volatility).toBe(0);
    }));
  });
  describe('Performance', function () {
    it('should process large tracking datasets efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics22;
      var largeCompulsionDataset = (0, _qualityRibbonFixtures.generateCompulsions)(2000);
      var startTime = Date.now();
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: largeCompulsionDataset
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      var endTime = Date.now();
      var processingTime = endTime - startTime;
      expect(processingTime).toBeLessThan(1500);
      expect((_result$analytics22 = result.analytics) == null ? void 0 : _result$analytics22.tracking).toBeDefined();
    }));
    it('should handle memory efficiently with large datasets', (0, _asyncToGenerator2.default)(function* () {
      var massiveDataset = (0, _qualityRibbonFixtures.generateCompulsions)(10000);
      yield expect(_UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          compulsions: massiveDataset
        },
        type: 'data',
        context: {
          source: 'today'
        }
      })).resolves.not.toThrow();
    }));
  });
  describe('Integration with Other Analytics', function () {
    it('should work alongside mood and CBT analytics', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics23, _result$analytics24;
      var mixedData = {
        compulsions: (0, _qualityRibbonFixtures.generateCompulsions)(10),
        cbtRecords: [{
          mood_before: 3,
          mood_after: 7
        }, {
          mood_before: 4,
          mood_after: 8
        }],
        moodEntries: [{
          mood: 5,
          timestamp: '2022-01-01T10:00:00Z'
        }, {
          mood: 7,
          timestamp: '2022-01-01T15:00:00Z'
        }]
      };
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: mixedData,
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics23 = result.analytics) == null ? void 0 : _result$analytics23.tracking).toBeDefined();
      expect((_result$analytics24 = result.analytics) == null ? void 0 : _result$analytics24.cbt).toBeDefined();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,