18c02bd01b88047109c9b353c2cb03c3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByHintTextQueries = void 0;
var _findAll = require("../helpers/find-all");
var _matches = require("../matches");
var _makeQueries = require("./make-queries");
var getNodeByHintText = function getNodeByHintText(node, text) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  return (0, _matches.matches)(text, node.props.accessibilityHint, normalizer, exact);
};
var queryAllByHintText = function queryAllByHintText(instance) {
  return function queryAllByA11yHintFn(hint, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return getNodeByHintText(node, hint, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(hint) {
  return `Found multiple elements with accessibility hint: ${String(hint)} `;
};
var getMissingError = function getMissingError(hint) {
  return `Unable to find an element with accessibility hint: ${String(hint)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByHintText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByHintTextQueries = function bindByHintTextQueries(instance) {
  var getByHintText = getBy(instance);
  var getAllByHintText = getAllBy(instance);
  var queryByHintText = queryBy(instance);
  var queryAllByHintText = queryAllBy(instance);
  var findByHintText = findBy(instance);
  var findAllByHintText = findAllBy(instance);
  return {
    getByHintText: getByHintText,
    getAllByHintText: getAllByHintText,
    queryByHintText: queryByHintText,
    queryAllByHintText: queryAllByHintText,
    findByHintText: findByHintText,
    findAllByHintText: findAllByHintText,
    getByA11yHint: getByHintText,
    getAllByA11yHint: getAllByHintText,
    queryByA11yHint: queryByHintText,
    queryAllByA11yHint: queryAllByHintText,
    findByA11yHint: findByHintText,
    findAllByA11yHint: findAllByHintText,
    getByAccessibilityHint: getByHintText,
    getAllByAccessibilityHint: getAllByHintText,
    queryByAccessibilityHint: queryByHintText,
    queryAllByAccessibilityHint: queryAllByHintText,
    findByAccessibilityHint: findByHintText,
    findAllByAccessibilityHint: findAllByHintText
  };
};
exports.bindByHintTextQueries = bindByHintTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,