2e345bacab590b76985d286a0f1d8582
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeChecked = toBeChecked;
var _jestMatcherUtils = require("jest-matcher-utils");
var _redent = _interopRequireDefault(require("redent"));
var _accessibility = require("../helpers/accessibility");
var _errors = require("../helpers/errors");
var _formatElement = require("../helpers/format-element");
var _hostComponentNames = require("../helpers/host-component-names");
var _utils = require("./utils");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function toBeChecked(element) {
  var _this = this;
  (0, _utils.checkHostElement)(element, toBeChecked, this);
  if (!(0, _hostComponentNames.isHostSwitch)(element) && !isSupportedAccessibilityElement(element)) {
    throw new _errors.ErrorWithStack(`toBeChecked() works only on host "Switch" elements or accessibility elements with "checkbox", "radio" or "switch" role.`, toBeChecked);
  }
  return {
    pass: (0, _accessibility.computeAriaChecked)(element) === true,
    message: function message() {
      var is = _this.isNot ? 'is' : 'is not';
      return [(0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toBeChecked`, 'element', ''), '', `Received element ${is} checked:`, (0, _redent.default)((0, _formatElement.formatElement)(element), 2)].join('\n');
    }
  };
}
function isSupportedAccessibilityElement(element) {
  if (!(0, _accessibility.isAccessibilityElement)(element)) {
    return false;
  }
  var role = (0, _accessibility.getRole)(element);
  return _accessibility.rolesSupportingCheckedState[role];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdE1hdGNoZXJVdGlscyIsInJlcXVpcmUiLCJfcmVkZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hY2Nlc3NpYmlsaXR5IiwiX2Vycm9ycyIsIl9mb3JtYXRFbGVtZW50IiwiX2hvc3RDb21wb25lbnROYW1lcyIsIl91dGlscyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRvQmVDaGVja2VkIiwiZWxlbWVudCIsIl90aGlzIiwiY2hlY2tIb3N0RWxlbWVudCIsImlzSG9zdFN3aXRjaCIsImlzU3VwcG9ydGVkQWNjZXNzaWJpbGl0eUVsZW1lbnQiLCJFcnJvcldpdGhTdGFjayIsInBhc3MiLCJjb21wdXRlQXJpYUNoZWNrZWQiLCJtZXNzYWdlIiwiaXMiLCJpc05vdCIsIm1hdGNoZXJIaW50IiwiZm9ybWF0RWxlbWVudCIsImpvaW4iLCJpc0FjY2Vzc2liaWxpdHlFbGVtZW50Iiwicm9sZSIsImdldFJvbGUiLCJyb2xlc1N1cHBvcnRpbmdDaGVja2VkU3RhdGUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0Y2hlcnMvdG8tYmUtY2hlY2tlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBtYXRjaGVySGludCB9IGZyb20gJ2plc3QtbWF0Y2hlci11dGlscyc7XG5pbXBvcnQgcmVkZW50IGZyb20gJ3JlZGVudCc7XG5cbmltcG9ydCB7XG4gIGNvbXB1dGVBcmlhQ2hlY2tlZCxcbiAgZ2V0Um9sZSxcbiAgaXNBY2Nlc3NpYmlsaXR5RWxlbWVudCxcbiAgcm9sZXNTdXBwb3J0aW5nQ2hlY2tlZFN0YXRlLFxufSBmcm9tICcuLi9oZWxwZXJzL2FjY2Vzc2liaWxpdHknO1xuaW1wb3J0IHsgRXJyb3JXaXRoU3RhY2sgfSBmcm9tICcuLi9oZWxwZXJzL2Vycm9ycyc7XG5pbXBvcnQgeyBmb3JtYXRFbGVtZW50IH0gZnJvbSAnLi4vaGVscGVycy9mb3JtYXQtZWxlbWVudCc7XG5pbXBvcnQgeyBpc0hvc3RTd2l0Y2ggfSBmcm9tICcuLi9oZWxwZXJzL2hvc3QtY29tcG9uZW50LW5hbWVzJztcbmltcG9ydCB7IGNoZWNrSG9zdEVsZW1lbnQgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQmVDaGVja2VkKHRoaXM6IGplc3QuTWF0Y2hlckNvbnRleHQsIGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlKSB7XG4gIGNoZWNrSG9zdEVsZW1lbnQoZWxlbWVudCwgdG9CZUNoZWNrZWQsIHRoaXMpO1xuXG4gIGlmICghaXNIb3N0U3dpdGNoKGVsZW1lbnQpICYmICFpc1N1cHBvcnRlZEFjY2Vzc2liaWxpdHlFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yV2l0aFN0YWNrKFxuICAgICAgYHRvQmVDaGVja2VkKCkgd29ya3Mgb25seSBvbiBob3N0IFwiU3dpdGNoXCIgZWxlbWVudHMgb3IgYWNjZXNzaWJpbGl0eSBlbGVtZW50cyB3aXRoIFwiY2hlY2tib3hcIiwgXCJyYWRpb1wiIG9yIFwic3dpdGNoXCIgcm9sZS5gLFxuICAgICAgdG9CZUNoZWNrZWQsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFzczogY29tcHV0ZUFyaWFDaGVja2VkKGVsZW1lbnQpID09PSB0cnVlLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzID0gdGhpcy5pc05vdCA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbXG4gICAgICAgIG1hdGNoZXJIaW50KGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZUNoZWNrZWRgLCAnZWxlbWVudCcsICcnKSxcbiAgICAgICAgJycsXG4gICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IGNoZWNrZWQ6YCxcbiAgICAgICAgcmVkZW50KGZvcm1hdEVsZW1lbnQoZWxlbWVudCksIDIpLFxuICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc1N1cHBvcnRlZEFjY2Vzc2liaWxpdHlFbGVtZW50KGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlKSB7XG4gIGlmICghaXNBY2Nlc3NpYmlsaXR5RWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHJvbGUgPSBnZXRSb2xlKGVsZW1lbnQpO1xuICByZXR1cm4gcm9sZXNTdXBwb3J0aW5nQ2hlY2tlZFN0YXRlW3JvbGVdO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxpQkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsY0FBQSxHQUFBSCxPQUFBO0FBTUEsSUFBQUksT0FBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssY0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sbUJBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLE1BQUEsR0FBQVAsT0FBQTtBQUEyQyxTQUFBRSx1QkFBQU0sQ0FBQTtFQUFBLE9BQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFFcEMsU0FBU0csV0FBV0EsQ0FBNEJDLE9BQTBCLEVBQUU7RUFBQSxJQUFBQyxLQUFBO0VBQ2pGLElBQUFOLE1BQUEsQ0FBQU8sZ0JBQWdCLEVBQUNGLE9BQU8sRUFBRUQsV0FBVyxFQUFFLElBQUksQ0FBQztFQUU1QyxJQUFJLENBQUMsSUFBQUwsbUJBQUEsQ0FBQVMsWUFBWSxFQUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDSSwrQkFBK0IsQ0FBQ0osT0FBTyxDQUFDLEVBQUU7SUFDdkUsTUFBTSxJQUFJUixPQUFBLENBQUFhLGNBQWMsQ0FDdEIseUhBQXlILEVBQ3pITixXQUNGLENBQUM7RUFDSDtFQUVBLE9BQU87SUFDTE8sSUFBSSxFQUFFLElBQUFmLGNBQUEsQ0FBQWdCLGtCQUFrQixFQUFDUCxPQUFPLENBQUMsS0FBSyxJQUFJO0lBQzFDUSxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQSxFQUFRO01BQ2IsSUFBTUMsRUFBRSxHQUFHUixLQUFJLENBQUNTLEtBQUssR0FBRyxJQUFJLEdBQUcsUUFBUTtNQUN2QyxPQUFPLENBQ0wsSUFBQXZCLGlCQUFBLENBQUF3QixXQUFXLEVBQUMsR0FBR1YsS0FBSSxDQUFDUyxLQUFLLEdBQUcsTUFBTSxHQUFHLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFDckUsRUFBRSxFQUNGLG9CQUFvQkQsRUFBRSxXQUFXLEVBQ2pDLElBQUFwQixPQUFBLENBQUFTLE9BQU0sRUFBQyxJQUFBTCxjQUFBLENBQUFtQixhQUFhLEVBQUNaLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNsQyxDQUFDYSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2Q7RUFDRixDQUFDO0FBQ0g7QUFFQSxTQUFTVCwrQkFBK0JBLENBQUNKLE9BQTBCLEVBQUU7RUFDbkUsSUFBSSxDQUFDLElBQUFULGNBQUEsQ0FBQXVCLHNCQUFzQixFQUFDZCxPQUFPLENBQUMsRUFBRTtJQUNwQyxPQUFPLEtBQUs7RUFDZDtFQUVBLElBQU1lLElBQUksR0FBRyxJQUFBeEIsY0FBQSxDQUFBeUIsT0FBTyxFQUFDaEIsT0FBTyxDQUFDO0VBQzdCLE9BQU9ULGNBQUEsQ0FBQTBCLDJCQUEyQixDQUFDRixJQUFJLENBQUM7QUFDMUMiLCJpZ25vcmVMaXN0IjpbXX0=