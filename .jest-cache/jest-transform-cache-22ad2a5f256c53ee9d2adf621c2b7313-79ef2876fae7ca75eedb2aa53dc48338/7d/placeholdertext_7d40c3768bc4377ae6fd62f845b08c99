83220773c028d98fc4bb434961d16c15
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByPlaceholderTextQueries = void 0;
var _findAll = require("../helpers/find-all");
var _hostComponentNames = require("../helpers/host-component-names");
var _matches = require("../matches");
var _makeQueries = require("./make-queries");
var matchPlaceholderText = function matchPlaceholderText(node, placeholder) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  return (0, _matches.matches)(placeholder, node.props.placeholder, normalizer, exact);
};
var queryAllByPlaceholderText = function queryAllByPlaceholderText(instance) {
  return function queryAllByPlaceholderFn(placeholder, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _hostComponentNames.isHostTextInput)(node) && matchPlaceholderText(node, placeholder, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(placeholder) {
  return `Found multiple elements with placeholder: ${String(placeholder)} `;
};
var getMissingError = function getMissingError(placeholder) {
  return `Unable to find an element with placeholder: ${String(placeholder)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByPlaceholderText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByPlaceholderTextQueries = function bindByPlaceholderTextQueries(instance) {
  return {
    getByPlaceholderText: getBy(instance),
    getAllByPlaceholderText: getAllBy(instance),
    queryByPlaceholderText: queryBy(instance),
    queryAllByPlaceholderText: queryAllBy(instance),
    findByPlaceholderText: findBy(instance),
    findAllByPlaceholderText: findAllBy(instance)
  };
};
exports.bindByPlaceholderTextQueries = bindByPlaceholderTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfaG9zdENvbXBvbmVudE5hbWVzIiwiX21hdGNoZXMiLCJfbWFrZVF1ZXJpZXMiLCJtYXRjaFBsYWNlaG9sZGVyVGV4dCIsIm5vZGUiLCJwbGFjZWhvbGRlciIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJtYXRjaGVzIiwicHJvcHMiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJGbiIsInF1ZXJ5T3B0aW9ucyIsImZpbmRBbGwiLCJpc0hvc3RUZXh0SW5wdXQiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwiX3JlZiIsIm1ha2VRdWVyaWVzIiwiZ2V0QnkiLCJnZXRBbGxCeSIsInF1ZXJ5QnkiLCJxdWVyeUFsbEJ5IiwiZmluZEJ5IiwiZmluZEFsbEJ5IiwiYmluZEJ5UGxhY2Vob2xkZXJUZXh0UXVlcmllcyIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQiLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL3BsYWNlaG9sZGVyLXRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5pbXBvcnQgeyBmaW5kQWxsIH0gZnJvbSAnLi4vaGVscGVycy9maW5kLWFsbCc7XG5pbXBvcnQgeyBpc0hvc3RUZXh0SW5wdXQgfSBmcm9tICcuLi9oZWxwZXJzL2hvc3QtY29tcG9uZW50LW5hbWVzJztcbmltcG9ydCB0eXBlIHsgVGV4dE1hdGNoLCBUZXh0TWF0Y2hPcHRpb25zIH0gZnJvbSAnLi4vbWF0Y2hlcyc7XG5pbXBvcnQgeyBtYXRjaGVzIH0gZnJvbSAnLi4vbWF0Y2hlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIEZpbmRBbGxCeVF1ZXJ5LFxuICBGaW5kQnlRdWVyeSxcbiAgR2V0QWxsQnlRdWVyeSxcbiAgR2V0QnlRdWVyeSxcbiAgUXVlcnlBbGxCeVF1ZXJ5LFxuICBRdWVyeUJ5UXVlcnksXG59IGZyb20gJy4vbWFrZS1xdWVyaWVzJztcbmltcG9ydCB7IG1ha2VRdWVyaWVzIH0gZnJvbSAnLi9tYWtlLXF1ZXJpZXMnO1xuaW1wb3J0IHR5cGUgeyBDb21tb25RdWVyeU9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuXG50eXBlIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucyA9IENvbW1vblF1ZXJ5T3B0aW9ucyAmIFRleHRNYXRjaE9wdGlvbnM7XG5cbmNvbnN0IG1hdGNoUGxhY2Vob2xkZXJUZXh0ID0gKFxuICBub2RlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgcGxhY2Vob2xkZXI6IFRleHRNYXRjaCxcbiAgb3B0aW9uczogVGV4dE1hdGNoT3B0aW9ucyA9IHt9LFxuKSA9PiB7XG4gIGNvbnN0IHsgZXhhY3QsIG5vcm1hbGl6ZXIgfSA9IG9wdGlvbnM7XG4gIHJldHVybiBtYXRjaGVzKHBsYWNlaG9sZGVyLCBub2RlLnByb3BzLnBsYWNlaG9sZGVyLCBub3JtYWxpemVyLCBleGFjdCk7XG59O1xuXG5jb25zdCBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gKFxuICBpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UsXG4pOiBRdWVyeUFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVBsYWNlaG9sZGVyVGV4dE9wdGlvbnM+ID0+XG4gIGZ1bmN0aW9uIHF1ZXJ5QWxsQnlQbGFjZWhvbGRlckZuKHBsYWNlaG9sZGVyLCBxdWVyeU9wdGlvbnMpIHtcbiAgICByZXR1cm4gZmluZEFsbChcbiAgICAgIGluc3RhbmNlLFxuICAgICAgKG5vZGUpID0+IGlzSG9zdFRleHRJbnB1dChub2RlKSAmJiBtYXRjaFBsYWNlaG9sZGVyVGV4dChub2RlLCBwbGFjZWhvbGRlciwgcXVlcnlPcHRpb25zKSxcbiAgICAgIHF1ZXJ5T3B0aW9ucyxcbiAgICApO1xuICB9O1xuXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKHBsYWNlaG9sZGVyOiBUZXh0TWF0Y2gpID0+XG4gIGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHBsYWNlaG9sZGVyOiAke1N0cmluZyhwbGFjZWhvbGRlcil9IGA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAocGxhY2Vob2xkZXI6IFRleHRNYXRjaCkgPT5cbiAgYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlcjogJHtTdHJpbmcocGxhY2Vob2xkZXIpfWA7XG5cbmNvbnN0IHsgZ2V0QnksIGdldEFsbEJ5LCBxdWVyeUJ5LCBxdWVyeUFsbEJ5LCBmaW5kQnksIGZpbmRBbGxCeSB9ID0gbWFrZVF1ZXJpZXMoXG4gIHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQsXG4gIGdldE1pc3NpbmdFcnJvcixcbiAgZ2V0TXVsdGlwbGVFcnJvcixcbik7XG5cbmV4cG9ydCB0eXBlIEJ5UGxhY2Vob2xkZXJUZXh0UXVlcmllcyA9IHtcbiAgZ2V0QnlQbGFjZWhvbGRlclRleHQ6IEdldEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVBsYWNlaG9sZGVyVGV4dE9wdGlvbnM+O1xuICBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dDogR2V0QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz47XG4gIHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQ6IFF1ZXJ5QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz47XG4gIHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQ6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz47XG4gIGZpbmRCeVBsYWNlaG9sZGVyVGV4dDogRmluZEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVBsYWNlaG9sZGVyVGV4dE9wdGlvbnM+O1xuICBmaW5kQWxsQnlQbGFjZWhvbGRlclRleHQ6IEZpbmRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zPjtcbn07XG5cbmV4cG9ydCBjb25zdCBiaW5kQnlQbGFjZWhvbGRlclRleHRRdWVyaWVzID0gKFxuICBpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UsXG4pOiBCeVBsYWNlaG9sZGVyVGV4dFF1ZXJpZXMgPT4gKHtcbiAgZ2V0QnlQbGFjZWhvbGRlclRleHQ6IGdldEJ5KGluc3RhbmNlKSxcbiAgZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQ6IGdldEFsbEJ5KGluc3RhbmNlKSxcbiAgcXVlcnlCeVBsYWNlaG9sZGVyVGV4dDogcXVlcnlCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQ6IHF1ZXJ5QWxsQnkoaW5zdGFuY2UpLFxuICBmaW5kQnlQbGFjZWhvbGRlclRleHQ6IGZpbmRCeShpbnN0YW5jZSksXG4gIGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dDogZmluZEFsbEJ5KGluc3RhbmNlKSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxtQkFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBU0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBS0EsSUFBTUksb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUFvQkEsQ0FDeEJDLElBQXVCLEVBQ3ZCQyxXQUFzQixFQUVuQjtFQUFBLElBREhDLE9BQXlCLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztFQUU5QixJQUFRRyxLQUFLLEdBQWlCSixPQUFPLENBQTdCSSxLQUFLO0lBQUVDLFVBQUEsR0FBZUwsT0FBTyxDQUF0QkssVUFBQTtFQUNmLE9BQU8sSUFBQVYsUUFBQSxDQUFBVyxPQUFPLEVBQUNQLFdBQVcsRUFBRUQsSUFBSSxDQUFDUyxLQUFLLENBQUNSLFdBQVcsRUFBRU0sVUFBVSxFQUFFRCxLQUFLLENBQUM7QUFDeEUsQ0FBQztBQUVELElBQU1JLHlCQUF5QixHQUM3QixTQURJQSx5QkFBeUJBLENBQzdCQyxRQUEyQjtFQUFBLE9BRTNCLFNBQVNDLHVCQUF1QkEsQ0FBQ1gsV0FBVyxFQUFFWSxZQUFZLEVBQUU7SUFDMUQsT0FBTyxJQUFBbkIsUUFBQSxDQUFBb0IsT0FBTyxFQUNaSCxRQUFRLEVBQ1AsVUFBQVgsSUFBSTtNQUFBLE9BQUssSUFBQUosbUJBQUEsQ0FBQW1CLGVBQWUsRUFBQ2YsSUFBSSxDQUFDLElBQUlELG9CQUFvQixDQUFDQyxJQUFJLEVBQUVDLFdBQVcsRUFBRVksWUFBWSxDQUFDO0lBQUEsR0FDeEZBLFlBQ0YsQ0FBQztFQUNILENBQUM7QUFBQTtBQUVILElBQU1HLGdCQUFnQixHQUFJLFNBQXBCQSxnQkFBZ0JBLENBQUlmLFdBQXNCO0VBQUEsT0FDOUMsNkNBQTZDZ0IsTUFBTSxDQUFDaEIsV0FBVyxDQUFDLEdBQUc7QUFBQTtBQUNyRSxJQUFNaUIsZUFBZSxHQUFJLFNBQW5CQSxlQUFlQSxDQUFJakIsV0FBc0I7RUFBQSxPQUM3QywrQ0FBK0NnQixNQUFNLENBQUNoQixXQUFXLENBQUMsRUFBRTtBQUFBO0FBRXRFLElBQUFrQixJQUFBLEdBQW9FLElBQUFyQixZQUFBLENBQUFzQixXQUFXLEVBQzdFVix5QkFBeUIsRUFDekJRLGVBQWUsRUFDZkYsZ0JBQ0YsQ0FBQztFQUpPSyxLQUFLLEdBQUFGLElBQUEsQ0FBTEUsS0FBSztFQUFFQyxRQUFRLEdBQUFILElBQUEsQ0FBUkcsUUFBUTtFQUFFQyxPQUFPLEdBQUFKLElBQUEsQ0FBUEksT0FBTztFQUFFQyxVQUFVLEdBQUFMLElBQUEsQ0FBVkssVUFBVTtFQUFFQyxNQUFNLEdBQUFOLElBQUEsQ0FBTk0sTUFBTTtFQUFFQyxTQUFBLEdBQUFQLElBQUEsQ0FBQU8sU0FBQTtBQWUvQyxJQUFNQyw0QkFBNEIsR0FDdkMsU0FEV0EsNEJBQTRCQSxDQUN2Q2hCLFFBQTJCO0VBQUEsT0FDRztJQUM5QmlCLG9CQUFvQixFQUFFUCxLQUFLLENBQUNWLFFBQVEsQ0FBQztJQUNyQ2tCLHVCQUF1QixFQUFFUCxRQUFRLENBQUNYLFFBQVEsQ0FBQztJQUMzQ21CLHNCQUFzQixFQUFFUCxPQUFPLENBQUNaLFFBQVEsQ0FBQztJQUN6Q0QseUJBQXlCLEVBQUVjLFVBQVUsQ0FBQ2IsUUFBUSxDQUFDO0lBQy9Db0IscUJBQXFCLEVBQUVOLE1BQU0sQ0FBQ2QsUUFBUSxDQUFDO0lBQ3ZDcUIsd0JBQXdCLEVBQUVOLFNBQVMsQ0FBQ2YsUUFBUTtFQUM5QyxDQUFDO0FBQUEsQ0FBQztBQUFDc0IsT0FBQSxDQUFBTiw0QkFBQSxHQUFBQSw0QkFBQSIsImlnbm9yZUxpc3QiOltdfQ==