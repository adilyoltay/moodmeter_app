5620ce44e2523a55029c442e4963aac7
_getJestObj().mock("../../services/supabase", function () {
  var _require = require("./utils/supabaseTestClient"),
    createSupabaseTestClient = _require.createSupabaseTestClient;
  var client = createSupabaseTestClient();
  return {
    __esModule: true,
    default: {
      supabaseClient: client
    },
    supabaseClient: client
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require2 = require("../../features/ai/core/UnifiedAIPipeline"),
  unifiedPipeline = _require2.unifiedPipeline;
var _require3 = require("./utils/supabaseTestClient"),
  createSupabaseTestClient = _require3.createSupabaseTestClient;
var userId = process.env.TEST_SEED_USER_ID || '00000000-0000-0000-0000-000000000001';
var supabase = createSupabaseTestClient();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_cache').delete().ilike('cache_key', `unified:${userId}:%`).eq('user_id', userId);
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Today Supabase', function () {
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    process.env.TEST_SEED_USER_ID = userId;
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:today:fresh] writes ai_cache on fresh run', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 10
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 3600e3,
        mood_score: 7
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var _yield$supabase$from$ = yield supabase.from('ai_cache').select('cache_key, content, expires_at').eq('user_id', userId).ilike('cache_key', `unified:${userId}:%`).limit(1),
      data = _yield$supabase$from$.data,
      error = _yield$supabase$from$.error;
    expect(error).toBeNull();
    expect((data || []).length).toBeGreaterThan(0);
  }));
  it('[QRlive:today:cache] reads from cache on second run', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 8
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 1800e3,
        mood_score: 6.5
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var second = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    expect(second.metadata.source).toBe('cache');
  }));
  it('[QRlive:today:invalidate] deletes ai_cache rows on invalidation', (0, _asyncToGenerator2.default)(function* () {
    yield unifiedPipeline.triggerInvalidation('mood_added', userId);
    var _yield$supabase$from$2 = yield supabase.from('ai_cache').select('cache_key').eq('user_id', userId).ilike('cache_key', `unified:${userId}:%`),
      data = _yield$supabase$from$2.data,
      error = _yield$supabase$from$2.error;
    expect(error).toBeNull();
    expect((data || []).length).toBe(0);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,