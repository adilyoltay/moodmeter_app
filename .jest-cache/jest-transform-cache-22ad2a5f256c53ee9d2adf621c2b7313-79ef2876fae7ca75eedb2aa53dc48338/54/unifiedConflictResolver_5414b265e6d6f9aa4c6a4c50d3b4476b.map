{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_aiTelemetry","_ResolutionStrategies","ConflictDetectionEngine","exports","_classCallCheck2","default","_createClass2","key","value","detectConflictType","localData","remoteData","entityType","id","areDataIdentical","localTimestamp","extractTimestamp","remoteTimestamp","deleted","a","b","compareCompulsions","compareMoodEntries","compareVoiceCheckins","compareGeneric","error","console","type","subcategory","category","Math","abs","severity","resistance_level","trigger","mood_score","mood","notes","toLowerCase","includes","slice","duration","transcript","normalize","x","clone","Object","assign","timestamp","updated_at","created_at","JSON","stringify","_unused","data","timestampFields","field","Date","getTime","isNaN","ResolutionStrategies","getStrategy","name","strategies","getAllStrategies","values","sort","priority","mergeCompulsions","local","remote","max","Number","anxiety_initial","anxiety_final","conflict_resolved","merged_at","toISOString","conflict_history","at","mergeMoodEntries","_local$notes","_remote$notes","length","triggers","concat","_toConsumableArray2","activities","mergeGeneric","last_write_wins","description","canAutoResolve","apply","localTime","remoteTime","merge_intelligent","context","prefer_higher_severity","localSeverity","remoteSeverity","UnifiedConflictResolverService","_resolveConflict","_asyncToGenerator2","userId","preferredStrategy","startTime","now","conflictType","resolved","resultData","strategy","conflicts","metadata","confidence","reasoning","conflict","random","toString","source","autoResolved","selectBestStrategy","resolution","determineResolutionType","resolvedAt","logConflict","trackAIInteraction","AIEventType","SYSTEM_STATUS","event","processingTime","API_ERROR","Error","message","String","resolveConflict","_x","_x2","_x3","_x4","_x5","arguments","_resolveCompulsionConflict","compulsionId","choice","getConflictLogs","entry","entity","conflictIndex","findIndex","c","localKey","stored","AsyncStorage","getItem","compulsions","parse","localFormat","convertRemoteToLocal","chosenData","existingIndex","push","setItem","splice","count","filteredConflicts","filter","e","resolveCompulsionConflict","_x6","_x7","_x8","_getConflictLogs","_unused2","_clearConflictLogs","removeItem","clearConflictLogs","preferred","find","s","result","_logConflict","_conflict$resolvedAt","existingLogs","logs","recentLogs","_x9","resistanceLevel","user_id","getInstance","instance","unifiedConflictResolver","_default"],"sources":["unifiedConflictResolver.ts"],"sourcesContent":["/**\n * ðŸ”„ Unified Conflict Resolution Service\n * \n * Consolidated conflict resolution system that includes:\n * - General data conflict resolution from conflictResolution.ts\n * - Compulsion-specific conflict handling from conflictResolver.ts\n * - Enhanced telemetry and logging\n * - Configurable resolution strategies\n * - Cross-module conflict detection and resolution\n * \n * Created: Jan 2025 - Consolidation of conflict resolution services\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { trackAIInteraction, AIEventType } from '@/features/ai/telemetry/aiTelemetry';\n\n// =============================================================================\n// TYPES AND INTERFACES (Unified from both services)\n// =============================================================================\n\nexport type ConflictType = 'CREATE_DUPLICATE' | 'UPDATE_CONFLICT' | 'DELETE_CONFLICT' | 'NONE';\nexport type EntityType = 'compulsion' | 'achievement' | 'mood_entry' | 'ai_profile' | 'treatment_plan' | 'voice_checkin' | 'thought_record';\n\nexport interface UnifiedDataConflict {\n  id: string;\n  entityType: EntityType;\n  localData: any;\n  remoteData: any;\n  conflictType: ConflictType;\n  timestamp: Date;\n  userId?: string;\n  resolution?: 'local' | 'remote' | 'merged';\n  resolvedAt?: Date;\n  metadata?: {\n    source: string;\n    confidence: number;\n    autoResolved: boolean;\n  };\n}\n\nexport interface ConflictResolutionResult {\n  resolved: boolean;\n  resultData: any;\n  strategy: 'last_write_wins' | 'merge' | 'user_choice' | 'heuristic';\n  conflicts: UnifiedDataConflict[];\n  metadata: {\n    timestamp: string;\n    confidence: number;\n    reasoning: string[];\n  };\n}\n\nexport interface ConflictLogItem {\n  entity: EntityType;\n  count: number;\n  at: string;\n  conflicts: Array<{ id: string; local: any; remote: any; type: ConflictType }>;\n  userId?: string;\n}\n\nexport interface ResolutionStrategy {\n  name: string;\n  description: string;\n  canAutoResolve: boolean;\n  priority: number;\n  apply: (local: any, remote: any, context: any) => any;\n}\n\n// =============================================================================\n// CONFLICT DETECTION ENGINE\n// =============================================================================\n\nexport class ConflictDetectionEngine {\n  /**\n   * Detect conflict type between local and remote data\n   */\n  static detectConflictType(localData: any, remoteData: any, entityType: EntityType): ConflictType {\n    if (!remoteData && !localData) return 'NONE';\n    if (!remoteData && localData) return 'NONE'; // Local-only data, no conflict\n    if (!localData && remoteData) return 'NONE'; // Remote-only data, no conflict\n    \n    // Check for duplicate creation\n    if (!localData?.id && remoteData?.id && this.areDataIdentical(localData, remoteData, entityType)) {\n      return 'CREATE_DUPLICATE';\n    }\n    \n    // Check for update conflicts\n    const localTimestamp = this.extractTimestamp(localData);\n    const remoteTimestamp = this.extractTimestamp(remoteData);\n    \n    if (localTimestamp && remoteTimestamp && localTimestamp !== remoteTimestamp) {\n      return 'UPDATE_CONFLICT';\n    }\n    \n    // Check for delete conflicts (exists locally but marked deleted remotely)\n    if (localData && remoteData?.deleted) {\n      return 'DELETE_CONFLICT';\n    }\n    \n    return 'NONE';\n  }\n  \n  /**\n   * Check if two data objects are essentially identical\n   */\n  static areDataIdentical(a: any, b: any, entityType: EntityType): boolean {\n    try {\n      // Entity-specific comparison logic\n      switch (entityType) {\n        case 'compulsion':\n          return this.compareCompulsions(a, b);\n        case 'mood_entry':\n          return this.compareMoodEntries(a, b);\n        case 'voice_checkin':\n          return this.compareVoiceCheckins(a, b);\n        default:\n          return this.compareGeneric(a, b);\n      }\n    } catch (error) {\n      console.error('Error comparing data for identity:', error);\n      return false;\n    }\n  }\n  \n  private static compareCompulsions(a: any, b: any): boolean {\n    if (!a || !b) return false;\n    return (\n      (a.type === b.subcategory || a.type === b.category) &&\n      Math.abs((a.severity || a.resistance_level || 0) - (b.resistance_level || b.severity || 0)) <= 1 &&\n      a.trigger === b.trigger\n    );\n  }\n  \n  private static compareMoodEntries(a: any, b: any): boolean {\n    if (!a || !b) return false;\n    return (\n      Math.abs((a.mood_score || a.mood || 0) - (b.mood_score || b.mood || 0)) <= 5 &&\n      (a.notes || '').toLowerCase().includes((b.notes || '').toLowerCase().slice(0, 10))\n    );\n  }\n  \n  private static compareVoiceCheckins(a: any, b: any): boolean {\n    if (!a || !b) return false;\n    return (\n      a.duration && b.duration && Math.abs(a.duration - b.duration) <= 5000 && // 5 second tolerance\n      a.transcript && b.transcript && \n      a.transcript.toLowerCase().slice(0, 20) === b.transcript.toLowerCase().slice(0, 20)\n    );\n  }\n  \n  private static compareGeneric(a: any, b: any): boolean {\n    try {\n      const normalize = (x: any) => {\n        const clone = { ...x };\n        delete clone.timestamp;\n        delete clone.updated_at;\n        delete clone.created_at;\n        delete clone.id;\n        return JSON.stringify(clone);\n      };\n      return normalize(a) === normalize(b);\n    } catch {\n      return false;\n    }\n  }\n  \n  private static extractTimestamp(data: any): number | null {\n    if (!data) return null;\n    \n    const timestampFields = ['updated_at', 'timestamp', 'modified_at', 'created_at'];\n    \n    for (const field of timestampFields) {\n      if (data[field]) {\n        const timestamp = new Date(data[field]).getTime();\n        if (!isNaN(timestamp)) return timestamp;\n      }\n    }\n    \n    return null;\n  }\n}\n\n// =============================================================================\n// RESOLUTION STRATEGIES\n// =============================================================================\n\nexport class ResolutionStrategies {\n  private static strategies: Record<string, ResolutionStrategy> = {\n    last_write_wins: {\n      name: 'Last Write Wins',\n      description: 'Choose the data with the most recent timestamp',\n      canAutoResolve: true,\n      priority: 1,\n      apply: (local: any, remote: any) => {\n        const localTime = new Date(local?.updated_at || local?.timestamp || 0).getTime();\n        const remoteTime = new Date(remote?.updated_at || remote?.timestamp || 0).getTime();\n        return localTime >= remoteTime ? local : remote;\n      }\n    },\n    \n    merge_intelligent: {\n      name: 'Intelligent Merge',\n      description: 'Merge data with domain-aware logic',\n      canAutoResolve: true,\n      priority: 2,\n      apply: (local: any, remote: any, context: any) => {\n        const entityType = context?.entityType;\n        \n        switch (entityType) {\n          case 'compulsion':\n            return ResolutionStrategies.mergeCompulsions(local, remote);\n          case 'mood_entry':\n            return ResolutionStrategies.mergeMoodEntries(local, remote);\n          default:\n            return ResolutionStrategies.mergeGeneric(local, remote);\n        }\n      }\n    },\n    \n    prefer_higher_severity: {\n      name: 'Prefer Higher Severity',\n      description: 'For compulsions, prefer data with higher severity/resistance',\n      canAutoResolve: true,\n      priority: 3,\n      apply: (local: any, remote: any) => {\n        const localSeverity = local?.resistance_level || local?.severity || local?.anxiety_initial || 0;\n        const remoteSeverity = remote?.resistance_level || remote?.severity || remote?.anxiety_initial || 0;\n        \n        if (localSeverity === remoteSeverity) {\n          // Fall back to last write wins\n          const localTime = new Date(local?.updated_at || local?.timestamp || 0).getTime();\n          const remoteTime = new Date(remote?.updated_at || remote?.timestamp || 0).getTime();\n          return localTime >= remoteTime ? local : remote;\n        }\n        \n        return localSeverity >= remoteSeverity ? local : remote;\n      }\n    }\n  };\n  \n  static getStrategy(name: string): ResolutionStrategy | null {\n    return this.strategies[name] || null;\n  }\n  \n  static getAllStrategies(): ResolutionStrategy[] {\n    return Object.values(this.strategies).sort((a, b) => a.priority - b.priority);\n  }\n  \n  private static mergeCompulsions(local: any, remote: any): any {\n    return {\n      ...remote,\n      ...local,\n      // Prefer higher severity/anxiety\n      resistance_level: Math.max(\n        Number(remote?.resistance_level || 0), \n        Number(local?.resistance_level || 0)\n      ) || local?.resistance_level || remote?.resistance_level,\n      \n      anxiety_initial: Math.max(\n        Number(remote?.anxiety_initial || 0), \n        Number(local?.anxiety_initial || 0)\n      ) || local?.anxiety_initial || remote?.anxiety_initial,\n      \n      anxiety_final: Math.max(\n        Number(remote?.anxiety_final || 0), \n        Number(local?.anxiety_final || 0)\n      ) || local?.anxiety_final || remote?.anxiety_final,\n      \n      // Combine notes if different\n      notes: local?.notes !== remote?.notes && local?.notes && remote?.notes \n        ? `${remote.notes} | ${local.notes}` \n        : local?.notes || remote?.notes,\n      \n      // Metadata about the merge\n      conflict_resolved: true,\n      merged_at: new Date().toISOString(),\n      conflict_history: [\n        { type: 'remote', data: remote, at: new Date().toISOString() },\n        { type: 'local', data: local, at: new Date().toISOString() }\n      ]\n    };\n  }\n  \n  private static mergeMoodEntries(local: any, remote: any): any {\n    return {\n      ...remote,\n      ...local,\n      // Prefer more detailed entry\n      notes: (local?.notes?.length || 0) > (remote?.notes?.length || 0) \n        ? local.notes \n        : remote.notes,\n      \n      // Merge triggers and activities\n      triggers: [...(remote?.triggers || []), ...(local?.triggers || [])],\n      activities: [...(remote?.activities || []), ...(local?.activities || [])],\n      \n      // Conflict metadata\n      conflict_resolved: true,\n      merged_at: new Date().toISOString()\n    };\n  }\n  \n  private static mergeGeneric(local: any, remote: any): any {\n    return {\n      ...remote,\n      ...local,\n      conflict_resolved: true,\n      merged_at: new Date().toISOString(),\n      conflict_history: [\n        { type: 'remote', data: remote, at: new Date().toISOString() },\n        { type: 'local', data: local, at: new Date().toISOString() }\n      ]\n    };\n  }\n}\n\n// =============================================================================\n// MAIN UNIFIED CONFLICT RESOLVER SERVICE\n// =============================================================================\n\nclass UnifiedConflictResolverService {\n  private static instance: UnifiedConflictResolverService;\n\n  static getInstance(): UnifiedConflictResolverService {\n    if (!UnifiedConflictResolverService.instance) {\n      UnifiedConflictResolverService.instance = new UnifiedConflictResolverService();\n    }\n    return UnifiedConflictResolverService.instance;\n  }\n\n  /**\n   * Resolve conflicts for any entity type with multiple strategies\n   */\n  async resolveConflict(\n    entityType: EntityType,\n    localData: any,\n    remoteData: any,\n    userId?: string,\n    preferredStrategy?: string\n  ): Promise<ConflictResolutionResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Detect conflict type\n      const conflictType = ConflictDetectionEngine.detectConflictType(localData, remoteData, entityType);\n      \n      if (conflictType === 'NONE') {\n        return {\n          resolved: true,\n          resultData: localData || remoteData,\n          strategy: 'last_write_wins',\n          conflicts: [],\n          metadata: {\n            timestamp: new Date().toISOString(),\n            confidence: 1.0,\n            reasoning: ['No conflict detected']\n          }\n        };\n      }\n      \n      // Create conflict object\n      const conflict: UnifiedDataConflict = {\n        id: `conflict_${Date.now()}_${Math.random().toString(36).slice(2, 9)}`,\n        entityType,\n        localData,\n        remoteData,\n        conflictType,\n        timestamp: new Date(),\n        userId,\n        metadata: {\n          source: 'unified_conflict_resolver',\n          confidence: 0.8,\n          autoResolved: true\n        }\n      };\n      \n      // Select resolution strategy\n      const strategy = this.selectBestStrategy(conflictType, entityType, preferredStrategy);\n      \n      // Apply resolution strategy\n      const resultData = strategy.apply(localData, remoteData, { \n        entityType, \n        conflictType, \n        userId \n      });\n      \n      // Mark conflict as resolved\n      conflict.resolution = this.determineResolutionType(resultData, localData, remoteData);\n      conflict.resolvedAt = new Date();\n      \n      // Log the conflict\n      await this.logConflict(conflict);\n      \n      // Track conflict resolution\n      await trackAIInteraction(AIEventType.SYSTEM_STATUS, {\n        event: 'conflict_resolved',\n        entityType,\n        conflictType,\n        strategy: strategy.name,\n        userId: userId || 'unknown',\n        processingTime: Date.now() - startTime\n      });\n      \n      return {\n        resolved: true,\n        resultData,\n        strategy: strategy.name as any,\n        conflicts: [conflict],\n        metadata: {\n          timestamp: new Date().toISOString(),\n          confidence: 0.8,\n          reasoning: [\n            `Conflict type: ${conflictType}`,\n            `Strategy: ${strategy.name}`,\n            `Auto-resolved: ${strategy.canAutoResolve}`\n          ]\n        }\n      };\n      \n    } catch (error) {\n      console.error('Unified conflict resolution failed:', error);\n      \n      await trackAIInteraction(AIEventType.API_ERROR, {\n        event: 'conflict_resolution_failed',\n        entityType,\n        error: error instanceof Error ? error.message : String(error),\n        userId: userId || 'unknown'\n      });\n      \n      // Return fallback resolution\n      return {\n        resolved: false,\n        resultData: localData || remoteData,\n        strategy: 'last_write_wins',\n        conflicts: [],\n        metadata: {\n          timestamp: new Date().toISOString(),\n          confidence: 0.3,\n          reasoning: ['Fallback due to resolution error', error instanceof Error ? error.message : String(error)]\n        }\n      };\n    }\n  }\n  \n  /**\n   * Resolve compulsion-specific conflicts (from old conflictResolver.ts)\n   */\n  async resolveCompulsionConflict(\n    userId: string,\n    compulsionId: string,\n    choice: 'local' | 'remote'\n  ): Promise<boolean> {\n    try {\n      const conflicts = await this.getConflictLogs();\n      let resolved = false;\n      \n      for (const entry of conflicts) {\n        if (entry.entity !== 'compulsion') continue;\n        \n        const conflictIndex = entry.conflicts.findIndex(c => c.id === compulsionId);\n        if (conflictIndex === -1) continue;\n        \n        const conflict = entry.conflicts[conflictIndex];\n        \n        // Load local compulsions\n        const localKey = `compulsions_${userId}`;\n        const stored = await AsyncStorage.getItem(localKey);\n        const compulsions = stored ? JSON.parse(stored) : [];\n        \n        // Convert remote data to local format\n        const localFormat = this.convertRemoteToLocal(conflict.remote);\n        const chosenData = choice === 'local' ? conflict.local : localFormat;\n        \n        // Update local storage\n        const existingIndex = compulsions.findIndex((c: any) => c.id === compulsionId);\n        if (existingIndex >= 0) {\n          compulsions[existingIndex] = chosenData;\n        } else {\n          compulsions.push(chosenData);\n        }\n        \n        await AsyncStorage.setItem(localKey, JSON.stringify(compulsions));\n        \n        // Remove resolved conflict\n        entry.conflicts.splice(conflictIndex, 1);\n        entry.count = Math.max(0, entry.count - 1);\n        resolved = true;\n        \n        // Track resolution\n        await trackAIInteraction(AIEventType.SYSTEM_STATUS, {\n          event: 'compulsion_conflict_resolved',\n          compulsionId,\n          resolution: choice,\n          userId\n        });\n        \n        break;\n      }\n      \n      // Update conflict log\n      if (resolved) {\n        const filteredConflicts = conflicts.filter(e => e.count > 0);\n        await AsyncStorage.setItem('unified_sync_conflicts', JSON.stringify(filteredConflicts));\n      }\n      \n      return resolved;\n      \n    } catch (error) {\n      console.error('Compulsion conflict resolution failed:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * List all current conflicts\n   */\n  async getConflictLogs(): Promise<ConflictLogItem[]> {\n    try {\n      const stored = await AsyncStorage.getItem('unified_sync_conflicts');\n      return stored ? JSON.parse(stored) : [];\n    } catch {\n      return [];\n    }\n  }\n  \n  /**\n   * Clear all conflict logs\n   */\n  async clearConflictLogs(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem('unified_sync_conflicts');\n      await AsyncStorage.removeItem('unified_conflict_logs'); // Legacy cleanup\n    } catch (error) {\n      console.error('Failed to clear conflict logs:', error);\n    }\n  }\n  \n  // Private helper methods\n  private selectBestStrategy(\n    conflictType: ConflictType, \n    entityType: EntityType, \n    preferred?: string\n  ): ResolutionStrategy {\n    const strategies = ResolutionStrategies.getAllStrategies();\n    \n    // Use preferred strategy if specified and valid\n    if (preferred) {\n      const preferredStrategy = ResolutionStrategies.getStrategy(preferred);\n      if (preferredStrategy) return preferredStrategy;\n    }\n    \n    // Select based on conflict type and entity type\n    switch (conflictType) {\n      case 'CREATE_DUPLICATE':\n        return strategies.find(s => s.name === 'Last Write Wins') || strategies[0];\n      \n      case 'UPDATE_CONFLICT':\n        if (entityType === 'compulsion') {\n          return strategies.find(s => s.name === 'Prefer Higher Severity') || strategies[0];\n        }\n        return strategies.find(s => s.name === 'Intelligent Merge') || strategies[0];\n      \n      case 'DELETE_CONFLICT':\n        return strategies.find(s => s.name === 'Last Write Wins') || strategies[0];\n      \n      default:\n        return strategies[0];\n    }\n  }\n  \n  private determineResolutionType(result: any, local: any, remote: any): 'local' | 'remote' | 'merged' {\n    if (result === local) return 'local';\n    if (result === remote) return 'remote';\n    return 'merged';\n  }\n  \n  private async logConflict(conflict: UnifiedDataConflict): Promise<void> {\n    try {\n      const existingLogs = await AsyncStorage.getItem('unified_conflict_logs');\n      const logs = existingLogs ? JSON.parse(existingLogs) : [];\n      \n      logs.push({\n        ...conflict,\n        timestamp: conflict.timestamp.toISOString(),\n        resolvedAt: conflict.resolvedAt?.toISOString()\n      });\n      \n      // Keep only last 100 conflicts\n      const recentLogs = logs.slice(-100);\n      await AsyncStorage.setItem('unified_conflict_logs', JSON.stringify(recentLogs));\n      \n    } catch (error) {\n      console.error('Failed to log conflict:', error);\n    }\n  }\n  \n  private convertRemoteToLocal(remoteData: any): any {\n    // Convert remote compulsion format to local format\n    return {\n      id: remoteData.id,\n      type: remoteData.subcategory || remoteData.category,\n      severity: remoteData.resistance_level || 5,\n      resistanceLevel: remoteData.resistance_level,\n      duration: 0,\n      trigger: remoteData.trigger,\n      notes: remoteData.notes,\n      timestamp: remoteData.timestamp,\n      userId: remoteData.user_id\n    };\n  }\n}\n\n// =============================================================================\n// SINGLETON EXPORT\n// =============================================================================\n\nexport const unifiedConflictResolver = UnifiedConflictResolverService.getInstance();\nexport default unifiedConflictResolver;\nexport type { UnifiedDataConflict, ConflictResolutionResult, ConflictLogItem, EntityType, ConflictType };\n"],"mappings":"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","ignoreList":[]}