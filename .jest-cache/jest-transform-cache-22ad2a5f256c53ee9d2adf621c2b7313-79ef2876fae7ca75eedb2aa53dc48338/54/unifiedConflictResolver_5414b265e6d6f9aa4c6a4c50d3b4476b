289c6d232970af070eef4ec130d0fee9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unifiedConflictResolver = exports.default = exports.ResolutionStrategies = exports.ConflictDetectionEngine = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _aiTelemetry = require("../features/ai/telemetry/aiTelemetry");
var _ResolutionStrategies;
var ConflictDetectionEngine = exports.ConflictDetectionEngine = function () {
  function ConflictDetectionEngine() {
    (0, _classCallCheck2.default)(this, ConflictDetectionEngine);
  }
  return (0, _createClass2.default)(ConflictDetectionEngine, null, [{
    key: "detectConflictType",
    value: function detectConflictType(localData, remoteData, entityType) {
      if (!remoteData && !localData) return 'NONE';
      if (!remoteData && localData) return 'NONE';
      if (!localData && remoteData) return 'NONE';
      if (!(localData != null && localData.id) && remoteData != null && remoteData.id && this.areDataIdentical(localData, remoteData, entityType)) {
        return 'CREATE_DUPLICATE';
      }
      var localTimestamp = this.extractTimestamp(localData);
      var remoteTimestamp = this.extractTimestamp(remoteData);
      if (localTimestamp && remoteTimestamp && localTimestamp !== remoteTimestamp) {
        return 'UPDATE_CONFLICT';
      }
      if (localData && remoteData != null && remoteData.deleted) {
        return 'DELETE_CONFLICT';
      }
      return 'NONE';
    }
  }, {
    key: "areDataIdentical",
    value: function areDataIdentical(a, b, entityType) {
      try {
        switch (entityType) {
          case 'compulsion':
            return this.compareCompulsions(a, b);
          case 'mood_entry':
            return this.compareMoodEntries(a, b);
          case 'voice_checkin':
            return this.compareVoiceCheckins(a, b);
          default:
            return this.compareGeneric(a, b);
        }
      } catch (error) {
        console.error('Error comparing data for identity:', error);
        return false;
      }
    }
  }, {
    key: "compareCompulsions",
    value: function compareCompulsions(a, b) {
      if (!a || !b) return false;
      return (a.type === b.subcategory || a.type === b.category) && Math.abs((a.severity || a.resistance_level || 0) - (b.resistance_level || b.severity || 0)) <= 1 && a.trigger === b.trigger;
    }
  }, {
    key: "compareMoodEntries",
    value: function compareMoodEntries(a, b) {
      if (!a || !b) return false;
      return Math.abs((a.mood_score || a.mood || 0) - (b.mood_score || b.mood || 0)) <= 5 && (a.notes || '').toLowerCase().includes((b.notes || '').toLowerCase().slice(0, 10));
    }
  }, {
    key: "compareVoiceCheckins",
    value: function compareVoiceCheckins(a, b) {
      if (!a || !b) return false;
      return a.duration && b.duration && Math.abs(a.duration - b.duration) <= 5000 && a.transcript && b.transcript && a.transcript.toLowerCase().slice(0, 20) === b.transcript.toLowerCase().slice(0, 20);
    }
  }, {
    key: "compareGeneric",
    value: function compareGeneric(a, b) {
      try {
        var normalize = function normalize(x) {
          var clone = Object.assign({}, x);
          delete clone.timestamp;
          delete clone.updated_at;
          delete clone.created_at;
          delete clone.id;
          return JSON.stringify(clone);
        };
        return normalize(a) === normalize(b);
      } catch (_unused) {
        return false;
      }
    }
  }, {
    key: "extractTimestamp",
    value: function extractTimestamp(data) {
      if (!data) return null;
      var timestampFields = ['updated_at', 'timestamp', 'modified_at', 'created_at'];
      for (var field of timestampFields) {
        if (data[field]) {
          var timestamp = new Date(data[field]).getTime();
          if (!isNaN(timestamp)) return timestamp;
        }
      }
      return null;
    }
  }]);
}();
var ResolutionStrategies = exports.ResolutionStrategies = function () {
  function ResolutionStrategies() {
    (0, _classCallCheck2.default)(this, ResolutionStrategies);
  }
  return (0, _createClass2.default)(ResolutionStrategies, null, [{
    key: "getStrategy",
    value: function getStrategy(name) {
      return this.strategies[name] || null;
    }
  }, {
    key: "getAllStrategies",
    value: function getAllStrategies() {
      return Object.values(this.strategies).sort(function (a, b) {
        return a.priority - b.priority;
      });
    }
  }, {
    key: "mergeCompulsions",
    value: function mergeCompulsions(local, remote) {
      return Object.assign({}, remote, local, {
        resistance_level: Math.max(Number((remote == null ? void 0 : remote.resistance_level) || 0), Number((local == null ? void 0 : local.resistance_level) || 0)) || (local == null ? void 0 : local.resistance_level) || (remote == null ? void 0 : remote.resistance_level),
        anxiety_initial: Math.max(Number((remote == null ? void 0 : remote.anxiety_initial) || 0), Number((local == null ? void 0 : local.anxiety_initial) || 0)) || (local == null ? void 0 : local.anxiety_initial) || (remote == null ? void 0 : remote.anxiety_initial),
        anxiety_final: Math.max(Number((remote == null ? void 0 : remote.anxiety_final) || 0), Number((local == null ? void 0 : local.anxiety_final) || 0)) || (local == null ? void 0 : local.anxiety_final) || (remote == null ? void 0 : remote.anxiety_final),
        notes: (local == null ? void 0 : local.notes) !== (remote == null ? void 0 : remote.notes) && local != null && local.notes && remote != null && remote.notes ? `${remote.notes} | ${local.notes}` : (local == null ? void 0 : local.notes) || (remote == null ? void 0 : remote.notes),
        conflict_resolved: true,
        merged_at: new Date().toISOString(),
        conflict_history: [{
          type: 'remote',
          data: remote,
          at: new Date().toISOString()
        }, {
          type: 'local',
          data: local,
          at: new Date().toISOString()
        }]
      });
    }
  }, {
    key: "mergeMoodEntries",
    value: function mergeMoodEntries(local, remote) {
      var _local$notes, _remote$notes;
      return Object.assign({}, remote, local, {
        notes: ((local == null || (_local$notes = local.notes) == null ? void 0 : _local$notes.length) || 0) > ((remote == null || (_remote$notes = remote.notes) == null ? void 0 : _remote$notes.length) || 0) ? local.notes : remote.notes,
        triggers: [].concat((0, _toConsumableArray2.default)((remote == null ? void 0 : remote.triggers) || []), (0, _toConsumableArray2.default)((local == null ? void 0 : local.triggers) || [])),
        activities: [].concat((0, _toConsumableArray2.default)((remote == null ? void 0 : remote.activities) || []), (0, _toConsumableArray2.default)((local == null ? void 0 : local.activities) || [])),
        conflict_resolved: true,
        merged_at: new Date().toISOString()
      });
    }
  }, {
    key: "mergeGeneric",
    value: function mergeGeneric(local, remote) {
      return Object.assign({}, remote, local, {
        conflict_resolved: true,
        merged_at: new Date().toISOString(),
        conflict_history: [{
          type: 'remote',
          data: remote,
          at: new Date().toISOString()
        }, {
          type: 'local',
          data: local,
          at: new Date().toISOString()
        }]
      });
    }
  }]);
}();
_ResolutionStrategies = ResolutionStrategies;
ResolutionStrategies.strategies = {
  last_write_wins: {
    name: 'Last Write Wins',
    description: 'Choose the data with the most recent timestamp',
    canAutoResolve: true,
    priority: 1,
    apply: function apply(local, remote) {
      var localTime = new Date((local == null ? void 0 : local.updated_at) || (local == null ? void 0 : local.timestamp) || 0).getTime();
      var remoteTime = new Date((remote == null ? void 0 : remote.updated_at) || (remote == null ? void 0 : remote.timestamp) || 0).getTime();
      return localTime >= remoteTime ? local : remote;
    }
  },
  merge_intelligent: {
    name: 'Intelligent Merge',
    description: 'Merge data with domain-aware logic',
    canAutoResolve: true,
    priority: 2,
    apply: function apply(local, remote, context) {
      var entityType = context == null ? void 0 : context.entityType;
      switch (entityType) {
        case 'compulsion':
          return _ResolutionStrategies.mergeCompulsions(local, remote);
        case 'mood_entry':
          return _ResolutionStrategies.mergeMoodEntries(local, remote);
        default:
          return _ResolutionStrategies.mergeGeneric(local, remote);
      }
    }
  },
  prefer_higher_severity: {
    name: 'Prefer Higher Severity',
    description: 'For compulsions, prefer data with higher severity/resistance',
    canAutoResolve: true,
    priority: 3,
    apply: function apply(local, remote) {
      var localSeverity = (local == null ? void 0 : local.resistance_level) || (local == null ? void 0 : local.severity) || (local == null ? void 0 : local.anxiety_initial) || 0;
      var remoteSeverity = (remote == null ? void 0 : remote.resistance_level) || (remote == null ? void 0 : remote.severity) || (remote == null ? void 0 : remote.anxiety_initial) || 0;
      if (localSeverity === remoteSeverity) {
        var localTime = new Date((local == null ? void 0 : local.updated_at) || (local == null ? void 0 : local.timestamp) || 0).getTime();
        var remoteTime = new Date((remote == null ? void 0 : remote.updated_at) || (remote == null ? void 0 : remote.timestamp) || 0).getTime();
        return localTime >= remoteTime ? local : remote;
      }
      return localSeverity >= remoteSeverity ? local : remote;
    }
  }
};
var UnifiedConflictResolverService = function () {
  function UnifiedConflictResolverService() {
    (0, _classCallCheck2.default)(this, UnifiedConflictResolverService);
  }
  return (0, _createClass2.default)(UnifiedConflictResolverService, [{
    key: "resolveConflict",
    value: (function () {
      var _resolveConflict = (0, _asyncToGenerator2.default)(function* (entityType, localData, remoteData, userId, preferredStrategy) {
        var startTime = Date.now();
        try {
          var conflictType = ConflictDetectionEngine.detectConflictType(localData, remoteData, entityType);
          if (conflictType === 'NONE') {
            return {
              resolved: true,
              resultData: localData || remoteData,
              strategy: 'last_write_wins',
              conflicts: [],
              metadata: {
                timestamp: new Date().toISOString(),
                confidence: 1.0,
                reasoning: ['No conflict detected']
              }
            };
          }
          var conflict = {
            id: `conflict_${Date.now()}_${Math.random().toString(36).slice(2, 9)}`,
            entityType: entityType,
            localData: localData,
            remoteData: remoteData,
            conflictType: conflictType,
            timestamp: new Date(),
            userId: userId,
            metadata: {
              source: 'unified_conflict_resolver',
              confidence: 0.8,
              autoResolved: true
            }
          };
          var strategy = this.selectBestStrategy(conflictType, entityType, preferredStrategy);
          var resultData = strategy.apply(localData, remoteData, {
            entityType: entityType,
            conflictType: conflictType,
            userId: userId
          });
          conflict.resolution = this.determineResolutionType(resultData, localData, remoteData);
          conflict.resolvedAt = new Date();
          yield this.logConflict(conflict);
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
            event: 'conflict_resolved',
            entityType: entityType,
            conflictType: conflictType,
            strategy: strategy.name,
            userId: userId || 'unknown',
            processingTime: Date.now() - startTime
          });
          return {
            resolved: true,
            resultData: resultData,
            strategy: strategy.name,
            conflicts: [conflict],
            metadata: {
              timestamp: new Date().toISOString(),
              confidence: 0.8,
              reasoning: [`Conflict type: ${conflictType}`, `Strategy: ${strategy.name}`, `Auto-resolved: ${strategy.canAutoResolve}`]
            }
          };
        } catch (error) {
          console.error('Unified conflict resolution failed:', error);
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.API_ERROR, {
            event: 'conflict_resolution_failed',
            entityType: entityType,
            error: error instanceof Error ? error.message : String(error),
            userId: userId || 'unknown'
          });
          return {
            resolved: false,
            resultData: localData || remoteData,
            strategy: 'last_write_wins',
            conflicts: [],
            metadata: {
              timestamp: new Date().toISOString(),
              confidence: 0.3,
              reasoning: ['Fallback due to resolution error', error instanceof Error ? error.message : String(error)]
            }
          };
        }
      });
      function resolveConflict(_x, _x2, _x3, _x4, _x5) {
        return _resolveConflict.apply(this, arguments);
      }
      return resolveConflict;
    }())
  }, {
    key: "resolveCompulsionConflict",
    value: (function () {
      var _resolveCompulsionConflict = (0, _asyncToGenerator2.default)(function* (userId, compulsionId, choice) {
        try {
          var conflicts = yield this.getConflictLogs();
          var resolved = false;
          for (var entry of conflicts) {
            if (entry.entity !== 'compulsion') continue;
            var conflictIndex = entry.conflicts.findIndex(function (c) {
              return c.id === compulsionId;
            });
            if (conflictIndex === -1) continue;
            var conflict = entry.conflicts[conflictIndex];
            var localKey = `compulsions_${userId}`;
            var stored = yield _asyncStorage.default.getItem(localKey);
            var compulsions = stored ? JSON.parse(stored) : [];
            var localFormat = this.convertRemoteToLocal(conflict.remote);
            var chosenData = choice === 'local' ? conflict.local : localFormat;
            var existingIndex = compulsions.findIndex(function (c) {
              return c.id === compulsionId;
            });
            if (existingIndex >= 0) {
              compulsions[existingIndex] = chosenData;
            } else {
              compulsions.push(chosenData);
            }
            yield _asyncStorage.default.setItem(localKey, JSON.stringify(compulsions));
            entry.conflicts.splice(conflictIndex, 1);
            entry.count = Math.max(0, entry.count - 1);
            resolved = true;
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
              event: 'compulsion_conflict_resolved',
              compulsionId: compulsionId,
              resolution: choice,
              userId: userId
            });
            break;
          }
          if (resolved) {
            var filteredConflicts = conflicts.filter(function (e) {
              return e.count > 0;
            });
            yield _asyncStorage.default.setItem('unified_sync_conflicts', JSON.stringify(filteredConflicts));
          }
          return resolved;
        } catch (error) {
          console.error('Compulsion conflict resolution failed:', error);
          return false;
        }
      });
      function resolveCompulsionConflict(_x6, _x7, _x8) {
        return _resolveCompulsionConflict.apply(this, arguments);
      }
      return resolveCompulsionConflict;
    }())
  }, {
    key: "getConflictLogs",
    value: (function () {
      var _getConflictLogs = (0, _asyncToGenerator2.default)(function* () {
        try {
          var stored = yield _asyncStorage.default.getItem('unified_sync_conflicts');
          return stored ? JSON.parse(stored) : [];
        } catch (_unused2) {
          return [];
        }
      });
      function getConflictLogs() {
        return _getConflictLogs.apply(this, arguments);
      }
      return getConflictLogs;
    }())
  }, {
    key: "clearConflictLogs",
    value: (function () {
      var _clearConflictLogs = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _asyncStorage.default.removeItem('unified_sync_conflicts');
          yield _asyncStorage.default.removeItem('unified_conflict_logs');
        } catch (error) {
          console.error('Failed to clear conflict logs:', error);
        }
      });
      function clearConflictLogs() {
        return _clearConflictLogs.apply(this, arguments);
      }
      return clearConflictLogs;
    }())
  }, {
    key: "selectBestStrategy",
    value: function selectBestStrategy(conflictType, entityType, preferred) {
      var strategies = ResolutionStrategies.getAllStrategies();
      if (preferred) {
        var preferredStrategy = ResolutionStrategies.getStrategy(preferred);
        if (preferredStrategy) return preferredStrategy;
      }
      switch (conflictType) {
        case 'CREATE_DUPLICATE':
          return strategies.find(function (s) {
            return s.name === 'Last Write Wins';
          }) || strategies[0];
        case 'UPDATE_CONFLICT':
          if (entityType === 'compulsion') {
            return strategies.find(function (s) {
              return s.name === 'Prefer Higher Severity';
            }) || strategies[0];
          }
          return strategies.find(function (s) {
            return s.name === 'Intelligent Merge';
          }) || strategies[0];
        case 'DELETE_CONFLICT':
          return strategies.find(function (s) {
            return s.name === 'Last Write Wins';
          }) || strategies[0];
        default:
          return strategies[0];
      }
    }
  }, {
    key: "determineResolutionType",
    value: function determineResolutionType(result, local, remote) {
      if (result === local) return 'local';
      if (result === remote) return 'remote';
      return 'merged';
    }
  }, {
    key: "logConflict",
    value: function () {
      var _logConflict = (0, _asyncToGenerator2.default)(function* (conflict) {
        try {
          var _conflict$resolvedAt;
          var existingLogs = yield _asyncStorage.default.getItem('unified_conflict_logs');
          var logs = existingLogs ? JSON.parse(existingLogs) : [];
          logs.push(Object.assign({}, conflict, {
            timestamp: conflict.timestamp.toISOString(),
            resolvedAt: (_conflict$resolvedAt = conflict.resolvedAt) == null ? void 0 : _conflict$resolvedAt.toISOString()
          }));
          var recentLogs = logs.slice(-100);
          yield _asyncStorage.default.setItem('unified_conflict_logs', JSON.stringify(recentLogs));
        } catch (error) {
          console.error('Failed to log conflict:', error);
        }
      });
      function logConflict(_x9) {
        return _logConflict.apply(this, arguments);
      }
      return logConflict;
    }()
  }, {
    key: "convertRemoteToLocal",
    value: function convertRemoteToLocal(remoteData) {
      return {
        id: remoteData.id,
        type: remoteData.subcategory || remoteData.category,
        severity: remoteData.resistance_level || 5,
        resistanceLevel: remoteData.resistance_level,
        duration: 0,
        trigger: remoteData.trigger,
        notes: remoteData.notes,
        timestamp: remoteData.timestamp,
        userId: remoteData.user_id
      };
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!UnifiedConflictResolverService.instance) {
        UnifiedConflictResolverService.instance = new UnifiedConflictResolverService();
      }
      return UnifiedConflictResolverService.instance;
    }
  }]);
}();
var unifiedConflictResolver = exports.unifiedConflictResolver = UnifiedConflictResolverService.getInstance();
var _default = exports.default = unifiedConflictResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,