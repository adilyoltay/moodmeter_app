15d1a0b87e4cfd584f030e5ec4b8ad86
_getJestObj().mock("../../services/supabase", function () {
  return {
    __esModule: true,
    default: {
      supabaseClient: {
        from: jest.fn(function () {
          return {
            select: jest.fn(function () {
              return {
                eq: jest.fn(function () {
                  return {
                    maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            upsert: jest.fn((0, _asyncToGenerator2.default)(function* () {
              return {
                data: null,
                error: null
              };
            })),
            delete: jest.fn(function () {
              return {
                eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            }),
            like: jest.fn(function () {
              return {
                delete: jest.fn(function () {
                  return {
                    eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            eq: jest.fn(function () {
              return {
                maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            })
          };
        })
      }
    }
  };
});
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry", function () {
  var actual = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
  return Object.assign({
    __esModule: true
  }, actual, {
    trackAIInteraction: jest.fn((0, _asyncToGenerator2.default)(function* () {}))
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var unifiedPipeline;
var actualTelemetry = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
var AIEventType = actualTelemetry.AIEventType;
describe('System OCD - Unified Pipeline', function () {
  var userId = _seedData.TEST_ENV.SEED_USER_ID;
  beforeAll(function () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.TEST_SEED_USER_ID = userId;
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    jest.resetModules();
    jest.doMock('constants/featureFlags', function () {
      var actual = jest.requireActual("../../constants/featureFlags.ts");
      return Object.assign({
        __esModule: true
      }, actual, {
        AI_MASTER_ENABLED: true,
        isEnabled: function isEnabled(flag) {
          if (flag === 'AI_UNIFIED_PIPELINE') return true;
          return actual.isEnabled(flag);
        }
      });
    });
    unifiedPipeline = require("../../features/ai/core/UnifiedAIPipeline").unifiedPipeline;
  });
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield _asyncStorage.default.clear();
  }));
  it('[QRsys:ocd:fresh] processes fresh with compulsion-like OCD data', (0, _asyncToGenerator2.default)(function* () {
    var now = Date.now();
    var compulsions = Array.from({
      length: 8
    }, function (_, i) {
      return {
        id: `ocd_${userId}_${i}`,
        user_id: userId,
        type: i % 2 === 0 ? 'washing' : 'checking',
        intensity: 6,
        duration_minutes: 15,
        resistance_level: 3,
        timestamp: new Date(now - i * 6 * 60 * 60 * 1000).toISOString()
      };
    });
    var res = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        compulsions: compulsions
      },
      context: {
        source: 'tracking'
      }
    });
    expect(res.metadata.source).toBe('fresh');
  }));
  it('[QRsys:ocd:cache] returns cached result on repeat', (0, _asyncToGenerator2.default)(function* () {
    var now = Date.now();
    var compulsions = Array.from({
      length: 5
    }, function (_, i) {
      return {
        id: `ocd_${userId}_med_${i}`,
        user_id: userId,
        type: 'checking',
        intensity: 5,
        duration_minutes: 10,
        resistance_level: 2,
        timestamp: new Date(now - i * 12 * 60 * 60 * 1000).toISOString()
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        compulsions: compulsions
      },
      context: {
        source: 'tracking'
      }
    });
    var second = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        compulsions: compulsions
      },
      context: {
        source: 'tracking'
      }
    });
    expect(second.metadata.source).toBe('cache');
  }));
  it('[QRsys:ocd:hidden] has no qualityMetadata (UI hides)', (0, _asyncToGenerator2.default)(function* () {
    var res = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {},
      context: {
        source: 'tracking'
      }
    });
    expect('qualityMetadata' in res).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,