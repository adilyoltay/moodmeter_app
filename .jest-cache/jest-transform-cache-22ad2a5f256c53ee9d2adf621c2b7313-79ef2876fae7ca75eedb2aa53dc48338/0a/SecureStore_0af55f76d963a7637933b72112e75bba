17fbff3ae6c30032bb732efb20ba907f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WHEN_UNLOCKED_THIS_DEVICE_ONLY = exports.WHEN_UNLOCKED = exports.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = exports.ALWAYS_THIS_DEVICE_ONLY = exports.ALWAYS = exports.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = exports.AFTER_FIRST_UNLOCK = void 0;
exports.canUseBiometricAuthentication = canUseBiometricAuthentication;
exports.deleteItemAsync = deleteItemAsync;
exports.getItem = getItem;
exports.getItemAsync = getItemAsync;
exports.isAvailableAsync = isAvailableAsync;
exports.setItem = setItem;
exports.setItemAsync = setItemAsync;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ExpoSecureStore = _interopRequireDefault(require("./ExpoSecureStore"));
var _byteCounter = require("./byteCounter");
var AFTER_FIRST_UNLOCK = exports.AFTER_FIRST_UNLOCK = _ExpoSecureStore.default.AFTER_FIRST_UNLOCK;
var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = exports.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = _ExpoSecureStore.default.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;
var ALWAYS = exports.ALWAYS = _ExpoSecureStore.default.ALWAYS;
var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = exports.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = _ExpoSecureStore.default.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;
var ALWAYS_THIS_DEVICE_ONLY = exports.ALWAYS_THIS_DEVICE_ONLY = _ExpoSecureStore.default.ALWAYS_THIS_DEVICE_ONLY;
var WHEN_UNLOCKED = exports.WHEN_UNLOCKED = _ExpoSecureStore.default.WHEN_UNLOCKED;
var WHEN_UNLOCKED_THIS_DEVICE_ONLY = exports.WHEN_UNLOCKED_THIS_DEVICE_ONLY = _ExpoSecureStore.default.WHEN_UNLOCKED_THIS_DEVICE_ONLY;
function isAvailableAsync() {
  return _isAvailableAsync.apply(this, arguments);
}
function _isAvailableAsync() {
  _isAvailableAsync = (0, _asyncToGenerator2.default)(function* () {
    return !!_ExpoSecureStore.default.getValueWithKeyAsync;
  });
  return _isAvailableAsync.apply(this, arguments);
}
function deleteItemAsync(_x) {
  return _deleteItemAsync.apply(this, arguments);
}
function _deleteItemAsync() {
  _deleteItemAsync = (0, _asyncToGenerator2.default)(function* (key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    ensureValidKey(key);
    yield _ExpoSecureStore.default.deleteValueWithKeyAsync(key, options);
  });
  return _deleteItemAsync.apply(this, arguments);
}
function getItemAsync(_x2) {
  return _getItemAsync.apply(this, arguments);
}
function _getItemAsync() {
  _getItemAsync = (0, _asyncToGenerator2.default)(function* (key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    ensureValidKey(key);
    return yield _ExpoSecureStore.default.getValueWithKeyAsync(key, options);
  });
  return _getItemAsync.apply(this, arguments);
}
function setItemAsync(_x3, _x4) {
  return _setItemAsync.apply(this, arguments);
}
function _setItemAsync() {
  _setItemAsync = (0, _asyncToGenerator2.default)(function* (key, value) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    ensureValidKey(key);
    if (!isValidValue(value)) {
      throw new Error(`Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`);
    }
    yield _ExpoSecureStore.default.setValueWithKeyAsync(value, key, options);
  });
  return _setItemAsync.apply(this, arguments);
}
function setItem(key, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  ensureValidKey(key);
  if (!isValidValue(value)) {
    throw new Error(`Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`);
  }
  return _ExpoSecureStore.default.setValueWithKeySync(value, key, options);
}
function getItem(key) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  ensureValidKey(key);
  return _ExpoSecureStore.default.getValueWithKeySync(key, options);
}
function canUseBiometricAuthentication() {
  return _ExpoSecureStore.default.canUseBiometricAuthentication();
}
function ensureValidKey(key) {
  if (!isValidKey(key)) {
    throw new Error(`Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, ".", "-", and "_".`);
  }
}
function isValidKey(key) {
  return typeof key === 'string' && /^[\w.-]+$/.test(key);
}
function isValidValue(value) {
  if (typeof value !== 'string') {
    return false;
  }
  if ((0, _byteCounter.byteCountOverLimit)(value, _byteCounter.VALUE_BYTES_LIMIT)) {
    console.warn(`Value being stored in SecureStore is larger than ${_byteCounter.VALUE_BYTES_LIMIT} bytes and it may not be stored successfully. In a future SDK version, this call may throw an error.`);
  }
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,