e8a7e28f69dd044081caa6260d114f67
_getJestObj().mock("../../services/supabase", function () {
  var _require = require("./utils/supabaseTestClient"),
    createSupabaseTestClient = _require.createSupabaseTestClient;
  var client = createSupabaseTestClient();
  return {
    __esModule: true,
    default: {
      supabaseClient: client
    },
    supabaseClient: client
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require2 = require("../../features/ai/core/UnifiedAIPipeline"),
  unifiedPipeline = _require2.unifiedPipeline;
var _require3 = require("./utils/supabaseTestClient"),
  createSupabaseTestClient = _require3.createSupabaseTestClient;
var userId = process.env.TEST_SEED_USER_ID || '00000000-0000-0000-0000-000000000001';
var supabase = createSupabaseTestClient();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_cache').delete().ilike('cache_key', `unified:${userId}:%`).eq('user_id', userId);
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Today Supabase', function () {
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    process.env.TEST_SEED_USER_ID = userId;
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:today:fresh] writes ai_cache on fresh run', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 10
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 3600e3,
        mood_score: 7
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    yield new Promise(function (r) {
      return setTimeout(r, 150);
    });
    var _yield$supabase$from$ = yield supabase.from('ai_cache').select('cache_key, content, expires_at').eq('user_id', userId).ilike('cache_key', `unified:${userId}:%`).limit(1),
      data = _yield$supabase$from$.data,
      error = _yield$supabase$from$.error;
    expect(error).toBeNull();
    expect((data || []).length).toBeGreaterThan(0);
  }));
  it('[QRlive:today:cache] reads from cache on second run', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 8
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 1800e3,
        mood_score: 6.5
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var second = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    expect(second.metadata.source).toBe('cache');
  }));
  it('[QRlive:today:invalidate] deletes ai_cache rows on invalidation', (0, _asyncToGenerator2.default)(function* () {
    yield unifiedPipeline.triggerInvalidation('mood_added', userId);
    yield new Promise(function (r) {
      return setTimeout(r, 150);
    });
    var _yield$supabase$from$2 = yield supabase.from('ai_cache').select('cache_key').eq('user_id', userId).ilike('cache_key', `unified:${userId}:%`),
      data = _yield$supabase$from$2.data,
      error = _yield$supabase$from$2.error;
    expect(error).toBeNull();
    expect((data || []).length).toBe(0);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQiLCJjbGllbnQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInN1cGFiYXNlQ2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZXF1aXJlNCIsImplc3QiLCJfcmVxdWlyZTIiLCJ1bmlmaWVkUGlwZWxpbmUiLCJfcmVxdWlyZTMiLCJ1c2VySWQiLCJwcm9jZXNzIiwiZW52IiwiVEVTVF9TRUVEX1VTRVJfSUQiLCJzdXBhYmFzZSIsImNsZWFudXAiLCJfY2xlYW51cCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZnJvbSIsImRlbGV0ZSIsImlsaWtlIiwiZXEiLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsIlRFU1RfTU9ERSIsIlRFU1RfVFRMX01TIiwiVEVTVF9QSVBFTElORV9TVFVCIiwiRVhQT19QVUJMSUNfRU5BQkxFX0FJIiwiYWZ0ZXJBbGwiLCJpdCIsIm1vb2RzIiwiQXJyYXkiLCJsZW5ndGgiLCJfIiwiaSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJtb29kX3Njb3JlIiwidHlwZSIsImNvbnRlbnQiLCJjb250ZXh0Iiwic291cmNlIiwiUHJvbWlzZSIsInIiLCJzZXRUaW1lb3V0IiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kIiwic2VsZWN0IiwibGltaXQiLCJkYXRhIiwiZXJyb3IiLCJleHBlY3QiLCJ0b0JlTnVsbCIsInRvQmVHcmVhdGVyVGhhbiIsInNlY29uZCIsIm1ldGFkYXRhIiwidG9CZSIsInRyaWdnZXJJbnZhbGlkYXRpb24iLCJfeWllbGQkc3VwYWJhc2UkZnJvbSQyIl0sInNvdXJjZXMiOlsiTGl2ZVRvZGF5U3VwYWJhc2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpdmUgU3VwYWJhc2UgVGVzdHMg4oCUIFRvZGF5IChRUmxpdmUpXG4gKiBUYWdzOiBbUVJsaXZlOnRvZGF5OmZyZXNofGNhY2hlfGludmFsaWRhdGVdXG4gKi9cbi8vIFJlcGxhY2UgYXBwIHN1cGFiYXNlIHNlcnZpY2Ugd2l0aCBzZXJ2aWNlLXJvbGUgY2xpZW50IGZvciBsaXZlIHRlc3RzXG5qZXN0Lm1vY2soJ0Avc2VydmljZXMvc3VwYWJhc2UnLCAoKSA9PiB7XG4gIGNvbnN0IHsgY3JlYXRlU3VwYWJhc2VUZXN0Q2xpZW50IH0gPSByZXF1aXJlKCcuL3V0aWxzL3N1cGFiYXNlVGVzdENsaWVudCcpO1xuICBjb25zdCBjbGllbnQgPSBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgIGRlZmF1bHQ6IHsgc3VwYWJhc2VDbGllbnQ6IGNsaWVudCB9LFxuICAgIHN1cGFiYXNlQ2xpZW50OiBjbGllbnQsXG4gIH07XG59KTtcblxuY29uc3QgeyB1bmlmaWVkUGlwZWxpbmUgfSA9IHJlcXVpcmUoJ0AvZmVhdHVyZXMvYWkvY29yZS9VbmlmaWVkQUlQaXBlbGluZScpO1xuY29uc3QgeyBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQgfSA9IHJlcXVpcmUoJy4vdXRpbHMvc3VwYWJhc2VUZXN0Q2xpZW50Jyk7XG5cbmNvbnN0IHVzZXJJZCA9IHByb2Nlc3MuZW52LlRFU1RfU0VFRF9VU0VSX0lEIHx8ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEnO1xuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQoKTtcblxuYXN5bmMgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgYXdhaXQgc3VwYWJhc2UuZnJvbSgnYWlfY2FjaGUnKS5kZWxldGUoKS5pbGlrZSgnY2FjaGVfa2V5JywgYHVuaWZpZWQ6JHt1c2VySWR9OiVgKS5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG4gIGF3YWl0IHN1cGFiYXNlLmZyb20oJ2FpX3RlbGVtZXRyeScpLmRlbGV0ZSgpLmVxKCd1c2VyX2lkJywgdXNlcklkKTtcbn1cblxuZGVzY3JpYmUoJ0xpdmUgVG9kYXkgU3VwYWJhc2UnLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9NT0RFID0gJzEnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfVFRMX01TID0gJzUwMDAnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfUElQRUxJTkVfU1RVQiA9ICcwJztcbiAgICBwcm9jZXNzLmVudi5FWFBPX1BVQkxJQ19FTkFCTEVfQUkgPSAndHJ1ZSc7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9TRUVEX1VTRVJfSUQgPSB1c2VySWQ7XG4gICAgYXdhaXQgY2xlYW51cCgpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgY2xlYW51cCgpO1xuICB9KTtcblxuICBpdCgnW1FSbGl2ZTp0b2RheTpmcmVzaF0gd3JpdGVzIGFpX2NhY2hlIG9uIGZyZXNoIHJ1bicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb29kcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwIH0sIChfLCBpKSA9PiAoeyB0aW1lc3RhbXA6IERhdGUubm93KCkgLSBpICogMzYwMGUzLCBtb29kX3Njb3JlOiA3IH0pKTtcbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcbiAgICAvLyBXYWl0IGJyaWVmbHkgdG8gYWxsb3cgREIgdXBzZXJ0XG4gICAgYXdhaXQgbmV3IFByb21pc2UociA9PiBzZXRUaW1lb3V0KHIsIDE1MCkpO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnYWlfY2FjaGUnKVxuICAgICAgLnNlbGVjdCgnY2FjaGVfa2V5LCBjb250ZW50LCBleHBpcmVzX2F0JylcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAgIC5pbGlrZSgnY2FjaGVfa2V5JywgYHVuaWZpZWQ6JHt1c2VySWR9OiVgKVxuICAgICAgLmxpbWl0KDEpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZU51bGwoKTtcbiAgICBleHBlY3QoKGRhdGEgfHwgW10pLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9KTtcblxuICBpdCgnW1FSbGl2ZTp0b2RheTpjYWNoZV0gcmVhZHMgZnJvbSBjYWNoZSBvbiBzZWNvbmQgcnVuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vb2RzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogOCB9LCAoXywgaSkgPT4gKHsgdGltZXN0YW1wOiBEYXRlLm5vdygpIC0gaSAqIDE4MDBlMywgbW9vZF9zY29yZTogNi41IH0pKTtcbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcbiAgICBjb25zdCBzZWNvbmQgPSBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcbiAgICBleHBlY3Qoc2Vjb25kLm1ldGFkYXRhLnNvdXJjZSkudG9CZSgnY2FjaGUnKTtcbiAgfSk7XG5cbiAgaXQoJ1tRUmxpdmU6dG9kYXk6aW52YWxpZGF0ZV0gZGVsZXRlcyBhaV9jYWNoZSByb3dzIG9uIGludmFsaWRhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUudHJpZ2dlckludmFsaWRhdGlvbignbW9vZF9hZGRlZCcsIHVzZXJJZCk7XG4gICAgYXdhaXQgbmV3IFByb21pc2UociA9PiBzZXRUaW1lb3V0KHIsIDE1MCkpO1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnYWlfY2FjaGUnKVxuICAgICAgLnNlbGVjdCgnY2FjaGVfa2V5JylcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAgIC5pbGlrZSgnY2FjaGVfa2V5JywgYHVuaWZpZWQ6JHt1c2VySWR9OiVgKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KChkYXRhIHx8IFtdKS5sZW5ndGgpLnRvQmUoMCk7XG4gIH0pO1xufSk7XG5cblxuIl0sIm1hcHBpbmdzIjoiQUFLQUEsV0FBQSxHQUFLQyxJQUFJLDRCQUF3QixZQUFNO0VBQ3JDLElBQUFDLFFBQUEsR0FBcUNDLE9BQU8sNkJBQTZCLENBQUM7SUFBbEVDLHdCQUF3QixHQUFBRixRQUFBLENBQXhCRSx3QkFBd0I7RUFDaEMsSUFBTUMsTUFBTSxHQUFHRCx3QkFBd0IsQ0FBQyxDQUFDO0VBQ3pDLE9BQU87SUFDTEUsVUFBVSxFQUFFLElBQUk7SUFDaEJDLE9BQU8sRUFBRTtNQUFFQyxjQUFjLEVBQUVIO0lBQU8sQ0FBQztJQUNuQ0csY0FBYyxFQUFFSDtFQUNsQixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUksc0JBQUEsR0FBQU4sT0FBQTtBQUFBLElBQUFPLGtCQUFBLEdBQUFELHNCQUFBLENBQUFOLE9BQUE7QUFBQSxTQUFBSCxZQUFBO0VBQUEsSUFBQVcsU0FBQSxHQUFBUixPQUFBO0lBQUFTLElBQUEsR0FBQUQsU0FBQSxDQUFBQyxJQUFBO0VBQUFaLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFZLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUVILElBQUFDLFNBQUEsR0FBNEJWLE9BQU8sMkNBQXVDLENBQUM7RUFBbkVXLGVBQWUsR0FBQUQsU0FBQSxDQUFmQyxlQUFlO0FBQ3ZCLElBQUFDLFNBQUEsR0FBcUNaLE9BQU8sNkJBQTZCLENBQUM7RUFBbEVDLHdCQUF3QixHQUFBVyxTQUFBLENBQXhCWCx3QkFBd0I7QUFFaEMsSUFBTVksTUFB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