1b9290a89bb29f2132e17139cd392220
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryClient = void 0;
exports.safeStorageKey = safeStorageKey;
exports.storage = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactQuery = require("@tanstack/react-query");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var queryClient = exports.queryClient = new _reactQuery.QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5,
      gcTime: 1000 * 60 * 60 * 24,
      retry: 3,
      retryDelay: function retryDelay(attemptIndex) {
        return Math.min(1000 * 2 ** attemptIndex, 30000);
      }
    }
  }
});
function ensureValidKey(key) {
  if (!key || typeof key !== 'string' || key.trim().length === 0) {
    var err = new Error('AsyncStorage: Invalid key provided');
    import("../features/ai/telemetry/aiTelemetry").then(function (_ref) {
      var trackAIError = _ref.trackAIError;
      return trackAIError({
        code: 'storage_error',
        message: 'Invalid storage key',
        severity: 'medium',
        timestamp: new Date(),
        recoverable: false,
        context: {
          key: key
        }
      });
    }).catch(function () {});
    throw err;
  }
}
var storage = exports.storage = {
  setItem: function () {
    var _setItem = (0, _asyncToGenerator2.default)(function* (key, value) {
      ensureValidKey(key);
      yield _asyncStorage.default.setItem(key, value);
    });
    function setItem(_x, _x2) {
      return _setItem.apply(this, arguments);
    }
    return setItem;
  }(),
  getItem: function () {
    var _getItem = (0, _asyncToGenerator2.default)(function* (key) {
      ensureValidKey(key);
      return yield _asyncStorage.default.getItem(key);
    });
    function getItem(_x3) {
      return _getItem.apply(this, arguments);
    }
    return getItem;
  }(),
  removeItem: function () {
    var _removeItem = (0, _asyncToGenerator2.default)(function* (key) {
      ensureValidKey(key);
      yield _asyncStorage.default.removeItem(key);
    });
    function removeItem(_x4) {
      return _removeItem.apply(this, arguments);
    }
    return removeItem;
  }()
};
function safeStorageKey(base, suffix) {
  var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'anon';
  var baseStr = typeof base === 'string' && base.trim().length > 0 ? base : fallback;
  var suf = typeof suffix === 'string' && suffix.trim().length > 0 ? `_${suffix}` : '';
  return `${baseStr}${suf}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RRdWVyeSIsInJlcXVpcmUiLCJfYXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInF1ZXJ5Q2xpZW50IiwiZXhwb3J0cyIsIlF1ZXJ5Q2xpZW50IiwiZGVmYXVsdE9wdGlvbnMiLCJxdWVyaWVzIiwic3RhbGVUaW1lIiwiZ2NUaW1lIiwicmV0cnkiLCJyZXRyeURlbGF5IiwiYXR0ZW1wdEluZGV4IiwiTWF0aCIsIm1pbiIsImVuc3VyZVZhbGlkS2V5Iiwia2V5IiwidHJpbSIsImxlbmd0aCIsImVyciIsIkVycm9yIiwidGhlbiIsIl9yZWYiLCJ0cmFja0FJRXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsInNldmVyaXR5IiwidGltZXN0YW1wIiwiRGF0ZSIsInJlY292ZXJhYmxlIiwiY29udGV4dCIsImNhdGNoIiwic3RvcmFnZSIsInNldEl0ZW0iLCJfc2V0SXRlbSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJ2YWx1ZSIsIkFzeW5jU3RvcmFnZSIsIl94IiwiX3gyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRJdGVtIiwiX2dldEl0ZW0iLCJfeDMiLCJyZW1vdmVJdGVtIiwiX3JlbW92ZUl0ZW0iLCJfeDQiLCJzYWZlU3RvcmFnZUtleSIsImJhc2UiLCJzdWZmaXgiLCJmYWxsYmFjayIsInVuZGVmaW5lZCIsImJhc2VTdHIiLCJzdWYiXSwic291cmNlcyI6WyJxdWVyeUNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50IH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuXG5leHBvcnQgY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoe1xuICBkZWZhdWx0T3B0aW9uczoge1xuICAgIHF1ZXJpZXM6IHtcbiAgICAgIHN0YWxlVGltZTogMTAwMCAqIDYwICogNSwgLy8gNSBtaW51dGVzXG4gICAgICBnY1RpbWU6IDEwMDAgKiA2MCAqIDYwICogMjQsIC8vIDI0IGhvdXJzXG4gICAgICByZXRyeTogMyxcbiAgICAgIHJldHJ5RGVsYXk6IChhdHRlbXB0SW5kZXgpID0+IE1hdGgubWluKDEwMDAgKiAyICoqIGF0dGVtcHRJbmRleCwgMzAwMDApLFxuICAgIH0sXG4gIH0sXG59KTtcblxuLy8gU3RvcmFnZSB1dGlsaXRpZXMgZm9yIFJlYWN0IFF1ZXJ5IHBlcnNpc3RlbmNlXG5mdW5jdGlvbiBlbnN1cmVWYWxpZEtleShrZXk6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIWtleSB8fCB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJyB8fCBrZXkudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcignQXN5bmNTdG9yYWdlOiBJbnZhbGlkIGtleSBwcm92aWRlZCcpO1xuICAgIC8vIEJlc3QtZWZmb3J0IHRlbGVtZXRyeVxuICAgIGltcG9ydCgnQC9mZWF0dXJlcy9haS90ZWxlbWV0cnkvYWlUZWxlbWV0cnknKVxuICAgICAgLnRoZW4oKHsgdHJhY2tBSUVycm9yIH0pID0+XG4gICAgICAgIHRyYWNrQUlFcnJvcih7IGNvZGU6ICdzdG9yYWdlX2Vycm9yJyBhcyBhbnksIG1lc3NhZ2U6ICdJbnZhbGlkIHN0b3JhZ2Uga2V5Jywgc2V2ZXJpdHk6ICdtZWRpdW0nIGFzIGFueSwgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLCByZWNvdmVyYWJsZTogZmFsc2UsIGNvbnRleHQ6IHsga2V5IH0gfSlcbiAgICAgIClcbiAgICAgIC5jYXRjaCgoKSA9PiB7fSk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlID0ge1xuICBzZXRJdGVtOiBhc3luYyAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICBlbnN1cmVWYWxpZEtleShrZXkpO1xuICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICB9LFxuICBnZXRJdGVtOiBhc3luYyAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBlbnN1cmVWYWxpZEtleShrZXkpO1xuICAgIHJldHVybiBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICB9LFxuICByZW1vdmVJdGVtOiBhc3luYyAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBlbnN1cmVWYWxpZEtleShrZXkpO1xuICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gIH0sXG59O1xuXG4vLyBHw7x2ZW5saSBhbmFodGFyIMO8cmV0aW1pOiB0YW7EsW1zxLF6L2JvxZ8gYW5haHRhcmxhcsSxIGt1bGxhbsSxY8SxLWlkIHZleWEgc2FiaXQgcHJlZml4IGlsZSBnw7x2ZW5lIGFsxLFyXG5leHBvcnQgZnVuY3Rpb24gc2FmZVN0b3JhZ2VLZXkoYmFzZTogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbCwgc3VmZml4Pzogc3RyaW5nLCBmYWxsYmFjazogc3RyaW5nID0gJ2Fub24nKTogc3RyaW5nIHtcbiAgY29uc3QgYmFzZVN0ciA9IHR5cGVvZiBiYXNlID09PSAnc3RyaW5nJyAmJiBiYXNlLnRyaW0oKS5sZW5ndGggPiAwID8gYmFzZSA6IGZhbGxiYWNrO1xuICBjb25zdCBzdWYgPSB0eXBlb2Ygc3VmZml4ID09PSAnc3RyaW5nJyAmJiBzdWZmaXgudHJpbSgpLmxlbmd0aCA+IDAgPyBgXyR7c3VmZml4fWAgOiAnJztcbiAgcmV0dXJuIGAke2Jhc2VTdHJ9JHtzdWZ9YDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQSxJQUFBQSxXQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFTyxJQUFNRyxXQUFXLEdBQUFDLE9BQUEsQ0FBQUQsV0FBQSxHQUFHLElBQUlFLHVCQUFXLENBQUM7RUFDekNDLGNBQWMsRUFBRTtJQUNkQyxPQUFPLEVBQUU7TUFDUEMsU0FBUyxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsQ0FBQztNQUN4QkMsTUFBTSxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7TUFDM0JDLEtBQUssRUFBRSxDQUFDO01BQ1JDLFVBQVUsRUFBRSxTQUFaQSxVQUFVQSxDQUFHQyxZQUFZO1FBQUEsT0FBS0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSUYsWUFBWSxFQUFFLEtBQUssQ0FBQztNQUFBO0lBQ3pFO0VBQ0Y7QUFDRixDQUFDLENBQUM7QUFHRixTQUFTRyxjQUFjQSxDQUFDQyxHQUFXLEVBQVE7RUFDekMsSUFBSSxDQUFDQSxHQUFHLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsSUFBSUEsR0FBRyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQzlELElBQU1DLEdBQUcsR0FBRyxJQUFJQyxLQUFLLENBQUMsb0NBQW9DLENBQUM7SUFFM0QsTUFBTSx1Q0FBc0MsQ0FBQyxDQUMxQ0MsSUFBSSxDQUFDLFVBQUFDLElBQUE7TUFBQSxJQUFHQyxZQUFZLEdBQUFELElBQUEsQ0FBWkMsWUFBWTtNQUFBLE9BQ25CQSxZQUFZLENBQUM7UUFBRUMsSUFBSSxFQUFFLGVBQXNCO1FBQUVDLE9BQU8sRUFBRSxxQkFBcUI7UUFBRUMsUUFBUSxFQUFFLFFBQWU7UUFBRUMsU0FBUyxFQUFFLElBQUlDLElBQUksQ0FBQyxDQUFDO1FBQUVDLFdBQVcsRUFBRSxLQUFLO1FBQUVDLE9BQU8sRUFBRTtVQUFFZCxHQUFHLEVBQUhBO1FBQUk7TUFBRSxDQUFDLENBQUM7SUFBQSxDQUN4SyxDQUFDLENBQ0FlLEtBQUssQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xCLE1BQU1aLEdBQUc7RUFDWDtBQUNGO0FBRU8sSUFBTWEsT0FBTyxHQUFBNUIsT0FBQSxDQUFBNEIsT0FBQSxHQUFHO0VBQ3JCQyxPQUFPO0lBQUEsSUFBQUMsUUFBQSxPQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsV0FBT3BCLEdBQVcsRUFBRXFCLEtBQWEsRUFBSztNQUM3Q3RCLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDO01BQ25CLE1BQU1zQixxQkFBWSxDQUFDTCxPQUFPLENBQUNqQixHQUFHLEVBQUVxQixLQUFLLENBQUM7SUFDeEMsQ0FBQztJQUFBLFNBSERKLE9BQU9BLENBQUFNLEVBQUEsRUFBQUMsR0FBQTtNQUFBLE9BQUFOLFFBQUEsQ0FBQU8sS0FBQSxPQUFBQyxTQUFBO0lBQUE7SUFBQSxPQUFQVCxPQUFPO0VBQUEsR0FHTjtFQUNEVSxPQUFPO0lBQUEsSUFBQUMsUUFBQSxPQUFBVCxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsV0FBT3BCLEdBQVcsRUFBSztNQUM5QkQsY0FBYyxDQUFDQyxHQUFHLENBQUM7TUFDbkIsYUFBYXNCLHFCQUFZLENBQUNLLE9BQU8sQ0FBQzNCLEdBQUcsQ0FBQztJQUN4QyxDQUFDO0lBQUEsU0FIRDJCLE9BQU9BLENBQUFFLEdBQUE7TUFBQSxPQUFBRCxRQUFBLENBQUFILEtBQUEsT0FBQUMsU0FBQTtJQUFBO0lBQUEsT0FBUEMsT0FBTztFQUFBLEdBR047RUFDREcsVUFBVTtJQUFBLElBQUFDLFdBQUEsT0FBQVosa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLFdBQU9wQixHQUFXLEVBQUs7TUFDakNELGNBQWMsQ0FBQ0MsR0FBRyxDQUFDO01BQ25CLE1BQU1zQixxQkFBWSxDQUFDUSxVQUFVLENBQUM5QixHQUFHLENBQUM7SUFDcEMsQ0FBQztJQUFBLFNBSEQ4QixVQUFVQSxDQUFBRSxHQUFBO01BQUEsT0FBQUQsV0FBQSxDQUFBTixLQUFBLE9BQUFDLFNBQUE7SUFBQTtJQUFBLE9BQVZJLFVBQVU7RUFBQTtBQUlaLENBQUM7QUFHTSxTQUFTRyxjQUFjQSxDQUFDQyxJQUErQixFQUFFQyxNQUFlLEVBQXFDO0VBQUEsSUFBbkNDLFFBQWdCLEdBQUFWLFNBQUEsQ0FBQXhCLE1BQUEsUUFBQXdCLFNBQUEsUUFBQVcsU0FBQSxHQUFBWCxTQUFBLE1BQUcsTUFBTTtFQUN4RyxJQUFNWSxPQUFPLEdBQUcsT0FBT0osSUFBSSxLQUFLLFFBQVEsSUFBSUEsSUFBSSxDQUFDakMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsR0FBR2dDLElBQUksR0FBR0UsUUFBUTtFQUNwRixJQUFNRyxHQUFHLEdBQUcsT0FBT0osTUFBTSxLQUFLLFFBQVEsSUFBSUEsTUFBTSxDQUFDbEMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJaUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtFQUN0RixPQUFPLEdBQUdHLE9BQU8sR0FBR0MsR0FBRyxFQUFFO0FBQzNCIiwiaWdub3JlTGlzdCI6W119