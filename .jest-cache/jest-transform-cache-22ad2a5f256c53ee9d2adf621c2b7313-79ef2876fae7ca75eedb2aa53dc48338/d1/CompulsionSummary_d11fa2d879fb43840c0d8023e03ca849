3aebc0409c86c3729382e13e1e972972
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompulsionSummary = CompulsionSummary;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _SupabaseAuthContext = require("../../contexts/SupabaseAuthContext");
var _LanguageContext = require("../../contexts/LanguageContext");
var _compulsions = require("../../constants/compulsions");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function CompulsionSummary(_ref) {
  var _ref$period = _ref.period,
    period = _ref$period === void 0 ? 'today' : _ref$period,
    _ref$showChart = _ref.showChart,
    showChart = _ref$showChart === void 0 ? true : _ref$showChart;
  var _useAuth = (0, _SupabaseAuthContext.useAuth)(),
    user = _useAuth.user;
  var _useLanguage = (0, _LanguageContext.useLanguage)(),
    language = _useLanguage.language;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    entries = _useState2[0],
    setEntries = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(period),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedPeriod = _useState6[0],
    setSelectedPeriod = _useState6[1];
  var loadEntries = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!(user != null && user.id)) return;
      try {
        setLoading(true);
        var compulsionListStr = yield _asyncStorage.default.getItem(`compulsions_${user.id || 'anon'}`);
        if (!compulsionListStr) {
          setEntries([]);
          return;
        }
        var compulsionIds = JSON.parse(compulsionListStr);
        var loadedEntries = [];
        for (var id of compulsionIds) {
          try {
            var entryStr = yield _asyncStorage.default.getItem(id);
            if (entryStr) {
              var entry = JSON.parse(entryStr);
              entry.timestamp = new Date(entry.timestamp);
              entry.createdAt = new Date(entry.createdAt);
              entry.updatedAt = new Date(entry.updatedAt);
              loadedEntries.push(entry);
            }
          } catch (error) {
            console.error(`Error loading entry ${id}:`, error);
          }
        }
        setEntries(loadedEntries);
      } catch (error) {
        console.error('Error loading compulsion entries:', error);
      } finally {
        setLoading(false);
      }
    });
    return function loadEntries() {
      return _ref2.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    loadEntries();
  }, [user == null ? void 0 : user.id]);
  var filteredEntries = (0, _react.useMemo)(function () {
    var now = new Date();
    var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    switch (selectedPeriod) {
      case 'today':
        return entries.filter(function (entry) {
          var entryDate = new Date(entry.timestamp.getFullYear(), entry.timestamp.getMonth(), entry.timestamp.getDate());
          return entryDate.getTime() === today.getTime();
        });
      case 'week':
        var weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        return entries.filter(function (entry) {
          return entry.timestamp >= weekAgo;
        });
      case 'month':
        var monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
        return entries.filter(function (entry) {
          return entry.timestamp >= monthAgo;
        });
      default:
        return entries;
    }
  }, [entries, selectedPeriod]);
  var stats = (0, _react.useMemo)(function () {
    if (filteredEntries.length === 0) {
      return {
        totalEntries: 0,
        todayEntries: 0,
        weeklyEntries: 0,
        monthlyEntries: 0,
        averageIntensity: 0,
        averageResistance: 0,
        mostCommonType: 'washing',
        longestDuration: 0,
        improvementPercentage: 0,
        streakDays: 0,
        totalCompulsions: 0,
        avgResistance: 0
      };
    }
    var totalIntensity = filteredEntries.reduce(function (sum, entry) {
      return sum + entry.intensity;
    }, 0);
    var totalResistance = filteredEntries.reduce(function (sum, entry) {
      return sum + entry.resistanceLevel;
    }, 0);
    var avgIntensity = totalIntensity / filteredEntries.length;
    var avgResistance = totalResistance / filteredEntries.length;
    var typeCounts = {};
    filteredEntries.forEach(function (entry) {
      typeCounts[entry.type] = (typeCounts[entry.type] || 0) + 1;
    });
    var mostCommonType = Object.keys(typeCounts).reduce(function (a, b) {
      return typeCounts[a] > typeCounts[b] ? a : b;
    });
    var longestDuration = Math.max.apply(Math, [0].concat((0, _toConsumableArray2.default)(filteredEntries.map(function (entry) {
      return entry.duration || 0;
    }))));
    var windowMillis = selectedPeriod === 'today' ? 24 * 60 * 60 * 1000 : selectedPeriod === 'week' ? 7 * 24 * 60 * 60 * 1000 : 30 * 24 * 60 * 60 * 1000;
    var end = new Date();
    var start = new Date(end.getTime() - windowMillis);
    var prevStart = new Date(start.getTime() - windowMillis);
    var prevEnd = new Date(start.getTime());
    var prevEntries = entries.filter(function (e) {
      return e.timestamp >= prevStart && e.timestamp < prevEnd;
    });
    var currCount = filteredEntries.length;
    var prevCount = prevEntries.length;
    var improvementPercentage = prevCount > 0 ? Number(((prevCount - currCount) / prevCount * 100).toFixed(1)) : 0;
    var streakDays = 0;
    var today = new Date();
    var _loop = function _loop() {
      var date = new Date(today.getFullYear(), today.getMonth(), today.getDate() - i);
      var startDay = new Date(date.getFullYear(), date.getMonth(), date.getDate());
      var endDay = new Date(startDay.getTime() + 24 * 60 * 60 * 1000);
      var dayCount = entries.filter(function (e) {
        return e.timestamp >= startDay && e.timestamp < endDay;
      }).length;
      if (dayCount === 0) streakDays++;else return 1;
    };
    for (var i = 0; i < 30; i++) {
      if (_loop()) break;
    }
    return {
      totalEntries: filteredEntries.length,
      todayEntries: filteredEntries.length,
      weeklyEntries: filteredEntries.length,
      monthlyEntries: filteredEntries.length,
      averageIntensity: Number(avgIntensity.toFixed(1)),
      averageResistance: Number(avgResistance.toFixed(1)),
      mostCommonType: mostCommonType,
      longestDuration: longestDuration,
      improvementPercentage: improvementPercentage,
      streakDays: streakDays,
      totalCompulsions: filteredEntries.length,
      avgResistance: Number(avgResistance.toFixed(1))
    };
  }, [filteredEntries]);
  var typeBreakdown = (0, _react.useMemo)(function () {
    var breakdown = {};
    filteredEntries.forEach(function (entry) {
      if (!breakdown[entry.type]) {
        breakdown[entry.type] = {
          count: 0,
          avgIntensity: 0,
          avgResistance: 0,
          totalDuration: 0
        };
      }
      breakdown[entry.type].count++;
      breakdown[entry.type].avgIntensity += entry.intensity;
      breakdown[entry.type].avgResistance += entry.resistanceLevel;
      breakdown[entry.type].totalDuration += entry.duration || 0;
    });
    Object.keys(breakdown).forEach(function (type) {
      var data = breakdown[type];
      data.avgIntensity = Number((data.avgIntensity / data.count).toFixed(1));
      data.avgResistance = Number((data.avgResistance / data.count).toFixed(1));
    });
    return breakdown;
  }, [filteredEntries]);
  var dailyBreakdown = (0, _react.useMemo)(function () {
    var days = [];
    var today = new Date();
    var _loop2 = function _loop2() {
      var date = new Date(today.getTime() - i * 24 * 60 * 60 * 1000);
      var dayStart = new Date(date.getFullYear(), date.getMonth(), date.getDate());
      var dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);
      var dayEntries = entries.filter(function (entry) {
        return entry.timestamp >= dayStart && entry.timestamp < dayEnd;
      });
      var compulsionsByType = {};
      _compulsions.COMPULSION_CATEGORIES.forEach(function (cat) {
        compulsionsByType[cat.id] = dayEntries.filter(function (e) {
          return e.type === cat.id;
        }).length;
      });
      var moodAvg = dayEntries.length > 0 && dayEntries.every(function (e) {
        return typeof e.mood === 'number';
      }) ? Number((dayEntries.reduce(function (s, e) {
        return s + (e.mood || 0);
      }, 0) / dayEntries.length).toFixed(1)) : 0;
      days.push({
        date: dayStart,
        count: dayEntries.length,
        avgResistance: dayEntries.length > 0 ? Number((dayEntries.reduce(function (sum, e) {
          return sum + e.resistanceLevel;
        }, 0) / dayEntries.length).toFixed(1)) : 0,
        types: Object.keys(compulsionsByType),
        totalCompulsions: dayEntries.length,
        averageIntensity: dayEntries.length > 0 ? Number((dayEntries.reduce(function (sum, e) {
          return sum + e.intensity;
        }, 0) / dayEntries.length).toFixed(1)) : 0,
        averageResistance: dayEntries.length > 0 ? Number((dayEntries.reduce(function (sum, e) {
          return sum + e.resistanceLevel;
        }, 0) / dayEntries.length).toFixed(1)) : 0,
        totalDuration: dayEntries.reduce(function (sum, e) {
          return sum + (e.duration || 0);
        }, 0),
        mood: moodAvg >= 0.7 ? 'positive' : moodAvg <= 0.3 ? 'negative' : 'neutral',
        compulsionsByType: compulsionsByType
      });
    };
    for (var i = 6; i >= 0; i--) {
      _loop2();
    }
    return days;
  }, [entries]);
  var formatDuration = function formatDuration(minutes) {
    if (minutes < 60) return `${minutes}dk`;
    var hours = Math.floor(minutes / 60);
    var remainingMinutes = minutes % 60;
    return remainingMinutes > 0 ? `${hours}s ${remainingMinutes}dk` : `${hours}s`;
  };
  var getIntensityColor = function getIntensityColor(intensity) {
    if (intensity <= 3) return '#10B981';
    if (intensity <= 6) return '#F59E0B';
    return '#EF4444';
  };
  var getResistanceColor = function getResistanceColor(resistance) {
    if (resistance >= 7) return '#10B981';
    if (resistance >= 4) return '#F59E0B';
    return '#EF4444';
  };
  var periodLabels = {
    today: 'Bugün',
    week: 'Bu Hafta',
    month: 'Bu Ay'
  };
  if (loading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.loadingContainer,
      children: (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        variant: "bodyMedium",
        children: "Veriler y\xFCkleniyor..."
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    showsVerticalScrollIndicator: false,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.periodSelector,
      children: (0, _jsxRuntime.jsx)(_reactNativePaper.SegmentedButtons, {
        value: selectedPeriod,
        onValueChange: function onValueChange(value) {
          return setSelectedPeriod(value);
        },
        buttons: [{
          value: 'today',
          label: '📅 Bugün'
        }, {
          value: 'week',
          label: '📊 Hafta'
        }, {
          value: 'month',
          label: '📈 Ay'
        }]
      })
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
      style: styles.card,
      children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
        children: [(0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
          variant: "titleMedium",
          style: styles.cardTitle,
          children: [periodLabels[selectedPeriod], " \xD6zeti"]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.statsGrid,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              variant: "headlineMedium",
              style: [styles.statNumber, {
                color: '#1F2937'
              }],
              children: stats.totalEntries
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              variant: "bodySmall",
              style: styles.statLabel,
              children: "Toplam Kay\u0131t"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
              variant: "headlineMedium",
              style: [styles.statNumber, {
                color: getIntensityColor(stats.averageIntensity || 0)
              }],
              children: [stats.averageIntensity || 0, "/10"]
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              variant: "bodySmall",
              style: styles.statLabel,
              children: "Ortalama \u015Eiddet"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
              variant: "headlineMedium",
              style: [styles.statNumber, {
                color: getResistanceColor(stats.averageResistance || 0)
              }],
              children: [stats.averageResistance || 0, "/10"]
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              variant: "bodySmall",
              style: styles.statLabel,
              children: "Ortalama Diren\xE7"
            })]
          })]
        }), (stats.longestDuration || 0) > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.additionalStats,
          children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Divider, {
            style: styles.divider
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.additionalStatsRow,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              variant: "bodyMedium",
              style: styles.additionalStatLabel,
              children: "\u23F1\uFE0F En Uzun S\xFCre:"
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              variant: "bodyMedium",
              style: styles.additionalStatValue,
              children: formatDuration(stats.longestDuration || 0)
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.additionalStatsRow,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              variant: "bodyMedium",
              style: styles.additionalStatLabel,
              children: "\uD83C\uDFAF En Yayg\u0131n T\xFCr:"
            }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Chip, {
              mode: "outlined",
              compact: true,
              style: styles.typeChip,
              children: [(0, _compulsions.getCompulsionCategory)(stats.mostCommonType).icon, " ", language === 'tr' ? (0, _compulsions.getCompulsionCategory)(stats.mostCommonType).name : (0, _compulsions.getCompulsionCategory)(stats.mostCommonType).nameEn]
            })]
          })]
        })]
      })
    }), Object.keys(typeBreakdown).length > 0 && (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
      style: styles.card,
      children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          variant: "titleMedium",
          style: styles.cardTitle,
          children: "T\xFCre G\xF6re Da\u011F\u0131l\u0131m"
        }), Object.entries(typeBreakdown).map(function (_ref3) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
            type = _ref4[0],
            data = _ref4[1];
          var category = (0, _compulsions.getCompulsionCategory)(type);
          return (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.typeBreakdownItem,
            children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.typeHeader,
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.typeIcon, {
                  backgroundColor: category.color
                }],
                children: (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                  style: styles.typeIconText,
                  children: category.icon
                })
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.typeInfo,
                children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                  variant: "titleSmall",
                  style: styles.typeName,
                  children: language === 'tr' ? category.name : category.nameEn
                }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
                  variant: "bodySmall",
                  style: styles.typeCount,
                  children: [data.count, " kay\u0131t"]
                })]
              })]
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.typeMetrics,
              children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.typeMetric,
                children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                  variant: "bodySmall",
                  style: styles.metricLabel,
                  children: "\u015Eiddet"
                }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
                  variant: "bodyMedium",
                  style: [styles.metricValue, {
                    color: getIntensityColor(data.avgIntensity)
                  }],
                  children: [data.avgIntensity, "/10"]
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.typeMetric,
                children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                  variant: "bodySmall",
                  style: styles.metricLabel,
                  children: "Diren\xE7"
                }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
                  variant: "bodyMedium",
                  style: [styles.metricValue, {
                    color: getResistanceColor(data.avgResistance)
                  }],
                  children: [data.avgResistance, "/10"]
                })]
              }), data.totalDuration > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.typeMetric,
                children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                  variant: "bodySmall",
                  style: styles.metricLabel,
                  children: "S\xFCre"
                }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                  variant: "bodyMedium",
                  style: styles.metricValue,
                  children: formatDuration(data.totalDuration)
                })]
              })]
            })]
          }, type);
        })]
      })
    }), selectedPeriod !== 'today' && showChart && (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
      style: styles.card,
      children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          variant: "titleMedium",
          style: styles.cardTitle,
          children: "G\xFCnl\xFCk Trend"
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.chartContainer,
          children: dailyBreakdown.map(function (day, index) {
            return (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.chartBar,
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.barFill, {
                  height: Math.max(4, (day.totalCompulsions || 0) / Math.max.apply(Math, (0, _toConsumableArray2.default)(dailyBreakdown.map(function (d) {
                    return d.totalCompulsions || 0;
                  })).concat([1])) * 100),
                  backgroundColor: (day.totalCompulsions || 0) > 0 ? '#10B981' : '#E5E7EB'
                }]
              }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                variant: "bodySmall",
                style: styles.chartLabel,
                children: (day.date instanceof Date ? day.date : new Date(day.date)).getDate()
              }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                variant: "bodySmall",
                style: styles.chartCount,
                children: day.totalCompulsions
              })]
            }, index);
          })
        })]
      })
    }), stats.totalEntries === 0 && (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
      style: styles.card,
      children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
        style: styles.emptyState,
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          variant: "headlineSmall",
          style: styles.emptyTitle,
          children: "\uD83D\uDCCA Hen\xFCz veri yok"
        }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
          variant: "bodyMedium",
          style: styles.emptySubtitle,
          children: [periodLabels[selectedPeriod], " i\xE7in hen\xFCz komp\xFClsiyon kayd\u0131 bulunmuyor."]
        })]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB'
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F9FAFB'
  },
  periodSelector: {
    padding: 16,
    paddingBottom: 8
  },
  card: {
    marginHorizontal: 16,
    marginBottom: 16,
    elevation: 2,
    borderRadius: 12
  },
  cardTitle: {
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 16
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 16
  },
  statItem: {
    alignItems: 'center'
  },
  statNumber: {
    fontWeight: 'bold',
    marginBottom: 4
  },
  statLabel: {
    color: '#6B7280',
    textAlign: 'center'
  },
  additionalStats: {
    marginTop: 8
  },
  divider: {
    marginVertical: 12
  },
  additionalStatsRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8
  },
  additionalStatLabel: {
    color: '#374151',
    marginRight: 8
  },
  additionalStatValue: {
    color: '#1F2937',
    fontWeight: '600'
  },
  typeChip: {
    height: 28
  },
  typeBreakdownItem: {
    marginBottom: 16,
    padding: 12,
    backgroundColor: '#F9FAFB',
    borderRadius: 8
  },
  typeHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12
  },
  typeIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12
  },
  typeIconText: {
    fontSize: 14
  },
  typeInfo: {
    flex: 1
  },
  typeName: {
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 2
  },
  typeCount: {
    color: '#6B7280'
  },
  typeMetrics: {
    flexDirection: 'row',
    gap: 16
  },
  typeMetric: {
    alignItems: 'center'
  },
  metricLabel: {
    color: '#6B7280',
    fontSize: 10,
    marginBottom: 2
  },
  metricValue: {
    fontWeight: '600',
    fontSize: 13
  },
  chartContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'flex-end',
    height: 120,
    paddingTop: 20
  },
  chartBar: {
    alignItems: 'center',
    flex: 1,
    maxWidth: 40
  },
  barFill: {
    width: 24,
    backgroundColor: '#10B981',
    borderRadius: 2,
    marginBottom: 8
  },
  chartLabel: {
    color: '#6B7280',
    marginBottom: 2
  },
  chartCount: {
    color: '#374151',
    fontWeight: '600',
    fontSize: 10
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 32
  },
  emptyTitle: {
    color: '#374151',
    marginBottom: 8,
    textAlign: 'center'
  },
  emptySubtitle: {
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 20
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,