{"version":3,"names":["_getJestObj","mock","supabase","mockClient","_interopRequireDefault","require","_asyncToGenerator2","_supabase","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_require","jest","callLog","qb","table","state","filters","api","select","fn","_len","arguments","length","args","Array","_key","push","op","upsert","_len2","_key2","insert","_len3","_key3","update","_len4","_key4","delete","_len5","_key5","eq","field","value","maybeSingle","data","error","single","ok","mockAuth","getUser","user","id","email","user_metadata","name","app_metadata","provider","updateUser","from","auth","beforeEach","clearAllMocks","describe","test","qbUsers","mockImplementation","mockResolvedValueOnce","svc","supabaseNamed","supabaseDefault","res","createGamificationProfile","usersUpsert","find","l","expect","toBeTruthy","upsertBody","toMatchObject","gpUpsert","toBe","userId","payload","profile","age","gender","locale","timezone","motivation","first_mood","score","tags","lifestyle","sleep_hours","exercise","social","reminders","enabled","time","days","feature_flags","a","b","consent","accepted","upsertUserProfile","body","user_id","motivations","toEqual","first_mood_score","first_mood_tags","reminder_enabled","reminder_time","onboarding_version","onboarding_completed_at"],"sources":["auth_onboarding_supabase.test.ts"],"sourcesContent":["import supabaseDefault, { supabaseService as supabaseNamed } from '@/services/supabase';\n\n// Lightweight Supabase client mock wired via module alias\ntype AnyFn = (...args: any[]) => any;\n\nconst callLog: any[] = [];\n\n// Chainable query builder mock\nfunction qb(table: string) {\n  const state: any = { table, filters: [] };\n  const api: any = {\n    select: jest.fn((...args: any[]) => { callLog.push({ op: 'select', table, args }); return api; }),\n    upsert: jest.fn((...args: any[]) => { callLog.push({ op: 'upsert', table, args }); return api; }),\n    insert: jest.fn((...args: any[]) => { callLog.push({ op: 'insert', table, args }); return api; }),\n    update: jest.fn((...args: any[]) => { callLog.push({ op: 'update', table, args }); return api; }),\n    delete: jest.fn((...args: any[]) => { callLog.push({ op: 'delete', table, args }); return api; }),\n    eq: jest.fn((field: string, value: any) => { state.filters.push({ field, value }); return api; }),\n    maybeSingle: jest.fn(async () => ({ data: null, error: null })),\n    single: jest.fn(async () => ({ data: { ok: true }, error: null })),\n  };\n  return api;\n}\n\nconst mockAuth = {\n  getUser: jest.fn(async () => ({\n    user: {\n      id: 'user-1',\n      email: 'new@user.test',\n      user_metadata: { name: 'New User' },\n      app_metadata: { provider: 'email' }\n    }\n  })),\n  updateUser: jest.fn(async () => ({ data: {}, error: null })),\n};\n\nconst mockClient = {\n  from: jest.fn((table: string) => qb(table)),\n  auth: mockAuth,\n};\n\njest.mock('@/lib/supabase', () => ({\n  supabase: mockClient,\n}));\n\nbeforeEach(() => {\n  callLog.length = 0;\n  jest.clearAllMocks();\n});\n\ndescribe('Signup + Onboarding Supabase writes', () => {\n  test('createGamificationProfile ensures users row upsert when missing', async () => {\n    // Arrange: make users select().eq().single() return no row\n    const qbUsers = qb('users');\n    (mockClient.from as AnyFn).mockImplementation((table: string) => {\n      if (table === 'users') {\n        // override single() for first select to simulate missing user\n        qbUsers.single.mockResolvedValueOnce({ data: null, error: null });\n        // for upsert().select().single() after ensureUserProfileExists\n        return qbUsers;\n      }\n      return qb(table);\n    });\n\n    // Act\n    const svc = (supabaseNamed || supabaseDefault) as any;\n    const res = await svc.createGamificationProfile('user-1');\n\n    // Assert: users upsert called with id/email/name/provider\n    const usersUpsert = callLog.find(l => l.op === 'upsert' && l.table === 'users');\n    expect(usersUpsert).toBeTruthy();\n    const upsertBody = usersUpsert.args[0];\n    expect(upsertBody).toMatchObject({ id: 'user-1', email: 'new@user.test', provider: 'email' });\n\n    // And gamification_profiles upsert executed\n    const gpUpsert = callLog.find(l => l.op === 'upsert' && l.table === 'gamification_profiles');\n    expect(gpUpsert).toBeTruthy();\n    expect(res === null || typeof res === 'object').toBe(true);\n  });\n\n  test('upsertUserProfile maps onboarding payload correctly into user_profiles', async () => {\n    const userId = 'user-2';\n    const payload = {\n      profile: { age: 27, gender: 'male', locale: 'tr-TR', timezone: 'Europe/Istanbul' },\n      motivation: ['stress_reduction', 'mental_clarity'],\n      first_mood: { score: 6, tags: ['work', 'sleep'] }, // score should clamp to 5\n      lifestyle: { sleep_hours: 5, exercise: 'Regular', social: 'High' },\n      reminders: { enabled: true, time: '21:30', days: ['Mon','Wed'], timezone: 'Europe/Istanbul' },\n      feature_flags: { a: true, b: false },\n      consent: { accepted: true },\n    };\n\n    // fresh mock per test\n    (mockClient.from as AnyFn).mockImplementation((table: string) => qb(table));\n\n    const svc = (supabaseNamed || supabaseDefault) as any;\n    await svc.upsertUserProfile(userId, payload);\n\n    const upsert = callLog.find(l => l.op === 'upsert' && l.table === 'user_profiles');\n    expect(upsert).toBeTruthy();\n    const body = upsert.args[0];\n\n    // Key field expectations\n    expect(body.user_id).toBe(userId);\n    expect(body.motivations).toEqual(['stress_reduction', 'mental_clarity']);\n    expect(body.first_mood_score).toBe(5); // clamped\n    expect(body.first_mood_tags).toEqual(['work','sleep']);\n    expect(body.reminder_enabled).toBe(true);\n    expect(body.reminder_time).toBe('21:30');\n    expect(body.feature_flags).toEqual({ a: true, b: false });\n    expect(body.onboarding_version).toBe(2);\n    expect(typeof body.onboarding_completed_at).toBe('string');\n  });\n});\n"],"mappings":"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","ignoreList":[]}