0fdf152a10316e6bef7b60cbe620e7b4
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = waitForElementToBeRemoved;
var _errors = require("./helpers/errors");
var _waitFor = _interopRequireDefault(require("./wait-for"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function isRemoved(result) {
  return !result || Array.isArray(result) && !result.length;
}
function waitForElementToBeRemoved(_x, _x2) {
  return _waitForElementToBeRemoved.apply(this, arguments);
}
function _waitForElementToBeRemoved() {
  _waitForElementToBeRemoved = (0, _asyncToGenerator2.default)(function* (expectation, options) {
    var timeoutError = new _errors.ErrorWithStack('Timed out in waitForElementToBeRemoved.', waitForElementToBeRemoved);
    var initialElements = expectation();
    if (isRemoved(initialElements)) {
      throw new _errors.ErrorWithStack('The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.', waitForElementToBeRemoved);
    }
    return yield (0, _waitFor.default)(function () {
      var result;
      try {
        result = expectation();
      } catch (_unused) {
        return initialElements;
      }
      if (!isRemoved(result)) {
        throw timeoutError;
      }
      return initialElements;
    }, options);
  });
  return _waitForElementToBeRemoved.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXJyb3JzIiwicmVxdWlyZSIsIl93YWl0Rm9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImlzUmVtb3ZlZCIsInJlc3VsdCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIndhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQiLCJfeCIsIl94MiIsIl93YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJleHBlY3RhdGlvbiIsIm9wdGlvbnMiLCJ0aW1lb3V0RXJyb3IiLCJFcnJvcldpdGhTdGFjayIsImluaXRpYWxFbGVtZW50cyIsIl91bnVzZWQiXSwic291cmNlcyI6WyIuLi9zcmMvd2FpdC1mb3ItZWxlbWVudC10by1iZS1yZW1vdmVkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9yV2l0aFN0YWNrIH0gZnJvbSAnLi9oZWxwZXJzL2Vycm9ycyc7XG5pbXBvcnQgdHlwZSB7IFdhaXRGb3JPcHRpb25zIH0gZnJvbSAnLi93YWl0LWZvcic7XG5pbXBvcnQgd2FpdEZvciBmcm9tICcuL3dhaXQtZm9yJztcblxuZnVuY3Rpb24gaXNSZW1vdmVkPFQ+KHJlc3VsdDogVCk6IGJvb2xlYW4ge1xuICByZXR1cm4gIXJlc3VsdCB8fCAoQXJyYXkuaXNBcnJheShyZXN1bHQpICYmICFyZXN1bHQubGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZDxUPihcbiAgZXhwZWN0YXRpb246ICgpID0+IFQsXG4gIG9wdGlvbnM/OiBXYWl0Rm9yT3B0aW9ucyxcbik6IFByb21pc2U8VD4ge1xuICAvLyBDcmVhdGVkIGhlcmUgc28gd2UgZ2V0IGEgbmljZSBzdGFja3RyYWNlXG4gIGNvbnN0IHRpbWVvdXRFcnJvciA9IG5ldyBFcnJvcldpdGhTdGFjayhcbiAgICAnVGltZWQgb3V0IGluIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQuJyxcbiAgICB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkLFxuICApO1xuXG4gIC8vIEVsZW1lbnRzIGhhdmUgdG8gYmUgcHJlc2VudCBpbml0YWxseSBhbmQgdGhlbiByZW1vdmVkLlxuICBjb25zdCBpbml0aWFsRWxlbWVudHMgPSBleHBlY3RhdGlvbigpO1xuICBpZiAoaXNSZW1vdmVkKGluaXRpYWxFbGVtZW50cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2soXG4gICAgICAnVGhlIGVsZW1lbnQocykgZ2l2ZW4gdG8gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCBhcmUgYWxyZWFkeSByZW1vdmVkLiB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkIHJlcXVpcmVzIHRoYXQgdGhlIGVsZW1lbnQocykgZXhpc3QocykgYmVmb3JlIHdhaXRpbmcgZm9yIHJlbW92YWwuJyxcbiAgICAgIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBleHBlY3RhdGlvbigpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGluaXRpYWxFbGVtZW50cztcbiAgICB9XG5cbiAgICBpZiAoIWlzUmVtb3ZlZChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyB0aW1lb3V0RXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluaXRpYWxFbGVtZW50cztcbiAgfSwgb3B0aW9ucyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsUUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQWlDLFNBQUFFLHVCQUFBQyxDQUFBO0VBQUEsT0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQUVqQyxTQUFTRyxTQUFTQSxDQUFJQyxNQUFTLEVBQVc7RUFDeEMsT0FBTyxDQUFDQSxNQUFNLElBQUtDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixNQUFNLENBQUMsSUFBSSxDQUFDQSxNQUFNLENBQUNHLE1BQU87QUFDN0Q7QUFBQSxTQUU4QkMseUJBQXlCQSxDQUFBQyxFQUFBLEVBQUFDLEdBQUE7RUFBQSxPQUFBQywwQkFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQTtBQUFBLFNBQUFGLDJCQUFBO0VBQUFBLDBCQUFBLE9BQUFHLGtCQUFBLENBQUFaLE9BQUEsRUFBeEMsV0FDYmEsV0FBb0IsRUFDcEJDLE9BQXdCLEVBQ1o7SUFFWixJQUFNQyxZQUFZLEdBQUcsSUFBSXJCLE9BQUEsQ0FBQXNCLGNBQWMsQ0FDckMseUNBQXlDLEVBQ3pDVix5QkFDRixDQUFDO0lBR0QsSUFBTVcsZUFBZSxHQUFHSixXQUFXLENBQUMsQ0FBQztJQUNyQyxJQUFJWixTQUFTLENBQUNnQixlQUFlLENBQUMsRUFBRTtNQUM5QixNQUFNLElBQUl2QixPQUFBLENBQUFzQixjQUFjLENBQ3RCLG9LQUFvSyxFQUNwS1YseUJBQ0YsQ0FBQztJQUNIO0lBRUEsYUFBYSxJQUFBVixRQUFBLENBQUFJLE9BQU8sRUFBQyxZQUFNO01BQ3pCLElBQUlFLE1BQU07TUFDVixJQUFJO1FBQ0ZBLE1BQU0sR0FBR1csV0FBVyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDLE9BQUFLLE9BQUEsRUFBTTtRQUNOLE9BQU9ELGVBQWU7TUFDeEI7TUFFQSxJQUFJLENBQUNoQixTQUFTLENBQUNDLE1BQU0sQ0FBQyxFQUFFO1FBQ3RCLE1BQU1hLFlBQVk7TUFDcEI7TUFFQSxPQUFPRSxlQUFlO0lBQ3hCLENBQUMsRUFBRUgsT0FBTyxDQUFDO0VBQ2I7RUFBQSxPQUFBTCwwQkFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==