{"version":3,"names":["_getJestObj","mock","__esModule","default","supabaseClient","from","jest","fn","select","eq","maybeSingle","_asyncToGenerator2","data","error","upsert","delete","like","actual","requireActual","Object","assign","trackAIInteraction","_interopRequireDefault","require","_asyncStorage","_UnifiedAIPipeline","_seedData","_require","actualTelemetry","AIEventType","describe","userId","TEST_ENV","SEED_USER_ID","_ref7","beforeAll","process","env","TEST_MODE","TEST_TTL_MS","TEST_PIPELINE_STUB","TEST_SEED_USER_ID","EXPO_PUBLIC_ENABLE_AI","beforeEach","clearAllMocks","AsyncStorage","clear","it","_res$analytics","raw","generateCBTData","CBT_SCENARIOS","high","cbtRecords","map","r","timestamp","created_at","res","unifiedPipeline","type","content","context","source","expect","metadata","toBe","analytics","cbt","sampleSize","toBeGreaterThan","medium","second","calls","args","toContain","UNIFIED_PIPELINE_CACHE_HIT"],"sources":["SystemCBTPipeline.spec.tsx"],"sourcesContent":["/**\n * ðŸ§ª System-Mode Tests â€” CBT (Real UnifiedAIPipeline)\n *\n * Verifies CBT analytics path via real pipeline with deterministic records.\n * Tags: [QRsys:cbt:fresh|cache|hidden]\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { unifiedPipeline } from '@/features/ai/core/UnifiedAIPipeline';\n\nconst actualTelemetry = jest.requireActual('@/features/ai/telemetry/aiTelemetry');\nimport type { AIEventType as AIEventTypeType } from '@/features/ai/telemetry/aiTelemetry';\nconst AIEventType: typeof actualTelemetry.AIEventType = actualTelemetry.AIEventType;\n\nimport { CBT_SCENARIOS, generateCBTData, TEST_ENV } from '../fixtures/seedData';\n\njest.mock('@/services/supabase', () => ({\n  __esModule: true,\n  default: {\n    supabaseClient: {\n      from: jest.fn(() => ({\n        select: jest.fn(() => ({ eq: jest.fn(() => ({ maybeSingle: jest.fn(async () => ({ data: null, error: null })) })) })),\n        upsert: jest.fn(async () => ({ data: null, error: null })),\n        delete: jest.fn(() => ({ eq: jest.fn(async () => ({ data: null, error: null })) })),\n        like: jest.fn(() => ({ delete: jest.fn(() => ({ eq: jest.fn(async () => ({ data: null, error: null })) })) })),\n        eq: jest.fn(() => ({ maybeSingle: jest.fn(async () => ({ data: null, error: null })) })),\n      }))\n    }\n  }\n}));\n\njest.mock('@/features/ai/telemetry/aiTelemetry', () => {\n  const actual = jest.requireActual('@/features/ai/telemetry/aiTelemetry');\n  return {\n    __esModule: true,\n    ...actual,\n    trackAIInteraction: jest.fn(async () => {}),\n  };\n});\n\ndescribe('System CBT - Unified Pipeline', () => {\n  const userId = TEST_ENV.SEED_USER_ID;\n  const { trackAIInteraction } = require('@/features/ai/telemetry/aiTelemetry') as typeof actualTelemetry & { trackAIInteraction: jest.Mock };\n\n  beforeAll(() => {\n    process.env.TEST_MODE = '1';\n    process.env.TEST_TTL_MS = '5000';\n    process.env.TEST_PIPELINE_STUB = '0';\n    process.env.TEST_SEED_USER_ID = userId;\n    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';\n  });\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    await (AsyncStorage as any).clear();\n  });\n\n  it('[QRsys:cbt:fresh] processes fresh and populates minimal analytics', async () => {\n    const raw = generateCBTData(CBT_SCENARIOS.high);\n    const cbtRecords = raw.map(r => ({ ...r, timestamp: r.created_at }));\n\n    const res = await unifiedPipeline.process({ userId, type: 'data', content: { cbtRecords }, context: { source: 'cbt' } });\n    expect(res.metadata.source).toBe('fresh');\n    // Minimal analytics present when data has mood_before/after\n    expect((res.analytics as any)?.cbt?.sampleSize).toBeGreaterThan(0);\n  });\n\n  it('[QRsys:cbt:cache] returns cached result on repeat', async () => {\n    const raw = generateCBTData(CBT_SCENARIOS.medium);\n    const cbtRecords = raw.map(r => ({ ...r, timestamp: r.created_at }));\n\n    await unifiedPipeline.process({ userId, type: 'data', content: { cbtRecords }, context: { source: 'cbt' } });\n    const second = await unifiedPipeline.process({ userId, type: 'data', content: { cbtRecords }, context: { source: 'cbt' } });\n    expect(second.metadata.source).toBe('cache');\n\n    const calls = (trackAIInteraction as jest.Mock).mock.calls.map(args => args[0]);\n    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_CACHE_HIT as unknown as AIEventTypeType);\n  });\n\n  it('[QRsys:cbt:hidden] has no qualityMetadata (UI hides)', async () => {\n    const res = await unifiedPipeline.process({ userId, type: 'data', content: {}, context: { source: 'cbt' } });\n    expect('qualityMetadata' in (res as any)).toBe(false);\n  });\n});\n\n"],"mappings":"AAgBAA,WAAA,GAAKC,IAAI,4BAAwB;EAAA,OAAO;IACtCC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,cAAc,EAAE;QACdC,IAAI,EAAEC,IAAI,CAACC,EAAE,CAAC;UAAA,OAAO;YACnBC,MAAM,EAAEF,IAAI,CAACC,EAAE,CAAC;cAAA,OAAO;gBAAEE,EAAE,EAAEH,IAAI,CAACC,EAAE,CAAC;kBAAA,OAAO;oBAAEG,WAAW,EAAEJ,IAAI,CAACC,EAAE,KAAAI,kBAAA,CAAAR,OAAA,EAAC;sBAAA,OAAa;wBAAES,IAAI,EAAE,IAAI;wBAAEC,KAAK,EAAE;sBAAK,CAAC;oBAAA,CAAC;kBAAE,CAAC;gBAAA,CAAC;cAAE,CAAC;YAAA,CAAC,CAAC;YACrHC,MAAM,EAAER,IAAI,CAACC,EAAE,KAAAI,kBAAA,CAAAR,OAAA,EAAC;cAAA,OAAa;gBAAES,IAAI,EAAE,IAAI;gBAAEC,KAAK,EAAE;cAAK,CAAC;YAAA,CAAC,EAAC;YAC1DE,MAAM,EAAET,IAAI,CAACC,EAAE,CAAC;cAAA,OAAO;gBAAEE,EAAE,EAAEH,IAAI,CAACC,EAAE,KAAAI,kBAAA,CAAAR,OAAA,EAAC;kBAAA,OAAa;oBAAES,IAAI,EAAE,IAAI;oBAAEC,KAAK,EAAE;kBAAK,CAAC;gBAAA,CAAC;cAAE,CAAC;YAAA,CAAC,CAAC;YACnFG,IAAI,EAAEV,IAAI,CAACC,EAAE,CAAC;cAAA,OAAO;gBAAEQ,MAAM,EAAET,IAAI,CAACC,EAAE,CAAC;kBAAA,OAAO;oBAAEE,EAAE,EAAEH,IAAI,CAACC,EAAE,KAAAI,kBAAA,CAAAR,OAAA,EAAC;sBAAA,OAAa;wBAAES,IAAI,EAAE,IAAI;wBAAEC,KAAK,EAAE;sBAAK,CAAC;oBAAA,CAAC;kBAAE,CAAC;gBAAA,CAAC;cAAE,CAAC;YAAA,CAAC,CAAC;YAC9GJ,EAAE,EAAEH,IAAI,CAACC,EAAE,CAAC;cAAA,OAAO;gBAAEG,WAAW,EAAEJ,IAAI,CAACC,EAAE,KAAAI,kBAAA,CAAAR,OAAA,EAAC;kBAAA,OAAa;oBAAES,IAAI,EAAE,IAAI;oBAAEC,KAAK,EAAE;kBAAK,CAAC;gBAAA,CAAC;cAAE,CAAC;YAAA,CAAC;UACzF,CAAC;QAAA,CAAC;MACJ;IACF;EACF,CAAC;AAAA,CAAC,CAAC;AAEHb,WAAA,GAAKC,IAAI,4CAAwC,YAAM;EACrD,IAAMgB,MAAM,GAAGX,IAAI,CAACY,aAAa,0CAAsC,CAAC;EACxE,OAAAC,MAAA,CAAAC,MAAA;IACElB,UAAU,EAAE;EAAI,GACbe,MAAM;IACTI,kBAAkB,EAAEf,IAAI,CAACC,EAAE,KAAAI,kBAAA,CAAAR,OAAA,EAAC,aAAY,CAAC,CAAC;EAAC;AAE/C,CAAC,CAAC;AAAC,IAAAmB,sBAAA,GAAAC,OAAA;AAAA,IAAAZ,kBAAA,GAAAW,sBAAA,CAAAC,OAAA;AA/BH,IAAAC,aAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AAMA,IAAAG,SAAA,GAAAH,OAAA;AAAgF,SAAAvB,YAAA;EAAA,IAAA2B,QAAA,GAAAJ,OAAA;IAAAjB,IAAA,GAAAqB,QAAA,CAAArB,IAAA;EAAAN,WAAA,YAAAA,YAAA;IAAA,OAAAM,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAJhF,IAAMsB,eAAe,GAAGtB,IAAI,CAACY,aAAa,0CAAsC,CAAC;AAEjF,IAAMW,WAA+C,GAAGD,eAAe,CAACC,WAAW;AA4BnFC,QAAQ,CAAC,+BAA+B,EAAE,YAAM;EAC9C,IAAMC,MAAM,GAAGC,kBAAQ,CAACC,YAAY;EACpC,IAAAC,KAAA,GAA+BX,OAAO,0CAAsC,CAAC;IAArEF,kBAAkB,GAAAa,KAAA,CAAlBb,kBAAkB;EAE1Bc,SAAS,CAAC,YAAM;IACdC,OAAO,CAACC,GAAG,CAACC,SAAS,GAAG,GAAG;IAC3BF,OAAO,CAACC,GAAG,CAACE,WAAW,GAAG,MAAM;IAChCH,OAAO,CAACC,GAAG,CAACG,kBAAkB,GAAG,GAAG;IACpCJ,OAAO,CAACC,GAAG,CAACI,iBAAiB,GAAGV,MAAM;IACtCK,OAAO,CAACC,GAAG,CAACK,qBAAqB,GAAG,MAAM;EAC5C,CAAC,CAAC;EAEFC,UAAU,KAAAhC,kBAAA,CAAAR,OAAA,EAAC,aAAY;IACrBG,IAAI,CAACsC,aAAa,CAAC,CAAC;IACpB,MAAOC,qBAAY,CAASC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAC;EAEFC,EAAE,CAAC,mEAAmE,MAAApC,kBAAA,CAAAR,OAAA,EAAE,aAAY;IAAA,IAAA6C,cAAA;IAClF,IAAMC,GAAG,GAAG,IAAAC,yBAAe,EAACC,uBAAa,CAACC,IAAI,CAAC;IAC/C,IAAMC,UAAU,GAAGJ,GAAG,CAACK,GAAG,CAAC,UAAAC,CAAC;MAAA,OAAApC,MAAA,CAAAC,MAAA,KAAUmC,CAAC;QAAEC,SAAS,EAAED,CAAC,CAACE;MAAU;IAAA,CAAG,CAAC;IAEpE,IAAMC,GAAG,SAASC,kCAAe,CAACvB,OAAO,CAAC;MAAEL,MAAM,EAANA,MAAM;MAAE6B,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAER,UAAU,EAAVA;MAAW,CAAC;MAAES,OAAO,EAAE;QAAEC,MAAM,EAAE;MAAM;IAAE,CAAC,CAAC;IACxHC,MAAM,CAACN,GAAG,CAACO,QAAQ,CAACF,MAAM,CAAC,CAACG,IAAI,CAAC,OAAO,CAAC;IAEzCF,MAAM,EAAAhB,cAAA,GAAEU,GAAG,CAACS,SAAS,cAAAnB,cAAA,GAAdA,cAAA,CAAwBoB,GAAG,qBAA3BpB,cAAA,CAA6BqB,UAAU,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC;EACpE,CAAC,EAAC;EAEFvB,EAAE,CAAC,mDAAmD,MAAApC,kBAAA,CAAAR,OAAA,EAAE,aAAY;IAClE,IAAM8C,GAAG,GAAG,IAAAC,yBAAe,EAACC,uBAAa,CAACoB,MAAM,CAAC;IACjD,IAAMlB,UAAU,GAAGJ,GAAG,CAACK,GAAG,CAAC,UAAAC,CAAC;MAAA,OAAApC,MAAA,CAAAC,MAAA,KAAUmC,CAAC;QAAEC,SAAS,EAAED,CAAC,CAACE;MAAU;IAAA,CAAG,CAAC;IAEpE,MAAME,kCAAe,CAACvB,OAAO,CAAC;MAAEL,MAAM,EAANA,MAAM;MAAE6B,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAER,UAAU,EAAVA;MAAW,CAAC;MAAES,OAAO,EAAE;QAAEC,MAAM,EAAE;MAAM;IAAE,CAAC,CAAC;IAC5G,IAAMS,MAAM,SAASb,kCAAe,CAACvB,OAAO,CAAC;MAAEL,MAAM,EAANA,MAAM;MAAE6B,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAER,UAAU,EAAVA;MAAW,CAAC;MAAES,OAAO,EAAE;QAAEC,MAAM,EAAE;MAAM;IAAE,CAAC,CAAC;IAC3HC,MAAM,CAACQ,MAAM,CAACP,QAAQ,CAACF,MAAM,CAAC,CAACG,IAAI,CAAC,OAAO,CAAC;IAE5C,IAAMO,KAAK,GAAIpD,kBAAkB,CAAepB,IAAI,CAACwE,KAAK,CAACnB,GAAG,CAAC,UAAAoB,IAAI;MAAA,OAAIA,IAAI,CAAC,CAAC,CAAC;IAAA,EAAC;IAC/EV,MAAM,CAACS,KAAK,CAAC,CAACE,SAAS,CAAC9C,WAAW,CAAC+C,0BAAwD,CAAC;EAC/F,CAAC,EAAC;EAEF7B,EAAE,CAAC,sDAAsD,MAAApC,kBAAA,CAAAR,OAAA,EAAE,aAAY;IACrE,IAAMuD,GAAG,SAASC,kCAAe,CAACvB,OAAO,CAAC;MAAEL,MAAM,EAANA,MAAM;MAAE6B,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE,CAAC,CAAC;MAAEC,OAAO,EAAE;QAAEC,MAAM,EAAE;MAAM;IAAE,CAAC,CAAC;IAC5GC,MAAM,CAAC,iBAAiB,IAAKN,GAAW,CAAC,CAACQ,IAAI,CAAC,KAAK,CAAC;EACvD,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}