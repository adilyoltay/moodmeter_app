03fe9f13729864d4b46f32c89b7c4c36
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault2(require("@babel/runtime/helpers/wrapNativeSuper"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkHostElement = checkHostElement;
exports.formatMessage = formatMessage;
var _jestMatcherUtils = require("jest-matcher-utils");
var _redent = _interopRequireDefault(require("redent"));
var _componentTree = require("../helpers/component-tree");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
var HostElementTypeError = function (_Error) {
  function HostElementTypeError(received, matcherFn, context) {
    var _this;
    (0, _classCallCheck2.default)(this, HostElementTypeError);
    _this = _callSuper(this, HostElementTypeError);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, matcherFn);
    }
    var withType = '';
    try {
      withType = (0, _jestMatcherUtils.printWithType)('Received', received, _jestMatcherUtils.printReceived);
    } catch (_unused) {}
    _this.message = [(0, _jestMatcherUtils.matcherHint)(`${context.isNot ? '.not' : ''}.${matcherFn.name}`, 'received', ''), '', `${(0, _jestMatcherUtils.RECEIVED_COLOR)('received')} value must be a host element.`, withType].join('\n');
    return _this;
  }
  (0, _inherits2.default)(HostElementTypeError, _Error);
  return (0, _createClass2.default)(HostElementTypeError);
}((0, _wrapNativeSuper2.default)(Error));
function checkHostElement(element, matcherFn, context) {
  if (!(0, _componentTree.isHostElement)(element)) {
    throw new HostElementTypeError(element, matcherFn, context);
  }
}
function formatMessage(matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return [`${matcher}\n`, `${expectedLabel}:\n${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _redent.default)(formatValue(expectedValue), 2))}`, `${receivedLabel}:\n${(0, _jestMatcherUtils.RECEIVED_COLOR)((0, _redent.default)(formatValue(receivedValue), 2))}`].join('\n');
}
function formatValue(value) {
  return typeof value === 'string' ? value : (0, _jestMatcherUtils.stringify)(value);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdE1hdGNoZXJVdGlscyIsInJlcXVpcmUiLCJfcmVkZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb21wb25lbnRUcmVlIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiSG9zdEVsZW1lbnRUeXBlRXJyb3IiLCJfRXJyb3IiLCJyZWNlaXZlZCIsIm1hdGNoZXJGbiIsImNvbnRleHQiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY2FsbFN1cGVyIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIndpdGhUeXBlIiwicHJpbnRXaXRoVHlwZSIsInByaW50UmVjZWl2ZWQiLCJfdW51c2VkIiwibWVzc2FnZSIsIm1hdGNoZXJIaW50IiwiaXNOb3QiLCJuYW1lIiwiUkVDRUlWRURfQ09MT1IiLCJqb2luIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJfd3JhcE5hdGl2ZVN1cGVyMiIsImNoZWNrSG9zdEVsZW1lbnQiLCJlbGVtZW50IiwiaXNIb3N0RWxlbWVudCIsImZvcm1hdE1lc3NhZ2UiLCJtYXRjaGVyIiwiZXhwZWN0ZWRMYWJlbCIsImV4cGVjdGVkVmFsdWUiLCJyZWNlaXZlZExhYmVsIiwicmVjZWl2ZWRWYWx1ZSIsIkVYUEVDVEVEX0NPTE9SIiwiZm9ybWF0VmFsdWUiLCJ2YWx1ZSIsInN0cmluZ2lmeSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRjaGVycy91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQge1xuICBFWFBFQ1RFRF9DT0xPUixcbiAgbWF0Y2hlckhpbnQsXG4gIHByaW50UmVjZWl2ZWQsXG4gIHByaW50V2l0aFR5cGUsXG4gIFJFQ0VJVkVEX0NPTE9SLFxuICBzdHJpbmdpZnksXG59IGZyb20gJ2plc3QtbWF0Y2hlci11dGlscyc7XG5pbXBvcnQgcmVkZW50IGZyb20gJ3JlZGVudCc7XG5cbmltcG9ydCB7IGlzSG9zdEVsZW1lbnQgfSBmcm9tICcuLi9oZWxwZXJzL2NvbXBvbmVudC10cmVlJztcblxuY2xhc3MgSG9zdEVsZW1lbnRUeXBlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlY2VpdmVkOiB1bmtub3duLCBtYXRjaGVyRm46IGplc3QuQ3VzdG9tTWF0Y2hlciwgY29udGV4dDogamVzdC5NYXRjaGVyQ29udGV4dCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgbWF0Y2hlckZuKTtcbiAgICB9XG5cbiAgICBsZXQgd2l0aFR5cGUgPSAnJztcbiAgICB0cnkge1xuICAgICAgd2l0aFR5cGUgPSBwcmludFdpdGhUeXBlKCdSZWNlaXZlZCcsIHJlY2VpdmVkLCBwcmludFJlY2VpdmVkKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBEZWxpYmVyYXRlbHkgZW1wdHkuXG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlID0gW1xuICAgICAgbWF0Y2hlckhpbnQoYCR7Y29udGV4dC5pc05vdCA/ICcubm90JyA6ICcnfS4ke21hdGNoZXJGbi5uYW1lfWAsICdyZWNlaXZlZCcsICcnKSxcbiAgICAgICcnLFxuICAgICAgYCR7UkVDRUlWRURfQ09MT1IoJ3JlY2VpdmVkJyl9IHZhbHVlIG11c3QgYmUgYSBob3N0IGVsZW1lbnQuYCxcbiAgICAgIHdpdGhUeXBlLFxuICAgIF0uam9pbignXFxuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaHJvd3MgSG9zdEVsZW1lbnRUeXBlRXJyb3IgaWYgcGFzc2VkIGVsZW1lbnQgaXMgbm90IGEgaG9zdCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFJlYWN0VGVzdEluc3RhbmNlIHRvIGNoZWNrLlxuICogQHBhcmFtIG1hdGNoZXJGbiBNYXRjaGVyIGZ1bmN0aW9uIGNhbGxpbmcgdGhlIGNoZWNrIHVzZWQgZm9yIGZvcm1hdHRpbmcgZXJyb3IuXG4gKiBAcGFyYW0gY29udGV4dCBKZXN0IG1hdGNoZXIgY29udGV4dCB1c2VkIGZvciBmb3JtYXR0aW5nIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tIb3N0RWxlbWVudChcbiAgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UgfCBudWxsIHwgdW5kZWZpbmVkLFxuICBtYXRjaGVyRm46IGplc3QuQ3VzdG9tTWF0Y2hlcixcbiAgY29udGV4dDogamVzdC5NYXRjaGVyQ29udGV4dCxcbik6IGFzc2VydHMgZWxlbWVudCBpcyBSZWFjdFRlc3RJbnN0YW5jZSB7XG4gIGlmICghaXNIb3N0RWxlbWVudChlbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBIb3N0RWxlbWVudFR5cGVFcnJvcihlbGVtZW50LCBtYXRjaGVyRm4sIGNvbnRleHQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKFxuICBtYXRjaGVyOiBzdHJpbmcsXG4gIGV4cGVjdGVkTGFiZWw6IHN0cmluZyxcbiAgZXhwZWN0ZWRWYWx1ZTogc3RyaW5nIHwgUmVnRXhwIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgcmVjZWl2ZWRMYWJlbDogc3RyaW5nLFxuICByZWNlaXZlZFZhbHVlOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkLFxuKSB7XG4gIHJldHVybiBbXG4gICAgYCR7bWF0Y2hlcn1cXG5gLFxuICAgIGAke2V4cGVjdGVkTGFiZWx9OlxcbiR7RVhQRUNURURfQ09MT1IocmVkZW50KGZvcm1hdFZhbHVlKGV4cGVjdGVkVmFsdWUpLCAyKSl9YCxcbiAgICBgJHtyZWNlaXZlZExhYmVsfTpcXG4ke1JFQ0VJVkVEX0NPTE9SKHJlZGVudChmb3JtYXRWYWx1ZShyZWNlaXZlZFZhbHVlKSwgMikpfWAsXG4gIF0uam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlOiB1bmtub3duKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBzdHJpbmdpZnkodmFsdWUpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBQUEsaUJBQUEsR0FBQUMsT0FBQTtBQVFBLElBQUFDLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLGNBQUEsR0FBQUgsT0FBQTtBQUEwRCxTQUFBRSx1QkFBQUUsQ0FBQTtFQUFBLE9BQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFBQSxJQUVwREcsb0JBQW9CLGFBQUFDLE1BQUE7RUFDeEIsU0FBQUQscUJBQVlFLFFBQWlCLEVBQUVDLFNBQTZCLEVBQUVDLE9BQTRCLEVBQUU7SUFBQSxJQUFBQyxLQUFBO0lBQUEsSUFBQUMsZ0JBQUEsQ0FBQVAsT0FBQSxRQUFBQyxvQkFBQTtJQUMxRkssS0FBQSxHQUFBRSxVQUFBLE9BQUFQLG9CQUFBO0lBR0EsSUFBSVEsS0FBSyxDQUFDQyxpQkFBaUIsRUFBRTtNQUMzQkQsS0FBSyxDQUFDQyxpQkFBaUIsQ0FBQUosS0FBQSxFQUFPRixTQUFTLENBQUM7SUFDMUM7SUFFQSxJQUFJTyxRQUFRLEdBQUcsRUFBRTtJQUNqQixJQUFJO01BQ0ZBLFFBQVEsR0FBRyxJQUFBbEIsaUJBQUEsQ0FBQW1CLGFBQWEsRUFBQyxVQUFVLEVBQUVULFFBQVEsRUFBRVYsaUJBQUEsQ0FBQW9CLGFBQWEsQ0FBQztJQUUvRCxDQUFDLENBQUMsT0FBQUMsT0FBQSxFQUFNLENBQ047SUFHRlIsS0FBQSxDQUFLUyxPQUFPLEdBQUcsQ0FDYixJQUFBdEIsaUJBQUEsQ0FBQXVCLFdBQVcsRUFBQyxHQUFHWCxPQUFPLENBQUNZLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSxJQUFJYixTQUFTLENBQUNjLElBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFDL0UsRUFBRSxFQUNGLEdBQUcsSUFBQXpCLGlCQUFBLENBQUEwQixjQUFjLEVBQUMsVUFBVSxDQUFDLGdDQUFnQyxFQUM3RFIsUUFBUSxDQUNULENBQUNTLElBQUksQ0FBQyxJQUFJLENBQUM7SUFBQSxPQUFBZCxLQUFBO0VBQ2Q7RUFBQSxJQUFBZSxVQUFBLENBQUFyQixPQUFBLEVBQUFDLG9CQUFBLEVBQUFDLE1BQUE7RUFBQSxXQUFBb0IsYUFBQSxDQUFBdEIsT0FBQSxFQUFBQyxvQkFBQTtBQUFBLE1BQUFzQixpQkFBQSxDQUFBdkIsT0FBQSxFQXZCaUNTLEtBQUs7QUFpQ2pDLFNBQVNlLGdCQUFnQkEsQ0FDOUJDLE9BQTZDLEVBQzdDckIsU0FBNkIsRUFDN0JDLE9BQTRCLEVBQ1U7RUFDdEMsSUFBSSxDQUFDLElBQUFSLGNBQUEsQ0FBQTZCLGFBQWEsRUFBQ0QsT0FBTyxDQUFDLEVBQUU7SUFDM0IsTUFBTSxJQUFJeEIsb0JBQW9CLENBQUN3QixPQUFPLEVBQUVyQixTQUFTLEVBQUVDLE9BQU8sQ0FBQztFQUM3RDtBQUNGO0FBRU8sU0FBU3NCLGFBQWFBLENBQzNCQyxPQUFlLEVBQ2ZDLGFBQXFCLEVBQ3JCQyxhQUFpRCxFQUNqREMsYUFBcUIsRUFDckJDLGFBQXdDLEVBQ3hDO0VBQ0EsT0FBTyxDQUNMLEdBQUdKLE9BQU8sSUFBSSxFQUNkLEdBQUdDLGFBQWEsTUFBTSxJQUFBcEMsaUJBQUEsQ0FBQXdDLGNBQWMsRUFBQyxJQUFBdEMsT0FBQSxDQUFBSyxPQUFNLEVBQUNrQyxXQUFXLENBQUNKLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDN0UsR0FBR0MsYUFBYSxNQUFNLElBQUF0QyxpQkFBQSxDQUFBMEIsY0FBYyxFQUFDLElBQUF4QixPQUFBLENBQUFLLE9BQU0sRUFBQ2tDLFdBQVcsQ0FBQ0YsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUM5RSxDQUFDWixJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2Q7QUFFQSxTQUFTYyxXQUFXQSxDQUFDQyxLQUFjLEVBQUU7RUFDbkMsT0FBTyxPQUFPQSxLQUFLLEtBQUssUUFBUSxHQUFHQSxLQUFLLEdBQUcsSUFBQTFDLGlCQUFBLENBQUEyQyxTQUFTLEVBQUNELEtBQUssQ0FBQztBQUM3RCIsImlnbm9yZUxpc3QiOltdfQ==