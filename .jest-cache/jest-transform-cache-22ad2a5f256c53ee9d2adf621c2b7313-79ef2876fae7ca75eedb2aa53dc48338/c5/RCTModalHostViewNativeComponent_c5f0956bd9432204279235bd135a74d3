f05f90a93141e5f303d4f31dba4d611e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),
  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
var nativeComponentName = 'RCTModalHostView';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: "RCTModalHostView",
  directEventTypes: {
    topRequestClose: {
      registrationName: "onRequestClose"
    },
    topShow: {
      registrationName: "onShow"
    },
    topDismiss: {
      registrationName: "onDismiss"
    },
    topOrientationChange: {
      registrationName: "onOrientationChange"
    }
  },
  validAttributes: Object.assign({
    animationType: true,
    presentationStyle: true,
    transparent: true,
    statusBarTranslucent: true,
    navigationBarTranslucent: true,
    hardwareAccelerated: true,
    visible: true,
    animated: true,
    supportedOrientations: true,
    identifier: true
  }, ConditionallyIgnoredEventHandlers({
    onRequestClose: true,
    onShow: true,
    onDismiss: true,
    onOrientationChange: true
  }))
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,