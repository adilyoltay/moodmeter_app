{"version":3,"names":["_codegenNativeComponent","_interopRequireDefault","require","NativeComponentRegistry","_require","ConditionallyIgnoredEventHandlers","nativeComponentName","__INTERNAL_VIEW_CONFIG","exports","uiViewClassName","directEventTypes","topRequestClose","registrationName","topShow","topDismiss","topOrientationChange","validAttributes","Object","assign","animationType","presentationStyle","transparent","statusBarTranslucent","navigationBarTranslucent","hardwareAccelerated","visible","animated","supportedOrientations","identifier","onRequestClose","onShow","onDismiss","onOrientationChange","_default","default","get"],"sources":["RCTModalHostViewNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ViewProps} from '../../../../Libraries/Components/View/ViewPropTypes';\nimport type {\n  DirectEventHandler,\n  Int32,\n  WithDefault,\n} from '../../../../Libraries/Types/CodegenTypes';\nimport type {HostComponent} from '../../types/HostComponent';\n\nimport codegenNativeComponent from '../../../../Libraries/Utilities/codegenNativeComponent';\n\ntype OrientationChangeEvent = $ReadOnly<{\n  orientation: 'portrait' | 'landscape',\n}>;\n\ntype NativeProps = $ReadOnly<{\n  ...ViewProps,\n\n  /**\n   * The `animationType` prop controls how the modal animates.\n   *\n   * See https://reactnative.dev/docs/modal#animationtype\n   */\n  animationType?: WithDefault<'none' | 'slide' | 'fade', 'none'>,\n\n  /**\n   * The `presentationStyle` prop controls how the modal appears.\n   *\n   * See https://reactnative.dev/docs/modal#presentationstyle\n   */\n  presentationStyle?: WithDefault<\n    'fullScreen' | 'pageSheet' | 'formSheet' | 'overFullScreen',\n    'fullScreen',\n  >,\n\n  /**\n   * The `transparent` prop determines whether your modal will fill the\n   * entire view.\n   *\n   * See https://reactnative.dev/docs/modal#transparent\n   */\n  transparent?: WithDefault<boolean, false>,\n\n  /**\n   * The `statusBarTranslucent` prop determines whether your modal should go under\n   * the system statusbar.\n   *\n   * See https://reactnative.dev/docs/modal#statusBarTranslucent\n   */\n  statusBarTranslucent?: WithDefault<boolean, false>,\n\n  /**\n   * The `navigationBarTranslucent` prop determines whether your modal should go under\n   * the system navigationbar.\n   *\n   * See https://reactnative.dev/docs/modal#navigationBarTranslucent\n   */\n  navigationBarTranslucent?: WithDefault<boolean, false>,\n\n  /**\n   * The `hardwareAccelerated` prop controls whether to force hardware\n   * acceleration for the underlying window.\n   *\n   * See https://reactnative.dev/docs/modal#hardwareaccelerated\n   */\n  hardwareAccelerated?: WithDefault<boolean, false>,\n\n  /**\n   * The `onRequestClose` callback is called when the user taps the hardware\n   * back button on Android or the menu button on Apple TV.\n   *\n   * This is required on Apple TV and Android.\n   *\n   * See https://reactnative.dev/docs/modal#onrequestclose\n   */\n  onRequestClose?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onShow` prop allows passing a function that will be called once the\n   * modal has been shown.\n   *\n   * See https://reactnative.dev/docs/modal#onshow\n   */\n  onShow?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onDismiss` prop allows passing a function that will be called once\n   * the modal has been dismissed.\n   *\n   * See https://reactnative.dev/docs/modal#ondismiss\n   */\n  onDismiss?: ?DirectEventHandler<null>,\n\n  /**\n   * The `visible` prop determines whether your modal is visible.\n   *\n   * See https://reactnative.dev/docs/modal#visible\n   */\n  visible?: WithDefault<boolean, false>,\n\n  /**\n   * Deprecated. Use the `animationType` prop instead.\n   */\n  animated?: WithDefault<boolean, false>,\n\n  /**\n   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n   *\n   * See https://reactnative.dev/docs/modal#supportedorientations\n   */\n  supportedOrientations?: WithDefault<\n    $ReadOnlyArray<\n      | 'portrait'\n      | 'portrait-upside-down'\n      | 'landscape'\n      | 'landscape-left'\n      | 'landscape-right',\n    >,\n    'portrait',\n  >,\n\n  /**\n   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n   *\n   * See https://reactnative.dev/docs/modal#onorientationchange\n   */\n  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,\n\n  /**\n   * The `identifier` is the unique number for identifying Modal components.\n   */\n  identifier?: WithDefault<Int32, 0>,\n}>;\n\nexport default (codegenNativeComponent<NativeProps>('ModalHostView', {\n  interfaceOnly: true,\n  paperComponentName: 'RCTModalHostView',\n}): HostComponent<NativeProps>);\n"],"mappings":";;;;;AAkBA,IAAAA,uBAAA,GAAAC,sBAAA,CAAAC,OAAA;AA6HA,IAAAC,uBAGgC,GAHhCD,OAGgC,CAHhC,gEAG+B,CAAC;AAHhC,IAAAE,QAAA,GAAAF,OAGgC,CAHhC,yDAG+B,CAAC;EAHhCG,iCAGgC,GAAAD,QAAA,CAHhCC,iCAGgC;AAHhC,IAAAC,mBAGgC,GAHhC,kBAGgC;AAHhC,IAAAC,sBAGgC,GAAAC,OAAA,CAAAD,sBAAA,GAHhC;EAAAE,eAGgC,EAHhC,kBAGgC;EAHhCC,gBAGgC,EAHhC;IAAAC,eAGgC,EAHhC;MAAAC,gBAGgC,EAHhC;IAG+B,CAAC;IAHhCC,OAGgC,EAHhC;MAAAD,gBAGgC,EAHhC;IAG+B,CAAC;IAHhCE,UAGgC,EAHhC;MAAAF,gBAGgC,EAHhC;IAG+B,CAAC;IAHhCG,oBAGgC,EAHhC;MAAAH,gBAGgC,EAHhC;IAG+B;EAAA,CAAC;EAHhCI,eAGgC,EAAAC,MAAA,CAAAC,MAAA;IAHhCC,aAGgC,EAHhC,IAGgC;IAHhCC,iBAGgC,EAHhC,IAGgC;IAHhCC,WAGgC,EAHhC,IAGgC;IAHhCC,oBAGgC,EAHhC,IAGgC;IAHhCC,wBAGgC,EAHhC,IAGgC;IAHhCC,mBAGgC,EAHhC,IAGgC;IAHhCC,OAGgC,EAHhC,IAGgC;IAHhCC,QAGgC,EAHhC,IAGgC;IAHhCC,qBAGgC,EAHhC,IAGgC;IAHhCC,UAGgC,EAHhC;EAGgC,GAHhCvB,iCAGgC,CAHhC;IAAAwB,cAGgC,EAHhC,IAGgC;IAHhCC,MAGgC,EAHhC,IAGgC;IAHhCC,SAGgC,EAHhC,IAGgC;IAHhCC,mBAGgC,EAHhC;EAG+B,EAAC;AAAD,CAAC;AAAA,IAAAC,QAAA,GAAAzB,OAAA,CAAA0B,OAAA,GAHhC/B,uBAGgC,CAHhCgC,GAGgC,CAHhC7B,mBAGgC,EAHhC;EAAA,OAAAC,sBAGgC;AAAA,CAAD,CAAC","ignoreList":[]}