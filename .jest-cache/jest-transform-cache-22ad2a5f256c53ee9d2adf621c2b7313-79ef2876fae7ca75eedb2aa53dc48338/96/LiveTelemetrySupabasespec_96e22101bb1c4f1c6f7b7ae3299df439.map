{"version":3,"names":["_getJestObj","mock","_require","require","createSupabaseTestClient","client","__esModule","default","supabaseClient","_interopRequireDefault","_asyncToGenerator2","_require4","jest","_require2","unifiedPipeline","_require3","userId","process","env","TEST_SEED_USER_ID","supabase","cleanup","_cleanup","apply","arguments","from","delete","eq","describe","setTimeout","beforeAll","TEST_MODE","TEST_TTL_MS","TEST_PIPELINE_STUB","EXPO_PUBLIC_ENABLE_AI","afterAll","it","moods","Array","length","_","i","timestamp","Date","now","mood_score","type","content","context","source","data","error","res","select","Promise","r","expect","toBeNull","events","map","String","event_type","some","e","includes","toBe"],"sources":["LiveTelemetrySupabase.spec.ts"],"sourcesContent":["/**\n * Live Supabase Tests â€” Telemetry (QRlive)\n * Tags: [QRlive:telemetry:started] [QRlive:telemetry:completed]\n */\njest.mock('@/services/supabase', () => {\n  const { createSupabaseTestClient } = require('./utils/supabaseTestClient');\n  const client = createSupabaseTestClient();\n  return {\n    __esModule: true,\n    default: { supabaseClient: client },\n    supabaseClient: client,\n  };\n});\n\nconst { unifiedPipeline } = require('@/features/ai/core/UnifiedAIPipeline');\nconst { createSupabaseTestClient } = require('./utils/supabaseTestClient');\n\nconst userId = process.env.TEST_SEED_USER_ID || '00000000-0000-0000-0000-000000000001';\nconst supabase = createSupabaseTestClient();\n\nasync function cleanup() {\n  await supabase.from('ai_telemetry').delete().eq('user_id', userId);\n}\n\ndescribe('Live Telemetry Supabase', () => {\n  jest.setTimeout(20000);\n  beforeAll(async () => {\n    process.env.TEST_MODE = '1';\n    process.env.TEST_TTL_MS = '5000';\n    process.env.TEST_PIPELINE_STUB = '0';\n    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';\n    process.env.TEST_SEED_USER_ID = userId;\n    await cleanup();\n  });\n\n  afterAll(async () => {\n    await cleanup();\n  });\n\n  it('[QRlive:telemetry:started] and [QRlive:telemetry:completed] are recorded', async () => {\n    const moods = Array.from({ length: 6 }, (_, i) => ({ timestamp: Date.now() - i * 900e3, mood_score: 6 }));\n    await unifiedPipeline.process({ userId, type: 'data', content: { moods }, context: { source: 'mood' } });\n    // Poll until telemetry rows appear\n    let data: any[] | null = null;\n    let error: any = null;\n    for (let i = 0; i < 10; i++) {\n      const res = await supabase\n        .from('ai_telemetry')\n        .select('event_type')\n        .eq('user_id', userId);\n      data = (res as any).data as any[] | null;\n      error = (res as any).error;\n      if (!error && (data || []).length > 0) break;\n      await new Promise(r => setTimeout(r, 100));\n    }\n    expect(error).toBeNull();\n    const events = (data || []).map(r => String((r as any).event_type));\n    expect(events.some(e => e.includes('unified_pipeline_started'))).toBe(true);\n    expect(events.some(e => e.includes('unified_pipeline_completed'))).toBe(true);\n  });\n});\n\n\n"],"mappings":"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","ignoreList":[]}