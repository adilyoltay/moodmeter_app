1a90942f1a766dbf25e94a15200b030d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBePartiallyChecked = toBePartiallyChecked;
var _jestMatcherUtils = require("jest-matcher-utils");
var _redent = _interopRequireDefault(require("redent"));
var _accessibility = require("../helpers/accessibility");
var _errors = require("../helpers/errors");
var _formatElement = require("../helpers/format-element");
var _utils = require("./utils");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function toBePartiallyChecked(element) {
  var _this = this;
  (0, _utils.checkHostElement)(element, toBePartiallyChecked, this);
  if (!hasValidAccessibilityRole(element)) {
    throw new _errors.ErrorWithStack('toBePartiallyChecked() works only on accessibility elements with "checkbox" role.', toBePartiallyChecked);
  }
  return {
    pass: (0, _accessibility.computeAriaChecked)(element) === 'mixed',
    message: function message() {
      var is = _this.isNot ? 'is' : 'is not';
      return [(0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toBePartiallyChecked`, 'element', ''), '', `Received element ${is} partially checked:`, (0, _redent.default)((0, _formatElement.formatElement)(element), 2)].join('\n');
    }
  };
}
function hasValidAccessibilityRole(element) {
  var role = (0, _accessibility.getRole)(element);
  return (0, _accessibility.isAccessibilityElement)(element) && role === 'checkbox';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdE1hdGNoZXJVdGlscyIsInJlcXVpcmUiLCJfcmVkZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hY2Nlc3NpYmlsaXR5IiwiX2Vycm9ycyIsIl9mb3JtYXRFbGVtZW50IiwiX3V0aWxzIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidG9CZVBhcnRpYWxseUNoZWNrZWQiLCJlbGVtZW50IiwiX3RoaXMiLCJjaGVja0hvc3RFbGVtZW50IiwiaGFzVmFsaWRBY2Nlc3NpYmlsaXR5Um9sZSIsIkVycm9yV2l0aFN0YWNrIiwicGFzcyIsImNvbXB1dGVBcmlhQ2hlY2tlZCIsIm1lc3NhZ2UiLCJpcyIsImlzTm90IiwibWF0Y2hlckhpbnQiLCJmb3JtYXRFbGVtZW50Iiwiam9pbiIsInJvbGUiLCJnZXRSb2xlIiwiaXNBY2Nlc3NpYmlsaXR5RWxlbWVudCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRjaGVycy90by1iZS1wYXJ0aWFsbHktY2hlY2tlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBtYXRjaGVySGludCB9IGZyb20gJ2plc3QtbWF0Y2hlci11dGlscyc7XG5pbXBvcnQgcmVkZW50IGZyb20gJ3JlZGVudCc7XG5cbmltcG9ydCB7IGNvbXB1dGVBcmlhQ2hlY2tlZCwgZ2V0Um9sZSwgaXNBY2Nlc3NpYmlsaXR5RWxlbWVudCB9IGZyb20gJy4uL2hlbHBlcnMvYWNjZXNzaWJpbGl0eSc7XG5pbXBvcnQgeyBFcnJvcldpdGhTdGFjayB9IGZyb20gJy4uL2hlbHBlcnMvZXJyb3JzJztcbmltcG9ydCB7IGZvcm1hdEVsZW1lbnQgfSBmcm9tICcuLi9oZWxwZXJzL2Zvcm1hdC1lbGVtZW50JztcbmltcG9ydCB7IGNoZWNrSG9zdEVsZW1lbnQgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQmVQYXJ0aWFsbHlDaGVja2VkKHRoaXM6IGplc3QuTWF0Y2hlckNvbnRleHQsIGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlKSB7XG4gIGNoZWNrSG9zdEVsZW1lbnQoZWxlbWVudCwgdG9CZVBhcnRpYWxseUNoZWNrZWQsIHRoaXMpO1xuXG4gIGlmICghaGFzVmFsaWRBY2Nlc3NpYmlsaXR5Um9sZShlbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcldpdGhTdGFjayhcbiAgICAgICd0b0JlUGFydGlhbGx5Q2hlY2tlZCgpIHdvcmtzIG9ubHkgb24gYWNjZXNzaWJpbGl0eSBlbGVtZW50cyB3aXRoIFwiY2hlY2tib3hcIiByb2xlLicsXG4gICAgICB0b0JlUGFydGlhbGx5Q2hlY2tlZCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBjb21wdXRlQXJpYUNoZWNrZWQoZWxlbWVudCkgPT09ICdtaXhlZCcsXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgaXMgPSB0aGlzLmlzTm90ID8gJ2lzJyA6ICdpcyBub3QnO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgbWF0Y2hlckhpbnQoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlUGFydGlhbGx5Q2hlY2tlZGAsICdlbGVtZW50JywgJycpLFxuICAgICAgICAnJyxcbiAgICAgICAgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gcGFydGlhbGx5IGNoZWNrZWQ6YCxcbiAgICAgICAgcmVkZW50KGZvcm1hdEVsZW1lbnQoZWxlbWVudCksIDIpLFxuICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEFjY2Vzc2liaWxpdHlSb2xlKGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlKSB7XG4gIGNvbnN0IHJvbGUgPSBnZXRSb2xlKGVsZW1lbnQpO1xuICByZXR1cm4gaXNBY2Nlc3NpYmlsaXR5RWxlbWVudChlbGVtZW50KSAmJiByb2xlID09PSAnY2hlY2tib3gnO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxpQkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsY0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssY0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sTUFBQSxHQUFBTixPQUFBO0FBQTJDLFNBQUFFLHVCQUFBSyxDQUFBO0VBQUEsT0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQUVwQyxTQUFTRyxvQkFBb0JBLENBQTRCQyxPQUEwQixFQUFFO0VBQUEsSUFBQUMsS0FBQTtFQUMxRixJQUFBTixNQUFBLENBQUFPLGdCQUFnQixFQUFDRixPQUFPLEVBQUVELG9CQUFvQixFQUFFLElBQUksQ0FBQztFQUVyRCxJQUFJLENBQUNJLHlCQUF5QixDQUFDSCxPQUFPLENBQUMsRUFBRTtJQUN2QyxNQUFNLElBQUlQLE9BQUEsQ0FBQVcsY0FBYyxDQUN0QixtRkFBbUYsRUFDbkZMLG9CQUNGLENBQUM7RUFDSDtFQUVBLE9BQU87SUFDTE0sSUFBSSxFQUFFLElBQUFiLGNBQUEsQ0FBQWMsa0JBQWtCLEVBQUNOLE9BQU8sQ0FBQyxLQUFLLE9BQU87SUFDN0NPLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBLEVBQVE7TUFDYixJQUFNQyxFQUFFLEdBQUdQLEtBQUksQ0FBQ1EsS0FBSyxHQUFHLElBQUksR0FBRyxRQUFRO01BQ3ZDLE9BQU8sQ0FDTCxJQUFBckIsaUJBQUEsQ0FBQXNCLFdBQVcsRUFBQyxHQUFHVCxLQUFJLENBQUNRLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQzlFLEVBQUUsRUFDRixvQkFBb0JELEVBQUUscUJBQXFCLEVBQzNDLElBQUFsQixPQUFBLENBQUFRLE9BQU0sRUFBQyxJQUFBSixjQUFBLENBQUFpQixhQUFhLEVBQUNYLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNsQyxDQUFDWSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2Q7RUFDRixDQUFDO0FBQ0g7QUFFQSxTQUFTVCx5QkFBeUJBLENBQUNILE9BQTBCLEVBQUU7RUFDN0QsSUFBTWEsSUFBSSxHQUFHLElBQUFyQixjQUFBLENBQUFzQixPQUFPLEVBQUNkLE9BQU8sQ0FBQztFQUM3QixPQUFPLElBQUFSLGNBQUEsQ0FBQXVCLHNCQUFzQixFQUFDZixPQUFPLENBQUMsSUFBSWEsSUFBSSxLQUFLLFVBQVU7QUFDL0QiLCJpZ25vcmVMaXN0IjpbXX0=