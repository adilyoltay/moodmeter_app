{"version":3,"names":["formatAge","freshnessMs","seconds","Math","floor","minutes","hours","days","getSourceConfig","source","label","color","bgColor","icon","getQualityConfig","qualityLevel","formatSampleSize","size","describe","it","config","expect","toEqual","testCases","expectedAge","forEach","_ref","result","toBe","expected","_ref2","toBeNull","undefined","sources","toBeTruthy","toMatch","qualities","quality","highQualityAge","highQualitySource","highQualityLevel","highQualitySample","mediumQualityAge","mediumQualitySource","mediumQualityLevel","mediumQualitySample","lowQualityAge","lowQualitySource","lowQualityLevel","lowQualitySample"],"sources":["QualityRibbon.test.tsx"],"sourcesContent":["/**\n * 🧪 Unit Tests - QualityRibbon Logic & Utilities\n * \n * Tests for QualityRibbon helper functions, formatting logic,\n * and mapping functions without complex rendering.\n */\n\nimport type { ProvenanceSource, QualityLevel } from '@/features/ai/insights/insightRegistry';\n\n// Helper functions extracted from QualityRibbon component for testing\nfunction formatAge(freshnessMs: number): string {\n  const seconds = Math.floor(freshnessMs / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  \n  if (days > 0) return `${days}d`;\n  if (hours > 0) return `${hours}h`;\n  if (minutes > 0) return `${minutes}m`;\n  return 'now';\n}\n\nfunction getSourceConfig(source: ProvenanceSource) {\n  switch (source) {\n    case 'unified':\n      return { label: 'Fresh', color: '#10B981', bgColor: '#D1FAE5', icon: 'flash' };\n    case 'llm':\n      return { label: 'LLM', color: '#8B5CF6', bgColor: '#F3E8FF', icon: 'brain' };\n    case 'cache':\n      return { label: 'Cache', color: '#6B7280', bgColor: '#F3F4F6', icon: 'cached' };\n    case 'heuristic':\n      return { label: 'Fast', color: '#F59E0B', bgColor: '#FEF3C7', icon: 'lightning-bolt' };\n    default:\n      return { label: 'Auto', color: '#6B7280', bgColor: '#F3F4F6', icon: 'auto-fix' };\n  }\n}\n\nfunction getQualityConfig(qualityLevel: QualityLevel) {\n  switch (qualityLevel) {\n    case 'high':\n      return { label: 'High', color: '#059669', bgColor: '#D1FAE5' };\n    case 'medium':\n      return { label: 'Med', color: '#D97706', bgColor: '#FEF3C7' };\n    case 'low':\n      return { label: 'Low', color: '#DC2626', bgColor: '#FEE2E2' };\n    default:\n      return { label: 'Unknown', color: '#6B7280', bgColor: '#F3F4F6' };\n  }\n}\n\nfunction formatSampleSize(size?: number): string | null {\n  if (!size || size <= 0) return null;\n  return `n=${size}`;\n}\n\ndescribe('QualityRibbon Logic & Utilities', () => {\n  describe('📊 Source Configuration Mapping', () => {\n    it('should map unified source to Fresh badge', () => {\n      const config = getSourceConfig('unified');\n      expect(config).toEqual({\n        label: 'Fresh',\n        color: '#10B981', \n        bgColor: '#D1FAE5',\n        icon: 'flash'\n      });\n    });\n\n    it('should map cache source to Cache badge', () => {\n      const config = getSourceConfig('cache');\n      expect(config).toEqual({\n        label: 'Cache',\n        color: '#6B7280',\n        bgColor: '#F3F4F6', \n        icon: 'cached'\n      });\n    });\n\n    it('should map llm source to LLM badge', () => {\n      const config = getSourceConfig('llm');\n      expect(config).toEqual({\n        label: 'LLM',\n        color: '#8B5CF6',\n        bgColor: '#F3E8FF',\n        icon: 'brain'\n      });\n    });\n\n    it('should map heuristic source to Fast badge', () => {\n      const config = getSourceConfig('heuristic');\n      expect(config).toEqual({\n        label: 'Fast',\n        color: '#F59E0B',\n        bgColor: '#FEF3C7',\n        icon: 'lightning-bolt'\n      });\n    });\n\n    it('should handle invalid source with fallback', () => {\n      const config = getSourceConfig('invalid' as ProvenanceSource);\n      expect(config).toEqual({\n        label: 'Auto',\n        color: '#6B7280',\n        bgColor: '#F3F4F6',\n        icon: 'auto-fix'\n      });\n    });\n  });\n\n  describe('🎨 Quality Level Configuration', () => {\n    it('should map high quality to High badge with green color', () => {\n      const config = getQualityConfig('high');\n      expect(config).toEqual({\n        label: 'High',\n        color: '#059669',\n        bgColor: '#D1FAE5'\n      });\n    });\n\n    it('should map medium quality to Med badge with orange color', () => {\n      const config = getQualityConfig('medium');\n      expect(config).toEqual({\n        label: 'Med',\n        color: '#D97706',\n        bgColor: '#FEF3C7'\n      });\n    });\n\n    it('should map low quality to Low badge with red color', () => {\n      const config = getQualityConfig('low');\n      expect(config).toEqual({\n        label: 'Low',\n        color: '#DC2626',\n        bgColor: '#FEE2E2'\n      });\n    });\n\n    it('should handle invalid quality with fallback', () => {\n      const config = getQualityConfig('invalid' as QualityLevel);\n      expect(config).toEqual({\n        label: 'Unknown',\n        color: '#6B7280',\n        bgColor: '#F3F4F6'\n      });\n    });\n  });\n\n  describe('⏰ Age Formatting Logic', () => {\n    it('should format age correctly for different time periods', () => {\n      const testCases = [\n        { freshnessMs: 30 * 1000, expectedAge: 'now' }, // 30 seconds\n        { freshnessMs: 2 * 60 * 1000, expectedAge: '2m' }, // 2 minutes\n        { freshnessMs: 90 * 60 * 1000, expectedAge: '1h' }, // 1.5 hours -> 1h\n        { freshnessMs: 25 * 60 * 60 * 1000, expectedAge: '1d' }, // 25 hours -> 1d\n        { freshnessMs: 3 * 24 * 60 * 60 * 1000, expectedAge: '3d' } // 3 days\n      ];\n\n      testCases.forEach(({ freshnessMs, expectedAge }) => {\n        const result = formatAge(freshnessMs);\n        expect(result).toBe(expectedAge);\n      });\n    });\n\n    it('should handle edge cases in age calculation', () => {\n      const testCases = [\n        { freshnessMs: 0, expected: 'now' }, // Exactly now\n        { freshnessMs: 59 * 1000, expected: 'now' }, // Just under 1 minute\n        { freshnessMs: 60 * 1000, expected: '1m' }, // Exactly 1 minute\n        { freshnessMs: 59 * 60 * 1000, expected: '59m' }, // Just under 1 hour\n        { freshnessMs: 60 * 60 * 1000, expected: '1h' }, // Exactly 1 hour\n        { freshnessMs: 23 * 60 * 60 * 1000, expected: '23h' }, // Just under 1 day\n        { freshnessMs: 24 * 60 * 60 * 1000, expected: '1d' } // Exactly 1 day\n      ];\n\n      testCases.forEach(({ freshnessMs, expected }) => {\n        const result = formatAge(freshnessMs);\n        expect(result).toBe(expected);\n      });\n    });\n\n    it('should handle very large time periods', () => {\n      expect(formatAge(7 * 24 * 60 * 60 * 1000)).toBe('7d'); // 7 days\n      expect(formatAge(30 * 24 * 60 * 60 * 1000)).toBe('30d'); // 30 days\n      expect(formatAge(365 * 24 * 60 * 60 * 1000)).toBe('365d'); // 1 year\n    });\n  });\n\n  describe('📏 Sample Size Formatting', () => {\n    it('should format valid sample sizes correctly', () => {\n      expect(formatSampleSize(1)).toBe('n=1');\n      expect(formatSampleSize(15)).toBe('n=15');\n      expect(formatSampleSize(100)).toBe('n=100');\n    });\n\n    it('should return null for invalid sample sizes', () => {\n      expect(formatSampleSize(0)).toBeNull();\n      expect(formatSampleSize(-5)).toBeNull();\n      expect(formatSampleSize(undefined)).toBeNull();\n    });\n  });\n\n  describe('🔄 Integration Tests', () => {\n    it('should provide consistent mapping between all components', () => {\n      // Test that source mapping is consistent\n      const sources: ProvenanceSource[] = ['unified', 'cache', 'llm', 'heuristic'];\n      sources.forEach(source => {\n        const config = getSourceConfig(source);\n        expect(config.label).toBeTruthy();\n        expect(config.color).toMatch(/^#[0-9A-F]{6}$/i);\n        expect(config.bgColor).toMatch(/^#[0-9A-F]{6}$/i);\n        expect(config.icon).toBeTruthy();\n      });\n\n      // Test that quality mapping is consistent\n      const qualities: QualityLevel[] = ['high', 'medium', 'low'];\n      qualities.forEach(quality => {\n        const config = getQualityConfig(quality);\n        expect(config.label).toBeTruthy();\n        expect(config.color).toMatch(/^#[0-9A-F]{6}$/i);\n        expect(config.bgColor).toMatch(/^#[0-9A-F]{6}$/i);\n      });\n    });\n\n    it('should handle realistic data scenarios', () => {\n      // High quality scenario\n      const highQualityAge = formatAge(5 * 60 * 1000); // 5 minutes\n      const highQualitySource = getSourceConfig('unified');\n      const highQualityLevel = getQualityConfig('high');\n      const highQualitySample = formatSampleSize(16);\n\n      expect(highQualityAge).toBe('5m');\n      expect(highQualitySource.label).toBe('Fresh');\n      expect(highQualityLevel.label).toBe('High');\n      expect(highQualitySample).toBe('n=16');\n\n      // Medium quality scenario  \n      const mediumQualityAge = formatAge(2 * 60 * 60 * 1000); // 2 hours\n      const mediumQualitySource = getSourceConfig('cache');\n      const mediumQualityLevel = getQualityConfig('medium');\n      const mediumQualitySample = formatSampleSize(10);\n\n      expect(mediumQualityAge).toBe('2h');\n      expect(mediumQualitySource.label).toBe('Cache');\n      expect(mediumQualityLevel.label).toBe('Med');\n      expect(mediumQualitySample).toBe('n=10');\n\n      // Low quality scenario\n      const lowQualityAge = formatAge(30 * 1000); // 30 seconds (immediate)\n      const lowQualitySource = getSourceConfig('heuristic');\n      const lowQualityLevel = getQualityConfig('low');\n      const lowQualitySample = formatSampleSize(4);\n\n      expect(lowQualityAge).toBe('now');\n      expect(lowQualitySource.label).toBe('Fast');\n      expect(lowQualityLevel.label).toBe('Low');\n      expect(lowQualitySample).toBe('n=4');\n    });\n  });\n\n  describe('🎯 Task Requirements Validation', () => {\n    it('should support all required source mappings per task spec', () => {\n      // Task specifies: unified→Fresh, cache→Cache, llm→LLM, heuristic→Fast\n      expect(getSourceConfig('unified').label).toBe('Fresh');\n      expect(getSourceConfig('cache').label).toBe('Cache');\n      expect(getSourceConfig('llm').label).toBe('LLM');\n      expect(getSourceConfig('heuristic').label).toBe('Fast');\n    });\n\n    it('should support all required quality mappings per task spec', () => {\n      // Task specifies: high→High, medium→Med, low→Low\n      expect(getQualityConfig('high').label).toBe('High');\n      expect(getQualityConfig('medium').label).toBe('Med');\n      expect(getQualityConfig('low').label).toBe('Low');\n    });\n\n    it('should format sample sizes as n=X per task spec', () => {\n      expect(formatSampleSize(15)).toBe('n=15');\n      expect(formatSampleSize(1)).toBe('n=1');\n      expect(formatSampleSize(100)).toBe('n=100');\n    });\n\n    it('should format age as now/m/h/d per task spec', () => {\n      expect(formatAge(30 * 1000)).toBe('now');\n      expect(formatAge(5 * 60 * 1000)).toBe('5m');\n      expect(formatAge(2 * 60 * 60 * 1000)).toBe('2h');\n      expect(formatAge(3 * 24 * 60 * 60 * 1000)).toBe('3d');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}