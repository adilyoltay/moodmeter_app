81605245ed8310c97bd3e8d6195b9404
Object.defineProperty(exports, "__esModule", {
  value: true
});
function formatAge(freshnessMs) {
  var seconds = Math.floor(freshnessMs / 1000);
  var minutes = Math.floor(seconds / 60);
  var hours = Math.floor(minutes / 60);
  var days = Math.floor(hours / 24);
  if (days > 0) return `${days}d`;
  if (hours > 0) return `${hours}h`;
  if (minutes > 0) return `${minutes}m`;
  return 'now';
}
function getSourceConfig(source) {
  switch (source) {
    case 'unified':
      return {
        label: 'Fresh',
        color: '#10B981',
        bgColor: '#D1FAE5',
        icon: 'flash'
      };
    case 'llm':
      return {
        label: 'LLM',
        color: '#8B5CF6',
        bgColor: '#F3E8FF',
        icon: 'brain'
      };
    case 'cache':
      return {
        label: 'Cache',
        color: '#6B7280',
        bgColor: '#F3F4F6',
        icon: 'cached'
      };
    case 'heuristic':
      return {
        label: 'Fast',
        color: '#F59E0B',
        bgColor: '#FEF3C7',
        icon: 'lightning-bolt'
      };
    default:
      return {
        label: 'Auto',
        color: '#6B7280',
        bgColor: '#F3F4F6',
        icon: 'auto-fix'
      };
  }
}
function getQualityConfig(qualityLevel) {
  switch (qualityLevel) {
    case 'high':
      return {
        label: 'High',
        color: '#059669',
        bgColor: '#D1FAE5'
      };
    case 'medium':
      return {
        label: 'Med',
        color: '#D97706',
        bgColor: '#FEF3C7'
      };
    case 'low':
      return {
        label: 'Low',
        color: '#DC2626',
        bgColor: '#FEE2E2'
      };
    default:
      return {
        label: 'Unknown',
        color: '#6B7280',
        bgColor: '#F3F4F6'
      };
  }
}
function formatSampleSize(size) {
  if (!size || size <= 0) return null;
  return `n=${size}`;
}
describe('QualityRibbon Logic & Utilities', function () {
  describe('📊 Source Configuration Mapping', function () {
    it('should map unified source to Fresh badge', function () {
      var config = getSourceConfig('unified');
      expect(config).toEqual({
        label: 'Fresh',
        color: '#10B981',
        bgColor: '#D1FAE5',
        icon: 'flash'
      });
    });
    it('should map cache source to Cache badge', function () {
      var config = getSourceConfig('cache');
      expect(config).toEqual({
        label: 'Cache',
        color: '#6B7280',
        bgColor: '#F3F4F6',
        icon: 'cached'
      });
    });
    it('should map llm source to LLM badge', function () {
      var config = getSourceConfig('llm');
      expect(config).toEqual({
        label: 'LLM',
        color: '#8B5CF6',
        bgColor: '#F3E8FF',
        icon: 'brain'
      });
    });
    it('should map heuristic source to Fast badge', function () {
      var config = getSourceConfig('heuristic');
      expect(config).toEqual({
        label: 'Fast',
        color: '#F59E0B',
        bgColor: '#FEF3C7',
        icon: 'lightning-bolt'
      });
    });
    it('should handle invalid source with fallback', function () {
      var config = getSourceConfig('invalid');
      expect(config).toEqual({
        label: 'Auto',
        color: '#6B7280',
        bgColor: '#F3F4F6',
        icon: 'auto-fix'
      });
    });
  });
  describe('🎨 Quality Level Configuration', function () {
    it('should map high quality to High badge with green color', function () {
      var config = getQualityConfig('high');
      expect(config).toEqual({
        label: 'High',
        color: '#059669',
        bgColor: '#D1FAE5'
      });
    });
    it('should map medium quality to Med badge with orange color', function () {
      var config = getQualityConfig('medium');
      expect(config).toEqual({
        label: 'Med',
        color: '#D97706',
        bgColor: '#FEF3C7'
      });
    });
    it('should map low quality to Low badge with red color', function () {
      var config = getQualityConfig('low');
      expect(config).toEqual({
        label: 'Low',
        color: '#DC2626',
        bgColor: '#FEE2E2'
      });
    });
    it('should handle invalid quality with fallback', function () {
      var config = getQualityConfig('invalid');
      expect(config).toEqual({
        label: 'Unknown',
        color: '#6B7280',
        bgColor: '#F3F4F6'
      });
    });
  });
  describe('⏰ Age Formatting Logic', function () {
    it('should format age correctly for different time periods', function () {
      var testCases = [{
        freshnessMs: 30 * 1000,
        expectedAge: 'now'
      }, {
        freshnessMs: 2 * 60 * 1000,
        expectedAge: '2m'
      }, {
        freshnessMs: 90 * 60 * 1000,
        expectedAge: '1h'
      }, {
        freshnessMs: 25 * 60 * 60 * 1000,
        expectedAge: '1d'
      }, {
        freshnessMs: 3 * 24 * 60 * 60 * 1000,
        expectedAge: '3d'
      }];
      testCases.forEach(function (_ref) {
        var freshnessMs = _ref.freshnessMs,
          expectedAge = _ref.expectedAge;
        var result = formatAge(freshnessMs);
        expect(result).toBe(expectedAge);
      });
    });
    it('should handle edge cases in age calculation', function () {
      var testCases = [{
        freshnessMs: 0,
        expected: 'now'
      }, {
        freshnessMs: 59 * 1000,
        expected: 'now'
      }, {
        freshnessMs: 60 * 1000,
        expected: '1m'
      }, {
        freshnessMs: 59 * 60 * 1000,
        expected: '59m'
      }, {
        freshnessMs: 60 * 60 * 1000,
        expected: '1h'
      }, {
        freshnessMs: 23 * 60 * 60 * 1000,
        expected: '23h'
      }, {
        freshnessMs: 24 * 60 * 60 * 1000,
        expected: '1d'
      }];
      testCases.forEach(function (_ref2) {
        var freshnessMs = _ref2.freshnessMs,
          expected = _ref2.expected;
        var result = formatAge(freshnessMs);
        expect(result).toBe(expected);
      });
    });
    it('should handle very large time periods', function () {
      expect(formatAge(7 * 24 * 60 * 60 * 1000)).toBe('7d');
      expect(formatAge(30 * 24 * 60 * 60 * 1000)).toBe('30d');
      expect(formatAge(365 * 24 * 60 * 60 * 1000)).toBe('365d');
    });
  });
  describe('📏 Sample Size Formatting', function () {
    it('should format valid sample sizes correctly', function () {
      expect(formatSampleSize(1)).toBe('n=1');
      expect(formatSampleSize(15)).toBe('n=15');
      expect(formatSampleSize(100)).toBe('n=100');
    });
    it('should return null for invalid sample sizes', function () {
      expect(formatSampleSize(0)).toBeNull();
      expect(formatSampleSize(-5)).toBeNull();
      expect(formatSampleSize(undefined)).toBeNull();
    });
  });
  describe('🔄 Integration Tests', function () {
    it('should provide consistent mapping between all components', function () {
      var sources = ['unified', 'cache', 'llm', 'heuristic'];
      sources.forEach(function (source) {
        var config = getSourceConfig(source);
        expect(config.label).toBeTruthy();
        expect(config.color).toMatch(/^#[0-9A-F]{6}$/i);
        expect(config.bgColor).toMatch(/^#[0-9A-F]{6}$/i);
        expect(config.icon).toBeTruthy();
      });
      var qualities = ['high', 'medium', 'low'];
      qualities.forEach(function (quality) {
        var config = getQualityConfig(quality);
        expect(config.label).toBeTruthy();
        expect(config.color).toMatch(/^#[0-9A-F]{6}$/i);
        expect(config.bgColor).toMatch(/^#[0-9A-F]{6}$/i);
      });
    });
    it('should handle realistic data scenarios', function () {
      var highQualityAge = formatAge(5 * 60 * 1000);
      var highQualitySource = getSourceConfig('unified');
      var highQualityLevel = getQualityConfig('high');
      var highQualitySample = formatSampleSize(16);
      expect(highQualityAge).toBe('5m');
      expect(highQualitySource.label).toBe('Fresh');
      expect(highQualityLevel.label).toBe('High');
      expect(highQualitySample).toBe('n=16');
      var mediumQualityAge = formatAge(2 * 60 * 60 * 1000);
      var mediumQualitySource = getSourceConfig('cache');
      var mediumQualityLevel = getQualityConfig('medium');
      var mediumQualitySample = formatSampleSize(10);
      expect(mediumQualityAge).toBe('2h');
      expect(mediumQualitySource.label).toBe('Cache');
      expect(mediumQualityLevel.label).toBe('Med');
      expect(mediumQualitySample).toBe('n=10');
      var lowQualityAge = formatAge(30 * 1000);
      var lowQualitySource = getSourceConfig('heuristic');
      var lowQualityLevel = getQualityConfig('low');
      var lowQualitySample = formatSampleSize(4);
      expect(lowQualityAge).toBe('now');
      expect(lowQualitySource.label).toBe('Fast');
      expect(lowQualityLevel.label).toBe('Low');
      expect(lowQualitySample).toBe('n=4');
    });
  });
  describe('🎯 Task Requirements Validation', function () {
    it('should support all required source mappings per task spec', function () {
      expect(getSourceConfig('unified').label).toBe('Fresh');
      expect(getSourceConfig('cache').label).toBe('Cache');
      expect(getSourceConfig('llm').label).toBe('LLM');
      expect(getSourceConfig('heuristic').label).toBe('Fast');
    });
    it('should support all required quality mappings per task spec', function () {
      expect(getQualityConfig('high').label).toBe('High');
      expect(getQualityConfig('medium').label).toBe('Med');
      expect(getQualityConfig('low').label).toBe('Low');
    });
    it('should format sample sizes as n=X per task spec', function () {
      expect(formatSampleSize(15)).toBe('n=15');
      expect(formatSampleSize(1)).toBe('n=1');
      expect(formatSampleSize(100)).toBe('n=100');
    });
    it('should format age as now/m/h/d per task spec', function () {
      expect(formatAge(30 * 1000)).toBe('now');
      expect(formatAge(5 * 60 * 1000)).toBe('5m');
      expect(formatAge(2 * 60 * 60 * 1000)).toBe('2h');
      expect(formatAge(3 * 24 * 60 * 60 * 1000)).toBe('3d');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,