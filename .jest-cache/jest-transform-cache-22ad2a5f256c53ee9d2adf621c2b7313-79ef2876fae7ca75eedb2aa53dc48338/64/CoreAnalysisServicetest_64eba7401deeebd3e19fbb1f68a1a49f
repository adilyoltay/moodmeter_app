21014fcc8436d6de13465fb6912e5f79
_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../features/ai/telemetry/aiTelemetry", function () {
  return {
    trackCacheEvent: jest.fn(),
    trackGatingDecision: jest.fn(),
    trackAIInteraction: jest.fn(),
    AIEventType: {
      SIMILARITY_DEDUP_HIT: 'similarity_dedup_hit'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _CoreAnalysisService = require("../../../features/ai/core/CoreAnalysisService");
var _needsLLMAnalysis = require("../../../features/ai/core/needsLLMAnalysis");
var _ModuleOrchestrator = require("../../../features/ai/core/ModuleOrchestrator");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CoreAnalysisService', function () {
  var service;
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    service = new _CoreAnalysisService.CoreAnalysisServiceImpl();
    yield service.initialize();
  }));
  afterEach(function () {
    jest.resetAllMocks();
  });
  describe('Heuristic Classification', function () {
    it('should classify mood-related text correctly', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'VOICE',
        content: 'Bugün kendimi çok mutlu hissediyorum',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('MOOD');
      expect(result.confidence).toBeGreaterThan(0.5);
    }));
    it('should classify CBT-related text correctly', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'TEXT',
        content: 'Herkes benden nefret ediyor diye düşünüyorum',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('CBT');
      expect(result.payload).toBeDefined();
    }));
    it('should classify OCD-related text correctly', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'VOICE',
        content: 'El yıkama kompulsiyonum bugün 15 kez oldu',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('OCD');
      expect(result.route).toBe('AUTO_SAVE');
    }));
    it('should classify therapy-related text correctly', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'TEXT',
        content: 'ERP egzersizinde 10 dakika dayandım',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('ERP');
      expect(result.confidence).toBeGreaterThan(0.6);
    }));
    it('should classify breathwork suggestions correctly', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'VOICE',
        content: 'Çok stresli hissediyorum nefes alamıyorum',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('BREATHWORK');
      expect(result.route).toBe('SUGGEST_BREATHWORK');
    }));
  });
  describe('Cache Operations', function () {
    it('should return cached result when available', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'TEXT',
        content: 'Test content for caching',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result1 = yield service.analyze(input);
      var result2 = yield service.analyze(input);
      expect(result1.cacheKey).toBe(result2.cacheKey);
      expect(result2.source).toBe('cache');
    }));
    it('should invalidate cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var cacheKey = 'test-cache-key';
      yield service['cacheResult'](cacheKey, {
        quickClass: 'MOOD',
        confidence: 0.8,
        needsLLM: false,
        route: 'OPEN_SCREEN',
        payload: {},
        cacheKey: cacheKey,
        computedAt: Date.now()
      });
      var cached = yield service.getCached(cacheKey);
      expect(cached).toBeDefined();
      yield service.invalidate([cacheKey]);
      var afterInvalidate = yield service.getCached(cacheKey);
      expect(afterInvalidate).toBeNull();
    }));
  });
  describe('Route Determination', function () {
    it('should route high confidence OCD to AUTO_SAVE', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'VOICE',
        content: 'Kapıyı 5 kez kontrol ettim direnç gösteremedim',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('OCD');
      expect(result.route).toBe('AUTO_SAVE');
      expect(result.confidence).toBeGreaterThan(0.7);
    }));
    it('should route mood check to OPEN_SCREEN', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'TEXT',
        content: 'Duygu durumum iyi değil',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('MOOD');
      expect(result.route).toBe('OPEN_SCREEN');
      expect(result.payload.screen).toBe('mood');
    }));
    it('should suggest breathwork for anxiety', (0, _asyncToGenerator2.default)(function* () {
      var input = {
        kind: 'VOICE',
        content: 'Panik atak geçiriyorum nefes alamıyorum',
        userId: 'test-user',
        locale: 'tr-TR',
        ts: Date.now()
      };
      var result = yield service.analyze(input);
      expect(result.quickClass).toBe('BREATHWORK');
      expect(result.route).toBe('SUGGEST_BREATHWORK');
      expect(result.payload.exercise).toBeDefined();
    }));
  });
});
describe('needsLLMAnalysis', function () {
  it('should skip LLM for high confidence MOOD', function () {
    var result = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'MOOD',
      heuristicConfidence: 0.7,
      textLen: 50
    });
    expect(result).toBe(false);
  });
  it('should skip LLM for high confidence BREATHWORK', function () {
    var result = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'BREATHWORK',
      heuristicConfidence: 0.65,
      textLen: 30
    });
    expect(result).toBe(false);
  });
  it('should require LLM for long complex text', function () {
    var result = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'CBT',
      heuristicConfidence: 0.6,
      textLen: 300
    });
    expect(result).toBe(true);
  });
  it('should require LLM for low confidence', function () {
    var result = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'OCD',
      heuristicConfidence: 0.4,
      textLen: 100
    });
    expect(result).toBe(true);
  });
  it('should skip LLM if recently analyzed similar text', function () {
    var result = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'CBT',
      heuristicConfidence: 0.7,
      textLen: 150,
      lastSimilarHashAt: Date.now() - 30 * 60 * 1000
    });
    expect(result).toBe(false);
  });
  it('should require LLM for complex CBT/OCD/ERP even with medium confidence', function () {
    var resultCBT = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'CBT',
      heuristicConfidence: 0.75,
      textLen: 150
    });
    var resultOCD = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'OCD',
      heuristicConfidence: 0.75,
      textLen: 150
    });
    var resultERP = (0, _needsLLMAnalysis.needsLLMAnalysis)({
      quickClass: 'ERP',
      heuristicConfidence: 0.75,
      textLen: 150
    });
    expect(resultCBT).toBe(true);
    expect(resultOCD).toBe(true);
    expect(resultERP).toBe(true);
  });
});
describe('ModuleOrchestrator', function () {
  var orchestrator;
  beforeEach(function () {
    orchestrator = new _ModuleOrchestrator.ModuleOrchestratorImpl();
  });
  it('should handle MOOD module correctly', (0, _asyncToGenerator2.default)(function* () {
    var result = yield orchestrator.handleModule('MOOD', {
      text: 'Kendimi mutlu hissediyorum',
      confidence: 0.8
    });
    expect(result.route).toBe('OPEN_SCREEN');
    expect(result.payload.screen).toBe('mood');
    expect(result.payload.mood).toBeGreaterThan(50);
  }));
  it('should handle CBT module correctly', (0, _asyncToGenerator2.default)(function* () {
    var result = yield orchestrator.handleModule('CBT', {
      text: 'Herkes bana kızgın',
      confidence: 0.7
    });
    expect(result.route).toBe('OPEN_SCREEN');
    expect(result.payload.screen).toBe('cbt');
    expect(result.payload.params.thought).toBeDefined();
  }));
  it('should handle OCD module correctly', (0, _asyncToGenerator2.default)(function* () {
    var result = yield orchestrator.handleModule('OCD', {
      text: 'El yıkama kompulsiyonu yaşadım',
      confidence: 0.85
    });
    expect(result.route).toBe('AUTO_SAVE');
    expect(result.payload.category).toBeDefined();
    expect(result.payload.resistanceLevel).toBeDefined();
  }));
  it('should handle ERP module correctly', (0, _asyncToGenerator2.default)(function* () {
    var result = yield orchestrator.handleModule('ERP', {
      text: 'ERP egzersizini tamamladım',
      confidence: 0.8
    });
    expect(result.route).toBe('OPEN_SCREEN');
    expect(result.payload.screen).toBe('erp');
    expect(result.payload.params.sessionId).toBeDefined();
  }));
  it('should handle BREATHWORK module correctly', (0, _asyncToGenerator2.default)(function* () {
    var result = yield orchestrator.handleModule('BREATHWORK', {
      text: 'Nefes alamıyorum çok stres',
      confidence: 0.9
    });
    expect(result.route).toBe('SUGGEST_BREATHWORK');
    expect(result.payload.exercise).toBeDefined();
    expect(result.payload.duration).toBeDefined();
  }));
  it('should handle timeout gracefully', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(orchestrator, 'analyzeMood').mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(resolve, 6000);
      });
    });
    var result = yield orchestrator.handleModule('MOOD', {
      text: 'Test timeout',
      confidence: 0.5
    });
    expect(result.route).toBe('OPEN_SCREEN');
    expect(result.payload.screen).toBe('mood');
    expect(result.payload.message).toContain('zaman aşımı');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,