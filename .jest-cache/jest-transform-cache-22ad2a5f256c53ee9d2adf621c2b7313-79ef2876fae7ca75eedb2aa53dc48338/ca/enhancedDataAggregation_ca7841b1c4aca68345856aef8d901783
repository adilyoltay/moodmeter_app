614773d95bb3dfc52278173731667331
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enhancedAIDataAggregator = exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _supabase = _interopRequireDefault(require("../../../services/supabase"));
var _aiTelemetry = require("../telemetry/aiTelemetry");
var EnhancedAIDataAggregationService = function () {
  function EnhancedAIDataAggregationService() {
    (0, _classCallCheck2.default)(this, EnhancedAIDataAggregationService);
  }
  return (0, _createClass2.default)(EnhancedAIDataAggregationService, [{
    key: "aggregateComprehensiveData",
    value: function () {
      var _aggregateComprehensiveData = (0, _asyncToGenerator2.default)(function* (userId) {
        var _yield$Promise$all = yield Promise.all([this.fetchCompulsions(userId, 30), this.fetchMoodEntries(userId, 30), this.fetchUserProfile(userId)]),
          _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 3),
          compulsions = _yield$Promise$all2[0],
          moodEntries = _yield$Promise$all2[1],
          profile = _yield$Promise$all2[2];
        var symptoms = yield this.analyzeSymptoms(compulsions, moodEntries);
        var performance = yield this.calculateDetailedPerformance(compulsions);
        var patterns = yield this.extractAdvancedPatterns(compulsions, moodEntries);
        var insights = yield this.generateInsights(symptoms, performance, patterns);
        var recommendations = yield this.generateRecommendations(insights, symptoms, performance);
        return {
          profile: profile,
          symptoms: symptoms,
          performance: performance,
          patterns: patterns,
          insights: insights,
          recommendations: recommendations
        };
      });
      function aggregateComprehensiveData(_x) {
        return _aggregateComprehensiveData.apply(this, arguments);
      }
      return aggregateComprehensiveData;
    }()
  }, {
    key: "fetchCompulsions",
    value: function () {
      var _fetchCompulsions = (0, _asyncToGenerator2.default)(function* (userId, days) {
        try {
          var svc = _supabase.default;
          if (svc && typeof svc.getCompulsions === 'function') {
            return yield svc.getCompulsions.call(svc, userId);
          }
        } catch (e) {
          try {
            (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.API_ERROR, {
              scope: 'fetchCompulsions',
              error: String(e)
            });
          } catch (_unused) {}
        }
        return [];
      });
      function fetchCompulsions(_x2, _x3) {
        return _fetchCompulsions.apply(this, arguments);
      }
      return fetchCompulsions;
    }()
  }, {
    key: "fetchMoodEntries",
    value: function () {
      var _fetchMoodEntries = (0, _asyncToGenerator2.default)(function* (userId, days) {
        var entries = [];
        try {
          for (var i = 0; i < days; i++) {
            var date = new Date(Date.now() - i * 86400000).toISOString().split('T')[0];
            var key = `mood_entries_${userId}_${date}`;
            var raw = yield _asyncStorage.default.getItem(key);
            if (raw) entries.push.apply(entries, (0, _toConsumableArray2.default)(JSON.parse(raw)));
          }
          if (entries.length > 0) return entries;
        } catch (_unused2) {}
        try {
          var since = new Date(Date.now() - days * 86400000).toISOString();
          var _yield$supabaseClient = yield _supabase.default.supabaseClient.from('mood_tracking').select('*').eq('user_id', userId).gte('created_at', since).order('created_at', {
              ascending: false
            }),
            data = _yield$supabaseClient.data,
            error = _yield$supabaseClient.error;
          if (!error && data) return data.map(function (d) {
            return {
              id: d.id,
              user_id: d.user_id,
              mood_score: d.mood_score,
              energy_level: d.energy_level,
              anxiety_level: d.anxiety_level,
              notes: d.notes,
              triggers: d.triggers,
              activities: d.activities,
              timestamp: d.created_at
            };
          });
        } catch (_unused3) {}
        return entries;
      });
      function fetchMoodEntries(_x4, _x5) {
        return _fetchMoodEntries.apply(this, arguments);
      }
      return fetchMoodEntries;
    }()
  }, {
    key: "fetchUserProfile",
    value: function () {
      var _fetchUserProfile = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          var svc = _supabase.default;
          if (svc && svc.supabaseClient) {
            var _yield$svc$supabaseCl = yield svc.supabaseClient.from('ai_profiles').select('profile_data').eq('user_id', userId).single(),
              data = _yield$svc$supabaseCl.data,
              error = _yield$svc$supabaseCl.error;
            if (!error && data != null && data.profile_data) {
              return data.profile_data;
            }
          }
        } catch (_unused4) {}
        try {
          var raw = yield _asyncStorage.default.getItem(`ai_user_profile_${userId}`);
          return raw ? JSON.parse(raw) : {};
        } catch (e) {
          try {
            (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.API_ERROR, {
              scope: 'fetchUserProfile',
              error: String(e)
            });
          } catch (_unused5) {}
          return {};
        }
      });
      function fetchUserProfile(_x6) {
        return _fetchUserProfile.apply(this, arguments);
      }
      return fetchUserProfile;
    }()
  }, {
    key: "analyzeSymptoms",
    value: function () {
      var _analyzeSymptoms = (0, _asyncToGenerator2.default)(function* (compulsions, moods) {
        var categoryFreq = new Map();
        var severityByCategory = new Map();
        var timePatterns = new Map();
        compulsions.forEach(function (c) {
          var _c$resistance_level;
          var category = c.category || 'other';
          var hour = new Date(c.timestamp || c.created_at || Date.now()).getHours();
          categoryFreq.set(category, (categoryFreq.get(category) || 0) + 1);
          if (!severityByCategory.has(category)) severityByCategory.set(category, []);
          severityByCategory.get(category).push(Number((_c$resistance_level = c.resistance_level) != null ? _c$resistance_level : 5));
          if (!timePatterns.has(category)) timePatterns.set(category, Array(24).fill(0));
          timePatterns.get(category)[hour]++;
        });
        var primaryCategories = Array.from(categoryFreq.entries()).sort(function (a, b) {
          return b[1] - a[1];
        }).slice(0, 3).map(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
            k = _ref2[0];
          return k;
        });
        var severityTrend = 'stable';
        if (compulsions.length >= 7) {
          var recent = compulsions.slice(-7);
          var previous = compulsions.slice(-14, -7);
          if (previous.length > 0) {
            var recentAvg = recent.reduce(function (s, c) {
              var _c$resistance_level2;
              return s + Number((_c$resistance_level2 = c.resistance_level) != null ? _c$resistance_level2 : 5);
            }, 0) / recent.length;
            var prevAvg = previous.reduce(function (s, c) {
              var _c$resistance_level3;
              return s + Number((_c$resistance_level3 = c.resistance_level) != null ? _c$resistance_level3 : 5);
            }, 0) / previous.length;
            if (recentAvg > prevAvg + 1) severityTrend = 'improving';else if (recentAvg < prevAvg - 1) severityTrend = 'worsening';
          }
        }
        var peakHours = [];
        timePatterns.forEach(function (hours) {
          var maxCount = Math.max.apply(Math, (0, _toConsumableArray2.default)(hours));
          hours.forEach(function (count, hour) {
            if (count === maxCount && count > 0) peakHours.push(hour);
          });
        });
        var anxietyLevels = moods.map(function (m) {
          var _m$anxiety_level;
          return Number((_m$anxiety_level = m.anxiety_level) != null ? _m$anxiety_level : 5);
        });
        var avgAnxiety = anxietyLevels.length > 0 ? anxietyLevels.reduce(function (a, b) {
          return a + b;
        }, 0) / anxietyLevels.length : 5;
        return {
          primaryCategories: primaryCategories,
          severityTrend: severityTrend,
          averageSeverity: compulsions.length > 0 ? compulsions.reduce(function (sum, c) {
            var _c$resistance_level4;
            return sum + Number((_c$resistance_level4 = c.resistance_level) != null ? _c$resistance_level4 : 5);
          }, 0) / compulsions.length : 0,
          peakHours: Array.from(new Set(peakHours)).sort(function (a, b) {
            return a - b;
          }),
          anxietyCorrelation: avgAnxiety > 7 ? 'high' : avgAnxiety > 4 ? 'moderate' : 'low',
          totalCompulsions: compulsions.length,
          categoryCounts: Object.fromEntries(categoryFreq)
        };
      });
      function analyzeSymptoms(_x7, _x8) {
        return _analyzeSymptoms.apply(this, arguments);
      }
      return analyzeSymptoms;
    }()
  }, {
    key: "calculateDetailedPerformance",
    value: function () {
      var _calculateDetailedPerformance = (0, _asyncToGenerator2.default)(function* (comp) {
        var streakDays = 0;
        var today = new Date();
        var activityDates = new Set();
        comp.forEach(function (item) {
          var ts = item.timestamp || item.created_at;
          if (!ts) return;
          activityDates.add(new Date(ts).toDateString());
        });
        for (var i = 0; i < 30; i++) {
          var checkDate = new Date(today.getTime() - i * 86400000).toDateString();
          if (activityDates.has(checkDate)) streakDays++;else if (i > 0) break;
        }
        var resistanceImprovement = 0;
        if (comp.length >= 14) {
          var recent = comp.slice(-7);
          var previous = comp.slice(-14, -7);
          if (previous.length > 0) {
            var recentAvg = recent.reduce(function (s, c) {
              var _c$resistance_level5;
              return s + Number((_c$resistance_level5 = c.resistance_level) != null ? _c$resistance_level5 : 0);
            }, 0) / recent.length;
            var prevAvg = previous.reduce(function (s, c) {
              var _c$resistance_level6;
              return s + Number((_c$resistance_level6 = c.resistance_level) != null ? _c$resistance_level6 : 0);
            }, 0) / previous.length;
            resistanceImprovement = (recentAvg - prevAvg) / (prevAvg || 1) * 100;
          }
        }
        return {
          streakDays: streakDays,
          resistanceImprovement: Math.round(resistanceImprovement),
          weeklyActivity: Math.round(activityDates.size / 7 * 100),
          totalCompulsions: comp.length
        };
      });
      function calculateDetailedPerformance(_x9) {
        return _calculateDetailedPerformance.apply(this, arguments);
      }
      return calculateDetailedPerformance;
    }()
  }, {
    key: "extractAdvancedPatterns",
    value: function () {
      var _extractAdvancedPatterns = (0, _asyncToGenerator2.default)(function* (compulsions, moods) {
        return {
          timeBasedPatterns: [],
          successFactors: [],
          riskPeriods: []
        };
      });
      function extractAdvancedPatterns(_x0, _x1) {
        return _extractAdvancedPatterns.apply(this, arguments);
      }
      return extractAdvancedPatterns;
    }()
  }, {
    key: "generateInsights",
    value: function () {
      var _generateInsights = (0, _asyncToGenerator2.default)(function* (symptoms, performance, patterns) {
        var insights = {
          key_findings: [],
          improvement_areas: [],
          strengths: [],
          warnings: []
        };
        if (symptoms.severityTrend === 'improving') insights.key_findings.push('Kompulsiyon direncinde iyileşme gözleniyor');
        if (performance.streakDays >= 7) insights.key_findings.push(`${performance.streakDays} gündür düzenli aktivite`);
        if (symptoms.primaryCategories && symptoms.primaryCategories.length > 0) insights.improvement_areas.push(`${symptoms.primaryCategories[0]} kompulsiyonlarına odaklanın`);
        if (performance.streakDays > 0) insights.strengths.push('Düzenli kullanım alışkanlığı');
        if (performance.resistanceImprovement > 10) insights.strengths.push('Kompulsiyonlara karşı direnç artıyor');
        if (symptoms.severityTrend === 'worsening') insights.warnings.push('Son hafta kompulsiyon şiddeti artmış olabilir');
        if (symptoms.anxietyCorrelation === 'high') insights.warnings.push('Anksiyete seviyeleri yüksek');
        return insights;
      });
      function generateInsights(_x10, _x11, _x12) {
        return _generateInsights.apply(this, arguments);
      }
      return generateInsights;
    }()
  }, {
    key: "generateRecommendations",
    value: function () {
      var _generateRecommendations = (0, _asyncToGenerator2.default)(function* (insights, symptoms, performance) {
        var recommendations = {
          immediate: [],
          weekly: [],
          longTerm: []
        };
        if (symptoms.peakHours && symptoms.peakHours.length > 0) {
          var peak = symptoms.peakHours[0];
          recommendations.immediate.push({
            type: 'timing',
            title: 'Kritik Saat Uyarısı',
            description: `Kompulsiyonlar genelde ${peak}:00 civarında artıyor`,
            action: 'Hatırlatıcı kur'
          });
        }
        if (symptoms.primaryCategories && symptoms.primaryCategories.length > 0) {
          var top = symptoms.primaryCategories[0];
          recommendations.weekly.push({
            type: 'focus',
            title: `${top} kompulsiyonlarına odaklan`,
            description: `Bu hafta ${top} kategorisinde çalışın`,
            action: 'Plan oluştur'
          });
        }
        if (performance.streakDays < 7) {
          recommendations.longTerm.push({
            type: 'habit',
            title: 'Düzenli Takip Alışkanlığı',
            description: '21 günlük takip hedefi belirleyin',
            action: 'Hedef belirle'
          });
        }
        return recommendations;
      });
      function generateRecommendations(_x13, _x14, _x15) {
        return _generateRecommendations.apply(this, arguments);
      }
      return generateRecommendations;
    }()
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!EnhancedAIDataAggregationService.instance) {
        EnhancedAIDataAggregationService.instance = new EnhancedAIDataAggregationService();
      }
      return EnhancedAIDataAggregationService.instance;
    }
  }]);
}();
var enhancedAIDataAggregator = exports.enhancedAIDataAggregator = EnhancedAIDataAggregationService.getInstance();
var _default = exports.default = enhancedAIDataAggregator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,