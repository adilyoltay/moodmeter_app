{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_supabase","_aiTelemetry","EnhancedAIDataAggregationService","_classCallCheck2","default","_createClass2","key","value","_aggregateComprehensiveData","_asyncToGenerator2","userId","_yield$Promise$all","Promise","all","fetchCompulsions","fetchMoodEntries","fetchUserProfile","_yield$Promise$all2","_slicedToArray2","compulsions","moodEntries","profile","symptoms","analyzeSymptoms","performance","calculateDetailedPerformance","patterns","extractAdvancedPatterns","insights","generateInsights","recommendations","generateRecommendations","aggregateComprehensiveData","_x","apply","arguments","_fetchCompulsions","days","svc","supabaseService","getCompulsions","call","e","trackAIInteraction","AIEventType","API_ERROR","scope","error","String","_unused","_x2","_x3","_fetchMoodEntries","entries","i","date","Date","now","toISOString","split","raw","AsyncStorage","getItem","push","_toConsumableArray2","JSON","parse","length","_unused2","since","_yield$supabaseClient","supabaseClient","from","select","eq","gte","order","ascending","data","map","d","id","user_id","mood_score","energy_level","anxiety_level","notes","triggers","activities","timestamp","created_at","_unused3","_x4","_x5","_fetchUserProfile","_yield$svc$supabaseCl","single","profile_data","_unused4","_unused5","_x6","_analyzeSymptoms","moods","categoryFreq","Map","severityByCategory","timePatterns","forEach","c","_c$resistance_level","category","hour","getHours","set","get","has","Number","resistance_level","Array","fill","primaryCategories","sort","a","b","slice","_ref","_ref2","k","severityTrend","recent","previous","recentAvg","reduce","s","_c$resistance_level2","prevAvg","_c$resistance_level3","peakHours","hours","maxCount","Math","max","count","anxietyLevels","m","_m$anxiety_level","avgAnxiety","averageSeverity","sum","_c$resistance_level4","Set","anxietyCorrelation","totalCompulsions","categoryCounts","Object","fromEntries","_x7","_x8","_calculateDetailedPerformance","comp","streakDays","today","activityDates","item","ts","add","toDateString","checkDate","getTime","resistanceImprovement","_c$resistance_level5","_c$resistance_level6","round","weeklyActivity","size","_x9","_extractAdvancedPatterns","timeBasedPatterns","successFactors","riskPeriods","_x0","_x1","_generateInsights","key_findings","improvement_areas","strengths","warnings","_x10","_x11","_x12","_generateRecommendations","immediate","weekly","longTerm","peak","type","title","description","action","top","_x13","_x14","_x15","getInstance","instance","enhancedAIDataAggregator","exports","_default"],"sources":["enhancedDataAggregation.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport supabaseService from '@/services/supabase';\nimport { trackAIInteraction, AIEventType } from '@/features/ai/telemetry/aiTelemetry';\n\nexport interface EnhancedUserDataAggregate {\n  profile: any;\n  symptoms: any;\n  performance: any;\n  patterns: any;\n  insights: any;\n  recommendations: any;\n}\n\nclass EnhancedAIDataAggregationService {\n  private static instance: EnhancedAIDataAggregationService;\n  static getInstance(): EnhancedAIDataAggregationService {\n    if (!EnhancedAIDataAggregationService.instance) {\n      EnhancedAIDataAggregationService.instance = new EnhancedAIDataAggregationService();\n    }\n    return EnhancedAIDataAggregationService.instance;\n  }\n\n  async aggregateComprehensiveData(userId: string): Promise<EnhancedUserDataAggregate> {\n    const [compulsions, moodEntries, profile] = await Promise.all([\n      this.fetchCompulsions(userId, 30),\n      // ✅ REMOVED: fetchTerapiSessions - ERP module deleted\n      this.fetchMoodEntries(userId, 30),\n      this.fetchUserProfile(userId)\n    ]);\n\n    const symptoms = await this.analyzeSymptoms(compulsions, moodEntries);\n    const performance = await this.calculateDetailedPerformance(compulsions);\n    const patterns = await this.extractAdvancedPatterns(compulsions, moodEntries);\n    const insights = await this.generateInsights(symptoms, performance, patterns);\n    const recommendations = await this.generateRecommendations(insights, symptoms, performance);\n\n    return { profile, symptoms, performance, patterns, insights, recommendations };\n  }\n\n  private async fetchCompulsions(userId: string, days: number): Promise<any[]> {\n    try {\n      const svc: any = supabaseService as any;\n      if (svc && typeof svc.getCompulsions === 'function') {\n        return await svc.getCompulsions.call(svc, userId);\n      }\n    } catch (e) {\n      try { trackAIInteraction(AIEventType.API_ERROR, { scope: 'fetchCompulsions', error: String(e) } as any); } catch {}\n    }\n    return [];\n  }\n  // ✅ REMOVED: fetchTerapiSessions method - ERP module deleted\n  private async fetchMoodEntries(userId: string, days: number): Promise<any[]> {\n    // Prefer local cached by day, fallback remote\n    const entries: any[] = [];\n    try {\n      for (let i = 0; i < days; i++) {\n        const date = new Date(Date.now() - i * 86400000).toISOString().split('T')[0];\n        const key = `mood_entries_${userId}_${date}`;\n        const raw = await AsyncStorage.getItem(key);\n        if (raw) entries.push(...JSON.parse(raw));\n      }\n      if (entries.length > 0) return entries;\n    } catch {}\n    // Remote fallback\n    try {\n      const since = new Date(Date.now() - days * 86400000).toISOString();\n      const { data, error } = await (supabaseService as any).supabaseClient\n        .from('mood_tracking')\n        .select('*')\n        .eq('user_id', userId)\n        .gte('created_at', since)\n        .order('created_at', { ascending: false });\n      if (!error && data) return data.map((d: any) => ({\n        id: d.id,\n        user_id: d.user_id,\n        mood_score: d.mood_score,\n        energy_level: d.energy_level,\n        anxiety_level: d.anxiety_level,\n        notes: d.notes,\n        triggers: d.triggers,\n        activities: d.activities,\n        timestamp: d.created_at\n      }));\n    } catch {}\n    return entries;\n  }\n  private async fetchUserProfile(userId: string): Promise<any> {\n    // Prefer remote (Supabase) profile for cross-device continuity\n    try {\n      const svc: any = supabaseService as any;\n      if (svc && svc.supabaseClient) {\n        const { data, error } = await svc.supabaseClient\n          .from('ai_profiles')\n          .select('profile_data')\n          .eq('user_id', userId)\n          .single();\n        if (!error && data?.profile_data) {\n          return data.profile_data;\n        }\n      }\n    } catch {}\n\n    // Fallback to local\n    try {\n      const raw = await AsyncStorage.getItem(`ai_user_profile_${userId}`);\n      return raw ? JSON.parse(raw) : {};\n    } catch (e) {\n      try { trackAIInteraction(AIEventType.API_ERROR, { scope: 'fetchUserProfile', error: String(e) } as any); } catch {}\n      return {};\n    }\n  }\n\n  private async analyzeSymptoms(compulsions: any[], moods: any[]): Promise<any> {\n    const categoryFreq = new Map<string, number>();\n    const severityByCategory = new Map<string, number[]>();\n    const timePatterns = new Map<string, number[]>();\n    compulsions.forEach((c) => {\n      const category = c.category || 'other';\n      const hour = new Date(c.timestamp || c.created_at || Date.now()).getHours();\n      categoryFreq.set(category, (categoryFreq.get(category) || 0) + 1);\n      if (!severityByCategory.has(category)) severityByCategory.set(category, []);\n      severityByCategory.get(category)!.push(Number(c.resistance_level ?? 5));\n      if (!timePatterns.has(category)) timePatterns.set(category, Array(24).fill(0));\n      timePatterns.get(category)![hour]++;\n    });\n\n    const primaryCategories = Array.from(categoryFreq.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 3)\n      .map(([k]) => k);\n\n    // Severity trend\n    let severityTrend: 'improving' | 'worsening' | 'stable' = 'stable';\n    if (compulsions.length >= 7) {\n      const recent = compulsions.slice(-7);\n      const previous = compulsions.slice(-14, -7);\n      if (previous.length > 0) {\n        const recentAvg = recent.reduce((s, c) => s + Number(c.resistance_level ?? 5), 0) / recent.length;\n        const prevAvg = previous.reduce((s, c) => s + Number(c.resistance_level ?? 5), 0) / previous.length;\n        if (recentAvg > prevAvg + 1) severityTrend = 'improving';\n        else if (recentAvg < prevAvg - 1) severityTrend = 'worsening';\n      }\n    }\n\n    // Peak hours\n    const peakHours: number[] = [];\n    timePatterns.forEach((hours) => {\n      const maxCount = Math.max(...hours);\n      hours.forEach((count, hour) => {\n        if (count === maxCount && count > 0) peakHours.push(hour);\n      });\n    });\n\n    // Mood correlation approximation\n    const anxietyLevels = moods.map((m) => Number(m.anxiety_level ?? 5));\n    const avgAnxiety = anxietyLevels.length > 0 ? anxietyLevels.reduce((a, b) => a + b, 0) / anxietyLevels.length : 5;\n\n    return {\n      primaryCategories,\n      severityTrend,\n      averageSeverity:\n        compulsions.length > 0\n          ? compulsions.reduce((sum, c) => sum + Number(c.resistance_level ?? 5), 0) / compulsions.length\n          : 0,\n      peakHours: Array.from(new Set(peakHours)).sort((a, b) => a - b),\n      anxietyCorrelation: avgAnxiety > 7 ? 'high' : avgAnxiety > 4 ? 'moderate' : 'low',\n      totalCompulsions: compulsions.length,\n      categoryCounts: Object.fromEntries(categoryFreq),\n    };\n  }\n\n  private async calculateDetailedPerformance(comp: any[]): Promise<any> {\n    // ✅ REMOVED: ERP sessions logic - ERP module deleted\n\n    // Streak calculation (activity per day) - only compulsions\n    let streakDays = 0;\n    const today = new Date();\n    const activityDates = new Set<string>();\n    comp.forEach((item: any) => {\n      const ts = item.timestamp || item.created_at;\n      if (!ts) return;\n      activityDates.add(new Date(ts).toDateString());\n    });\n    for (let i = 0; i < 30; i++) {\n      const checkDate = new Date(today.getTime() - i * 86400000).toDateString();\n      if (activityDates.has(checkDate)) streakDays++;\n      else if (i > 0) break;\n    }\n\n    // Resistance improvement week over week\n    let resistanceImprovement = 0;\n    if (comp.length >= 14) {\n      const recent = comp.slice(-7);\n      const previous = comp.slice(-14, -7);\n      if (previous.length > 0) {\n        const recentAvg = recent.reduce((s: number, c: any) => s + Number(c.resistance_level ?? 0), 0) / recent.length;\n        const prevAvg = previous.reduce((s: number, c: any) => s + Number(c.resistance_level ?? 0), 0) / previous.length;\n        resistanceImprovement = ((recentAvg - prevAvg) / (prevAvg || 1)) * 100;\n      }\n    }\n\n    return {\n      // ✅ REMOVED: erpCompletionRate, anxietyReduction, totalTerapiSessions, completedTerapiSessions - ERP module deleted\n      streakDays,\n      resistanceImprovement: Math.round(resistanceImprovement),\n      weeklyActivity: Math.round((activityDates.size / 7) * 100),\n      totalCompulsions: comp.length,\n    };\n  }\n\n  private async extractAdvancedPatterns(compulsions: any[], moods: any[]): Promise<any> {\n    // ✅ REMOVED: erpSessions parameter - ERP module deleted\n    // Placeholder for future advanced pattern mining; keep basic structure\n    return { timeBasedPatterns: [], successFactors: [], riskPeriods: [] };\n  }\n\n  private async generateInsights(symptoms: any, performance: any, patterns: any): Promise<any> {\n    const insights = { key_findings: [] as string[], improvement_areas: [] as string[], strengths: [] as string[], warnings: [] as string[] };\n    if (symptoms.severityTrend === 'improving') insights.key_findings.push('Kompulsiyon direncinde iyileşme gözleniyor');\n    if (performance.streakDays >= 7) insights.key_findings.push(`${performance.streakDays} gündür düzenli aktivite`);\n    // ✅ REMOVED: Anxiety reduction finding - ERP module deleted\n\n    // ✅ REMOVED: ERP completion rate check - ERP module deleted\n    if (symptoms.primaryCategories && symptoms.primaryCategories.length > 0) insights.improvement_areas.push(`${symptoms.primaryCategories[0]} kompulsiyonlarına odaklanın`);\n\n    if (performance.streakDays > 0) insights.strengths.push('Düzenli kullanım alışkanlığı');\n    if (performance.resistanceImprovement > 10) insights.strengths.push('Kompulsiyonlara karşı direnç artıyor');\n\n    if (symptoms.severityTrend === 'worsening') insights.warnings.push('Son hafta kompulsiyon şiddeti artmış olabilir');\n    if (symptoms.anxietyCorrelation === 'high') insights.warnings.push('Anksiyete seviyeleri yüksek');\n    return insights;\n  }\n\n  private async generateRecommendations(insights: any, symptoms: any, performance: any): Promise<any> {\n    const recommendations = { immediate: [] as any[], weekly: [] as any[], longTerm: [] as any[] };\n    if (symptoms.peakHours && symptoms.peakHours.length > 0) {\n      const peak = symptoms.peakHours[0];\n      recommendations.immediate.push({ type: 'timing', title: 'Kritik Saat Uyarısı', description: `Kompulsiyonlar genelde ${peak}:00 civarında artıyor`, action: 'Hatırlatıcı kur' });\n    }\n    // ✅ REMOVED: ERP completion rate recommendation - ERP module deleted\n    if (symptoms.primaryCategories && symptoms.primaryCategories.length > 0) {\n      const top = symptoms.primaryCategories[0];\n      recommendations.weekly.push({ type: 'focus', title: `${top} kompulsiyonlarına odaklan`, description: `Bu hafta ${top} kategorisinde çalışın`, action: 'Plan oluştur' });\n    }\n    if (performance.streakDays < 7) {\n      recommendations.longTerm.push({ type: 'habit', title: 'Düzenli Takip Alışkanlığı', description: '21 günlük takip hedefi belirleyin', action: 'Hedef belirle' });\n    }\n    return recommendations;\n  }\n}\n\nexport const enhancedAIDataAggregator = EnhancedAIDataAggregationService.getInstance();\nexport default enhancedAIDataAggregator;\n\n\n"],"mappings":"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","ignoreList":[]}