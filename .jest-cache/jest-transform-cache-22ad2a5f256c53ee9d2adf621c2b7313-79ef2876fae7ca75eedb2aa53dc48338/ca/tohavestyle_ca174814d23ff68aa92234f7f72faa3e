e64736901f7f3434ae59c5018021d8c0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveStyle = toHaveStyle;
var _reactNative = require("react-native");
var _jestMatcherUtils = require("jest-matcher-utils");
var _utils = require("./utils");
function toHaveStyle(element, style) {
  var _reactNative$StyleShe,
    _reactNative$StyleShe2,
    _this = this;
  (0, _utils.checkHostElement)(element, toHaveStyle, this);
  var expected = (_reactNative$StyleShe = _reactNative.StyleSheet.flatten(style)) != null ? _reactNative$StyleShe : {};
  var received = (_reactNative$StyleShe2 = _reactNative.StyleSheet.flatten(element.props.style)) != null ? _reactNative$StyleShe2 : {};
  var pass = Object.keys(expected).every(function (key) {
    return _this.equals(expected[key], received[key]);
  });
  return {
    pass: pass,
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      var matcher = (0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveStyle`, 'element', '');
      if (pass) {
        return (0, _utils.formatMessage)(matcher, `Expected element ${to} have style`, formatStyles(expected), 'Received', formatStyles(pickReceivedStyles(expected, received)));
      } else {
        return [matcher, '', expectedDiff(expected, received)].join('\n');
      }
    }
  };
}
function expectedDiff(expected, received) {
  var receivedNarrow = pickReceivedStyles(expected, received);
  return (0, _jestMatcherUtils.diff)(formatStyles(expected), formatStyles(receivedNarrow));
}
function pickReceivedStyles(expected, received) {
  var result = {};
  Object.keys(received).forEach(function (key) {
    if (expected[key] !== undefined) {
      result[key] = received[key];
    }
  });
  return result;
}
function formatStyles(style) {
  return Object.keys(style).sort().map(function (prop) {
    return Array.isArray(style[prop]) ? `${prop}: ${JSON.stringify(style[prop], null, 2)};` : `${prop}: ${style[prop]};`;
  }).join('\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2plc3RNYXRjaGVyVXRpbHMiLCJfdXRpbHMiLCJ0b0hhdmVTdHlsZSIsImVsZW1lbnQiLCJzdHlsZSIsIl9yZWFjdE5hdGl2ZSRTdHlsZVNoZSIsIl9yZWFjdE5hdGl2ZSRTdHlsZVNoZTIiLCJfdGhpcyIsImNoZWNrSG9zdEVsZW1lbnQiLCJleHBlY3RlZCIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwicmVjZWl2ZWQiLCJwcm9wcyIsInBhc3MiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJlcXVhbHMiLCJtZXNzYWdlIiwidG8iLCJpc05vdCIsIm1hdGNoZXIiLCJtYXRjaGVySGludCIsImZvcm1hdE1lc3NhZ2UiLCJmb3JtYXRTdHlsZXMiLCJwaWNrUmVjZWl2ZWRTdHlsZXMiLCJleHBlY3RlZERpZmYiLCJqb2luIiwicmVjZWl2ZWROYXJyb3ciLCJkaWZmIiwicmVzdWx0IiwiZm9yRWFjaCIsInVuZGVmaW5lZCIsInNvcnQiLCJtYXAiLCJwcm9wIiwiQXJyYXkiLCJpc0FycmF5IiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRjaGVycy90by1oYXZlLXN0eWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSW1hZ2VTdHlsZSwgU3R5bGVQcm9wLCBUZXh0U3R5bGUsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGRpZmYsIG1hdGNoZXJIaW50IH0gZnJvbSAnamVzdC1tYXRjaGVyLXV0aWxzJztcblxuaW1wb3J0IHsgY2hlY2tIb3N0RWxlbWVudCwgZm9ybWF0TWVzc2FnZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBTdHlsZSA9IFZpZXdTdHlsZSB8IFRleHRTdHlsZSB8IEltYWdlU3R5bGU7XG5cbnR5cGUgU3R5bGVMaWtlID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0hhdmVTdHlsZShcbiAgdGhpczogamVzdC5NYXRjaGVyQ29udGV4dCxcbiAgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIHN0eWxlOiBTdHlsZVByb3A8U3R5bGU+LFxuKSB7XG4gIGNoZWNrSG9zdEVsZW1lbnQoZWxlbWVudCwgdG9IYXZlU3R5bGUsIHRoaXMpO1xuXG4gIGNvbnN0IGV4cGVjdGVkID0gKFN0eWxlU2hlZXQuZmxhdHRlbihzdHlsZSkgYXMgU3R5bGVMaWtlKSA/PyB7fTtcbiAgY29uc3QgcmVjZWl2ZWQgPSAoU3R5bGVTaGVldC5mbGF0dGVuKGVsZW1lbnQucHJvcHMuc3R5bGUpIGFzIFN0eWxlTGlrZSkgPz8ge307XG5cbiAgY29uc3QgcGFzcyA9IE9iamVjdC5rZXlzKGV4cGVjdGVkKS5ldmVyeSgoa2V5KSA9PiB0aGlzLmVxdWFscyhleHBlY3RlZFtrZXldLCByZWNlaXZlZFtrZXldKSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgIGNvbnN0IG1hdGNoZXIgPSBtYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZVN0eWxlYCwgJ2VsZW1lbnQnLCAnJyk7XG5cbiAgICAgIGlmIChwYXNzKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG1hdGNoZXIsXG4gICAgICAgICAgYEV4cGVjdGVkIGVsZW1lbnQgJHt0b30gaGF2ZSBzdHlsZWAsXG4gICAgICAgICAgZm9ybWF0U3R5bGVzKGV4cGVjdGVkKSxcbiAgICAgICAgICAnUmVjZWl2ZWQnLFxuICAgICAgICAgIGZvcm1hdFN0eWxlcyhwaWNrUmVjZWl2ZWRTdHlsZXMoZXhwZWN0ZWQsIHJlY2VpdmVkKSksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW21hdGNoZXIsICcnLCBleHBlY3RlZERpZmYoZXhwZWN0ZWQsIHJlY2VpdmVkKV0uam9pbignXFxuJyk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBkaWZmIGJldHdlZW4gYGV4cGVjdGVkYCBhbmQgYHJlY2VpdmVkYCBzdHlsZXMuXG4gKi9cbmZ1bmN0aW9uIGV4cGVjdGVkRGlmZihleHBlY3RlZDogU3R5bGVMaWtlLCByZWNlaXZlZDogU3R5bGVMaWtlKSB7XG4gIGNvbnN0IHJlY2VpdmVkTmFycm93ID0gcGlja1JlY2VpdmVkU3R5bGVzKGV4cGVjdGVkLCByZWNlaXZlZCk7XG4gIHJldHVybiBkaWZmKGZvcm1hdFN0eWxlcyhleHBlY3RlZCksIGZvcm1hdFN0eWxlcyhyZWNlaXZlZE5hcnJvdykpO1xufVxuXG4vKipcbiAqIFBpY2sgZnJvbSBgcmVjZWl2ZWRgIHN0eWxlIG9ubHkgdGhlIGtleXMgcHJlc2VudCBpbiBgZXhwZWN0ZWRgIHN0eWxlLlxuICovXG5mdW5jdGlvbiBwaWNrUmVjZWl2ZWRTdHlsZXMoZXhwZWN0ZWQ6IFN0eWxlTGlrZSwgcmVjZWl2ZWQ6IFN0eWxlTGlrZSkge1xuICBjb25zdCByZXN1bHQ6IFN0eWxlTGlrZSA9IHt9O1xuICBPYmplY3Qua2V5cyhyZWNlaXZlZCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKGV4cGVjdGVkW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0W2tleV0gPSByZWNlaXZlZFtrZXldO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U3R5bGVzKHN0eWxlOiBTdHlsZUxpa2UpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlKVxuICAgIC5zb3J0KClcbiAgICAubWFwKChwcm9wKSA9PlxuICAgICAgQXJyYXkuaXNBcnJheShzdHlsZVtwcm9wXSlcbiAgICAgICAgPyBgJHtwcm9wfTogJHtKU09OLnN0cmluZ2lmeShzdHlsZVtwcm9wXSwgbnVsbCwgMil9O2BcbiAgICAgICAgOiBgJHtwcm9wfTogJHtzdHlsZVtwcm9wXX07YCxcbiAgICApXG4gICAgLmpvaW4oJ1xcbicpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxpQkFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBTU8sU0FBU0csV0FBV0EsQ0FFekJDLE9BQTBCLEVBQzFCQyxLQUF1QixFQUN2QjtFQUFBLElBQUFDLHFCQUFBO0lBQUFDLHNCQUFBO0lBQUFDLEtBQUE7RUFDQSxJQUFBTixNQUFBLENBQUFPLGdCQUFnQixFQUFDTCxPQUFPLEVBQUVELFdBQVcsRUFBRSxJQUFJLENBQUM7RUFFNUMsSUFBTU8sUUFBUSxJQUFBSixxQkFBQSxHQUFJUCxZQUFBLENBQUFZLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDUCxLQUFLLENBQUMsWUFBQUMscUJBQUEsR0FBa0IsQ0FBQyxDQUFDO0VBQy9ELElBQU1PLFFBQVEsSUFBQU4sc0JBQUEsR0FBSVIsWUFBQSxDQUFBWSxVQUFVLENBQUNDLE9BQU8sQ0FBQ1IsT0FBTyxDQUFDVSxLQUFLLENBQUNULEtBQUssQ0FBQyxZQUFBRSxzQkFBQSxHQUFrQixDQUFDLENBQUM7RUFFN0UsSUFBTVEsSUFBSSxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ1AsUUFBUSxDQUFDLENBQUNRLEtBQUssQ0FBRSxVQUFBQyxHQUFHO0lBQUEsT0FBS1gsS0FBSSxDQUFDWSxNQUFNLENBQUNWLFFBQVEsQ0FBQ1MsR0FBRyxDQUFDLEVBQUVOLFFBQVEsQ0FBQ00sR0FBRyxDQUFDLENBQUM7RUFBQSxFQUFDO0VBRTVGLE9BQU87SUFDTEosSUFBSSxFQUFKQSxJQUFJO0lBQ0pNLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBLEVBQVE7TUFDYixJQUFNQyxFQUFFLEdBQUdkLEtBQUksQ0FBQ2UsS0FBSyxHQUFHLFFBQVEsR0FBRyxJQUFJO01BQ3ZDLElBQU1DLE9BQU8sR0FBRyxJQUFBdkIsaUJBQUEsQ0FBQXdCLFdBQVcsRUFBQyxHQUFHakIsS0FBSSxDQUFDZSxLQUFLLEdBQUcsTUFBTSxHQUFHLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7TUFFckYsSUFBSVIsSUFBSSxFQUFFO1FBQ1IsT0FBTyxJQUFBYixNQUFBLENBQUF3QixhQUFhLEVBQ2xCRixPQUFPLEVBQ1Asb0JBQW9CRixFQUFFLGFBQWEsRUFDbkNLLFlBQVksQ0FBQ2pCLFFBQVEsQ0FBQyxFQUN0QixVQUFVLEVBQ1ZpQixZQUFZLENBQUNDLGtCQUFrQixDQUFDbEIsUUFBUSxFQUFFRyxRQUFRLENBQUMsQ0FDckQsQ0FBQztNQUNILENBQUMsTUFBTTtRQUNMLE9BQU8sQ0FBQ1csT0FBTyxFQUFFLEVBQUUsRUFBRUssWUFBWSxDQUFDbkIsUUFBUSxFQUFFRyxRQUFRLENBQUMsQ0FBQyxDQUFDaUIsSUFBSSxDQUFDLElBQUksQ0FBQztNQUNuRTtJQUNGO0VBQ0YsQ0FBQztBQUNIO0FBS0EsU0FBU0QsWUFBWUEsQ0FBQ25CLFFBQW1CLEVBQUVHLFFBQW1CLEVBQUU7RUFDOUQsSUFBTWtCLGNBQWMsR0FBR0gsa0JBQWtCLENBQUNsQixRQUFRLEVBQUVHLFFBQVEsQ0FBQztFQUM3RCxPQUFPLElBQUFaLGlCQUFBLENBQUErQixJQUFJLEVBQUNMLFlBQVksQ0FBQ2pCLFFBQVEsQ0FBQyxFQUFFaUIsWUFBWSxDQUFDSSxjQUFjLENBQUMsQ0FBQztBQUNuRTtBQUtBLFNBQVNILGtCQUFrQkEsQ0FBQ2xCLFFBQW1CLEVBQUVHLFFBQW1CLEVBQUU7RUFDcEUsSUFBTW9CLE1BQWlCLEdBQUcsQ0FBQyxDQUFDO0VBQzVCakIsTUFBTSxDQUFDQyxJQUFJLENBQUNKLFFBQVEsQ0FBQyxDQUFDcUIsT0FBTyxDQUFFLFVBQUFmLEdBQUcsRUFBSztJQUNyQyxJQUFJVCxRQUFRLENBQUNTLEdBQUcsQ0FBQyxLQUFLZ0IsU0FBUyxFQUFFO01BQy9CRixNQUFNLENBQUNkLEdBQUcsQ0FBQyxHQUFHTixRQUFRLENBQUNNLEdBQUcsQ0FBQztJQUM3QjtFQUNGLENBQUMsQ0FBQztFQUVGLE9BQU9jLE1BQU07QUFDZjtBQUVBLFNBQVNOLFlBQVlBLENBQUN0QixLQUFnQixFQUFFO0VBQ3RDLE9BQU9XLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDWixLQUFLLENBQUMsQ0FDdEIrQixJQUFJLENBQUMsQ0FBQyxDQUNOQyxHQUFHLENBQUUsVUFBQUMsSUFBSTtJQUFBLE9BQ1JDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDbkMsS0FBSyxDQUFDaUMsSUFBSSxDQUFDLENBQUMsR0FDdEIsR0FBR0EsSUFBSSxLQUFLRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ3JDLEtBQUssQ0FBQ2lDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxHQUNuRCxHQUFHQSxJQUFJLEtBQUtqQyxLQUFLLENBQUNpQyxJQUFJLENBQUMsR0FDN0I7RUFBQSxFQUFDLENBQ0FSLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDZiIsImlnbm9yZUxpc3QiOltdfQ==