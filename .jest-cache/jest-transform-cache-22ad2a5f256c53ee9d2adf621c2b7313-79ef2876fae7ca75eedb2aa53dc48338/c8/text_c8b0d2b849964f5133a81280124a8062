74ce278feb8b3755878f611b4045b09e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByTextQueries = void 0;
var _findAll = require("../helpers/find-all");
var _hostComponentNames = require("../helpers/host-component-names");
var _matchTextContent = require("../helpers/matchers/match-text-content");
var _makeQueries = require("./make-queries");
var queryAllByText = function queryAllByText(instance) {
  return function queryAllByTextFn(text) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _hostComponentNames.isHostText)(node) && (0, _matchTextContent.matchTextContent)(node, text, options);
    }, Object.assign({}, options, {
      matchDeepestOnly: true
    }));
  };
};
var getMultipleError = function getMultipleError(text) {
  return `Found multiple elements with text: ${String(text)}`;
};
var getMissingError = function getMissingError(text) {
  return `Unable to find an element with text: ${String(text)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByTextQueries = function bindByTextQueries(instance) {
  return {
    getByText: getBy(instance),
    getAllByText: getAllBy(instance),
    queryByText: queryBy(instance),
    queryAllByText: queryAllBy(instance),
    findByText: findBy(instance),
    findAllByText: findAllBy(instance)
  };
};
exports.bindByTextQueries = bindByTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfaG9zdENvbXBvbmVudE5hbWVzIiwiX21hdGNoVGV4dENvbnRlbnQiLCJfbWFrZVF1ZXJpZXMiLCJxdWVyeUFsbEJ5VGV4dCIsImluc3RhbmNlIiwicXVlcnlBbGxCeVRleHRGbiIsInRleHQiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZmluZEFsbCIsIm5vZGUiLCJpc0hvc3RUZXh0IiwibWF0Y2hUZXh0Q29udGVudCIsIk9iamVjdCIsImFzc2lnbiIsIm1hdGNoRGVlcGVzdE9ubHkiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwiX3JlZiIsIm1ha2VRdWVyaWVzIiwiZ2V0QnkiLCJnZXRBbGxCeSIsInF1ZXJ5QnkiLCJxdWVyeUFsbEJ5IiwiZmluZEJ5IiwiZmluZEFsbEJ5IiwiYmluZEJ5VGV4dFF1ZXJpZXMiLCJnZXRCeVRleHQiLCJnZXRBbGxCeVRleHQiLCJxdWVyeUJ5VGV4dCIsImZpbmRCeVRleHQiLCJmaW5kQWxsQnlUZXh0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL3RleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5pbXBvcnQgeyBmaW5kQWxsIH0gZnJvbSAnLi4vaGVscGVycy9maW5kLWFsbCc7XG5pbXBvcnQgeyBpc0hvc3RUZXh0IH0gZnJvbSAnLi4vaGVscGVycy9ob3N0LWNvbXBvbmVudC1uYW1lcyc7XG5pbXBvcnQgeyBtYXRjaFRleHRDb250ZW50IH0gZnJvbSAnLi4vaGVscGVycy9tYXRjaGVycy9tYXRjaC10ZXh0LWNvbnRlbnQnO1xuaW1wb3J0IHR5cGUgeyBUZXh0TWF0Y2gsIFRleHRNYXRjaE9wdGlvbnMgfSBmcm9tICcuLi9tYXRjaGVzJztcbmltcG9ydCB0eXBlIHtcbiAgRmluZEFsbEJ5UXVlcnksXG4gIEZpbmRCeVF1ZXJ5LFxuICBHZXRBbGxCeVF1ZXJ5LFxuICBHZXRCeVF1ZXJ5LFxuICBRdWVyeUFsbEJ5UXVlcnksXG4gIFF1ZXJ5QnlRdWVyeSxcbn0gZnJvbSAnLi9tYWtlLXF1ZXJpZXMnO1xuaW1wb3J0IHsgbWFrZVF1ZXJpZXMgfSBmcm9tICcuL21ha2UtcXVlcmllcyc7XG5pbXBvcnQgdHlwZSB7IENvbW1vblF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbnR5cGUgQnlUZXh0T3B0aW9ucyA9IENvbW1vblF1ZXJ5T3B0aW9ucyAmIFRleHRNYXRjaE9wdGlvbnM7XG5cbmNvbnN0IHF1ZXJ5QWxsQnlUZXh0ID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGV4dE9wdGlvbnM+ID0+XG4gIGZ1bmN0aW9uIHF1ZXJ5QWxsQnlUZXh0Rm4odGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIGZpbmRBbGwoaW5zdGFuY2UsIChub2RlKSA9PiBpc0hvc3RUZXh0KG5vZGUpICYmIG1hdGNoVGV4dENvbnRlbnQobm9kZSwgdGV4dCwgb3B0aW9ucyksIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBtYXRjaERlZXBlc3RPbmx5OiB0cnVlLFxuICAgIH0pO1xuICB9O1xuXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKHRleHQ6IFRleHRNYXRjaCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGV4dDogJHtTdHJpbmcodGV4dCl9YDtcblxuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKHRleHQ6IFRleHRNYXRjaCkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0ZXh0OiAke1N0cmluZyh0ZXh0KX1gO1xuXG5jb25zdCB7IGdldEJ5LCBnZXRBbGxCeSwgcXVlcnlCeSwgcXVlcnlBbGxCeSwgZmluZEJ5LCBmaW5kQWxsQnkgfSA9IG1ha2VRdWVyaWVzKFxuICBxdWVyeUFsbEJ5VGV4dCxcbiAgZ2V0TWlzc2luZ0Vycm9yLFxuICBnZXRNdWx0aXBsZUVycm9yLFxuKTtcblxuZXhwb3J0IHR5cGUgQnlUZXh0UXVlcmllcyA9IHtcbiAgZ2V0QnlUZXh0OiBHZXRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXh0T3B0aW9ucz47XG4gIGdldEFsbEJ5VGV4dDogR2V0QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGV4dE9wdGlvbnM+O1xuICBxdWVyeUJ5VGV4dDogUXVlcnlCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXh0T3B0aW9ucz47XG4gIHF1ZXJ5QWxsQnlUZXh0OiBRdWVyeUFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbiAgZmluZEJ5VGV4dDogRmluZEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbiAgZmluZEFsbEJ5VGV4dDogRmluZEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbn07XG5cbmV4cG9ydCBjb25zdCBiaW5kQnlUZXh0UXVlcmllcyA9IChpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UpOiBCeVRleHRRdWVyaWVzID0+ICh7XG4gIGdldEJ5VGV4dDogZ2V0QnkoaW5zdGFuY2UpLFxuICBnZXRBbGxCeVRleHQ6IGdldEFsbEJ5KGluc3RhbmNlKSxcbiAgcXVlcnlCeVRleHQ6IHF1ZXJ5QnkoaW5zdGFuY2UpLFxuICBxdWVyeUFsbEJ5VGV4dDogcXVlcnlBbGxCeShpbnN0YW5jZSksXG4gIGZpbmRCeVRleHQ6IGZpbmRCeShpbnN0YW5jZSksXG4gIGZpbmRBbGxCeVRleHQ6IGZpbmRBbGxCeShpbnN0YW5jZSksXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGlCQUFBLEdBQUFGLE9BQUE7QUFVQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFLQSxJQUFNSSxjQUFjLEdBQUksU0FBbEJBLGNBQWNBLENBQUlDLFFBQTJCO0VBQUEsT0FDakQsU0FBU0MsZ0JBQWdCQSxDQUFDQyxJQUFJLEVBQWdCO0lBQUEsSUFBZEMsT0FBTyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7SUFDMUMsT0FBTyxJQUFBVixRQUFBLENBQUFhLE9BQU8sRUFBQ1AsUUFBUSxFQUFHLFVBQUFRLElBQUk7TUFBQSxPQUFLLElBQUFaLG1CQUFBLENBQUFhLFVBQVUsRUFBQ0QsSUFBSSxDQUFDLElBQUksSUFBQVgsaUJBQUEsQ0FBQWEsZ0JBQWdCLEVBQUNGLElBQUksRUFBRU4sSUFBSSxFQUFFQyxPQUFPLENBQUM7SUFBQSxHQUFBUSxNQUFBLENBQUFDLE1BQUEsS0FDdkZULE9BQU87TUFDVlUsZ0JBQWdCLEVBQUU7SUFBQSxFQUNuQixDQUFDO0VBQ0osQ0FBQztBQUFBO0FBRUgsSUFBTUMsZ0JBQWdCLEdBQUksU0FBcEJBLGdCQUFnQkEsQ0FBSVosSUFBZTtFQUFBLE9BQUssc0NBQXNDYSxNQUFNLENBQUNiLElBQUksQ0FBQyxFQUFFO0FBQUE7QUFFbEcsSUFBTWMsZUFBZSxHQUFJLFNBQW5CQSxlQUFlQSxDQUFJZCxJQUFlO0VBQUEsT0FBSyx3Q0FBd0NhLE1BQU0sQ0FBQ2IsSUFBSSxDQUFDLEVBQUU7QUFBQTtBQUVuRyxJQUFBZSxJQUFBLEdBQW9FLElBQUFuQixZQUFBLENBQUFvQixXQUFXLEVBQzdFbkIsY0FBYyxFQUNkaUIsZUFBZSxFQUNmRixnQkFDRixDQUFDO0VBSk9LLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO0VBQUVDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0VBQUVDLE9BQU8sR0FBQUosSUFBQSxDQUFQSSxPQUFPO0VBQUVDLFVBQVUsR0FBQUwsSUFBQSxDQUFWSyxVQUFVO0VBQUVDLE1BQU0sR0FBQU4sSUFBQSxDQUFOTSxNQUFNO0VBQUVDLFNBQUEsR0FBQVAsSUFBQSxDQUFBTyxTQUFBO0FBZS9DLElBQU1DLGlCQUFpQixHQUFJLFNBQXJCQSxpQkFBaUJBLENBQUl6QixRQUEyQjtFQUFBLE9BQXFCO0lBQ2hGMEIsU0FBUyxFQUFFUCxLQUFLLENBQUNuQixRQUFRLENBQUM7SUFDMUIyQixZQUFZLEVBQUVQLFFBQVEsQ0FBQ3BCLFFBQVEsQ0FBQztJQUNoQzRCLFdBQVcsRUFBRVAsT0FBTyxDQUFDckIsUUFBUSxDQUFDO0lBQzlCRCxjQUFjLEVBQUV1QixVQUFVLENBQUN0QixRQUFRLENBQUM7SUFDcEM2QixVQUFVLEVBQUVOLE1BQU0sQ0FBQ3ZCLFFBQVEsQ0FBQztJQUM1QjhCLGFBQWEsRUFBRU4sU0FBUyxDQUFDeEIsUUFBUTtFQUNuQyxDQUFDO0FBQUEsQ0FBQztBQUFDK0IsT0FBQSxDQUFBTixpQkFBQSxHQUFBQSxpQkFBQSIsImlnbm9yZUxpc3QiOltdfQ==