12f73c3c0562d7881abc783aec965142
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.contentFilterService = exports.DEFAULT_CONTENT_FILTER_CONFIG = exports.ContentFilterService = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _featureFlags = require("../../../constants/featureFlags");
var _aiTelemetry = require("../telemetry/aiTelemetry");
var DEFAULT_CONFIG = exports.DEFAULT_CONTENT_FILTER_CONFIG = {
  enabled: true,
  strictMode: false,
  therapeuticMode: true,
  blockedTopics: ['explicit_sexual_content', 'violence_detailed', 'illegal_activities', 'harmful_substances_detailed', 'self_harm_instructions'],
  allowedTopics: ['mental_health', 'therapy_techniques', 'coping_strategies', 'mindfulness', 'ocd_support', 'emotional_support'],
  profanityFilter: true,
  medicalAdviceFilter: true,
  selfHarmFilter: true
};
var TURKISH_BLOCKED_PATTERNS = {
  explicit_sexual: ['cinsel içerik', 'uygunsuz davranış'],
  violence: ['şiddet uygula', 'zarar ver', 'incit', 'öldür', 'saldırı planı', 'bomba yap', 'silah temin'],
  self_harm_instructions: ['nasıl zarar veririm', 'kendimi nasıl keserim', 'intihar yöntemleri', 'ölme yolları'],
  illegal_activities: ['uyuşturucu sat', 'kaçakçılık', 'hırsızlık yap', 'dolandırıcılık', 'sahte belge'],
  medical_advice: ['ilaç doz', 'tedavi öner', 'tanı koy', 'ameliyat gerek', 'doktor yerine'],
  harmful_substances: ['zehir karıştır', 'kimyasal madde', 'asit kullan']
};
var ENGLISH_BLOCKED_PATTERNS = {
  explicit_sexual: ['explicit content', 'inappropriate behavior'],
  violence: ['how to hurt', 'cause harm', 'attack plan', 'make bomb', 'weapon instructions'],
  self_harm_instructions: ['how to cut', 'suicide methods', 'ways to die', 'self-harm tutorial'],
  illegal_activities: ['sell drugs', 'smuggling', 'how to steal', 'fraud scheme', 'fake documents'],
  medical_advice: ['drug dosage', 'medical diagnosis', 'treatment recommendation', 'surgery needed', 'instead of doctor'],
  harmful_substances: ['poison recipe', 'chemical weapon', 'acid attack']
};
var THERAPEUTIC_ALLOWED_PATTERNS = {
  mental_health_discussion: ['kendime zarar verme dürtüsü', 'intihar düşünceleri', 'depresyon hissi', 'anxiety nöbeti', 'suicidal thoughts', 'self-harm urges', 'depression feelings', 'anxiety attack'],
  therapy_techniques: ['CBT teknikleri', 'mindfulness egzersizi', 'nefes teknikleri', 'düşünce challenge', 'CBT techniques', 'mindfulness exercise', 'breathing techniques', 'thought challenging']
};
var ContentFilterService = exports.ContentFilterService = function () {
  function ContentFilterService() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CONFIG;
    (0, _classCallCheck2.default)(this, ContentFilterService);
    this.isInitialized = false;
    this.config = config;
    this.initialize();
  }
  return (0, _createClass2.default)(ContentFilterService, [{
    key: "initialize",
    value: (function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        try {
          if (!_featureFlags.FEATURE_FLAGS.isEnabled('CONTENT_FILTERING') || !_featureFlags.FEATURE_FLAGS.isEnabled('SAFETY_CHECKS')) {
            this.config.enabled = false;
            return;
          }
          this.isInitialized = true;
          console.log('🔒 Content Filter Service initialized');
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_INITIALIZED, {
            service: 'content_filter',
            config: {
              enabled: this.config.enabled,
              strictMode: this.config.strictMode,
              therapeuticMode: this.config.therapeuticMode
            }
          });
        } catch (error) {
          console.error('❌ Content Filter initialization failed:', error);
          this.config.enabled = false;
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }())
  }, {
    key: "filterContent",
    value: (function () {
      var _filterContent = (0, _asyncToGenerator2.default)(function* (message, context) {
        if (!this.isInitialized || !this.config.enabled) {
          return this.createAllowedResult('service_disabled');
        }
        try {
          var content = message.content.toLowerCase();
          var results = yield Promise.all([this.basicProfanityFilter(content), this.blockedContentFilter(content), this.medicalAdviceFilter(content), this.selfHarmInstructionFilter(content), this.therapeuticContextFilter(content, (context == null ? void 0 : context.isTherapeutic) || false)]);
          var combinedResult = this.combineFilterResults(results, message);
          yield this.logFilterResult(combinedResult, message);
          return combinedResult;
        } catch (error) {
          console.error('❌ Content filtering error:', error);
          return this.createBlockedResult(['filtering_error'], 'critical');
        }
      });
      function filterContent(_x, _x2) {
        return _filterContent.apply(this, arguments);
      }
      return filterContent;
    }())
  }, {
    key: "basicProfanityFilter",
    value: (function () {
      var _basicProfanityFilter = (0, _asyncToGenerator2.default)(function* (content) {
        if (!this.config.profanityFilter) {
          return {
            allowed: true,
            confidence: 1.0,
            reasons: []
          };
        }
        var profanityPatterns = ['aptal', 'salak', 'geri zekalı', 'stupid', 'idiot', 'moron'];
        var foundProfanity = false;
        var detectedTerms = [];
        for (var term of profanityPatterns) {
          if (content.includes(term)) {
            foundProfanity = true;
            detectedTerms.push(term);
          }
        }
        if (foundProfanity) {
          return {
            allowed: false,
            confidence: 0.8,
            reasons: [`profanity_detected:${detectedTerms.length}_terms`],
            severity: 'low'
          };
        }
        return {
          allowed: true,
          confidence: 1.0,
          reasons: []
        };
      });
      function basicProfanityFilter(_x3) {
        return _basicProfanityFilter.apply(this, arguments);
      }
      return basicProfanityFilter;
    }())
  }, {
    key: "blockedContentFilter",
    value: (function () {
      var _blockedContentFilter = (0, _asyncToGenerator2.default)(function* (content) {
        var blockedPatterns = Object.assign({}, TURKISH_BLOCKED_PATTERNS, ENGLISH_BLOCKED_PATTERNS);
        var highestSeverity = 'low';
        var detectedPatterns = [];
        for (var _ref of Object.entries(blockedPatterns)) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var category = _ref2[0];
          var patterns = _ref2[1];
          for (var pattern of patterns) {
            if (content.includes(pattern)) {
              detectedPatterns.push(`${category}:${pattern}`);
              var severity = this.getCategorySeverity(category);
              if (this.severityLevel(severity) > this.severityLevel(highestSeverity)) {
                highestSeverity = severity;
              }
            }
          }
        }
        if (detectedPatterns.length > 0) {
          return {
            allowed: false,
            confidence: 0.9,
            reasons: detectedPatterns.slice(0, 3),
            severity: highestSeverity
          };
        }
        return {
          allowed: true,
          confidence: 1.0,
          reasons: []
        };
      });
      function blockedContentFilter(_x4) {
        return _blockedContentFilter.apply(this, arguments);
      }
      return blockedContentFilter;
    }())
  }, {
    key: "medicalAdviceFilter",
    value: (function () {
      var _medicalAdviceFilter = (0, _asyncToGenerator2.default)(function* (content) {
        if (!this.config.medicalAdviceFilter) {
          return {
            allowed: true,
            confidence: 1.0,
            reasons: []
          };
        }
        var medicalPatterns = [].concat((0, _toConsumableArray2.default)(TURKISH_BLOCKED_PATTERNS.medical_advice), (0, _toConsumableArray2.default)(ENGLISH_BLOCKED_PATTERNS.medical_advice));
        for (var pattern of medicalPatterns) {
          if (content.includes(pattern)) {
            return {
              allowed: false,
              confidence: 0.85,
              reasons: [`medical_advice_detected:${pattern}`],
              severity: 'medium'
            };
          }
        }
        return {
          allowed: true,
          confidence: 1.0,
          reasons: []
        };
      });
      function medicalAdviceFilter(_x5) {
        return _medicalAdviceFilter.apply(this, arguments);
      }
      return medicalAdviceFilter;
    }())
  }, {
    key: "selfHarmInstructionFilter",
    value: (function () {
      var _selfHarmInstructionFilter = (0, _asyncToGenerator2.default)(function* (content) {
        if (!this.config.selfHarmFilter) {
          return {
            allowed: true,
            confidence: 1.0,
            reasons: []
          };
        }
        var selfHarmPatterns = [].concat((0, _toConsumableArray2.default)(TURKISH_BLOCKED_PATTERNS.self_harm_instructions), (0, _toConsumableArray2.default)(ENGLISH_BLOCKED_PATTERNS.self_harm_instructions));
        for (var pattern of selfHarmPatterns) {
          if (content.includes(pattern)) {
            return {
              allowed: false,
              confidence: 0.95,
              reasons: [`self_harm_instruction:${pattern}`],
              severity: 'critical'
            };
          }
        }
        return {
          allowed: true,
          confidence: 1.0,
          reasons: []
        };
      });
      function selfHarmInstructionFilter(_x6) {
        return _selfHarmInstructionFilter.apply(this, arguments);
      }
      return selfHarmInstructionFilter;
    }())
  }, {
    key: "therapeuticContextFilter",
    value: (function () {
      var _therapeuticContextFilter = (0, _asyncToGenerator2.default)(function* (content, isTherapeutic) {
        if (!this.config.therapeuticMode || !isTherapeutic) {
          return {
            allowed: true,
            confidence: 1.0,
            reasons: []
          };
        }
        var allowedPatterns = [].concat((0, _toConsumableArray2.default)(THERAPEUTIC_ALLOWED_PATTERNS.mental_health_discussion), (0, _toConsumableArray2.default)(THERAPEUTIC_ALLOWED_PATTERNS.therapy_techniques));
        var hasTherapeuticContent = false;
        for (var pattern of allowedPatterns) {
          if (content.includes(pattern)) {
            hasTherapeuticContent = true;
            break;
          }
        }
        if (hasTherapeuticContent) {
          return {
            allowed: true,
            confidence: 0.9,
            reasons: ['therapeutic_context_approved'],
            severity: 'low'
          };
        }
        return {
          allowed: true,
          confidence: 1.0,
          reasons: []
        };
      });
      function therapeuticContextFilter(_x7, _x8) {
        return _therapeuticContextFilter.apply(this, arguments);
      }
      return therapeuticContextFilter;
    }())
  }, {
    key: "combineFilterResults",
    value: function combineFilterResults(results, message) {
      var overallAllowed = true;
      var lowestConfidence = 1.0;
      var allReasons = [];
      var highestSeverity = 'low';
      for (var result of results) {
        if (result.allowed === false) {
          overallAllowed = false;
        }
        if (result.confidence !== undefined && result.confidence < lowestConfidence) {
          lowestConfidence = result.confidence;
        }
        if (result.reasons) {
          allReasons.push.apply(allReasons, (0, _toConsumableArray2.default)(result.reasons));
        }
        if (result.severity && this.severityLevel(result.severity) > this.severityLevel(highestSeverity)) {
          highestSeverity = result.severity;
        }
      }
      var suggestedAction = this.determineSuggestedAction(overallAllowed, highestSeverity, lowestConfidence);
      return {
        allowed: overallAllowed,
        confidence: lowestConfidence,
        reasons: (0, _toConsumableArray2.default)(new Set(allReasons)),
        severity: highestSeverity,
        requiresHumanReview: highestSeverity === 'critical' || highestSeverity === 'high' && lowestConfidence > 0.8,
        suggestedAction: suggestedAction
      };
    }
  }, {
    key: "determineSuggestedAction",
    value: function determineSuggestedAction(allowed, severity, confidence) {
      if (!allowed) {
        if (severity === 'critical') return 'escalate';
        if (severity === 'high') return 'block';
        if (severity === 'medium' && confidence > 0.8) return 'block';
        return 'modify';
      }
      return 'allow';
    }
  }, {
    key: "getCategorySeverity",
    value: function getCategorySeverity(category) {
      if (category.includes('self_harm') || category.includes('violence')) return 'critical';
      if (category.includes('illegal') || category.includes('harmful_substances')) return 'high';
      if (category.includes('medical') || category.includes('explicit')) return 'medium';
      return 'low';
    }
  }, {
    key: "severityLevel",
    value: function severityLevel(severity) {
      var levels = {
        low: 1,
        medium: 2,
        high: 3,
        critical: 4
      };
      return levels[severity];
    }
  }, {
    key: "logFilterResult",
    value: (function () {
      var _logFilterResult = (0, _asyncToGenerator2.default)(function* (result, message) {
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.AI_CONTENT_FILTERED, {
          contentFilter: {
            allowed: result.allowed,
            severity: result.severity,
            reasonCount: result.reasons.length,
            confidence: result.confidence,
            requiresHumanReview: result.requiresHumanReview
          },
          messageId: message.id
        });
        if (__DEV__ && !result.allowed) {
          console.warn('🔒 Content filtered:', {
            allowed: result.allowed,
            severity: result.severity,
            reasons: result.reasons.slice(0, 2),
            confidence: result.confidence
          });
        }
      });
      function logFilterResult(_x9, _x0) {
        return _logFilterResult.apply(this, arguments);
      }
      return logFilterResult;
    }())
  }, {
    key: "createAllowedResult",
    value: function createAllowedResult(reason) {
      return {
        allowed: true,
        confidence: 1.0,
        reasons: [reason],
        severity: 'low',
        requiresHumanReview: false,
        suggestedAction: 'allow'
      };
    }
  }, {
    key: "createBlockedResult",
    value: function createBlockedResult(reasons, severity) {
      return {
        allowed: false,
        confidence: 0.9,
        reasons: reasons,
        severity: severity,
        requiresHumanReview: severity === 'critical' || severity === 'high',
        suggestedAction: severity === 'critical' ? 'escalate' : 'block'
      };
    }
  }, {
    key: "updateConfig",
    value: (function () {
      var _updateConfig = (0, _asyncToGenerator2.default)(function* (newConfig) {
        this.config = Object.assign({}, this.config, newConfig);
      });
      function updateConfig(_x1) {
        return _updateConfig.apply(this, arguments);
      }
      return updateConfig;
    }())
  }, {
    key: "isEnabled",
    get: function get() {
      return this.config.enabled && this.isInitialized;
    }
  }]);
}();
var contentFilterService = exports.contentFilterService = new ContentFilterService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,