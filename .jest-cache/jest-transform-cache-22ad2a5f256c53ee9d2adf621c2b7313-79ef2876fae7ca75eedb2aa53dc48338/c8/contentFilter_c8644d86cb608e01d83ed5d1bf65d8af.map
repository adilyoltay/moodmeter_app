{"version":3,"names":["_featureFlags","require","_aiTelemetry","DEFAULT_CONFIG","exports","DEFAULT_CONTENT_FILTER_CONFIG","enabled","strictMode","therapeuticMode","blockedTopics","allowedTopics","profanityFilter","medicalAdviceFilter","selfHarmFilter","TURKISH_BLOCKED_PATTERNS","explicit_sexual","violence","self_harm_instructions","illegal_activities","medical_advice","harmful_substances","ENGLISH_BLOCKED_PATTERNS","THERAPEUTIC_ALLOWED_PATTERNS","mental_health_discussion","therapy_techniques","ContentFilterService","config","arguments","length","undefined","_classCallCheck2","default","isInitialized","initialize","_createClass2","key","value","_initialize","_asyncToGenerator2","FEATURE_FLAGS","isEnabled","console","log","trackAIInteraction","AIEventType","SYSTEM_INITIALIZED","service","error","apply","_filterContent","message","context","createAllowedResult","content","toLowerCase","results","Promise","all","basicProfanityFilter","blockedContentFilter","selfHarmInstructionFilter","therapeuticContextFilter","isTherapeutic","combinedResult","combineFilterResults","logFilterResult","createBlockedResult","filterContent","_x","_x2","_basicProfanityFilter","allowed","confidence","reasons","profanityPatterns","foundProfanity","detectedTerms","term","includes","push","severity","_x3","_blockedContentFilter","blockedPatterns","Object","assign","highestSeverity","detectedPatterns","_ref","entries","_ref2","_slicedToArray2","category","patterns","pattern","getCategorySeverity","severityLevel","slice","_x4","_medicalAdviceFilter","medicalPatterns","concat","_toConsumableArray2","_x5","_selfHarmInstructionFilter","selfHarmPatterns","_x6","_therapeuticContextFilter","allowedPatterns","hasTherapeuticContent","_x7","_x8","overallAllowed","lowestConfidence","allReasons","result","suggestedAction","determineSuggestedAction","Set","requiresHumanReview","levels","low","medium","high","critical","_logFilterResult","AI_CONTENT_FILTERED","contentFilter","reasonCount","messageId","id","__DEV__","warn","_x9","_x0","reason","_updateConfig","newConfig","updateConfig","_x1","get","contentFilterService"],"sources":["contentFilter.ts"],"sourcesContent":["/**\n * 🔒 Content Filtering System - AI Response Safety Validation\n * \n * Bu sistem AI yanıtlarını güvenlik açısından filtreler ve\n * uygunsuz içeriği engeller.\n * \n * ⚠️ CRITICAL: Tüm AI yanıtları bu filtreden geçmeden kullanıcıya gösterilmemeli\n * ⚠️ Filtering sonuçları telemetry'ye loglanmalı\n */\n\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\nimport { AIMessage, AIError, AIErrorCode, ErrorSeverity } from '@/features/ai/types';\nimport { trackAIInteraction, AIEventType } from '@/features/ai/telemetry/aiTelemetry';\n\n// =============================================================================\n// 🎯 CONTENT FILTERING CONFIGURATION\n// =============================================================================\n\n/**\n * Content filtering konfigürasyonu\n */\ninterface ContentFilterConfig {\n  enabled: boolean;\n  strictMode: boolean; // Daha sıkı filtering\n  therapeuticMode: boolean; // Terapötik context için özel kurallar\n  blockedTopics: string[];\n  allowedTopics: string[];\n  profanityFilter: boolean;\n  medicalAdviceFilter: boolean;\n  selfHarmFilter: boolean;\n}\n\n/**\n * Default content filter konfigürasyonu\n */\nconst DEFAULT_CONFIG: ContentFilterConfig = {\n  enabled: true,\n  strictMode: false,\n  therapeuticMode: true,\n  blockedTopics: [\n    'explicit_sexual_content',\n    'violence_detailed',\n    'illegal_activities',\n    'harmful_substances_detailed',\n    'self_harm_instructions'\n  ],\n  allowedTopics: [\n    'mental_health',\n    'therapy_techniques',\n    'coping_strategies',\n    'mindfulness',\n    'ocd_support',\n    'emotional_support'\n  ],\n  profanityFilter: true,\n  medicalAdviceFilter: true,\n  selfHarmFilter: true\n};\n\n/**\n * Content filtering sonucu\n */\ninterface ContentFilterResult {\n  allowed: boolean;\n  confidence: number; // 0-1\n  reasons: string[];\n  filteredContent?: string; // Eğer partial filtering yapıldıysa\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  requiresHumanReview: boolean;\n  suggestedAction: 'allow' | 'block' | 'modify' | 'escalate';\n}\n\n// =============================================================================\n// 🚫 BLOCKED CONTENT PATTERNS\n// =============================================================================\n\n/**\n * Yasaklı kelime/pattern'lar - Türkçe\n */\nconst TURKISH_BLOCKED_PATTERNS = {\n  explicit_sexual: [\n    // Explicit sexual content patterns (mild examples for code)\n    'cinsel içerik', 'uygunsuz davranış'\n  ],\n  violence: [\n    'şiddet uygula', 'zarar ver', 'incit', 'öldür',\n    'saldırı planı', 'bomba yap', 'silah temin'\n  ],\n  self_harm_instructions: [\n    'nasıl zarar veririm', 'kendimi nasıl keserim',\n    'intihar yöntemleri', 'ölme yolları'\n  ],\n  illegal_activities: [\n    'uyuşturucu sat', 'kaçakçılık', 'hırsızlık yap',\n    'dolandırıcılık', 'sahte belge'\n  ],\n  medical_advice: [\n    'ilaç doz', 'tedavi öner', 'tanı koy',\n    'ameliyat gerek', 'doktor yerine'\n  ],\n  harmful_substances: [\n    'zehir karıştır', 'kimyasal madde', 'asit kullan'\n  ]\n};\n\n/**\n * Yasaklı kelime/pattern'lar - İngilizce\n */\nconst ENGLISH_BLOCKED_PATTERNS = {\n  explicit_sexual: [\n    'explicit content', 'inappropriate behavior'\n  ],\n  violence: [\n    'how to hurt', 'cause harm', 'attack plan',\n    'make bomb', 'weapon instructions'\n  ],\n  self_harm_instructions: [\n    'how to cut', 'suicide methods', 'ways to die',\n    'self-harm tutorial'\n  ],\n  illegal_activities: [\n    'sell drugs', 'smuggling', 'how to steal',\n    'fraud scheme', 'fake documents'\n  ],\n  medical_advice: [\n    'drug dosage', 'medical diagnosis', 'treatment recommendation',\n    'surgery needed', 'instead of doctor'\n  ],\n  harmful_substances: [\n    'poison recipe', 'chemical weapon', 'acid attack'\n  ]\n};\n\n/**\n * Terapötik context'te izin verilen hassas konular\n */\nconst THERAPEUTIC_ALLOWED_PATTERNS = {\n  mental_health_discussion: [\n    'kendime zarar verme dürtüsü', 'intihar düşünceleri',\n    'depresyon hissi', 'anxiety nöbeti',\n    'suicidal thoughts', 'self-harm urges',\n    'depression feelings', 'anxiety attack'\n  ],\n  therapy_techniques: [\n    'CBT teknikleri', 'mindfulness egzersizi',\n    'nefes teknikleri', 'düşünce challenge',\n    'CBT techniques', 'mindfulness exercise',\n    'breathing techniques', 'thought challenging'\n  ]\n};\n\n// =============================================================================\n// 🔒 CONTENT FILTER SERVICE\n// =============================================================================\n\nexport class ContentFilterService {\n  private config: ContentFilterConfig;\n  private isInitialized: boolean = false;\n\n  constructor(config: ContentFilterConfig = DEFAULT_CONFIG) {\n    this.config = config;\n    this.initialize();\n  }\n\n  /**\n   * Servisi başlat\n   */\n  private async initialize(): Promise<void> {\n    try {\n      // Feature flag kontrolü – içerik filtresi AI_CHAT'ten bağımsız çalışmalı\n      if (!FEATURE_FLAGS.isEnabled('CONTENT_FILTERING') || !FEATURE_FLAGS.isEnabled('SAFETY_CHECKS')) {\n        this.config.enabled = false;\n        return;\n      }\n\n      this.isInitialized = true;\n      console.log('🔒 Content Filter Service initialized');\n\n      // Telemetry\n      await trackAIInteraction(AIEventType.SYSTEM_INITIALIZED, {\n        service: 'content_filter',\n        config: {\n          enabled: this.config.enabled,\n          strictMode: this.config.strictMode,\n          therapeuticMode: this.config.therapeuticMode\n        }\n      });\n\n    } catch (error) {\n      console.error('❌ Content Filter initialization failed:', error);\n      this.config.enabled = false;\n    }\n  }\n\n  /**\n   * AI mesajını filtrele\n   */\n  async filterContent(message: AIMessage, context?: { isTherapeutic?: boolean }): Promise<ContentFilterResult> {\n    // Servis aktif değilse her şeyi geçir\n    if (!this.isInitialized || !this.config.enabled) {\n      return this.createAllowedResult('service_disabled');\n    }\n\n    try {\n      const content = message.content.toLowerCase();\n      \n      // Multiple filtering layers\n      const results = await Promise.all([\n        this.basicProfanityFilter(content),\n        this.blockedContentFilter(content),\n        this.medicalAdviceFilter(content),\n        this.selfHarmInstructionFilter(content),\n        this.therapeuticContextFilter(content, context?.isTherapeutic || false)\n      ]);\n\n      // Combine results\n      const combinedResult = this.combineFilterResults(results, message);\n\n      // Log result\n      await this.logFilterResult(combinedResult, message);\n\n      return combinedResult;\n\n    } catch (error) {\n      console.error('❌ Content filtering error:', error);\n      \n      // Error durumunda güvenli tarafta kal - block et\n      return this.createBlockedResult(['filtering_error'], 'critical');\n    }\n  }\n\n  /**\n   * Temel küfür filtresi\n   */\n  private async basicProfanityFilter(content: string): Promise<Partial<ContentFilterResult>> {\n    if (!this.config.profanityFilter) {\n      return { allowed: true, confidence: 1.0, reasons: [] };\n    }\n\n    // Basit profanity detection\n    const profanityPatterns = [\n      // Türkçe küfürler (hafif örnekler)\n      'aptal', 'salak', 'geri zekalı',\n      // İngilizce küfürler (hafif örnekler)  \n      'stupid', 'idiot', 'moron'\n    ];\n\n    let foundProfanity = false;\n    const detectedTerms: string[] = [];\n\n    for (const term of profanityPatterns) {\n      if (content.includes(term)) {\n        foundProfanity = true;\n        detectedTerms.push(term);\n      }\n    }\n\n    if (foundProfanity) {\n      return {\n        allowed: false,\n        confidence: 0.8,\n        reasons: [`profanity_detected:${detectedTerms.length}_terms`],\n        severity: 'low'\n      };\n    }\n\n    return { allowed: true, confidence: 1.0, reasons: [] };\n  }\n\n  /**\n   * Yasaklı içerik filtresi\n   */\n  private async blockedContentFilter(content: string): Promise<Partial<ContentFilterResult>> {\n    const blockedPatterns = { ...TURKISH_BLOCKED_PATTERNS, ...ENGLISH_BLOCKED_PATTERNS };\n    \n    let highestSeverity: 'low' | 'medium' | 'high' | 'critical' = 'low';\n    const detectedPatterns: string[] = [];\n\n    for (const [category, patterns] of Object.entries(blockedPatterns)) {\n      for (const pattern of patterns) {\n        if (content.includes(pattern)) {\n          detectedPatterns.push(`${category}:${pattern}`);\n          \n          // Severity belirleme\n          const severity = this.getCategorySeverity(category);\n          if (this.severityLevel(severity) > this.severityLevel(highestSeverity)) {\n            highestSeverity = severity;\n          }\n        }\n      }\n    }\n\n    if (detectedPatterns.length > 0) {\n      return {\n        allowed: false,\n        confidence: 0.9,\n        reasons: detectedPatterns.slice(0, 3), // Limit logged patterns\n        severity: highestSeverity\n      };\n    }\n\n    return { allowed: true, confidence: 1.0, reasons: [] };\n  }\n\n  /**\n   * Medikal tavsiye filtresi\n   */\n  private async medicalAdviceFilter(content: string): Promise<Partial<ContentFilterResult>> {\n    if (!this.config.medicalAdviceFilter) {\n      return { allowed: true, confidence: 1.0, reasons: [] };\n    }\n\n    const medicalPatterns = [\n      ...TURKISH_BLOCKED_PATTERNS.medical_advice,\n      ...ENGLISH_BLOCKED_PATTERNS.medical_advice\n    ];\n\n    for (const pattern of medicalPatterns) {\n      if (content.includes(pattern)) {\n        return {\n          allowed: false,\n          confidence: 0.85,\n          reasons: [`medical_advice_detected:${pattern}`],\n          severity: 'medium'\n        };\n      }\n    }\n\n    return { allowed: true, confidence: 1.0, reasons: [] };\n  }\n\n  /**\n   * Self-harm instruction filtresi\n   */\n  private async selfHarmInstructionFilter(content: string): Promise<Partial<ContentFilterResult>> {\n    if (!this.config.selfHarmFilter) {\n      return { allowed: true, confidence: 1.0, reasons: [] };\n    }\n\n    const selfHarmPatterns = [\n      ...TURKISH_BLOCKED_PATTERNS.self_harm_instructions,\n      ...ENGLISH_BLOCKED_PATTERNS.self_harm_instructions\n    ];\n\n    for (const pattern of selfHarmPatterns) {\n      if (content.includes(pattern)) {\n        return {\n          allowed: false,\n          confidence: 0.95,\n          reasons: [`self_harm_instruction:${pattern}`],\n          severity: 'critical'\n        };\n      }\n    }\n\n    return { allowed: true, confidence: 1.0, reasons: [] };\n  }\n\n  /**\n   * Terapötik context filtresi\n   */\n  private async therapeuticContextFilter(\n    content: string, \n    isTherapeutic: boolean\n  ): Promise<Partial<ContentFilterResult>> {\n    if (!this.config.therapeuticMode || !isTherapeutic) {\n      return { allowed: true, confidence: 1.0, reasons: [] };\n    }\n\n    // Terapötik context'te hassas konular tartışılabilir\n    const allowedPatterns = [\n      ...THERAPEUTIC_ALLOWED_PATTERNS.mental_health_discussion,\n      ...THERAPEUTIC_ALLOWED_PATTERNS.therapy_techniques\n    ];\n\n    let hasTherapeuticContent = false;\n    for (const pattern of allowedPatterns) {\n      if (content.includes(pattern)) {\n        hasTherapeuticContent = true;\n        break;\n      }\n    }\n\n    if (hasTherapeuticContent) {\n      return {\n        allowed: true,\n        confidence: 0.9,\n        reasons: ['therapeutic_context_approved'],\n        severity: 'low'\n      };\n    }\n\n    return { allowed: true, confidence: 1.0, reasons: [] };\n  }\n\n  /**\n   * Filter sonuçlarını birleştir\n   */\n  private combineFilterResults(\n    results: Partial<ContentFilterResult>[],\n    message: AIMessage\n  ): ContentFilterResult {\n    let overallAllowed = true;\n    let lowestConfidence = 1.0;\n    let allReasons: string[] = [];\n    let highestSeverity: 'low' | 'medium' | 'high' | 'critical' = 'low';\n\n    for (const result of results) {\n      // Eğer herhangi bir filter red ederse, genel sonuç red\n      if (result.allowed === false) {\n        overallAllowed = false;\n      }\n\n      // En düşük confidence'ı al\n      if (result.confidence !== undefined && result.confidence < lowestConfidence) {\n        lowestConfidence = result.confidence;\n      }\n\n      // Tüm reason'ları topla\n      if (result.reasons) {\n        allReasons.push(...result.reasons);\n      }\n\n      // En yüksek severity'yi al\n      if (result.severity && this.severityLevel(result.severity) > this.severityLevel(highestSeverity)) {\n        highestSeverity = result.severity;\n      }\n    }\n\n    // Suggested action belirleme\n    const suggestedAction = this.determineSuggestedAction(overallAllowed, highestSeverity, lowestConfidence);\n\n    return {\n      allowed: overallAllowed,\n      confidence: lowestConfidence,\n      reasons: [...new Set(allReasons)], // Remove duplicates\n      severity: highestSeverity,\n      requiresHumanReview: highestSeverity === 'critical' || \n                          (highestSeverity === 'high' && lowestConfidence > 0.8),\n      suggestedAction\n    };\n  }\n\n  /**\n   * Önerilen aksiyon belirleme\n   */\n  private determineSuggestedAction(\n    allowed: boolean, \n    severity: 'low' | 'medium' | 'high' | 'critical',\n    confidence: number\n  ): 'allow' | 'block' | 'modify' | 'escalate' {\n    if (!allowed) {\n      if (severity === 'critical') return 'escalate';\n      if (severity === 'high') return 'block';\n      if (severity === 'medium' && confidence > 0.8) return 'block';\n      return 'modify'; // Low severity veya düşük confidence - modify edilebilir\n    }\n    \n    return 'allow';\n  }\n\n  /**\n   * Category'ye göre severity belirleme\n   */\n  private getCategorySeverity(category: string): 'low' | 'medium' | 'high' | 'critical' {\n    if (category.includes('self_harm') || category.includes('violence')) return 'critical';\n    if (category.includes('illegal') || category.includes('harmful_substances')) return 'high';\n    if (category.includes('medical') || category.includes('explicit')) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Severity level mapping\n   */\n  private severityLevel(severity: 'low' | 'medium' | 'high' | 'critical'): number {\n    const levels = { low: 1, medium: 2, high: 3, critical: 4 };\n    return levels[severity];\n  }\n\n  /**\n   * Filter sonucunu logla\n   */\n  private async logFilterResult(result: ContentFilterResult, message: AIMessage): Promise<void> {\n    // Telemetry'ye log\n    await trackAIInteraction(AIEventType.AI_CONTENT_FILTERED, {\n      contentFilter: {\n        allowed: result.allowed,\n        severity: result.severity,\n        reasonCount: result.reasons.length,\n        confidence: result.confidence,\n        requiresHumanReview: result.requiresHumanReview\n      },\n      messageId: message.id\n    });\n\n    // Development logging\n    if (__DEV__ && !result.allowed) {\n      console.warn('🔒 Content filtered:', {\n        allowed: result.allowed,\n        severity: result.severity,\n        reasons: result.reasons.slice(0, 2), // Limit logged reasons\n        confidence: result.confidence\n      });\n    }\n  }\n\n  /**\n   * Helper methods\n   */\n  private createAllowedResult(reason: string): ContentFilterResult {\n    return {\n      allowed: true,\n      confidence: 1.0,\n      reasons: [reason],\n      severity: 'low',\n      requiresHumanReview: false,\n      suggestedAction: 'allow'\n    };\n  }\n\n  private createBlockedResult(reasons: string[], severity: 'low' | 'medium' | 'high' | 'critical'): ContentFilterResult {\n    return {\n      allowed: false,\n      confidence: 0.9,\n      reasons,\n      severity,\n      requiresHumanReview: severity === 'critical' || severity === 'high',\n      suggestedAction: severity === 'critical' ? 'escalate' : 'block'\n    };\n  }\n\n  /**\n   * Public API\n   */\n  async updateConfig(newConfig: Partial<ContentFilterConfig>): Promise<void> {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  get isEnabled(): boolean {\n    return this.config.enabled && this.isInitialized;\n  }\n}\n\n// =============================================================================\n// 📤 EXPORTS\n// =============================================================================\n\n// Singleton instance\nexport const contentFilterService = new ContentFilterService();\n\n// Export types\nexport { ContentFilterConfig, ContentFilterResult, DEFAULT_CONFIG as DEFAULT_CONTENT_FILTER_CONFIG };"],"mappings":"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","ignoreList":[]}