764dcd11f16f198c5ec3fc494655af4f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LogBoxNotificationMessage;
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../../Text/Text"));
var _LogBoxMessage = _interopRequireDefault(require("./LogBoxMessage"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function LogBoxNotificationMessage(props) {
  return (0, _jsxRuntime.jsx)(_View.default, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_Text.default, {
      id: "logbox_notification_message_text",
      numberOfLines: 1,
      style: styles.text,
      children: props.message && (0, _jsxRuntime.jsx)(_LogBoxMessage.default, {
        plaintext: true,
        message: props.message,
        style: styles.substitutionText
      })
    })
  });
}
var styles = _StyleSheet.default.create({
  container: {
    alignSelf: 'stretch',
    flexGrow: 1,
    flexShrink: 1,
    flexBasis: 'auto',
    borderLeftColor: LogBoxStyle.getTextColor(0.2),
    borderLeftWidth: 1,
    paddingLeft: 8
  },
  text: {
    color: LogBoxStyle.getTextColor(1),
    flex: 1,
    fontSize: 14,
    lineHeight: 22
  },
  substitutionText: {
    color: LogBoxStyle.getTextColor(0.6)
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1N0eWxlU2hlZXQiLCJfVGV4dCIsIl9Mb2dCb3hNZXNzYWdlIiwiTG9nQm94U3R5bGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkxvZ0JveE5vdGlmaWNhdGlvbk1lc3NhZ2UiLCJwcm9wcyIsImpzeCIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiY2hpbGRyZW4iLCJpZCIsIm51bWJlck9mTGluZXMiLCJ0ZXh0IiwibWVzc2FnZSIsInBsYWludGV4dCIsInN1YnN0aXR1dGlvblRleHQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYWxpZ25TZWxmIiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZmxleEJhc2lzIiwiYm9yZGVyTGVmdENvbG9yIiwiZ2V0VGV4dENvbG9yIiwiYm9yZGVyTGVmdFdpZHRoIiwicGFkZGluZ0xlZnQiLCJjb2xvciIsImZsZXgiLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiXSwic291cmNlcyI6WyJMb2dCb3hOb3RpZmljYXRpb25NZXNzYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7TWVzc2FnZSBhcyBNZXNzYWdlVHlwZX0gZnJvbSAnLi4vRGF0YS9wYXJzZUxvZ0JveExvZyc7XG5cbmltcG9ydCBWaWV3IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvVmlldy9WaWV3JztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi8uLi9UZXh0L1RleHQnO1xuaW1wb3J0IExvZ0JveE1lc3NhZ2UgZnJvbSAnLi9Mb2dCb3hNZXNzYWdlJztcbmltcG9ydCAqIGFzIExvZ0JveFN0eWxlIGZyb20gJy4vTG9nQm94U3R5bGUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2dCb3hOb3RpZmljYXRpb25NZXNzYWdlKHByb3BzOiB7XG4gIG1lc3NhZ2U6IE1lc3NhZ2VUeXBlLFxufSk6IFJlYWN0Lk5vZGUge1xuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgIDxUZXh0XG4gICAgICAgIGlkPVwibG9nYm94X25vdGlmaWNhdGlvbl9tZXNzYWdlX3RleHRcIlxuICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgICBzdHlsZT17c3R5bGVzLnRleHR9PlxuICAgICAgICB7cHJvcHMubWVzc2FnZSAmJiAoXG4gICAgICAgICAgPExvZ0JveE1lc3NhZ2VcbiAgICAgICAgICAgIHBsYWludGV4dFxuICAgICAgICAgICAgbWVzc2FnZT17cHJvcHMubWVzc2FnZX1cbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuc3Vic3RpdHV0aW9uVGV4dH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9UZXh0PlxuICAgIDwvVmlldz5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICBmbGV4R3JvdzogMSxcbiAgICBmbGV4U2hyaW5rOiAxLFxuICAgIGZsZXhCYXNpczogJ2F1dG8nLFxuICAgIGJvcmRlckxlZnRDb2xvcjogTG9nQm94U3R5bGUuZ2V0VGV4dENvbG9yKDAuMiksXG4gICAgYm9yZGVyTGVmdFdpZHRoOiAxLFxuICAgIHBhZGRpbmdMZWZ0OiA4LFxuICB9LFxuICB0ZXh0OiB7XG4gICAgY29sb3I6IExvZ0JveFN0eWxlLmdldFRleHRDb2xvcigxKSxcbiAgICBmbGV4OiAxLFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBsaW5lSGVpZ2h0OiAyMixcbiAgfSxcbiAgc3Vic3RpdHV0aW9uVGV4dDoge1xuICAgIGNvbG9yOiBMb2dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMC42KSxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVlBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFdBQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLEtBQUEsR0FBQUQsdUJBQUEsQ0FBQUwsT0FBQTtBQUErQixJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBSyx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUwsdUJBQUEsWUFBQUEsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENB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