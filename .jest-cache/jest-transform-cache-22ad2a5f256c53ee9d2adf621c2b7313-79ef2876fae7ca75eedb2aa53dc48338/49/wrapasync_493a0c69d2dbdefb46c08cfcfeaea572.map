{"version":3,"names":["_act","require","_flushMicroTasks","wrapAsync","_x","_wrapAsync","apply","arguments","_asyncToGenerator2","default","callback","previousActEnvironment","getIsReactActEnvironment","setReactActEnvironment","result","flushMicroTasks"],"sources":["../../src/helpers/wrap-async.ts"],"sourcesContent":["/* istanbul ignore file */\n\nimport { getIsReactActEnvironment, setReactActEnvironment } from '../act';\nimport { flushMicroTasks } from '../flush-micro-tasks';\n\n/**\n * Run given async callback with temporarily disabled `act` environment and flushes microtasks queue.\n *\n * @param callback Async callback to run\n * @returns Result of the callback\n */\nexport async function wrapAsync<Result>(callback: () => Promise<Result>): Promise<Result> {\n  const previousActEnvironment = getIsReactActEnvironment();\n  setReactActEnvironment(false);\n\n  try {\n    const result = await callback();\n    // Flush the microtask queue before restoring the `act` environment\n    await flushMicroTasks();\n    return result;\n  } finally {\n    setReactActEnvironment(previousActEnvironment);\n  }\n}\n"],"mappings":";;;;;;;;AAEA,IAAAA,IAAA,GAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAD,OAAA;AAAA,SAQsBE,SAASA,CAAAC,EAAA;EAAA,OAAAC,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,WAAA;EAAAA,UAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAxB,WAAiCC,QAA+B,EAAmB;IACxF,IAAMC,sBAAsB,GAAG,IAAAX,IAAA,CAAAY,wBAAwB,EAAC,CAAC;IACzD,IAAAZ,IAAA,CAAAa,sBAAsB,EAAC,KAAK,CAAC;IAE7B,IAAI;MACF,IAAMC,MAAM,SAASJ,QAAQ,CAAC,CAAC;MAE/B,MAAM,IAAAR,gBAAA,CAAAa,eAAe,EAAC,CAAC;MACvB,OAAOD,MAAM;IACf,CAAC,SAAS;MACR,IAAAd,IAAA,CAAAa,sBAAsB,EAACF,sBAAsB,CAAC;IAChD;EACF;EAAA,OAAAN,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}