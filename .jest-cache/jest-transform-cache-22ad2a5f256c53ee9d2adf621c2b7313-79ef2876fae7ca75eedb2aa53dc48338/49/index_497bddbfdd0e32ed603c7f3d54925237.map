{"version":3,"names":["_featureFlags","require","_aiTelemetry","CBTTechnique","exports","EmotionalTone","CrisisRiskLevel","AIProvider","FallbackBehavior","ConversationState","AIInteractionType","AIErrorCode","ErrorSeverity","ArtworkType","TreatmentType","isAIMessage","obj","id","content","includes","role","timestamp","Date","isNaN","getTime","isAIError","code","message","Object","values","severity","requiresFeatureFlag","config","FEATURE_FLAGS","isEnabled","featureFlag","YBOCSQuestionType","OCDSeverityLevel","OnboardingStep","OnboardingSessionState","TherapeuticApproach","SessionFrequency","AccessibilityNeed","InterventionType","EvidenceLevel","RiskLevel","RiskCategory"],"sources":["index.ts"],"sourcesContent":["/**\n * ü§ñ AI System Types - FAZ 1: Core Type Definitions\n * \n * Bu dosya t√ºm AI sisteminin temel TypeScript interface'lerini i√ßerir.\n * FAZ 0 g√ºvenlik prensiplerine uygun olarak tasarlanmƒ±≈ütƒ±r.\n * \n * ‚ö†Ô∏è CRITICAL: Bu dosya features/ai/types dizininde yer alƒ±r\n * ‚ö†Ô∏è T√ºm import'lar @/ alias kullanmalƒ±, relative path'ler yasak\n */\n\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\n\n// =============================================================================\n// üéØ CORE AI MESSAGE TYPES\n// =============================================================================\n\n/**\n * Temel AI mesaj yapƒ±sƒ± - T√ºm AI etkile≈üimlerinin temeli\n */\nexport interface AIMessage {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant' | 'system';\n  timestamp: Date;\n  metadata?: AIMessageMetadata;\n}\n\n/**\n * AI mesaj metadata'sƒ± - Terap√∂tik context ve g√ºvenlik i√ßin\n */\nexport interface AIMessageMetadata {\n  sessionId: string;\n  contextType: 'onboarding' | 'chat' | 'insights' | 'art_therapy';\n  \n  // Therapeutic context\n  therapeuticIntent?: string[];\n  cbtTechnique?: CBTTechnique;\n  emotionalTone?: EmotionalTone;\n  \n  // Safety & quality\n  sentiment?: SentimentScore;\n  confidence?: number; // 0-1\n  safetyScore?: number; // 0-1\n  crisisRisk?: CrisisRiskLevel;\n  \n  // Performance\n  responseTime?: number;\n  modelUsed?: string;\n  tokenCount?: number;\n  \n  // Privacy\n  containsPII?: boolean;\n  anonymized?: boolean;\n}\n\n// =============================================================================\n// üß† CBT & THERAPEUTIC TYPES\n// =============================================================================\n\n/**\n * CBT teknikleri enum'u\n */\nexport enum CBTTechnique {\n  SOCRATIC_QUESTIONING = 'socratic_questioning',\n  THOUGHT_CHALLENGING = 'thought_challenging',\n  BEHAVIORAL_EXPERIMENT = 'behavioral_experiment',\n  COGNITIVE_RESTRUCTURING = 'cognitive_restructuring',\n  MINDFULNESS = 'mindfulness',\n  EXPOSURE_THERAPY = 'exposure_therapy',\n  ACTIVITY_SCHEDULING = 'activity_scheduling',\n  PROBLEM_SOLVING = 'problem_solving'\n}\n\n/**\n * Duygusal ton kategorileri\n */\nexport enum EmotionalTone {\n  SUPPORTIVE = 'supportive',\n  ENCOURAGING = 'encouraging',\n  EMPATHETIC = 'empathetic',\n  EDUCATIONAL = 'educational',\n  CHALLENGING = 'challenging',\n  CALMING = 'calming',\n  MOTIVATING = 'motivating'\n}\n\n/**\n * Sentiment analizi sonucu\n */\nexport interface SentimentScore {\n  polarity: 'positive' | 'neutral' | 'negative';\n  intensity: number; // 0-1\n  emotions: EmotionScore[];\n}\n\n/**\n * Emotion detection sonucu\n */\nexport interface EmotionScore {\n  emotion: 'joy' | 'sadness' | 'anger' | 'fear' | 'anxiety' | 'hope' | 'frustration';\n  confidence: number; // 0-1\n}\n\n// Crisis-related tipler kaldƒ±rƒ±ldƒ±; Risk deƒüerlendirmesi i√ßin `RiskLevel` kullanƒ±n\n// Uyum i√ßin minimal enum (DEPRECATED)\nexport enum CrisisRiskLevel {\n  NONE = 'none',\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\n// =============================================================================\n// ‚öôÔ∏è AI CONFIGURATION TYPES\n// =============================================================================\n\n/**\n * AI servis konfig√ºrasyonu\n */\nexport interface AIConfig {\n  provider: AIProvider;\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  systemPrompt: string;\n  fallbackBehavior: FallbackBehavior;\n  featureFlag: keyof typeof FEATURE_FLAGS;\n  \n  // Safety settings\n  safetyThreshold: number; // 0-1\n  contentFilteringEnabled: boolean;\n  \n  // Performance settings\n  timeoutMs: number;\n  retryAttempts: number;\n  cachingEnabled: boolean;\n}\n\n/**\n * Desteklenen AI saƒülayƒ±cƒ±larƒ±\n */\nexport enum AIProvider {\n  GEMINI = 'gemini',\n  LOCAL = 'local'\n}\n\n/**\n * Fallback davranƒ±≈ülarƒ±\n */\nexport enum FallbackBehavior {\n  GENERIC_RESPONSE = 'generic',\n  SILENCE = 'silence',\n  REDIRECT_TO_HUMAN = 'redirect',\n  OFFLINE_RESOURCES = 'offline_resources'\n}\n\n// =============================================================================\n// üí¨ CONVERSATION CONTEXT TYPES\n// =============================================================================\n\n/**\n * Conversation context - T√ºm conversation state'i\n */\nexport interface ConversationContext {\n  userId: string;\n  sessionId: string;\n  conversationHistory: AIMessage[];\n  userProfile: UserTherapeuticProfile;\n  currentState: ConversationState;\n  \n  // Context tracking\n  startTime: Date;\n  lastActivity: Date;\n  messageCount: number;\n  topicHistory: string[];\n  \n  // Therapeutic progress\n  therapeuticGoals: string[];\n  sessionObjectives: string[];\n  progressNotes: ProgressNote[];\n}\n\n/**\n * Kullanƒ±cƒ± terap√∂tik profili\n */\nexport interface UserTherapeuticProfile {\n  // Basic info\n  preferredLanguage: string;\n  culturalContext?: string;\n  \n  // Clinical context\n  symptomSeverity: number; // 0-10\n  diagnosticInfo?: DiagnosticInfo;\n  treatmentHistory?: TreatmentHistory;\n  \n  // Personalization\n  communicationStyle: CommunicationStyle;\n  triggerWords: string[];\n  avoidanceTopics: string[];\n  preferredCBTTechniques: CBTTechnique[];\n  therapeuticGoals: string[];\n  \n  // Safety\n  crisisContactInfo?: CrisisContact[];\n  safetyPlan?: SafetyPlan;\n  riskFactors: string[];\n}\n\n/**\n * Conversation durumlarƒ±\n */\nexport enum ConversationState {\n  STABLE = 'stable',\n  ELEVATED = 'elevated', // Stress/anxiety elevated\n  THERAPEUTIC = 'therapeutic', // Active therapy session\n  EDUCATIONAL = 'educational', // Learning mode\n  CELEBRATION = 'celebration' // Progress celebration\n}\n\n/**\n * ƒ∞leti≈üim stili tercihleri\n */\nexport interface CommunicationStyle {\n  formality: 'casual' | 'professional' | 'warm';\n  directness: 'direct' | 'gentle' | 'indirect';\n  supportStyle: 'encouraging' | 'challenging' | 'nurturing';\n  humorAcceptable: boolean;\n  preferredPronoun: string;\n}\n\n// =============================================================================\n// üìä ANALYTICS & INSIGHTS TYPES\n// =============================================================================\n\n/**\n * AI etkile≈üim analytics\n */\nexport interface AIInteractionAnalytics {\n  userId: string;\n  sessionId: string;\n  timestamp: Date;\n  \n  // Interaction details\n  interactionType: AIInteractionType;\n  feature: string;\n  duration: number;\n  messageCount: number;\n  \n  // Quality metrics\n  userSatisfaction?: number; // 1-5\n  therapeuticValue?: number; // 1-5\n  helpfulness?: number; // 1-5\n  \n  // Performance metrics\n  responseTime: number;\n  errorCount: number;\n  fallbacksUsed: number;\n  \n  // Privacy compliance\n  dataRetentionDays: number;\n  anonymized: boolean;\n}\n\n/**\n * AI etkile≈üim t√ºrleri\n */\nexport enum AIInteractionType {\n  CHAT_MESSAGE = 'chat_message',\n  INSIGHT_GENERATED = 'insight_generated',\n  // Legacy crisis event removed\n  ONBOARDING_STEP = 'onboarding_step',\n  ART_THERAPY_SESSION = 'art_therapy_session',\n  CBT_EXERCISE = 'cbt_exercise'\n}\n\n// =============================================================================\n// üîí ERROR & VALIDATION TYPES\n// =============================================================================\n\n/**\n * AI sistem hatalarƒ±\n */\nexport interface AIError {\n  code: AIErrorCode;\n  message: string;\n  context?: Record<string, any>;\n  timestamp: Date;\n  severity: ErrorSeverity;\n  recoverable: boolean;\n  userMessage?: string; // Kullanƒ±cƒ±ya g√∂sterilecek mesaj\n}\n\n/**\n * AI hata kodlarƒ± - Production Ready\n */\nexport enum AIErrorCode {\n  // System & Configuration\n  FEATURE_DISABLED = 'feature_disabled',\n  INITIALIZATION_FAILED = 'initialization_failed',\n  NO_PROVIDER_AVAILABLE = 'no_provider_available',\n  CONFIGURATION_ERROR = 'configuration_error',\n  INVALID_API_KEY = 'invalid_api_key',\n  \n  // Network & Connectivity\n  NETWORK_ERROR = 'network_error',\n  TIMEOUT = 'timeout',\n  CONNECTION_FAILED = 'connection_failed',\n  \n  // Rate Limiting & Quotas\n  RATE_LIMIT = 'rate_limit',\n  QUOTA_EXCEEDED = 'quota_exceeded',\n  CONCURRENT_LIMIT = 'concurrent_limit',\n  \n  // AI Provider & Model Errors\n  MODEL_ERROR = 'model_error',\n  INVALID_RESPONSE = 'invalid_response',\n  MODEL_NOT_AVAILABLE = 'model_not_available',\n  MODEL_OVERLOADED = 'model_overloaded',\n  PROVIDER_ERROR = 'provider_error',\n  \n  // Data & Processing\n  PROCESSING_FAILED = 'processing_failed',\n  INVALID_INPUT = 'invalid_input',\n  DATA_VALIDATION_FAILED = 'data_validation_failed',\n  CONTENT_TOO_LONG = 'content_too_long',\n  \n  // Security & Safety\n  SAFETY_VIOLATION = 'safety_violation',\n  PRIVACY_VIOLATION = 'privacy_violation',\n  PII_DETECTED = 'pii_detected',\n  CONTENT_FILTERED = 'content_filtered',\n  UNAUTHORIZED_ACCESS = 'unauthorized_access',\n  \n  // Resources & State\n  RESOURCE_NOT_FOUND = 'resource_not_found',\n  SESSION_NOT_FOUND = 'session_not_found',\n  SESSION_EXPIRED = 'session_expired',\n  CACHE_ERROR = 'cache_error',\n  STORAGE_ERROR = 'storage_error',\n  \n  // User & Context\n  USER_NOT_FOUND = 'user_not_found',\n  CONTEXT_MISSING = 'context_missing',\n  PROFILE_INCOMPLETE = 'profile_incomplete',\n  \n  // Fallback & Recovery\n  FALLBACK_TRIGGERED = 'fallback_triggered',\n  RECOVERY_FAILED = 'recovery_failed',\n  \n  // Generic\n  UNKNOWN = 'unknown',\n  INTERNAL_ERROR = 'internal_error'\n}\n\n/**\n * Hata ciddiyet seviyeleri\n */\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\n/**\n * Input validation schema\n */\nexport interface ValidationSchema {\n  maxLength: number;\n  minLength: number;\n  allowedPatterns: RegExp[];\n  forbiddenPatterns: RegExp[];\n  requiredFields: string[];\n  sensitiveDataCheck: boolean;\n}\n\n// =============================================================================\n// üé® ART THERAPY TYPES\n// =============================================================================\n\n/**\n * Sanat terapisi session\n */\nexport interface ArtTherapySession {\n  id: string;\n  userId: string;\n  timestamp: Date;\n  \n  // Creation context\n  emotionalState: EmotionalState;\n  therapeuticGoal: string;\n  aiPrompt?: string;\n  userPrompt?: string;\n  \n  // Artwork data\n  artworkType: ArtworkType;\n  artworkData: ArtworkData;\n  creationDuration: number;\n  \n  // Analysis\n  emotionalAnalysis?: EmotionalAnalysis;\n  therapeuticValue?: number;\n  progressIndicators?: string[];\n}\n\n/**\n * Sanat t√ºrleri\n */\nexport enum ArtworkType {\n  AI_GENERATED = 'ai_generated',\n  USER_DRAWN = 'user_drawn',\n  COLLABORATIVE = 'collaborative',\n  GUIDED_CREATION = 'guided_creation'\n}\n\n/**\n * Duygusal durum\n */\nexport interface EmotionalState {\n  primary: string;\n  intensity: number; // 1-10\n  secondary?: string[];\n  physicalSymptoms?: string[];\n  cognitiveSymptoms?: string[];\n}\n\n// =============================================================================\n// üìã SUPPORTING TYPES\n// =============================================================================\n\n/**\n * Diagnostic bilgiler (opsiyonel)\n */\nexport interface DiagnosticInfo {\n  primaryDiagnosis?: string;\n  secondaryDiagnoses?: string[];\n  comorbidities?: string[];\n  severityLevel?: number; // 1-10\n  diagnosisDate?: Date;\n}\n\n/**\n * Tedavi ge√ßmi≈üi\n */\nexport interface TreatmentHistory {\n  previousTreatments: TreatmentType[];\n  currentMedications?: string[];\n  allergies?: string[];\n  treatmentResponse?: string;\n}\n\n/**\n * Tedavi t√ºrleri\n */\nexport enum TreatmentType {\n  CBT = 'cbt',\n  EXPOSURE_THERAPY = 'exposure_therapy',\n  MEDICATION = 'medication',\n  GROUP_THERAPY = 'group_therapy',\n  FAMILY_THERAPY = 'family_therapy',\n  ART_THERAPY = 'art_therapy'\n}\n\n/**\n * Kriz ileti≈üim bilgileri\n */\nexport interface CrisisContact {\n  name: string;\n  relationship: string;\n  phone: string;\n  email?: string;\n  preferredContactMethod: 'phone' | 'email' | 'text';\n  availability: string;\n}\n\n/**\n * G√ºvenlik planƒ±\n */\nexport interface SafetyPlan {\n  warningSignals: string[];\n  copingStrategies: string[];\n  socialSupports: CrisisContact[];\n  professionalContacts: CrisisContact[];\n  environmentalSafety: string[];\n  reasonsToLive: string[];\n}\n\n/**\n * Progress note\n */\nexport interface ProgressNote {\n  timestamp: Date;\n  content: string;\n  type: 'observation' | 'goal' | 'intervention' | 'outcome';\n  clinician?: string;\n  private: boolean;\n}\n\n/**\n * Artwork data\n */\nexport interface ArtworkData {\n  format: 'image' | 'drawing' | 'text' | 'mixed';\n  content: string | Uint8Array;\n  metadata: {\n    width?: number;\n    height?: number;\n    colors?: string[];\n    tools?: string[];\n    style?: string;\n  };\n}\n\n/**\n * Emotional analysis result\n */\nexport interface EmotionalAnalysis {\n  dominantEmotions: EmotionScore[];\n  symbolism?: string[];\n  therapeuticThemes?: string[];\n  progressIndicators?: string[];\n  recommendedFollowUp?: string[];\n}\n\n// =============================================================================\n// üîÑ TYPE UTILITIES & GUARDS\n// =============================================================================\n\n/**\n * Type guard for AIMessage\n */\nexport const isAIMessage = (obj: any): obj is AIMessage => {\n  return obj && \n         typeof obj.id === 'string' &&\n         typeof obj.content === 'string' &&\n         ['user', 'assistant', 'system'].includes(obj.role) &&\n         (obj.timestamp instanceof Date || (obj.timestamp && !isNaN(new Date(obj.timestamp).getTime())));\n};\n\n/**\n * Type guard for AIError\n */\nexport const isAIError = (obj: any): obj is AIError => {\n  return obj && \n         typeof obj.code === 'string' &&\n         typeof obj.message === 'string' &&\n         Object.values(AIErrorCode).includes(obj.code) &&\n         Object.values(ErrorSeverity).includes(obj.severity);\n};\n\n// Crisis detection i√ßin type guard kaldƒ±rƒ±ldƒ±\n\n/**\n * Feature flag requirement check\n */\nexport const requiresFeatureFlag = (config: AIConfig): boolean => {\n  return FEATURE_FLAGS.isEnabled(config.featureFlag);\n};\n\n// =============================================================================\n// üß≠ SPRINT 7: AI ONBOARDING RECREATION TYPES\n// =============================================================================\n\n/**\n * Y-BOCS Question Type\n */\nexport enum YBOCSQuestionType {\n  OBSESSIONS = 'obsessions',\n  COMPULSIONS = 'compulsions'\n}\n\n/**\n * Y-BOCS Question\n */\nexport interface YBOCSQuestion {\n  id: string;\n  type: YBOCSQuestionType;\n  category: 'time' | 'interference' | 'distress' | 'resistance' | 'control';\n  text: string;\n  description?: string;\n  options: Array<{\n    value: number;\n    label: string;\n    description?: string;\n  }>;\n  culturalContext?: {\n    religiousFactors?: string;\n    socialFactors?: string;\n    familialFactors?: string;\n  };\n  // Compatibility\n  culturalAdaptations?: string[];\n}\n\n/**\n * Y-BOCS Assessment Answer\n */\nexport interface YBOCSAnswer {\n  questionId: string;\n  questionText?: string;\n  response?: string | number;\n  severity?: number; // 0-4 scale\n  timestamp: Date;\n  metadata?: {\n    responseTime: number; // ms\n    revisionCount: number;\n    confidence?: number; // 0-1\n  };\n  // Compatibility fields\n  value?: number | string;\n  questionType?: string;\n}\n\n/**\n * Y-BOCS Analysis Result\n */\nexport interface OCDAnalysis {\n  totalScore: number; // 0-40\n  subscores: {\n    obsessions: number; // 0-20\n    compulsions: number; // 0-20\n  };\n  severityLevel: OCDSeverityLevel;\n  dominantSymptoms: string[];\n  riskFactors: string[];\n  confidence: number; // 0-1\n  culturalConsiderations: string[];\n  recommendedInterventions: string[];\n}\n\n/**\n * OCD Severity Levels\n */\nexport enum OCDSeverityLevel {\n  MINIMAL = 'minimal', // 0-7\n  MILD = 'mild', // 8-15\n  MODERATE = 'moderate', // 16-23\n  SEVERE = 'severe', // 24-31\n  EXTREME = 'extreme' // 32-40\n}\n\n/**\n * Enhanced Y-BOCS Score with AI Enhancement\n */\nexport interface EnhancedYBOCSScore {\n  baseScore: OCDAnalysis;\n  aiEnhancements: {\n    contextualAdjustments: number;\n    culturalFactors: string[];\n    personalityConsiderations: string[];\n    environmentalInfluences: string[];\n  };\n  finalScore: number;\n  confidence: number;\n  rationale: string;\n}\n\n/**\n * Onboarding Session\n */\nexport interface OnboardingSession {\n  id: string;\n  userId: string;\n  startTime: Date;\n  currentStep: OnboardingStep;\n  completedSteps: OnboardingStep[];\n  ybocsData: YBOCSAnswer[];\n  userProfile: PartialUserProfile;\n  sessionState: OnboardingSessionState;\n  culturalContext: CulturalContext;\n  progress: {\n    totalSteps: number;\n    completedSteps: number;\n    estimatedTimeRemaining: number; // minutes\n  };\n}\n\n/**\n * Onboarding Steps\n */\nexport enum OnboardingStep {\n  WELCOME = 'welcome',\n  CONSENT = 'consent',\n  BASIC_INFO = 'basic_info',\n  CULTURAL_PREFERENCES = 'cultural_preferences',\n  YBOCS_ASSESSMENT = 'ybocs_assessment',\n  SYMPTOM_EXPLORATION = 'symptom_exploration',\n  THERAPEUTIC_PREFERENCES = 'therapeutic_preferences',\n  RISK_ASSESSMENT = 'risk_assessment',\n  GOAL_SETTING = 'goal_setting',\n  TREATMENT_PLANNING = 'treatment_planning',\n  SAFETY_PLANNING = 'safety_planning',\n  COMPLETION = 'completion'\n}\n\n/**\n * Onboarding Session State\n */\nexport enum OnboardingSessionState {\n  ACTIVE = 'active',\n  PAUSED = 'paused',\n  COMPLETED = 'completed',\n  ABANDONED = 'abandoned',\n  ERROR = 'error'\n}\n\n/**\n * Cultural Context\n */\nexport interface CulturalContext {\n  language: string;\n  country: string;\n  culturalBackground: string[];\n  religiousConsiderations?: string[];\n  familyDynamics?: string;\n  communicationStyle: CommunicationStyle;\n  stigmaFactors?: string[];\n  supportSystemStructure?: string;\n}\n\n/**\n * Partial User Profile (during onboarding)\n */\nexport interface PartialUserProfile {\n  basicInfo?: {\n    age?: number;\n    gender?: string;\n    occupation?: string;\n    educationLevel?: string;\n  };\n  therapeuticHistory?: {\n    previousTreatment: boolean;\n    treatmentTypes?: TreatmentType[];\n    currentMedication: boolean;\n    medicationDetails?: string[];\n  };\n  preferences?: TherapeuticPreferences;\n  goals?: string[];\n  concerns?: string[];\n}\n\n/**\n * Therapeutic Preferences\n */\nexport interface TherapeuticPreferences {\n  preferredApproach: TherapeuticApproach[];\n  communicationStyle: CommunicationStyle;\n  sessionFrequency: SessionFrequency;\n  contentPreferences: ContentPreferences;\n  accessibilityNeeds?: AccessibilityNeed[];\n  triggerWarnings?: string[];\n}\n\n/**\n * Therapeutic Approaches\n */\nexport enum TherapeuticApproach {\n  CBT = 'cbt',\n  EXPOSURE_THERAPY = 'exposure_therapy',\n  MINDFULNESS = 'mindfulness',\n  BEHAVIORAL_ACTIVATION = 'behavioral_activation',\n  ACCEPTANCE_COMMITMENT = 'acceptance_commitment',\n  PEER_SUPPORT = 'peer_support',\n  FAMILY_INVOLVEMENT = 'family_involvement'\n}\n\n/**\n * Session Frequency Preferences\n */\nexport enum SessionFrequency {\n  DAILY = 'daily',\n  TWICE_WEEKLY = 'twice_weekly',\n  WEEKLY = 'weekly',\n  BIWEEKLY = 'biweekly',\n  AS_NEEDED = 'as_needed'\n}\n\n/**\n * Content Preferences\n */\nexport interface ContentPreferences {\n  textBased: boolean;\n  audioSupport: boolean;\n  visualAids: boolean;\n  interactiveExercises: boolean;\n  progressTracking: boolean;\n  peerStories: boolean;\n  professionalGuidance: boolean;\n}\n\n/**\n * Accessibility Needs\n */\nexport enum AccessibilityNeed {\n  LARGE_TEXT = 'large_text',\n  HIGH_CONTRAST = 'high_contrast',\n  SCREEN_READER = 'screen_reader',\n  VOICE_CONTROL = 'voice_control',\n  SIMPLIFIED_UI = 'simplified_ui',\n  EXTENDED_TIME = 'extended_time'\n}\n\n/**\n * Treatment Plan\n */\nexport interface TreatmentPlan {\n  id: string;\n  userId: string;\n  createdAt: Date;\n  lastUpdated: Date;\n  \n  // Plan structure\n  phases: TreatmentPhase[];\n  currentPhase: number;\n  estimatedDuration: number; // weeks\n  \n  // Personalization\n  userProfile: UserTherapeuticProfile;\n  culturalAdaptations: string[];\n  accessibilityAccommodations: string[];\n  \n  // Evidence base\n  evidenceBasedInterventions: EvidenceBasedIntervention[];\n  expectedOutcomes: ExpectedOutcome[];\n  successMetrics: SuccessMetric[];\n  \n  // Adaptive elements\n  adaptationTriggers: AdaptationTrigger[];\n  fallbackStrategies: FallbackStrategy[];\n  emergencyProtocols: EmergencyProtocol[];\n  // Compatibility\n  safetyProtocols?: string[];\n}\n\n/**\n * Treatment Phase\n */\nexport interface TreatmentPhase {\n  id: string;\n  name: string;\n  description: string;\n  estimatedDuration: number; // weeks\n  objectives: string[];\n  interventions: Intervention[];\n  milestones: Milestone[];\n  prerequisites?: string[];\n  successCriteria: string[];\n  // Compatibility\n  type?: string;\n  duration?: number;\n  goals?: string[];\n}\n\n/**\n * Evidence-Based Intervention\n */\nexport interface EvidenceBasedIntervention {\n  id: string;\n  name: string;\n  type: InterventionType;\n  evidenceLevel: EvidenceLevel;\n  description: string;\n  protocol: InterventionProtocol;\n  expectedOutcome: string;\n  contraindications?: string[];\n  culturalConsiderations?: string[];\n}\n\n/**\n * Intervention Types\n */\nexport enum InterventionType {\n  // EXPOSURE_RESPONSE_PREVENTION = 'erp', // Removed\n  COGNITIVE_RESTRUCTURING = 'cognitive_restructuring',\n  MINDFULNESS_TRAINING = 'mindfulness_training',\n  BEHAVIORAL_ACTIVATION = 'behavioral_activation',\n  PSYCHOEDUCATION = 'psychoeducation',\n  RELAPSE_PREVENTION = 'relapse_prevention',\n  FAMILY_EDUCATION = 'family_education'\n}\n\n/**\n * Evidence Levels\n */\nexport enum EvidenceLevel {\n  GRADE_A = 'grade_a', // Strong evidence\n  GRADE_B = 'grade_b', // Moderate evidence\n  GRADE_C = 'grade_c', // Weak evidence\n  EXPERT_CONSENSUS = 'expert_consensus',\n  EMERGING = 'emerging'\n}\n\n/**\n * Risk Assessment Result\n */\nexport interface RiskAssessment {\n  id: string;\n  userId: string;\n  timestamp: Date;\n  \n  // Risk categories\n  immediateRisk: RiskLevel;\n  shortTermRisk: RiskLevel;\n  longTermRisk: RiskLevel;\n  \n  // Risk factors\n  identifiedRisks: RiskFactor[];\n  protectiveFactors: ProtectiveFactor[];\n  \n  // Recommendations\n  immediateActions: ImmediateAction[];\n  monitoringPlan: MonitoringPlan;\n  safeguards: Safeguard[];\n  \n  // Validation\n  confidence: number;\n  humanReviewRequired: boolean;\n  reassessmentInterval: number; // days\n  // Compatibility\n  overallRiskLevel?: RiskLevel;\n  riskFactors?: any[];\n  preventiveInterventions?: any[];\n  riskScore?: number;\n}\n\n// =============================================================================\n// üì¶ PLACEHOLDER TYPE DEFINITIONS (compatibility stubs)\n// =============================================================================\n\nexport interface ExpectedOutcome {\n  description: string;\n  metric?: string;\n  target?: number | string;\n}\n\nexport interface SuccessMetric {\n  name: string;\n  threshold?: number;\n}\n\nexport interface AdaptationTrigger {\n  id: string;\n  condition: string;\n  action: string;\n}\n\nexport interface FallbackStrategy {\n  id: string;\n  description: string;\n}\n\nexport interface EmergencyProtocol {\n  id: string;\n  description: string;\n  steps?: string[];\n}\n\nexport interface Intervention {\n  id: string;\n  name: string;\n  type: InterventionType;\n  description?: string;\n  // Compatibility\n  frequency?: string;\n  culturalNotes?: string;\n  duration?: number | string;\n}\n\nexport interface Milestone {\n  id: string;\n  description: string;\n  dueInWeeks?: number;\n  // Compatibility\n  name?: string;\n  targetDate?: string;\n}\n\nexport interface InterventionProtocol {\n  steps: string[];\n  durationWeeks?: number;\n}\n\nexport interface ImmediateAction {\n  id: string;\n  priority: 'low' | 'medium' | 'high';\n  description: string;\n  timeframe?: string;\n  assignee?: string;\n}\n\nexport interface MonitoringPlan {\n  frequency: 'daily' | 'weekly' | 'biweekly' | 'monthly';\n  indicators: string[];\n  triggers: string[];\n}\n\nexport interface Safeguard {\n  id: string;\n  type: string;\n  description: string;\n  activationTrigger?: string;\n  contactInfo?: string;\n}\n\n/**\n * Risk Levels\n */\n// Include legacy variants for compatibility\nexport enum RiskLevel {\n  NONE = 'none',\n  LOW = 'low',\n  MEDIUM = 'medium',\n  MODERATE = 'moderate',\n  HIGH = 'high',\n  VERY_HIGH = 'very_high',\n  IMMINENT = 'imminent',\n  CRITICAL = 'critical'\n}\n\n// ---------------------------------------------------------------------------\n// Compatibility shims for older modules\n// ---------------------------------------------------------------------------\n\nexport interface UserProfile {\n  id?: string;\n  email?: string;\n  name?: string;\n  provider?: string;\n  updated_at?: string;\n  // Gamification fields used in settings screen\n  currentStreak?: number;\n  level?: number | string;\n  healingPointsTotal?: number;\n  // Onboarding compatibility\n  userId?: string;\n  basicInfo?: {\n    age?: number; gender?: string; occupation?: string; educationLevel?: string;\n  };\n  preferences?: Record<string, any>;\n  culturalContext?: any;\n  therapeuticGoals?: any[];\n}\n\nexport interface TherapeuticGoal {\n  id: string;\n  title?: string;\n  description: string;\n  category?: string;\n  priority?: 'low' | 'medium' | 'high';\n  targetDate?: Date;\n}\nexport type UserPreferences = Record<string, any>;\nexport type ProfileStep = string;\nexport interface CrisisProtocol { description?: string }\nexport interface PreventiveIntervention { description?: string }\nexport interface TherapeuticRecommendation {\n  title?: string;\n  description?: string;\n  priority?: 'low' | 'medium' | 'high' | 'critical';\n  culturallyAdapted?: boolean;\n}\n\n// Re-export runtime event enum for modules expecting it here\nexport { AIEventType } from '@/features/ai/telemetry/aiTelemetry';\n\n/**\n * Risk Factor\n */\nexport interface RiskFactor {\n  category: RiskCategory;\n  description: string;\n  severity: RiskLevel;\n  modifiable: boolean;\n  timeframe: 'immediate' | 'short_term' | 'long_term';\n}\n\n/**\n * Risk Categories\n */\nexport enum RiskCategory {\n  CLINICAL = 'clinical',\n  PSYCHOSOCIAL = 'psychosocial',\n  ENVIRONMENTAL = 'environmental',\n  BEHAVIORAL = 'behavioral',\n  COGNITIVE = 'cognitive'\n}\n\n/**\n * Protective Factor\n */\nexport interface ProtectiveFactor {\n  category: string;\n  description: string;\n  strength: 'weak' | 'moderate' | 'strong';\n  reinforceable: boolean;\n}\n\n/**\n * Onboarding Result\n */\nexport interface OnboardingResult {\n  sessionId: string;\n  userId: string;\n  completedAt: Date;\n  duration: number; // minutes\n  \n  // Assessments\n  ybocsAnalysis: OCDAnalysis;\n  enhancedScore: EnhancedYBOCSScore;\n  riskAssessment: RiskAssessment;\n  \n  // Generated profiles\n  userProfile: UserTherapeuticProfile;\n  treatmentPlan: TreatmentPlan;\n  \n  // Quality metrics\n  completionRate: number; // 0-1\n  dataQuality: number; // 0-1\n  userSatisfaction?: number; // 1-5\n  \n  // Next steps\n  recommendedNextSteps: string[];\n  followUpSchedule: FollowUpSchedule;\n}\n\n/**\n * Follow-up Schedule\n */\nexport interface FollowUpSchedule {\n  initialCheckIn: Date;\n  weeklyReviews: Date[];\n  monthlyAssessments: Date[];\n  emergencyContactInfo: CrisisContact[];\n}\n\n// =============================================================================\n// üì§ EXPORTS\n// =============================================================================\n\n// All types are already exported as named exports above\n// No default export needed since TypeScript interfaces cannot be used as values\n\n// Legacy aliases for compatibility with older modules\nexport type TherapeuticIntervention = EvidenceBasedIntervention;\nexport type TreatmentGoal = string;\nexport type ProgressMilestone = Milestone;\nexport type CulturalAdaptation = string;\nexport type RiskFactors = RiskFactor[];\n\n// =============================================================================\n// üß† ADVANCED OCD PATTERN ANALYSIS TYPES (Ocak 2025)\n// =============================================================================\n\nexport interface OCDTemporalPattern {\n  type: 'daily_cycle' | 'weekly_pattern' | 'situational_trigger' | 'stress_related';\n  peakTimes: string[];\n  frequency: number;\n  confidence: number;\n  trend: 'increasing' | 'stable' | 'decreasing' | 'fluctuating';\n  metadata: {\n    analysisDate: string;\n    dataPoints: number;\n    timeRange: string;\n  };\n}\n\nexport interface OCDTriggerAnalysis {\n  triggers: {\n    trigger: string;\n    category: 'environmental' | 'emotional' | 'social' | 'physical' | 'temporal';\n    frequency: number;\n    impactScore: number;\n    associatedCategories: string[];\n    averageSeverity: number;\n    timePattern: {\n      peakHours: number[];\n      peakDays: string[];\n    };\n    emotionalContext: {\n      preTriggerAnxiety: number;\n      postCompulsionRelief: number;\n      emotionalIntensity: number;\n    };\n    interventionSuggestions: string[];\n  }[];\n  \n  triggerNetworks: {\n    primaryTrigger: string;\n    secondaryTriggers: string[];\n    cascadeEffect: boolean;\n    networkStrength: number;\n  }[];\n}\n\nexport interface OCDCategoryDistribution {\n  distribution: {\n    category: string;\n    count: number;\n    percentage: number;\n    averageSeverity: number;\n    trend: 'increasing' | 'decreasing' | 'stable';\n    lastOccurrence: string;\n  }[];\n  dominantCategory: string;\n  diversity: number;\n  concentration: number;\n  emergingPatterns: string[];\n}\n\nexport interface OCDSeverityProgression {\n  overall: {\n    currentAverage: number;\n    trend: 'improving' | 'worsening' | 'stable';\n    changeRate: number;\n    projectedNextWeek: number;\n  };\n  byCategory: Record<string, {\n    average: number;\n    trend: string;\n    samples: number;\n  }>;\n  riskFactors: {\n    factor: string;\n    correlation: number;\n    impact: 'low' | 'medium' | 'high';\n  }[];\n}\n\nexport interface OCDPredictiveInsights {\n  nextWeekRisk: 'low' | 'medium' | 'high';\n  riskFactors: string[];\n  recommendations: string[];\n  confidence: number;\n}\n\nexport interface OCDPatternAnalysisResult {\n  temporalPatterns: OCDTemporalPattern[];\n  triggerAnalysis: OCDTriggerAnalysis;\n  categoryDistribution: OCDCategoryDistribution;\n  severityProgression: OCDSeverityProgression;\n  predictiveInsights: OCDPredictiveInsights;\n  metadata: {\n    analysisDate: string;\n    dataPoints: number;\n    analysisType: string;\n    confidence: number;\n    culturalFactors: {\n      religiousComponent: boolean;\n      familialInfluence: boolean;\n      culturalNorms: boolean;\n    };\n  };\n}"],"mappings":"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","ignoreList":[]}