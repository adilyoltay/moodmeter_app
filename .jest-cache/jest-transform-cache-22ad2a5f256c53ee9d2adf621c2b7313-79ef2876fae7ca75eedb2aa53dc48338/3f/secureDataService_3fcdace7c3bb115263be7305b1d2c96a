cbae77d0f4a97502e0b508b613d6cc2b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secureDataService = exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var SecureStore = _interopRequireWildcard(require("expo-secure-store"));
var Crypto = _interopRequireWildcard(require("expo-crypto"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var SecureDataService = function () {
  function SecureDataService() {
    (0, _classCallCheck2.default)(this, SecureDataService);
    this.keyCache = null;
  }
  return (0, _createClass2.default)(SecureDataService, [{
    key: "getOrCreateKey",
    value: function () {
      var _getOrCreateKey = (0, _asyncToGenerator2.default)(function* () {
        var _this = this;
        if (this.keyCache) return this.keyCache;
        var stored = yield SecureStore.getItemAsync(SecureDataService.KEY_ID);
        var generateKey = function () {
          var _ref = (0, _asyncToGenerator2.default)(function* () {
            var randomBytes = new Uint8Array(32);
            for (var i = 0; i < randomBytes.length; i++) randomBytes[i] = Math.floor(Math.random() * 256);
            var keyBytes = randomBytes.buffer;
            var b64 = _this.arrayBufferToBase64(keyBytes);
            yield SecureStore.setItemAsync(SecureDataService.KEY_ID, b64);
            return keyBytes;
          });
          return function generateKey() {
            return _ref.apply(this, arguments);
          };
        }();
        if (!stored) {
          var keyBytes = yield generateKey();
          this.keyCache = keyBytes;
          return keyBytes;
        }
        var ab;
        try {
          ab = this.base64ToArrayBuffer(stored);
        } catch (e) {
          console.warn('⚠️ Invalid base64 in stored master key. Regenerating...');
          var _keyBytes = yield generateKey();
          this.keyCache = _keyBytes;
          return _keyBytes;
        }
        if ((ab.byteLength || 0) !== 32) {
          console.warn(`⚠️ Invalid key length (${ab.byteLength}) for AES-256. Rotating master key...`);
          var _keyBytes2 = yield generateKey();
          this.keyCache = _keyBytes2;
          return _keyBytes2;
        }
        this.keyCache = ab;
        return ab;
      });
      function getOrCreateKey() {
        return _getOrCreateKey.apply(this, arguments);
      }
      return getOrCreateKey;
    }()
  }, {
    key: "encryptData",
    value: function () {
      var _encryptData = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          var plaintext = typeof data === 'string' ? data : JSON.stringify(data);
          var iv = yield Crypto.getRandomBytesAsync(12);
          var keyBuffer = yield this.getOrCreateKey();
          var key = new Uint8Array(keyBuffer);
          var algorithm = 'AES-256-CBC-HMAC';
          var cbcIv = yield Crypto.getRandomBytesAsync(16);
          if (typeof crypto !== 'undefined' && crypto.subtle) {
            console.log('🔐 Using Web Crypto API for AES-GCM...');
            var cryptoKey = yield crypto.subtle.importKey('raw', key, {
              name: 'AES-GCM'
            }, false, ['encrypt']);
            var _encrypted = yield crypto.subtle.encrypt({
              name: 'AES-GCM',
              iv: iv
            }, cryptoKey, new TextEncoder().encode(plaintext));
            return {
              ciphertext: this.arrayBufferToBase64(_encrypted),
              iv: this.arrayBufferToBase64(iv.buffer),
              algorithm: 'AES-256-GCM',
              version: 1
            };
          }
          console.log('🔐 Using expo-crypto fallback encryption...');
          var plaintextBytes = new TextEncoder().encode(plaintext);
          var encrypted = new Uint8Array(plaintextBytes.length);
          for (var i = 0; i < plaintextBytes.length; i++) {
            encrypted[i] = plaintextBytes[i] ^ key[i % key.length];
          }
          var ivBuffer = new ArrayBuffer(iv.buffer.byteLength);
          new Uint8Array(ivBuffer).set(new Uint8Array(iv.buffer));
          var integrityData = plaintext + this.arrayBufferToBase64(ivBuffer);
          var integrity = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, integrityData, {
            encoding: Crypto.CryptoEncoding.BASE64
          });
          var combined = new Uint8Array(encrypted.length + 16);
          var integrityBytes = new TextEncoder().encode(integrity.substring(0, 16));
          combined.set(integrityBytes, 0);
          combined.set(encrypted, 16);
          return {
            ciphertext: this.arrayBufferToBase64(combined.buffer),
            iv: this.arrayBufferToBase64(iv.buffer),
            algorithm: 'EXPO-CRYPTO-XOR',
            version: 2
          };
        } catch (error) {
          console.error('❌ Encryption failed:', error);
          if (__DEV__) {
            console.warn('🔓 DEV MODE: Using development fallback encryption');
            var _plaintext = typeof data === 'string' ? data : JSON.stringify(data);
            var encoded = new TextEncoder().encode(_plaintext);
            var simple = this.arrayBufferToBase64(encoded.buffer);
            return {
              ciphertext: simple,
              iv: 'dev_mode_iv',
              algorithm: 'DEV_FALLBACK',
              version: 0
            };
          }
          var err = new Error('ENCRYPTION_UNAVAILABLE');
          err.code = 'ENCRYPTION_UNAVAILABLE';
          throw err;
        }
      });
      function encryptData(_x) {
        return _encryptData.apply(this, arguments);
      }
      return encryptData;
    }()
  }, {
    key: "decryptData",
    value: function () {
      var _decryptData = (0, _asyncToGenerator2.default)(function* (payload) {
        if (!payload || typeof payload !== 'object') {
          throw new Error('Invalid encryption payload: must be an object');
        }
        if (!payload.algorithm) {
          throw new Error('Invalid encryption payload: missing algorithm');
        }
        if (!payload.ciphertext) {
          throw new Error('Invalid encryption payload: missing ciphertext');
        }
        if (payload.algorithm === 'SHA256_FALLBACK') {
          throw new Error('Cannot decrypt hashed data - use SHA256_FALLBACK only as last resort');
        }
        try {
          switch (payload.algorithm) {
            case 'AES-256-GCM':
              return yield this.decryptAESGCM(payload);
            case 'EXPO-CRYPTO-XOR':
              return yield this.decryptExpoCrypto(payload);
            case 'DEV_FALLBACK':
              if (__DEV__) {
                return yield this.decryptDevFallback(payload);
              }
              throw new Error('Dev fallback not available in production');
            default:
              throw new Error(`Unsupported encryption algorithm: ${payload.algorithm}`);
          }
        } catch (error) {
          console.error('❌ Decryption failed:', error);
          throw error;
        }
      });
      function decryptData(_x2) {
        return _decryptData.apply(this, arguments);
      }
      return decryptData;
    }()
  }, {
    key: "decryptAESGCM",
    value: function () {
      var _decryptAESGCM = (0, _asyncToGenerator2.default)(function* (payload) {
        if (typeof crypto !== 'undefined' && crypto.subtle) {
          console.log('🔓 Using Web Crypto API for AES-GCM decryption...');
          var keyBuffer = yield this.getOrCreateKey();
          var key = new Uint8Array(keyBuffer);
          var cryptoKey = yield crypto.subtle.importKey('raw', key, {
            name: 'AES-GCM'
          }, false, ['decrypt']);
          var iv = this.base64ToArrayBuffer(payload.iv);
          var ciphertext = this.base64ToArrayBuffer(payload.ciphertext);
          var decrypted = yield crypto.subtle.decrypt({
            name: 'AES-GCM',
            iv: iv
          }, cryptoKey, ciphertext);
          var text = new TextDecoder().decode(decrypted);
          try {
            return JSON.parse(text);
          } catch (_unused) {
            return text;
          }
        }
        return yield this.decryptExpoCrypto(payload);
      });
      function decryptAESGCM(_x3) {
        return _decryptAESGCM.apply(this, arguments);
      }
      return decryptAESGCM;
    }()
  }, {
    key: "decryptExpoCrypto",
    value: function () {
      var _decryptExpoCrypto = (0, _asyncToGenerator2.default)(function* (payload) {
        console.log('🔓 Using expo-crypto XOR decryption...');
        var keyBuffer = yield this.getOrCreateKey();
        var key = new Uint8Array(keyBuffer);
        var combined = this.base64ToArrayBuffer(payload.ciphertext);
        var combinedBytes = new Uint8Array(combined);
        if (combinedBytes.length < 16) {
          throw new Error('Ciphertext too short');
        }
        var integrityBytes = combinedBytes.slice(0, 16);
        var encryptedBytes = combinedBytes.slice(16);
        var decrypted = new Uint8Array(encryptedBytes.length);
        for (var i = 0; i < encryptedBytes.length; i++) {
          decrypted[i] = encryptedBytes[i] ^ key[i % key.length];
        }
        var text = new TextDecoder().decode(decrypted);
        var expectedIntegrity = new TextDecoder().decode(integrityBytes);
        var iv = payload.iv;
        var integrityData = text + iv;
        var actualIntegrity = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, integrityData, {
          encoding: Crypto.CryptoEncoding.BASE64
        });
        if (!actualIntegrity.startsWith(expectedIntegrity)) {
          console.warn('⚠️ Integrity check failed, but proceeding with decryption');
        }
        try {
          return JSON.parse(text);
        } catch (_unused2) {
          return text;
        }
      });
      function decryptExpoCrypto(_x4) {
        return _decryptExpoCrypto.apply(this, arguments);
      }
      return decryptExpoCrypto;
    }()
  }, {
    key: "decryptDevFallback",
    value: function () {
      var _decryptDevFallback = (0, _asyncToGenerator2.default)(function* (payload) {
        console.log('🔓 DEV MODE: Using development fallback decryption');
        var decoded = this.base64ToArrayBuffer(payload.ciphertext);
        var text = new TextDecoder().decode(decoded);
        try {
          return JSON.parse(text);
        } catch (_unused3) {
          return text;
        }
      });
      function decryptDevFallback(_x5) {
        return _decryptDevFallback.apply(this, arguments);
      }
      return decryptDevFallback;
    }()
  }, {
    key: "arrayBufferToBase64",
    value: function arrayBufferToBase64(buffer) {
      var bytes = new Uint8Array(buffer);
      var binary = '';
      for (var i = 0; i < bytes.byteLength; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      try {
        throw new Error('Skipping Buffer - using pure JS implementation');
      } catch (_unused4) {
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        var result = '';
        var _i = 0;
        while (_i < binary.length) {
          var a = binary.charCodeAt(_i++);
          var b = _i < binary.length ? binary.charCodeAt(_i++) : 0;
          var c = _i < binary.length ? binary.charCodeAt(_i++) : 0;
          var bitmap = a << 16 | b << 8 | c;
          result += chars.charAt(bitmap >> 18 & 63);
          result += chars.charAt(bitmap >> 12 & 63);
          result += _i - 2 < binary.length ? chars.charAt(bitmap >> 6 & 63) : '=';
          result += _i - 1 < binary.length ? chars.charAt(bitmap & 63) : '=';
        }
        return result;
      }
    }
  }, {
    key: "base64ToArrayBuffer",
    value: function base64ToArrayBuffer(base64) {
      try {
        throw new Error('Skipping Buffer - using pure JS implementation');
      } catch (_unused5) {
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        var bufferLength = base64.length * 0.75;
        var len = base64.length;
        var i = 0;
        var p = 0;
        var encoded1, encoded2, encoded3, encoded4;
        if (base64[base64.length - 1] === '=') bufferLength--;
        if (base64[base64.length - 2] === '=') bufferLength--;
        var bytes = new Uint8Array(bufferLength);
        for (i = 0; i < len; i += 4) {
          encoded1 = chars.indexOf(base64[i]);
          encoded2 = chars.indexOf(base64[i + 1]);
          encoded3 = chars.indexOf(base64[i + 2]);
          encoded4 = chars.indexOf(base64[i + 3]);
          bytes[p++] = encoded1 << 2 | encoded2 >> 4;
          if (encoded3 !== 64) bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
          if (encoded4 !== 64) bytes[p++] = (encoded3 & 3) << 6 | encoded4;
        }
        return bytes.buffer;
      }
    }
  }, {
    key: "utf8ToArrayBuffer",
    value: function utf8ToArrayBuffer(str) {
      var encoder = new TextEncoder();
      return encoder.encode(str);
    }
  }, {
    key: "arrayBufferToUtf8",
    value: function arrayBufferToUtf8(buffer) {
      var decoder = new TextDecoder();
      var view = new Uint8Array(buffer);
      return decoder.decode(view);
    }
  }, {
    key: "createHash",
    value: (function () {
      var _createHash = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          return yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, data, {
            encoding: Crypto.CryptoEncoding.HEX
          });
        } catch (error) {
          console.warn('⚠️ Crypto hashing failed, using simple hash');
          var hash = 0;
          for (var i = 0; i < data.length; i++) {
            var char = data.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash;
          }
          return Math.abs(hash).toString(16);
        }
      });
      function createHash(_x6) {
        return _createHash.apply(this, arguments);
      }
      return createHash;
    }())
  }, {
    key: "encryptSensitiveData",
    value: (function () {
      var _encryptSensitiveData = (0, _asyncToGenerator2.default)(function* (data) {
        var timestamp = Date.now();
        try {
          var encryptedResult = yield this.encryptData(data);
          var json = JSON.stringify(data);
          var integrityHash = yield this.createHash(json);
          return {
            encrypted: encryptedResult.ciphertext,
            iv: encryptedResult.iv,
            algorithm: encryptedResult.algorithm,
            version: encryptedResult.version,
            hash: integrityHash,
            timestamp: timestamp
          };
        } catch (error) {
          console.error('❌ AES-256 encryption failed. Data will NOT be stored.', error);
          var err = new Error('ENCRYPTION_FAILED_DO_NOT_STORE');
          err.code = 'ENCRYPTION_FAILED_DO_NOT_STORE';
          throw err;
        }
      });
      function encryptSensitiveData(_x7) {
        return _encryptSensitiveData.apply(this, arguments);
      }
      return encryptSensitiveData;
    }())
  }, {
    key: "decryptSensitiveData",
    value: (function () {
      var _decryptSensitiveData = (0, _asyncToGenerator2.default)(function* (encryptedData) {
        if (encryptedData.algorithm === 'SHA256_FALLBACK') {
          throw new Error('Cannot decrypt hashed data - use SHA256_FALLBACK only as last resort');
        }
        try {
          return yield this.decryptData({
            ciphertext: encryptedData.encrypted,
            iv: encryptedData.iv,
            algorithm: encryptedData.algorithm,
            version: encryptedData.version
          });
        } catch (error) {
          console.error('❌ AES-256 decryption failed:', error);
          throw error;
        }
      });
      function decryptSensitiveData(_x8) {
        return _decryptSensitiveData.apply(this, arguments);
      }
      return decryptSensitiveData;
    }())
  }, {
    key: "maskPII",
    value: function maskPII(data) {
      var masked = Object.assign({}, data);
      if (masked.email && typeof masked.email === 'string') {
        var _masked$email$split = masked.email.split('@'),
          _masked$email$split2 = (0, _slicedToArray2.default)(_masked$email$split, 2),
          local = _masked$email$split2[0],
          domain = _masked$email$split2[1];
        masked.email = `${String(local || '').slice(0, 2)}***@${domain || ''}`;
      }
      if (masked.name && typeof masked.name === 'string') {
        masked.name = `${masked.name.slice(0, 1)}***`;
      }
      if (masked.phone && typeof masked.phone === 'string') {
        masked.phone = masked.phone.slice(0, 3) + '****' + masked.phone.slice(-2);
      }
      return masked;
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!SecureDataService.instance) {
        SecureDataService.instance = new SecureDataService();
      }
      return SecureDataService.instance;
    }
  }]);
}();
SecureDataService.KEY_ID = 'master_encryption_key_v1';
var secureDataService = exports.secureDataService = SecureDataService.getInstance();
var _default = exports.default = secureDataService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,