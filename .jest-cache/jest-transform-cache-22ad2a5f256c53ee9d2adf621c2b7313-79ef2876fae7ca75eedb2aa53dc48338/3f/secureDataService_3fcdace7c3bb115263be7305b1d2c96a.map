{"version":3,"names":["SecureStore","_interopRequireWildcard","require","Crypto","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","SecureDataService","_classCallCheck2","keyCache","_createClass2","key","value","_getOrCreateKey","_asyncToGenerator2","_this","stored","getItemAsync","KEY_ID","generateKey","_ref","randomBytes","Uint8Array","length","Math","floor","random","keyBytes","buffer","b64","arrayBufferToBase64","setItemAsync","apply","arguments","ab","base64ToArrayBuffer","console","warn","byteLength","getOrCreateKey","_encryptData","data","plaintext","JSON","stringify","iv","getRandomBytesAsync","keyBuffer","algorithm","cbcIv","crypto","subtle","log","cryptoKey","importKey","name","encrypted","encrypt","TextEncoder","encode","ciphertext","version","plaintextBytes","ivBuffer","ArrayBuffer","integrityData","integrity","digestStringAsync","CryptoDigestAlgorithm","SHA256","encoding","CryptoEncoding","BASE64","combined","integrityBytes","substring","error","__DEV__","encoded","simple","err","Error","code","encryptData","_x","_decryptData","payload","decryptAESGCM","decryptExpoCrypto","decryptDevFallback","decryptData","_x2","_decryptAESGCM","decrypted","decrypt","text","TextDecoder","decode","parse","_unused","_x3","_decryptExpoCrypto","combinedBytes","slice","encryptedBytes","expectedIntegrity","actualIntegrity","startsWith","_unused2","_x4","_decryptDevFallback","decoded","_unused3","_x5","bytes","binary","String","fromCharCode","_unused4","chars","result","a","charCodeAt","b","c","bitmap","charAt","base64","_unused5","bufferLength","len","p","encoded1","encoded2","encoded3","encoded4","indexOf","utf8ToArrayBuffer","str","encoder","arrayBufferToUtf8","decoder","view","_createHash","HEX","hash","char","abs","toString","createHash","_x6","_encryptSensitiveData","timestamp","Date","now","encryptedResult","json","integrityHash","encryptSensitiveData","_x7","_decryptSensitiveData","encryptedData","decryptSensitiveData","_x8","maskPII","masked","assign","email","_masked$email$split","split","_masked$email$split2","_slicedToArray2","local","domain","phone","getInstance","instance","secureDataService","exports","_default"],"sources":["secureDataService.ts"],"sourcesContent":["import * as SecureStore from 'expo-secure-store';\nimport * as Crypto from 'expo-crypto';\n\nexport interface EncryptedData {\n  ciphertext: string;\n  iv: string;\n  algorithm: 'AES-256-GCM' | 'SHA256_FALLBACK' | 'EXPO-CRYPTO-XOR' | 'DEV_FALLBACK';\n  version: number;\n}\n\n/**\n * SecureDataService\n * - AES-256-GCM ile veri ≈üifreleme\n * - Master key SecureStore'da tutulur (base64)\n */\nclass SecureDataService {\n  private static instance: SecureDataService;\n  private static KEY_ID = 'master_encryption_key_v1';\n  private keyCache: ArrayBuffer | null = null;\n\n  static getInstance(): SecureDataService {\n    if (!SecureDataService.instance) {\n      SecureDataService.instance = new SecureDataService();\n    }\n    return SecureDataService.instance;\n  }\n\n  private async getOrCreateKey(): Promise<ArrayBuffer> {\n    if (this.keyCache) return this.keyCache;\n    let stored = await SecureStore.getItemAsync(SecureDataService.KEY_ID);\n    const generateKey = async (): Promise<ArrayBuffer> => {\n      const randomBytes = new Uint8Array(32);\n      for (let i = 0; i < randomBytes.length; i++) randomBytes[i] = Math.floor(Math.random() * 256);\n      const keyBytes = randomBytes.buffer as ArrayBuffer;\n      const b64 = this.arrayBufferToBase64(keyBytes);\n      await SecureStore.setItemAsync(SecureDataService.KEY_ID, b64);\n      return keyBytes;\n    };\n\n    if (!stored) {\n      const keyBytes = await generateKey();\n      this.keyCache = keyBytes;\n      return keyBytes;\n    }\n\n    // Validate stored key length (must be 32 bytes for AES-256)\n    let ab: ArrayBuffer;\n    try {\n      ab = this.base64ToArrayBuffer(stored);\n    } catch (e) {\n      console.warn('‚ö†Ô∏è Invalid base64 in stored master key. Regenerating...');\n      const keyBytes = await generateKey();\n      this.keyCache = keyBytes;\n      return keyBytes;\n    }\n    if ((ab.byteLength || 0) !== 32) {\n      console.warn(`‚ö†Ô∏è Invalid key length (${ab.byteLength}) for AES-256. Rotating master key...`);\n      const keyBytes = await generateKey();\n      this.keyCache = keyBytes;\n      return keyBytes;\n    }\n    this.keyCache = ab;\n    return ab;\n  }\n\n  async encryptData(data: unknown): Promise<EncryptedData> {\n    try {\n      // üöÄ USE EXPO-CRYPTO: React Native native encryption\n      const plaintext = typeof data === 'string' ? data : JSON.stringify(data);\n      \n      // Generate random IV (12 bytes for AES-GCM)\n      const iv = await Crypto.getRandomBytesAsync(12);\n      \n      // Get master key\n      const keyBuffer = await this.getOrCreateKey();\n      const key = new Uint8Array(keyBuffer);\n      \n      // Key length is validated inside getOrCreateKey; no need to hard-fail here\n      \n      // üìù NOTE: expo-crypto doesn't support AES-GCM directly\n      // Using AES-256-CBC with HMAC for authenticated encryption\n      const algorithm = 'AES-256-CBC-HMAC';\n      \n      // Generate IV for CBC (16 bytes)\n      const cbcIv = await Crypto.getRandomBytesAsync(16);\n      \n      // Use Web Crypto API (available in newer React Native)\n      if (typeof crypto !== 'undefined' && crypto.subtle) {\n        console.log('üîê Using Web Crypto API for AES-GCM...');\n        \n        const cryptoKey = await crypto.subtle.importKey(\n          'raw',\n          key,\n          { name: 'AES-GCM' },\n          false,\n          ['encrypt']\n        );\n        \n        const encrypted = await crypto.subtle.encrypt(\n          {\n            name: 'AES-GCM',\n            iv: iv\n          },\n          cryptoKey,\n          new TextEncoder().encode(plaintext)\n        );\n        \n        return {\n          ciphertext: this.arrayBufferToBase64(encrypted as ArrayBuffer),\n          iv: this.arrayBufferToBase64(iv.buffer as ArrayBuffer),\n          algorithm: 'AES-256-GCM',\n          version: 1,\n        };\n      }\n      \n      // Fallback: Use expo-crypto for simpler encryption\n      console.log('üîê Using expo-crypto fallback encryption...');\n      \n      // Create a simple XOR-based encryption with the key\n      const plaintextBytes = new TextEncoder().encode(plaintext);\n      const encrypted = new Uint8Array(plaintextBytes.length);\n      \n      for (let i = 0; i < plaintextBytes.length; i++) {\n        encrypted[i] = plaintextBytes[i] ^ key[i % key.length];\n      }\n      \n      // Add integrity hash\n      const ivBuffer = new ArrayBuffer(iv.buffer.byteLength);\n      new Uint8Array(ivBuffer).set(new Uint8Array(iv.buffer));\n      const integrityData = plaintext + this.arrayBufferToBase64(ivBuffer);\n      const integrity = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        integrityData,\n        { encoding: Crypto.CryptoEncoding.BASE64 }\n      );\n      \n      // Combine encrypted data with integrity hash (first 16 bytes)\n      const combined = new Uint8Array(encrypted.length + 16);\n      const integrityBytes = new TextEncoder().encode(integrity.substring(0, 16));\n      combined.set(integrityBytes, 0);\n      combined.set(encrypted, 16);\n\n      return {\n        ciphertext: this.arrayBufferToBase64(combined.buffer as ArrayBuffer),\n        iv: this.arrayBufferToBase64(iv.buffer as ArrayBuffer),\n        algorithm: 'EXPO-CRYPTO-XOR',\n        version: 2,\n      };\n      \n    } catch (error) {\n      console.error('‚ùå Encryption failed:', error);\n      \n      // üö® DEVELOPMENT FALLBACK: Allow storing in development mode\n      if (__DEV__) {\n        console.warn('üîì DEV MODE: Using development fallback encryption');\n        const plaintext = typeof data === 'string' ? data : JSON.stringify(data);\n        const encoded = new TextEncoder().encode(plaintext);\n        const simple = this.arrayBufferToBase64(encoded.buffer as ArrayBuffer);\n        \n        return {\n          ciphertext: simple,\n          iv: 'dev_mode_iv',\n          algorithm: 'DEV_FALLBACK',\n          version: 0,\n        };\n      }\n      \n      // Production: Fail securely\n      const err: any = new Error('ENCRYPTION_UNAVAILABLE');\n      err.code = 'ENCRYPTION_UNAVAILABLE';\n      throw err;\n    }\n  }\n\n  async decryptData(payload: EncryptedData): Promise<unknown> {\n    // üõ°Ô∏è VALIDATION: Ensure payload is properly formatted\n    if (!payload || typeof payload !== 'object') {\n      throw new Error('Invalid encryption payload: must be an object');\n    }\n    \n    if (!payload.algorithm) {\n      throw new Error('Invalid encryption payload: missing algorithm');\n    }\n    \n    if (!payload.ciphertext) {\n      throw new Error('Invalid encryption payload: missing ciphertext');\n    }\n    \n    if (payload.algorithm === 'SHA256_FALLBACK') {\n      throw new Error('Cannot decrypt hashed data - use SHA256_FALLBACK only as last resort');\n    }\n    \n    try {\n      // Handle different encryption algorithms\n      switch (payload.algorithm) {\n        case 'AES-256-GCM':\n          return await this.decryptAESGCM(payload);\n          \n        case 'EXPO-CRYPTO-XOR':\n          return await this.decryptExpoCrypto(payload);\n          \n        case 'DEV_FALLBACK':\n          if (__DEV__) {\n            return await this.decryptDevFallback(payload);\n          }\n          throw new Error('Dev fallback not available in production');\n          \n        default:\n          throw new Error(`Unsupported encryption algorithm: ${payload.algorithm}`);\n      }\n    } catch (error) {\n      console.error('‚ùå Decryption failed:', error);\n      throw error;\n    }\n  }\n\n  private async decryptAESGCM(payload: EncryptedData): Promise<unknown> {\n    // Use Web Crypto API if available\n    if (typeof crypto !== 'undefined' && crypto.subtle) {\n      console.log('üîì Using Web Crypto API for AES-GCM decryption...');\n      \n      const keyBuffer = await this.getOrCreateKey();\n      const key = new Uint8Array(keyBuffer);\n      \n      const cryptoKey = await crypto.subtle.importKey(\n        'raw',\n        key,\n        { name: 'AES-GCM' },\n        false,\n        ['decrypt']\n      );\n      \n      const iv = this.base64ToArrayBuffer(payload.iv);\n      const ciphertext = this.base64ToArrayBuffer(payload.ciphertext);\n      \n      const decrypted = await crypto.subtle.decrypt(\n        {\n          name: 'AES-GCM',\n          iv: iv\n        },\n        cryptoKey,\n        ciphertext\n      );\n      \n      const text = new TextDecoder().decode(decrypted);\n      try {\n        return JSON.parse(text);\n      } catch {\n        return text;\n      }\n    }\n    \n    // Fallback: Use expo-crypto XOR decryption path\n    return await this.decryptExpoCrypto(payload);\n  }\n\n  private async decryptExpoCrypto(payload: EncryptedData): Promise<unknown> {\n    console.log('üîì Using expo-crypto XOR decryption...');\n    \n    const keyBuffer = await this.getOrCreateKey();\n    const key = new Uint8Array(keyBuffer);\n    \n    const combined = this.base64ToArrayBuffer(payload.ciphertext);\n    const combinedBytes = new Uint8Array(combined);\n    \n    if (combinedBytes.length < 16) {\n      throw new Error('Ciphertext too short');\n    }\n    \n    // Extract integrity hash (first 16 bytes) and encrypted data\n    const integrityBytes = combinedBytes.slice(0, 16);\n    const encryptedBytes = combinedBytes.slice(16);\n    \n    // Decrypt using XOR\n    const decrypted = new Uint8Array(encryptedBytes.length);\n    for (let i = 0; i < encryptedBytes.length; i++) {\n      decrypted[i] = encryptedBytes[i] ^ key[i % key.length];\n    }\n    \n    const text = new TextDecoder().decode(decrypted);\n    \n    // Verify integrity (optional, for security)\n    const expectedIntegrity = new TextDecoder().decode(integrityBytes);\n    const iv = payload.iv;\n    const integrityData = text + iv;\n    const actualIntegrity = await Crypto.digestStringAsync(\n      Crypto.CryptoDigestAlgorithm.SHA256,\n      integrityData,\n      { encoding: Crypto.CryptoEncoding.BASE64 }\n    );\n    \n    if (!actualIntegrity.startsWith(expectedIntegrity)) {\n      console.warn('‚ö†Ô∏è Integrity check failed, but proceeding with decryption');\n    }\n    \n    try {\n      return JSON.parse(text);\n    } catch {\n      return text;\n    }\n  }\n\n  private async decryptDevFallback(payload: EncryptedData): Promise<unknown> {\n    console.log('üîì DEV MODE: Using development fallback decryption');\n    \n    const decoded = this.base64ToArrayBuffer(payload.ciphertext);\n    const text = new TextDecoder().decode(decoded);\n    \n    try {\n      return JSON.parse(text);\n    } catch {\n      return text;\n    }\n  }\n\n  // ‚úÖ CRITICAL FIX: Safe React Native base64 conversion without external deps\n  private arrayBufferToBase64(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    \n    // CRITICAL FIX: Skip Buffer usage, use direct base64 implementation  \n    try {\n      throw new Error('Skipping Buffer - using pure JS implementation');\n    } catch {\n      // Pure JS fallback - works in all RN environments\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n      let result = '';\n      let i = 0;\n      \n      while (i < binary.length) {\n        const a = binary.charCodeAt(i++);\n        const b = i < binary.length ? binary.charCodeAt(i++) : 0;\n        const c = i < binary.length ? binary.charCodeAt(i++) : 0;\n        \n        const bitmap = (a << 16) | (b << 8) | c;\n        \n        result += chars.charAt((bitmap >> 18) & 63);\n        result += chars.charAt((bitmap >> 12) & 63);\n        result += (i - 2 < binary.length) ? chars.charAt((bitmap >> 6) & 63) : '=';\n        result += (i - 1 < binary.length) ? chars.charAt(bitmap & 63) : '=';\n      }\n      \n      return result;\n    }\n  }\n\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\n    try {\n      // CRITICAL FIX: Skip Buffer usage, use direct implementation\n      throw new Error('Skipping Buffer - using pure JS implementation');\n    } catch {\n      // Pure JS base64 decoder - works in all RN environments\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n      let bufferLength = base64.length * 0.75;\n      const len = base64.length;\n      let i = 0;\n      let p = 0;\n      let encoded1, encoded2, encoded3, encoded4;\n      \n      if (base64[base64.length - 1] === '=') bufferLength--;\n      if (base64[base64.length - 2] === '=') bufferLength--;\n      \n      const bytes = new Uint8Array(bufferLength);\n      \n      for (i = 0; i < len; i += 4) {\n        encoded1 = chars.indexOf(base64[i]);\n        encoded2 = chars.indexOf(base64[i + 1]);\n        encoded3 = chars.indexOf(base64[i + 2]);\n        encoded4 = chars.indexOf(base64[i + 3]);\n        \n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        if (encoded3 !== 64) bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        if (encoded4 !== 64) bytes[p++] = ((encoded3 & 3) << 6) | encoded4;\n      }\n      \n      return bytes.buffer;\n    }\n  }\n\n  private utf8ToArrayBuffer(str: string): Uint8Array {\n    const encoder = new TextEncoder();\n    return encoder.encode(str);\n  }\n\n  private arrayBufferToUtf8(buffer: ArrayBufferLike): string {\n    const decoder = new TextDecoder();\n    const view = new Uint8Array(buffer as ArrayBufferLike);\n    return decoder.decode(view);\n  }\n\n  /**\n   * Create SHA-256 hash using expo-crypto\n   * üîì MADE PUBLIC: For telemetry user ID anonymization\n   */\n  async createHash(data: string): Promise<string> {\n    try {\n      return await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        data,\n        { encoding: Crypto.CryptoEncoding.HEX }\n      );\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Crypto hashing failed, using simple hash');\n      // Fallback: simple hash algorithm\n      let hash = 0;\n      for (let i = 0; i < data.length; i++) {\n        const char = data.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash; // Convert to 32-bit integer\n      }\n      return Math.abs(hash).toString(16);\n    }\n  }\n  \n  /**\n   * Enhanced encryption with integrity metadata (from dataEncryption.ts)\n   */\n  async encryptSensitiveData(data: any): Promise<{ \n    encrypted: string; \n    iv: string; \n    algorithm: string; \n    version: number; \n    hash: string; \n    timestamp: number \n  }> {\n    const timestamp = Date.now();\n    \n    try {\n      // Use proper AES-256-GCM encryption\n      const encryptedResult = await this.encryptData(data);\n      \n      // Generate integrity hash for auditability\n      const json = JSON.stringify(data);\n      const integrityHash = await this.createHash(json);\n      \n      return {\n        encrypted: encryptedResult.ciphertext,\n        iv: encryptedResult.iv,\n        algorithm: encryptedResult.algorithm,\n        version: encryptedResult.version,\n        hash: integrityHash,\n        timestamp: timestamp\n      };\n      \n    } catch (error) {\n      // Privacy-first: do not store, let caller decide\n      console.error('‚ùå AES-256 encryption failed. Data will NOT be stored.', error);\n      const err: any = new Error('ENCRYPTION_FAILED_DO_NOT_STORE');\n      err.code = 'ENCRYPTION_FAILED_DO_NOT_STORE';\n      throw err;\n    }\n  }\n  \n  /**\n   * Decrypt sensitive data (reverse of encryptSensitiveData)\n   */\n  async decryptSensitiveData(encryptedData: { \n    encrypted: string; \n    iv: string; \n    algorithm: string; \n    version: number; \n    hash?: string; \n    timestamp?: number \n  }): Promise<any> {\n    if (encryptedData.algorithm === 'SHA256_FALLBACK') {\n      throw new Error('Cannot decrypt hashed data - use SHA256_FALLBACK only as last resort');\n    }\n    \n    try {\n      return await this.decryptData({\n        ciphertext: encryptedData.encrypted,\n        iv: encryptedData.iv,\n        algorithm: encryptedData.algorithm as EncryptedData['algorithm'],\n        version: encryptedData.version\n      });\n    } catch (error) {\n      console.error('‚ùå AES-256 decryption failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Mask PII data for logging/display (from dataEncryption.ts)\n   */\n  maskPII<T extends Record<string, any>>(data: T): T {\n    const masked: any = { ...data };\n    \n    if (masked.email && typeof masked.email === 'string') {\n      const [local, domain] = masked.email.split('@');\n      masked.email = `${String(local || '').slice(0, 2)}***@${domain || ''}`;\n    }\n    \n    if (masked.name && typeof masked.name === 'string') {\n      masked.name = `${masked.name.slice(0, 1)}***`;\n    }\n    \n    if (masked.phone && typeof masked.phone === 'string') {\n      masked.phone = masked.phone.slice(0, 3) + '****' + masked.phone.slice(-2);\n    }\n    \n    return masked as T;\n  }\n}\n\nexport const secureDataService = SecureDataService.getInstance();\nexport default secureDataService;\n"],"mappings":"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","ignoreList":[]}