532bb982b8a1d0d85e0ddf3af46f1465
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TurboModuleRegistry = _interopRequireWildcard(require("../../../../Libraries/TurboModule/TurboModuleRegistry"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
  getConstants: function getConstants() {
    if (constants == null) {
      constants = NativeModule.getConstants();
    }
    return constants;
  },
  getHeight: function getHeight(callback) {
    NativeModule.getHeight(callback);
  },
  setNetworkActivityIndicatorVisible: function setNetworkActivityIndicatorVisible(visible) {
    NativeModule.setNetworkActivityIndicatorVisible(visible);
  },
  addListener: function addListener(eventType) {
    NativeModule.addListener(eventType);
  },
  removeListeners: function removeListeners(count) {
    NativeModule.removeListeners(count);
  },
  setStyle: function setStyle(statusBarStyle, animated) {
    NativeModule.setStyle(statusBarStyle, animated);
  },
  setHidden: function setHidden(hidden, withAnimation) {
    NativeModule.setHidden(hidden, withAnimation);
  }
};
var _default = exports.default = NativeStatusBarManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJOYXRpdmVNb2R1bGUiLCJnZXRFbmZvcmNpbmciLCJjb25zdGFudHMiLCJOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyIiwiZ2V0Q29uc3RhbnRzIiwiZ2V0SGVpZ2h0IiwiY2FsbGJhY2siLCJzZXROZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlIiwidmlzaWJsZSIsImFkZExpc3RlbmVyIiwiZXZlbnRUeXBlIiwicmVtb3ZlTGlzdGVuZXJzIiwiY291bnQiLCJzZXRTdHlsZSIsInN0YXR1c0JhclN0eWxlIiwiYW5pbWF0ZWQiLCJzZXRIaWRkZW4iLCJoaWRkZW4iLCJ3aXRoQW5pbWF0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTmF0aXZlU3RhdHVzQmFyTWFuYWdlcklPUy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1R1cmJvTW9kdWxlfSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVHVyYm9Nb2R1bGUvUkNURXhwb3J0JztcblxuaW1wb3J0ICogYXMgVHVyYm9Nb2R1bGVSZWdpc3RyeSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVHVyYm9Nb2R1bGUvVHVyYm9Nb2R1bGVSZWdpc3RyeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlYyBleHRlbmRzIFR1cmJvTW9kdWxlIHtcbiAgK2dldENvbnN0YW50czogKCkgPT4ge1xuICAgICtIRUlHSFQ6IG51bWJlcixcbiAgICArREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SPzogbnVtYmVyLFxuICB9O1xuXG4gIC8vIFRPRE8oVDQ3NzU0MjcyKSBDYW4gd2UgcmVtb3ZlIHRoaXMgbWV0aG9kP1xuICArZ2V0SGVpZ2h0OiAoY2FsbGJhY2s6IChyZXN1bHQ6IHtoZWlnaHQ6IG51bWJlcn0pID0+IHZvaWQpID0+IHZvaWQ7XG4gICtzZXROZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlOiAodmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgK2FkZExpc3RlbmVyOiAoZXZlbnRUeXBlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICtyZW1vdmVMaXN0ZW5lcnM6IChjb3VudDogbnVtYmVyKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiAgLSBzdGF0dXNCYXJTdHlsZXMgY2FuIGJlOlxuICAgKiAgICAtICdkZWZhdWx0J1xuICAgKiAgICAtICdkYXJrLWNvbnRlbnQnXG4gICAqICAgIC0gJ2xpZ2h0LWNvbnRlbnQnXG4gICAqL1xuICArc2V0U3R5bGU6IChzdGF0dXNCYXJTdHlsZT86ID9zdHJpbmcsIGFuaW1hdGVkOiBib29sZWFuKSA9PiB2b2lkO1xuICAvKipcbiAgICogIC0gd2l0aEFuaW1hdGlvbiBjYW4gYmU6ICdub25lJyB8ICdmYWRlJyB8ICdzbGlkZSdcbiAgICovXG4gICtzZXRIaWRkZW46IChoaWRkZW46IGJvb2xlYW4sIHdpdGhBbmltYXRpb246IHN0cmluZykgPT4gdm9pZDtcbn1cblxuY29uc3QgTmF0aXZlTW9kdWxlID0gVHVyYm9Nb2R1bGVSZWdpc3RyeS5nZXRFbmZvcmNpbmc8U3BlYz4oJ1N0YXR1c0Jhck1hbmFnZXInKTtcbmxldCBjb25zdGFudHMgPSBudWxsO1xuXG5jb25zdCBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyID0ge1xuICBnZXRDb25zdGFudHMoKToge1xuICAgICtIRUlHSFQ6IG51bWJlcixcbiAgICArREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SPzogbnVtYmVyLFxuICB9IHtcbiAgICBpZiAoY29uc3RhbnRzID09IG51bGwpIHtcbiAgICAgIGNvbnN0YW50cyA9IE5hdGl2ZU1vZHVsZS5nZXRDb25zdGFudHMoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0YW50cztcbiAgfSxcblxuICAvLyBUT0RPKFQ0Nzc1NDI3MikgQ2FuIHdlIHJlbW92ZSB0aGlzIG1ldGhvZD9cbiAgZ2V0SGVpZ2h0KGNhbGxiYWNrOiAocmVzdWx0OiB7aGVpZ2h0OiBudW1iZXJ9KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLmdldEhlaWdodChjYWxsYmFjayk7XG4gIH0sXG5cbiAgc2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZSh2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUodmlzaWJsZSk7XG4gIH0sXG5cbiAgYWRkTGlzdGVuZXIoZXZlbnRUeXBlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBOYXRpdmVNb2R1bGUuYWRkTGlzdGVuZXIoZXZlbnRUeXBlKTtcbiAgfSxcblxuICByZW1vdmVMaXN0ZW5lcnMoY291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIE5hdGl2ZU1vZHVsZS5yZW1vdmVMaXN0ZW5lcnMoY291bnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgLSBzdGF0dXNCYXJTdHlsZXMgY2FuIGJlOlxuICAgKiAgICAtICdkZWZhdWx0J1xuICAgKiAgICAtICdkYXJrLWNvbnRlbnQnXG4gICAqICAgIC0gJ2xpZ2h0LWNvbnRlbnQnXG4gICAqL1xuICBzZXRTdHlsZShzdGF0dXNCYXJTdHlsZT86ID9zdHJpbmcsIGFuaW1hdGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldFN0eWxlKHN0YXR1c0JhclN0eWxlLCBhbmltYXRlZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICAtIHdpdGhBbmltYXRpb24gY2FuIGJlOiAnbm9uZScgfCAnZmFkZScgfCAnc2xpZGUnXG4gICAqL1xuICBzZXRIaWRkZW4oaGlkZGVuOiBib29sZWFuLCB3aXRoQW5pbWF0aW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBOYXRpdmVNb2R1bGUuc2V0SGlkZGVuKGhpZGRlbiwgd2l0aEFuaW1hdGlvbik7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBWUEsSUFBQUEsbUJBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUE2RixTQUFBRCx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUosdUJBQUEsWUFBQUEsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBMkI3RixJQUFNbUIsWUFBWSxHQUFHdkIsbUJBQW1CLENBQUN3QixZQUFZLENBQU8sa0JBQWtCLENBQUM7QUFDL0UsSUFBSUMsU0FBUyxHQUFHLElBQUk7QUFFcEIsSUFBTUMsc0JBQXNCLEdBQUc7RUFDN0JDLFlBQVksV0FBWkEsWUFBWUEsQ0FBQSxFQUdWO0lBQ0EsSUFBSUYsU0FBUyxJQUFJLElBQUksRUFBRTtNQUNyQkEsU0FBUyxHQUFHRixZQUFZLENBQUNJLFlBQVksQ0FBQyxDQUFDO0lBQ3pDO0lBQ0EsT0FBT0YsU0FBUztFQUNsQixDQUFDO0VBR0RHLFNBQVMsV0FBVEEsU0FBU0EsQ0FBQ0MsUUFBNEMsRUFBUTtJQUM1RE4sWUFBWSxDQUFDSyxTQUFTLENBQUNDLFFBQVEsQ0FBQztFQUNsQyxDQUFDO0VBRURDLGtDQUFrQyxXQUFsQ0Esa0NBQWtDQSxDQUFDQyxPQUFnQixFQUFRO0lBQ3pEUixZQUFZLENBQUNPLGtDQUFrQyxDQUFDQyxPQUFPLENBQUM7RUFDMUQsQ0FBQztFQUVEQyxXQUFXLFdBQVhBLFdBQVdBLENBQUNDLFNBQWlCLEVBQVE7SUFDbkNWLFlBQVksQ0FBQ1MsV0FBVyxDQUFDQyxTQUFTLENBQUM7RUFDckMsQ0FBQztFQUVEQyxlQUFlLFdBQWZBLGVBQWVBLENBQUNDLEtBQWEsRUFBUTtJQUNuQ1osWUFBWSxDQUFDVyxlQUFlLENBQUNDLEtBQUssQ0FBQztFQUNyQyxDQUFDO0VBUURDLFFBQVEsV0FBUkEsUUFBUUEsQ0FBQ0MsY0FBd0IsRUFBRUMsUUFBaUIsRUFBUTtJQUMxRGYsWUFBWSxDQUFDYSxRQUFRLENBQUNDLGNBQWMsRUFBRUMsUUFBUSxDQUFDO0VBQ2pELENBQUM7RUFLREMsU0FBUyxXQUFUQSxTQUFTQSxDQUFDQyxNQUFlLEVBQUVDLGFBQXFCLEVBQVE7SUFDdERsQixZQUFZLENBQUNnQixTQUFTLENBQUNDLE1BQU0sRUFBRUMsYUFBYSxDQUFDO0VBQy9DO0FBQ0YsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBOUIsT0FBQSxHQUVhYSxzQkFBc0IiLCJpZ25vcmVMaXN0IjpbXX0=