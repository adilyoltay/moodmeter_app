45e2d57aa25cf00a37bbab583764baeb
_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('expo-task-manager');
_getJestObj().mock('expo-background-fetch');
_getJestObj().mock("../../../features/ai/telemetry/aiTelemetry");
_getJestObj().mock("../../../services/supabase", function () {
  return {
    default: {
      getMoodEntries: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _dailyJobs = require("../../../features/ai/batch/dailyJobs");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var TaskManager = _interopRequireWildcard(require("expo-task-manager"));
var BackgroundFetch = _interopRequireWildcard(require("expo-background-fetch"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('DailyJobsManager', function () {
  var manager;
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    manager = _dailyJobs.DailyJobsManager.getInstance();
    TaskManager.isTaskRegisteredAsync.mockResolvedValue(false);
    BackgroundFetch.registerTaskAsync.mockResolvedValue(undefined);
    yield manager.initialize();
  }));
  afterEach(function () {
    jest.resetAllMocks();
  });
  describe('Initialization', function () {
    it('should register background task on initialization', (0, _asyncToGenerator2.default)(function* () {
      expect(BackgroundFetch.registerTaskAsync).toHaveBeenCalledWith('AI_DAILY_BATCH_JOBS', expect.objectContaining({
        minimumInterval: 60 * 60 * 12,
        stopOnTerminate: false,
        startOnBoot: true
      }));
    }));
    it('should not re-register if already registered', (0, _asyncToGenerator2.default)(function* () {
      TaskManager.isTaskRegisteredAsync.mockResolvedValue(true);
      var newManager = _dailyJobs.DailyJobsManager.getInstance();
      yield newManager.initialize();
      expect(BackgroundFetch.registerTaskAsync).not.toHaveBeenCalled();
    }));
    it('should run catch-up if last run >24h ago', (0, _asyncToGenerator2.default)(function* () {
      var yesterday = Date.now() - 25 * 60 * 60 * 1000;
      _asyncStorage.default.getItem.mockResolvedValue(yesterday.toString());
      var runSpy = jest.spyOn(manager, 'runAllJobs');
      yield manager.initialize();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 6000);
      });
      expect(runSpy).toHaveBeenCalled();
    }));
  });
  describe('Trend Analysis', function () {
    it('should calculate 7-day trends correctly', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'test-user';
      var mockCompulsions = [{
        date: '2024-01-01',
        count: 10,
        avgResistance: 5
      }, {
        date: '2024-01-02',
        count: 9,
        avgResistance: 5.5
      }, {
        date: '2024-01-03',
        count: 8,
        avgResistance: 6
      }, {
        date: '2024-01-04',
        count: 7,
        avgResistance: 6.5
      }, {
        date: '2024-01-05',
        count: 6,
        avgResistance: 7
      }, {
        date: '2024-01-06',
        count: 5,
        avgResistance: 7.5
      }, {
        date: '2024-01-07',
        count: 4,
        avgResistance: 8
      }];
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('compulsions')) {
          return Promise.resolve(JSON.stringify(mockCompulsions));
        }
        return Promise.resolve(null);
      });
      var result = yield manager['runTrendAnalysis'](userId);
      expect(result.success).toBe(true);
      expect(result.jobName).toBe('TrendAnalysis');
      expect(result.metrics).toBeDefined();
    }));
    it('should generate insights for positive trends', (0, _asyncToGenerator2.default)(function* () {
      var trends = {
        period: '7d',
        metrics: {
          compulsionTrend: -0.3,
          moodTrend: 0.2,
          resistanceTrend: 0.4
        },
        insights: []
      };
      if (trends.metrics.compulsionTrend < -0.2) {
        trends.insights.push('Kompulsiyonlarında son 7 günde azalma var, harika gidiyorsun!');
      }
      if (trends.metrics.resistanceTrend > 0.3) {
        trends.insights.push('Direnç gücün artıyor, bu çok değerli bir ilerleme');
      }
      expect(trends.insights).toHaveLength(2);
      expect(trends.insights[0]).toContain('harika');
      expect(trends.insights[1]).toContain('değerli');
    }));
    it('should handle insufficient data gracefully', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'new-user';
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var result = yield manager['runTrendAnalysis'](userId);
      expect(result.success).toBe(true);
      expect(result.metrics).toBeDefined();
    }));
  });
  describe('Mood Analysis', function () {
    it('should apply exponential smoothing correctly', function () {
      var values = [50, 60, 55, 70, 45, 65, 50];
      var alpha = 0.3;
      var smoothed = manager['exponentialSmoothing'](values, alpha);
      expect(smoothed).toHaveLength(values.length);
      expect(smoothed[0]).toBe(values[0]);
      for (var i = 1; i < values.length; i++) {
        var expected = alpha * values[i] + (1 - alpha) * smoothed[i - 1];
        expect(smoothed[i]).toBeCloseTo(expected, 2);
      }
    });
    it('should detect outliers using IQR method', function () {
      var values = [50, 52, 48, 51, 49, 95, 10, 50, 51];
      var outliers = manager['detectOutliers'](values);
      expect(outliers).toContain(5);
      expect(outliers).toContain(6);
    });
    it('should skip analysis with insufficient data', (0, _asyncToGenerator2.default)(function* () {
      var _result$metrics, _result$metrics2;
      var userId = 'test-user';
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify([{
        date: '2024-01-01',
        value: 50,
        count: 1
      }, {
        date: '2024-01-02',
        value: 60,
        count: 1
      }]));
      var result = yield manager['runMoodAnalysis'](userId);
      expect(result.success).toBe(true);
      expect((_result$metrics = result.metrics) == null ? void 0 : _result$metrics.skipped).toBe(true);
      expect((_result$metrics2 = result.metrics) == null ? void 0 : _result$metrics2.reason).toBe('Insufficient data');
    }));
  });
  describe('Risk Update', function () {
    it('should increase risk on negative trends', (0, _asyncToGenerator2.default)(function* () {
      var _result$metrics3;
      var userId = 'test-user';
      var mockCompulsions = [{
        date: '2024-01-01',
        count: 5,
        avgResistance: 6
      }, {
        date: '2024-01-02',
        count: 7,
        avgResistance: 5
      }, {
        date: '2024-01-03',
        count: 10,
        avgResistance: 4
      }];
      var mockERP = [{
        date: '2024-01-01',
        completed: false,
        difficulty: 5
      }, {
        date: '2024-01-02',
        completed: false,
        difficulty: 5
      }, {
        date: '2024-01-03',
        completed: true,
        difficulty: 5
      }];
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('compulsions')) {
          return Promise.resolve(JSON.stringify(mockCompulsions));
        }
        if (key.includes('erp')) {
          return Promise.resolve(JSON.stringify(mockERP));
        }
        if (key.includes('settings')) {
          return Promise.resolve(JSON.stringify({
            riskScore: 0.5
          }));
        }
        return Promise.resolve(null);
      });
      var result = yield manager['runRiskUpdate'](userId);
      expect(result.success).toBe(true);
      expect((_result$metrics3 = result.metrics) == null ? void 0 : _result$metrics3.delta).toBeGreaterThan(0);
    }));
    it('should decrease risk on positive trends', (0, _asyncToGenerator2.default)(function* () {
      var _result$metrics4;
      var userId = 'test-user';
      var mockCompulsions = [{
        date: '2024-01-01',
        count: 10,
        avgResistance: 4
      }, {
        date: '2024-01-02',
        count: 7,
        avgResistance: 5
      }, {
        date: '2024-01-03',
        count: 5,
        avgResistance: 6
      }];
      var mockERP = [{
        date: '2024-01-01',
        completed: true,
        difficulty: 5
      }, {
        date: '2024-01-02',
        completed: true,
        difficulty: 5
      }, {
        date: '2024-01-03',
        completed: true,
        difficulty: 6
      }];
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('compulsions')) {
          return Promise.resolve(JSON.stringify(mockCompulsions));
        }
        if (key.includes('erp')) {
          return Promise.resolve(JSON.stringify(mockERP));
        }
        if (key.includes('settings')) {
          return Promise.resolve(JSON.stringify({
            riskScore: 0.5
          }));
        }
        return Promise.resolve(null);
      });
      var result = yield manager['runRiskUpdate'](userId);
      expect(result.success).toBe(true);
      expect((_result$metrics4 = result.metrics) == null ? void 0 : _result$metrics4.delta).toBeLessThan(0);
    }));
    it('should only update if delta ≥ 0.15', (0, _asyncToGenerator2.default)(function* () {
      var _result$metrics5;
      var userId = 'test-user';
      var mockCompulsions = [{
        date: '2024-01-01',
        count: 5,
        avgResistance: 5
      }, {
        date: '2024-01-02',
        count: 5,
        avgResistance: 5
      }, {
        date: '2024-01-03',
        count: 5,
        avgResistance: 5
      }];
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('compulsions')) {
          return Promise.resolve(JSON.stringify(mockCompulsions));
        }
        if (key.includes('settings')) {
          return Promise.resolve(JSON.stringify({
            riskScore: 0.5
          }));
        }
        return Promise.resolve(null);
      });
      var result = yield manager['runRiskUpdate'](userId);
      expect(result.success).toBe(true);
      expect((_result$metrics5 = result.metrics) == null ? void 0 : _result$metrics5.updated).toBe(false);
    }));
  });
  describe('Today Digest', function () {
    it('should generate comprehensive digest', (0, _asyncToGenerator2.default)(function* () {
      var _result$metrics6, _result$metrics7;
      var userId = 'test-user';
      var today = new Date().toISOString().split('T')[0];
      var mockData = {
        compulsions: [{
          date: today,
          count: 3,
          avgResistance: 7
        }],
        moods: [{
          date: today,
          value: 40,
          count: 1
        }, {
          date: today,
          value: 60,
          count: 1
        }],
        erp: [{
          date: today,
          completed: true,
          difficulty: 5
        }]
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('compulsions')) {
          return Promise.resolve(JSON.stringify(mockData.compulsions));
        }
        return Promise.resolve(null);
      });
      var result = yield manager['generateTodayDigest'](userId);
      expect(result.success).toBe(true);
      expect(result.metrics).toBeDefined();
      expect((_result$metrics6 = result.metrics) == null ? void 0 : _result$metrics6.highlights).toBeGreaterThanOrEqual(0);
      expect((_result$metrics7 = result.metrics) == null ? void 0 : _result$metrics7.recommendations).toBeGreaterThanOrEqual(0);
    }));
    it('should generate highlights for achievements', function () {
      var digest = {
        userId: 'test-user',
        date: '2024-01-04',
        summary: {
          highlights: [],
          challenges: [],
          recommendations: []
        },
        metrics: {
          totalCompulsions: 0,
          avgResistance: 8,
          erpSessions: 2,
          moodRange: {
            min: 60,
            max: 80
          }
        },
        generatedAt: Date.now(),
        ttl: 12
      };
      if (digest.metrics.totalCompulsions === 0) {
        digest.summary.highlights.push('Kompulsiyonsuz bir gün! 🌟');
      }
      if (digest.metrics.avgResistance > 7) {
        digest.summary.highlights.push('Güçlü direnç gösterdin! 💪');
      }
      if (digest.metrics.erpSessions > 0) {
        digest.summary.highlights.push(`${digest.metrics.erpSessions} ERP egzersizi tamamladın`);
      }
      expect(digest.summary.highlights).toHaveLength(3);
    });
    it('should generate recommendations based on gaps', function () {
      var digest = {
        userId: 'test-user',
        date: '2024-01-04',
        summary: {
          highlights: [],
          challenges: [],
          recommendations: []
        },
        metrics: {
          totalCompulsions: 8,
          avgResistance: 3,
          erpSessions: 0,
          moodRange: {
            min: 20,
            max: 40
          }
        },
        generatedAt: Date.now(),
        ttl: 12
      };
      if (digest.metrics.erpSessions === 0) {
        digest.summary.recommendations.push('Bugün bir ERP egzersizi denemelisin');
      }
      if (digest.metrics.avgResistance < 5) {
        digest.summary.recommendations.push('Direnç tekniklerini gözden geçir');
      }
      if (digest.metrics.moodRange.min < 30) {
        digest.summary.recommendations.push('Nefes egzersizleri ruh halini iyileştirebilir');
      }
      expect(digest.summary.recommendations).toHaveLength(3);
    });
  });
  describe('Cache Cleanup', function () {
    it('should remove expired entries', (0, _asyncToGenerator2.default)(function* () {
      var now = Date.now();
      var mockKeys = ['ai:cache:1', 'ai:cache:2', 'ai:cache:3'];
      _asyncStorage.default.getAllKeys.mockResolvedValue(mockKeys);
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'ai:cache:1') {
          return Promise.resolve(JSON.stringify({
            computedAt: now - 25 * 60 * 60 * 1000,
            ttl: 24
          }));
        }
        if (key === 'ai:cache:2') {
          return Promise.resolve(JSON.stringify({
            computedAt: now - 10 * 60 * 60 * 1000,
            ttl: 24
          }));
        }
        if (key === 'ai:cache:3') {
          return Promise.resolve(JSON.stringify({
            computedAt: now - 35 * 24 * 60 * 60 * 1000
          }));
        }
        return Promise.resolve(null);
      });
      var removeItemSpy = jest.spyOn(_asyncStorage.default, 'removeItem');
      var result = yield manager['runCacheCleanup']('test-user');
      expect(result.success).toBe(true);
      expect(removeItemSpy).toHaveBeenCalledWith('ai:cache:1');
      expect(removeItemSpy).toHaveBeenCalledWith('ai:cache:3');
      expect(removeItemSpy).not.toHaveBeenCalledWith('ai:cache:2');
    }));
    it('should handle invalid cache entries gracefully', (0, _asyncToGenerator2.default)(function* () {
      var _result$metrics8;
      _asyncStorage.default.getAllKeys.mockResolvedValue(['ai:invalid']);
      _asyncStorage.default.getItem.mockResolvedValue('invalid-json');
      var result = yield manager['runCacheCleanup']('test-user');
      expect(result.success).toBe(true);
      expect((_result$metrics8 = result.metrics) == null ? void 0 : _result$metrics8.removedKeys).toBe(0);
    }));
  });
  describe('Error Handling', function () {
    it('should handle job failures gracefully', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'test-user';
      jest.spyOn(manager, 'runTrendAnalysis').mockRejectedValue(new Error('Test error'));
      var results = yield manager.runAllJobs(userId);
      var trendResult = results.find(function (r) {
        return r.jobName === 'TrendAnalysis';
      });
      expect(trendResult == null ? void 0 : trendResult.success).toBe(false);
      expect(trendResult == null ? void 0 : trendResult.error).toBe('Test error');
    }));
    it('should continue with other jobs if one fails', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'test-user';
      jest.spyOn(manager, 'runMoodAnalysis').mockRejectedValue(new Error('Mood error'));
      var results = yield manager.runAllJobs(userId);
      var moodResult = results.find(function (r) {
        return r.jobName === 'MoodAnalysis';
      });
      expect(moodResult == null ? void 0 : moodResult.success).toBe(false);
      var trendResult = results.find(function (r) {
        return r.jobName === 'TrendAnalysis';
      });
      expect(trendResult == null ? void 0 : trendResult.success).toBe(true);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,