{"version":3,"names":["_getJestObj","mock","default","getMoodEntries","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_dailyJobs","_asyncStorage","TaskManager","_interopRequireWildcard","BackgroundFetch","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_require","describe","manager","beforeEach","clearAllMocks","DailyJobsManager","getInstance","isTaskRegisteredAsync","mockResolvedValue","registerTaskAsync","undefined","initialize","afterEach","resetAllMocks","it","expect","toHaveBeenCalledWith","objectContaining","minimumInterval","stopOnTerminate","startOnBoot","newManager","not","toHaveBeenCalled","yesterday","Date","now","AsyncStorage","getItem","toString","runSpy","spyOn","Promise","resolve","setTimeout","userId","mockCompulsions","date","count","avgResistance","mockImplementation","key","includes","JSON","stringify","result","success","toBe","jobName","metrics","toBeDefined","trends","period","compulsionTrend","moodTrend","resistanceTrend","insights","push","toHaveLength","toContain","values","alpha","smoothed","length","expected","toBeCloseTo","outliers","_result$metrics","_result$metrics2","value","skipped","reason","_result$metrics3","mockERP","completed","difficulty","riskScore","delta","toBeGreaterThan","_result$metrics4","toBeLessThan","_result$metrics5","updated","_result$metrics6","_result$metrics7","today","toISOString","split","mockData","compulsions","moods","erp","highlights","toBeGreaterThanOrEqual","recommendations","digest","summary","challenges","totalCompulsions","erpSessions","moodRange","min","max","generatedAt","ttl","mockKeys","getAllKeys","computedAt","removeItemSpy","_result$metrics8","removedKeys","mockRejectedValue","Error","results","runAllJobs","trendResult","find","error","moodResult"],"sources":["dailyJobs.test.ts"],"sourcesContent":["/**\n * ðŸ§ª Daily Batch Jobs Test Suite\n * \n * Tests for hybrid batch processing (device + edge)\n */\n\nimport { DailyJobsManager, TrendAnalysis, TodayDigest } from '@/features/ai/batch/dailyJobs';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as TaskManager from 'expo-task-manager';\nimport * as BackgroundFetch from 'expo-background-fetch';\n\n// Mock dependencies\njest.mock('@react-native-async-storage/async-storage');\njest.mock('expo-task-manager');\njest.mock('expo-background-fetch');\njest.mock('@/features/ai/telemetry/aiTelemetry');\njest.mock('@/services/supabase', () => ({\n  default: {\n    getMoodEntries: jest.fn(),\n  },\n}));\n\ndescribe('DailyJobsManager', () => {\n  let manager: DailyJobsManager;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    manager = DailyJobsManager.getInstance();\n    \n    // Mock task registration\n    (TaskManager.isTaskRegisteredAsync as jest.Mock).mockResolvedValue(false);\n    (BackgroundFetch.registerTaskAsync as jest.Mock).mockResolvedValue(undefined);\n    \n    await manager.initialize();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Initialization', () => {\n    it('should register background task on initialization', async () => {\n      expect(BackgroundFetch.registerTaskAsync).toHaveBeenCalledWith(\n        'AI_DAILY_BATCH_JOBS',\n        expect.objectContaining({\n          minimumInterval: 60 * 60 * 12,\n          stopOnTerminate: false,\n          startOnBoot: true,\n        })\n      );\n    });\n\n    it('should not re-register if already registered', async () => {\n      (TaskManager.isTaskRegisteredAsync as jest.Mock).mockResolvedValue(true);\n      \n      const newManager = DailyJobsManager.getInstance();\n      await newManager.initialize();\n      \n      expect(BackgroundFetch.registerTaskAsync).not.toHaveBeenCalled();\n    });\n\n    it('should run catch-up if last run >24h ago', async () => {\n      const yesterday = Date.now() - 25 * 60 * 60 * 1000; // 25 hours ago\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(yesterday.toString());\n      \n      const runSpy = jest.spyOn(manager, 'runAllJobs');\n      \n      await manager.initialize();\n      \n      // Wait for catch-up to trigger\n      await new Promise(resolve => setTimeout(resolve, 6000));\n      \n      expect(runSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Trend Analysis', () => {\n    it('should calculate 7-day trends correctly', async () => {\n      const userId = 'test-user';\n      \n      // Mock data for trend calculation\n      const mockCompulsions = [\n        { date: '2024-01-01', count: 10, avgResistance: 5 },\n        { date: '2024-01-02', count: 9, avgResistance: 5.5 },\n        { date: '2024-01-03', count: 8, avgResistance: 6 },\n        { date: '2024-01-04', count: 7, avgResistance: 6.5 },\n        { date: '2024-01-05', count: 6, avgResistance: 7 },\n        { date: '2024-01-06', count: 5, avgResistance: 7.5 },\n        { date: '2024-01-07', count: 4, avgResistance: 8 },\n      ];\n\n      // Mock AsyncStorage to return compulsion data\n      (AsyncStorage.getItem as jest.Mock).mockImplementation((key) => {\n        if (key.includes('compulsions')) {\n          return Promise.resolve(JSON.stringify(mockCompulsions));\n        }\n        return Promise.resolve(null);\n      });\n\n      const result = await manager['runTrendAnalysis'](userId);\n      \n      expect(result.success).toBe(true);\n      expect(result.jobName).toBe('TrendAnalysis');\n      expect(result.metrics).toBeDefined();\n    });\n\n    it('should generate insights for positive trends', async () => {\n      const trends: TrendAnalysis = {\n        period: '7d',\n        metrics: {\n          compulsionTrend: -0.3, // Decreasing (good)\n          moodTrend: 0.2,\n\n          resistanceTrend: 0.4, // Increasing (good)\n        },\n        insights: [],\n      };\n\n      // Process insights\n      if (trends.metrics.compulsionTrend < -0.2) {\n        trends.insights.push('KompulsiyonlarÄ±nda son 7 gÃ¼nde azalma var, harika gidiyorsun!');\n      }\n      if (trends.metrics.resistanceTrend > 0.3) {\n        trends.insights.push('DirenÃ§ gÃ¼cÃ¼n artÄ±yor, bu Ã§ok deÄŸerli bir ilerleme');\n      }\n\n      expect(trends.insights).toHaveLength(2);\n      expect(trends.insights[0]).toContain('harika');\n      expect(trends.insights[1]).toContain('deÄŸerli');\n    });\n\n    it('should handle insufficient data gracefully', async () => {\n      const userId = 'new-user';\n      \n      // Mock no data\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(null);\n      \n      const result = await manager['runTrendAnalysis'](userId);\n      \n      expect(result.success).toBe(true);\n      expect(result.metrics).toBeDefined();\n    });\n  });\n\n  describe('Mood Analysis', () => {\n    it('should apply exponential smoothing correctly', () => {\n      const values = [50, 60, 55, 70, 45, 65, 50];\n      const alpha = 0.3;\n      \n      const smoothed = manager['exponentialSmoothing'](values, alpha);\n      \n      expect(smoothed).toHaveLength(values.length);\n      expect(smoothed[0]).toBe(values[0]); // First value unchanged\n      \n      // Verify smoothing formula\n      for (let i = 1; i < values.length; i++) {\n        const expected = alpha * values[i] + (1 - alpha) * smoothed[i - 1];\n        expect(smoothed[i]).toBeCloseTo(expected, 2);\n      }\n    });\n\n    it('should detect outliers using IQR method', () => {\n      const values = [50, 52, 48, 51, 49, 95, 10, 50, 51]; // 95 and 10 are outliers\n      \n      const outliers = manager['detectOutliers'](values);\n      \n      expect(outliers).toContain(5); // Index of 95\n      expect(outliers).toContain(6); // Index of 10\n    });\n\n    it('should skip analysis with insufficient data', async () => {\n      const userId = 'test-user';\n      \n      // Mock only 2 mood entries (need at least 3)\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(\n        JSON.stringify([\n          { date: '2024-01-01', value: 50, count: 1 },\n          { date: '2024-01-02', value: 60, count: 1 },\n        ])\n      );\n      \n      const result = await manager['runMoodAnalysis'](userId);\n      \n      expect(result.success).toBe(true);\n      expect(result.metrics?.skipped).toBe(true);\n      expect(result.metrics?.reason).toBe('Insufficient data');\n    });\n  });\n\n  describe('Risk Update', () => {\n    it('should increase risk on negative trends', async () => {\n      const userId = 'test-user';\n      \n      // Mock increasing compulsions (bad trend)\n      const mockCompulsions = [\n        { date: '2024-01-01', count: 5, avgResistance: 6 },\n        { date: '2024-01-02', count: 7, avgResistance: 5 },\n        { date: '2024-01-03', count: 10, avgResistance: 4 },\n      ];\n      \n      // Mock poor ERP compliance\n      const mockERP = [\n        { date: '2024-01-01', completed: false, difficulty: 5 },\n        { date: '2024-01-02', completed: false, difficulty: 5 },\n        { date: '2024-01-03', completed: true, difficulty: 5 },\n      ];\n      \n      (AsyncStorage.getItem as jest.Mock).mockImplementation((key) => {\n        if (key.includes('compulsions')) {\n          return Promise.resolve(JSON.stringify(mockCompulsions));\n        }\n        if (key.includes('erp')) {\n          return Promise.resolve(JSON.stringify(mockERP));\n        }\n        if (key.includes('settings')) {\n          return Promise.resolve(JSON.stringify({ riskScore: 0.5 }));\n        }\n        return Promise.resolve(null);\n      });\n      \n      const result = await manager['runRiskUpdate'](userId);\n      \n      expect(result.success).toBe(true);\n      expect(result.metrics?.delta).toBeGreaterThan(0); // Risk increased\n    });\n\n    it('should decrease risk on positive trends', async () => {\n      const userId = 'test-user';\n      \n      // Mock decreasing compulsions (good trend)\n      const mockCompulsions = [\n        { date: '2024-01-01', count: 10, avgResistance: 4 },\n        { date: '2024-01-02', count: 7, avgResistance: 5 },\n        { date: '2024-01-03', count: 5, avgResistance: 6 },\n      ];\n      \n      // Mock good ERP compliance\n      const mockERP = [\n        { date: '2024-01-01', completed: true, difficulty: 5 },\n        { date: '2024-01-02', completed: true, difficulty: 5 },\n        { date: '2024-01-03', completed: true, difficulty: 6 },\n      ];\n      \n      (AsyncStorage.getItem as jest.Mock).mockImplementation((key) => {\n        if (key.includes('compulsions')) {\n          return Promise.resolve(JSON.stringify(mockCompulsions));\n        }\n        if (key.includes('erp')) {\n          return Promise.resolve(JSON.stringify(mockERP));\n        }\n        if (key.includes('settings')) {\n          return Promise.resolve(JSON.stringify({ riskScore: 0.5 }));\n        }\n        return Promise.resolve(null);\n      });\n      \n      const result = await manager['runRiskUpdate'](userId);\n      \n      expect(result.success).toBe(true);\n      expect(result.metrics?.delta).toBeLessThan(0); // Risk decreased\n    });\n\n    it('should only update if delta â‰¥ 0.15', async () => {\n      const userId = 'test-user';\n      \n      // Mock small changes (delta < 0.15)\n      const mockCompulsions = [\n        { date: '2024-01-01', count: 5, avgResistance: 5 },\n        { date: '2024-01-02', count: 5, avgResistance: 5 },\n        { date: '2024-01-03', count: 5, avgResistance: 5 },\n      ];\n      \n      (AsyncStorage.getItem as jest.Mock).mockImplementation((key) => {\n        if (key.includes('compulsions')) {\n          return Promise.resolve(JSON.stringify(mockCompulsions));\n        }\n        if (key.includes('settings')) {\n          return Promise.resolve(JSON.stringify({ riskScore: 0.5 }));\n        }\n        return Promise.resolve(null);\n      });\n      \n      const result = await manager['runRiskUpdate'](userId);\n      \n      expect(result.success).toBe(true);\n      expect(result.metrics?.updated).toBe(false); // Not updated due to small delta\n    });\n  });\n\n  describe('Today Digest', () => {\n    it('should generate comprehensive digest', async () => {\n      const userId = 'test-user';\n      const today = new Date().toISOString().split('T')[0];\n      \n      // Mock today's data\n      const mockData = {\n        compulsions: [{ date: today, count: 3, avgResistance: 7 }],\n        moods: [\n          { date: today, value: 40, count: 1 },\n          { date: today, value: 60, count: 1 },\n        ],\n        erp: [\n          { date: today, completed: true, difficulty: 5 },\n        ],\n      };\n      \n      (AsyncStorage.getItem as jest.Mock).mockImplementation((key) => {\n        if (key.includes('compulsions')) {\n          return Promise.resolve(JSON.stringify(mockData.compulsions));\n        }\n        return Promise.resolve(null);\n      });\n      \n      const result = await manager['generateTodayDigest'](userId);\n      \n      expect(result.success).toBe(true);\n      expect(result.metrics).toBeDefined();\n      expect(result.metrics?.highlights).toBeGreaterThanOrEqual(0);\n      expect(result.metrics?.recommendations).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should generate highlights for achievements', () => {\n      const digest: TodayDigest = {\n        userId: 'test-user',\n        date: '2024-01-04',\n        summary: {\n          highlights: [],\n          challenges: [],\n          recommendations: [],\n        },\n        metrics: {\n          totalCompulsions: 0,\n          avgResistance: 8,\n          erpSessions: 2,\n          moodRange: { min: 60, max: 80 },\n        },\n        generatedAt: Date.now(),\n        ttl: 12,\n      };\n\n      // Generate highlights based on metrics\n      if (digest.metrics.totalCompulsions === 0) {\n        digest.summary.highlights.push('Kompulsiyonsuz bir gÃ¼n! ðŸŒŸ');\n      }\n      if (digest.metrics.avgResistance > 7) {\n        digest.summary.highlights.push('GÃ¼Ã§lÃ¼ direnÃ§ gÃ¶sterdin! ðŸ’ª');\n      }\n      if (digest.metrics.erpSessions > 0) {\n        digest.summary.highlights.push(`${digest.metrics.erpSessions} ERP egzersizi tamamladÄ±n`);\n      }\n\n      expect(digest.summary.highlights).toHaveLength(3);\n    });\n\n    it('should generate recommendations based on gaps', () => {\n      const digest: TodayDigest = {\n        userId: 'test-user',\n        date: '2024-01-04',\n        summary: {\n          highlights: [],\n          challenges: [],\n          recommendations: [],\n        },\n        metrics: {\n          totalCompulsions: 8,\n          avgResistance: 3,\n          erpSessions: 0,\n          moodRange: { min: 20, max: 40 },\n        },\n        generatedAt: Date.now(),\n        ttl: 12,\n      };\n\n      // Generate recommendations\n      if (digest.metrics.erpSessions === 0) {\n        digest.summary.recommendations.push('BugÃ¼n bir ERP egzersizi denemelisin');\n      }\n      if (digest.metrics.avgResistance < 5) {\n        digest.summary.recommendations.push('DirenÃ§ tekniklerini gÃ¶zden geÃ§ir');\n      }\n      if (digest.metrics.moodRange.min < 30) {\n        digest.summary.recommendations.push('Nefes egzersizleri ruh halini iyileÅŸtirebilir');\n      }\n\n      expect(digest.summary.recommendations).toHaveLength(3);\n    });\n  });\n\n  describe('Cache Cleanup', () => {\n    it('should remove expired entries', async () => {\n      const now = Date.now();\n      \n      // Mock cache entries with different expiry times\n      const mockKeys = [\n        'ai:cache:1',\n        'ai:cache:2',\n        'ai:cache:3',\n      ];\n      \n      (AsyncStorage.getAllKeys as jest.Mock).mockResolvedValue(mockKeys);\n      (AsyncStorage.getItem as jest.Mock).mockImplementation((key) => {\n        if (key === 'ai:cache:1') {\n          // Expired entry\n          return Promise.resolve(JSON.stringify({\n            computedAt: now - 25 * 60 * 60 * 1000,\n            ttl: 24, // 24 hours TTL, but created 25 hours ago\n          }));\n        }\n        if (key === 'ai:cache:2') {\n          // Valid entry\n          return Promise.resolve(JSON.stringify({\n            computedAt: now - 10 * 60 * 60 * 1000,\n            ttl: 24, // Still valid\n          }));\n        }\n        if (key === 'ai:cache:3') {\n          // Old daily key (>30 days)\n          return Promise.resolve(JSON.stringify({\n            computedAt: now - 35 * 24 * 60 * 60 * 1000,\n          }));\n        }\n        return Promise.resolve(null);\n      });\n      \n      const removeItemSpy = jest.spyOn(AsyncStorage, 'removeItem');\n      \n      const result = await manager['runCacheCleanup']('test-user');\n      \n      expect(result.success).toBe(true);\n      expect(removeItemSpy).toHaveBeenCalledWith('ai:cache:1');\n      expect(removeItemSpy).toHaveBeenCalledWith('ai:cache:3');\n      expect(removeItemSpy).not.toHaveBeenCalledWith('ai:cache:2');\n    });\n\n    it('should handle invalid cache entries gracefully', async () => {\n      (AsyncStorage.getAllKeys as jest.Mock).mockResolvedValue(['ai:invalid']);\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue('invalid-json');\n      \n      const result = await manager['runCacheCleanup']('test-user');\n      \n      expect(result.success).toBe(true);\n      expect(result.metrics?.removedKeys).toBe(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle job failures gracefully', async () => {\n      const userId = 'test-user';\n      \n      // Mock error in trend analysis\n      jest.spyOn(manager as any, 'runTrendAnalysis').mockRejectedValue(new Error('Test error'));\n      \n      const results = await manager.runAllJobs(userId);\n      \n      const trendResult = results.find(r => r.jobName === 'TrendAnalysis');\n      expect(trendResult?.success).toBe(false);\n      expect(trendResult?.error).toBe('Test error');\n    });\n\n    it('should continue with other jobs if one fails', async () => {\n      const userId = 'test-user';\n      \n      // Mock error in mood analysis only\n      jest.spyOn(manager as any, 'runMoodAnalysis').mockRejectedValue(new Error('Mood error'));\n      \n      const results = await manager.runAllJobs(userId);\n      \n      // Mood analysis should fail\n      const moodResult = results.find(r => r.jobName === 'MoodAnalysis');\n      expect(moodResult?.success).toBe(false);\n      \n      // Other jobs should succeed\n      const trendResult = results.find(r => r.jobName === 'TrendAnalysis');\n      expect(trendResult?.success).toBe(true);\n    });\n  });\n});\n"],"mappings":"AAYAA,WAAA,GAAKC,IAAI,CAAC,2CAA2C,CAAC;AACtDD,WAAA,GAAKC,IAAI,CAAC,mBAAmB,CAAC;AAC9BD,WAAA,GAAKC,IAAI,CAAC,uBAAuB,CAAC;AAClCD,WAAA,GAAKC,IAAI,6CAAsC,CAAC;AAChDD,WAAA,GAAKC,IAAI,+BAAwB;EAAA,OAAO;IACtCC,OAAO,EAAE;MACPC,cAAc,EAAEC,IAAI,CAACC,EAAE,CAAC;IAC1B;EACF,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAdJ,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,WAAA,GAAAC,uBAAA,CAAAL,OAAA;AACA,IAAAM,eAAA,GAAAD,uBAAA,CAAAL,OAAA;AAAyD,SAAAK,wBAAAE,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAJ,uBAAA,YAAAA,wBAAAE,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAArB,OAAA,EAAAY,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAI,GAAA,CAAAV,CAAA,UAAAM,CAAA,CAAAK,GAAA,CAAAX,CAAA,GAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,EAAAQ,CAAA,cAAAK,EAAA,IAAAb,CAAA,gBAAAa,EAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAf,CAAA,EAAAa,EAAA,OAAAN,CAAA,IAAAD,CAAA,GAAAU,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAlB,CAAA,EAAAa,EAAA,OAAAN,CAAA,CAAAI,GAAA,IAAAJ,CAAA,CAAAK,GAAA,IAAAN,CAAA,CAAAE,CAAA,EAAAK,EAAA,EAAAN,CAAA,IAAAC,CAAA,CAAAK,EAAA,IAAAb,CAAA,CAAAa,EAAA,WAAAL,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAAA,SAAAf,YAAA;EAAA,IAAAiC,QAAA,GAAA1B,OAAA;IAAAH,IAAA,GAAA6B,QAAA,CAAA7B,IAAA;EAAAJ,WAAA,YAAAA,YAAA;IAAA,OAAAI,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAazD8B,QAAQ,CAAC,kBAAkB,EAAE,YAAM;EACjC,IAAIC,OAAyB;EAE7BC,UAAU,KAAA5B,kBAAA,CAAAN,OAAA,EAAC,aAAY;IACrBE,IAAI,CAACiC,aAAa,CAAC,CAAC;IACpBF,OAAO,GAAGG,2BAAgB,CAACC,WAAW,CAAC,CAAC;IAGvC5B,WAAW,CAAC6B,qBAAqB,CAAeC,iBAAiB,CAAC,KAAK,CAAC;IACxE5B,eAAe,CAAC6B,iBAAiB,CAAeD,iBAAiB,CAACE,SAAS,CAAC;IAE7E,MAAMR,OAAO,CAACS,UAAU,CAAC,CAAC;EAC5B,CAAC,EAAC;EAEFC,SAAS,CAAC,YAAM;IACdzC,IAAI,CAAC0C,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFZ,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/Ba,EAAE,CAAC,mDAAmD,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAClE8C,MAAM,CAACnC,eAAe,CAAC6B,iBAAiB,CAAC,CAACO,oBAAoB,CAC5D,qBAAqB,EACrBD,MAAM,CAACE,gBAAgB,CAAC;QACtBC,eAAe,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;QAC7BC,eAAe,EAAE,KAAK;QACtBC,WAAW,EAAE;MACf,CAAC,CACH,CAAC;IACH,CAAC,EAAC;IAEFN,EAAE,CAAC,8CAA8C,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAC5DS,WAAW,CAAC6B,qBAAqB,CAAeC,iBAAiB,CAAC,IAAI,CAAC;MAExE,IAAMa,UAAU,GAAGhB,2BAAgB,CAACC,WAAW,CAAC,CAAC;MACjD,MAAMe,UAAU,CAACV,UAAU,CAAC,CAAC;MAE7BI,MAAM,CAACnC,eAAe,CAAC6B,iBAAiB,CAAC,CAACa,GAAG,CAACC,gBAAgB,CAAC,CAAC;IAClE,CAAC,EAAC;IAEFT,EAAE,CAAC,0CAA0C,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MACzD,IAAMuD,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MACjDC,qBAAY,CAACC,OAAO,CAAepB,iBAAiB,CAACgB,SAAS,CAACK,QAAQ,CAAC,CAAC,CAAC;MAE3E,IAAMC,MAAM,GAAG3D,IAAI,CAAC4D,KAAK,CAAC7B,OAAO,EAAE,YAAY,CAAC;MAEhD,MAAMA,OAAO,CAACS,UAAU,CAAC,CAAC;MAG1B,MAAM,IAAIqB,OAAO,CAAC,UAAAC,OAAO;QAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC;MAAA,EAAC;MAEvDlB,MAAM,CAACe,MAAM,CAAC,CAACP,gBAAgB,CAAC,CAAC;IACnC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFtB,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/Ba,EAAE,CAAC,yCAAyC,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MACxD,IAAMkE,MAAM,GAAG,WAAW;MAG1B,IAAMC,eAAe,GAAG,CACtB;QAAEC,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,EAAE;QAAEC,aAAa,EAAE;MAAE,CAAC,EACnD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAI,CAAC,EACpD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,EAClD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAI,CAAC,EACpD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,EAClD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAI,CAAC,EACpD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,CACnD;MAGAZ,qBAAY,CAACC,OAAO,CAAeY,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC9D,IAAIA,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;UAC/B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAACR,eAAe,CAAC,CAAC;QACzD;QACA,OAAOJ,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAMY,MAAM,SAAS3C,OAAO,CAAC,kBAAkB,CAAC,CAACiC,MAAM,CAAC;MAExDpB,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,CAAC8B,MAAM,CAACG,OAAO,CAAC,CAACD,IAAI,CAAC,eAAe,CAAC;MAC5ChC,MAAM,CAAC8B,MAAM,CAACI,OAAO,CAAC,CAACC,WAAW,CAAC,CAAC;IACtC,CAAC,EAAC;IAEFpC,EAAE,CAAC,8CAA8C,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAC7D,IAAMkF,MAAqB,GAAG;QAC5BC,MAAM,EAAE,IAAI;QACZH,OAAO,EAAE;UACPI,eAAe,EAAE,CAAC,GAAG;UACrBC,SAAS,EAAE,GAAG;UAEdC,eAAe,EAAE;QACnB,CAAC;QACDC,QAAQ,EAAE;MACZ,CAAC;MAGD,IAAIL,MAAM,CAACF,OAAO,CAACI,eAAe,GAAG,CAAC,GAAG,EAAE;QACzCF,MAAM,CAACK,QAAQ,CAACC,IAAI,CAAC,+DAA+D,CAAC;MACvF;MACA,IAAIN,MAAM,CAACF,OAAO,CAACM,eAAe,GAAG,GAAG,EAAE;QACxCJ,MAAM,CAACK,QAAQ,CAACC,IAAI,CAAC,mDAAmD,CAAC;MAC3E;MAEA1C,MAAM,CAACoC,MAAM,CAACK,QAAQ,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;MACvC3C,MAAM,CAACoC,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACG,SAAS,CAAC,QAAQ,CAAC;MAC9C5C,MAAM,CAACoC,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACG,SAAS,CAAC,SAAS,CAAC;IACjD,CAAC,EAAC;IAEF7C,EAAE,CAAC,4CAA4C,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAC3D,IAAMkE,MAAM,GAAG,UAAU;MAGxBR,qBAAY,CAACC,OAAO,CAAepB,iBAAiB,CAAC,IAAI,CAAC;MAE3D,IAAMqC,MAAM,SAAS3C,OAAO,CAAC,kBAAkB,CAAC,CAACiC,MAAM,CAAC;MAExDpB,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,CAAC8B,MAAM,CAACI,OAAO,CAAC,CAACC,WAAW,CAAC,CAAC;IACtC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFjD,QAAQ,CAAC,eAAe,EAAE,YAAM;IAC9Ba,EAAE,CAAC,8CAA8C,EAAE,YAAM;MACvD,IAAM8C,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAC3C,IAAMC,KAAK,GAAG,GAAG;MAEjB,IAAMC,QAAQ,GAAG5D,OAAO,CAAC,sBAAsB,CAAC,CAAC0D,MAAM,EAAEC,KAAK,CAAC;MAE/D9C,MAAM,CAAC+C,QAAQ,CAAC,CAACJ,YAAY,CAACE,MAAM,CAACG,MAAM,CAAC;MAC5ChD,MAAM,CAAC+C,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACf,IAAI,CAACa,MAAM,CAAC,CAAC,CAAC,CAAC;MAGnC,KAAK,IAAIxE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwE,MAAM,CAACG,MAAM,EAAE3E,CAAC,EAAE,EAAE;QACtC,IAAM4E,QAAQ,GAAGH,KAAK,GAAGD,MAAM,CAACxE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGyE,KAAK,IAAIC,QAAQ,CAAC1E,CAAC,GAAG,CAAC,CAAC;QAClE2B,MAAM,CAAC+C,QAAQ,CAAC1E,CAAC,CAAC,CAAC,CAAC6E,WAAW,CAACD,QAAQ,EAAE,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC;IAEFlD,EAAE,CAAC,yCAAyC,EAAE,YAAM;MAClD,IAAM8C,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAEnD,IAAMM,QAAQ,GAAGhE,OAAO,CAAC,gBAAgB,CAAC,CAAC0D,MAAM,CAAC;MAElD7C,MAAM,CAACmD,QAAQ,CAAC,CAACP,SAAS,CAAC,CAAC,CAAC;MAC7B5C,MAAM,CAACmD,QAAQ,CAAC,CAACP,SAAS,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC;IAEF7C,EAAE,CAAC,6CAA6C,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAAA,IAAAkG,eAAA,EAAAC,gBAAA;MAC5D,IAAMjC,MAAM,GAAG,WAAW;MAGzBR,qBAAY,CAACC,OAAO,CAAepB,iBAAiB,CACnDmC,IAAI,CAACC,SAAS,CAAC,CACb;QAAEP,IAAI,EAAE,YAAY;QAAEgC,KAAK,EAAE,EAAE;QAAE/B,KAAK,EAAE;MAAE,CAAC,EAC3C;QAAED,IAAI,EAAE,YAAY;QAAEgC,KAAK,EAAE,EAAE;QAAE/B,KAAK,EAAE;MAAE,CAAC,CAC5C,CACH,CAAC;MAED,IAAMO,MAAM,SAAS3C,OAAO,CAAC,iBAAiB,CAAC,CAACiC,MAAM,CAAC;MAEvDpB,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,EAAAoD,eAAA,GAACtB,MAAM,CAACI,OAAO,qBAAdkB,eAAA,CAAgBG,OAAO,CAAC,CAACvB,IAAI,CAAC,IAAI,CAAC;MAC1ChC,MAAM,EAAAqD,gBAAA,GAACvB,MAAM,CAACI,OAAO,qBAAdmB,gBAAA,CAAgBG,MAAM,CAAC,CAACxB,IAAI,CAAC,mBAAmB,CAAC;IAC1D,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9C,QAAQ,CAAC,aAAa,EAAE,YAAM;IAC5Ba,EAAE,CAAC,yCAAyC,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAAA,IAAAuG,gBAAA;MACxD,IAAMrC,MAAM,GAAG,WAAW;MAG1B,IAAMC,eAAe,GAAG,CACtB;QAAEC,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,EAClD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,EAClD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,EAAE;QAAEC,aAAa,EAAE;MAAE,CAAC,CACpD;MAGD,IAAMkC,OAAO,GAAG,CACd;QAAEpC,IAAI,EAAE,YAAY;QAAEqC,SAAS,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAE,CAAC,EACvD;QAAEtC,IAAI,EAAE,YAAY;QAAEqC,SAAS,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAE,CAAC,EACvD;QAAEtC,IAAI,EAAE,YAAY;QAAEqC,SAAS,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAE,CAAC,CACvD;MAEAhD,qBAAY,CAACC,OAAO,CAAeY,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC9D,IAAIA,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;UAC/B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAACR,eAAe,CAAC,CAAC;QACzD;QACA,IAAIK,GAAG,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;UACvB,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC6B,OAAO,CAAC,CAAC;QACjD;QACA,IAAIhC,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;UAC5B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC;YAAEgC,SAAS,EAAE;UAAI,CAAC,CAAC,CAAC;QAC5D;QACA,OAAO5C,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAMY,MAAM,SAAS3C,OAAO,CAAC,eAAe,CAAC,CAACiC,MAAM,CAAC;MAErDpB,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,EAAAyD,gBAAA,GAAC3B,MAAM,CAACI,OAAO,qBAAduB,gBAAA,CAAgBK,KAAK,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC;IAClD,CAAC,EAAC;IAEFhE,EAAE,CAAC,yCAAyC,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAAA,IAAA8G,gBAAA;MACxD,IAAM5C,MAAM,GAAG,WAAW;MAG1B,IAAMC,eAAe,GAAG,CACtB;QAAEC,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,EAAE;QAAEC,aAAa,EAAE;MAAE,CAAC,EACnD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,EAClD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,CACnD;MAGD,IAAMkC,OAAO,GAAG,CACd;QAAEpC,IAAI,EAAE,YAAY;QAAEqC,SAAS,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAE,CAAC,EACtD;QAAEtC,IAAI,EAAE,YAAY;QAAEqC,SAAS,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAE,CAAC,EACtD;QAAEtC,IAAI,EAAE,YAAY;QAAEqC,SAAS,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAE,CAAC,CACvD;MAEAhD,qBAAY,CAACC,OAAO,CAAeY,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC9D,IAAIA,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;UAC/B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAACR,eAAe,CAAC,CAAC;QACzD;QACA,IAAIK,GAAG,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;UACvB,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC6B,OAAO,CAAC,CAAC;QACjD;QACA,IAAIhC,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;UAC5B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC;YAAEgC,SAAS,EAAE;UAAI,CAAC,CAAC,CAAC;QAC5D;QACA,OAAO5C,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAMY,MAAM,SAAS3C,OAAO,CAAC,eAAe,CAAC,CAACiC,MAAM,CAAC;MAErDpB,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,EAAAgE,gBAAA,GAAClC,MAAM,CAACI,OAAO,qBAAd8B,gBAAA,CAAgBF,KAAK,CAAC,CAACG,YAAY,CAAC,CAAC,CAAC;IAC/C,CAAC,EAAC;IAEFlE,EAAE,CAAC,oCAAoC,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAAA,IAAAgH,gBAAA;MACnD,IAAM9C,MAAM,GAAG,WAAW;MAG1B,IAAMC,eAAe,GAAG,CACtB;QAAEC,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,EAClD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,EAClD;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,CAAC;QAAEC,aAAa,EAAE;MAAE,CAAC,CACnD;MAEAZ,qBAAY,CAACC,OAAO,CAAeY,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC9D,IAAIA,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;UAC/B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAACR,eAAe,CAAC,CAAC;QACzD;QACA,IAAIK,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;UAC5B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC;YAAEgC,SAAS,EAAE;UAAI,CAAC,CAAC,CAAC;QAC5D;QACA,OAAO5C,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAMY,MAAM,SAAS3C,OAAO,CAAC,eAAe,CAAC,CAACiC,MAAM,CAAC;MAErDpB,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,EAAAkE,gBAAA,GAACpC,MAAM,CAACI,OAAO,qBAAdgC,gBAAA,CAAgBC,OAAO,CAAC,CAACnC,IAAI,CAAC,KAAK,CAAC;IAC7C,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9C,QAAQ,CAAC,cAAc,EAAE,YAAM;IAC7Ba,EAAE,CAAC,sCAAsC,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAAA,IAAAkH,gBAAA,EAAAC,gBAAA;MACrD,IAAMjD,MAAM,GAAG,WAAW;MAC1B,IAAMkD,KAAK,GAAG,IAAI5D,IAAI,CAAC,CAAC,CAAC6D,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAGpD,IAAMC,QAAQ,GAAG;QACfC,WAAW,EAAE,CAAC;UAAEpD,IAAI,EAAEgD,KAAK;UAAE/C,KAAK,EAAE,CAAC;UAAEC,aAAa,EAAE;QAAE,CAAC,CAAC;QAC1DmD,KAAK,EAAE,CACL;UAAErD,IAAI,EAAEgD,KAAK;UAAEhB,KAAK,EAAE,EAAE;UAAE/B,KAAK,EAAE;QAAE,CAAC,EACpC;UAAED,IAAI,EAAEgD,KAAK;UAAEhB,KAAK,EAAE,EAAE;UAAE/B,KAAK,EAAE;QAAE,CAAC,CACrC;QACDqD,GAAG,EAAE,CACH;UAAEtD,IAAI,EAAEgD,KAAK;UAAEX,SAAS,EAAE,IAAI;UAAEC,UAAU,EAAE;QAAE,CAAC;MAEnD,CAAC;MAEAhD,qBAAY,CAACC,OAAO,CAAeY,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC9D,IAAIA,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;UAC/B,OAAOV,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC4C,QAAQ,CAACC,WAAW,CAAC,CAAC;QAC9D;QACA,OAAOzD,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAMY,MAAM,SAAS3C,OAAO,CAAC,qBAAqB,CAAC,CAACiC,MAAM,CAAC;MAE3DpB,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,CAAC8B,MAAM,CAACI,OAAO,CAAC,CAACC,WAAW,CAAC,CAAC;MACpCnC,MAAM,EAAAoE,gBAAA,GAACtC,MAAM,CAACI,OAAO,qBAAdkC,gBAAA,CAAgBS,UAAU,CAAC,CAACC,sBAAsB,CAAC,CAAC,CAAC;MAC5D9E,MAAM,EAAAqE,gBAAA,GAACvC,MAAM,CAACI,OAAO,qBAAdmC,gBAAA,CAAgBU,eAAe,CAAC,CAACD,sBAAsB,CAAC,CAAC,CAAC;IACnE,CAAC,EAAC;IAEF/E,EAAE,CAAC,6CAA6C,EAAE,YAAM;MACtD,IAAMiF,MAAmB,GAAG;QAC1B5D,MAAM,EAAE,WAAW;QACnBE,IAAI,EAAE,YAAY;QAClB2D,OAAO,EAAE;UACPJ,UAAU,EAAE,EAAE;UACdK,UAAU,EAAE,EAAE;UACdH,eAAe,EAAE;QACnB,CAAC;QACD7C,OAAO,EAAE;UACPiD,gBAAgB,EAAE,CAAC;UACnB3D,aAAa,EAAE,CAAC;UAChB4D,WAAW,EAAE,CAAC;UACdC,SAAS,EAAE;YAAEC,GAAG,EAAE,EAAE;YAAEC,GAAG,EAAE;UAAG;QAChC,CAAC;QACDC,WAAW,EAAE9E,IAAI,CAACC,GAAG,CAAC,CAAC;QACvB8E,GAAG,EAAE;MACP,CAAC;MAGD,IAAIT,MAAM,CAAC9C,OAAO,CAACiD,gBAAgB,KAAK,CAAC,EAAE;QACzCH,MAAM,CAACC,OAAO,CAACJ,UAAU,CAACnC,IAAI,CAAC,4BAA4B,CAAC;MAC9D;MACA,IAAIsC,MAAM,CAAC9C,OAAO,CAACV,aAAa,GAAG,CAAC,EAAE;QACpCwD,MAAM,CAACC,OAAO,CAACJ,UAAU,CAACnC,IAAI,CAAC,4BAA4B,CAAC;MAC9D;MACA,IAAIsC,MAAM,CAAC9C,OAAO,CAACkD,WAAW,GAAG,CAAC,EAAE;QAClCJ,MAAM,CAACC,OAAO,CAACJ,UAAU,CAACnC,IAAI,CAAC,GAAGsC,MAAM,CAAC9C,OAAO,CAACkD,WAAW,2BAA2B,CAAC;MAC1F;MAEApF,MAAM,CAACgF,MAAM,CAACC,OAAO,CAACJ,UAAU,CAAC,CAAClC,YAAY,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF5C,EAAE,CAAC,+CAA+C,EAAE,YAAM;MACxD,IAAMiF,MAAmB,GAAG;QAC1B5D,MAAM,EAAE,WAAW;QACnBE,IAAI,EAAE,YAAY;QAClB2D,OAAO,EAAE;UACPJ,UAAU,EAAE,EAAE;UACdK,UAAU,EAAE,EAAE;UACdH,eAAe,EAAE;QACnB,CAAC;QACD7C,OAAO,EAAE;UACPiD,gBAAgB,EAAE,CAAC;UACnB3D,aAAa,EAAE,CAAC;UAChB4D,WAAW,EAAE,CAAC;UACdC,SAAS,EAAE;YAAEC,GAAG,EAAE,EAAE;YAAEC,GAAG,EAAE;UAAG;QAChC,CAAC;QACDC,WAAW,EAAE9E,IAAI,CAACC,GAAG,CAAC,CAAC;QACvB8E,GAAG,EAAE;MACP,CAAC;MAGD,IAAIT,MAAM,CAAC9C,OAAO,CAACkD,WAAW,KAAK,CAAC,EAAE;QACpCJ,MAAM,CAACC,OAAO,CAACF,eAAe,CAACrC,IAAI,CAAC,qCAAqC,CAAC;MAC5E;MACA,IAAIsC,MAAM,CAAC9C,OAAO,CAACV,aAAa,GAAG,CAAC,EAAE;QACpCwD,MAAM,CAACC,OAAO,CAACF,eAAe,CAACrC,IAAI,CAAC,kCAAkC,CAAC;MACzE;MACA,IAAIsC,MAAM,CAAC9C,OAAO,CAACmD,SAAS,CAACC,GAAG,GAAG,EAAE,EAAE;QACrCN,MAAM,CAACC,OAAO,CAACF,eAAe,CAACrC,IAAI,CAAC,+CAA+C,CAAC;MACtF;MAEA1C,MAAM,CAACgF,MAAM,CAACC,OAAO,CAACF,eAAe,CAAC,CAACpC,YAAY,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzD,QAAQ,CAAC,eAAe,EAAE,YAAM;IAC9Ba,EAAE,CAAC,+BAA+B,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAC9C,IAAMyD,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;MAGtB,IAAM+E,QAAQ,GAAG,CACf,YAAY,EACZ,YAAY,EACZ,YAAY,CACb;MAEA9E,qBAAY,CAAC+E,UAAU,CAAelG,iBAAiB,CAACiG,QAAQ,CAAC;MACjE9E,qBAAY,CAACC,OAAO,CAAeY,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC9D,IAAIA,GAAG,KAAK,YAAY,EAAE;UAExB,OAAOT,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC;YACpC+D,UAAU,EAAEjF,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;YACrC8E,GAAG,EAAE;UACP,CAAC,CAAC,CAAC;QACL;QACA,IAAI/D,GAAG,KAAK,YAAY,EAAE;UAExB,OAAOT,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC;YACpC+D,UAAU,EAAEjF,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;YACrC8E,GAAG,EAAE;UACP,CAAC,CAAC,CAAC;QACL;QACA,IAAI/D,GAAG,KAAK,YAAY,EAAE;UAExB,OAAOT,OAAO,CAACC,OAAO,CAACU,IAAI,CAACC,SAAS,CAAC;YACpC+D,UAAU,EAAEjF,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;UACxC,CAAC,CAAC,CAAC;QACL;QACA,OAAOM,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAM2E,aAAa,GAAGzI,IAAI,CAAC4D,KAAK,CAACJ,qBAAY,EAAE,YAAY,CAAC;MAE5D,IAAMkB,MAAM,SAAS3C,OAAO,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC;MAE5Da,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,CAAC6F,aAAa,CAAC,CAAC5F,oBAAoB,CAAC,YAAY,CAAC;MACxDD,MAAM,CAAC6F,aAAa,CAAC,CAAC5F,oBAAoB,CAAC,YAAY,CAAC;MACxDD,MAAM,CAAC6F,aAAa,CAAC,CAACtF,GAAG,CAACN,oBAAoB,CAAC,YAAY,CAAC;IAC9D,CAAC,EAAC;IAEFF,EAAE,CAAC,gDAAgD,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAAA,IAAA4I,gBAAA;MAC9DlF,qBAAY,CAAC+E,UAAU,CAAelG,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC;MACvEmB,qBAAY,CAACC,OAAO,CAAepB,iBAAiB,CAAC,cAAc,CAAC;MAErE,IAAMqC,MAAM,SAAS3C,OAAO,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC;MAE5Da,MAAM,CAAC8B,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjChC,MAAM,EAAA8F,gBAAA,GAAChE,MAAM,CAACI,OAAO,qBAAd4D,gBAAA,CAAgBC,WAAW,CAAC,CAAC/D,IAAI,CAAC,CAAC,CAAC;IAC7C,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9C,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/Ba,EAAE,CAAC,uCAAuC,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MACtD,IAAMkE,MAAM,GAAG,WAAW;MAG1BhE,IAAI,CAAC4D,KAAK,CAAC7B,OAAO,EAAS,kBAAkB,CAAC,CAAC6G,iBAAiB,CAAC,IAAIC,KAAK,CAAC,YAAY,CAAC,CAAC;MAEzF,IAAMC,OAAO,SAAS/G,OAAO,CAACgH,UAAU,CAAC/E,MAAM,CAAC;MAEhD,IAAMgF,WAAW,GAAGF,OAAO,CAACG,IAAI,CAAC,UAAApI,CAAC;QAAA,OAAIA,CAAC,CAACgE,OAAO,KAAK,eAAe;MAAA,EAAC;MACpEjC,MAAM,CAACoG,WAAW,oBAAXA,WAAW,CAAErE,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;MACxChC,MAAM,CAACoG,WAAW,oBAAXA,WAAW,CAAEE,KAAK,CAAC,CAACtE,IAAI,CAAC,YAAY,CAAC;IAC/C,CAAC,EAAC;IAEFjC,EAAE,CAAC,8CAA8C,MAAAvC,kBAAA,CAAAN,OAAA,EAAE,aAAY;MAC7D,IAAMkE,MAAM,GAAG,WAAW;MAG1BhE,IAAI,CAAC4D,KAAK,CAAC7B,OAAO,EAAS,iBAAiB,CAAC,CAAC6G,iBAAiB,CAAC,IAAIC,KAAK,CAAC,YAAY,CAAC,CAAC;MAExF,IAAMC,OAAO,SAAS/G,OAAO,CAACgH,UAAU,CAAC/E,MAAM,CAAC;MAGhD,IAAMmF,UAAU,GAAGL,OAAO,CAACG,IAAI,CAAC,UAAApI,CAAC;QAAA,OAAIA,CAAC,CAACgE,OAAO,KAAK,cAAc;MAAA,EAAC;MAClEjC,MAAM,CAACuG,UAAU,oBAAVA,UAAU,CAAExE,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;MAGvC,IAAMoE,WAAW,GAAGF,OAAO,CAACG,IAAI,CAAC,UAAApI,CAAC;QAAA,OAAIA,CAAC,CAACgE,OAAO,KAAK,eAAe;MAAA,EAAC;MACpEjC,MAAM,CAACoG,WAAW,oBAAXA,WAAW,CAAErE,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACzC,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}