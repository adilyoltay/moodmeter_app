{"version":3,"names":["InvalidationTrigger","exports","CacheInvalidation","_classCallCheck2","default","cache","strategies","Map","listeners","invalidationHistory","maxHistorySize","initializeStrategies","_createClass2","key","value","initialize","console","log","set","CBT_THOUGHT_CREATED","trigger","patterns","cascadeInvalidation","CBT_THOUGHT_UPDATED","YBOCS_UPDATED","ONBOARDING_FINALIZED","COMPULSION_RECORDED","delay","MOOD_RECORDED","USER_PROFILE_UPDATED","TREATMENT_PLAN_UPDATED","SETTINGS_CHANGED","DAY_ROLLOVER","_invalidate","_asyncToGenerator2","context","startTime","Date","now","warn","createEmptyResult","strategy","get","Promise","resolve","setTimeout","processedPatterns","processPatterns","totalInvalidated","pattern","count","invalidateByPattern","notifyListeners","result","invalidatedCount","timestamp","duration","addToHistory","__DEV__","invalidated","invalidate","_x","apply","arguments","onInvalidation","callback","has","push","index","indexOf","splice","getHistory","limit","history","_toConsumableArray2","sort","a","b","slice","clearHistory","getStatistics","length","totalInvalidations","averageDuration","totalInvalidatedCount","triggerCounts","totalDuration","mostFrequent","maxCount","_ref","_ref2","_slicedToArray2","mostFrequentTrigger","_context$metadata","processed","dayKey","metadata","getCurrentDayKey","processedPattern","replace","userId","includes","istanbulTime","toLocaleString","timeZone","toISOString","split","_cascadeInvalidation","Object","assign","_x2","_notifyListeners","all","map","listener","error","_x3","shift","getInstance","instance","cacheInvalidation","_default"],"sources":["invalidation.ts"],"sourcesContent":["/**\n * 🔄 Cache Invalidation - Deterministic cache invalidation hooks\n * \n * This module manages cache invalidation triggers based on specific user actions\n * and data changes to ensure cache consistency.\n * \n * Invalidation triggers:\n * - CBT_THOUGHT_CREATED/UPDATED\n\n * - YBOCS_UPDATED\n * - ONBOARDING_FINALIZED\n * \n * @module CacheInvalidation\n * @since v1.0.0\n */\n\nimport { ResultCache } from './resultCache';\n\n// =============================================================================\n// 🎯 TYPE DEFINITIONS\n// =============================================================================\n\n/**\n * Invalidation trigger types\n */\nexport enum InvalidationTrigger {\n  CBT_THOUGHT_CREATED = 'CBT_THOUGHT_CREATED',\n  CBT_THOUGHT_UPDATED = 'CBT_THOUGHT_UPDATED',\n  // Terapi_SESSION_COMPLETED = 'Terapi_SESSION_COMPLETED', // Removed Terapi\n  YBOCS_UPDATED = 'YBOCS_UPDATED',\n  ONBOARDING_FINALIZED = 'ONBOARDING_FINALIZED',\n  COMPULSION_RECORDED = 'COMPULSION_RECORDED',\n  MOOD_RECORDED = 'MOOD_RECORDED',\n  USER_PROFILE_UPDATED = 'USER_PROFILE_UPDATED',\n  TREATMENT_PLAN_UPDATED = 'TREATMENT_PLAN_UPDATED',\n  SETTINGS_CHANGED = 'SETTINGS_CHANGED',\n  DAY_ROLLOVER = 'DAY_ROLLOVER',\n}\n\n/**\n * Invalidation context\n */\nexport interface InvalidationContext {\n  trigger: InvalidationTrigger;\n  userId: string;\n  timestamp: number;\n  metadata?: {\n    dayKey?: string;\n    entityId?: string;\n    entityType?: string;\n    changes?: string[];\n  };\n}\n\n/**\n * Invalidation strategy\n */\nexport interface InvalidationStrategy {\n  trigger: InvalidationTrigger;\n  patterns: string[];\n  cascadeInvalidation?: boolean;\n  delay?: number; // Delay in milliseconds before invalidation\n}\n\n/**\n * Invalidation result\n */\nexport interface InvalidationResult {\n  trigger: InvalidationTrigger;\n  invalidatedCount: number;\n  patterns: string[];\n  timestamp: number;\n  duration: number;\n}\n\n// =============================================================================\n// 🔄 CACHE INVALIDATION IMPLEMENTATION\n// =============================================================================\n\n/**\n * Cache invalidation manager\n */\nexport class CacheInvalidation {\n  private static instance: CacheInvalidation;\n  private cache: ResultCache | null = null;\n  private strategies: Map<InvalidationTrigger, InvalidationStrategy> = new Map();\n  private listeners: Map<InvalidationTrigger, Array<(context: InvalidationContext) => void>> = new Map();\n  private invalidationHistory: InvalidationResult[] = [];\n  private maxHistorySize = 100;\n\n  private constructor() {\n    this.initializeStrategies();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): CacheInvalidation {\n    if (!CacheInvalidation.instance) {\n      CacheInvalidation.instance = new CacheInvalidation();\n    }\n    return CacheInvalidation.instance;\n  }\n\n  /**\n   * Initialize with cache instance\n   */\n  initialize(cache: ResultCache): void {\n    this.cache = cache;\n    console.log('✅ CacheInvalidation initialized');\n  }\n\n  /**\n   * Initialize invalidation strategies\n   */\n  private initializeStrategies(): void {\n    // CBT thought changes invalidate insights and today digest\n    this.strategies.set(InvalidationTrigger.CBT_THOUGHT_CREATED, {\n      trigger: InvalidationTrigger.CBT_THOUGHT_CREATED,\n      patterns: [\n        'ai:{userId}:{dayKey}:insights',\n        'ai:{userId}:{dayKey}:todayDigest',\n        'ai:{userId}:*:cbt',\n      ],\n      cascadeInvalidation: true,\n    });\n\n    this.strategies.set(InvalidationTrigger.CBT_THOUGHT_UPDATED, {\n      trigger: InvalidationTrigger.CBT_THOUGHT_UPDATED,\n      patterns: [\n        'ai:{userId}:{dayKey}:insights',\n        'ai:{userId}:{dayKey}:todayDigest',\n        'ai:{userId}:*:cbt',\n      ],\n      cascadeInvalidation: true,\n    });\n\n    // ✅ REMOVED: Terapi session completion - ERP module deleted\n\n    // YBOCS update invalidates treatment plan and all analyses\n    this.strategies.set(InvalidationTrigger.YBOCS_UPDATED, {\n      trigger: InvalidationTrigger.YBOCS_UPDATED,\n      patterns: [\n        'ai:{userId}:*', // Invalidate all user cache\n      ],\n      cascadeInvalidation: true,\n    });\n\n    // Onboarding completion invalidates everything\n    this.strategies.set(InvalidationTrigger.ONBOARDING_FINALIZED, {\n      trigger: InvalidationTrigger.ONBOARDING_FINALIZED,\n      patterns: [\n        'ai:{userId}:*', // Invalidate all user cache\n      ],\n      cascadeInvalidation: true,\n    });\n\n    // Compulsion recording invalidates insights and patterns\n    this.strategies.set(InvalidationTrigger.COMPULSION_RECORDED, {\n      trigger: InvalidationTrigger.COMPULSION_RECORDED,\n      patterns: [\n        'ai:{userId}:{dayKey}:insights',\n        'ai:{userId}:{dayKey}:todayDigest',\n        'ai:{userId}:*:pattern',\n      ],\n      cascadeInvalidation: false,\n      delay: 500,\n    });\n\n    // Mood recording invalidates insights\n    this.strategies.set(InvalidationTrigger.MOOD_RECORDED, {\n      trigger: InvalidationTrigger.MOOD_RECORDED,\n      patterns: [\n        'ai:{userId}:{dayKey}:insights',\n        'ai:{userId}:{dayKey}:todayDigest',\n      ],\n      cascadeInvalidation: false,\n      delay: 500,\n    });\n\n    // Profile update invalidates personalization\n    this.strategies.set(InvalidationTrigger.USER_PROFILE_UPDATED, {\n      trigger: InvalidationTrigger.USER_PROFILE_UPDATED,\n      patterns: [\n        'ai:{userId}:*:profile',\n        'ai:{userId}:*:personalization',\n      ],\n      cascadeInvalidation: true,\n    });\n\n    // Treatment plan update invalidates insights only (ERP removed)\n    this.strategies.set(InvalidationTrigger.TREATMENT_PLAN_UPDATED, {\n      trigger: InvalidationTrigger.TREATMENT_PLAN_UPDATED,\n      patterns: [\n        // ✅ REMOVED: 'ai:{userId}:*:erp' - ERP module deleted\n        'ai:{userId}:*:insights',\n        'ai:{userId}:*:treatment',\n      ],\n      cascadeInvalidation: true,\n    });\n\n    // Settings change invalidates everything\n    this.strategies.set(InvalidationTrigger.SETTINGS_CHANGED, {\n      trigger: InvalidationTrigger.SETTINGS_CHANGED,\n      patterns: [\n        'ai:{userId}:*',\n      ],\n      cascadeInvalidation: true,\n    });\n\n    // Day rollover invalidates previous day's caches\n    this.strategies.set(InvalidationTrigger.DAY_ROLLOVER, {\n      trigger: InvalidationTrigger.DAY_ROLLOVER,\n      patterns: [\n        'ai:{userId}:{dayKey}:*',\n      ],\n      cascadeInvalidation: false,\n    });\n  }\n\n  /**\n   * Trigger cache invalidation\n   */\n  async invalidate(context: InvalidationContext): Promise<InvalidationResult> {\n    const startTime = Date.now();\n\n    if (!this.cache) {\n      console.warn('⚠️ CacheInvalidation: No cache instance');\n      return this.createEmptyResult(context.trigger, startTime);\n    }\n\n    const strategy = this.strategies.get(context.trigger);\n    if (!strategy) {\n      console.warn(`⚠️ No invalidation strategy for trigger: ${context.trigger}`);\n      return this.createEmptyResult(context.trigger, startTime);\n    }\n\n    // Apply delay if specified\n    if (strategy.delay) {\n      await new Promise(resolve => setTimeout(resolve, strategy.delay));\n    }\n\n    // Process patterns\n    const processedPatterns = this.processPatterns(strategy.patterns, context);\n    let totalInvalidated = 0;\n\n    for (const pattern of processedPatterns) {\n      const count = await this.cache.invalidateByPattern(pattern);\n      totalInvalidated += count;\n    }\n\n    // Cascade invalidation if needed\n    if (strategy.cascadeInvalidation) {\n      await this.cascadeInvalidation(context);\n    }\n\n    // Notify listeners\n    await this.notifyListeners(context);\n\n    // Create result\n    const result: InvalidationResult = {\n      trigger: context.trigger,\n      invalidatedCount: totalInvalidated,\n      patterns: processedPatterns,\n      timestamp: context.timestamp,\n      duration: Date.now() - startTime,\n    };\n\n    // Store in history\n    this.addToHistory(result);\n\n    // Log result\n    if (__DEV__) {\n      console.log('🔄 Cache invalidation:', {\n        trigger: context.trigger,\n        invalidated: totalInvalidated,\n        duration: `${result.duration}ms`,\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Register invalidation listener\n   */\n  onInvalidation(\n    trigger: InvalidationTrigger,\n    callback: (context: InvalidationContext) => void\n  ): () => void {\n    if (!this.listeners.has(trigger)) {\n      this.listeners.set(trigger, []);\n    }\n\n    const listeners = this.listeners.get(trigger)!;\n    listeners.push(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Get invalidation history\n   */\n  getHistory(limit?: number): InvalidationResult[] {\n    const history = [...this.invalidationHistory];\n    history.sort((a, b) => b.timestamp - a.timestamp);\n    return limit ? history.slice(0, limit) : history;\n  }\n\n  /**\n   * Clear invalidation history\n   */\n  clearHistory(): void {\n    this.invalidationHistory = [];\n  }\n\n  /**\n   * Get invalidation statistics\n   */\n  getStatistics(): {\n    totalInvalidations: number;\n    averageDuration: number;\n    mostFrequentTrigger?: InvalidationTrigger;\n    totalInvalidatedCount: number;\n  } {\n    if (this.invalidationHistory.length === 0) {\n      return {\n        totalInvalidations: 0,\n        averageDuration: 0,\n        totalInvalidatedCount: 0,\n      };\n    }\n\n    const triggerCounts = new Map<InvalidationTrigger, number>();\n    let totalDuration = 0;\n    let totalInvalidated = 0;\n\n    for (const result of this.invalidationHistory) {\n      totalDuration += result.duration;\n      totalInvalidated += result.invalidatedCount;\n      \n      const count = triggerCounts.get(result.trigger) || 0;\n      triggerCounts.set(result.trigger, count + 1);\n    }\n\n    // Find most frequent trigger\n    let mostFrequent: InvalidationTrigger | undefined;\n    let maxCount = 0;\n    for (const [trigger, count] of triggerCounts) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostFrequent = trigger;\n      }\n    }\n\n    return {\n      totalInvalidations: this.invalidationHistory.length,\n      averageDuration: totalDuration / this.invalidationHistory.length,\n      mostFrequentTrigger: mostFrequent,\n      totalInvalidatedCount: totalInvalidated,\n    };\n  }\n\n  // =============================================================================\n  // 🔧 PRIVATE HELPER METHODS\n  // =============================================================================\n\n  /**\n   * Process pattern templates\n   */\n  private processPatterns(patterns: string[], context: InvalidationContext): string[] {\n    const processed: string[] = [];\n    const dayKey = context.metadata?.dayKey || this.getCurrentDayKey();\n\n    for (const pattern of patterns) {\n      let processedPattern = pattern\n        .replace('{userId}', context.userId)\n        .replace('{dayKey}', dayKey);\n\n      // Handle wildcards\n      if (processedPattern.includes('*')) {\n        // Convert to regex pattern\n        processedPattern = processedPattern.replace(/\\*/g, '.*');\n      }\n\n      processed.push(processedPattern);\n    }\n\n    return processed;\n  }\n\n  /**\n   * Get current day key (Europe/Istanbul)\n   */\n  private getCurrentDayKey(): string {\n    const now = new Date();\n    const istanbulTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    return istanbulTime.toISOString().split('T')[0];\n  }\n\n  /**\n   * Cascade invalidation to related caches\n   */\n  private async cascadeInvalidation(context: InvalidationContext): Promise<void> {\n    // Cascade logic based on trigger type\n    switch (context.trigger) {\n      case InvalidationTrigger.YBOCS_UPDATED:\n      case InvalidationTrigger.ONBOARDING_FINALIZED:\n        // These triggers cascade to all related caches\n        await this.invalidate({\n          ...context,\n          trigger: InvalidationTrigger.TREATMENT_PLAN_UPDATED,\n        });\n        break;\n\n      case InvalidationTrigger.TREATMENT_PLAN_UPDATED:\n        // ✅ REMOVED: Cascade to Terapi - ERP module deleted\n        // No further cascade needed, just invalidates insights and treatment\n        break;\n    }\n  }\n\n  /**\n   * Notify registered listeners\n   */\n  private async notifyListeners(context: InvalidationContext): Promise<void> {\n    const listeners = this.listeners.get(context.trigger);\n    if (!listeners || listeners.length === 0) {\n      return;\n    }\n\n    await Promise.all(\n      listeners.map(listener => {\n        try {\n          listener(context);\n        } catch (error) {\n          console.error('Error in invalidation listener:', error);\n        }\n      })\n    );\n  }\n\n  /**\n   * Add result to history\n   */\n  private addToHistory(result: InvalidationResult): void {\n    this.invalidationHistory.push(result);\n\n    // Trim history if too large\n    if (this.invalidationHistory.length > this.maxHistorySize) {\n      this.invalidationHistory.shift();\n    }\n  }\n\n  /**\n   * Create empty result\n   */\n  private createEmptyResult(trigger: InvalidationTrigger, startTime: number): InvalidationResult {\n    return {\n      trigger,\n      invalidatedCount: 0,\n      patterns: [],\n      timestamp: Date.now(),\n      duration: Date.now() - startTime,\n    };\n  }\n}\n\n// =============================================================================\n// 🚀 EXPORTS\n// =============================================================================\n\n// Export singleton instance\nexport const cacheInvalidation = CacheInvalidation.getInstance();\n\n// Export types\nexport default CacheInvalidation;\nexport type { InvalidationContext, InvalidationStrategy, InvalidationResult };\n"],"mappings":"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","ignoreList":[]}