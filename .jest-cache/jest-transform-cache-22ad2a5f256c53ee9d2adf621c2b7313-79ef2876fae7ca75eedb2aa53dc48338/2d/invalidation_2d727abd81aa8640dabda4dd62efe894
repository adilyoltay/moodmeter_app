e6110579861f00979225ce1a4a5e3d4b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.cacheInvalidation = exports.InvalidationTrigger = exports.CacheInvalidation = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var InvalidationTrigger = exports.InvalidationTrigger = function (InvalidationTrigger) {
  InvalidationTrigger["CBT_THOUGHT_CREATED"] = "CBT_THOUGHT_CREATED";
  InvalidationTrigger["CBT_THOUGHT_UPDATED"] = "CBT_THOUGHT_UPDATED";
  InvalidationTrigger["YBOCS_UPDATED"] = "YBOCS_UPDATED";
  InvalidationTrigger["ONBOARDING_FINALIZED"] = "ONBOARDING_FINALIZED";
  InvalidationTrigger["COMPULSION_RECORDED"] = "COMPULSION_RECORDED";
  InvalidationTrigger["MOOD_RECORDED"] = "MOOD_RECORDED";
  InvalidationTrigger["USER_PROFILE_UPDATED"] = "USER_PROFILE_UPDATED";
  InvalidationTrigger["TREATMENT_PLAN_UPDATED"] = "TREATMENT_PLAN_UPDATED";
  InvalidationTrigger["SETTINGS_CHANGED"] = "SETTINGS_CHANGED";
  InvalidationTrigger["DAY_ROLLOVER"] = "DAY_ROLLOVER";
  return InvalidationTrigger;
}({});
var CacheInvalidation = exports.CacheInvalidation = function () {
  function CacheInvalidation() {
    (0, _classCallCheck2.default)(this, CacheInvalidation);
    this.cache = null;
    this.strategies = new Map();
    this.listeners = new Map();
    this.invalidationHistory = [];
    this.maxHistorySize = 100;
    this.initializeStrategies();
  }
  return (0, _createClass2.default)(CacheInvalidation, [{
    key: "initialize",
    value: function initialize(cache) {
      this.cache = cache;
      console.log('✅ CacheInvalidation initialized');
    }
  }, {
    key: "initializeStrategies",
    value: function initializeStrategies() {
      this.strategies.set(InvalidationTrigger.CBT_THOUGHT_CREATED, {
        trigger: InvalidationTrigger.CBT_THOUGHT_CREATED,
        patterns: ['ai:{userId}:{dayKey}:insights', 'ai:{userId}:{dayKey}:todayDigest', 'ai:{userId}:*:cbt'],
        cascadeInvalidation: true
      });
      this.strategies.set(InvalidationTrigger.CBT_THOUGHT_UPDATED, {
        trigger: InvalidationTrigger.CBT_THOUGHT_UPDATED,
        patterns: ['ai:{userId}:{dayKey}:insights', 'ai:{userId}:{dayKey}:todayDigest', 'ai:{userId}:*:cbt'],
        cascadeInvalidation: true
      });
      this.strategies.set(InvalidationTrigger.YBOCS_UPDATED, {
        trigger: InvalidationTrigger.YBOCS_UPDATED,
        patterns: ['ai:{userId}:*'],
        cascadeInvalidation: true
      });
      this.strategies.set(InvalidationTrigger.ONBOARDING_FINALIZED, {
        trigger: InvalidationTrigger.ONBOARDING_FINALIZED,
        patterns: ['ai:{userId}:*'],
        cascadeInvalidation: true
      });
      this.strategies.set(InvalidationTrigger.COMPULSION_RECORDED, {
        trigger: InvalidationTrigger.COMPULSION_RECORDED,
        patterns: ['ai:{userId}:{dayKey}:insights', 'ai:{userId}:{dayKey}:todayDigest', 'ai:{userId}:*:pattern'],
        cascadeInvalidation: false,
        delay: 500
      });
      this.strategies.set(InvalidationTrigger.MOOD_RECORDED, {
        trigger: InvalidationTrigger.MOOD_RECORDED,
        patterns: ['ai:{userId}:{dayKey}:insights', 'ai:{userId}:{dayKey}:todayDigest'],
        cascadeInvalidation: false,
        delay: 500
      });
      this.strategies.set(InvalidationTrigger.USER_PROFILE_UPDATED, {
        trigger: InvalidationTrigger.USER_PROFILE_UPDATED,
        patterns: ['ai:{userId}:*:profile', 'ai:{userId}:*:personalization'],
        cascadeInvalidation: true
      });
      this.strategies.set(InvalidationTrigger.TREATMENT_PLAN_UPDATED, {
        trigger: InvalidationTrigger.TREATMENT_PLAN_UPDATED,
        patterns: ['ai:{userId}:*:insights', 'ai:{userId}:*:treatment'],
        cascadeInvalidation: true
      });
      this.strategies.set(InvalidationTrigger.SETTINGS_CHANGED, {
        trigger: InvalidationTrigger.SETTINGS_CHANGED,
        patterns: ['ai:{userId}:*'],
        cascadeInvalidation: true
      });
      this.strategies.set(InvalidationTrigger.DAY_ROLLOVER, {
        trigger: InvalidationTrigger.DAY_ROLLOVER,
        patterns: ['ai:{userId}:{dayKey}:*'],
        cascadeInvalidation: false
      });
    }
  }, {
    key: "invalidate",
    value: (function () {
      var _invalidate = (0, _asyncToGenerator2.default)(function* (context) {
        var startTime = Date.now();
        if (!this.cache) {
          console.warn('⚠️ CacheInvalidation: No cache instance');
          return this.createEmptyResult(context.trigger, startTime);
        }
        var strategy = this.strategies.get(context.trigger);
        if (!strategy) {
          console.warn(`⚠️ No invalidation strategy for trigger: ${context.trigger}`);
          return this.createEmptyResult(context.trigger, startTime);
        }
        if (strategy.delay) {
          yield new Promise(function (resolve) {
            return setTimeout(resolve, strategy.delay);
          });
        }
        var processedPatterns = this.processPatterns(strategy.patterns, context);
        var totalInvalidated = 0;
        for (var pattern of processedPatterns) {
          var count = yield this.cache.invalidateByPattern(pattern);
          totalInvalidated += count;
        }
        if (strategy.cascadeInvalidation) {
          yield this.cascadeInvalidation(context);
        }
        yield this.notifyListeners(context);
        var result = {
          trigger: context.trigger,
          invalidatedCount: totalInvalidated,
          patterns: processedPatterns,
          timestamp: context.timestamp,
          duration: Date.now() - startTime
        };
        this.addToHistory(result);
        if (__DEV__) {
          console.log('🔄 Cache invalidation:', {
            trigger: context.trigger,
            invalidated: totalInvalidated,
            duration: `${result.duration}ms`
          });
        }
        return result;
      });
      function invalidate(_x) {
        return _invalidate.apply(this, arguments);
      }
      return invalidate;
    }())
  }, {
    key: "onInvalidation",
    value: function onInvalidation(trigger, callback) {
      if (!this.listeners.has(trigger)) {
        this.listeners.set(trigger, []);
      }
      var listeners = this.listeners.get(trigger);
      listeners.push(callback);
      return function () {
        var index = listeners.indexOf(callback);
        if (index > -1) {
          listeners.splice(index, 1);
        }
      };
    }
  }, {
    key: "getHistory",
    value: function getHistory(limit) {
      var history = (0, _toConsumableArray2.default)(this.invalidationHistory);
      history.sort(function (a, b) {
        return b.timestamp - a.timestamp;
      });
      return limit ? history.slice(0, limit) : history;
    }
  }, {
    key: "clearHistory",
    value: function clearHistory() {
      this.invalidationHistory = [];
    }
  }, {
    key: "getStatistics",
    value: function getStatistics() {
      if (this.invalidationHistory.length === 0) {
        return {
          totalInvalidations: 0,
          averageDuration: 0,
          totalInvalidatedCount: 0
        };
      }
      var triggerCounts = new Map();
      var totalDuration = 0;
      var totalInvalidated = 0;
      for (var result of this.invalidationHistory) {
        totalDuration += result.duration;
        totalInvalidated += result.invalidatedCount;
        var count = triggerCounts.get(result.trigger) || 0;
        triggerCounts.set(result.trigger, count + 1);
      }
      var mostFrequent;
      var maxCount = 0;
      for (var _ref of triggerCounts) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
        var trigger = _ref2[0];
        var _count = _ref2[1];
        if (_count > maxCount) {
          maxCount = _count;
          mostFrequent = trigger;
        }
      }
      return {
        totalInvalidations: this.invalidationHistory.length,
        averageDuration: totalDuration / this.invalidationHistory.length,
        mostFrequentTrigger: mostFrequent,
        totalInvalidatedCount: totalInvalidated
      };
    }
  }, {
    key: "processPatterns",
    value: function processPatterns(patterns, context) {
      var _context$metadata;
      var processed = [];
      var dayKey = ((_context$metadata = context.metadata) == null ? void 0 : _context$metadata.dayKey) || this.getCurrentDayKey();
      for (var pattern of patterns) {
        var processedPattern = pattern.replace('{userId}', context.userId).replace('{dayKey}', dayKey);
        if (processedPattern.includes('*')) {
          processedPattern = processedPattern.replace(/\*/g, '.*');
        }
        processed.push(processedPattern);
      }
      return processed;
    }
  }, {
    key: "getCurrentDayKey",
    value: function getCurrentDayKey() {
      var now = new Date();
      var istanbulTime = new Date(now.toLocaleString('en-US', {
        timeZone: 'Europe/Istanbul'
      }));
      return istanbulTime.toISOString().split('T')[0];
    }
  }, {
    key: "cascadeInvalidation",
    value: (function () {
      var _cascadeInvalidation = (0, _asyncToGenerator2.default)(function* (context) {
        switch (context.trigger) {
          case InvalidationTrigger.YBOCS_UPDATED:
          case InvalidationTrigger.ONBOARDING_FINALIZED:
            yield this.invalidate(Object.assign({}, context, {
              trigger: InvalidationTrigger.TREATMENT_PLAN_UPDATED
            }));
            break;
          case InvalidationTrigger.TREATMENT_PLAN_UPDATED:
            break;
        }
      });
      function cascadeInvalidation(_x2) {
        return _cascadeInvalidation.apply(this, arguments);
      }
      return cascadeInvalidation;
    }())
  }, {
    key: "notifyListeners",
    value: (function () {
      var _notifyListeners = (0, _asyncToGenerator2.default)(function* (context) {
        var listeners = this.listeners.get(context.trigger);
        if (!listeners || listeners.length === 0) {
          return;
        }
        yield Promise.all(listeners.map(function (listener) {
          try {
            listener(context);
          } catch (error) {
            console.error('Error in invalidation listener:', error);
          }
        }));
      });
      function notifyListeners(_x3) {
        return _notifyListeners.apply(this, arguments);
      }
      return notifyListeners;
    }())
  }, {
    key: "addToHistory",
    value: function addToHistory(result) {
      this.invalidationHistory.push(result);
      if (this.invalidationHistory.length > this.maxHistorySize) {
        this.invalidationHistory.shift();
      }
    }
  }, {
    key: "createEmptyResult",
    value: function createEmptyResult(trigger, startTime) {
      return {
        trigger: trigger,
        invalidatedCount: 0,
        patterns: [],
        timestamp: Date.now(),
        duration: Date.now() - startTime
      };
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!CacheInvalidation.instance) {
        CacheInvalidation.instance = new CacheInvalidation();
      }
      return CacheInvalidation.instance;
    }
  }]);
}();
var cacheInvalidation = exports.cacheInvalidation = CacheInvalidation.getInstance();
var _default = exports.default = CacheInvalidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,