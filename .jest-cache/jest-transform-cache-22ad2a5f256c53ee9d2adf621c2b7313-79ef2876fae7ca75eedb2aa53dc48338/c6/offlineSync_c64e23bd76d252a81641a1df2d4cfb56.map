{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_queryClient","_netinfo","_unifiedConflictResolver","_deadLetterQueue","_circuitBreaker","_batchOptimizer","OfflineSyncService","exports","_classCallCheck2","default","isOnline","syncQueue","isSyncing","initializeNetworkListener","loadSyncQueue","_createClass2","key","value","_this","NetInfo","addEventListener","state","_state$isConnected","wasOffline","isConnected","processSyncQueue","_loadSyncQueue","_asyncToGenerator2","currentUserId","AsyncStorage","getItem","_yield$import","supabase","uid","getCurrentUser","currentUser","id","_unused","queueKey","safeStorageKey","queueData","JSON","parse","error","console","apply","arguments","_saveSyncQueue","_yield$import2","_unused2","setItem","stringify","saveSyncQueue","_addToSyncQueue","item","SUPPORTED_ENTITIES","Set","has","entity","warn","_yield$import3","trackAIInteraction","AIEventType","SYSTEM_STATUS","event","type","log","syncItem","Object","assign","Date","now","Math","random","toString","substr","timestamp","retryCount","deviceId","lastModified","push","addToSyncQueue","_x","_processSyncQueue","_this2","length","summary","successful","failed","conflicts","itemsToSync","_toConsumableArray2","batchSize","batchOptimizer","calculate","startBatchAt","_loop","i","syncCircuitBreaker","execute","filter","queueItem","find","q","base","delay","min","pow","floor","Promise","res","setTimeout","handleFailedSync","record","_firstItem$data","_firstItem$data2","_yield$import4","emitSyncCompleted","syncedEntities","Array","from","slice","map","firstItem","_item$data","_item$data2","data","user_id","userId","at","toISOString","_yield$import5","performanceMetricsService","total","conflictRate","recordToday","sync","_unused3","_unused4","_syncItem","syncCompulsion","syncAIProfile","syncTreatmentPlan","syncAchievement","syncMoodEntry","syncVoiceCheckin","syncThoughtRecord","Error","_x2","_syncCompulsion","remote","_item$data3","_yield$import6","svc","list","getCompulsions","isArray","x","_unused5","conflictResult","unifiedConflictResolver","resolveConflict","resolved","resultData","_yield$import7","saveCompulsion","deleteCompulsion","_x3","_syncAIProfile","_yield$import8","d","upsertAIProfile","profile_data","onboarding_completed","_x4","_syncTreatmentPlan","_yield$import9","upsertAITreatmentPlan","plan_data","status","_x5","_syncAchievement","_yield$import0","_d$progress","_yield$supabaseClient","supabaseClient","upsert","achievement_id","unlocked_at","progress","metadata","updated_at","onConflict","_yield$supabaseClient2","update","eq","e","_x6","_syncMoodEntry","_ref","_raw$mood_score","_ref2","_raw$energy_level","_ref3","_raw$anxiety_level","raw","_yield$import1","deleteMoodEntry","_unused6","entry","mood_score","mood","energy_level","energy","anxiety_level","anxiety","notes","trigger","saveMoodEntry","_x7","_syncVoiceCheckin","_item$data4","_yield$import10","saveVoiceCheckin","deleteVoiceCheckin","_x8","_syncThoughtRecord","_item$data5","_yield$import11","thought","distortions","saveCBTRecord","automatic_thought","saveThoughtRecord","deleteThoughtRecord","_x9","_handleFailedSync","deadLetterQueue","addToDeadLetter","errorMessage","failedKey","failedItems","_x0","_storeCompulsionLocally","compulsion","localKey","stored","compulsions","localId","synced","createdAt","storeCompulsionLocally","_x1","_getLocalCompulsions","getLocalCompulsions","isOnlineMode","getSyncQueueLength","_forceSyncNow","forceSyncNow","_clearSyncQueue","clearSyncQueue","_syncWithConflictResolution","_this3","undefined","result","items","_loop2","batch","settled","allSettled","it","forEach","r","idx","_unused7","syncWithConflictResolution","getInstance","instance","offlineSyncService"],"sources":["offlineSync.ts"],"sourcesContent":["\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { safeStorageKey } from '@/lib/queryClient';\nimport NetInfo from '@react-native-community/netinfo';\nimport { apiService } from './api';\nimport supabaseService from '@/services/supabase';\nimport { unifiedConflictResolver, UnifiedDataConflict, EntityType } from './unifiedConflictResolver';\nimport deadLetterQueue from '@/services/sync/deadLetterQueue';\nimport { syncCircuitBreaker } from '@/utils/circuitBreaker';\nimport batchOptimizer from '@/services/sync/batchOptimizer';\n\nexport interface SyncQueueItem {\n  id: string;\n  type: 'CREATE' | 'UPDATE' | 'DELETE';\n  entity: 'compulsion' | 'achievement' | 'mood_entry' | 'ai_profile' | 'treatment_plan' | 'voice_checkin' | 'thought_record'; // ✅ REMOVED: 'erp_session'\n  data: any;\n  timestamp: number;\n  retryCount: number;\n  deviceId?: string;\n  lastModified?: number;\n}\n\nexport class OfflineSyncService {\n  private static instance: OfflineSyncService;\n  private isOnline: boolean = true;\n  private syncQueue: SyncQueueItem[] = [];\n  private isSyncing: boolean = false;\n\n  public static getInstance(): OfflineSyncService {\n    if (!OfflineSyncService.instance) {\n      OfflineSyncService.instance = new OfflineSyncService();\n    }\n    return OfflineSyncService.instance;\n  }\n\n  constructor() {\n    this.initializeNetworkListener();\n    this.loadSyncQueue();\n  }\n\n  private initializeNetworkListener(): void {\n    NetInfo.addEventListener(state => {\n      const wasOffline = !this.isOnline;\n      this.isOnline = state.isConnected ?? false;\n\n      if (wasOffline && this.isOnline) {\n        // Came back online, start syncing\n        this.processSyncQueue();\n      }\n    });\n  }\n\n  private async loadSyncQueue(): Promise<void> {\n    try {\n      let currentUserId = await AsyncStorage.getItem('currentUserId');\n      try {\n        const { default: supabase } = await import('@/services/supabase');\n        const uid = (supabase as any)?.getCurrentUser?.() || (supabase as any)?.currentUser || null;\n        if (uid && typeof uid === 'object' && uid.id) currentUserId = uid.id;\n      } catch {}\n      const queueKey = `syncQueue_${safeStorageKey(currentUserId as any)}`;\n      const queueData = await AsyncStorage.getItem(queueKey);\n      if (queueData) {\n        this.syncQueue = JSON.parse(queueData);\n      }\n    } catch (error) {\n      console.error('Error loading sync queue:', error);\n    }\n  }\n\n  private async saveSyncQueue(): Promise<void> {\n    try {\n      let currentUserId = await AsyncStorage.getItem('currentUserId');\n      try {\n        const { default: supabase } = await import('@/services/supabase');\n        const uid = (supabase as any)?.getCurrentUser?.() || (supabase as any)?.currentUser || null;\n        if (uid && typeof uid === 'object' && uid.id) currentUserId = uid.id;\n      } catch {}\n      const queueKey = `syncQueue_${safeStorageKey(currentUserId as any)}`;\n      await AsyncStorage.setItem(queueKey, JSON.stringify(this.syncQueue));\n    } catch (error) {\n      console.error('Error saving sync queue:', error);\n    }\n  }\n\n  async addToSyncQueue(item: Omit<SyncQueueItem, 'id' | 'timestamp' | 'retryCount'>): Promise<void> {\n    // ✅ F-01 FIX: Guard against unsupported entities (ERP remnants)\n    const SUPPORTED_ENTITIES = new Set([\n      'compulsion', 'achievement', 'mood_entry', 'ai_profile', 'treatment_plan', 'voice_checkin', 'thought_record'\n    ]);\n    \n    if (!SUPPORTED_ENTITIES.has(item.entity as any)) {\n      console.warn('🚫 Dropping unsupported entity from sync queue:', item.entity);\n      try {\n        const { trackAIInteraction, AIEventType } = await import('@/features/ai/telemetry/aiTelemetry');\n        await trackAIInteraction(AIEventType.SYSTEM_STATUS, {\n          event: 'unsupported_entity_dropped',\n          entity: item.entity,\n          type: item.type\n        });\n      } catch (error) {\n        console.log('Failed to track unsupported entity drop:', error);\n      }\n      return; // Drop the item silently\n    }\n\n    const syncItem: SyncQueueItem = {\n      ...item,\n      id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: Date.now(),\n      retryCount: 0,\n      deviceId: await AsyncStorage.getItem('device_id') || 'unknown_device',\n      lastModified: Date.now()\n    };\n\n    this.syncQueue.push(syncItem);\n    await this.saveSyncQueue();\n\n    // If online, try to sync immediately\n    if (this.isOnline) {\n      this.processSyncQueue();\n    }\n  }\n\n  async processSyncQueue(): Promise<void> {\n    if (this.isSyncing || !this.isOnline || this.syncQueue.length === 0) {\n      return;\n    }\n\n    this.isSyncing = true;\n\n    try {\n      const summary = { successful: 0, failed: 0, conflicts: 0 };\n      const itemsToSync = [...this.syncQueue];\n      const batchSize = batchOptimizer.calculate(itemsToSync.length);\n      const startBatchAt = Date.now();\n      \n      for (let i = 0; i < itemsToSync.length; i++) {\n        const item = itemsToSync[i];\n        \n        try {\n          await syncCircuitBreaker.execute(() => this.syncItem(item));\n          summary.successful++;\n          \n          // Remove from queue if successful\n          this.syncQueue = this.syncQueue.filter(queueItem => queueItem.id !== item.id);\n        } catch (error) {\n          console.error('Error syncing item:', error);\n          \n          // Increment retry count\n          const queueItem = this.syncQueue.find(q => q.id === item.id);\n          if (queueItem) {\n            queueItem.retryCount++;\n            \n            // Exponential backoff with jitter\n            const base = 2000; // 2s\n            const delay = Math.min(base * Math.pow(2, queueItem.retryCount), 60000) + Math.floor(Math.random() * 500);\n            await new Promise(res => setTimeout(res, delay));\n            // Remove to dead-letter if max retries reached\n            if (queueItem.retryCount >= 8) {\n              this.syncQueue = this.syncQueue.filter(q => q.id !== item.id);\n              await this.handleFailedSync(queueItem);\n              summary.failed++;\n            }\n          }\n        }\n      }\n\n      await this.saveSyncQueue();\n      batchOptimizer.record(batchSize, summary.failed === 0, Date.now() - startBatchAt);\n      \n      // ✅ F-08 FIX: Emit cache invalidation events for successful syncs\n      if (summary.successful > 0) {\n        try {\n          const { emitSyncCompleted } = await import('@/hooks/useCacheInvalidation');\n          const syncedEntities = Array.from(new Set(\n            itemsToSync.slice(0, summary.successful).map(item => item.entity)\n          ));\n          \n          // Get userId from first successful item\n          const firstItem = itemsToSync.find(item => item.data?.user_id || item.data?.userId);\n          const userId = firstItem?.data?.user_id || firstItem?.data?.userId;\n          \n          emitSyncCompleted(syncedEntities, userId);\n          console.log('🔄 Cache invalidation triggered for:', syncedEntities);\n        } catch (error) {\n          console.warn('⚠️ Failed to emit cache invalidation:', error);\n        }\n      }\n      \n      try {\n        console.log('🧾 Sync summary:', summary);\n        await AsyncStorage.setItem('last_sync_summary', JSON.stringify({ ...summary, at: new Date().toISOString() }));\n        // Persist daily conflictRate for tracking charts\n        try {\n          const { default: performanceMetricsService } = await import('@/services/telemetry/performanceMetricsService');\n          const total = summary.successful + summary.failed + summary.conflicts;\n          const conflictRate = total > 0 ? summary.conflicts / total : 0;\n          await performanceMetricsService.recordToday({ sync: { conflictRate } });\n        } catch {}\n      } catch {}\n    } finally {\n      this.isSyncing = false;\n    }\n  }\n\n  private async syncItem(item: SyncQueueItem): Promise<void> {\n    switch (item.entity) {\n      case 'compulsion':\n        await this.syncCompulsion(item);\n        break;\n      // ✅ REMOVED: erp_session case - ERP module deleted\n      case 'ai_profile':\n        await this.syncAIProfile(item);\n        break;\n      case 'treatment_plan':\n        await this.syncTreatmentPlan(item);\n        break;\n      case 'achievement':\n        await this.syncAchievement(item);\n        break;\n      case 'mood_entry':\n        await this.syncMoodEntry(item);\n        break;\n      case 'voice_checkin':\n        await this.syncVoiceCheckin(item);\n        break;\n      case 'thought_record':\n        await this.syncThoughtRecord(item);\n        break;\n      default:\n        throw new Error(`Unknown entity type: ${item.entity}`);\n    }\n  }\n\n  private async syncCompulsion(item: SyncQueueItem): Promise<void> {\n    // Fetch server state if applicable (best-effort) via Supabase\n    let remote: any = null;\n    try {\n      if (item.type !== 'CREATE' && item.data?.id) {\n        const { default: svc } = await import('@/services/supabase');\n        const list = await (svc as any).getCompulsions(item.data.user_id);\n        remote = Array.isArray(list) ? list.find((x: any) => x.id === item.data.id) : null;\n      }\n    } catch {}\n\n          // Resolve conflicts using unified resolver\n      const conflictResult = await unifiedConflictResolver.resolveConflict(\n        'compulsion', \n        item.data, \n        remote, \n        item.data.user_id\n      );\n      const resolved = conflictResult.resultData;\n\n    const { default: svc } = await import('@/services/supabase');\n    switch (item.type) {\n      case 'CREATE':\n        await (svc as any).saveCompulsion(resolved);\n        break;\n      case 'UPDATE':\n        await (svc as any).saveCompulsion(resolved);\n        break;\n      case 'DELETE':\n        await (svc as any).deleteCompulsion(item.data.id);\n        break;\n    }\n  }\n\n  // ✅ REMOVED: syncERPSession method - ERP module deleted\n\n  private async syncAIProfile(item: SyncQueueItem): Promise<void> {\n    const { default: svc } = await import('@/services/supabase');\n    const d = item.data || {};\n    await (svc as any).upsertAIProfile(d.user_id, d.profile_data, !!d.onboarding_completed);\n  }\n\n  private async syncTreatmentPlan(item: SyncQueueItem): Promise<void> {\n    const { default: svc } = await import('@/services/supabase');\n    const d = item.data || {};\n    await (svc as any).upsertAITreatmentPlan(d.user_id, d.plan_data, d.status || 'active');\n  }\n\n  // user_progress kaldırıldı – progress senkronizasyonu AI profiline taşındı (gerektiğinde ayrı servis kullanılacak)\n\n  private async syncAchievement(item: SyncQueueItem): Promise<void> {\n    // Sync achievements to Supabase\n    try {\n      const { default: svc } = await import('@/services/supabase');\n      const d = item.data || {};\n      switch (item.type) {\n        case 'CREATE': {\n          const { error } = await (svc as any).supabaseClient\n            .from('user_achievements')\n            .upsert({\n              user_id: d.user_id,\n              achievement_id: d.achievement_id,\n              unlocked_at: d.unlocked_at || new Date().toISOString(),\n              progress: d.progress ?? 100,\n              metadata: d.metadata || {},\n              updated_at: new Date().toISOString(),\n            }, { onConflict: 'user_id,achievement_id' });\n          if (error) throw error;\n          break;\n        }\n        case 'UPDATE': {\n          const { error } = await (svc as any).supabaseClient\n            .from('user_achievements')\n            .update({\n              progress: d.progress,\n              metadata: d.metadata,\n              updated_at: new Date().toISOString(),\n            })\n            .eq('user_id', d.user_id)\n            .eq('achievement_id', d.achievement_id);\n          if (error) throw error;\n          break;\n        }\n      }\n    } catch (e) {\n      console.warn('Achievement sync failed:', e);\n      throw e;\n    }\n  }\n\n  // ✅ F-04 FIX: Add DELETE handling to mood entry sync\n  private async syncMoodEntry(item: SyncQueueItem): Promise<void> {\n    const raw = item.data || {};\n    const { default: svc } = await import('@/services/supabase');\n\n    // Handle DELETE operations\n    if (item.type === 'DELETE') {\n      if (raw.id) {\n        try {\n          await (svc as any).deleteMoodEntry(raw.id);\n          console.log('✅ Mood entry deleted successfully:', raw.id);\n        } catch (error) {\n          console.warn('⚠️ Mood entry deletion failed:', error);\n          throw error; // Let it retry via DLQ\n        }\n      } else {\n        console.log('⚠️ DELETE skipped: missing mood entry id');\n      }\n      return;\n    }\n\n    // Handle CREATE/UPDATE operations\n    // Normalize payload and save to the new canonical table: mood_entries\n    // Fallback user id acquisition\n    let userId = raw.user_id || raw.userId;\n    try {\n      const uid = (svc as any)?.getCurrentUser?.() || (svc as any)?.currentUser || null;\n      if (!userId && uid && typeof uid === 'object' && uid.id) userId = uid.id;\n    } catch {}\n\n    const entry = {\n      user_id: userId,\n      mood_score: raw.mood_score ?? raw.mood ?? 50,\n      energy_level: raw.energy_level ?? raw.energy ?? 5,\n      anxiety_level: raw.anxiety_level ?? raw.anxiety ?? 5,\n      notes: raw.notes || '',\n      trigger: raw.trigger || '',\n    };\n\n    await (svc as any).saveMoodEntry(entry);\n  }\n\n  // ✅ F-04 FIX: Complete DELETE implementation for voice checkins\n  private async syncVoiceCheckin(item: SyncQueueItem): Promise<void> {\n    const { default: svc } = await import('@/services/supabase');\n    switch (item.type) {\n      case 'CREATE':\n      case 'UPDATE':\n        await (svc as any).saveVoiceCheckin(item.data);\n        break;\n      case 'DELETE':\n        // ✅ F-04 FIX: Implement voice checkin deletion\n        if (item.data?.id) {\n          try {\n            await (svc as any).deleteVoiceCheckin(item.data.id);\n            console.log('✅ Voice checkin deleted successfully:', item.data.id);\n          } catch (error) {\n            console.warn('⚠️ Voice checkin deletion failed:', error);\n            throw error; // Let it retry via DLQ\n          }\n        } else {\n          console.log('⚠️ DELETE skipped: missing voice checkin id');\n        }\n        break;\n    }\n  }\n\n  // ✅ F-04 FIX: Complete DELETE implementation for thought records\n  private async syncThoughtRecord(item: SyncQueueItem): Promise<void> {\n    const { default: svc } = await import('@/services/supabase');\n    switch (item.type) {\n      case 'CREATE':\n      case 'UPDATE':\n        // Check if it's a CBT record or regular thought record\n        if (item.data.thought && item.data.distortions) {\n          // CBT record format\n          await (svc as any).saveCBTRecord(item.data);\n        } else if (item.data.automatic_thought) {\n          // Regular thought record\n          await (svc as any).saveThoughtRecord(item.data);\n        } else {\n          console.warn('Unknown thought record format:', item.data);\n        }\n        break;\n      case 'DELETE':\n        // ✅ F-04 FIX: Implement thought record deletion\n        if (item.data?.id) {\n          try {\n            await (svc as any).deleteThoughtRecord(item.data.id);\n            console.log('✅ Thought record deleted successfully:', item.data.id);\n          } catch (error) {\n            console.warn('⚠️ Thought record deletion failed:', error);\n            throw error; // Let it retry via DLQ\n          }\n        } else {\n          console.log('⚠️ DELETE skipped: missing thought record id');\n        }\n        break;\n    }\n  }\n\n  private async handleFailedSync(item: SyncQueueItem): Promise<void> {\n    console.error('Failed to sync item after max retries:', item);\n    try {\n      await deadLetterQueue.addToDeadLetter({\n        id: item.id,\n        type: item.type,\n        entity: item.entity,\n        data: item.data,\n        errorMessage: 'Max retries exceeded',\n      });\n    } catch (e) {\n      // Fallback: persist minimal info\n      const currentUserId = await AsyncStorage.getItem('currentUserId');\n      const failedKey = `failedSyncItems_${safeStorageKey(currentUserId as any)}`;\n      const failedItems = await AsyncStorage.getItem(failedKey);\n      const failed = failedItems ? JSON.parse(failedItems) : [];\n      failed.push(item);\n      await AsyncStorage.setItem(failedKey, JSON.stringify(failed));\n    }\n  }\n\n  // Local storage methods for offline operations\n  async storeCompulsionLocally(compulsion: any): Promise<void> {\n    try {\n      const currentUserId = await AsyncStorage.getItem('currentUserId');\n      const localKey = `localCompulsions_${safeStorageKey(currentUserId as any)}`;\n      const stored = await AsyncStorage.getItem(localKey);\n      const compulsions = stored ? JSON.parse(stored) : [];\n      \n      compulsions.push({\n        ...compulsion,\n        localId: `local_${Date.now()}`,\n        synced: false,\n        createdAt: new Date().toISOString(),\n      });\n      \n      await AsyncStorage.setItem(localKey, JSON.stringify(compulsions));\n      \n      // Add to sync queue\n      await this.addToSyncQueue({\n        type: 'CREATE',\n        entity: 'compulsion',\n        data: compulsion,\n      });\n    } catch (error) {\n      console.error('Error storing compulsion locally:', error);\n    }\n  }\n\n  async getLocalCompulsions(): Promise<any[]> {\n    try {\n      const currentUserId = await AsyncStorage.getItem('currentUserId');\n      const localKey = `localCompulsions_${safeStorageKey(currentUserId as any)}`;\n      const stored = await AsyncStorage.getItem(localKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error getting local compulsions:', error);\n      return [];\n    }\n  }\n\n  // ✅ F-01 FIX: ERP session methods REMOVED\n  // ERP module has been deleted from the application.\n  // These methods were creating ghost 'erp_session' entities in the sync queue.\n  // If legacy code calls these methods, they will be no-ops.\n\n  isOnlineMode(): boolean {\n    return this.isOnline;\n  }\n\n  getSyncQueueLength(): number {\n    return this.syncQueue.length;\n  }\n\n  async forceSyncNow(): Promise<boolean> {\n    if (!this.isOnline) {\n      return false;\n    }\n\n    await this.processSyncQueue();\n    return this.syncQueue.length === 0;\n  }\n\n  async clearSyncQueue(): Promise<void> {\n    this.syncQueue = [];\n    await this.saveSyncQueue();\n  }\n\n  /**\n   * Batch conflict-aware sync entrypoint\n   */\n  async syncWithConflictResolution(batchSize: number = 10): Promise<{ successful: number; failed: number; conflicts: number; }>{\n    const result = { successful: 0, failed: 0, conflicts: 0 };\n    if (!this.isOnline || this.syncQueue.length === 0) return result;\n    const items = [...this.syncQueue];\n    for (let i = 0; i < items.length; i += batchSize) {\n      const batch = items.slice(i, i + batchSize);\n      const settled = await Promise.allSettled(batch.map((it) => this.syncItem(it)));\n      settled.forEach((r, idx) => {\n        if (r.status === 'fulfilled') {\n          result.successful++;\n          this.syncQueue = this.syncQueue.filter(q => q.id !== batch[idx].id);\n        } else {\n          result.failed++;\n        }\n      });\n      await this.saveSyncQueue();\n    }\n    try { await AsyncStorage.setItem('last_sync_summary', JSON.stringify({ ...result, at: new Date().toISOString() })); } catch {}\n    return result;\n  }\n}\n\nexport const offlineSyncService = OfflineSyncService.getInstance();\n"],"mappings":"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","ignoreList":[]}