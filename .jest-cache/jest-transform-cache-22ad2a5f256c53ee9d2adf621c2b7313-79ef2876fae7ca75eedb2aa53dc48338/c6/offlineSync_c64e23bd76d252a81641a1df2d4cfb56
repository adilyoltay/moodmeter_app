719fe639b211d98019c8a33f5bb53547
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.offlineSyncService = exports.OfflineSyncService = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _queryClient = require("../lib/queryClient");
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _unifiedConflictResolver = require("./unifiedConflictResolver");
var _deadLetterQueue = _interopRequireDefault(require("./sync/deadLetterQueue"));
var _circuitBreaker = require("../utils/circuitBreaker");
var _batchOptimizer = _interopRequireDefault(require("./sync/batchOptimizer"));
var OfflineSyncService = exports.OfflineSyncService = function () {
  function OfflineSyncService() {
    (0, _classCallCheck2.default)(this, OfflineSyncService);
    this.isOnline = true;
    this.syncQueue = [];
    this.isSyncing = false;
    this.initializeNetworkListener();
    this.loadSyncQueue();
  }
  return (0, _createClass2.default)(OfflineSyncService, [{
    key: "initializeNetworkListener",
    value: function initializeNetworkListener() {
      var _this = this;
      _netinfo.default.addEventListener(function (state) {
        var _state$isConnected;
        var wasOffline = !_this.isOnline;
        _this.isOnline = (_state$isConnected = state.isConnected) != null ? _state$isConnected : false;
        if (wasOffline && _this.isOnline) {
          _this.processSyncQueue();
        }
      });
    }
  }, {
    key: "loadSyncQueue",
    value: function () {
      var _loadSyncQueue = (0, _asyncToGenerator2.default)(function* () {
        try {
          var currentUserId = yield _asyncStorage.default.getItem('currentUserId');
          try {
            var _yield$import = yield import("./supabase"),
              supabase = _yield$import.default;
            var uid = (supabase == null || supabase.getCurrentUser == null ? void 0 : supabase.getCurrentUser()) || (supabase == null ? void 0 : supabase.currentUser) || null;
            if (uid && typeof uid === 'object' && uid.id) currentUserId = uid.id;
          } catch (_unused) {}
          var queueKey = `syncQueue_${(0, _queryClient.safeStorageKey)(currentUserId)}`;
          var queueData = yield _asyncStorage.default.getItem(queueKey);
          if (queueData) {
            this.syncQueue = JSON.parse(queueData);
          }
        } catch (error) {
          console.error('Error loading sync queue:', error);
        }
      });
      function loadSyncQueue() {
        return _loadSyncQueue.apply(this, arguments);
      }
      return loadSyncQueue;
    }()
  }, {
    key: "saveSyncQueue",
    value: function () {
      var _saveSyncQueue = (0, _asyncToGenerator2.default)(function* () {
        try {
          var currentUserId = yield _asyncStorage.default.getItem('currentUserId');
          try {
            var _yield$import2 = yield import("./supabase"),
              supabase = _yield$import2.default;
            var uid = (supabase == null || supabase.getCurrentUser == null ? void 0 : supabase.getCurrentUser()) || (supabase == null ? void 0 : supabase.currentUser) || null;
            if (uid && typeof uid === 'object' && uid.id) currentUserId = uid.id;
          } catch (_unused2) {}
          var queueKey = `syncQueue_${(0, _queryClient.safeStorageKey)(currentUserId)}`;
          yield _asyncStorage.default.setItem(queueKey, JSON.stringify(this.syncQueue));
        } catch (error) {
          console.error('Error saving sync queue:', error);
        }
      });
      function saveSyncQueue() {
        return _saveSyncQueue.apply(this, arguments);
      }
      return saveSyncQueue;
    }()
  }, {
    key: "addToSyncQueue",
    value: function () {
      var _addToSyncQueue = (0, _asyncToGenerator2.default)(function* (item) {
        var SUPPORTED_ENTITIES = new Set(['compulsion', 'achievement', 'mood_entry', 'ai_profile', 'treatment_plan', 'voice_checkin', 'thought_record']);
        if (!SUPPORTED_ENTITIES.has(item.entity)) {
          console.warn('🚫 Dropping unsupported entity from sync queue:', item.entity);
          try {
            var _yield$import3 = yield import("../features/ai/telemetry/aiTelemetry"),
              trackAIInteraction = _yield$import3.trackAIInteraction,
              AIEventType = _yield$import3.AIEventType;
            yield trackAIInteraction(AIEventType.SYSTEM_STATUS, {
              event: 'unsupported_entity_dropped',
              entity: item.entity,
              type: item.type
            });
          } catch (error) {
            console.log('Failed to track unsupported entity drop:', error);
          }
          return;
        }
        var syncItem = Object.assign({}, item, {
          id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          timestamp: Date.now(),
          retryCount: 0,
          deviceId: (yield _asyncStorage.default.getItem('device_id')) || 'unknown_device',
          lastModified: Date.now()
        });
        this.syncQueue.push(syncItem);
        yield this.saveSyncQueue();
        if (this.isOnline) {
          this.processSyncQueue();
        }
      });
      function addToSyncQueue(_x) {
        return _addToSyncQueue.apply(this, arguments);
      }
      return addToSyncQueue;
    }()
  }, {
    key: "processSyncQueue",
    value: function () {
      var _processSyncQueue = (0, _asyncToGenerator2.default)(function* () {
        var _this2 = this;
        if (this.isSyncing || !this.isOnline || this.syncQueue.length === 0) {
          return;
        }
        this.isSyncing = true;
        try {
          var summary = {
            successful: 0,
            failed: 0,
            conflicts: 0
          };
          var itemsToSync = (0, _toConsumableArray2.default)(this.syncQueue);
          var batchSize = _batchOptimizer.default.calculate(itemsToSync.length);
          var startBatchAt = Date.now();
          var _loop = function* _loop() {
            var item = itemsToSync[i];
            try {
              yield _circuitBreaker.syncCircuitBreaker.execute(function () {
                return _this2.syncItem(item);
              });
              summary.successful++;
              _this2.syncQueue = _this2.syncQueue.filter(function (queueItem) {
                return queueItem.id !== item.id;
              });
            } catch (error) {
              console.error('Error syncing item:', error);
              var queueItem = _this2.syncQueue.find(function (q) {
                return q.id === item.id;
              });
              if (queueItem) {
                queueItem.retryCount++;
                var base = 2000;
                var delay = Math.min(base * Math.pow(2, queueItem.retryCount), 60000) + Math.floor(Math.random() * 500);
                yield new Promise(function (res) {
                  return setTimeout(res, delay);
                });
                if (queueItem.retryCount >= 8) {
                  _this2.syncQueue = _this2.syncQueue.filter(function (q) {
                    return q.id !== item.id;
                  });
                  yield _this2.handleFailedSync(queueItem);
                  summary.failed++;
                }
              }
            }
          };
          for (var i = 0; i < itemsToSync.length; i++) {
            yield* _loop();
          }
          yield this.saveSyncQueue();
          _batchOptimizer.default.record(batchSize, summary.failed === 0, Date.now() - startBatchAt);
          if (summary.successful > 0) {
            try {
              var _firstItem$data, _firstItem$data2;
              var _yield$import4 = yield import("../hooks/useCacheInvalidation"),
                emitSyncCompleted = _yield$import4.emitSyncCompleted;
              var syncedEntities = Array.from(new Set(itemsToSync.slice(0, summary.successful).map(function (item) {
                return item.entity;
              })));
              var firstItem = itemsToSync.find(function (item) {
                var _item$data, _item$data2;
                return ((_item$data = item.data) == null ? void 0 : _item$data.user_id) || ((_item$data2 = item.data) == null ? void 0 : _item$data2.userId);
              });
              var userId = (firstItem == null || (_firstItem$data = firstItem.data) == null ? void 0 : _firstItem$data.user_id) || (firstItem == null || (_firstItem$data2 = firstItem.data) == null ? void 0 : _firstItem$data2.userId);
              emitSyncCompleted(syncedEntities, userId);
              console.log('🔄 Cache invalidation triggered for:', syncedEntities);
            } catch (error) {
              console.warn('⚠️ Failed to emit cache invalidation:', error);
            }
          }
          try {
            console.log('🧾 Sync summary:', summary);
            yield _asyncStorage.default.setItem('last_sync_summary', JSON.stringify(Object.assign({}, summary, {
              at: new Date().toISOString()
            })));
            try {
              var _yield$import5 = yield import("./telemetry/performanceMetricsService"),
                performanceMetricsService = _yield$import5.default;
              var total = summary.successful + summary.failed + summary.conflicts;
              var conflictRate = total > 0 ? summary.conflicts / total : 0;
              yield performanceMetricsService.recordToday({
                sync: {
                  conflictRate: conflictRate
                }
              });
            } catch (_unused3) {}
          } catch (_unused4) {}
        } finally {
          this.isSyncing = false;
        }
      });
      function processSyncQueue() {
        return _processSyncQueue.apply(this, arguments);
      }
      return processSyncQueue;
    }()
  }, {
    key: "syncItem",
    value: function () {
      var _syncItem = (0, _asyncToGenerator2.default)(function* (item) {
        switch (item.entity) {
          case 'compulsion':
            yield this.syncCompulsion(item);
            break;
          case 'ai_profile':
            yield this.syncAIProfile(item);
            break;
          case 'treatment_plan':
            yield this.syncTreatmentPlan(item);
            break;
          case 'achievement':
            yield this.syncAchievement(item);
            break;
          case 'mood_entry':
            yield this.syncMoodEntry(item);
            break;
          case 'voice_checkin':
            yield this.syncVoiceCheckin(item);
            break;
          case 'thought_record':
            yield this.syncThoughtRecord(item);
            break;
          default:
            throw new Error(`Unknown entity type: ${item.entity}`);
        }
      });
      function syncItem(_x2) {
        return _syncItem.apply(this, arguments);
      }
      return syncItem;
    }()
  }, {
    key: "syncCompulsion",
    value: function () {
      var _syncCompulsion = (0, _asyncToGenerator2.default)(function* (item) {
        var remote = null;
        try {
          var _item$data3;
          if (item.type !== 'CREATE' && (_item$data3 = item.data) != null && _item$data3.id) {
            var _yield$import6 = yield import("./supabase"),
              _svc = _yield$import6.default;
            var list = yield _svc.getCompulsions(item.data.user_id);
            remote = Array.isArray(list) ? list.find(function (x) {
              return x.id === item.data.id;
            }) : null;
          }
        } catch (_unused5) {}
        var conflictResult = yield _unifiedConflictResolver.unifiedConflictResolver.resolveConflict('compulsion', item.data, remote, item.data.user_id);
        var resolved = conflictResult.resultData;
        var _yield$import7 = yield import("./supabase"),
          svc = _yield$import7.default;
        switch (item.type) {
          case 'CREATE':
            yield svc.saveCompulsion(resolved);
            break;
          case 'UPDATE':
            yield svc.saveCompulsion(resolved);
            break;
          case 'DELETE':
            yield svc.deleteCompulsion(item.data.id);
            break;
        }
      });
      function syncCompulsion(_x3) {
        return _syncCompulsion.apply(this, arguments);
      }
      return syncCompulsion;
    }()
  }, {
    key: "syncAIProfile",
    value: function () {
      var _syncAIProfile = (0, _asyncToGenerator2.default)(function* (item) {
        var _yield$import8 = yield import("./supabase"),
          svc = _yield$import8.default;
        var d = item.data || {};
        yield svc.upsertAIProfile(d.user_id, d.profile_data, !!d.onboarding_completed);
      });
      function syncAIProfile(_x4) {
        return _syncAIProfile.apply(this, arguments);
      }
      return syncAIProfile;
    }()
  }, {
    key: "syncTreatmentPlan",
    value: function () {
      var _syncTreatmentPlan = (0, _asyncToGenerator2.default)(function* (item) {
        var _yield$import9 = yield import("./supabase"),
          svc = _yield$import9.default;
        var d = item.data || {};
        yield svc.upsertAITreatmentPlan(d.user_id, d.plan_data, d.status || 'active');
      });
      function syncTreatmentPlan(_x5) {
        return _syncTreatmentPlan.apply(this, arguments);
      }
      return syncTreatmentPlan;
    }()
  }, {
    key: "syncAchievement",
    value: function () {
      var _syncAchievement = (0, _asyncToGenerator2.default)(function* (item) {
        try {
          var _yield$import0 = yield import("./supabase"),
            svc = _yield$import0.default;
          var d = item.data || {};
          switch (item.type) {
            case 'CREATE':
              {
                var _d$progress;
                var _yield$supabaseClient = yield svc.supabaseClient.from('user_achievements').upsert({
                    user_id: d.user_id,
                    achievement_id: d.achievement_id,
                    unlocked_at: d.unlocked_at || new Date().toISOString(),
                    progress: (_d$progress = d.progress) != null ? _d$progress : 100,
                    metadata: d.metadata || {},
                    updated_at: new Date().toISOString()
                  }, {
                    onConflict: 'user_id,achievement_id'
                  }),
                  error = _yield$supabaseClient.error;
                if (error) throw error;
                break;
              }
            case 'UPDATE':
              {
                var _yield$supabaseClient2 = yield svc.supabaseClient.from('user_achievements').update({
                    progress: d.progress,
                    metadata: d.metadata,
                    updated_at: new Date().toISOString()
                  }).eq('user_id', d.user_id).eq('achievement_id', d.achievement_id),
                  _error = _yield$supabaseClient2.error;
                if (_error) throw _error;
                break;
              }
          }
        } catch (e) {
          console.warn('Achievement sync failed:', e);
          throw e;
        }
      });
      function syncAchievement(_x6) {
        return _syncAchievement.apply(this, arguments);
      }
      return syncAchievement;
    }()
  }, {
    key: "syncMoodEntry",
    value: function () {
      var _syncMoodEntry = (0, _asyncToGenerator2.default)(function* (item) {
        var _ref, _raw$mood_score, _ref2, _raw$energy_level, _ref3, _raw$anxiety_level;
        var raw = item.data || {};
        var _yield$import1 = yield import("./supabase"),
          svc = _yield$import1.default;
        if (item.type === 'DELETE') {
          if (raw.id) {
            try {
              yield svc.deleteMoodEntry(raw.id);
              console.log('✅ Mood entry deleted successfully:', raw.id);
            } catch (error) {
              console.warn('⚠️ Mood entry deletion failed:', error);
              throw error;
            }
          } else {
            console.log('⚠️ DELETE skipped: missing mood entry id');
          }
          return;
        }
        var userId = raw.user_id || raw.userId;
        try {
          var uid = (svc == null || svc.getCurrentUser == null ? void 0 : svc.getCurrentUser()) || (svc == null ? void 0 : svc.currentUser) || null;
          if (!userId && uid && typeof uid === 'object' && uid.id) userId = uid.id;
        } catch (_unused6) {}
        var entry = {
          user_id: userId,
          mood_score: (_ref = (_raw$mood_score = raw.mood_score) != null ? _raw$mood_score : raw.mood) != null ? _ref : 50,
          energy_level: (_ref2 = (_raw$energy_level = raw.energy_level) != null ? _raw$energy_level : raw.energy) != null ? _ref2 : 5,
          anxiety_level: (_ref3 = (_raw$anxiety_level = raw.anxiety_level) != null ? _raw$anxiety_level : raw.anxiety) != null ? _ref3 : 5,
          notes: raw.notes || '',
          trigger: raw.trigger || ''
        };
        yield svc.saveMoodEntry(entry);
      });
      function syncMoodEntry(_x7) {
        return _syncMoodEntry.apply(this, arguments);
      }
      return syncMoodEntry;
    }()
  }, {
    key: "syncVoiceCheckin",
    value: function () {
      var _syncVoiceCheckin = (0, _asyncToGenerator2.default)(function* (item) {
        var _item$data4;
        var _yield$import10 = yield import("./supabase"),
          svc = _yield$import10.default;
        switch (item.type) {
          case 'CREATE':
          case 'UPDATE':
            yield svc.saveVoiceCheckin(item.data);
            break;
          case 'DELETE':
            if ((_item$data4 = item.data) != null && _item$data4.id) {
              try {
                yield svc.deleteVoiceCheckin(item.data.id);
                console.log('✅ Voice checkin deleted successfully:', item.data.id);
              } catch (error) {
                console.warn('⚠️ Voice checkin deletion failed:', error);
                throw error;
              }
            } else {
              console.log('⚠️ DELETE skipped: missing voice checkin id');
            }
            break;
        }
      });
      function syncVoiceCheckin(_x8) {
        return _syncVoiceCheckin.apply(this, arguments);
      }
      return syncVoiceCheckin;
    }()
  }, {
    key: "syncThoughtRecord",
    value: function () {
      var _syncThoughtRecord = (0, _asyncToGenerator2.default)(function* (item) {
        var _item$data5;
        var _yield$import11 = yield import("./supabase"),
          svc = _yield$import11.default;
        switch (item.type) {
          case 'CREATE':
          case 'UPDATE':
            if (item.data.thought && item.data.distortions) {
              yield svc.saveCBTRecord(item.data);
            } else if (item.data.automatic_thought) {
              yield svc.saveThoughtRecord(item.data);
            } else {
              console.warn('Unknown thought record format:', item.data);
            }
            break;
          case 'DELETE':
            if ((_item$data5 = item.data) != null && _item$data5.id) {
              try {
                yield svc.deleteThoughtRecord(item.data.id);
                console.log('✅ Thought record deleted successfully:', item.data.id);
              } catch (error) {
                console.warn('⚠️ Thought record deletion failed:', error);
                throw error;
              }
            } else {
              console.log('⚠️ DELETE skipped: missing thought record id');
            }
            break;
        }
      });
      function syncThoughtRecord(_x9) {
        return _syncThoughtRecord.apply(this, arguments);
      }
      return syncThoughtRecord;
    }()
  }, {
    key: "handleFailedSync",
    value: function () {
      var _handleFailedSync = (0, _asyncToGenerator2.default)(function* (item) {
        console.error('Failed to sync item after max retries:', item);
        try {
          yield _deadLetterQueue.default.addToDeadLetter({
            id: item.id,
            type: item.type,
            entity: item.entity,
            data: item.data,
            errorMessage: 'Max retries exceeded'
          });
        } catch (e) {
          var currentUserId = yield _asyncStorage.default.getItem('currentUserId');
          var failedKey = `failedSyncItems_${(0, _queryClient.safeStorageKey)(currentUserId)}`;
          var failedItems = yield _asyncStorage.default.getItem(failedKey);
          var failed = failedItems ? JSON.parse(failedItems) : [];
          failed.push(item);
          yield _asyncStorage.default.setItem(failedKey, JSON.stringify(failed));
        }
      });
      function handleFailedSync(_x0) {
        return _handleFailedSync.apply(this, arguments);
      }
      return handleFailedSync;
    }()
  }, {
    key: "storeCompulsionLocally",
    value: function () {
      var _storeCompulsionLocally = (0, _asyncToGenerator2.default)(function* (compulsion) {
        try {
          var currentUserId = yield _asyncStorage.default.getItem('currentUserId');
          var localKey = `localCompulsions_${(0, _queryClient.safeStorageKey)(currentUserId)}`;
          var stored = yield _asyncStorage.default.getItem(localKey);
          var compulsions = stored ? JSON.parse(stored) : [];
          compulsions.push(Object.assign({}, compulsion, {
            localId: `local_${Date.now()}`,
            synced: false,
            createdAt: new Date().toISOString()
          }));
          yield _asyncStorage.default.setItem(localKey, JSON.stringify(compulsions));
          yield this.addToSyncQueue({
            type: 'CREATE',
            entity: 'compulsion',
            data: compulsion
          });
        } catch (error) {
          console.error('Error storing compulsion locally:', error);
        }
      });
      function storeCompulsionLocally(_x1) {
        return _storeCompulsionLocally.apply(this, arguments);
      }
      return storeCompulsionLocally;
    }()
  }, {
    key: "getLocalCompulsions",
    value: function () {
      var _getLocalCompulsions = (0, _asyncToGenerator2.default)(function* () {
        try {
          var currentUserId = yield _asyncStorage.default.getItem('currentUserId');
          var localKey = `localCompulsions_${(0, _queryClient.safeStorageKey)(currentUserId)}`;
          var stored = yield _asyncStorage.default.getItem(localKey);
          return stored ? JSON.parse(stored) : [];
        } catch (error) {
          console.error('Error getting local compulsions:', error);
          return [];
        }
      });
      function getLocalCompulsions() {
        return _getLocalCompulsions.apply(this, arguments);
      }
      return getLocalCompulsions;
    }()
  }, {
    key: "isOnlineMode",
    value: function isOnlineMode() {
      return this.isOnline;
    }
  }, {
    key: "getSyncQueueLength",
    value: function getSyncQueueLength() {
      return this.syncQueue.length;
    }
  }, {
    key: "forceSyncNow",
    value: function () {
      var _forceSyncNow = (0, _asyncToGenerator2.default)(function* () {
        if (!this.isOnline) {
          return false;
        }
        yield this.processSyncQueue();
        return this.syncQueue.length === 0;
      });
      function forceSyncNow() {
        return _forceSyncNow.apply(this, arguments);
      }
      return forceSyncNow;
    }()
  }, {
    key: "clearSyncQueue",
    value: function () {
      var _clearSyncQueue = (0, _asyncToGenerator2.default)(function* () {
        this.syncQueue = [];
        yield this.saveSyncQueue();
      });
      function clearSyncQueue() {
        return _clearSyncQueue.apply(this, arguments);
      }
      return clearSyncQueue;
    }()
  }, {
    key: "syncWithConflictResolution",
    value: (function () {
      var _syncWithConflictResolution = (0, _asyncToGenerator2.default)(function* () {
        var _this3 = this;
        var batchSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
        var result = {
          successful: 0,
          failed: 0,
          conflicts: 0
        };
        if (!this.isOnline || this.syncQueue.length === 0) return result;
        var items = (0, _toConsumableArray2.default)(this.syncQueue);
        var _loop2 = function* _loop2() {
          var batch = items.slice(i, i + batchSize);
          var settled = yield Promise.allSettled(batch.map(function (it) {
            return _this3.syncItem(it);
          }));
          settled.forEach(function (r, idx) {
            if (r.status === 'fulfilled') {
              result.successful++;
              _this3.syncQueue = _this3.syncQueue.filter(function (q) {
                return q.id !== batch[idx].id;
              });
            } else {
              result.failed++;
            }
          });
          yield _this3.saveSyncQueue();
        };
        for (var i = 0; i < items.length; i += batchSize) {
          yield* _loop2();
        }
        try {
          yield _asyncStorage.default.setItem('last_sync_summary', JSON.stringify(Object.assign({}, result, {
            at: new Date().toISOString()
          })));
        } catch (_unused7) {}
        return result;
      });
      function syncWithConflictResolution() {
        return _syncWithConflictResolution.apply(this, arguments);
      }
      return syncWithConflictResolution;
    }())
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!OfflineSyncService.instance) {
        OfflineSyncService.instance = new OfflineSyncService();
      }
      return OfflineSyncService.instance;
    }
  }]);
}();
var offlineSyncService = exports.offlineSyncService = OfflineSyncService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,