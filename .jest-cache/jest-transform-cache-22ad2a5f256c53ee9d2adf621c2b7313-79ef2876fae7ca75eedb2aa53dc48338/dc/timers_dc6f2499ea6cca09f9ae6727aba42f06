a4b5436bf669d881767b62354293fddb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jestFakeTimersAreEnabled = exports.clearTimeout = void 0;
exports.runWithRealTimers = runWithRealTimers;
exports.setTimeout = exports.setImmediate = void 0;
var globalObj = typeof window === 'undefined' ? global : window;
function runWithRealTimers(callback) {
  var fakeTimersType = getJestFakeTimersType();
  if (fakeTimersType) {
    jest.useRealTimers();
  }
  var callbackReturnValue = callback();
  if (fakeTimersType) {
    var fakeTimersConfig = getFakeTimersConfigFromType(fakeTimersType);
    jest.useFakeTimers(fakeTimersConfig);
  }
  return callbackReturnValue;
}
function getJestFakeTimersType() {
  if (typeof jest === 'undefined' || typeof globalObj.setTimeout === 'undefined' || process.env.RNTL_SKIP_AUTO_DETECT_FAKE_TIMERS) {
    return null;
  }
  if (typeof globalObj.setTimeout._isMockFunction !== 'undefined' && globalObj.setTimeout._isMockFunction) {
    return 'legacy';
  }
  if (typeof globalObj.setTimeout.clock !== 'undefined' && typeof jest.getRealSystemTime !== 'undefined') {
    try {
      jest.getRealSystemTime();
      return 'modern';
    } catch (_unused) {}
  }
  return null;
}
function getFakeTimersConfigFromType(type) {
  return type === 'legacy' ? {
    legacyFakeTimers: true
  } : {
    legacyFakeTimers: false
  };
}
var jestFakeTimersAreEnabled = function jestFakeTimersAreEnabled() {
  return Boolean(getJestFakeTimersType());
};
exports.jestFakeTimersAreEnabled = jestFakeTimersAreEnabled;
function setImmediatePolyfill(fn) {
  return globalObj.setTimeout(fn, 0);
}
function bindTimeFunctions() {
  return {
    clearTimeoutFn: globalObj.clearTimeout,
    setImmediateFn: globalObj.setImmediate || setImmediatePolyfill,
    setTimeoutFn: globalObj.setTimeout
  };
}
var _runWithRealTimers = runWithRealTimers(bindTimeFunctions),
  clearTimeoutFn = _runWithRealTimers.clearTimeoutFn,
  setImmediateFn = _runWithRealTimers.setImmediateFn,
  setTimeoutFn = _runWithRealTimers.setTimeoutFn;
exports.setTimeout = setTimeoutFn;
exports.setImmediate = setImmediateFn;
exports.clearTimeout = clearTimeoutFn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWxPYmoiLCJ3aW5kb3ciLCJnbG9iYWwiLCJydW5XaXRoUmVhbFRpbWVycyIsImNhbGxiYWNrIiwiZmFrZVRpbWVyc1R5cGUiLCJnZXRKZXN0RmFrZVRpbWVyc1R5cGUiLCJqZXN0IiwidXNlUmVhbFRpbWVycyIsImNhbGxiYWNrUmV0dXJuVmFsdWUiLCJmYWtlVGltZXJzQ29uZmlnIiwiZ2V0RmFrZVRpbWVyc0NvbmZpZ0Zyb21UeXBlIiwidXNlRmFrZVRpbWVycyIsInNldFRpbWVvdXQiLCJwcm9jZXNzIiwiZW52IiwiUk5UTF9TS0lQX0FVVE9fREVURUNUX0ZBS0VfVElNRVJTIiwiX2lzTW9ja0Z1bmN0aW9uIiwiY2xvY2siLCJnZXRSZWFsU3lzdGVtVGltZSIsIl91bnVzZWQiLCJ0eXBlIiwibGVnYWN5RmFrZVRpbWVycyIsImplc3RGYWtlVGltZXJzQXJlRW5hYmxlZCIsIkJvb2xlYW4iLCJleHBvcnRzIiwic2V0SW1tZWRpYXRlUG9seWZpbGwiLCJmbiIsImJpbmRUaW1lRnVuY3Rpb25zIiwiY2xlYXJUaW1lb3V0Rm4iLCJjbGVhclRpbWVvdXQiLCJzZXRJbW1lZGlhdGVGbiIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXRGbiIsIl9ydW5XaXRoUmVhbFRpbWVycyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3RpbWVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb3N0IGNvbnRlbnQgb2YgdGhpcyBmaWxlIHNvdXJjZWQgZGlyZWN0bHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdGVzdGluZy1saWJyYXJ5L2RvbS10ZXN0aW5nLWxpYnJhcnkvYmxvYi9tYWluL3NyYy9oZWxwZXJzLmpzXG4vKiBnbG9iYWxzIGplc3QgKi9cbmNvbnN0IGdsb2JhbE9iaiA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93O1xuXG50eXBlIEZha2VUaW1lcnNUeXBlcyA9ICdtb2Rlcm4nIHwgJ2xlZ2FjeSc7XG5cbi8vIEN1cnJlbnRseSB0aGlzIGZuIG9ubHkgc3VwcG9ydHMgamVzdCB0aW1lcnMsIGJ1dCBpdCBjb3VsZCBzdXBwb3J0IG90aGVyIHRlc3QgcnVubmVycyBpbiB0aGUgZnV0dXJlLlxuZnVuY3Rpb24gcnVuV2l0aFJlYWxUaW1lcnM8VD4oY2FsbGJhY2s6ICgpID0+IFQpOiBUIHtcbiAgY29uc3QgZmFrZVRpbWVyc1R5cGUgPSBnZXRKZXN0RmFrZVRpbWVyc1R5cGUoKTtcbiAgaWYgKGZha2VUaW1lcnNUeXBlKSB7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gIH1cblxuICBjb25zdCBjYWxsYmFja1JldHVyblZhbHVlID0gY2FsbGJhY2soKTtcblxuICBpZiAoZmFrZVRpbWVyc1R5cGUpIHtcbiAgICBjb25zdCBmYWtlVGltZXJzQ29uZmlnID0gZ2V0RmFrZVRpbWVyc0NvbmZpZ0Zyb21UeXBlKGZha2VUaW1lcnNUeXBlKTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoZmFrZVRpbWVyc0NvbmZpZyk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2tSZXR1cm5WYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0SmVzdEZha2VUaW1lcnNUeXBlKCk6IEZha2VUaW1lcnNUeXBlcyB8IG51bGwge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKFxuICAgIHR5cGVvZiBqZXN0ID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBnbG9iYWxPYmouc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICBwcm9jZXNzLmVudi5STlRMX1NLSVBfQVVUT19ERVRFQ1RfRkFLRV9USU1FUlNcbiAgKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBqZXN0IG11dGF0ZXMgc2V0VGltZW91dFxuICAgIHR5cGVvZiBnbG9iYWxPYmouc2V0VGltZW91dC5faXNNb2NrRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBqZXN0IG11dGF0ZXMgc2V0VGltZW91dFxuICAgIGdsb2JhbE9iai5zZXRUaW1lb3V0Ll9pc01vY2tGdW5jdGlvblxuICApIHtcbiAgICByZXR1cm4gJ2xlZ2FjeSc7XG4gIH1cblxuICBpZiAoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBqZXN0IG11dGF0ZXMgc2V0VGltZW91dFxuICAgIHR5cGVvZiBnbG9iYWxPYmouc2V0VGltZW91dC5jbG9jayAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgamVzdC5nZXRSZWFsU3lzdGVtVGltZSAhPT0gJ3VuZGVmaW5lZCdcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGplc3QuZ2V0UmVhbFN5c3RlbVRpbWUgaXMgb25seSBzdXBwb3J0ZWQgZm9yIEplc3QncyBgbW9kZXJuYCBmYWtlIHRpbWVycyBhbmQgb3RoZXJ3aXNlIHRocm93c1xuICAgICAgamVzdC5nZXRSZWFsU3lzdGVtVGltZSgpO1xuICAgICAgcmV0dXJuICdtb2Rlcm4nO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gbm90IHVzaW5nIEplc3QncyBtb2Rlcm4gZmFrZSB0aW1lcnNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RmFrZVRpbWVyc0NvbmZpZ0Zyb21UeXBlKHR5cGU6IEZha2VUaW1lcnNUeXBlcykge1xuICByZXR1cm4gdHlwZSA9PT0gJ2xlZ2FjeScgPyB7IGxlZ2FjeUZha2VUaW1lcnM6IHRydWUgfSA6IHsgbGVnYWN5RmFrZVRpbWVyczogZmFsc2UgfTtcbn1cblxuY29uc3QgamVzdEZha2VUaW1lcnNBcmVFbmFibGVkID0gKCk6IGJvb2xlYW4gPT4gQm9vbGVhbihnZXRKZXN0RmFrZVRpbWVyc1R5cGUoKSk7XG5cbi8vIHdlIG9ubHkgcnVuIG91ciB0ZXN0cyBpbiBub2RlLCBhbmQgc2V0SW1tZWRpYXRlIGlzIHN1cHBvcnRlZCBpbiBub2RlLlxuZnVuY3Rpb24gc2V0SW1tZWRpYXRlUG9seWZpbGwoZm46ICgpID0+IHZvaWQpIHtcbiAgcmV0dXJuIGdsb2JhbE9iai5zZXRUaW1lb3V0KGZuLCAwKTtcbn1cblxudHlwZSBCaW5kVGltZUZ1bmN0aW9ucyA9IHtcbiAgY2xlYXJUaW1lb3V0Rm46IHR5cGVvZiBjbGVhclRpbWVvdXQ7XG4gIHNldEltbWVkaWF0ZUZuOiB0eXBlb2Ygc2V0SW1tZWRpYXRlO1xuICBzZXRUaW1lb3V0Rm46IHR5cGVvZiBzZXRUaW1lb3V0O1xufTtcblxuZnVuY3Rpb24gYmluZFRpbWVGdW5jdGlvbnMoKTogQmluZFRpbWVGdW5jdGlvbnMge1xuICByZXR1cm4ge1xuICAgIGNsZWFyVGltZW91dEZuOiBnbG9iYWxPYmouY2xlYXJUaW1lb3V0LFxuICAgIHNldEltbWVkaWF0ZUZuOiBnbG9iYWxPYmouc2V0SW1tZWRpYXRlIHx8IHNldEltbWVkaWF0ZVBvbHlmaWxsLFxuICAgIHNldFRpbWVvdXRGbjogZ2xvYmFsT2JqLnNldFRpbWVvdXQsXG4gIH07XG59XG5cbmNvbnN0IHsgY2xlYXJUaW1lb3V0Rm4sIHNldEltbWVkaWF0ZUZuLCBzZXRUaW1lb3V0Rm4gfSA9IHJ1bldpdGhSZWFsVGltZXJzKFxuICBiaW5kVGltZUZ1bmN0aW9ucyxcbikgYXMgQmluZFRpbWVGdW5jdGlvbnM7XG5cbmV4cG9ydCB7XG4gIGNsZWFyVGltZW91dEZuIGFzIGNsZWFyVGltZW91dCxcbiAgamVzdEZha2VUaW1lcnNBcmVFbmFibGVkLFxuICBydW5XaXRoUmVhbFRpbWVycyxcbiAgc2V0SW1tZWRpYXRlRm4gYXMgc2V0SW1tZWRpYXRlLFxuICBzZXRUaW1lb3V0Rm4gYXMgc2V0VGltZW91dCxcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUEsSUFBTUEsU0FBUyxHQUFHLE9BQU9DLE1BQU0sS0FBSyxXQUFXLEdBQUdDLE1BQU0sR0FBR0QsTUFBTTtBQUtqRSxTQUFTRSxpQkFBaUJBLENBQUlDLFFBQWlCLEVBQUs7RUFDbEQsSUFBTUMsY0FBYyxHQUFHQyxxQkFBcUIsQ0FB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