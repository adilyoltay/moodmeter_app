42cf5c2c689f10f8bd15d8a7c2c308a1
_getJestObj().mock("../../services/supabase", function () {
  var _require = require("./utils/supabaseTestClient"),
    createSupabaseTestClient = _require.createSupabaseTestClient;
  var client = createSupabaseTestClient();
  return {
    __esModule: true,
    default: {
      supabaseClient: client
    },
    supabaseClient: client
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require2 = require("../../features/ai/core/UnifiedAIPipeline"),
  unifiedPipeline = _require2.unifiedPipeline;
var _require3 = require("./utils/supabaseTestClient"),
  createSupabaseTestClient = _require3.createSupabaseTestClient;
var userId = process.env.TEST_SEED_USER_ID || 'test-user-live-1';
var supabase = createSupabaseTestClient();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Telemetry Supabase', function () {
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:telemetry:started] and [QRlive:telemetry:completed] are recorded', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 6
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 900e3,
        mood_score: 6
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var _yield$supabase$from$ = yield supabase.from('ai_telemetry').select('event_type').eq('user_id', userId),
      data = _yield$supabase$from$.data,
      error = _yield$supabase$from$.error;
    expect(error).toBeNull();
    var events = (data || []).map(function (r) {
      return String(r.event_type);
    });
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_started');
    })).toBe(true);
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_completed');
    })).toBe(true);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQiLCJjbGllbnQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInN1cGFiYXNlQ2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZXF1aXJlNCIsImplc3QiLCJfcmVxdWlyZTIiLCJ1bmlmaWVkUGlwZWxpbmUiLCJfcmVxdWlyZTMiLCJ1c2VySWQiLCJwcm9jZXNzIiwiZW52IiwiVEVTVF9TRUVEX1VTRVJfSUQiLCJzdXBhYmFzZSIsImNsZWFudXAiLCJfY2xlYW51cCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZnJvbSIsImRlbGV0ZSIsImVxIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJURVNUX01PREUiLCJURVNUX1RUTF9NUyIsIlRFU1RfUElQRUxJTkVfU1RVQiIsIkVYUE9fUFVCTElDX0VOQUJMRV9BSSIsImFmdGVyQWxsIiwiaXQiLCJtb29kcyIsIkFycmF5IiwibGVuZ3RoIiwiXyIsImkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibW9vZF9zY29yZSIsInR5cGUiLCJjb250ZW50IiwiY29udGV4dCIsInNvdXJjZSIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJCIsInNlbGVjdCIsImRhdGEiLCJlcnJvciIsImV4cGVjdCIsInRvQmVOdWxsIiwiZXZlbnRzIiwibWFwIiwiciIsIlN0cmluZyIsImV2ZW50X3R5cGUiLCJzb21lIiwiZSIsImluY2x1ZGVzIiwidG9CZSJdLCJzb3VyY2VzIjpbIkxpdmVUZWxlbWV0cnlTdXBhYmFzZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGl2ZSBTdXBhYmFzZSBUZXN0cyDigJQgVGVsZW1ldHJ5IChRUmxpdmUpXG4gKiBUYWdzOiBbUVJsaXZlOnRlbGVtZXRyeTpzdGFydGVkXSBbUVJsaXZlOnRlbGVtZXRyeTpjb21wbGV0ZWRdXG4gKi9cbmplc3QubW9jaygnQC9zZXJ2aWNlcy9zdXBhYmFzZScsICgpID0+IHtcbiAgY29uc3QgeyBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQgfSA9IHJlcXVpcmUoJy4vdXRpbHMvc3VwYWJhc2VUZXN0Q2xpZW50Jyk7XG4gIGNvbnN0IGNsaWVudCA9IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCgpO1xuICByZXR1cm4ge1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgZGVmYXVsdDogeyBzdXBhYmFzZUNsaWVudDogY2xpZW50IH0sXG4gICAgc3VwYWJhc2VDbGllbnQ6IGNsaWVudCxcbiAgfTtcbn0pO1xuXG5jb25zdCB7IHVuaWZpZWRQaXBlbGluZSB9ID0gcmVxdWlyZSgnQC9mZWF0dXJlcy9haS9jb3JlL1VuaWZpZWRBSVBpcGVsaW5lJyk7XG5jb25zdCB7IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCB9ID0gcmVxdWlyZSgnLi91dGlscy9zdXBhYmFzZVRlc3RDbGllbnQnKTtcblxuY29uc3QgdXNlcklkID0gcHJvY2Vzcy5lbnYuVEVTVF9TRUVEX1VTRVJfSUQgfHwgJ3Rlc3QtdXNlci1saXZlLTEnO1xuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQoKTtcblxuYXN5bmMgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgYXdhaXQgc3VwYWJhc2UuZnJvbSgnYWlfdGVsZW1ldHJ5JykuZGVsZXRlKCkuZXEoJ3VzZXJfaWQnLCB1c2VySWQpO1xufVxuXG5kZXNjcmliZSgnTGl2ZSBUZWxlbWV0cnkgU3VwYWJhc2UnLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9NT0RFID0gJzEnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfVFRMX01TID0gJzUwMDAnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfUElQRUxJTkVfU1RVQiA9ICcwJztcbiAgICBwcm9jZXNzLmVudi5FWFBPX1BVQkxJQ19FTkFCTEVfQUkgPSAndHJ1ZSc7XG4gICAgYXdhaXQgY2xlYW51cCgpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgY2xlYW51cCgpO1xuICB9KTtcblxuICBpdCgnW1FSbGl2ZTp0ZWxlbWV0cnk6c3RhcnRlZF0gYW5kIFtRUmxpdmU6dGVsZW1ldHJ5OmNvbXBsZXRlZF0gYXJlIHJlY29yZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vb2RzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogNiB9LCAoXywgaSkgPT4gKHsgdGltZXN0YW1wOiBEYXRlLm5vdygpIC0gaSAqIDkwMGUzLCBtb29kX3Njb3JlOiA2IH0pKTtcbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcblxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnYWlfdGVsZW1ldHJ5JylcbiAgICAgIC5zZWxlY3QoJ2V2ZW50X3R5cGUnKVxuICAgICAgLmVxKCd1c2VyX2lkJywgdXNlcklkKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmVOdWxsKCk7XG4gICAgY29uc3QgZXZlbnRzID0gKGRhdGEgfHwgW10pLm1hcChyID0+IFN0cmluZyhyLmV2ZW50X3R5cGUpKTtcbiAgICBleHBlY3QoZXZlbnRzLnNvbWUoZSA9PiBlLmluY2x1ZGVzKCd1bmlmaWVkX3BpcGVsaW5lX3N0YXJ0ZWQnKSkpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGV2ZW50cy5zb21lKGUgPT4gZS5pbmNsdWRlcygndW5pZmllZF9waXBlbGluZV9jb21wbGV0ZWQnKSkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xufSk7XG5cblxuIl0sIm1hcHBpbmdzIjoiQUFJQUEsV0FBQSxHQUFLQyxJQUFJLDRCQUF3QixZQUFNO0VBQ3JDLElBQUFDLFFBQUEsR0FBcUND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