f990ed2883d001c67af4df2f1d11826a
'use strict';

_getJestObj().mock("../Libraries/Core/InitializeCore", function () {}).mock('../Libraries/Core/NativeExceptionsManager').mock('../Libraries/ReactNative/UIManager', function () {
  return {
    __esModule: true,
    default: {
      AndroidViewPager: {
        Commands: {
          setPage: jest.fn(),
          setPageWithoutAnimation: jest.fn()
        }
      },
      blur: jest.fn(),
      createView: jest.fn(),
      customBubblingEventTypes: {},
      customDirectEventTypes: {},
      dispatchViewManagerCommand: jest.fn(),
      focus: jest.fn(),
      getViewManagerConfig: jest.fn(function (name) {
        if (name === 'AndroidDrawerLayout') {
          return {
            Constants: {
              DrawerPosition: {
                Left: 10
              }
            }
          };
        }
      }),
      hasViewManagerConfig: jest.fn(function (name) {
        return name === 'AndroidDrawerLayout';
      }),
      measure: jest.fn(),
      manageChildren: jest.fn(),
      setChildren: jest.fn(),
      updateView: jest.fn(),
      AndroidDrawerLayout: {
        Constants: {
          DrawerPosition: {
            Left: 10
          }
        }
      },
      AndroidTextInput: {
        Commands: {}
      },
      ScrollView: {
        Constants: {}
      },
      View: {
        Constants: {}
      }
    }
  };
}).mock('../Libraries/Image/Image', function () {
  return {
    __esModule: true,
    default: mockComponent('../Libraries/Image/Image', null, true)
  };
}).mock('../Libraries/Text/Text', function () {
  return {
    __esModule: true,
    default: mockComponent('../Libraries/Text/Text', MockNativeMethods, true)
  };
}).mock('../Libraries/Components/TextInput/TextInput', function () {
  return {
    __esModule: true,
    default: mockComponent('../Libraries/Components/TextInput/TextInput', Object.assign({}, MockNativeMethods, {
      isFocused: jest.fn(),
      clear: jest.fn(),
      getNativeRef: jest.fn()
    }), true)
  };
}).mock('../Libraries/Modal/Modal', function () {
  var baseComponent = mockComponent('../Libraries/Modal/Modal', null, true);
  var mockModal = jest.requireActual("./mockModal");
  return {
    __esModule: true,
    default: mockModal(baseComponent)
  };
}).mock('../Libraries/Components/View/View', function () {
  return {
    __esModule: true,
    default: mockComponent('../Libraries/Components/View/View', MockNativeMethods, true)
  };
}).mock('../Libraries/Components/AccessibilityInfo/AccessibilityInfo', function () {
  return {
    __esModule: true,
    default: {
      addEventListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      }),
      announceForAccessibility: jest.fn(),
      announceForAccessibilityWithOptions: jest.fn(),
      isAccessibilityServiceEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isBoldTextEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isGrayscaleEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isInvertColorsEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isReduceMotionEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isHighTextContrastEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isDarkerSystemColorsEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      prefersCrossFadeTransitions: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isReduceTransparencyEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      isScreenReaderEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      setAccessibilityFocus: jest.fn(),
      sendAccessibilityEvent: jest.fn(),
      getRecommendedTimeoutMillis: jest.fn(function () {
        return Promise.resolve(false);
      })
    }
  };
}).mock('../Libraries/Components/Clipboard/Clipboard', function () {
  return {
    __esModule: true,
    default: {
      getString: jest.fn(function () {
        return '';
      }),
      setString: jest.fn()
    }
  };
}).mock('../Libraries/Components/RefreshControl/RefreshControl', function () {
  return {
    __esModule: true,
    default: jest.requireActual("../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock")
  };
}).mock('../Libraries/Components/ScrollView/ScrollView', function () {
  var baseComponent = mockComponent('../Libraries/Components/ScrollView/ScrollView', Object.assign({}, MockNativeMethods, {
    getScrollResponder: jest.fn(),
    getScrollableNode: jest.fn(),
    getInnerViewNode: jest.fn(),
    getInnerViewRef: jest.fn(),
    getNativeScrollRef: jest.fn(),
    scrollTo: jest.fn(),
    scrollToEnd: jest.fn(),
    flashScrollIndicators: jest.fn(),
    scrollResponderZoomTo: jest.fn(),
    scrollResponderScrollNativeHandleToKeyboard: jest.fn()
  }), true);
  var mockScrollView = jest.requireActual("./mockScrollView");
  return {
    __esModule: true,
    default: mockScrollView(baseComponent)
  };
}).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', function () {
  return {
    __esModule: true,
    default: mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator', null, true)
  };
}).mock('../Libraries/AppState/AppState', function () {
  return {
    __esModule: true,
    default: {
      addEventListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      }),
      removeEventListener: jest.fn(),
      currentState: jest.fn()
    }
  };
}).mock('../Libraries/Linking/Linking', function () {
  return {
    __esModule: true,
    default: {
      openURL: jest.fn(),
      canOpenURL: jest.fn(function () {
        return Promise.resolve(true);
      }),
      openSettings: jest.fn(),
      addEventListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      }),
      getInitialURL: jest.fn(function () {
        return Promise.resolve();
      }),
      sendIntent: jest.fn()
    }
  };
}).mock('../Libraries/BatchedBridge/NativeModules', function () {
  return {
    __esModule: true,
    default: {
      AlertManager: {
        alertWithArgs: jest.fn()
      },
      AsyncLocalStorage: {
        multiGet: jest.fn(function (keys, callback) {
          return process.nextTick(function () {
            return callback(null, []);
          });
        }),
        multiSet: jest.fn(function (entries, callback) {
          return process.nextTick(function () {
            return callback(null);
          });
        }),
        multiRemove: jest.fn(function (keys, callback) {
          return process.nextTick(function () {
            return callback(null);
          });
        }),
        multiMerge: jest.fn(function (entries, callback) {
          return process.nextTick(function () {
            return callback(null);
          });
        }),
        clear: jest.fn(function (callback) {
          return process.nextTick(function () {
            return callback(null);
          });
        }),
        getAllKeys: jest.fn(function (callback) {
          return process.nextTick(function () {
            return callback(null, []);
          });
        })
      },
      DeviceInfo: {
        getConstants: function getConstants() {
          return {
            Dimensions: {
              window: {
                fontScale: 2,
                height: 1334,
                scale: 2,
                width: 750
              },
              screen: {
                fontScale: 2,
                height: 1334,
                scale: 2,
                width: 750
              }
            }
          };
        }
      },
      DevSettings: {
        addMenuItem: jest.fn(),
        reload: jest.fn()
      },
      ImageLoader: {
        getSize: jest.fn(function (url) {
          return Promise.resolve([320, 240]);
        }),
        getSizeWithHeaders: jest.fn(function (url, headers) {
          return Promise.resolve({
            height: 222,
            width: 333
          });
        }),
        prefetchImage: jest.fn(),
        prefetchImageWithMetadata: jest.fn(),
        queryCache: jest.fn()
      },
      ImageViewManager: {
        getSize: jest.fn(function (uri, success) {
          return process.nextTick(function () {
            return success(320, 240);
          });
        }),
        prefetchImage: jest.fn()
      },
      KeyboardObserver: {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      },
      NativeAnimatedModule: {
        createAnimatedNode: jest.fn(),
        updateAnimatedNodeConfig: jest.fn(),
        getValue: jest.fn(),
        startListeningToAnimatedNodeValue: jest.fn(),
        stopListeningToAnimatedNodeValue: jest.fn(),
        connectAnimatedNodes: jest.fn(),
        disconnectAnimatedNodes: jest.fn(),
        startAnimatingNode: jest.fn(function (animationId, nodeTag, config, endCallback) {
          setTimeout(function () {
            return endCallback({
              finished: true
            });
          }, 16);
        }),
        stopAnimation: jest.fn(),
        setAnimatedNodeValue: jest.fn(),
        setAnimatedNodeOffset: jest.fn(),
        flattenAnimatedNodeOffset: jest.fn(),
        extractAnimatedNodeOffset: jest.fn(),
        connectAnimatedNodeToView: jest.fn(),
        disconnectAnimatedNodeFromView: jest.fn(),
        restoreDefaultValues: jest.fn(),
        dropAnimatedNode: jest.fn(),
        addAnimatedEventToView: jest.fn(),
        removeAnimatedEventFromView: jest.fn(),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeListeners: jest.fn()
      },
      Networking: {
        sendRequest: jest.fn(),
        abortRequest: jest.fn(),
        addListener: jest.fn(),
        removeListeners: jest.fn()
      },
      PlatformConstants: {
        getConstants: function getConstants() {
          return {
            reactNativeVersion: {
              major: 1000,
              minor: 0,
              patch: 0,
              prerelease: undefined
            }
          };
        }
      },
      PushNotificationManager: {
        presentLocalNotification: jest.fn(),
        scheduleLocalNotification: jest.fn(),
        cancelAllLocalNotifications: jest.fn(),
        removeAllDeliveredNotifications: jest.fn(),
        getDeliveredNotifications: jest.fn(function (callback) {
          return process.nextTick(function () {
            return [];
          });
        }),
        removeDeliveredNotifications: jest.fn(),
        setApplicationIconBadgeNumber: jest.fn(),
        getApplicationIconBadgeNumber: jest.fn(function (callback) {
          return process.nextTick(function () {
            return callback(0);
          });
        }),
        cancelLocalNotifications: jest.fn(),
        getScheduledLocalNotifications: jest.fn(function (callback) {
          return process.nextTick(function () {
            return callback();
          });
        }),
        requestPermissions: jest.fn(function () {
          return Promise.resolve({
            alert: true,
            badge: true,
            sound: true
          });
        }),
        abandonPermissions: jest.fn(),
        checkPermissions: jest.fn(function (callback) {
          return process.nextTick(function () {
            return callback({
              alert: true,
              badge: true,
              sound: true
            });
          });
        }),
        getInitialNotification: jest.fn(function () {
          return Promise.resolve(null);
        }),
        addListener: jest.fn(),
        removeListeners: jest.fn()
      },
      SourceCode: {
        getConstants: function getConstants() {
          return {
            scriptURL: null
          };
        }
      },
      StatusBarManager: {
        setColor: jest.fn(),
        setStyle: jest.fn(),
        setHidden: jest.fn(),
        setNetworkActivityIndicatorVisible: jest.fn(),
        setBackgroundColor: jest.fn(),
        setTranslucent: jest.fn(),
        getConstants: function getConstants() {
          return {
            HEIGHT: 42
          };
        }
      },
      Timing: {
        createTimer: jest.fn(),
        deleteTimer: jest.fn()
      },
      UIManager: {},
      BlobModule: {
        getConstants: function getConstants() {
          return {
            BLOB_URI_SCHEME: 'content',
            BLOB_URI_HOST: null
          };
        },
        addNetworkingHandler: jest.fn(),
        enableBlobSupport: jest.fn(),
        disableBlobSupport: jest.fn(),
        createFromParts: jest.fn(),
        sendBlob: jest.fn(),
        release: jest.fn()
      },
      WebSocketModule: {
        connect: jest.fn(),
        send: jest.fn(),
        sendBinary: jest.fn(),
        ping: jest.fn(),
        close: jest.fn(),
        addListener: jest.fn(),
        removeListeners: jest.fn()
      },
      I18nManager: {
        allowRTL: jest.fn(),
        forceRTL: jest.fn(),
        swapLeftAndRightInRTL: jest.fn(),
        getConstants: function getConstants() {
          return {
            isRTL: false,
            doLeftAndRightSwapInRTL: true
          };
        }
      }
    }
  };
}).mock('../Libraries/NativeComponent/NativeComponentRegistry', function () {
  return {
    get: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual("./mockNativeComponent").default(name);
    }),
    getWithFallback_DEPRECATED: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual("./mockNativeComponent").default(name);
    }),
    setRuntimeConfigProvider: jest.fn()
  };
}).mock('../Libraries/ReactNative/requireNativeComponent', function () {
  return jest.requireActual("./mockNativeComponent");
}).mock('../Libraries/Vibration/Vibration', function () {
  return {
    __esModule: true,
    default: {
      vibrate: jest.fn(),
      cancel: jest.fn()
    }
  };
}).mock('../Libraries/Components/View/ViewNativeComponent', function () {
  var React = require('react');
  var Component = function (_React$Component) {
    function Component() {
      (0, _classCallCheck2.default)(this, Component);
      return _callSuper(this, Component, arguments);
    }
    (0, _inherits2.default)(Component, _React$Component);
    return (0, _createClass2.default)(Component, [{
      key: "render",
      value: function render() {
        return React.createElement('View', this.props, this.props.children);
      }
    }]);
  }(React.Component);
  Component.displayName = 'View';
  return {
    __esModule: true,
    default: Component
  };
}).mock('../Libraries/ReactNative/RendererProxy', function () {
  return jest.requireActual("../Libraries/ReactNative/RendererImplementation");
}).mock('../Libraries/Utilities/useColorScheme', function () {
  return {
    __esModule: true,
    default: jest.fn().mockReturnValue('light')
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.IS_REACT_ACT_ENVIRONMENT = true;
global.IS_REACT_NATIVE_TEST_ENVIRONMENT = true;
var MockNativeMethods = jest.requireActual("./MockNativeMethods");
var mockComponent = jest.requireActual("./mockComponent");
jest.requireActual('@react-native/js-polyfills/error-guard');
Object.defineProperties(global, {
  __DEV__: {
    configurable: true,
    enumerable: true,
    value: true,
    writable: true
  },
  cancelAnimationFrame: {
    configurable: true,
    enumerable: true,
    value: function value(id) {
      return clearTimeout(id);
    },
    writable: true
  },
  nativeFabricUIManager: {
    configurable: true,
    enumerable: true,
    value: {},
    writable: true
  },
  performance: {
    configurable: true,
    enumerable: true,
    value: {
      now: jest.fn(Date.now)
    },
    writable: true
  },
  regeneratorRuntime: {
    configurable: true,
    enumerable: true,
    value: jest.requireActual('regenerator-runtime/runtime'),
    writable: true
  },
  requestAnimationFrame: {
    configurable: true,
    enumerable: true,
    value: function value(callback) {
      return setTimeout(function () {
        return callback(jest.now());
      }, 0);
    },
    writable: true
  },
  window: {
    configurable: true,
    enumerable: true,
    value: global,
    writable: true
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,