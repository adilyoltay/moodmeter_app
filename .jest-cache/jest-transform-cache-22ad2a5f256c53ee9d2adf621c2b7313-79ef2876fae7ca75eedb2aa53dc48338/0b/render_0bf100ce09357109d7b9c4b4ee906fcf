2f10a2714e71797f55f63389e5d62eae
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["wrapper", "concurrentRoot", "unstable_validateStringsRenderedWithinText"],
  _excluded2 = ["wrapper"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;
exports.renderInternal = renderInternal;
var React = _interopRequireWildcard(require("react"));
var _act = _interopRequireDefault(require("./act"));
var _cleanup = require("./cleanup");
var _config = require("./config");
var _componentTree = require("./helpers/component-tree");
var _debug = require("./helpers/debug");
var _stringValidation = require("./helpers/string-validation");
var _renderAct = require("./render-act");
var _screen = require("./screen");
var _within = require("./within");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function render(component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return renderInternal(component, options);
}
function renderInternal(component, options) {
  var _ref = options || {},
    Wrapper = _ref.wrapper,
    concurrentRoot = _ref.concurrentRoot,
    unstable_validateStringsRenderedWithinText = _ref.unstable_validateStringsRenderedWithinText,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var testRendererOptions = Object.assign({}, rest, {
    unstable_isConcurrent: concurrentRoot != null ? concurrentRoot : (0, _config.getConfig)().concurrentRoot
  });
  if (unstable_validateStringsRenderedWithinText) {
    return renderWithStringValidation(component, Object.assign({
      wrapper: Wrapper
    }, testRendererOptions));
  }
  var wrap = function wrap(element) {
    return Wrapper ? React.createElement(Wrapper, null, element) : element;
  };
  var renderer = (0, _renderAct.renderWithAct)(wrap(component), testRendererOptions);
  return buildRenderResult(renderer, wrap);
}
function renderWithStringValidation(component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _ref2 = options != null ? options : {},
    Wrapper = _ref2.wrapper,
    testRendererOptions = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  var wrap = function wrap(element) {
    return React.createElement(React.Profiler, {
      id: "renderProfiler",
      onRender: handleRender
    }, Wrapper ? React.createElement(Wrapper, null, element) : element);
  };
  var handleRender = function handleRender(_, phase) {
    if (renderer && phase === 'update') {
      (0, _stringValidation.validateStringsRenderedWithinText)(renderer.toJSON());
    }
  };
  var renderer = (0, _renderAct.renderWithAct)(wrap(component), testRendererOptions);
  (0, _stringValidation.validateStringsRenderedWithinText)(renderer.toJSON());
  return buildRenderResult(renderer, wrap);
}
function buildRenderResult(renderer, wrap) {
  var instance = renderer.root;
  var rerender = function rerender(component) {
    void (0, _act.default)(function () {
      renderer.update(wrap(component));
    });
  };
  var rerenderAsync = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (component) {
      yield (0, _act.default)((0, _asyncToGenerator2.default)(function* () {
        renderer.update(wrap(component));
      }));
    });
    return function rerenderAsync(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var unmount = function unmount() {
    void (0, _act.default)(function () {
      renderer.unmount();
    });
  };
  var unmountAsync = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      yield (0, _act.default)((0, _asyncToGenerator2.default)(function* () {
        renderer.unmount();
      }));
    });
    return function unmountAsync() {
      return _ref5.apply(this, arguments);
    };
  }();
  (0, _cleanup.addToCleanupQueue)(unmount);
  var result = Object.assign({}, (0, _within.getQueriesForElement)(instance), {
    rerender: rerender,
    rerenderAsync: rerenderAsync,
    update: rerender,
    updateAsync: rerenderAsync,
    unmount: unmount,
    unmountAsync: unmountAsync,
    toJSON: renderer.toJSON,
    debug: makeDebug(renderer),
    get root() {
      return (0, _componentTree.getHostSelves)(instance)[0];
    },
    UNSAFE_root: instance
  });
  Object.defineProperty(result, 'container', {
    enumerable: false,
    get: function get() {
      throw new Error("'container' property has been renamed to 'UNSAFE_root'.\n\n" + "Consider using 'root' property which returns root host element.");
    }
  });
  (0, _screen.setRenderResult)(result);
  return result;
}
function makeDebug(renderer) {
  function debugImpl(options) {
    var _ref7 = (0, _config.getConfig)(),
      defaultDebugOptions = _ref7.defaultDebugOptions;
    var debugOptions = Object.assign({}, defaultDebugOptions, options);
    var json = renderer.toJSON();
    if (json) {
      return (0, _debug.debug)(json, debugOptions);
    }
  }
  return debugImpl;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,