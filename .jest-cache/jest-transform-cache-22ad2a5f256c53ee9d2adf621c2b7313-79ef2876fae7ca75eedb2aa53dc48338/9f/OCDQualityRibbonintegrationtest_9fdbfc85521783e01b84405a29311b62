a0a1903c703fbaa2e9e68540d10b6b62
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    getAllKeys: jest.fn(),
    multiGet: jest.fn(),
    multiSet: jest.fn(),
    multiRemove: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    useRouter: jest.fn(function () {
      return {
        push: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    Stack: {
      Screen: 'Stack.Screen'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('OCD Page - Quality Ribbon Integration', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield (0, _seedData.cleanupSeeds)(_seedData.TEST_ENV.SEED_USER_ID);
  }));
  afterEach((0, _asyncToGenerator2.default)(function* () {
    yield (0, _seedData.cleanupSeeds)(_seedData.TEST_ENV.SEED_USER_ID);
  }));
  describe('[QR:ocd:fresh] Fresh Pipeline Results', function () {
    it('[QR:ocd:fresh] should display Fresh source badge with contamination pattern', (0, _asyncToGenerator2.default)(function* () {
      var _freshResult$qualityM, _freshResult$qualityM2, _freshResult$qualityM3, _freshResult$qualityM4;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 3, 'contamination');
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'high', 'ocd');
      expect((_freshResult$qualityM = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM.source).toBe('unified');
      expect((_freshResult$qualityM2 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM2.freshnessMs).toBe(0);
      expect((_freshResult$qualityM3 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM3.sampleSize).toBe(18);
      expect((_freshResult$qualityM4 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM4.quality).toBe('high');
    }));
    it('[QR:ocd:fresh] should trigger invalidation for new compulsion event', (0, _asyncToGenerator2.default)(function* () {
      var _freshResult$qualityM5, _freshResult$qualityM6;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 2, 'checking');
      var cacheInvalidated = false;
      var mockInvalidation = function mockInvalidation() {
        cacheInvalidated = true;
      };
      mockInvalidation();
      expect(cacheInvalidated).toBe(true);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'medium', 'ocd');
      expect((_freshResult$qualityM5 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM5.source).toBe('unified');
      expect((_freshResult$qualityM6 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM6.freshnessMs).toBe(0);
    }));
  });
  describe('[QR:ocd:cache] Cache Behavior & TTL Transitions', function () {
    it('[QR:ocd:cache] should transition from Fresh to Cache after TTL expires', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 2, 'symmetry');
      var freshMeta = {
        source: 'unified',
        freshnessMs: 0,
        processedAt: Date.now()
      };
      expect(freshMeta.source).toBe('unified');
      expect(freshMeta.freshnessMs).toBeLessThan(_seedData.TEST_ENV.TTL_MS);
      var cachedMeta = {
        source: 'cache',
        freshnessMs: _seedData.TEST_ENV.TTL_MS + 1000,
        processedAt: Date.now() - _seedData.TEST_ENV.TTL_MS - 1000
      };
      expect(cachedMeta.source).toBe('cache');
      expect(cachedMeta.freshnessMs).toBeGreaterThan(_seedData.TEST_ENV.TTL_MS);
    }));
    it('[QR:ocd:cache] should show Cache badge for cached OCD pattern analysis', (0, _asyncToGenerator2.default)(function* () {
      var _cachedResult$quality, _cachedResult$quality2, _cachedResult$quality3;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 4, 'contamination');
      var cachedResult = (0, _seedData.createMockPipelineResult)('cache', 'high', 'ocd');
      expect((_cachedResult$quality = cachedResult.qualityMetadata) == null ? void 0 : _cachedResult$quality.source).toBe('cache');
      expect((_cachedResult$quality2 = cachedResult.qualityMetadata) == null ? void 0 : _cachedResult$quality2.quality).toBe('high');
      expect((_cachedResult$quality3 = cachedResult.qualityMetadata) == null ? void 0 : _cachedResult$quality3.freshnessMs).toBe(1500);
    }));
  });
  describe('[QR:ocd:hidden] Quality Ribbon Hiding Conditions', function () {
    it('[QR:ocd:hidden] should hide when no OCD pattern data provided', (0, _asyncToGenerator2.default)(function* () {
      var suggestion = {
        content: 'OCD suggestion text',
        meta: null
      };
      var shouldShowRibbon = suggestion.meta !== null && suggestion.meta !== undefined;
      expect(shouldShowRibbon).toBe(false);
    }));
    it('[QR:ocd:hidden] should hide when OCD pipeline processing fails', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 1, 'checking');
      var error = null;
      try {
        throw new Error('OCD pipeline processing failed');
      } catch (e) {
        error = e;
      }
      var shouldShowRibbon = error === null;
      expect(shouldShowRibbon).toBe(false);
      expect(error).toBeTruthy();
    }));
    it('[QR:ocd:hidden] should hide when insufficient pattern data', (0, _asyncToGenerator2.default)(function* () {
      var _lowQualityResult$qua, _lowQualityResult$qua2, _lowQualityResult$qua3;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 1, 'contamination');
      var lowQualityResult = (0, _seedData.createMockPipelineResult)('unified', 'low', 'ocd');
      expect((_lowQualityResult$qua = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua.sampleSize).toBe(4);
      expect((_lowQualityResult$qua2 = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua2.quality).toBe('low');
      var patternThreshold = 3;
      var shouldHide = (((_lowQualityResult$qua3 = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua3.sampleSize) || 0) <= patternThreshold;
      expect(shouldHide).toBe(false);
    }));
  });
  describe('[QR:ocd:patterns] OCD Pattern Tests', function () {
    var patternScenarios = [{
      pattern: 'contamination',
      days: 4,
      expectedCompulsion: 'washing',
      description: 'contamination fears and washing rituals'
    }, {
      pattern: 'checking',
      days: 3,
      expectedCompulsion: 'checking',
      description: 'doubt and repeated checking behaviors'
    }, {
      pattern: 'symmetry',
      days: 2,
      expectedCompulsion: 'organizing',
      description: 'order, symmetry, and arranging compulsions'
    }];
    patternScenarios.forEach(function (_ref0) {
      var pattern = _ref0.pattern,
        days = _ref0.days,
        expectedCompulsion = _ref0.expectedCompulsion,
        description = _ref0.description;
      it(`[QR:ocd:${pattern}] should process ${pattern} pattern (${description})`, (0, _asyncToGenerator2.default)(function* () {
        var _result$qualityMetada, _result$qualityMetada2;
        yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, days, pattern);
        var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'ocd');
        expect((_result$qualityMetada = result.qualityMetadata) == null ? void 0 : _result$qualityMetada.source).toBe('unified');
        expect((_result$qualityMetada2 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada2.quality).toBe('high');
        var patternData = {
          patternType: pattern,
          expectedCompulsion: expectedCompulsion,
          daysTracked: days,
          entriesPerDay: 2
        };
        expect(patternData.patternType).toBe(pattern);
        expect(patternData.expectedCompulsion).toBe(expectedCompulsion);
        expect(patternData.daysTracked).toBe(days);
      }));
    });
  });
  describe('[QR:ocd:quality] Quality Level Tests', function () {
    var qualityScenarios = [{
      scenario: 'high',
      expectedQuality: 'high',
      days: 5,
      expectedSample: 18
    }, {
      scenario: 'medium',
      expectedQuality: 'medium',
      days: 3,
      expectedSample: 9
    }, {
      scenario: 'low',
      expectedQuality: 'low',
      days: 1,
      expectedSample: 4
    }];
    qualityScenarios.forEach(function (_ref10) {
      var scenario = _ref10.scenario,
        expectedQuality = _ref10.expectedQuality,
        days = _ref10.days,
        expectedSample = _ref10.expectedSample;
      it(`[QR:ocd:${expectedQuality}] should show ${expectedQuality} quality for ${days} days pattern data`, (0, _asyncToGenerator2.default)(function* () {
        var _result$qualityMetada3, _result$qualityMetada4, _result$qualityMetada5;
        yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, days, 'contamination');
        var result = (0, _seedData.createMockPipelineResult)('unified', scenario, 'ocd');
        expect((_result$qualityMetada3 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada3.quality).toBe(expectedQuality);
        expect((_result$qualityMetada4 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada4.sampleSize).toBe(expectedSample);
        expect((_result$qualityMetada5 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada5.source).toBe('unified');
      }));
    });
  });
  describe('[QR:ocd:triggers] Trigger Recognition Tests', function () {
    var triggerScenarios = [{
      pattern: 'contamination',
      expectedTriggers: ['Kapı kollarına dokunmak', 'Banyo kullanımı', 'Yemek hazırlama'],
      description: 'contamination triggers'
    }, {
      pattern: 'checking',
      expectedTriggers: ['Kapıları kilitleme', 'Elektronik cihazları kapatma', 'Güvenlik kontrolü'],
      description: 'checking triggers'
    }, {
      pattern: 'symmetry',
      expectedTriggers: ['Eşyaları düzenleme', 'Kitapları hizalama', 'Kıyafetleri katlamak'],
      description: 'symmetry triggers'
    }];
    triggerScenarios.forEach(function (_ref12) {
      var pattern = _ref12.pattern,
        expectedTriggers = _ref12.expectedTriggers,
        description = _ref12.description;
      it(`[QR:ocd:triggers] should recognize ${description} for ${pattern}`, (0, _asyncToGenerator2.default)(function* () {
        var _result$qualityMetada6, _result$qualityMetada7, _result$qualityMetada8;
        yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 3, pattern);
        var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'ocd');
        expect((_result$qualityMetada6 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada6.source).toBe('unified');
        expect((_result$qualityMetada7 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada7.quality).toBe('high');
        var triggerData = {
          patternType: pattern,
          possibleTriggers: expectedTriggers,
          recognitionAccuracy: ((_result$qualityMetada8 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada8.confidence) || 0.89
        };
        expect(triggerData.patternType).toBe(pattern);
        expect(triggerData.possibleTriggers).toContain(expectedTriggers[0]);
        expect(triggerData.recognitionAccuracy).toBeGreaterThan(0.8);
      }));
    });
  });
  describe('[QR:ocd:resistance] Resistance Tracking Tests', function () {
    it('[QR:ocd:high] should show high quality for resistance attempts tracking', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada9, _result$qualityMetada0, _result$qualityMetada1, _result$qualityMetada10, _result$qualityMetada11;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 4, 'contamination');
      var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'ocd');
      expect((_result$qualityMetada9 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada9.quality).toBe('high');
      expect((_result$qualityMetada0 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada0.confidence).toBe(0.89);
      expect((_result$qualityMetada1 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada1.dataQuality).toBe(0.91);
      var resistanceData = {
        hasResistanceData: true,
        qualityLevel: (_result$qualityMetada10 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada10.quality,
        confidenceLevel: (_result$qualityMetada11 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada11.confidence
      };
      expect(resistanceData.hasResistanceData).toBe(true);
      expect(resistanceData.qualityLevel).toBe('high');
      expect(resistanceData.confidenceLevel).toBeGreaterThan(0.8);
    }));
    it('[QR:ocd:medium] should handle partial resistance data', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada12, _result$qualityMetada13;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 2, 'checking');
      var result = (0, _seedData.createMockPipelineResult)('unified', 'medium', 'ocd');
      expect((_result$qualityMetada12 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada12.quality).toBe('medium');
      expect((_result$qualityMetada13 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada13.confidence).toBe(0.71);
    }));
  });
  describe('[QR:ocd:testmode] Test Mode Integration', function () {
    it('[QR:ocd:testmode] should respect TEST_TTL_MS for OCD cache', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 2, 'symmetry');
      expect(_seedData.TEST_ENV.MODE).toBe(true);
      expect(_seedData.TEST_ENV.TTL_MS).toBe(5000);
      var testTTL = _seedData.TEST_ENV.MODE ? _seedData.TEST_ENV.TTL_MS : 3600000;
      expect(testTTL).toBe(5000);
      expect(testTTL).toBeLessThan(10000);
    }));
    it('[QR:ocd:testmode] should handle deterministic pattern generation', (0, _asyncToGenerator2.default)(function* () {
      var _result1$qualityMetad, _result2$qualityMetad, _result1$qualityMetad2, _result2$qualityMetad2, _result1$qualityMetad3, _result2$qualityMetad3;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 3, 'contamination');
      var result1 = (0, _seedData.createMockPipelineResult)('unified', 'high', 'ocd');
      var result2 = (0, _seedData.createMockPipelineResult)('unified', 'high', 'ocd');
      expect((_result1$qualityMetad = result1.qualityMetadata) == null ? void 0 : _result1$qualityMetad.quality).toBe((_result2$qualityMetad = result2.qualityMetadata) == null ? void 0 : _result2$qualityMetad.quality);
      expect((_result1$qualityMetad2 = result1.qualityMetadata) == null ? void 0 : _result1$qualityMetad2.source).toBe((_result2$qualityMetad2 = result2.qualityMetadata) == null ? void 0 : _result2$qualityMetad2.source);
      expect((_result1$qualityMetad3 = result1.qualityMetadata) == null ? void 0 : _result1$qualityMetad3.sampleSize).toBe((_result2$qualityMetad3 = result2.qualityMetadata) == null ? void 0 : _result2$qualityMetad3.sampleSize);
    }));
    it('[QR:ocd:testmode] should use TEST_SEED_USER_ID consistently', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada14, _result$qualityMetada15;
      yield (0, _seedData.seedOCDScenario)(_seedData.TEST_ENV.SEED_USER_ID, 1, 'checking');
      expect(_seedData.TEST_ENV.SEED_USER_ID).toBe('test-user-1');
      var result = (0, _seedData.createMockPipelineResult)('unified', 'medium', 'ocd');
      expect((_result$qualityMetada14 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada14.source).toBe('unified');
      expect((_result$qualityMetada15 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada15.quality).toBe('medium');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,