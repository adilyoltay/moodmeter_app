ecb2706ca51259042c525b7ef4e5c99a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AIProvider = AIProvider;
exports.useAI = useAI;
exports.useAIActions = useAIActions;
exports.useAIStatus = useAIStatus;
exports.useAIUserData = useAIUserData;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _queryClient = require("../lib/queryClient");
var _supabase = _interopRequireDefault(require("../services/supabase"));
var _reactNative = require("react-native");
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _SupabaseAuthContext = require("./SupabaseAuthContext");
var _aiManager = require("../features/ai/config/aiManager");
var _UnifiedAIPipeline = require("../features/ai/core/UnifiedAIPipeline");
var _contextIntelligence = _interopRequireDefault(require("../features/ai/context/contextIntelligence"));
var _adaptiveInterventions = _interopRequireDefault(require("../features/ai/interventions/adaptiveInterventions"));
var _jitaiEngine = require("../features/ai/jitai/jitaiEngine");
var _ybocsAnalysisService = require("../features/ai/services/ybocsAnalysisService");
var _userProfilingService = require("../features/ai/services/userProfilingService");
var _treatmentPlanningEngine = require("../features/ai/engines/treatmentPlanningEngine");
var _riskAssessmentService = require("../features/ai/services/riskAssessmentService");
var _types = require("../features/ai/types");
var _aiTelemetry = require("../features/ai/telemetry/aiTelemetry");
var _featureFlags = require("../constants/featureFlags");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var contextIntelligence = _contextIntelligence.default;
var adaptiveInterventions = _adaptiveInterventions.default;
var AIContext = (0, _react.createContext)(undefined);
function AIProvider(_ref) {
  var children = _ref.children;
  var _useAuth = (0, _SupabaseAuthContext.useAuth)(),
    user = _useAuth.user;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isInitialized = _useState2[0],
    setIsInitialized = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isInitializing = _useState4[0],
    setIsInitializing = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    initializationError = _useState6[0],
    setInitializationError = _useState6[1];
  (0, _react.useEffect)(function () {
    console.log('🤖 AIContext mounted, user:', !!(user != null && user.id));
    return function () {
      return console.log('🤖 AIContext unmounted');
    };
  }, []);
  var _useState7 = (0, _react.useState)(true),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isOnline = _useState8[0],
    setIsOnline = _useState8[1];
  var _useState9 = (0, _react.useState)(true),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isConnected = _useState0[0],
    setIsConnected = _useState0[1];
  var _useState1 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    networkType = _useState10[0],
    setNetworkType = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    safeMode = _useState12[0],
    setSafeMode = _useState12[1];
  var _useState13 = (0, _react.useState)(undefined),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    safeModeReason = _useState14[0],
    setSafeModeReason = _useState14[1];
  var _useState15 = (0, _react.useState)(null),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    userProfile = _useState16[0],
    setUserProfile = _useState16[1];
  var _useState17 = (0, _react.useState)(null),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    treatmentPlan = _useState18[0],
    setTreatmentPlan = _useState18[1];
  var _useState19 = (0, _react.useState)(null),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    currentRiskAssessment = _useState20[0],
    setCurrentRiskAssessment = _useState20[1];
  var _useState21 = (0, _react.useState)(null),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    onboardingSession = _useState22[0],
    setOnboardingSession = _useState22[1];
  var _useState23 = (0, _react.useState)(false),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    hasCompletedOnboarding = _useState24[0],
    setHasCompletedOnboarding = _useState24[1];
  var _useState25 = (0, _react.useState)([]),
    _useState26 = (0, _slicedToArray2.default)(_useState25, 2),
    availableFeatures = _useState26[0],
    setAvailableFeatures = _useState26[1];
  (0, _react.useEffect)(function () {
    console.log('🤖 AIContext State:', {
      isInitialized: isInitialized,
      isInitializing: isInitializing,
      featuresCount: availableFeatures.length
    });
  }, [isInitialized, isInitializing, availableFeatures]);
  var initializeAIServices = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    console.log('🤖 initializeAIServices called:', {
      userId: !!(user != null && user.id),
      isInitializing: isInitializing
    });
    if (!(user != null && user.id) || isInitializing) {
      console.log('🚫 initializeAIServices early return:', {
        reason: !(user != null && user.id) ? 'no_user' : 'already_initializing'
      });
      return;
    }
    console.log('🚀 Starting AI services initialization...');
    setIsInitializing(true);
    setInitializationError(null);
    var startTime = Date.now();
    try {
      if (__DEV__) console.log('🚀 Initializing AI services for user:', user.id);
      yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STARTED, {
        userId: user.id,
        context: 'ai_context_initialization'
      });
      yield _aiManager.aiManager.initialize();
      if (!_aiManager.aiManager.isEnabled) {
        setSafeMode(true);
        setSafeModeReason('env');
      }
      var initializationTasks = [{
        name: 'AI_INSIGHTS',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_INSIGHTS'),
        task: function () {
          var _task = (0, _asyncToGenerator2.default)(function* () {
            console.log('✅ Insights handled by UnifiedAIPipeline');
          });
          function task() {
            return _task.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_CONTEXT_INTELLIGENCE',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_CONTEXT_INTELLIGENCE'),
        task: function () {
          var _task2 = (0, _asyncToGenerator2.default)(function* () {
            if (contextIntelligence && typeof contextIntelligence.initialize === 'function') {
              yield contextIntelligence.initialize();
            } else {
              throw new Error('Context Intelligence service not available');
            }
          });
          function task() {
            return _task2.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_ADAPTIVE_INTERVENTIONS',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_ADAPTIVE_INTERVENTIONS'),
        task: function () {
          var _task3 = (0, _asyncToGenerator2.default)(function* () {
            if (adaptiveInterventions && typeof adaptiveInterventions.initialize === 'function') {
              yield adaptiveInterventions.initialize();
            } else {
              throw new Error('Adaptive Interventions service not available');
            }
          });
          function task() {
            return _task3.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_JITAI',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_JITAI_SYSTEM'),
        task: function () {
          var _task4 = (0, _asyncToGenerator2.default)(function* () {
            return yield _jitaiEngine.jitaiEngine.initialize();
          });
          function task() {
            return _task4.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_YBOCS_ANALYSIS',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_YBOCS_ANALYSIS'),
        task: function () {
          var _task5 = (0, _asyncToGenerator2.default)(function* () {
            if (_ybocsAnalysisService.ybocsAnalysisService && typeof _ybocsAnalysisService.ybocsAnalysisService.initialize === 'function') {
              yield _ybocsAnalysisService.ybocsAnalysisService.initialize();
            } else {
              throw new Error('Y-BOCS Analysis service not available');
            }
          });
          function task() {
            return _task5.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_USER_PROFILING',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_USER_PROFILING'),
        task: function () {
          var _task6 = (0, _asyncToGenerator2.default)(function* () {
            if (_userProfilingService.userProfilingService && typeof _userProfilingService.userProfilingService.initialize === 'function') {
              yield _userProfilingService.userProfilingService.initialize();
            } else {
              throw new Error('User Profiling service not available');
            }
          });
          function task() {
            return _task6.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_EXTERNAL_SERVICE',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_EXTERNAL_API'),
        task: function () {
          var _task7 = (0, _asyncToGenerator2.default)(function* () {
            var _yield$import = yield import("../features/ai/services/externalAIService"),
              externalAIService = _yield$import.externalAIService;
            yield externalAIService.initialize();
          });
          function task() {
            return _task7.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_CBT_ENGINE',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_CBT_ENGINE'),
        task: function () {
          var _task8 = (0, _asyncToGenerator2.default)(function* () {
            var _yield$import2 = yield import("../features/ai/engines/cbtEngine"),
              cbtEngine = _yield$import2.cbtEngine;
            yield cbtEngine.initialize();
          });
          function task() {
            return _task8.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_INSIGHTS_ENGINE_V2',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_INSIGHTS_ENGINE_V2'),
        task: function () {
          var _task9 = (0, _asyncToGenerator2.default)(function* () {
            console.log('✅ Insights Engine v2 handled by UnifiedAIPipeline');
          });
          function task() {
            return _task9.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_PATTERN_RECOGNITION_V2',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_PATTERN_RECOGNITION_V2'),
        task: function () {
          var _task0 = (0, _asyncToGenerator2.default)(function* () {
            console.log('✅ Pattern Recognition handled by UnifiedAIPipeline');
          });
          function task() {
            return _task0.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_SMART_NOTIFICATIONS',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_SMART_NOTIFICATIONS'),
        task: function () {
          var _task1 = (0, _asyncToGenerator2.default)(function* () {
            console.log('✅ Smart Notifications handled by UnifiedAIPipeline');
          });
          function task() {
            return _task1.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_THERAPEUTIC_PROMPTS',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_THERAPEUTIC_PROMPTS'),
        task: function () {
          var _task10 = (0, _asyncToGenerator2.default)(function* () {
            var _yield$import3 = yield import("../features/ai/prompts/therapeuticPrompts"),
              therapeuticPromptEngine = _yield$import3.therapeuticPromptEngine;
            yield therapeuticPromptEngine.initialize();
          });
          function task() {
            return _task10.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_TREATMENT_PLANNING',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_TREATMENT_PLANNING'),
        task: function () {
          var _task11 = (0, _asyncToGenerator2.default)(function* () {
            if (_treatmentPlanningEngine.adaptiveTreatmentPlanningEngine && typeof _treatmentPlanningEngine.adaptiveTreatmentPlanningEngine.initialize === "function") {
              yield _treatmentPlanningEngine.adaptiveTreatmentPlanningEngine.initialize();
            } else {
              throw new Error('Treatment Planning Engine not available');
            }
          });
          function task() {
            return _task11.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_ART_THERAPY',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_ART_THERAPY'),
        task: function () {
          var _task12 = (0, _asyncToGenerator2.default)(function* () {
            var _yield$import4 = yield import("../features/ai/artTherapy/artTherapyEngine"),
              artTherapyEngine = _yield$import4.artTherapyEngine;
            if (artTherapyEngine && typeof artTherapyEngine.initialize === 'function') {
              yield artTherapyEngine.initialize();
            }
          });
          function task() {
            return _task12.apply(this, arguments);
          }
          return task;
        }()
      }, {
        name: 'AI_RISK_ASSESSMENT',
        enabled: _featureFlags.FEATURE_FLAGS.isEnabled('AI_RISK_ASSESSMENT'),
        task: function () {
          var _task13 = (0, _asyncToGenerator2.default)(function* () {
            if (_riskAssessmentService.advancedRiskAssessmentService && typeof _riskAssessmentService.advancedRiskAssessmentService.initialize === "function") {
              yield _riskAssessmentService.advancedRiskAssessmentService.initialize();
            } else {
              throw new Error('Risk Assessment service not available');
            }
          });
          function task() {
            return _task13.apply(this, arguments);
          }
          return task;
        }()
      }];
      var features = [];
      var results = yield Promise.allSettled(initializationTasks.filter(function (task) {
        return task.enabled;
      }).map(function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* (task) {
          try {
            yield task.task();
            features.push(task.name);
            if (__DEV__) console.log(`✅ ${task.name} initialized successfully`);
            return {
              name: task.name,
              success: true
            };
          } catch (error) {
            if (__DEV__) console.warn(`⚠️ ${task.name} initialization failed:`, error);
            try {
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
                event: 'service_init_failed',
                service: task.name,
                error: error instanceof Error ? error.message : String(error)
              }, user == null ? void 0 : user.id);
            } catch (_unused) {}
            return {
              name: task.name,
              success: false,
              error: error
            };
          }
        });
        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }()));
      var additionalFeatures = 0;
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_CHAT')) {
        features.push('AI_CHAT');
        additionalFeatures++;
      }
      features.push('AI_ONBOARDING');
      additionalFeatures++;
      if (__DEV__) console.log('🎯 OnboardingFlow enabled (default)');
      setAvailableFeatures(features);
      _reactNative.InteractionManager.runAfterInteractions(function () {
        var attempts = 0;
        var _tryLoad = function () {
          var _ref4 = (0, _asyncToGenerator2.default)(function* () {
            try {
              yield loadUserAIData();
            } catch (e) {
              if (attempts < 2) {
                attempts++;
                setTimeout(_tryLoad, 300 * attempts);
              }
            }
          });
          return function tryLoad() {
            return _ref4.apply(this, arguments);
          };
        }();
        _tryLoad();
      });
      console.log('🎯 Setting isInitialized=true, availableFeatures count:', features.length);
      setIsInitialized(true);
      var initTime = Date.now() - startTime;
      if (__DEV__) console.log(`✅ AI services initialized successfully in ${initTime}ms`);
      var enabledTaskCount = initializationTasks.filter(function (t) {
        return t.enabled;
      }).length;
      yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
        userId: user.id,
        context: 'ai_context_initialized',
        availableFeatures: features,
        initializationTime: initTime,
        successfulServices: features.length,
        totalAttempted: enabledTaskCount + additionalFeatures
      });
    } catch (error) {
      var _initTime = Date.now() - startTime;
      if (__DEV__) console.error('❌ AI services initialization failed:', error);
      setInitializationError(error instanceof Error ? error.message : 'Unknown error');
      yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.CHAT_ERROR, {
        userId: user.id,
        error: error instanceof Error ? error.message : 'Unknown error',
        context: 'ai_context_initialization_failed',
        initializationTime: _initTime
      });
    } finally {
      console.log('🏁 Setting isInitializing=false (initialization complete)');
      setIsInitializing(false);
    }
  }), [user == null ? void 0 : user.id]);
  var loadUserAIData = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      if (!(user != null && user.id)) {
        if (__DEV__) console.warn('⚠️ loadUserAIData: No user ID available');
        return;
      }
      var userId = user.id;
      if (typeof userId !== 'string' || userId.trim() === '') {
        if (__DEV__) console.error('❌ loadUserAIData: Invalid user ID:', userId);
        return;
      }
      try {
        var _yield$Promise$all = yield Promise.all([_supabase.default.supabaseClient.from('ai_profiles').select('onboarding_completed, profile_data').eq('user_id', userId).maybeSingle(), _supabase.default.supabaseClient.from('ai_treatment_plans').select('plan_data').eq('user_id', userId).maybeSingle()]),
          _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
          profileRowRes = _yield$Promise$all2[0],
          planRowRes = _yield$Promise$all2[1];
        var completed = false;
        var profileRow = profileRowRes == null ? void 0 : profileRowRes.data;
        if (profileRow) {
          completed = !!profileRow.onboarding_completed;
          if (profileRow.profile_data) {
            setUserProfile(profileRow.profile_data);
            try {
              var _yield$import5 = yield import("../hooks/useSecureStorage"),
                useSecureStorage = _yield$import5.useSecureStorage;
              var _useSecureStorage = useSecureStorage(),
                setItem = _useSecureStorage.setItem;
              yield setItem(`ai_user_profile_${userId}`, profileRow.profile_data, true);
            } catch (_unused2) {
              try {
                yield _asyncStorage.default.setItem(`ai_user_profile_${userId}`, JSON.stringify(profileRow.profile_data));
              } catch (_unused3) {}
            }
          }
        }
        if (!(profileRow != null && profileRow.profile_data)) {
          var loadedProfile = null;
          try {
            var _yield$import6 = yield import("../hooks/useSecureStorage"),
              _useSecureStorage2 = _yield$import6.useSecureStorage;
            var _useSecureStorage3 = _useSecureStorage2(),
              getItem = _useSecureStorage3.getItem;
            var encLocal = yield getItem(`ai_user_profile_${userId}`, true);
            if (encLocal) loadedProfile = encLocal;
          } catch (_unused4) {}
          if (!loadedProfile) {
            try {
              var aiLocal = yield _asyncStorage.default.getItem(`ai_user_profile_${userId}`);
              if (aiLocal) loadedProfile = JSON.parse(aiLocal);
            } catch (_unused5) {}
          }
          if (!loadedProfile) {
            try {
              var legacy = yield _asyncStorage.default.getItem(`user_profile_${userId}`);
              if (legacy) loadedProfile = JSON.parse(legacy);
            } catch (_unused6) {}
          }
          if (loadedProfile) {
            setUserProfile(loadedProfile);
            try {
              var _yield$import7 = yield import("../hooks/useSecureStorage"),
                _useSecureStorage4 = _yield$import7.useSecureStorage;
              var _useSecureStorage5 = _useSecureStorage4(),
                _setItem = _useSecureStorage5.setItem;
              yield _setItem(`ai_user_profile_${userId}`, loadedProfile, true);
            } catch (_unused7) {
              try {
                yield _asyncStorage.default.setItem(`ai_user_profile_${userId}`, JSON.stringify(loadedProfile));
              } catch (_unused8) {}
            }
            try {
              var _yield$import8 = yield import("../services/supabase"),
                svc = _yield$import8.supabaseService;
              yield svc.upsertAIProfile(userId, loadedProfile, completed);
            } catch (_unused9) {}
          }
        }
        var aiCompleted = yield _asyncStorage.default.getItem(`ai_onboarding_completed_${userId}`);
        if (aiCompleted === 'true') {
          completed = true;
        } else {
          var legacyCompleted = yield _asyncStorage.default.getItem(`onboarding_completed_${userId}`);
          if (legacyCompleted === 'true') {
            completed = true;
          }
        }
        setHasCompletedOnboarding(completed);
        try {
          if (completed) {
            yield _asyncStorage.default.setItem(`ai_onboarding_completed_${userId}`, 'true');
          }
        } catch (_unused0) {}
        var planRow = planRowRes == null ? void 0 : planRowRes.data;
        if (planRow != null && planRow.plan_data) {
          setTreatmentPlan(planRow.plan_data);
          try {
            var _yield$import9 = yield import("../hooks/useSecureStorage"),
              _useSecureStorage6 = _yield$import9.useSecureStorage;
            var _useSecureStorage7 = _useSecureStorage6(),
              _setItem2 = _useSecureStorage7.setItem;
            yield _setItem2(`ai_treatment_plan_${userId}`, planRow.plan_data, true);
          } catch (_unused1) {
            try {
              yield _asyncStorage.default.setItem(`ai_treatment_plan_${userId}`, JSON.stringify(planRow.plan_data));
            } catch (_unused10) {}
          }
        } else {
          var localPlan = null;
          try {
            var _yield$import0 = yield import("../hooks/useSecureStorage"),
              _useSecureStorage8 = _yield$import0.useSecureStorage;
            var _useSecureStorage9 = _useSecureStorage8(),
              _getItem = _useSecureStorage9.getItem;
            var enc = yield _getItem(`ai_treatment_plan_${userId}`, true);
            if (enc) localPlan = enc;
          } catch (_unused11) {}
          if (!localPlan) {
            try {
              var aiPlan = yield _asyncStorage.default.getItem(`ai_treatment_plan_${userId}`);
              if (aiPlan) localPlan = JSON.parse(aiPlan);
            } catch (_unused12) {}
          }
          if (!localPlan) {
            try {
              var legacyPlan = yield _asyncStorage.default.getItem(`treatment_plan_${userId}`);
              if (legacyPlan) localPlan = JSON.parse(legacyPlan);
            } catch (_unused13) {}
          }
          if (localPlan) {
            setTreatmentPlan(localPlan);
            try {
              var _yield$import1 = yield import("../hooks/useSecureStorage"),
                _useSecureStorage0 = _yield$import1.useSecureStorage;
              var _useSecureStorage1 = _useSecureStorage0(),
                _setItem3 = _useSecureStorage1.setItem;
              yield _setItem3(`ai_treatment_plan_${userId}`, localPlan, true);
            } catch (_unused14) {
              try {
                yield _asyncStorage.default.setItem(`ai_treatment_plan_${userId}`, JSON.stringify(localPlan));
              } catch (_unused15) {}
            }
            try {
              var _yield$import10 = yield import("../services/supabase"),
                _svc = _yield$import10.supabaseService;
              yield _svc.upsertAITreatmentPlan(userId, localPlan, 'active');
            } catch (_unused16) {}
          }
        }
        var riskKey = `ai_risk_assessment_${userId}`;
        var riskData = yield _asyncStorage.default.getItem(riskKey);
        if (riskData) {
          setCurrentRiskAssessment(JSON.parse(riskData));
        }
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
          event: 'ai_context_sync_check',
          profilePresent: !!(profileRow != null && profileRow.profile_data || userProfile),
          planPresent: !!(planRow != null && planRow.plan_data || treatmentPlan),
          completed: completed,
          source: 'supabase_pull'
        }, userId);
      } catch (error) {
        if (__DEV__) console.error('❌ Error loading user AI data:', error);
        yield (0, _aiTelemetry.trackAIError)({
          code: 'storage_error',
          message: 'Error loading user AI data',
          severity: 'medium'
        }, {
          component: 'AIContext',
          method: 'loadUserAIData'
        });
      }
    });
    return function loadUserAIData() {
      return _ref5.apply(this, arguments);
    };
  }();
  var startOnboarding = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!(user != null && user.id)) {
      return null;
    }
    try {
      var session = {
        id: `onboarding_${user.id}_${Date.now()}`,
        userId: user.id,
        startTime: new Date(),
        currentStep: _types.OnboardingStep.WELCOME,
        completedSteps: [],
        ybocsData: [],
        userProfile: {},
        sessionState: _types.OnboardingSessionState.ACTIVE,
        culturalContext: {
          language: 'tr',
          country: 'TR',
          culturalBackground: ['turkish'],
          communicationStyle: {
            formality: 'warm',
            directness: 'gentle',
            supportStyle: 'encouraging',
            humorAcceptable: false,
            preferredPronoun: ''
          }
        },
        progress: {
          totalSteps: 13,
          completedSteps: 0,
          estimatedTimeRemaining: 20
        }
      };
      setOnboardingSession(session);
      return session;
    } catch (error) {
      if (__DEV__) console.error('❌ Error starting onboarding:', error);
      return null;
    }
  }), [user == null ? void 0 : user.id]);
  var updateUserProfile = (0, _react.useCallback)(function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* (profileUpdate) {
      if (!(user != null && user.id) || !userProfile) return;
      var userId = user.id;
      if (typeof userId !== 'string' || userId.trim() === '') {
        if (__DEV__) console.error('❌ updateUserProfile: Invalid user ID:', userId);
        return;
      }
      try {
        var updatedProfile = Object.assign({}, userProfile, profileUpdate);
        setUserProfile(updatedProfile);
        var profileKey = `ai_user_profile_${userId}`;
        {
          var attempts = 0;
          while (true) {
            try {
              yield _asyncStorage.default.setItem(profileKey, JSON.stringify(updatedProfile));
              break;
            } catch (e) {
              if (attempts >= 2) break;
              attempts++;
              yield new Promise(function (r) {
                return setTimeout(r, 200 * attempts);
              });
            }
          }
        }
        if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_USER_PROFILING')) {
          yield _userProfilingService.userProfilingService.updateProfile(userId, profileUpdate);
        }
      } catch (error) {
        if (__DEV__) console.error('❌ Error updating user profile:', error);
      }
    });
    return function (_x2) {
      return _ref7.apply(this, arguments);
    };
  }(), [user == null ? void 0 : user.id, userProfile]);
  var lastInsightsRef = _react.default.useRef(0);
  var insightsInFlightRef = _react.default.useRef(false);
  var insightsQueueRef = _react.default.useRef(null);
  var generateInsights = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!(user != null && user.id) || !_featureFlags.FEATURE_FLAGS.isEnabled('AI_INSIGHTS')) {
      return [];
    }
    var now = Date.now();
    if (now - (lastInsightsRef.current || 0) < 60000) {
      try {
        var cached = yield _asyncStorage.default.getItem(`ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`);
        if (cached) {
          var parsed = JSON.parse(cached);
          try {
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_CACHE_HIT, {
              userId: user.id,
              source: 'cooldown_cache'
            }, user.id);
          } catch (_unused17) {}
          return parsed.insights || [];
        }
      } catch (_unused18) {}
      try {
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_CACHE_MISS, {
          userId: user.id,
          reason: 'cooldown_cache_empty'
        }, user.id);
      } catch (_unused19) {}
      return [];
    }
    if (!isOnline) {
      if (__DEV__) console.warn('📱 Offline mode: Using cached insights');
      try {
        var cachedInsights = yield _asyncStorage.default.getItem(`ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`);
        if (cachedInsights) {
          var _parsed = JSON.parse(cachedInsights);
          if (Date.now() - _parsed.timestamp < 24 * 60 * 60 * 1000) {
            try {
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_CACHE_HIT, {
                userId: user.id,
                source: 'offline_cache'
              }, user.id);
            } catch (_unused20) {}
            return _parsed.insights || [];
          }
        }
      } catch (error) {
        if (__DEV__) console.error('❌ Error loading cached insights:', error);
      }
      return [{
        id: 'offline_notice',
        type: 'system',
        content: 'İnternet bağlantısı olmadığı için önceki öngörüler gösteriliyor. Bağlantı kurulduğunda güncel öngörüler yüklenecek.',
        timestamp: new Date(),
        priority: 'low'
      }];
    }
    if (insightsInFlightRef.current) {
      if (insightsQueueRef.current) {
        if (__DEV__) console.warn('⏳ Insights in progress – returning queued promise');
        return insightsQueueRef.current;
      }
      if (__DEV__) console.warn('⏳ Insights in progress – waiting for completion');
    }
    try {
      insightsInFlightRef.current = true;
      var queued = (0, _asyncToGenerator2.default)(function* () {
        var end = new Date();
        var start = new Date(end.getTime() - 24 * 60 * 60 * 1000);
        var startISO = start.toISOString();
        var endISO = end.toISOString();
        var dbCompulsions = [];
        try {
          var _yield$Promise$all3 = yield Promise.all([(0, _asyncToGenerator2.default)(function* () {
              return yield (yield import("../services/supabase")).supabaseService.getCompulsions(user.id, startISO, endISO);
            })()]),
            _yield$Promise$all4 = (0, _slicedToArray2.default)(_yield$Promise$all3, 1),
            compList = _yield$Promise$all4[0];
          dbCompulsions = compList || [];
        } catch (e) {
          if (__DEV__) console.warn('⚠️ DB behavioral fetch failed, will use local fallbacks');
        }
        var today = new Date().toDateString();
        var compulsionsKey = `compulsions_${(0, _queryClient.safeStorageKey)(user.id)}`;
        var compulsionsRaw = yield _asyncStorage.default.getItem(compulsionsKey);
        var allCompulsions = compulsionsRaw ? JSON.parse(compulsionsRaw) : [];
        var todayCompulsions = allCompulsions.filter(function (c) {
          return new Date(c.timestamp).toDateString() === today;
        });
        var compulsions = dbCompulsions.length ? dbCompulsions : todayCompulsions;
        var moods = [];
        try {
          var moodTracker = (yield import("../services/moodTrackingService")).default;
          var moodEntries = yield moodTracker.getMoodEntries(user.id, 30);
          moods = moodEntries.map(function (entry) {
            return {
              id: entry.id,
              mood_score: entry.mood_score,
              energy_level: entry.energy_level,
              anxiety_level: entry.anxiety_level,
              notes: entry.notes || '',
              trigger: entry.trigger || '',
              created_at: entry.timestamp || entry.created_at,
              timestamp: entry.timestamp || new Date(entry.created_at || Date.now()).getTime()
            };
          });
          console.log(`📊 Loaded ${moods.length} mood entries for AI analysis`);
        } catch (moodError) {
          console.warn('⚠️ Failed to load mood data for AI analysis:', moodError);
        }
        var behavioralData = {
          compulsions: compulsions,
          moods: moods,
          exercises: [],
          achievements: [],
          assessments: []
        };
        var hasProfile = !!userProfile;
        var interactionsCount = (compulsions == null ? void 0 : compulsions.length) || 0;
        if (!hasProfile || interactionsCount === 0) {
          try {
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_MISSING_REQUIRED_FIELDS, {
              userId: user.id,
              hasProfile: hasProfile,
              interactionsCount: interactionsCount
            }, user.id);
          } catch (_unused21) {}
          return [{
            id: 'data_insufficient_notice',
            type: 'system',
            content: 'Daha anlamlı içgörüler için bugün en az bir kayıt ekleyin (kompulsiyon veya mood).',
            timestamp: new Date(),
            priority: 'low'
          }];
        }
        if (_UnifiedAIPipeline.unifiedPipeline) {
          var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
            userId: user.id,
            content: behavioralData || {},
            type: 'data',
            context: {
              source: 'today',
              timestamp: Date.now(),
              metadata: {
                userProfile: userProfile
              }
            }
          });
          var insights = [];
          if (result.insights) {
            if (result.insights.therapeutic) {
              insights.push.apply(insights, (0, _toConsumableArray2.default)(result.insights.therapeutic));
            }
            if (result.insights.progress) {
              insights.push.apply(insights, (0, _toConsumableArray2.default)(result.insights.progress));
            }
          }
          if (insights && insights.length > 0) {
            try {
              var attempts = 0;
              while (true) {
                try {
                  if (attempts > 0) {
                    try {
                      yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.STORAGE_RETRY_ATTEMPT, {
                        key: `ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`,
                        attempts: attempts
                      }, user.id);
                    } catch (_unused22) {}
                  }
                  yield _asyncStorage.default.setItem(`ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`, JSON.stringify({
                    insights: insights,
                    timestamp: Date.now()
                  }));
                  try {
                    yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.STORAGE_RETRY_SUCCESS, {
                      key: `ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`,
                      attempts: attempts
                    }, user.id);
                  } catch (_unused23) {}
                  break;
                } catch (e) {
                  if (attempts >= 2) {
                    try {
                      yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.STORAGE_RETRY_FAILED, {
                        key: `ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`,
                        attempts: attempts
                      }, user.id);
                    } catch (_unused24) {}
                    break;
                  }
                  attempts++;
                  yield new Promise(function (r) {
                    return setTimeout(r, 150 * attempts);
                  });
                }
              }
              try {
                var _yield$import11 = yield import("../services/supabase"),
                  _supabaseService = _yield$import11.default;
                yield _supabaseService.supabaseClient.from('ai_insights').insert({
                  user_id: user.id,
                  insights: insights
                });
              } catch (persistErr) {
                if (__DEV__) console.warn('Persist ai_insights failed:', persistErr);
              }
            } catch (cacheError) {
              if (__DEV__) console.warn('⚠️ Failed to cache insights:', cacheError);
            }
          }
          lastInsightsRef.current = Date.now();
          if (!insights || insights.length === 0) {
            try {
              var _cached = yield _asyncStorage.default.getItem(`ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`);
              if (_cached) {
                var _parsed2 = JSON.parse(_cached);
                try {
                  yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_CACHE_HIT, {
                    userId: user.id,
                    source: 'post_generation_cache'
                  }, user.id);
                } catch (_unused25) {}
                return _parsed2.insights || [];
              }
            } catch (_unused26) {}
          }
          return insights || [];
        } else {
          if (__DEV__) console.warn("⚠️ UnifiedAIPipeline not available");
          try {
            var _cached2 = yield _asyncStorage.default.getItem(`ai_cached_insights_${(0, _queryClient.safeStorageKey)(user.id)}`);
            if (_cached2) {
              var _parsed3 = JSON.parse(_cached2);
              return _parsed3.insights || [];
            }
          } catch (_unused27) {}
          return [];
        }
      })();
      insightsQueueRef.current = queued;
      var awaited = yield queued;
      return awaited;
    } catch (error) {
      if (__DEV__) console.error('❌ Error generating insights:', error);
      return [];
    } finally {
      insightsInFlightRef.current = false;
      insightsQueueRef.current = null;
    }
  }), [user == null ? void 0 : user.id, userProfile, treatmentPlan, isOnline]);
  var triggerIntervention = (0, _react.useCallback)(function () {
    var _ref1 = (0, _asyncToGenerator2.default)(function* (context) {
      if (!(user != null && user.id) || !_featureFlags.FEATURE_FLAGS.isEnabled('AI_ADAPTIVE_INTERVENTIONS')) {
        return;
      }
      try {
        yield adaptiveInterventions.triggerContextualIntervention({
          userId: user.id,
          userProfile: userProfile,
          currentContext: {
            analysisId: `ctx_${Date.now()}`,
            riskAssessment: {
              overallRisk: (currentRiskAssessment == null ? void 0 : currentRiskAssessment.immediateRisk) || 'low',
              riskFactors: [],
              protectiveFactors: [],
              interventionUrgency: 'low'
            },
            userState: {
              stressLevel: 'medium',
              activityState: 'unknown',
              energyLevel: 50,
              socialEngagement: 50
            },
            environmentalFactors: [],
            insights: {
              patterns: []
            }
          },
          userConfig: adaptiveInterventions.getDefaultConfig(),
          recentInterventions: [],
          recentUserActivity: {
            lastAppUsage: new Date(),
            sessionDuration: 0
          },
          deviceState: {
            batteryLevel: 1,
            isCharging: false,
            networkConnected: true,
            inFocus: true
          }
        });
      } catch (error) {
        if (__DEV__) console.error('❌ Error triggering intervention:', error);
      }
    });
    return function (_x3) {
      return _ref1.apply(this, arguments);
    };
  }(), [user == null ? void 0 : user.id, userProfile, currentRiskAssessment]);
  (0, _react.useEffect)(function () {
    var unsubscribe = _netinfo.default.addEventListener(function (state) {
      var _state$isConnected, _state$isInternetReac;
      if (__DEV__) console.log('🌐 Network state changed:', {
        isConnected: state.isConnected,
        isInternetReachable: state.isInternetReachable,
        type: state.type
      });
      setIsConnected((_state$isConnected = state.isConnected) != null ? _state$isConnected : false);
      setIsOnline((_state$isInternetReac = state.isInternetReachable) != null ? _state$isInternetReac : false);
      setNetworkType(state.type || null);
      (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
        networkStatus: state.isConnected ? 'connected' : 'disconnected',
        networkType: state.type,
        isInternetReachable: state.isInternetReachable,
        userId: user == null ? void 0 : user.id
      });
    });
    _netinfo.default.fetch().then(function (state) {
      var _state$isConnected2, _state$isInternetReac2;
      setIsConnected((_state$isConnected2 = state.isConnected) != null ? _state$isConnected2 : false);
      setIsOnline((_state$isInternetReac2 = state.isInternetReachable) != null ? _state$isInternetReac2 : false);
      setNetworkType(state.type || null);
    });
    return function () {
      unsubscribe();
    };
  }, [user == null ? void 0 : user.id]);
  (0, _react.useEffect)(function () {
    var perf = globalThis.performance;
    if (!perf || !perf.memory) return;
    var threshold = 150 * 1024 * 1024;
    var timer = setInterval(function () {
      try {
        var _perf$memory;
        var used = (_perf$memory = perf.memory) == null ? void 0 : _perf$memory.usedJSHeapSize;
        if (typeof used === 'number' && used > threshold) {
          if (!safeMode) {
            setSafeMode(true);
            setSafeModeReason('memory');
            try {
              (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
                event: 'memory_threshold_safe_mode',
                usedHeap: used
              });
            } catch (_unused28) {}
          }
        }
      } catch (_unused29) {}
    }, 60000);
    return function () {
      return clearInterval(timer);
    };
  }, [safeMode]);
  (0, _react.useEffect)(function () {
    console.log('🤖 Main initialization effect:', {
      userId: !!(user != null && user.id),
      isInitialized: isInitialized,
      isInitializing: isInitializing,
      willCall: !!(user != null && user.id && !isInitialized && !isInitializing)
    });
    if (user != null && user.id && !isInitialized && !isInitializing) {
      console.log('🤖 Calling initializeAIServices from main effect...');
      initializeAIServices();
    }
  }, [user == null ? void 0 : user.id, isInitialized, isInitializing, initializeAIServices]);
  (0, _react.useEffect)(function () {
    if (!user) {
      if (__DEV__) console.log('🔄 User signed out - resetting AI state');
      setIsInitialized(false);
      setUserProfile(null);
      setTreatmentPlan(null);
      setCurrentRiskAssessment(null);
      setOnboardingSession(null);
      setHasCompletedOnboarding(false);
      setAvailableFeatures([]);
    }
  }, [user]);
  (0, _react.useEffect)(function () {
    return function () {
      setIsInitialized(false);
      setUserProfile(null);
      setTreatmentPlan(null);
      setCurrentRiskAssessment(null);
      setOnboardingSession(null);
    };
  }, []);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      isInitialized: isInitialized,
      isInitializing: isInitializing,
      initializationError: initializationError,
      safeMode: safeMode,
      safeModeReason: safeModeReason,
      isOnline: isOnline,
      isConnected: isConnected,
      networkType: networkType,
      userProfile: userProfile,
      treatmentPlan: treatmentPlan,
      currentRiskAssessment: currentRiskAssessment,
      onboardingSession: onboardingSession,
      hasCompletedOnboarding: hasCompletedOnboarding,
      availableFeatures: availableFeatures,
      initializeAIServices: initializeAIServices,
      startOnboarding: startOnboarding,
      updateUserProfile: updateUserProfile,
      generateInsights: generateInsights,
      triggerIntervention: triggerIntervention
    };
  }, [isInitialized, isInitializing, initializationError, safeMode, safeModeReason, isOnline, isConnected, networkType, safeMode, userProfile, treatmentPlan, currentRiskAssessment, onboardingSession, hasCompletedOnboarding, availableFeatures, initializeAIServices, startOnboarding, updateUserProfile, generateInsights, triggerIntervention]);
  return (0, _jsxRuntime.jsx)(AIContext.Provider, {
    value: contextValue,
    children: children
  });
}
function useAI() {
  var context = (0, _react.useContext)(AIContext);
  if (context === undefined) {
    throw new Error('useAI must be used within an AIProvider');
  }
  return context;
}
function useAIStatus() {
  var _useAI = useAI(),
    isInitialized = _useAI.isInitialized,
    isInitializing = _useAI.isInitializing,
    initializationError = _useAI.initializationError,
    availableFeatures = _useAI.availableFeatures;
  return {
    isInitialized: isInitialized,
    isInitializing: isInitializing,
    initializationError: initializationError,
    availableFeatures: availableFeatures
  };
}
function useAIUserData() {
  var _useAI2 = useAI(),
    userProfile = _useAI2.userProfile,
    treatmentPlan = _useAI2.treatmentPlan,
    hasCompletedOnboarding = _useAI2.hasCompletedOnboarding;
  return {
    userProfile: userProfile,
    treatmentPlan: treatmentPlan,
    hasCompletedOnboarding: hasCompletedOnboarding
  };
}
function useAIActions() {
  var _useAI3 = useAI(),
    initializeAIServices = _useAI3.initializeAIServices,
    startOnboarding = _useAI3.startOnboarding,
    updateUserProfile = _useAI3.updateUserProfile,
    generateInsights = _useAI3.generateInsights,
    triggerIntervention = _useAI3.triggerIntervention;
  return {
    initializeAIServices: initializeAIServices,
    startOnboarding: startOnboarding,
    updateUserProfile: updateUserProfile,
    generateInsights: generateInsights,
    triggerIntervention: triggerIntervention
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,