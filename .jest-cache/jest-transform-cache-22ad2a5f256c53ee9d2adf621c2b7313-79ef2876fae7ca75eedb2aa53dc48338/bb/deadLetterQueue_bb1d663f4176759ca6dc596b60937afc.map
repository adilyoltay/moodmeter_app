{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","DeadLetterQueueService","_classCallCheck2","default","STORAGE_KEY","MAX_ARCHIVE_DAYS","_createClass2","key","value","_addToDeadLetter","_asyncToGenerator2","item","error","_error$code","queue","getQueue","record","Object","assign","failedAt","Date","toISOString","errorMessage","message","errorCode","code","status","canRetry","isRetryable","archived","push","saveQueue","addToDeadLetter","_x","_x2","apply","arguments","_retryDeadLetterItem","itemId","requeue","found","find","i","id","data","removeFromQueue","_unused","retryDeadLetterItem","_x3","_x4","_list","limit","length","undefined","slice","reverse","list","_archiveOldItems","cutoff","now","updated","map","archiveOldItems","_processDeadLetterQueue","_this","retried","items","SUPPORTED_ENTITIES","Set","SUPPORTED_OPERATIONS","NetInfo","state","fetch","offline","isConnected","isInternetReachable","_unused2","_loop","has","type","entity","console","warn","retryCount","attempt","base","delay","Math","min","pow","floor","random","Promise","res","setTimeout","_yield$import","offlineSyncService","addToSyncQueue","_unused3","_ret","processDeadLetterQueue","_getStatistics","stats","total","retryable","filter","byEntity","byError","forEach","_i$errorCode","err","toString","getStatistics","_getQueue","raw","AsyncStorage","getItem","JSON","parse","_unused4","_saveQueue","setItem","stringify","_x5","_removeFromQueue","filtered","_x6","getInstance","instance","deadLetterQueue","exports","_default"],"sources":["deadLetterQueue.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface DeadLetterItem<T = any> {\n  id: string;\n  type: string;\n  entity: string;\n  data: T;\n  failedAt: string;\n  errorMessage: string;\n  errorCode?: string | number;\n  canRetry: boolean;\n  archived: boolean;\n  retryCount?: number;\n}\n\nclass DeadLetterQueueService {\n  private static instance: DeadLetterQueueService;\n  private readonly STORAGE_KEY = 'dead_letter_queue';\n  private readonly MAX_ARCHIVE_DAYS = 30;\n\n  static getInstance(): DeadLetterQueueService {\n    if (!DeadLetterQueueService.instance) {\n      DeadLetterQueueService.instance = new DeadLetterQueueService();\n    }\n    return DeadLetterQueueService.instance;\n  }\n\n  async addToDeadLetter(item: Omit<DeadLetterItem, 'failedAt' | 'archived' | 'canRetry'>, error?: any): Promise<void> {\n    const queue = await this.getQueue();\n    const record: DeadLetterItem = {\n      ...item,\n      failedAt: new Date().toISOString(),\n      errorMessage: error?.message || item.errorMessage || 'Unknown error',\n      errorCode: error?.code ?? error?.status,\n      canRetry: this.isRetryable(error),\n      archived: false,\n    } as DeadLetterItem;\n    queue.push(record);\n    await this.saveQueue(queue);\n  }\n\n  async retryDeadLetterItem(itemId: string, requeue: (data: any) => Promise<void>): Promise<boolean> {\n    const queue = await this.getQueue();\n    const found = queue.find(i => i.id === itemId);\n    if (!found || !found.canRetry || found.archived) return false;\n    try {\n      await requeue(found.data);\n      await this.removeFromQueue(itemId);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async list(limit: number = 50): Promise<DeadLetterItem[]> {\n    const queue = await this.getQueue();\n    return queue.slice(-limit).reverse();\n  }\n\n  async archiveOldItems(): Promise<number> {\n    const queue = await this.getQueue();\n    const cutoff = new Date(Date.now() - this.MAX_ARCHIVE_DAYS * 86400000);\n    let archived = 0;\n    const updated = queue.map(item => {\n      if (!item.archived && new Date(item.failedAt) < cutoff) {\n        archived++;\n        return { ...item, archived: true };\n      }\n      return item;\n    });\n    await this.saveQueue(updated);\n    return archived;\n  }\n\n  async processDeadLetterQueue(): Promise<{ retried: number; archived: number }> {\n    let retried = 0;\n    let archived = 0;\n    const items = await this.getQueue();\n    \n    // ‚úÖ F-01 FIX: Define supported entities to match offlineSync\n    const SUPPORTED_ENTITIES = new Set([\n      'compulsion', 'achievement', 'mood_entry', 'ai_profile', 'treatment_plan', 'voice_checkin', 'thought_record'\n    ]);\n    const SUPPORTED_OPERATIONS = new Set(['CREATE', 'UPDATE', 'DELETE']);\n    \n    // Network-aware: skip if offline\n    try {\n      const NetInfo = require('@react-native-community/netinfo').default;\n      const state = await NetInfo.fetch();\n      const offline = !(state.isConnected && state.isInternetReachable !== false);\n      if (offline) return { retried: 0, archived: archived + (await this.archiveOldItems()) };\n    } catch {}\n    \n    for (const item of items) {\n      if (item.archived) continue;\n      \n      // ‚úÖ F-01 FIX: Archive unsupported entities immediately\n      if (!SUPPORTED_OPERATIONS.has(item.type as any) || !SUPPORTED_ENTITIES.has(item.entity as any)) {\n        // Mark as archived instead of retrying\n        item.archived = true;\n        archived++;\n        console.warn('üóÑÔ∏è Archived unsupported DLQ item:', { entity: item.entity, type: item.type });\n        continue;\n      }\n      \n      if (item.canRetry && (item.retryCount || 0) < 5) {\n        try {\n          // Exponential backoff with jitter by retryCount\n          const attempt = (item.retryCount || 0) + 1;\n          const base = 2000; // 2 seconds\n          const delay = Math.min(base * Math.pow(2, attempt), 60000) + Math.floor(Math.random() * 500);\n          await new Promise(res => setTimeout(res, delay));\n\n          const { offlineSyncService } = await import('@/services/offlineSync');\n          await offlineSyncService.addToSyncQueue({ type: item.type as any, entity: item.entity as any, data: item.data });\n          await this.removeFromQueue(item.id);\n          retried++;\n        } catch {}\n      }\n    }\n    \n    // Save updated queue with archived items\n    if (archived > 0) {\n      await this.saveQueue(items);\n    }\n    \n    archived += await this.archiveOldItems();\n    return { retried, archived };\n  }\n\n  async getStatistics(): Promise<{\n    total: number;\n    retryable: number;\n    archived: number;\n    byEntity: Record<string, number>;\n    byError: Record<string, number>;\n  }> {\n    const queue = await this.getQueue();\n    const stats = {\n      total: queue.length,\n      retryable: queue.filter(i => i.canRetry && !i.archived).length,\n      archived: queue.filter(i => i.archived).length,\n      byEntity: {} as Record<string, number>,\n      byError: {} as Record<string, number>,\n    };\n    queue.forEach(i => {\n      stats.byEntity[i.entity] = (stats.byEntity[i.entity] || 0) + 1;\n      const err = (i.errorCode ?? 'unknown').toString();\n      stats.byError[err] = (stats.byError[err] || 0) + 1;\n    });\n    return stats;\n  }\n\n  private isRetryable(error: any): boolean {\n    if (!error) return false;\n    if (error?.code === 'NETWORK_ERROR') return true;\n    if (error?.code === 'TIMEOUT') return true;\n    if (error?.status === 429) return true;\n    if (error?.status >= 500 && error?.status < 600) return true;\n    if (error?.status === 401 || error?.status === 403) return false;\n    if (error?.status === 400) return false;\n    return false;\n  }\n\n  private async getQueue(): Promise<DeadLetterItem[]> {\n    try {\n      const raw = await AsyncStorage.getItem(this.STORAGE_KEY);\n      return raw ? JSON.parse(raw) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  private async saveQueue(queue: DeadLetterItem[]): Promise<void> {\n    await AsyncStorage.setItem(this.STORAGE_KEY, JSON.stringify(queue));\n  }\n\n  private async removeFromQueue(itemId: string): Promise<void> {\n    const queue = await this.getQueue();\n    const filtered = queue.filter(i => i.id !== itemId);\n    await this.saveQueue(filtered);\n  }\n}\n\nexport const deadLetterQueue = DeadLetterQueueService.getInstance();\nexport default deadLetterQueue;\n\n\n"],"mappings":"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","ignoreList":[]}