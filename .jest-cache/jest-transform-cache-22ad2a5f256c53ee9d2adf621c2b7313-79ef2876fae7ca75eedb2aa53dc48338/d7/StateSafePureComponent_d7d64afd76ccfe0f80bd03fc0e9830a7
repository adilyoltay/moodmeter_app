d1d26d67bdbfe677ea8c113fe17e2bb8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var StateSafePureComponent = exports.default = function (_React$PureComponent) {
  function StateSafePureComponent(props) {
    var _this;
    (0, _classCallCheck2.default)(this, StateSafePureComponent);
    _this = _callSuper(this, StateSafePureComponent, [props]);
    _this._inAsyncStateUpdate = false;
    _this._installSetStateHooks();
    return _this;
  }
  (0, _inherits2.default)(StateSafePureComponent, _React$PureComponent);
  return (0, _createClass2.default)(StateSafePureComponent, [{
    key: "setState",
    value: function setState(partialState, callback) {
      var _this2 = this;
      if (typeof partialState === 'function') {
        _superPropGet(StateSafePureComponent, "setState", this, 3)([function (state, props) {
          _this2._inAsyncStateUpdate = true;
          var ret;
          try {
            ret = partialState(state, props);
          } catch (err) {
            throw err;
          } finally {
            _this2._inAsyncStateUpdate = false;
          }
          return ret;
        }, callback]);
      } else {
        _superPropGet(StateSafePureComponent, "setState", this, 3)([partialState, callback]);
      }
    }
  }, {
    key: "_installSetStateHooks",
    value: function _installSetStateHooks() {
      var that = this;
      var props = this.props,
        state = this.state;
      Object.defineProperty(this, 'props', {
        get: function get() {
          (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.props" should not be accessed during state updates');
          return props;
        },
        set: function set(newProps) {
          props = newProps;
        }
      });
      Object.defineProperty(this, 'state', {
        get: function get() {
          (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.state" should not be acceessed during state updates');
          return state;
        },
        set: function set(newState) {
          state = newState;
        }
      });
    }
  }]);
}(React.PureComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,