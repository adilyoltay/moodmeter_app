8fb823bf09da0e2e33cf7ff39310d2cf
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recencyAlpha = exports.quantiles = exports.lcg = exports.jitterXY = exports.energyToColor = exports.deriveAnxietySeries = void 0;
var quantiles = exports.quantiles = function quantiles(arr) {
  var vals = (arr || []).map(Number).filter(function (n) {
    return Number.isFinite(n);
  });
  if (vals.length === 0) return {
    p25: NaN,
    p50: NaN,
    p75: NaN
  };
  var a = Float64Array.from(vals).sort();
  var q = function q(p) {
    var idx = (a.length - 1) * p;
    var lo = Math.floor(idx);
    var hi = Math.ceil(idx);
    if (lo === hi) return a[lo];
    var t = idx - lo;
    return a[lo] * (1 - t) + a[hi] * t;
  };
  return {
    p25: q(0.25),
    p50: q(0.5),
    p75: q(0.75)
  };
};
var recencyAlpha = exports.recencyAlpha = function recencyAlpha(ts, minTs, maxTs) {
  if (maxTs === minTs) return 1;
  var t = (ts - minTs) / (maxTs - minTs);
  return 0.5 + 0.5 * Math.max(0, Math.min(1, t));
};
var lcg = exports.lcg = function lcg(seed) {
  return function () {
    return (seed = seed * 1664525 + 1013904223 >>> 0) / 2 ** 32;
  };
};
var jitterXY = exports.jitterXY = function jitterXY(seedKey) {
  var xMaxPx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;
  var yMaxPx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2.2;
  var h = 2166136261;
  for (var i = 0; i < seedKey.length; i++) {
    h ^= seedKey.charCodeAt(i);
    h = Math.imul(h, 16777619);
  }
  var rnd = lcg(h >>> 0);
  return {
    jx: (rnd() - 0.5) * 2 * xMaxPx,
    jy: (rnd() - 0.5) * 2 * yMaxPx
  };
};
var energyToColor = exports.energyToColor = function energyToColor(e) {
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var isDark = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var raw = typeof e === 'number' && e <= 10 ? e * 10 : e;
  var val = Number.isFinite(raw) ? raw : 60;
  var clamped = Math.max(0, Math.min(100, val));
  var hue = 200 - 180 * clamped / 100;
  var lightness = isDark ? 58 : 46;
  var h = Number.isFinite(hue) ? Math.round(hue) : 200;
  return `hsla(${h}, 65%, ${lightness}%, ${alpha})`;
};
var deriveAnxietySeries = exports.deriveAnxietySeries = function deriveAnxietySeries(moods, energies, rawAnx) {
  var anx = (rawAnx || []).filter(function (v) {
    return Number.isFinite(v);
  });
  if (anx.length === 0) return [5];
  var allFives = anx.every(function (v) {
    return v === 5;
  });
  if (allFives && ((moods == null ? void 0 : moods.length) || 0) > 0 && ((energies == null ? void 0 : energies.length) || 0) > 0) {
    var avgMood = moods.reduce(function (s, v) {
      return s + v;
    }, 0) / moods.length;
    var avgEnergy = energies.reduce(function (s, v) {
      return s + v;
    }, 0) / energies.length;
    var m10 = Math.max(1, Math.min(10, Math.round(avgMood / 10)));
    var e10 = Math.max(1, Math.min(10, Math.round(avgEnergy)));
    var derived = 5;
    if (m10 <= 3) derived = 7;else if (m10 >= 8 && e10 <= 4) derived = 6;else if (m10 <= 5 && e10 >= 7) derived = 8;else if (m10 >= 7 && e10 >= 7) derived = 4;else derived = Math.max(2, Math.min(8, 6 - (m10 - 5)));
    return new Array(anx.length).fill(derived);
  }
  return anx;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,