67b6c89c470f17dfde814131d590299e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveUserData = exports.migrateToUserSpecificStorage = exports.loadUserData = exports.getUserStorageKey = exports.clearUserData = exports.StorageKeys = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var StorageKeys = exports.StorageKeys = {
  PROFILE_COMPLETED: 'profileCompleted',
  OCD_PROFILE: function OCD_PROFILE(userId) {
    return `ocd_profile_${userId}`;
  },
  COMPULSIONS: function COMPULSIONS(userId) {
    return `compulsions_${userId}`;
  },
  Terapi_SESSIONS: function Terapi_SESSIONS(userId, date) {
    return date ? `therapy_sessions_${userId}_${date}` : `therapy_sessions_${userId}`;
  },
  BREATH_SESSIONS: function BREATH_SESSIONS(userId, date) {
    return date ? `breath_sessions_${userId}_${date}` : `breath_sessions_${userId}`;
  },
  GAMIFICATION: function GAMIFICATION(userId) {
    return `gamification_${userId}`;
  },
  USER_SETTINGS: function USER_SETTINGS(userId) {
    return `settings_${userId}`;
  },
  SETTINGS: 'app_settings',
  LAST_COMPULSION: function LAST_COMPULSION(userId) {
    return `last_compulsion_${userId}`;
  },
  LAST_Terapi_EXERCISE: function LAST_Terapi_EXERCISE(userId) {
    return `last_therapy_${userId}`;
  },
  CHECKINS: function CHECKINS(userId) {
    return `checkins_${userId}`;
  },
  VOICE_CONSENT_STT: function VOICE_CONSENT_STT(userId) {
    return `consent_stt_${userId}`;
  },
  VOICE_CONSENT_TTS: function VOICE_CONSENT_TTS(userId) {
    return `consent_tts_${userId}`;
  },
  THOUGHT_RECORDS: function THOUGHT_RECORDS(userId) {
    return `thought_records_${userId}`;
  },
  THOUGHT_RECORD_DRAFT: function THOUGHT_RECORD_DRAFT(userId) {
    return `thought_record_draft_${userId}`;
  }
};
var getUserStorageKey = exports.getUserStorageKey = function getUserStorageKey(baseKey, userId) {
  if (!userId || typeof userId !== 'string') {
    return `${baseKey}_anon`;
  }
  return `${baseKey}_${userId}`;
};
var saveUserData = exports.saveUserData = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (key, data, userId) {
    try {
      var storageKey = userId ? getUserStorageKey(key, userId) : key;
      yield _asyncStorage.default.setItem(storageKey, JSON.stringify(data));
    } catch (error) {
      console.error(`❌ Error saving data for key ${key}:`, error);
      throw error;
    }
  });
  return function saveUserData(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var loadUserData = exports.loadUserData = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (key, userId) {
    try {
      var storageKey = userId ? getUserStorageKey(key, userId) : key;
      var data = yield _asyncStorage.default.getItem(storageKey);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error(`❌ Error loading data for key ${key}:`, error);
      return null;
    }
  });
  return function loadUserData(_x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
var clearUserData = exports.clearUserData = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (userId) {
    try {
      var keys = yield _asyncStorage.default.getAllKeys();
      var userKeys = keys.filter(function (key) {
        return key.includes(`_${userId}`);
      });
      if (userKeys.length > 0) {
        yield _asyncStorage.default.multiRemove(userKeys);
        console.log(`✅ Cleared ${userKeys.length} keys for user ${userId}`);
      }
    } catch (error) {
      console.error('❌ Error clearing user data:', error);
      throw error;
    }
  });
  return function clearUserData(_x6) {
    return _ref3.apply(this, arguments);
  };
}();
var migrateToUserSpecificStorage = exports.migrateToUserSpecificStorage = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (userId) {
    try {
      var oldCompulsions = yield _asyncStorage.default.getItem('compulsionEntries');
      if (oldCompulsions) {
        yield _asyncStorage.default.setItem(StorageKeys.COMPULSIONS(userId), oldCompulsions);
        yield _asyncStorage.default.removeItem('compulsionEntries');
        console.log('✅ Migrated compulsions data');
      }
      var oldSettings = yield _asyncStorage.default.getItem('user_settings');
      if (oldSettings) {
        yield _asyncStorage.default.setItem(StorageKeys.USER_SETTINGS(userId), oldSettings);
        yield _asyncStorage.default.removeItem('user_settings');
        console.log('✅ Migrated settings data');
      }
      var oldGamification = yield _asyncStorage.default.getItem('gamification_profile');
      if (oldGamification) {
        yield _asyncStorage.default.setItem(StorageKeys.GAMIFICATION(userId), oldGamification);
        yield _asyncStorage.default.removeItem('gamification_profile');
        console.log('✅ Migrated gamification data');
      }
    } catch (error) {
      console.error('❌ Error during migration:', error);
    }
  });
  return function migrateToUserSpecificStorage(_x7) {
    return _ref4.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,