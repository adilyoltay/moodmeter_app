43ffe59cccb48b3bf35c7e2d11d98bc1
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["initialProps"],
  _excluded2 = ["initialProps"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderHook = renderHook;
exports.renderHookAsync = renderHookAsync;
var React = _interopRequireWildcard(require("react"));
var _render = _interopRequireDefault(require("./render"));
var _renderAsync = _interopRequireDefault(require("./render-async"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function renderHook(hookToRender, options) {
  var result = React.createRef();
  function HookContainer(_ref) {
    var hookProps = _ref.hookProps;
    var renderResult = hookToRender(hookProps);
    React.useEffect(function () {
      result.current = renderResult;
    });
    return null;
  }
  var _ref2 = options != null ? options : {},
    initialProps = _ref2.initialProps,
    renderOptions = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  var _ref3 = (0, _render.default)(React.createElement(HookContainer, {
      hookProps: initialProps
    }), renderOptions),
    rerenderComponent = _ref3.rerender,
    unmount = _ref3.unmount;
  return {
    result: result,
    rerender: function rerender(hookProps) {
      return rerenderComponent(React.createElement(HookContainer, {
        hookProps: hookProps
      }));
    },
    unmount: unmount
  };
}
function renderHookAsync(_x, _x2) {
  return _renderHookAsync.apply(this, arguments);
}
function _renderHookAsync() {
  _renderHookAsync = (0, _asyncToGenerator2.default)(function* (hookToRender, options) {
    var result = React.createRef();
    function TestComponent(_ref4) {
      var hookProps = _ref4.hookProps;
      var renderResult = hookToRender(hookProps);
      React.useEffect(function () {
        result.current = renderResult;
      });
      return null;
    }
    var _ref5 = options != null ? options : {},
      initialProps = _ref5.initialProps,
      renderOptions = (0, _objectWithoutProperties2.default)(_ref5, _excluded2);
    var _yield = yield (0, _renderAsync.default)(React.createElement(TestComponent, {
        hookProps: initialProps
      }), renderOptions),
      rerenderComponentAsync = _yield.rerenderAsync,
      unmountAsync = _yield.unmountAsync;
    return {
      result: result,
      rerenderAsync: function rerenderAsync(hookProps) {
        return rerenderComponentAsync(React.createElement(TestComponent, {
          hookProps: hookProps
        }));
      },
      unmountAsync: unmountAsync
    };
  });
  return _renderHookAsync.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,