26ca054f1b0a7b68cb56bf615afca725
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeVisible = toBeVisible;
var _reactNative = require("react-native");
var _jestMatcherUtils = require("jest-matcher-utils");
var _redent = _interopRequireDefault(require("redent"));
var _accessibility = require("../helpers/accessibility");
var _componentTree = require("../helpers/component-tree");
var _formatElement = require("../helpers/format-element");
var _hostComponentNames = require("../helpers/host-component-names");
var _utils = require("./utils");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function toBeVisible(element) {
  var _this = this;
  if (element !== null || !this.isNot) {
    (0, _utils.checkHostElement)(element, toBeVisible, this);
  }
  return {
    pass: isElementVisible(element),
    message: function message() {
      var is = _this.isNot ? 'is' : 'is not';
      return [(0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toBeVisible`, 'element', ''), '', `Received element ${is} visible:`, (0, _redent.default)((0, _formatElement.formatElement)(element), 2)].join('\n');
    }
  };
}
function isElementVisible(element, accessibilityCache) {
  var cache = accessibilityCache != null ? accessibilityCache : new WeakMap();
  if ((0, _accessibility.isHiddenFromAccessibility)(element, {
    cache: cache
  })) {
    return false;
  }
  if (isHiddenForStyles(element)) {
    return false;
  }
  if ((0, _hostComponentNames.isHostModal)(element) && element.props.visible === false) {
    return false;
  }
  var hostParent = (0, _componentTree.getHostParent)(element);
  if (hostParent === null) {
    return true;
  }
  return isElementVisible(hostParent, cache);
}
function isHiddenForStyles(element) {
  var flatStyle = _reactNative.StyleSheet.flatten(element.props.style);
  return (flatStyle == null ? void 0 : flatStyle.display) === 'none' || (flatStyle == null ? void 0 : flatStyle.opacity) === 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2plc3RNYXRjaGVyVXRpbHMiLCJfcmVkZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hY2Nlc3NpYmlsaXR5IiwiX2NvbXBvbmVudFRyZWUiLCJfZm9ybWF0RWxlbWVudCIsIl9ob3N0Q29tcG9uZW50TmFtZXMiLCJfdXRpbHMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0b0JlVmlzaWJsZSIsImVsZW1lbnQiLCJfdGhpcyIsImlzTm90IiwiY2hlY2tIb3N0RWxlbWVudCIsInBhc3MiLCJpc0VsZW1lbnRWaXNpYmxlIiwibWVzc2FnZSIsImlzIiwibWF0Y2hlckhpbnQiLCJmb3JtYXRFbGVtZW50Iiwiam9pbiIsImFjY2Vzc2liaWxpdHlDYWNoZSIsImNhY2hlIiwiV2Vha01hcCIsImlzSGlkZGVuRnJvbUFjY2Vzc2liaWxpdHkiLCJpc0hpZGRlbkZvclN0eWxlcyIsImlzSG9zdE1vZGFsIiwicHJvcHMiLCJ2aXNpYmxlIiwiaG9zdFBhcmVudCIsImdldEhvc3RQYXJlbnQiLCJmbGF0U3R5bGUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlIiwiZGlzcGxheSIsIm9wYWNpdHkiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0Y2hlcnMvdG8tYmUtdmlzaWJsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IG1hdGNoZXJIaW50IH0gZnJvbSAnamVzdC1tYXRjaGVyLXV0aWxzJztcbmltcG9ydCByZWRlbnQgZnJvbSAncmVkZW50JztcblxuaW1wb3J0IHsgaXNIaWRkZW5Gcm9tQWNjZXNzaWJpbGl0eSB9IGZyb20gJy4uL2hlbHBlcnMvYWNjZXNzaWJpbGl0eSc7XG5pbXBvcnQgeyBnZXRIb3N0UGFyZW50IH0gZnJvbSAnLi4vaGVscGVycy9jb21wb25lbnQtdHJlZSc7XG5pbXBvcnQgeyBmb3JtYXRFbGVtZW50IH0gZnJvbSAnLi4vaGVscGVycy9mb3JtYXQtZWxlbWVudCc7XG5pbXBvcnQgeyBpc0hvc3RNb2RhbCB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgY2hlY2tIb3N0RWxlbWVudCB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9CZVZpc2libGUodGhpczogamVzdC5NYXRjaGVyQ29udGV4dCwgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpIHtcbiAgaWYgKGVsZW1lbnQgIT09IG51bGwgfHwgIXRoaXMuaXNOb3QpIHtcbiAgICBjaGVja0hvc3RFbGVtZW50KGVsZW1lbnQsIHRvQmVWaXNpYmxlLCB0aGlzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFzczogaXNFbGVtZW50VmlzaWJsZShlbGVtZW50KSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCBpcyA9IHRoaXMuaXNOb3QgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBtYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVWaXNpYmxlYCwgJ2VsZW1lbnQnLCAnJyksXG4gICAgICAgICcnLFxuICAgICAgICBgUmVjZWl2ZWQgZWxlbWVudCAke2lzfSB2aXNpYmxlOmAsXG4gICAgICAgIHJlZGVudChmb3JtYXRFbGVtZW50KGVsZW1lbnQpLCAyKSxcbiAgICAgIF0uam9pbignXFxuJyk7XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50VmlzaWJsZShcbiAgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIGFjY2Vzc2liaWxpdHlDYWNoZT86IFdlYWtNYXA8UmVhY3RUZXN0SW5zdGFuY2UsIGJvb2xlYW4+LFxuKTogYm9vbGVhbiB7XG4gIC8vIFVzZSBjYWNoZSB0byBzcGVlZCB1cCByZXBlYXRlZCBzZWFyY2hlcyBieSBgaXNIaWRkZW5Gcm9tQWNjZXNzaWJpbGl0eWAuXG4gIGNvbnN0IGNhY2hlID0gYWNjZXNzaWJpbGl0eUNhY2hlID8/IG5ldyBXZWFrTWFwPFJlYWN0VGVzdEluc3RhbmNlLCBib29sZWFuPigpO1xuICBpZiAoaXNIaWRkZW5Gcm9tQWNjZXNzaWJpbGl0eShlbGVtZW50LCB7IGNhY2hlIH0pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzSGlkZGVuRm9yU3R5bGVzKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gTm90ZTogdGhpcyBzZWVtcyB0byBiZSBhIGJ1ZyBpbiBSZWFjdCBOYXRpdmUuXG4gIC8vIFBSIHdpdGggZml4OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMzkxNTdcbiAgaWYgKGlzSG9zdE1vZGFsKGVsZW1lbnQpICYmIGVsZW1lbnQucHJvcHMudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBob3N0UGFyZW50ID0gZ2V0SG9zdFBhcmVudChlbGVtZW50KTtcbiAgaWYgKGhvc3RQYXJlbnQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBpc0VsZW1lbnRWaXNpYmxlKGhvc3RQYXJlbnQsIGNhY2hlKTtcbn1cblxuZnVuY3Rpb24gaXNIaWRkZW5Gb3JTdHlsZXMoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpIHtcbiAgY29uc3QgZmxhdFN0eWxlID0gU3R5bGVTaGVldC5mbGF0dGVuKGVsZW1lbnQucHJvcHMuc3R5bGUpO1xuICByZXR1cm4gZmxhdFN0eWxlPy5kaXNwbGF5ID09PSAnbm9uZScgfHwgZmxhdFN0eWxlPy5vcGFjaXR5ID09PSAwO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxZQUFB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