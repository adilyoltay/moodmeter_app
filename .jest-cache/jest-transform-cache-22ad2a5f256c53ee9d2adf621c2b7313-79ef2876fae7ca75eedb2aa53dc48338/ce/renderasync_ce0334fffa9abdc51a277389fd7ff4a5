5943a423c89684a1358c8e7d57f18ef5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
var _excluded = ["wrapper", "concurrentRoot"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderAsync;
var React = _interopRequireWildcard(require("react"));
var _act = _interopRequireDefault(require("./act"));
var _cleanup = require("./cleanup");
var _config = require("./config");
var _componentTree = require("./helpers/component-tree");
var _debug = require("./helpers/debug");
var _errors = require("./helpers/errors");
var _renderAct = require("./render-act");
var _screen = require("./screen");
var _within = require("./within");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function renderAsync(_x) {
  return _renderAsync.apply(this, arguments);
}
function _renderAsync() {
  _renderAsync = (0, _asyncToGenerator2.default)(function* (component) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _ref6 = options || {},
      Wrapper = _ref6.wrapper,
      concurrentRoot = _ref6.concurrentRoot,
      rest = (0, _objectWithoutProperties2.default)(_ref6, _excluded);
    var testRendererOptions = Object.assign({}, rest, {
      unstable_isConcurrent: concurrentRoot != null ? concurrentRoot : (0, _config.getConfig)().concurrentRoot
    });
    var wrap = function wrap(element) {
      return Wrapper ? React.createElement(Wrapper, null, element) : element;
    };
    var renderer = yield (0, _renderAct.renderWithAsyncAct)(wrap(component), testRendererOptions);
    return buildRenderResult(renderer, wrap);
  });
  return _renderAsync.apply(this, arguments);
}
function buildRenderResult(renderer, wrap) {
  var instance = renderer.root;
  var _rerender = function rerender(_component) {
    throw new _errors.ErrorWithStack('"rerender(...)" is not supported when using "renderAsync" use "await rerenderAsync(...)" instead', _rerender);
  };
  var rerenderAsync = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (component) {
      yield (0, _act.default)((0, _asyncToGenerator2.default)(function* () {
        renderer.update(wrap(component));
      }));
    });
    return function rerenderAsync(_x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var _unmount = function unmount() {
    throw new _errors.ErrorWithStack('"unmount()" is not supported when using "renderAsync" use "await unmountAsync()" instead', _unmount);
  };
  var unmountAsync = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      yield (0, _act.default)((0, _asyncToGenerator2.default)(function* () {
        renderer.unmount();
      }));
    });
    return function unmountAsync() {
      return _ref3.apply(this, arguments);
    };
  }();
  (0, _cleanup.addToCleanupQueue)(unmountAsync);
  var result = Object.assign({}, (0, _within.getQueriesForElement)(instance), {
    rerender: _rerender,
    rerenderAsync: rerenderAsync,
    update: _rerender,
    updateAsync: rerenderAsync,
    unmount: _unmount,
    unmountAsync: unmountAsync,
    toJSON: renderer.toJSON,
    debug: makeDebug(renderer),
    get root() {
      return (0, _componentTree.getHostSelves)(instance)[0];
    },
    UNSAFE_root: instance
  });
  Object.defineProperty(result, 'container', {
    enumerable: false,
    get: function get() {
      throw new Error("'container' property has been renamed to 'UNSAFE_root'.\n\n" + "Consider using 'root' property which returns root host element.");
    }
  });
  (0, _screen.setRenderResult)(result);
  return result;
}
function makeDebug(renderer) {
  function debugImpl(options) {
    var _ref5 = (0, _config.getConfig)(),
      defaultDebugOptions = _ref5.defaultDebugOptions;
    var debugOptions = Object.assign({}, defaultDebugOptions, options);
    var json = renderer.toJSON();
    if (json) {
      return (0, _debug.debug)(json, debugOptions);
    }
  }
  return debugImpl;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,