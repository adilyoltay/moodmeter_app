517adebc88831c4e4fa3508b133a3f4f
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CANONICAL_CATEGORIES = void 0;
exports.isCanonicalCategory = isCanonicalCategory;
exports.mapToCanonicalCategory = mapToCanonicalCategory;
exports.mapToDatabaseCategory = mapToDatabaseCategory;
var CANONICAL_CATEGORIES = exports.CANONICAL_CATEGORIES = ['contamination', 'checking', 'symmetry', 'mental', 'hoarding', 'other'];
var legacyToCanonicalMap = {
  washing: 'contamination',
  cleaning: 'contamination',
  contamination: 'contamination',
  checking: 'checking',
  ordering: 'symmetry',
  arranging: 'symmetry',
  symmetry: 'symmetry',
  counting: 'symmetry',
  repeating: 'symmetry',
  touching: 'symmetry',
  mental: 'mental',
  religious: 'mental',
  morality: 'mental',
  hoarding: 'hoarding',
  reassurance: 'other',
  avoidance: 'other',
  other: 'other',
  harm: 'other',
  sexual: 'other'
};
function mapToCanonicalCategory(input) {
  var _legacyToCanonicalMap;
  var key = (input || '').toLowerCase().trim();
  return (_legacyToCanonicalMap = legacyToCanonicalMap[key]) != null ? _legacyToCanonicalMap : 'other';
}
function isCanonicalCategory(value) {
  return CANONICAL_CATEGORIES.includes((value || '').toLowerCase());
}
var DB_ALLOWED_CATEGORIES = ['contamination', 'harm', 'symmetry', 'religious', 'sexual', 'hoarding'];
function mapToDatabaseCategory(input) {
  var _legacyToDbMap$key;
  var key = (input || '').toLowerCase().trim();
  if (DB_ALLOWED_CATEGORIES.includes(key)) {
    return key;
  }
  var legacyToDbMap = {
    washing: 'contamination',
    cleaning: 'contamination',
    contamination: 'contamination',
    checking: 'symmetry',
    ordering: 'symmetry',
    arranging: 'symmetry',
    symmetry: 'symmetry',
    counting: 'symmetry',
    repeating: 'symmetry',
    touching: 'symmetry',
    mental: 'religious',
    religious: 'religious',
    morality: 'religious',
    hoarding: 'hoarding',
    harm: 'harm',
    sexual: 'sexual',
    reassurance: 'harm',
    avoidance: 'harm',
    other: 'harm'
  };
  return (_legacyToDbMap$key = legacyToDbMap[key]) != null ? _legacyToDbMap$key : 'harm';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQU5PTklDQUxfQ0FURUdPUklFUyIsImV4cG9ydHMiLCJsZWdhY3lUb0Nhbm9uaWNhbE1hcCIsIndhc2hpbmciLCJjbGVhbmluZyIsImNvbnRhbWluYXRpb24iLCJjaGVja2luZyIsIm9yZGVyaW5nIiwiYXJyYW5naW5nIiwic3ltbWV0cnkiLCJjb3VudGluZyIsInJlcGVhdGluZyIsInRvdWNoaW5nIiwibWVudGFsIiwicmVsaWdpb3VzIiwibW9yYWxpdHkiLCJob2FyZGluZyIsInJlYXNzdXJhbmNlIiwiYXZvaWRhbmNlIiwib3RoZXIiLCJoYXJtIiwic2V4dWFsIiwibWFwVG9DYW5vbmljYWxDYXRlZ29yeSIsImlucHV0IiwiX2xlZ2FjeVRvQ2Fub25pY2FsTWFwIiwia2V5IiwidG9Mb3dlckNhc2UiLCJ0cmltIiwiaXNDYW5vbmljYWxDYXRlZ29yeSIsInZhbHVlIiwiaW5jbHVkZXMiLCJEQl9BTExPV0VEX0NBVEVHT1JJRVMiLCJtYXBUb0RhdGFiYXNlQ2F0ZWdvcnkiLCJfbGVnYWN5VG9EYk1hcCRrZXkiLCJsZWdhY3lUb0RiTWFwIl0sInNvdXJjZXMiOlsiY2F0ZWdvcnlNYXBwaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEthbm9uaWsgT0tCIGthdGVnb3JpIGXFn2xlbWVzaSB2ZSB5YXJkxLFtY8SxIGZvbmtzaXlvbmxhclxuXG5leHBvcnQgdHlwZSBDYW5vbmljYWxDYXRlZ29yeSA9XG4gIHwgJ2NvbnRhbWluYXRpb24nXG4gIHwgJ2NoZWNraW5nJ1xuICB8ICdzeW1tZXRyeSdcbiAgfCAnbWVudGFsJ1xuICB8ICdob2FyZGluZydcbiAgfCAnb3RoZXInO1xuXG5leHBvcnQgY29uc3QgQ0FOT05JQ0FMX0NBVEVHT1JJRVM6IENhbm9uaWNhbENhdGVnb3J5W10gPSBbXG4gICdjb250YW1pbmF0aW9uJyxcbiAgJ2NoZWNraW5nJyxcbiAgJ3N5bW1ldHJ5JyxcbiAgJ21lbnRhbCcsXG4gICdob2FyZGluZycsXG4gICdvdGhlcicsXG5dO1xuXG4vLyBVeWd1bGFtYWRha2kgZXNraS/Dp2XFn2l0bGkgZXRpa2V0bGVyaSBrYW5vbmlrIHNldGUgZcWfbGVyXG5jb25zdCBsZWdhY3lUb0Nhbm9uaWNhbE1hcDogUmVjb3JkPHN0cmluZywgQ2Fub25pY2FsQ2F0ZWdvcnk+ID0ge1xuICAvLyBUZW1pemxpay9CdWxhxZ9tYVxuICB3YXNoaW5nOiAnY29udGFtaW5hdGlvbicsXG4gIGNsZWFuaW5nOiAnY29udGFtaW5hdGlvbicsXG4gIGNvbnRhbWluYXRpb246ICdjb250YW1pbmF0aW9uJyxcblxuICAvLyBLb250cm9sXG4gIGNoZWNraW5nOiAnY2hlY2tpbmcnLFxuXG4gIC8vIFNpbWV0cmkvRMO8emVuL1NheW1hL0Rva3VubWEgcml0w7xlbGxlcmlcbiAgb3JkZXJpbmc6ICdzeW1tZXRyeScsXG4gIGFycmFuZ2luZzogJ3N5bW1ldHJ5JyxcbiAgc3ltbWV0cnk6ICdzeW1tZXRyeScsXG4gIGNvdW50aW5nOiAnc3ltbWV0cnknLFxuICByZXBlYXRpbmc6ICdzeW1tZXRyeScsXG4gIHRvdWNoaW5nOiAnc3ltbWV0cnknLFxuXG4gIC8vIFppaGluc2VsIHJpdMO8ZWxsZXIgdmUgZGluaS9haGxha2kgdGVtYWxhclxuICBtZW50YWw6ICdtZW50YWwnLFxuICByZWxpZ2lvdXM6ICdtZW50YWwnLFxuICBtb3JhbGl0eTogJ21lbnRhbCcsXG5cbiAgLy8gQmlyaWt0aXJtZVxuICBob2FyZGluZzogJ2hvYXJkaW5nJyxcblxuICAvLyBEacSfZXIvZXRpa2V0bGVyXG4gIHJlYXNzdXJhbmNlOiAnb3RoZXInLFxuICBhdm9pZGFuY2U6ICdvdGhlcicsXG4gIG90aGVyOiAnb3RoZXInLFxuICBcbiAgLy8gVGhlcmFweSBkb21haW4gbGVnYWN5IElEcyBtYXBwZWQgdG8gY2xvc2VzdCBjYW5vbmljYWwgT0NEIGNhdGVnb3J5XG4gIGhhcm06ICdvdGhlcicsXG4gIHNleHVhbDogJ290aGVyJyxcbn07XG5cbi8qKlxuICogR2lyaWxlbiBrYXRlZ29yaSBkZcSfZXJpbmkga2Fub25payBPS0Iga2F0ZWdvcmlzaW5lIMOnZXZpcmlyLlxuICogQmlsaW5tZXllbiBkZcSfZXJsZXIgXCJvdGhlclwiIG9sYXJhayBkw7ZuZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb0Nhbm9uaWNhbENhdGVnb3J5KGlucHV0OiBzdHJpbmcpOiBDYW5vbmljYWxDYXRlZ29yeSB7XG4gIGNvbnN0IGtleSA9IChpbnB1dCB8fCAnJykudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gIHJldHVybiBsZWdhY3lUb0Nhbm9uaWNhbE1hcFtrZXldID8/ICdvdGhlcic7XG59XG5cbi8qKlxuICogS2Fub25payBrYXRlZ29yaSBtaSBrb250cm9sIGVkZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Nhbm9uaWNhbENhdGVnb3J5KHZhbHVlOiBzdHJpbmcpOiB2YWx1ZSBpcyBDYW5vbmljYWxDYXRlZ29yeSB7XG4gIHJldHVybiAoQ0FOT05JQ0FMX0NBVEVHT1JJRVMgYXMgc3RyaW5nW10pLmluY2x1ZGVzKCh2YWx1ZSB8fCAnJykudG9Mb3dlckNhc2UoKSk7XG59XG5cbi8vID09PT09PT09PT09PT09PVxuLy8gREIgS2F0ZWdvcmlsZXJpXG4vLyA9PT09PT09PT09PT09PT1cblxuLy8gU3VwYWJhc2UgxZ9lbWFzxLFuZGFraSBDSEVDSyBjb25zdHJhaW50J2UgZ8O2cmUgaXppbiB2ZXJpbGVuIGthdGVnb3JpbGVyXG5leHBvcnQgdHlwZSBEYXRhYmFzZUNhdGVnb3J5ID0gJ2NvbnRhbWluYXRpb24nIHwgJ2hhcm0nIHwgJ3N5bW1ldHJ5JyB8ICdyZWxpZ2lvdXMnIHwgJ3NleHVhbCcgfCAnaG9hcmRpbmcnO1xuXG5jb25zdCBEQl9BTExPV0VEX0NBVEVHT1JJRVM6IERhdGFiYXNlQ2F0ZWdvcnlbXSA9IFtcbiAgJ2NvbnRhbWluYXRpb24nLCAnaGFybScsICdzeW1tZXRyeScsICdyZWxpZ2lvdXMnLCAnc2V4dWFsJywgJ2hvYXJkaW5nJ1xuXTtcblxuLyoqXG4gKiBVeWd1bGFtYS9sZWdhY3kgZXRpa2V0bGVyaSBEQiduaW4ga2FidWwgZXR0acSfaSBrYXRlZ29yaWxlcmUgZcWfbGVyLlxuICogQW1hw6c6IENIRUNLIGNvbnN0cmFpbnQgaWhsYWxsZXJpbmkgw7ZubGVtZWsuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb0RhdGFiYXNlQ2F0ZWdvcnkoaW5wdXQ6IHN0cmluZyk6IERhdGFiYXNlQ2F0ZWdvcnkge1xuICBjb25zdCBrZXkgPSAoaW5wdXQgfHwgJycpLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuXG4gIC8vIERvxJ9ydWRhbiBlxZ9pdGxpayAoemF0ZW4gREIga2F0ZWdvcmlsZXJpbmRlbiBiaXJpIGlzZSlcbiAgaWYgKChEQl9BTExPV0VEX0NBVEVHT1JJRVMgYXMgc3RyaW5nW10pLmluY2x1ZGVzKGtleSkpIHtcbiAgICByZXR1cm4ga2V5IGFzIERhdGFiYXNlQ2F0ZWdvcnk7XG4gIH1cblxuICAvLyBMZWdhY3kg4oaSIERCIG1hcHBpbmdcbiAgY29uc3QgbGVnYWN5VG9EYk1hcDogUmVjb3JkPHN0cmluZywgRGF0YWJhc2VDYXRlZ29yeT4gPSB7XG4gICAgLy8gVGVtaXpsaWsvYnVsYcWfbWFcbiAgICB3YXNoaW5nOiAnY29udGFtaW5hdGlvbicsXG4gICAgY2xlYW5pbmc6ICdjb250YW1pbmF0aW9uJyxcbiAgICBjb250YW1pbmF0aW9uOiAnY29udGFtaW5hdGlvbicsXG5cbiAgICAvLyBLb250cm9sL1NpbWV0cmkvRMO8emVuL1NheW1hIOKGkiBzeW1tZXRyeVxuICAgIGNoZWNraW5nOiAnc3ltbWV0cnknLFxuICAgIG9yZGVyaW5nOiAnc3ltbWV0cnknLFxuICAgIGFycmFuZ2luZzogJ3N5bW1ldHJ5JyxcbiAgICBzeW1tZXRyeTogJ3N5bW1ldHJ5JyxcbiAgICBjb3VudGluZzogJ3N5bW1ldHJ5JyxcbiAgICByZXBlYXRpbmc6ICdzeW1tZXRyeScsXG4gICAgdG91Y2hpbmc6ICdzeW1tZXRyeScsXG5cbiAgICAvLyBaaWhpbnNlbC9haGxha2kvZGluaSB0ZW1hbGFyIOKGkiByZWxpZ2lvdXNcbiAgICBtZW50YWw6ICdyZWxpZ2lvdXMnLFxuICAgIHJlbGlnaW91czogJ3JlbGlnaW91cycsXG4gICAgbW9yYWxpdHk6ICdyZWxpZ2lvdXMnLFxuXG4gICAgLy8gQmlyaWt0aXJtZVxuICAgIGhvYXJkaW5nOiAnaG9hcmRpbmcnLFxuXG4gICAgLy8gRGnEn2VyIGdlbmnFnyB0ZW1hbGFyXG4gICAgaGFybTogJ2hhcm0nLFxuICAgIHNleHVhbDogJ3NleHVhbCcsXG5cbiAgICAvLyBZYWvEsW4gZcWfbGVtZWxlclxuICAgIHJlYXNzdXJhbmNlOiAnaGFybScsXG4gICAgYXZvaWRhbmNlOiAnaGFybScsXG4gICAgb3RoZXI6ICdoYXJtJ1xuICB9O1xuXG4gIHJldHVybiBsZWdhY3lUb0RiTWFwW2tleV0gPz8gJ2hhcm0nO1xufVxuXG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVVPLElBQU1BLG9CQUF5QyxHQUFBQyxPQUFBLENBQUFELG9CQUFBLEdBQUcsQ0FDdkQsZUFBZSxFQUNmLFVBQVUsRUFDVixVQUFVLEVBQ1YsUUFBUSxFQUNSLFVBQVUsRUFDVixPQUFPLENBQ1I7QUFHRCxJQUFNRSxvQkFBdUQsR0FBRztFQUU5REMsT0FBTyxFQUFFLGVBQWU7RUFDeEJDLFFBQVEsRUFBRSxlQUFlO0VBQ3pCQyxhQUFhLEVBQUUsZUFBZTtFQUc5QkMsUUFBUSxFQUFFLFVBQVU7RUFHcEJDLFFBQVEsRUFBRSxVQUFVO0VBQ3BCQyxTQUFTLEVBQUUsVUFBVTtFQUNyQkMsUUFBUSxFQUFFLFVBQVU7RUFDcEJDLFFBQVEsRUFBRSxVQUFVO0VBQ3BCQyxTQUFTLEVBQUUsVUFBVTtFQUNyQkMsUUFBUSxFQUFFLFVBQVU7RUFHcEJDLE1BQU0sRUFBRSxRQUFRO0VBQ2hCQyxTQUFTLEVBQUUsUUFBUTtFQUNuQkMsUUFBUSxFQUFFLFFBQVE7RUFHbEJDLFFBQVEsRUFBRSxVQUFVO0VBR3BCQyxXQUFXLEVBQUUsT0FBTztFQUNwQkMsU0FBUyxFQUFFLE9BQU87RUFDbEJDLEtBQUssRUFBRSxPQUFPO0VBR2RDLElBQUksRUFBRSxPQUFPO0VBQ2JDLE1BQU0sRUFBRTtBQUNWLENBQUM7QUFNTSxTQUFTQyxzQkFBc0JBLENBQUNDLEtBQWEsRUFBcUI7RUFBQSxJQUFBQyxxQkFBQTtFQUN2RSxJQUFNQyxHQUFHLEdBQUcsQ0FBQ0YsS0FBSyxJQUFJLEVBQUUsRUFBRUcsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7RUFDOUMsUUFBQUgscUJBQUEsR0FBT3RCLG9CQUFvQixDQUFDdUIsR0FBRyxDQUFDLFlBQUFELHFCQUFBLEdBQUksT0FBTztBQUM3QztBQUtPLFNBQVNJLG1CQUFtQkEsQ0FBQ0MsS0FBYSxFQUE4QjtFQUM3RSxPQUFRN0Isb0JBQW9CLENBQWM4QixRQUFRLENBQUMsQ0FBQ0QsS0FBSyxJQUFJLEVBQUUsRUFBRUgsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUNqRjtBQVNBLElBQU1LLHFCQUF5QyxHQUFHLENBQ2hELGVBQWUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUN2RTtBQU1NLFNBQVNDLHFCQUFxQkEsQ0FBQ1QsS0FBYSxFQUFvQjtFQUFBLElBQUFVLGtCQUFBO0VBQ3JFLElBQU1SLEdBQUcsR0FBRyxDQUFDRixLQUFLLElBQUksRUFBRSxFQUFFRyxXQUFXLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQztFQUc5QyxJQUFLSSxxQkFBcUIsQ0FBY0QsUUFBUSxDQUFDTCxHQUFHLENBQUMsRUFBRTtJQUNyRCxPQUFPQSxHQUFHO0VBQ1o7RUFHQSxJQUFNUyxhQUErQyxHQUFHO0lBRXREL0IsT0FBTyxFQUFFLGVBQWU7SUFDeEJDLFFBQVEsRUFBRSxlQUFlO0lBQ3pCQyxhQUFhLEVBQUUsZUFBZTtJQUc5QkMsUUFBUSxFQUFFLFVBQVU7SUFDcEJDLFFBQVEsRUFBRSxVQUFVO0lBQ3BCQyxTQUFTLEVBQUUsVUFBVTtJQUNyQkMsUUFBUSxFQUFFLFVBQVU7SUFDcEJDLFFBQVEsRUFBRSxVQUFVO0lBQ3BCQyxTQUFTLEVBQUUsVUFBVTtJQUNyQkMsUUFBUSxFQUFFLFVBQVU7SUFHcEJDLE1BQU0sRUFBRSxXQUFXO0lBQ25CQyxTQUFTLEVBQUUsV0FBVztJQUN0QkMsUUFBUSxFQUFFLFdBQVc7SUFHckJDLFFBQVEsRUFBRSxVQUFVO0lBR3BCSSxJQUFJLEVBQUUsTUFBTTtJQUNaQyxNQUFNLEVBQUUsUUFBUTtJQUdoQkosV0FBVyxFQUFFLE1BQU07SUFDbkJDLFNBQVMsRUFBRSxNQUFNO0lBQ2pCQyxLQUFLLEVBQUU7RUFDVCxDQUFDO0VBRUQsUUFBQWMsa0JBQUEsR0FBT0MsYUFBYSxDQUFDVCxHQUFHLENBQUMsWUFBQVEsa0JBQUEsR0FBSSxNQUFNO0FBQ3JDIiwiaWdub3JlTGlzdCI6W119