bf534fb0ab2e6a82ec83fbfa88f6cda2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _LayoutConformanceNativeComponent = _interopRequireDefault(require("./LayoutConformanceNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _global;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var isFabricUIManagerInstalled = ((_global = global) == null ? void 0 : _global.nativeFabricUIManager) != null;
function LayoutConformance(props) {
  return (0, _jsxRuntime.jsx)(_LayoutConformanceNativeComponent.default, Object.assign({}, props, {
    style: styles.container
  }));
}
function UnimplementedLayoutConformance(props) {
  if (__DEV__) {
    var warnOnce = require("../../Utilities/warnOnce").default;
    warnOnce('layoutconformance-unsupported', '"LayoutConformance" is only supported in the New Architecture');
  }
  return props.children;
}
var _default = exports.default = isFabricUIManagerInstalled ? LayoutConformance : UnimplementedLayoutConformance;
var styles = _StyleSheet.default.create({
  container: {
    display: 'contents'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfU3R5bGVTaGVldCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0xheW91dENvbmZvcm1hbmNlTmF0aXZlQ29tcG9uZW50IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiX2dsb2JhbCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXNGYWJyaWNVSU1hbmFnZXJJbnN0YWxsZWQiLCJnbG9iYWwiLCJuYXRpdmVGYWJyaWNVSU1hbmFnZXIiLCJMYXlvdXRDb25mb3JtYW5jZSIsInByb3BzIiwianN4IiwiYXNzaWduIiwic3R5bGUiLCJzdHlsZXMiLCJjb250YWluZXIiLCJVbmltcGxlbWVudGVkTGF5b3V0Q29uZm9ybWFuY2UiLCJfX0RFVl9fIiwid2Fybk9uY2UiLCJjaGlsZHJlbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJkaXNwbGF5Il0sInNvdXJjZXMiOlsiTGF5b3V0Q29uZm9ybWFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWFjdF9uYXRpdmVcbiAqL1xuXG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IExheW91dENvbmZvcm1hbmNlTmF0aXZlQ29tcG9uZW50IGZyb20gJy4vTGF5b3V0Q29uZm9ybWFuY2VOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBMYXlvdXRDb25mb3JtYW5jZVByb3BzID0gJFJlYWRPbmx5PHtcbiAgLyoqXG4gICAqIHN0cmljdDogTGF5b3V0IGluIGFjY29yZGFuY2Ugd2l0aCBXM0Mgc3BlYywgZXZlbiB3aGVuIGJyZWFraW5nXG4gICAqIGNvbXBhdGliaWxpdHk6IExheW91dCB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIGFzIHByZXZpb3VzIHZlcnNpb25zIG9mIFJlYWN0IE5hdGl2ZVxuICAgKi9cbiAgbW9kZTogJ3N0cmljdCcgfCAnY29tcGF0aWJpbGl0eScsXG5cbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG59PjtcblxuLy8gV2Ugd2FudCBhIGdyYWNlZnVsIGZhbGxiYWNrIGZvciBhcHBzIHVzaW5nIGxlZ2FjeSBhcmNoLCBidXQgbmVlZCB0byBrbm93XG4vLyBhaGVhZCBvZiB0aW1lIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyBhdmFpbGFibGUsIHNvIHdlIHRlc3QgZm9yIGdsb2JhbC5cbi8vIFRoaXMgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSBtaXhlZCBhcmNoIGFwcHMgKHdoaWNoIGlzIG9rYXksIHNpbmNlIHdlIGp1c3Rcbi8vIGRlZ3JhZGUgdGhlIGVycm9yIGV4cGVyaWVuY2UpLlxuY29uc3QgaXNGYWJyaWNVSU1hbmFnZXJJbnN0YWxsZWQgPSBnbG9iYWw/Lm5hdGl2ZUZhYnJpY1VJTWFuYWdlciAhPSBudWxsO1xuXG5mdW5jdGlvbiBMYXlvdXRDb25mb3JtYW5jZShwcm9wczogTGF5b3V0Q29uZm9ybWFuY2VQcm9wcyk6IFJlYWN0Lk5vZGUge1xuICByZXR1cm4gKFxuICAgIDxMYXlvdXRDb25mb3JtYW5jZU5hdGl2ZUNvbXBvbmVudCB7Li4ucHJvcHN9IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfSAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBVbmltcGxlbWVudGVkTGF5b3V0Q29uZm9ybWFuY2UoXG4gIHByb3BzOiBMYXlvdXRDb25mb3JtYW5jZVByb3BzLFxuKTogUmVhY3QuTm9kZSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3Qgd2Fybk9uY2UgPSByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvd2Fybk9uY2UnKS5kZWZhdWx0O1xuXG4gICAgd2Fybk9uY2UoXG4gICAgICAnbGF5b3V0Y29uZm9ybWFuY2UtdW5zdXBwb3J0ZWQnLFxuICAgICAgJ1wiTGF5b3V0Q29uZm9ybWFuY2VcIiBpcyBvbmx5IHN1cHBvcnRlZCBpbiB0aGUgTmV3IEFyY2hpdGVjdHVyZScsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGlzRmFicmljVUlNYW5hZ2VySW5zdGFsbGVkXG4gID8gTGF5b3V0Q29uZm9ybWFuY2VcbiAgOiBVbmltcGxlbWVudGVkTGF5b3V0Q29uZm9ybWFuY2UpIGFzIGNvbXBvbmVudCguLi5MYXlvdXRDb25mb3JtYW5jZVByb3BzKTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBkaXNwbGF5OiAnY29udGVudHMnLFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBV0EsSUFBQUEsV0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUErQixJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxJQUFBSyxPQUFBO0FBQUEsU0FBQUYsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFMLHVCQUFBLFlBQUFBLHdCQUFBRyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQWdCL0IsSUFBTW1CLDBCQUEwQixHQUFHLEVBQUFyQixPQUFBLEdBQUFzQixNQUFNLHFCQUFOdEIsT0FBQSxDQUFRdUIscUJBQXFCLEtBQUksSUFBSTtBQUV4RSxTQUFTQyxpQkFBaUJBLENBQUNDLEtBQTZCLEVBQWM7RUFDcEUsT0FDRSxJQUFBMUIsV0FBQSxDQUFBMkIsR0FBQSxFQUFDOUIsaUNBQUEsQ0FBQWUsT0FBZ0MsRUFBQU8sTUFBQSxDQUFBUyxNQUFBLEtBQUtGLEtBQUs7SUFBRUcsS0FBSyxFQUFFQyxNQUFNLENBQUNDO0VBQVUsRUFBRSxDQUFDO0FBRTVFO0FBRUEsU0FBU0MsOEJBQThCQSxDQUNyQ04sS0FBNkIsRUFDakI7RUFDWixJQUFJTyxPQUFPLEVBQUU7SUFDWCxJQUFNQyxRQUFRLEdBQUd0QyxPQUFPLDJCQUEyQixDQUFDLENBQUNnQixPQUFPO0lBRTVEc0IsUUFBUSxDQUNOLCtCQUErQixFQUMvQiwrREFDRixDQUFDO0VBQ0g7RUFFQSxPQUFPUixLQUFLLENBQUNTLFFBQVE7QUFDdkI7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQXpCLE9BQUEsR0FFZVUsMEJBQTBCLEdBQ3RDRyxpQkFBaUIsR0FDakJPLDhCQUE4QjtBQUVsQyxJQUFNRixNQUFNLEdBQUdRLG1CQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQlIsU0FBUyxFQUFFO0lBQ1RTLE9BQU8sRUFBRTtFQUNYO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119