c51bc0179d51098944ce3f39dfca110f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = exports._console = void 0;
var nodeConsole = _interopRequireWildcard(require("console"));
var _picocolors = _interopRequireDefault(require("picocolors"));
var _redent = _interopRequireDefault(require("redent"));
var nodeUtil = _interopRequireWildcard(require("util"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var _console = exports._console = {
  debug: nodeConsole.debug,
  info: nodeConsole.info,
  warn: nodeConsole.warn,
  error: nodeConsole.error
};
var logger = exports.logger = {
  debug: function debug(message) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var output = formatMessage.apply(void 0, ['●', message].concat(args));
    _console.debug(_picocolors.default.dim(output));
  },
  info: function info(message) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    var output = formatMessage.apply(void 0, ['●', message].concat(args));
    _console.info(output);
  },
  warn: function warn(message) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    var output = formatMessage.apply(void 0, ['▲', message].concat(args));
    _console.warn(_picocolors.default.yellow(output));
  },
  error: function error(message) {
    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }
    var output = formatMessage.apply(void 0, ['■', message].concat(args));
    _console.error(_picocolors.default.red(output));
  }
};
function formatMessage(symbol, message) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    args[_key5 - 2] = arguments[_key5];
  }
  var formatted = nodeUtil.format.apply(nodeUtil, [message].concat(args));
  var indented = (0, _redent.default)(formatted, 4);
  return `  ${symbol} ${indented.trimStart()}\n`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJub2RlQ29uc29sZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9waWNvY29sb3JzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWRlbnQiLCJub2RlVXRpbCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9jb25zb2xlIiwiZXhwb3J0cyIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImxvZ2dlciIsIm1lc3NhZ2UiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm91dHB1dCIsImZvcm1hdE1lc3NhZ2UiLCJhcHBseSIsImNvbmNhdCIsImRpbSIsIl9sZW4yIiwiX2tleTIiLCJfbGVuMyIsIl9rZXkzIiwieWVsbG93IiwiX2xlbjQiLCJfa2V5NCIsInJlZCIsInN5bWJvbCIsIl9sZW41IiwiX2tleTUiLCJmb3JtYXR0ZWQiLCJmb3JtYXQiLCJpbmRlbnRlZCIsInRyaW1TdGFydCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2xvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBub2RlQ29uc29sZSBmcm9tICdjb25zb2xlJztcbmltcG9ydCBwYyBmcm9tICdwaWNvY29sb3JzJztcbmltcG9ydCByZWRlbnQgZnJvbSAncmVkZW50JztcbmltcG9ydCAqIGFzIG5vZGVVdGlsIGZyb20gJ3V0aWwnO1xuXG5leHBvcnQgY29uc3QgX2NvbnNvbGUgPSB7XG4gIGRlYnVnOiBub2RlQ29uc29sZS5kZWJ1ZyxcbiAgaW5mbzogbm9kZUNvbnNvbGUuaW5mbyxcbiAgd2Fybjogbm9kZUNvbnNvbGUud2FybixcbiAgZXJyb3I6IG5vZGVDb25zb2xlLmVycm9yLFxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IHtcbiAgZGVidWcobWVzc2FnZTogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gZm9ybWF0TWVzc2FnZSgn4pePJywgbWVzc2FnZSwgLi4uYXJncyk7XG4gICAgX2NvbnNvbGUuZGVidWcocGMuZGltKG91dHB1dCkpO1xuICB9LFxuXG4gIGluZm8obWVzc2FnZTogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gZm9ybWF0TWVzc2FnZSgn4pePJywgbWVzc2FnZSwgLi4uYXJncyk7XG4gICAgX2NvbnNvbGUuaW5mbyhvdXRwdXQpO1xuICB9LFxuXG4gIHdhcm4obWVzc2FnZTogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gZm9ybWF0TWVzc2FnZSgn4payJywgbWVzc2FnZSwgLi4uYXJncyk7XG4gICAgX2NvbnNvbGUud2FybihwYy55ZWxsb3cob3V0cHV0KSk7XG4gIH0sXG5cbiAgZXJyb3IobWVzc2FnZTogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gZm9ybWF0TWVzc2FnZSgn4pagJywgbWVzc2FnZSwgLi4uYXJncyk7XG4gICAgX2NvbnNvbGUuZXJyb3IocGMucmVkKG91dHB1dCkpO1xuICB9LFxufTtcblxuZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShzeW1ib2w6IHN0cmluZywgbWVzc2FnZTogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IG5vZGVVdGlsLmZvcm1hdChtZXNzYWdlLCAuLi5hcmdzKTtcbiAgY29uc3QgaW5kZW50ZWQgPSByZWRlbnQoZm9ybWF0dGVkLCA0KTtcbiAgcmV0dXJuIGAgICR7c3ltYm9sfSAke2luZGVudGVkLnRyaW1TdGFy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