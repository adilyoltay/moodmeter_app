{"version":3,"names":["_expoModulesCore","require","_ExpoTaskManager","_interopRequireDefault","tasks","Map","_validate","taskName","TypeError","defineTask","taskExecutor","console","warn","set","isTaskDefined","has","isTaskRegisteredAsync","_x","_isTaskRegisteredAsync","apply","arguments","_asyncToGenerator2","default","ExpoTaskManager","UnavailabilityError","getTaskOptionsAsync","_x2","_getTaskOptionsAsync","getRegisteredTasksAsync","_getRegisteredTasksAsync","unregisterTaskAsync","_x3","_unregisterTaskAsync","unregisterAllTasksAsync","_unregisterAllTasksAsync","eventEmitter","LegacyEventEmitter","addListener","EVENT_NAME","_ref2","_ref","data","error","executionInfo","eventId","get","result","notifyTaskFinishedAsync","_x4","isAvailableAsync","_isAvailableAsync"],"sources":["../src/TaskManager.ts"],"sourcesContent":["import { LegacyEventEmitter, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoTaskManager from './ExpoTaskManager';\n\n// @needsAudit @docsMissing\n/**\n * Error object that can be received through [`TaskManagerTaskBody`](#taskmanagertaskbody) when the\n * task fails.\n */\nexport interface TaskManagerError {\n  code: string | number;\n  message: string;\n}\n\n// @needsAudit\n/**\n * Represents the object that is passed to the task executor.\n */\nexport interface TaskManagerTaskBody<T = unknown> {\n  /**\n   * An object of data passed to the task executor. Its properties depend on the type of the task.\n   */\n  data: T;\n\n  /**\n   * Error object if the task failed or `null` otherwise.\n   */\n  error: TaskManagerError | null;\n\n  /**\n   * Additional details containing unique ID of task event and name of the task.\n   */\n  executionInfo: TaskManagerTaskBodyExecutionInfo;\n}\n\n// @needsAudit\n/**\n * Additional details about execution provided in `TaskManagerTaskBody`.\n */\nexport interface TaskManagerTaskBodyExecutionInfo {\n  /**\n   * State of the application.\n   * @platform ios\n   */\n  appState?: 'active' | 'background' | 'inactive';\n  /**\n   * Unique ID of task event.\n   */\n  eventId: string;\n  /**\n   * Name of the task.\n   */\n  taskName: string;\n}\n\n// @needsAudit\n/**\n * Represents an already registered task.\n */\nexport interface TaskManagerTask {\n  /**\n   * Name that the task is registered with.\n   */\n  taskName: string;\n\n  /**\n   * Type of the task which depends on how the task was registered.\n   */\n  taskType: string;\n\n  /**\n   * Provides `options` that the task was registered with.\n   */\n  options: any;\n}\n\n/**\n * @deprecated Use `TaskManagerTask` instead.\n * @hidden\n */\nexport interface RegisteredTask extends TaskManagerTask {}\n\n// @needsAudit\n/**\n * Type of task executor – a function that handles the task.\n */\nexport type TaskManagerTaskExecutor<T = any> = (body: TaskManagerTaskBody<T>) => Promise<any>;\n\nconst tasks: Map<string, TaskManagerTaskExecutor<any>> = new Map<\n  string,\n  TaskManagerTaskExecutor<any>\n>();\n\nfunction _validate(taskName: unknown) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new TypeError('`taskName` must be a non-empty string.');\n  }\n}\n\n// @needsAudit\n/**\n * Defines task function. It must be called in the global scope of your JavaScript bundle.\n * In particular, it cannot be called in any of React lifecycle methods like `componentDidMount`.\n * This limitation is due to the fact that when the application is launched in the background,\n * we need to spin up your JavaScript app, run your task and then shut down — no views are mounted\n * in this scenario.\n *\n * @param taskName Name of the task. It must be the same as the name you provided when registering the task.\n * @param taskExecutor A function that will be invoked when the task with given `taskName` is executed.\n */\nexport function defineTask<T = unknown>(\n  taskName: string,\n  taskExecutor: TaskManagerTaskExecutor<T>\n) {\n  if (!taskName || typeof taskName !== 'string') {\n    console.warn(`TaskManager.defineTask: 'taskName' argument must be a non-empty string.`);\n    return;\n  }\n  if (!taskExecutor || typeof taskExecutor !== 'function') {\n    console.warn(`TaskManager.defineTask: 'task' argument must be a function.`);\n    return;\n  }\n  tasks.set(taskName, taskExecutor);\n}\n\n// @needsAudit\n/**\n * Checks whether the task is already defined.\n *\n * @param taskName Name of the task.\n */\nexport function isTaskDefined(taskName: string): boolean {\n  return tasks.has(taskName);\n}\n\n// @needsAudit\n/**\n * Determine whether the task is registered. Registered tasks are stored in a persistent storage and\n * preserved between sessions.\n *\n * @param taskName Name of the task.\n * @returns A promise which resolves to `true` if a task with the given name is registered, otherwise `false`.\n */\nexport async function isTaskRegisteredAsync(taskName: string): Promise<boolean> {\n  if (!ExpoTaskManager.isTaskRegisteredAsync) {\n    throw new UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');\n  }\n\n  _validate(taskName);\n  return ExpoTaskManager.isTaskRegisteredAsync(taskName);\n}\n\n// @needsAudit\n/**\n * Retrieves `options` associated with the task, that were passed to the function registering the task\n * (e.g. `Location.startLocationUpdatesAsync`).\n *\n * @param taskName Name of the task.\n * @return A promise which fulfills with the `options` object that was passed while registering task\n * with given name or `null` if task couldn't be found.\n */\nexport async function getTaskOptionsAsync<TaskOptions>(taskName: string): Promise<TaskOptions> {\n  if (!ExpoTaskManager.getTaskOptionsAsync) {\n    throw new UnavailabilityError('TaskManager', 'getTaskOptionsAsync');\n  }\n\n  _validate(taskName);\n  return ExpoTaskManager.getTaskOptionsAsync(taskName);\n}\n\n// @needsAudit\n/**\n * Provides information about tasks registered in the app.\n *\n * @returns A promise which fulfills with an array of tasks registered in the app.\n * @example\n * ```js\n * [\n *   {\n *     taskName: 'location-updates-task-name',\n *     taskType: 'location',\n *     options: {\n *       accuracy: Location.Accuracy.High,\n *       showsBackgroundLocationIndicator: false,\n *     },\n *   },\n *   {\n *     taskName: 'geofencing-task-name',\n *     taskType: 'geofencing',\n *     options: {\n *       regions: [...],\n *     },\n *   },\n * ]\n * ```\n */\nexport async function getRegisteredTasksAsync(): Promise<TaskManagerTask[]> {\n  if (!ExpoTaskManager.getRegisteredTasksAsync) {\n    throw new UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');\n  }\n\n  return ExpoTaskManager.getRegisteredTasksAsync();\n}\n\n// @needsAudit\n/**\n * Unregisters task from the app, so the app will not be receiving updates for that task anymore.\n * _It is recommended to use methods specialized by modules that registered the task, eg.\n * [`Location.stopLocationUpdatesAsync`](./location/#expolocationstoplocationupdatesasynctaskname)._\n *\n * @param taskName Name of the task to unregister.\n * @return A promise which fulfills as soon as the task is unregistered.\n */\nexport async function unregisterTaskAsync(taskName: string): Promise<void> {\n  if (!ExpoTaskManager.unregisterTaskAsync) {\n    throw new UnavailabilityError('TaskManager', 'unregisterTaskAsync');\n  }\n\n  _validate(taskName);\n  await ExpoTaskManager.unregisterTaskAsync(taskName);\n}\n\n// @needsAudit\n/**\n * Unregisters all tasks registered for the running app. You may want to call this when the user is\n * signing out and you no longer need to track his location or run any other background tasks.\n * @return A promise which fulfills as soon as all tasks are completely unregistered.\n */\nexport async function unregisterAllTasksAsync(): Promise<void> {\n  if (!ExpoTaskManager.unregisterAllTasksAsync) {\n    throw new UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');\n  }\n\n  await ExpoTaskManager.unregisterAllTasksAsync();\n}\n\nif (ExpoTaskManager) {\n  const eventEmitter = new LegacyEventEmitter(ExpoTaskManager);\n  eventEmitter.addListener<TaskManagerTaskBody>(\n    ExpoTaskManager.EVENT_NAME,\n    async ({ data, error, executionInfo }) => {\n      const { eventId, taskName } = executionInfo;\n      const taskExecutor = tasks.get(taskName);\n      let result: any = null;\n\n      if (taskExecutor) {\n        try {\n          // Execute JS task\n          result = await taskExecutor({ data, error, executionInfo });\n        } catch (error) {\n          console.error(`TaskManager: Task \"${taskName}\" failed:`, error);\n        } finally {\n          // Notify manager the task is finished.\n          await ExpoTaskManager.notifyTaskFinishedAsync(taskName, { eventId, result });\n        }\n      } else {\n        console.warn(\n          `TaskManager: Task \"${taskName}\" has been executed but looks like it is not defined. Make sure that \"TaskManager.defineTask\" is called during initialization phase.`\n        );\n        // No tasks defined -> we need to notify about finish anyway.\n        await ExpoTaskManager.notifyTaskFinishedAsync(taskName, { eventId, result });\n        // We should also unregister such tasks automatically as the task might have been removed\n        // from the app or just renamed - in that case it needs to be registered again (with the new name).\n        await ExpoTaskManager.unregisterTaskAsync(taskName);\n      }\n    }\n  );\n}\n\n// @needsAudit\n/**\n * Determine if the `TaskManager` API can be used in this app.\n * @return A promise which fulfills with `true` if the API can be used, and `false` otherwise.\n * With Expo Go, `TaskManager` is not available on Android, and does not support background execution on iOS.\n * Use a development build to avoid limitations: https://expo.fyi/dev-client.\n * On the web, it always returns `false`.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return ExpoTaskManager.isAvailableAsync();\n}\n"],"mappings":"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","ignoreList":[]}