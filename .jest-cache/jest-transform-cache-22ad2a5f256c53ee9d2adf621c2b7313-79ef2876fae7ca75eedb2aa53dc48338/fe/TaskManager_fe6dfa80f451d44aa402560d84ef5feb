ec7973ea8addec07399b714536df266b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defineTask = defineTask;
exports.getRegisteredTasksAsync = getRegisteredTasksAsync;
exports.getTaskOptionsAsync = getTaskOptionsAsync;
exports.isAvailableAsync = isAvailableAsync;
exports.isTaskDefined = isTaskDefined;
exports.isTaskRegisteredAsync = isTaskRegisteredAsync;
exports.unregisterAllTasksAsync = unregisterAllTasksAsync;
exports.unregisterTaskAsync = unregisterTaskAsync;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _expoModulesCore = require("expo-modules-core");
var _ExpoTaskManager = _interopRequireDefault(require("./ExpoTaskManager"));
var tasks = new Map();
function _validate(taskName) {
  if (!taskName || typeof taskName !== 'string') {
    throw new TypeError('`taskName` must be a non-empty string.');
  }
}
function defineTask(taskName, taskExecutor) {
  if (!taskName || typeof taskName !== 'string') {
    console.warn(`TaskManager.defineTask: 'taskName' argument must be a non-empty string.`);
    return;
  }
  if (!taskExecutor || typeof taskExecutor !== 'function') {
    console.warn(`TaskManager.defineTask: 'task' argument must be a function.`);
    return;
  }
  tasks.set(taskName, taskExecutor);
}
function isTaskDefined(taskName) {
  return tasks.has(taskName);
}
function isTaskRegisteredAsync(_x) {
  return _isTaskRegisteredAsync.apply(this, arguments);
}
function _isTaskRegisteredAsync() {
  _isTaskRegisteredAsync = (0, _asyncToGenerator2.default)(function* (taskName) {
    if (!_ExpoTaskManager.default.isTaskRegisteredAsync) {
      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');
    }
    _validate(taskName);
    return _ExpoTaskManager.default.isTaskRegisteredAsync(taskName);
  });
  return _isTaskRegisteredAsync.apply(this, arguments);
}
function getTaskOptionsAsync(_x2) {
  return _getTaskOptionsAsync.apply(this, arguments);
}
function _getTaskOptionsAsync() {
  _getTaskOptionsAsync = (0, _asyncToGenerator2.default)(function* (taskName) {
    if (!_ExpoTaskManager.default.getTaskOptionsAsync) {
      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getTaskOptionsAsync');
    }
    _validate(taskName);
    return _ExpoTaskManager.default.getTaskOptionsAsync(taskName);
  });
  return _getTaskOptionsAsync.apply(this, arguments);
}
function getRegisteredTasksAsync() {
  return _getRegisteredTasksAsync.apply(this, arguments);
}
function _getRegisteredTasksAsync() {
  _getRegisteredTasksAsync = (0, _asyncToGenerator2.default)(function* () {
    if (!_ExpoTaskManager.default.getRegisteredTasksAsync) {
      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');
    }
    return _ExpoTaskManager.default.getRegisteredTasksAsync();
  });
  return _getRegisteredTasksAsync.apply(this, arguments);
}
function unregisterTaskAsync(_x3) {
  return _unregisterTaskAsync.apply(this, arguments);
}
function _unregisterTaskAsync() {
  _unregisterTaskAsync = (0, _asyncToGenerator2.default)(function* (taskName) {
    if (!_ExpoTaskManager.default.unregisterTaskAsync) {
      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterTaskAsync');
    }
    _validate(taskName);
    yield _ExpoTaskManager.default.unregisterTaskAsync(taskName);
  });
  return _unregisterTaskAsync.apply(this, arguments);
}
function unregisterAllTasksAsync() {
  return _unregisterAllTasksAsync.apply(this, arguments);
}
function _unregisterAllTasksAsync() {
  _unregisterAllTasksAsync = (0, _asyncToGenerator2.default)(function* () {
    if (!_ExpoTaskManager.default.unregisterAllTasksAsync) {
      throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');
    }
    yield _ExpoTaskManager.default.unregisterAllTasksAsync();
  });
  return _unregisterAllTasksAsync.apply(this, arguments);
}
if (_ExpoTaskManager.default) {
  var eventEmitter = new _expoModulesCore.LegacyEventEmitter(_ExpoTaskManager.default);
  eventEmitter.addListener(_ExpoTaskManager.default.EVENT_NAME, function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {
      var data = _ref.data,
        error = _ref.error,
        executionInfo = _ref.executionInfo;
      var eventId = executionInfo.eventId,
        taskName = executionInfo.taskName;
      var taskExecutor = tasks.get(taskName);
      var result = null;
      if (taskExecutor) {
        try {
          result = yield taskExecutor({
            data: data,
            error: error,
            executionInfo: executionInfo
          });
        } catch (error) {
          console.error(`TaskManager: Task "${taskName}" failed:`, error);
        } finally {
          yield _ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {
            eventId: eventId,
            result: result
          });
        }
      } else {
        console.warn(`TaskManager: Task "${taskName}" has been executed but looks like it is not defined. Make sure that "TaskManager.defineTask" is called during initialization phase.`);
        yield _ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {
          eventId: eventId,
          result: result
        });
        yield _ExpoTaskManager.default.unregisterTaskAsync(taskName);
      }
    });
    return function (_x4) {
      return _ref2.apply(this, arguments);
    };
  }());
}
function isAvailableAsync() {
  return _isAvailableAsync.apply(this, arguments);
}
function _isAvailableAsync() {
  _isAvailableAsync = (0, _asyncToGenerator2.default)(function* () {
    return _ExpoTaskManager.default.isAvailableAsync();
  });
  return _isAvailableAsync.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwb01vZHVsZXNDb3JlIiwicmVxdWlyZSIsIl9FeHBvVGFza01hbmFnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwidGFza3MiLCJNYXAiLCJfdmFsaWRhdGUiLCJ0YXNrTmFtZSIsIlR5cGVFcnJvciIsImRlZmluZVRhc2siLCJ0YXNrRXhlY3V0b3IiLCJjb25zb2xlIiwid2FybiIsInNldCIsImlzVGFza0RlZmluZWQiLCJoYXMiLCJpc1Rhc2tSZWdpc3RlcmVkQXN5bmMiLCJfeCIsIl9pc1Rhc2tSZWdpc3RlcmVkQXN5bmMiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJFeHBvVGFza01hbmFnZXIiLCJVbmF2YWlsYWJpbGl0eUVycm9yIiwiZ2V0VGFza09wdGlvbnNBc3luYyIsIl94MiIsIl9nZXRUYXNrT3B0aW9uc0FzeW5jIiwiZ2V0UmVnaXN0ZXJlZFRhc2tzQXN5bmMiLCJfZ2V0UmVnaXN0ZXJlZFRhc2tzQXN5bmMiLCJ1bnJlZ2lzdGVyVGFza0FzeW5jIiwiX3gzIiwiX3VucmVnaXN0ZXJUYXNrQXN5bmMiLCJ1bnJlZ2lzdGVyQWxsVGFza3NBc3luYyIsIl91bnJlZ2lzdGVyQWxsVGFza3NBc3luYyIsImV2ZW50RW1pdHRlciIsIkxlZ2FjeUV2ZW50RW1pdHRlciIsImFkZExpc3RlbmVyIiwiRVZFTlRfTkFNRSIsIl9yZWYyIiwiX3JlZiIsImRhdGEiLCJlcnJvciIsImV4ZWN1dGlvbkluZm8iLCJldmVudElkIiwiZ2V0IiwicmVzdWx0Iiwibm90aWZ5VGFza0ZpbmlzaGVkQXN5bmMiLCJfeDQiLCJpc0F2YWlsYWJsZUFzeW5jIiwiX2lzQXZhaWxhYmxlQXN5bmMiXSwic291cmNlcyI6WyIuLi9zcmMvVGFza01hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGVnYWN5RXZlbnRFbWl0dGVyLCBVbmF2YWlsYWJpbGl0eUVycm9yIH0gZnJvbSAnZXhwby1tb2R1bGVzLWNvcmUnO1xuXG5pbXBvcnQgRXhwb1Rhc2tNYW5hZ2VyIGZyb20gJy4vRXhwb1Rhc2tNYW5hZ2VyJztcblxuLy8gQG5lZWRzQXVkaXQgQGRvY3NNaXNzaW5nXG4vKipcbiAqIEVycm9yIG9iamVjdCB0aGF0IGNhbiBiZSByZWNlaXZlZCB0aHJvdWdoIFtgVGFza01hbmFnZXJUYXNrQm9keWBdKCN0YXNrbWFuYWdlcnRhc2tib2R5KSB3aGVuIHRoZVxuICogdGFzayBmYWlscy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYXNrTWFuYWdlckVycm9yIHtcbiAgY29kZTogc3RyaW5nIHwgbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbi8vIEBuZWVkc0F1ZGl0XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIG9iamVjdCB0aGF0IGlzIHBhc3NlZCB0byB0aGUgdGFzayBleGVjdXRvci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYXNrTWFuYWdlclRhc2tCb2R5PFQgPSB1bmtub3duPiB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3Qgb2YgZGF0YSBwYXNzZWQgdG8gdGhlIHRhc2sgZXhlY3V0b3IuIEl0cyBwcm9wZXJ0aWVzIGRlcGVuZCBvbiB0aGUgdHlwZSBvZiB0aGUgdGFzay5cbiAgICovXG4gIGRhdGE6IFQ7XG5cbiAgLyoqXG4gICAqIEVycm9yIG9iamVjdCBpZiB0aGUgdGFzayBmYWlsZWQgb3IgYG51bGxgIG90aGVyd2lzZS5cbiAgICovXG4gIGVycm9yOiBUYXNrTWFuYWdlckVycm9yIHwgbnVsbDtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBkZXRhaWxzIGNvbnRhaW5pbmcgdW5pcXVlIElEIG9mIHRhc2sgZXZlbnQgYW5kIG5hbWUgb2YgdGhlIHRhc2suXG4gICAqL1xuICBleGVjdXRpb25JbmZvOiBUYXNrTWFuYWdlclRhc2tCb2R5RXhlY3V0aW9uSW5mbztcbn1cblxuLy8gQG5lZWRzQXVkaXRcbi8qKlxuICogQWRkaXRpb25hbCBkZXRhaWxzIGFib3V0IGV4ZWN1dGlvbiBwcm92aWRlZCBpbiBgVGFza01hbmFnZXJUYXNrQm9keWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFza01hbmFnZXJUYXNrQm9keUV4ZWN1dGlvbkluZm8ge1xuICAvKipcbiAgICogU3RhdGUgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhcHBTdGF0ZT86ICdhY3RpdmUnIHwgJ2JhY2tncm91bmQnIHwgJ2luYWN0aXZlJztcbiAgLyoqXG4gICAqIFVuaXF1ZSBJRCBvZiB0YXNrIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRJZDogc3RyaW5nO1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgdGFzay5cbiAgICovXG4gIHRhc2tOYW1lOiBzdHJpbmc7XG59XG5cbi8vIEBuZWVkc0F1ZGl0XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYWxyZWFkeSByZWdpc3RlcmVkIHRhc2suXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFza01hbmFnZXJUYXNrIHtcbiAgLyoqXG4gICAqIE5hbWUgdGhhdCB0aGUgdGFzayBpcyByZWdpc3RlcmVkIHdpdGguXG4gICAqL1xuICB0YXNrTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSB0YXNrIHdoaWNoIGRlcGVuZHMgb24gaG93IHRoZSB0YXNrIHdhcyByZWdpc3RlcmVkLlxuICAgKi9cbiAgdGFza1R5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogUHJvdmlkZXMgYG9wdGlvbnNgIHRoYXQgdGhlIHRhc2sgd2FzIHJlZ2lzdGVyZWQgd2l0aC5cbiAgICovXG4gIG9wdGlvbnM6IGFueTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYFRhc2tNYW5hZ2VyVGFza2AgaW5zdGVhZC5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWdpc3RlcmVkVGFzayBleHRlbmRzIFRhc2tNYW5hZ2VyVGFzayB7fVxuXG4vLyBAbmVlZHNBdWRpdFxuLyoqXG4gKiBUeXBlIG9mIHRhc2sgZXhlY3V0b3Ig4oCTIGEgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIHRoZSB0YXNrLlxuICovXG5leHBvcnQgdHlwZSBUYXNrTWFuYWdlclRhc2tFeGVjdXRvcjxUID0gYW55PiA9IChib2R5OiBUYXNrTWFuYWdlclRhc2tCb2R5PFQ+KSA9PiBQcm9taXNlPGFueT47XG5cbmNvbnN0IHRhc2tzOiBNYXA8c3RyaW5nLCBUYXNrTWFuYWdlclRhc2tFeGVjdXRvcjxhbnk+PiA9IG5ldyBNYXA8XG4gIHN0cmluZyxcbiAgVGFza01hbmFnZXJUYXNrRXhlY3V0b3I8YW55PlxuPigpO1xuXG5mdW5jdGlvbiBfdmFsaWRhdGUodGFza05hbWU6IHVua25vd24pIHtcbiAgaWYgKCF0YXNrTmFtZSB8fCB0eXBlb2YgdGFza05hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYHRhc2tOYW1lYCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKTtcbiAgfVxufVxuXG4vLyBAbmVlZHNBdWRpdFxuLyoqXG4gKiBEZWZpbmVzIHRhc2sgZnVuY3Rpb24uIEl0IG11c3QgYmUgY2FsbGVkIGluIHRoZSBnbG9iYWwgc2NvcGUgb2YgeW91ciBKYXZhU2NyaXB0IGJ1bmRsZS5cbiAqIEluIHBhcnRpY3VsYXIsIGl0IGNhbm5vdCBiZSBjYWxsZWQgaW4gYW55IG9mIFJlYWN0IGxpZmVjeWNsZSBtZXRob2RzIGxpa2UgYGNvbXBvbmVudERpZE1vdW50YC5cbiAqIFRoaXMgbGltaXRhdGlvbiBpcyBkdWUgdG8gdGhlIGZhY3QgdGhhdCB3aGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBsYXVuY2hlZCBpbiB0aGUgYmFja2dyb3VuZCxcbiAqIHdlIG5lZWQgdG8gc3BpbiB1cCB5b3VyIEphdmFTY3JpcHQgYXBwLCBydW4geW91ciB0YXNrIGFuZCB0aGVuIHNodXQgZG93biDigJQgbm8gdmlld3MgYXJlIG1vdW50ZWRcbiAqIGluIHRoaXMgc2NlbmFyaW8uXG4gKlxuICogQHBhcmFtIHRhc2tOYW1lIE5hbWUgb2YgdGhlIHRhc2suIEl0IG11c3QgYmUgdGhlIHNhbWUgYXMgdGhlIG5hbWUgeW91IHByb3ZpZGVkIHdoZW4gcmVnaXN0ZXJpbmcgdGhlIHRhc2suXG4gKiBAcGFyYW0gdGFza0V4ZWN1dG9yIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgdGFzayB3aXRoIGdpdmVuIGB0YXNrTmFtZWAgaXMgZXhlY3V0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVUYXNrPFQgPSB1bmtub3duPihcbiAgdGFza05hbWU6IHN0cmluZyxcbiAgdGFza0V4ZWN1dG9yOiBUYXNrTWFuYWdlclRhc2tFeGVjdXRvcjxUPlxuKSB7XG4gIGlmICghdGFza05hbWUgfHwgdHlwZW9mIHRhc2tOYW1lICE9PSAnc3RyaW5nJykge1xuICAgIGNvbnNvbGUud2FybihgVGFza01hbmFnZXIuZGVmaW5lVGFzazogJ3Rhc2tOYW1lJyBhcmd1bWVudCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy5gKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF0YXNrRXhlY3V0b3IgfHwgdHlwZW9mIHRhc2tFeGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUud2FybihgVGFza01hbmFnZXIuZGVmaW5lVGFzazogJ3Rhc2snIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbi5gKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGFza3Muc2V0KHRhc2tOYW1lLCB0YXNrRXhlY3V0b3IpO1xufVxuXG4vLyBAbmVlZHNBdWRpdFxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgdGFzayBpcyBhbHJlYWR5IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHRhc2tOYW1lIE5hbWUgb2YgdGhlIHRhc2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Rhc2tEZWZpbmVkKHRhc2tOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHRhc2tzLmhhcyh0YXNrTmFtZSk7XG59XG5cbi8vIEBuZWVkc0F1ZGl0XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSB0YXNrIGlzIHJlZ2lzdGVyZWQuIFJlZ2lzdGVyZWQgdGFza3MgYXJlIHN0b3JlZCBpbiBhIHBlcnNpc3RlbnQgc3RvcmFnZSBhbmRcbiAqIHByZXNlcnZlZCBiZXR3ZWVuIHNlc3Npb25zLlxuICpcbiAqIEBwYXJhbSB0YXNrTmFtZSBOYW1lIG9mIHRoZSB0YXNrLlxuICogQHJldHVybnMgQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIGB0cnVlYCBpZiBhIHRhc2sgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpcyByZWdpc3RlcmVkLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzVGFza1JlZ2lzdGVyZWRBc3luYyh0YXNrTmFtZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGlmICghRXhwb1Rhc2tNYW5hZ2VyLmlzVGFza1JlZ2lzdGVyZWRBc3luYykge1xuICAgIHRocm93IG5ldyBVbmF2YWlsYWJpbGl0eUVycm9yKCdUYXNrTWFuYWdlcicsICdpc1Rhc2tSZWdpc3RlcmVkQXN5bmMnKTtcbiAgfVxuXG4gIF92YWxpZGF0ZSh0YXNrTmFtZSk7XG4gIHJldHVybiBFeHBvVGFza01hbmFnZXIuaXNUYXNrUmVnaXN0ZXJlZEFzeW5jKHRhc2tOYW1lKTtcbn1cblxuLy8gQG5lZWRzQXVkaXRcbi8qKlxuICogUmV0cmlldmVzIGBvcHRpb25zYCBhc3NvY2lhdGVkIHdpdGggdGhlIHRhc2ssIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uIHJlZ2lzdGVyaW5nIHRoZSB0YXNrXG4gKiAoZS5nLiBgTG9jYXRpb24uc3RhcnRMb2NhdGlvblVwZGF0ZXNBc3luY2ApLlxuICpcbiAqIEBwYXJhbSB0YXNrTmFtZSBOYW1lIG9mIHRoZSB0YXNrLlxuICogQHJldHVybiBBIHByb21pc2Ugd2hpY2ggZnVsZmlsbHMgd2l0aCB0aGUgYG9wdGlvbnNgIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgd2hpbGUgcmVnaXN0ZXJpbmcgdGFza1xuICogd2l0aCBnaXZlbiBuYW1lIG9yIGBudWxsYCBpZiB0YXNrIGNvdWxkbid0IGJlIGZvdW5kLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VGFza09wdGlvbnNBc3luYzxUYXNrT3B0aW9ucz4odGFza05hbWU6IHN0cmluZyk6IFByb21pc2U8VGFza09wdGlvbnM+IHtcbiAgaWYgKCFFeHBvVGFza01hbmFnZXIuZ2V0VGFza09wdGlvbnNBc3luYykge1xuICAgIHRocm93IG5ldyBVbmF2YWlsYWJpbGl0eUVycm9yKCdUYXNrTWFuYWdlcicsICdnZXRUYXNrT3B0aW9uc0FzeW5jJyk7XG4gIH1cblxuICBfdmFsaWRhdGUodGFza05hbWUpO1xuICByZXR1cm4gRXhwb1Rhc2tNYW5hZ2VyLmdldFRhc2tPcHRpb25zQXN5bmModGFza05hbWUpO1xufVxuXG4vLyBAbmVlZHNBdWRpdFxuLyoqXG4gKiBQcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0YXNrcyByZWdpc3RlcmVkIGluIHRoZSBhcHAuXG4gKlxuICogQHJldHVybnMgQSBwcm9taXNlIHdoaWNoIGZ1bGZpbGxzIHdpdGggYW4gYXJyYXkgb2YgdGFza3MgcmVnaXN0ZXJlZCBpbiB0aGUgYXBwLlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBbXG4gKiAgIHtcbiAqICAgICB0YXNrTmFtZTogJ2xvY2F0aW9uLXVwZGF0ZXMtdGFzay1uYW1lJyxcbiAqICAgICB0YXNrVHlwZTogJ2xvY2F0aW9uJyxcbiAqICAgICBvcHRpb25zOiB7XG4gKiAgICAgICBhY2N1cmFjeTogTG9jYXRpb24uQWNjdXJhY3kuSGlnaCxcbiAqICAgICAgIHNob3dzQmFja2dyb3VuZExvY2F0aW9uSW5kaWNhdG9yOiBmYWxzZSxcbiAqICAgICB9LFxuICogICB9LFxuICogICB7XG4gKiAgICAgdGFza05hbWU6ICdnZW9mZW5jaW5nLXRhc2stbmFtZScsXG4gKiAgICAgdGFza1R5cGU6ICdnZW9mZW5jaW5nJyxcbiAqICAgICBvcHRpb25zOiB7XG4gKiAgICAgICByZWdpb25zOiBbLi4uXSxcbiAqICAgICB9LFxuICogICB9LFxuICogXVxuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkVGFza3NBc3luYygpOiBQcm9taXNlPFRhc2tNYW5hZ2VyVGFza1tdPiB7XG4gIGlmICghRXhwb1Rhc2tNYW5hZ2VyLmdldFJlZ2lzdGVyZWRUYXNrc0FzeW5jKSB7XG4gICAgdGhyb3cgbmV3IFVuYXZhaWxhYmlsaXR5RXJyb3IoJ1Rhc2tNYW5hZ2VyJywgJ2dldFJlZ2lzdGVyZWRUYXNrc0FzeW5jJyk7XG4gIH1cblxuICByZXR1cm4gRXhwb1Rhc2tNYW5hZ2VyLmdldFJlZ2lzdGVyZWRUYXNrc0FzeW5jKCk7XG59XG5cbi8vIEBuZWVkc0F1ZGl0XG4vKipcbiAqIFVucmVnaXN0ZXJzIHRhc2sgZnJvbSB0aGUgYXBwLCBzbyB0aGUgYXBwIHdpbGwgbm90IGJlIHJlY2VpdmluZyB1cGRhdGVzIGZvciB0aGF0IHRhc2sgYW55bW9yZS5cbiAqIF9JdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgbWV0aG9kcyBzcGVjaWFsaXplZCBieSBtb2R1bGVzIHRoYXQgcmVnaXN0ZXJlZCB0aGUgdGFzaywgZWcuXG4gKiBbYExvY2F0aW9uLnN0b3BMb2NhdGlvblVwZGF0ZXNBc3luY2BdKC4vbG9jYXRpb24vI2V4cG9sb2NhdGlvbnN0b3Bsb2NhdGlvbnVwZGF0ZXNhc3luY3Rhc2tuYW1lKS5fXG4gKlxuICogQHBhcmFtIHRhc2tOYW1lIE5hbWUgb2YgdGhlIHRhc2sgdG8gdW5yZWdpc3Rlci5cbiAqIEByZXR1cm4gQSBwcm9taXNlIHdoaWNoIGZ1bGZpbGxzIGFzIHNvb24gYXMgdGhlIHRhc2sgaXMgdW5yZWdpc3RlcmVkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdW5yZWdpc3RlclRhc2tBc3luYyh0YXNrTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmICghRXhwb1Rhc2tNYW5hZ2VyLnVucmVnaXN0ZXJUYXNrQXN5bmMpIHtcbiAgICB0aHJvdyBuZXcgVW5hdmFpbGFiaWxpdHlFcnJvcignVGFza01hbmFnZXInLCAndW5yZWdpc3RlclRhc2tBc3luYycpO1xuICB9XG5cbiAgX3ZhbGlkYXRlKHRhc2tOYW1lKTtcbiAgYXdhaXQgRXhwb1Rhc2tNYW5hZ2VyLnVucmVnaXN0ZXJUYXNrQXN5bmModGFza05hbWUpO1xufVxuXG4vLyBAbmVlZHNBdWRpdFxuLyoqXG4gKiBVbnJlZ2lzdGVycyBhbGwgdGFza3MgcmVnaXN0ZXJlZCBmb3IgdGhlIHJ1bm5pbmcgYXBwLiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4gdGhlIHVzZXIgaXNcbiAqIHNpZ25pbmcgb3V0IGFuZCB5b3Ugbm8gbG9uZ2VyIG5lZWQgdG8gdHJhY2sgaGlzIGxvY2F0aW9uIG9yIHJ1biBhbnkgb3RoZXIgYmFja2dyb3VuZCB0YXNrcy5cbiAqIEByZXR1cm4gQSBwcm9taXNlIHdoaWNoIGZ1bGZpbGxzIGFzIHNvb24gYXMgYWxsIHRhc2tzIGFyZSBjb21wbGV0ZWx5IHVucmVnaXN0ZXJlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVucmVnaXN0ZXJBbGxUYXNrc0FzeW5jKCk6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoIUV4cG9UYXNrTWFuYWdlci51bnJlZ2lzdGVyQWxsVGFza3NBc3luYykge1xuICAgIHRocm93IG5ldyBVbmF2YWlsYWJpbGl0eUVycm9yKCdUYXNrTWFuYWdlcicsICd1bnJlZ2lzdGVyQWxsVGFza3NBc3luYycpO1xuICB9XG5cbiAgYXdhaXQgRXhwb1Rhc2tNYW5hZ2VyLnVucmVnaXN0ZXJBbGxUYXNrc0FzeW5jKCk7XG59XG5cbmlmIChFeHBvVGFza01hbmFnZXIpIHtcbiAgY29uc3QgZXZlbnRFbWl0dGVyID0gbmV3IExlZ2FjeUV2ZW50RW1pdHRlcihFeHBvVGFza01hbmFnZXIpO1xuICBldmVudEVtaXR0ZXIuYWRkTGlzdGVuZXI8VGFza01hbmFnZXJUYXNrQm9keT4oXG4gICAgRXhwb1Rhc2tNYW5hZ2VyLkVWRU5UX05BTUUsXG4gICAgYXN5bmMgKHsgZGF0YSwgZXJyb3IsIGV4ZWN1dGlvbkluZm8gfSkgPT4ge1xuICAgICAgY29uc3QgeyBldmVudElkLCB0YXNrTmFtZSB9ID0gZXhlY3V0aW9uSW5mbztcbiAgICAgIGNvbnN0IHRhc2tFeGVjdXRvciA9IHRhc2tzLmdldCh0YXNrTmFtZSk7XG4gICAgICBsZXQgcmVzdWx0OiBhbnkgPSBudWxsO1xuXG4gICAgICBpZiAodGFza0V4ZWN1dG9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gRXhlY3V0ZSBKUyB0YXNrXG4gICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGFza0V4ZWN1dG9yKHsgZGF0YSwgZXJyb3IsIGV4ZWN1dGlvbkluZm8gfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgVGFza01hbmFnZXI6IFRhc2sgXCIke3Rhc2tOYW1lfVwiIGZhaWxlZDpgLCBlcnJvcik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgLy8gTm90aWZ5IG1hbmFnZXIgdGhlIHRhc2sgaXMgZmluaXNoZWQuXG4gICAgICAgICAgYXdhaXQgRXhwb1Rhc2tNYW5hZ2VyLm5vdGlmeVRhc2tGaW5pc2hlZEFzeW5jKHRhc2tOYW1lLCB7IGV2ZW50SWQsIHJlc3VsdCB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBUYXNrTWFuYWdlcjogVGFzayBcIiR7dGFza05hbWV9XCIgaGFzIGJlZW4gZXhlY3V0ZWQgYnV0IGxvb2tzIGxpa2UgaXQgaXMgbm90IGRlZmluZWQuIE1ha2Ugc3VyZSB0aGF0IFwiVGFza01hbmFnZXIuZGVmaW5lVGFza1wiIGlzIGNhbGxlZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24gcGhhc2UuYFxuICAgICAgICApO1xuICAgICAgICAvLyBObyB0YXNrcyBkZWZpbmVkIC0+IHdlIG5lZWQgdG8gbm90aWZ5IGFib3V0IGZpbmlzaCBhbnl3YXkuXG4gICAgICAgIGF3YWl0IEV4cG9UYXNrTWFuYWdlci5ub3RpZnlUYXNrRmluaXNoZWRBc3luYyh0YXNrTmFtZSwgeyBldmVudElkLCByZXN1bHQgfSk7XG4gICAgICAgIC8vIFdlIHNob3VsZCBhbHNvIHVucmVnaXN0ZXIgc3VjaCB0YXNrcyBhdXRvbWF0aWNhbGx5IGFzIHRoZSB0YXNrIG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkXG4gICAgICAgIC8vIGZyb20gdGhlIGFwcCBvciBqdXN0IHJlbmFtZWQgLSBpbiB0aGF0IGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVnaXN0ZXJlZCBhZ2FpbiAod2l0aCB0aGUgbmV3IG5hbWUpLlxuICAgICAgICBhd2FpdCBFeHBvVGFza01hbmFnZXIudW5yZWdpc3RlclRhc2tBc3luYyh0YXNrTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICApO1xufVxuXG4vLyBAbmVlZHNBdWRpdFxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGBUYXNrTWFuYWdlcmAgQVBJIGNhbiBiZSB1c2VkIGluIHRoaXMgYXBwLlxuICogQHJldHVybiBBIHByb21pc2Ugd2hpY2ggZnVsZmlsbHMgd2l0aCBgdHJ1ZWAgaWYgdGhlIEFQSSBjYW4gYmUgdXNlZCwgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICogV2l0aCBFeHBvIEdvLCBgVGFza01hbmFnZXJgIGlzIG5vdCBhdmFpbGFibGUgb24gQW5kcm9pZCwgYW5kIGRvZXMgbm90IHN1cHBvcnQgYmFja2dyb3VuZCBleGVjdXRpb24gb24gaU9TLlxuICogVXNlIGEgZGV2ZWxvcG1lbnQgYnVpbGQgdG8gYXZvaWQgbGltaXRhdGlvbnM6IGh0dHBzOi8vZXhwby5meWkvZGV2LWNsaWVudC5cbiAqIE9uIHRoZSB3ZWIsIGl0IGFsd2F5cyByZXR1cm5zIGBmYWxzZWAuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc0F2YWlsYWJsZUFzeW5jKCk6IFByb21pc2U8Ym9vbGVhbj4g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QUk7UUFBRUMsS0FBSyxHQUFBRixJQUFBLENBQUxFLEtBQUs7UUFBRUMsYUFBYSxHQUFBSCxJQUFBLENBQWJHLGFBQWE7TUFDakMsSUFBUUMsT0FBTyxHQUFlRCxhQUFhLENBQW5DQyxPQUFPO1FBQUVyQyxRQUFRLEdBQUtvQyxhQUFhLENBQTFCcEMsUUFBUTtNQUN6QixJQUFNRyxZQUFZLEdBQUdOLEtBQUssQ0FBQ3lDLEdBQUcsQ0FBQ3RDLFFBQVEsQ0FBQztNQUN4QyxJQUFJdUMsTUFBTSxHQUFRLElBQUk7TUFFdEIsSUFBSXBDLFlBQVksRUFBRTtRQUNoQixJQUFJO1VBRUZvQyxNQUFNLFNBQVNwQyxZQUFZLENBQUM7WUFBRStCLElBQUksRUFBSkEsSUFBSTtZQUFFQyxLQUFLLEVBQUxBLEtBQUs7WUFBRUMsYUFBYSxFQUFiQTtVQUFhLENBQUUsQ0FBQztRQUM3RCxDQUFDLENBQUMsT0FBT0QsS0FBSyxFQUFFO1VBQ2QvQixPQUFPLENBQUMrQixLQUFLLENBQUMsc0JBQXNCbkMsUUFBUSxXQUFXLEVBQUVtQyxLQUFLLENBQUM7UUFDakUsQ0FBQyxTQUFTO1VBRVIsTUFBTW5CLHdCQUFlLENBQUN3Qix1QkFBdUIsQ0FBQ3hDLFFBQVEsRUFBRTtZQUFFcUMsT0FBTyxFQUFQQSxPQUFPO1lBQUVFLE1BQU0sRUFBTkE7VUFBTSxDQUFFLENBQUM7UUFDOUU7TUFDRixDQUFDLE1BQU07UUFDTG5DLE9BQU8sQ0FBQ0MsSUFBSSxDQUNWLHNCQUFzQkwsUUFBUSxzSUFBc0ksQ0FDcks7UUFFRCxNQUFNZ0Isd0JBQWUsQ0FBQ3dCLHVCQUF1QixDQUFDeEMsUUFBUSxFQUFFO1VBQUVxQyxPQUFPLEVBQVBBLE9BQU87VUFBRUUsTUFBTSxFQUFOQTtRQUFNLENBQUUsQ0FBQztRQUc1RSxNQUFNdkIsd0JBQWUsQ0FBQ08sbUJBQW1CLENBQUN2QixRQUFRLENBQUM7TUFDckQ7SUFDRixDQUFDO0lBQUEsaUJBQUF5QyxHQUFBO01BQUEsT0FBQVQsS0FBQSxDQUFBcEIsS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxJQUNGO0FBQ0g7QUFBQyxTQVVxQjZCLGdCQUFnQkEsQ0FBQTtFQUFBLE9BQUFDLGlCQUFBLENBQUEvQixLQUFBLE9BQUFDLFNBQUE7QUFBQTtBQUFBLFNBQUE4QixrQkFBQTtFQUFBQSxpQkFBQSxPQUFBN0Isa0JBQUEsQ0FBQUMsT0FBQSxFQUEvQixhQUErQjtJQUNwQyxPQUFPQyx3QkFBZSxDQUFDMEIsZ0JBQWdCLEVBQUU7RUFDM0MsQ0FBQztFQUFBLE9BQUFDLGlCQUFBLENBQUEvQixLQUFBLE9BQUFDLFNBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==