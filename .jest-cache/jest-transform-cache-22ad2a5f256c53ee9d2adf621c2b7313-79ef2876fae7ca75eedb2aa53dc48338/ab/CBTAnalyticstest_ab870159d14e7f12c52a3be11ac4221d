923e6debd35729fcc921a3523ea04781
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry");
_getJestObj().mock("../../services/supabase");
_getJestObj().mock("../../constants/featureFlags", function () {
  return {
    FEATURE_FLAGS: {
      isEnabled: jest.fn(function (flag) {
        if (flag === 'AI_UNIFIED_PIPELINE') return true;
        return false;
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _UnifiedAIPipeline = require("../../features/ai/core/UnifiedAIPipeline");
var _qualityRibbonFixtures = require("../fixtures/qualityRibbonFixtures");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CBT Analytics Integration', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    (0, _qualityRibbonFixtures.mockDateNow)(1640995200000);
  });
  describe('Mood Before/After Analysis', function () {
    it('should calculate mood improvement deltas correctly', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics;
      var cbtRecords = [{
        mood_before: 3,
        mood_after: 7,
        timestamp: '2022-01-01T10:00:00Z'
      }, {
        mood_before: 4,
        mood_after: 6,
        timestamp: '2022-01-01T14:00:00Z'
      }, {
        mood_before: 2,
        mood_after: 8,
        timestamp: '2022-01-01T18:00:00Z'
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics = result.analytics) == null ? void 0 : _result$analytics.cbt).toMatchObject({
        sampleSize: 3,
        volatility: expect.any(Number),
        weeklyDelta: expect.any(Number),
        confidence: expect.any(Number),
        baselines: {
          moodImprovement: expect.any(Number)
        }
      });
      var expectedImprovement = (7 - 3 + (6 - 4) + (8 - 2)) / 3;
      expect(result.analytics.cbt.baselines.moodImprovement).toBeCloseTo(expectedImprovement);
    }));
    it('should handle records without mood data', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics2;
      var cbtRecords = [{
        mood_before: 3,
        mood_after: 7
      }, {
        situation: 'Test',
        mood_before: null,
        mood_after: null
      }, {
        mood_before: 5,
        mood_after: 8
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics2 = result.analytics) == null || (_result$analytics2 = _result$analytics2.cbt) == null ? void 0 : _result$analytics2.sampleSize).toBe(2);
    }));
    it('should skip analytics for insufficient data', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics3;
      var cbtRecords = [];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics3 = result.analytics) == null ? void 0 : _result$analytics3.cbt).toBeUndefined();
    }));
  });
  describe('Volatility Calculation', function () {
    it('should calculate mood improvement volatility correctly', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics4;
      var cbtRecords = [{
        mood_before: 5,
        mood_after: 7
      }, {
        mood_before: 3,
        mood_after: 9
      }, {
        mood_before: 6,
        mood_after: 6
      }, {
        mood_before: 4,
        mood_after: 5
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics4 = result.analytics) == null || (_result$analytics4 = _result$analytics4.cbt) == null ? void 0 : _result$analytics4.volatility).toBeCloseTo(2.3, 1);
    }));
    it('should handle single record (no volatility)', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics5;
      var cbtRecords = [{
        mood_before: 3,
        mood_after: 7
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics5 = result.analytics) == null || (_result$analytics5 = _result$analytics5.cbt) == null ? void 0 : _result$analytics5.volatility).toBe(0);
    }));
  });
  describe('Weekly Delta Trends', function () {
    it('should calculate weekly delta for trend analysis', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics6, _result$analytics7;
      var baseTimestamp = Date.now();
      var cbtRecords = [{
        mood_before: 5,
        mood_after: 6,
        timestamp: new Date(baseTimestamp - 13 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        mood_before: 4,
        mood_after: 5,
        timestamp: new Date(baseTimestamp - 12 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        mood_before: 6,
        mood_after: 6,
        timestamp: new Date(baseTimestamp - 10 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        mood_before: 3,
        mood_after: 8,
        timestamp: new Date(baseTimestamp - 6 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        mood_before: 4,
        mood_after: 9,
        timestamp: new Date(baseTimestamp - 4 * 24 * 60 * 60 * 1000).toISOString()
      }, {
        mood_before: 2,
        mood_after: 7,
        timestamp: new Date(baseTimestamp - 2 * 24 * 60 * 60 * 1000).toISOString()
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics6 = result.analytics) == null || (_result$analytics6 = _result$analytics6.cbt) == null ? void 0 : _result$analytics6.weeklyDelta).toBeGreaterThan(3);
      expect((_result$analytics7 = result.analytics) == null || (_result$analytics7 = _result$analytics7.cbt) == null ? void 0 : _result$analytics7.weeklyDelta).toBeLessThan(5);
    }));
    it('should handle insufficient data for weekly comparison', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics8;
      var cbtRecords = [{
        mood_before: 3,
        mood_after: 7,
        timestamp: new Date().toISOString()
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics8 = result.analytics) == null || (_result$analytics8 = _result$analytics8.cbt) == null ? void 0 : _result$analytics8.weeklyDelta).toBe(0);
    }));
  });
  describe('Confidence Calculation', function () {
    it('should scale confidence based on sample size', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        recordCount: 2,
        expectedConfidenceRange: [0.55, 0.65]
      }, {
        recordCount: 5,
        expectedConfidenceRange: [0.70, 0.80]
      }, {
        recordCount: 15,
        expectedConfidenceRange: [0.75, 0.80]
      }, {
        recordCount: 25,
        expectedConfidenceRange: [0.80, 0.80]
      }];
      for (var testCase of testCases) {
        var _result$analytics9;
        var cbtRecords = (0, _qualityRibbonFixtures.generateCBTRecords)(testCase.recordCount);
        var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
          userId: 'test-user',
          content: {
            cbtRecords: cbtRecords
          },
          type: 'data',
          context: {
            source: 'today'
          }
        });
        var confidence = ((_result$analytics9 = result.analytics) == null || (_result$analytics9 = _result$analytics9.cbt) == null ? void 0 : _result$analytics9.confidence) || 0;
        expect(confidence).toBeGreaterThanOrEqual(testCase.expectedConfidenceRange[0]);
        expect(confidence).toBeLessThanOrEqual(testCase.expectedConfidenceRange[1]);
      }
    }));
  });
  describe('Quality Ribbon Integration', function () {
    it('should provide sufficient data for high-quality ribbon', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics0;
      var cbtRecords = (0, _qualityRibbonFixtures.generateCBTRecords)(10);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics0 = result.analytics) == null ? void 0 : _result$analytics0.cbt).toMatchObject({
        sampleSize: expect.any(Number),
        confidence: expect.any(Number),
        dataQuality: expect.any(Number)
      });
      expect(result.analytics.cbt.confidence).toBeGreaterThan(0.7);
      expect(result.analytics.cbt.sampleSize).toBeGreaterThan(2);
    }));
    it('should provide appropriate data for medium-quality ribbon', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics1, _result$analytics10, _result$analytics11, _result$analytics12;
      var cbtRecords = (0, _qualityRibbonFixtures.generateCBTRecords)(4);
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics1 = result.analytics) == null || (_result$analytics1 = _result$analytics1.cbt) == null ? void 0 : _result$analytics1.confidence).toBeGreaterThanOrEqual(0.6);
      expect((_result$analytics10 = result.analytics) == null || (_result$analytics10 = _result$analytics10.cbt) == null ? void 0 : _result$analytics10.confidence).toBeLessThan(0.8);
      expect((_result$analytics11 = result.analytics) == null || (_result$analytics11 = _result$analytics11.cbt) == null ? void 0 : _result$analytics11.sampleSize).toBe(4);
      expect((_result$analytics12 = result.analytics) == null || (_result$analytics12 = _result$analytics12.cbt) == null ? void 0 : _result$analytics12.sampleSize).toBeLessThan(7);
    }));
  });
  describe('Edge Cases', function () {
    it('should handle records with identical before/after moods', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics13, _result$analytics14;
      var cbtRecords = [{
        mood_before: 5,
        mood_after: 5
      }, {
        mood_before: 7,
        mood_after: 7
      }, {
        mood_before: 3,
        mood_after: 3
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics13 = result.analytics) == null || (_result$analytics13 = _result$analytics13.cbt) == null || (_result$analytics13 = _result$analytics13.baselines) == null ? void 0 : _result$analytics13.moodImprovement).toBe(0);
      expect((_result$analytics14 = result.analytics) == null || (_result$analytics14 = _result$analytics14.cbt) == null ? void 0 : _result$analytics14.volatility).toBe(0);
    }));
    it('should handle extreme mood improvements', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics15, _result$analytics16;
      var cbtRecords = [{
        mood_before: 1,
        mood_after: 10
      }, {
        mood_before: 2,
        mood_after: 10
      }, {
        mood_before: 1,
        mood_after: 9
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics15 = result.analytics) == null || (_result$analytics15 = _result$analytics15.cbt) == null || (_result$analytics15 = _result$analytics15.baselines) == null ? void 0 : _result$analytics15.moodImprovement).toBeGreaterThan(7);
      expect((_result$analytics16 = result.analytics) == null || (_result$analytics16 = _result$analytics16.cbt) == null ? void 0 : _result$analytics16.confidence).toBeGreaterThan(0.6);
    }));
    it('should handle negative mood changes (worsening)', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics17, _result$analytics18;
      var cbtRecords = [{
        mood_before: 8,
        mood_after: 5
      }, {
        mood_before: 7,
        mood_after: 4
      }, {
        mood_before: 6,
        mood_after: 2
      }];
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: cbtRecords
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect((_result$analytics17 = result.analytics) == null || (_result$analytics17 = _result$analytics17.cbt) == null || (_result$analytics17 = _result$analytics17.baselines) == null ? void 0 : _result$analytics17.moodImprovement).toBeLessThan(0);
      expect((_result$analytics18 = result.analytics) == null || (_result$analytics18 = _result$analytics18.cbt) == null ? void 0 : _result$analytics18.volatility).toBeGreaterThan(0);
    }));
  });
  describe('Performance', function () {
    it('should process large datasets efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _result$analytics19;
      var largeCBTDataset = (0, _qualityRibbonFixtures.generateCBTRecords)(1000);
      var startTime = Date.now();
      var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: largeCBTDataset
        },
        type: 'data',
        context: {
          source: 'today'
        }
      });
      var endTime = Date.now();
      var processingTime = endTime - startTime;
      expect(processingTime).toBeLessThan(1000);
      expect((_result$analytics19 = result.analytics) == null ? void 0 : _result$analytics19.cbt).toBeDefined();
    }));
    it('should handle memory efficiently with large datasets', (0, _asyncToGenerator2.default)(function* () {
      var largeCBTDataset = (0, _qualityRibbonFixtures.generateCBTRecords)(5000);
      yield expect(_UnifiedAIPipeline.unifiedPipeline.process({
        userId: 'test-user',
        content: {
          cbtRecords: largeCBTDataset
        },
        type: 'data',
        context: {
          source: 'today'
        }
      })).resolves.not.toThrow();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,