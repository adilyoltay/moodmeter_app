{"version":3,"names":["_getJestObj","mock","FEATURE_FLAGS","isEnabled","jest","fn","flag","_interopRequireDefault","require","_asyncToGenerator2","_UnifiedAIPipeline","_qualityRibbonFixtures","_require","describe","beforeEach","clearAllMocks","mockDateNow","it","default","_result$analytics","cbtRecords","mood_before","mood_after","timestamp","result","unifiedPipeline","process","userId","content","type","context","source","expect","analytics","cbt","toMatchObject","sampleSize","volatility","any","Number","weeklyDelta","confidence","baselines","moodImprovement","expectedImprovement","toBeCloseTo","_result$analytics2","situation","toBe","_result$analytics3","toBeUndefined","_result$analytics4","_result$analytics5","_result$analytics6","_result$analytics7","baseTimestamp","Date","now","toISOString","toBeGreaterThan","toBeLessThan","_result$analytics8","testCases","recordCount","expectedConfidenceRange","testCase","_result$analytics9","generateCBTRecords","toBeGreaterThanOrEqual","toBeLessThanOrEqual","_result$analytics0","dataQuality","_result$analytics1","_result$analytics10","_result$analytics11","_result$analytics12","_result$analytics13","_result$analytics14","_result$analytics15","_result$analytics16","_result$analytics17","_result$analytics18","_result$analytics19","largeCBTDataset","startTime","endTime","processingTime","toBeDefined","resolves","not","toThrow"],"sources":["CBTAnalytics.test.ts"],"sourcesContent":["/**\n * ðŸ§ª Analytics Tests - CBT Analytics\n * \n * Tests for CBT analytics computation, mood before/after tracking,\n * volatility calculation, and Quality Ribbon metadata generation\n */\n\nimport { unifiedPipeline } from '@/features/ai/core/UnifiedAIPipeline';\nimport { \n  generateCBTRecords,\n  mockAnalyticsResults,\n  mockDateNow\n} from '../fixtures/qualityRibbonFixtures';\n\n// Mock dependencies\njest.mock('@/features/ai/telemetry/aiTelemetry');\njest.mock('@/services/supabase');\njest.mock('@/constants/featureFlags', () => ({\n  FEATURE_FLAGS: {\n    isEnabled: jest.fn((flag) => {\n      if (flag === 'AI_UNIFIED_PIPELINE') return true;\n      return false;\n    })\n  }\n}));\n\ndescribe('CBT Analytics Integration', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockDateNow(1640995200000); // Fixed timestamp\n  });\n\n  describe('Mood Before/After Analysis', () => {\n    it('should calculate mood improvement deltas correctly', async () => {\n      const cbtRecords = [\n        { mood_before: 3, mood_after: 7, timestamp: '2022-01-01T10:00:00Z' },\n        { mood_before: 4, mood_after: 6, timestamp: '2022-01-01T14:00:00Z' },\n        { mood_before: 2, mood_after: 8, timestamp: '2022-01-01T18:00:00Z' }\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      expect(result.analytics?.cbt).toMatchObject({\n        sampleSize: 3,\n        volatility: expect.any(Number),\n        weeklyDelta: expect.any(Number),\n        confidence: expect.any(Number),\n        baselines: {\n          moodImprovement: expect.any(Number)\n        }\n      });\n\n      // Verify average mood improvement\n      const expectedImprovement = ((7-3) + (6-4) + (8-2)) / 3; // = 4\n      expect(result.analytics.cbt.baselines.moodImprovement).toBeCloseTo(expectedImprovement);\n    });\n\n    it('should handle records without mood data', async () => {\n      const cbtRecords = [\n        { mood_before: 3, mood_after: 7 },\n        { situation: 'Test', mood_before: null, mood_after: null }, // Invalid\n        { mood_before: 5, mood_after: 8 }\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Should only process valid records\n      expect(result.analytics?.cbt?.sampleSize).toBe(2);\n    });\n\n    it('should skip analytics for insufficient data', async () => {\n      const cbtRecords = []; // Empty\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Should not include CBT analytics\n      expect(result.analytics?.cbt).toBeUndefined();\n    });\n  });\n\n  describe('Volatility Calculation', () => {\n    it('should calculate mood improvement volatility correctly', async () => {\n      const cbtRecords = [\n        { mood_before: 5, mood_after: 7 }, // +2 improvement\n        { mood_before: 3, mood_after: 9 }, // +6 improvement  \n        { mood_before: 6, mood_after: 6 }, // 0 improvement\n        { mood_before: 4, mood_after: 5 }  // +1 improvement\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Deltas: [2, 6, 0, 1], mean = 2.25\n      // Variance: ((2-2.25)Â² + (6-2.25)Â² + (0-2.25)Â² + (1-2.25)Â²) / 4\n      // = (0.0625 + 14.0625 + 5.0625 + 1.5625) / 4 = 5.1875\n      // Volatility (stddev) = âˆš5.1875 â‰ˆ 2.28\n\n      expect(result.analytics?.cbt?.volatility).toBeCloseTo(2.3, 1);\n    });\n\n    it('should handle single record (no volatility)', async () => {\n      const cbtRecords = [\n        { mood_before: 3, mood_after: 7 }\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Single record should have 0 volatility\n      expect(result.analytics?.cbt?.volatility).toBe(0);\n    });\n  });\n\n  describe('Weekly Delta Trends', () => {\n    it('should calculate weekly delta for trend analysis', async () => {\n      // Generate records spanning 2 weeks\n      const baseTimestamp = Date.now();\n      const cbtRecords = [\n        // Week 1 (poor improvement)\n        { mood_before: 5, mood_after: 6, timestamp: new Date(baseTimestamp - 13*24*60*60*1000).toISOString() },\n        { mood_before: 4, mood_after: 5, timestamp: new Date(baseTimestamp - 12*24*60*60*1000).toISOString() },\n        { mood_before: 6, mood_after: 6, timestamp: new Date(baseTimestamp - 10*24*60*60*1000).toISOString() },\n        \n        // Week 2 (better improvement)\n        { mood_before: 3, mood_after: 8, timestamp: new Date(baseTimestamp - 6*24*60*60*1000).toISOString() },\n        { mood_before: 4, mood_after: 9, timestamp: new Date(baseTimestamp - 4*24*60*60*1000).toISOString() },\n        { mood_before: 2, mood_after: 7, timestamp: new Date(baseTimestamp - 2*24*60*60*1000).toISOString() }\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Week 1 avg improvement: (1+1+0)/3 = 0.67\n      // Week 2 avg improvement: (5+5+5)/3 = 5.0\n      // Delta: 5.0 - 0.67 = 4.33\n\n      expect(result.analytics?.cbt?.weeklyDelta).toBeGreaterThan(3);\n      expect(result.analytics?.cbt?.weeklyDelta).toBeLessThan(5);\n    });\n\n    it('should handle insufficient data for weekly comparison', async () => {\n      const cbtRecords = [\n        { mood_before: 3, mood_after: 7, timestamp: new Date().toISOString() }\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Should default to 0 for insufficient data\n      expect(result.analytics?.cbt?.weeklyDelta).toBe(0);\n    });\n  });\n\n  describe('Confidence Calculation', () => {\n    it('should scale confidence based on sample size', async () => {\n      const testCases = [\n        { recordCount: 2, expectedConfidenceRange: [0.55, 0.65] },\n        { recordCount: 5, expectedConfidenceRange: [0.70, 0.80] },\n        { recordCount: 15, expectedConfidenceRange: [0.75, 0.80] }, // Capped at 0.8\n        { recordCount: 25, expectedConfidenceRange: [0.80, 0.80] }  // Max cap\n      ];\n\n      for (const testCase of testCases) {\n        const cbtRecords = generateCBTRecords(testCase.recordCount);\n        \n        const result = await unifiedPipeline.process({\n          userId: 'test-user',\n          content: { cbtRecords },\n          type: 'data',\n          context: { source: 'today' }\n        });\n\n        const confidence = result.analytics?.cbt?.confidence || 0;\n        expect(confidence).toBeGreaterThanOrEqual(testCase.expectedConfidenceRange[0]);\n        expect(confidence).toBeLessThanOrEqual(testCase.expectedConfidenceRange[1]);\n      }\n    });\n  });\n\n  describe('Quality Ribbon Integration', () => {\n    it('should provide sufficient data for high-quality ribbon', async () => {\n      const cbtRecords = generateCBTRecords(10); // Rich dataset\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      expect(result.analytics?.cbt).toMatchObject({\n        sampleSize: expect.any(Number), // Actual generated count\n        confidence: expect.any(Number),\n        dataQuality: expect.any(Number)\n      });\n\n      // Should have high enough values for \"High\" quality rating\n      expect(result.analytics.cbt.confidence).toBeGreaterThan(0.7);\n      expect(result.analytics.cbt.sampleSize).toBeGreaterThan(2); // Realistic expectation\n    });\n\n    it('should provide appropriate data for medium-quality ribbon', async () => {\n      const cbtRecords = generateCBTRecords(4); // Moderate dataset\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Should provide medium quality rating\n      expect(result.analytics?.cbt?.confidence).toBeGreaterThanOrEqual(0.6);\n      expect(result.analytics?.cbt?.confidence).toBeLessThan(0.8);\n      expect(result.analytics?.cbt?.sampleSize).toBe(4); // generateCBTRecords(4)\n      expect(result.analytics?.cbt?.sampleSize).toBeLessThan(7);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle records with identical before/after moods', async () => {\n      const cbtRecords = [\n        { mood_before: 5, mood_after: 5 }, // No change\n        { mood_before: 7, mood_after: 7 }, // No change\n        { mood_before: 3, mood_after: 3 }  // No change\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      expect(result.analytics?.cbt?.baselines?.moodImprovement).toBe(0);\n      expect(result.analytics?.cbt?.volatility).toBe(0); // No variation\n    });\n\n    it('should handle extreme mood improvements', async () => {\n      const cbtRecords = [\n        { mood_before: 1, mood_after: 10 }, // +9 improvement\n        { mood_before: 2, mood_after: 10 }, // +8 improvement\n        { mood_before: 1, mood_after: 9 }   // +8 improvement\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Should handle large improvements gracefully\n      expect(result.analytics?.cbt?.baselines?.moodImprovement).toBeGreaterThan(7);\n      expect(result.analytics?.cbt?.confidence).toBeGreaterThan(0.6);\n    });\n\n    it('should handle negative mood changes (worsening)', async () => {\n      const cbtRecords = [\n        { mood_before: 8, mood_after: 5 }, // -3 change\n        { mood_before: 7, mood_after: 4 }, // -3 change\n        { mood_before: 6, mood_after: 2 }  // -4 change\n      ];\n\n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      // Should handle negative trends\n      expect(result.analytics?.cbt?.baselines?.moodImprovement).toBeLessThan(0);\n      expect(result.analytics?.cbt?.volatility).toBeGreaterThan(0); // Still some variation\n    });\n  });\n\n  describe('Performance', () => {\n    it('should process large datasets efficiently', async () => {\n      const largeCBTDataset = generateCBTRecords(1000);\n\n      const startTime = Date.now();\n      \n      const result = await unifiedPipeline.process({\n        userId: 'test-user',\n        content: { cbtRecords: largeCBTDataset },\n        type: 'data',\n        context: { source: 'today' }\n      });\n\n      const endTime = Date.now();\n      const processingTime = endTime - startTime;\n\n      // Should complete within reasonable time\n      expect(processingTime).toBeLessThan(1000); // < 1 second\n      expect(result.analytics?.cbt).toBeDefined();\n    });\n\n    it('should handle memory efficiently with large datasets', async () => {\n      const largeCBTDataset = generateCBTRecords(5000);\n\n      // Should not throw memory errors\n      await expect(\n        unifiedPipeline.process({\n          userId: 'test-user',\n          content: { cbtRecords: largeCBTDataset },\n          type: 'data',\n          context: { source: 'today' }\n        })\n      ).resolves.not.toThrow();\n    });\n  });\n});\n"],"mappings":"AAeAA,WAAA,GAAKC,IAAI,0CAAsC,CAAC;AAChDD,WAAA,GAAKC,IAAI,0BAAsB,CAAC;AAChCD,WAAA,GAAKC,IAAI,iCAA6B;EAAA,OAAO;IAC3CC,aAAa,EAAE;MACbC,SAAS,EAAEC,IAAI,CAACC,EAAE,CAAC,UAACC,IAAI,EAAK;QAC3B,IAAIA,IAAI,KAAK,qBAAqB,EAAE,OAAO,IAAI;QAC/C,OAAO,KAAK;MACd,CAAC;IACH;EACF,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAjBJ,IAAAE,kBAAA,GAAAF,OAAA;AACA,IAAAG,sBAAA,GAAAH,OAAA;AAI2C,SAAAR,YAAA;EAAA,IAAAY,QAAA,GAAAJ,OAAA;IAAAJ,IAAA,GAAAQ,QAAA,CAAAR,IAAA;EAAAJ,WAAA,YAAAA,YAAA;IAAA,OAAAI,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAc3CS,QAAQ,CAAC,2BAA2B,EAAE,YAAM;EAC1CC,UAAU,CAAC,YAAM;IACfV,IAAI,CAACW,aAAa,CAAC,CAAC;IACpB,IAAAC,kCAAW,EAAC,aAAa,CAAC;EAC5B,CAAC,CAAC;EAEFH,QAAQ,CAAC,4BAA4B,EAAE,YAAM;IAC3CI,EAAE,CAAC,oDAAoD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAAC,iBAAA;MACnE,IAAMC,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE;MAAuB,CAAC,EACpE;QAAEF,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE;MAAuB,CAAC,EACpE;QAAEF,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE;MAAuB,CAAC,CACrE;MAED,IAAMC,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAEFC,MAAM,EAAAb,iBAAA,GAACK,MAAM,CAACS,SAAS,qBAAhBd,iBAAA,CAAkBe,GAAG,CAAC,CAACC,aAAa,CAAC;QAC1CC,UAAU,EAAE,CAAC;QACbC,UAAU,EAAEL,MAAM,CAACM,GAAG,CAACC,MAAM,CAAC;QAC9BC,WAAW,EAAER,MAAM,CAACM,GAAG,CAACC,MAAM,CAAC;QAC/BE,UAAU,EAAET,MAAM,CAACM,GAAG,CAACC,MAAM,CAAC;QAC9BG,SAAS,EAAE;UACTC,eAAe,EAAEX,MAAM,CAACM,GAAG,CAACC,MAAM;QACpC;MACF,CAAC,CAAC;MAGF,IAAMK,mBAAmB,GAAG,CAAE,CAAC,GAAC,CAAC,IAAK,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC;MACvDZ,MAAM,CAACR,MAAM,CAACS,SAAS,CAACC,GAAG,CAACQ,SAAS,CAACC,eAAe,CAAC,CAACE,WAAW,CAACD,mBAAmB,CAAC;IACzF,CAAC,EAAC;IAEF3B,EAAE,CAAC,yCAAyC,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAA4B,kBAAA;MACxD,IAAM1B,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAEyB,SAAS,EAAE,MAAM;QAAE1B,WAAW,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAK,CAAC,EAC1D;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,CAClC;MAED,IAAME,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAGFC,MAAM,EAAAc,kBAAA,GAACtB,MAAM,CAACS,SAAS,cAAAa,kBAAA,GAAhBA,kBAAA,CAAkBZ,GAAG,qBAArBY,kBAAA,CAAuBV,UAAU,CAAC,CAACY,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC,EAAC;IAEF/B,EAAE,CAAC,6CAA6C,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAA+B,kBAAA;MAC5D,IAAM7B,UAAU,GAAG,EAAE;MAErB,IAAMI,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAGFC,MAAM,EAAAiB,kBAAA,GAACzB,MAAM,CAACS,SAAS,qBAAhBgB,kBAAA,CAAkBf,GAAG,CAAC,CAACgB,aAAa,CAAC,CAAC;IAC/C,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFrC,QAAQ,CAAC,wBAAwB,EAAE,YAAM;IACvCI,EAAE,CAAC,wDAAwD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAAiC,kBAAA;MACvE,IAAM/B,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,CAClC;MAED,IAAME,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAOFC,MAAM,EAAAmB,kBAAA,GAAC3B,MAAM,CAACS,SAAS,cAAAkB,kBAAA,GAAhBA,kBAAA,CAAkBjB,GAAG,qBAArBiB,kBAAA,CAAuBd,UAAU,CAAC,CAACQ,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;IAC/D,CAAC,EAAC;IAEF5B,EAAE,CAAC,6CAA6C,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAAkC,kBAAA;MAC5D,IAAMhC,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,CAClC;MAED,IAAME,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAGFC,MAAM,EAAAoB,kBAAA,GAAC5B,MAAM,CAACS,SAAS,cAAAmB,kBAAA,GAAhBA,kBAAA,CAAkBlB,GAAG,qBAArBkB,kBAAA,CAAuBf,UAAU,CAAC,CAACW,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnC,QAAQ,CAAC,qBAAqB,EAAE,YAAM;IACpCI,EAAE,CAAC,kDAAkD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAAmC,kBAAA,EAAAC,kBAAA;MAEjE,IAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAChC,IAAMrC,UAAU,GAAG,CAEjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE,IAAIiC,IAAI,CAACD,aAAa,GAAG,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,EACtG;QAAErC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE,IAAIiC,IAAI,CAACD,aAAa,GAAG,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,EACtG;QAAErC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE,IAAIiC,IAAI,CAACD,aAAa,GAAG,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,EAGtG;QAAErC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE,IAAIiC,IAAI,CAACD,aAAa,GAAG,CAAC,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,EACrG;QAAErC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE,IAAIiC,IAAI,CAACD,aAAa,GAAG,CAAC,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,EACrG;QAAErC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE,IAAIiC,IAAI,CAACD,aAAa,GAAG,CAAC,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,CACtG;MAED,IAAMlC,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAMFC,MAAM,EAAAqB,kBAAA,GAAC7B,MAAM,CAACS,SAAS,cAAAoB,kBAAA,GAAhBA,kBAAA,CAAkBnB,GAAG,qBAArBmB,kBAAA,CAAuBb,WAAW,CAAC,CAACmB,eAAe,CAAC,CAAC,CAAC;MAC7D3B,MAAM,EAAAsB,kBAAA,GAAC9B,MAAM,CAACS,SAAS,cAAAqB,kBAAA,GAAhBA,kBAAA,CAAkBpB,GAAG,qBAArBoB,kBAAA,CAAuBd,WAAW,CAAC,CAACoB,YAAY,CAAC,CAAC,CAAC;IAC5D,CAAC,EAAC;IAEF3C,EAAE,CAAC,uDAAuD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAA2C,kBAAA;MACtE,IAAMzC,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,SAAS,EAAE,IAAIiC,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC;MAAE,CAAC,CACvE;MAED,IAAMlC,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAGFC,MAAM,EAAA6B,kBAAA,GAACrC,MAAM,CAACS,SAAS,cAAA4B,kBAAA,GAAhBA,kBAAA,CAAkB3B,GAAG,qBAArB2B,kBAAA,CAAuBrB,WAAW,CAAC,CAACQ,IAAI,CAAC,CAAC,CAAC;IACpD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnC,QAAQ,CAAC,wBAAwB,EAAE,YAAM;IACvCI,EAAE,CAAC,8CAA8C,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAC7D,IAAM4C,SAAS,GAAG,CAChB;QAAEC,WAAW,EAAE,CAAC;QAAEC,uBAAuB,EAAE,CAAC,IAAI,EAAE,IAAI;MAAE,CAAC,EACzD;QAAED,WAAW,EAAE,CAAC;QAAEC,uBAAuB,EAAE,CAAC,IAAI,EAAE,IAAI;MAAE,CAAC,EACzD;QAAED,WAAW,EAAE,EAAE;QAAEC,uBAAuB,EAAE,CAAC,IAAI,EAAE,IAAI;MAAE,CAAC,EAC1D;QAAED,WAAW,EAAE,EAAE;QAAEC,uBAAuB,EAAE,CAAC,IAAI,EAAE,IAAI;MAAE,CAAC,CAC3D;MAED,KAAK,IAAMC,QAAQ,IAAIH,SAAS,EAAE;QAAA,IAAAI,kBAAA;QAChC,IAAM9C,UAAU,GAAG,IAAA+C,yCAAkB,EAACF,QAAQ,CAACF,WAAW,CAAC;QAE3D,IAAMvC,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;UAC3CC,MAAM,EAAE,WAAW;UACnBC,OAAO,EAAE;YAAER,UAAU,EAAVA;UAAW,CAAC;UACvBS,IAAI,EAAE,MAAM;UACZC,OAAO,EAAE;YAAEC,MAAM,EAAE;UAAQ;QAC7B,CAAC,CAAC;QAEF,IAAMU,UAAU,GAAG,EAAAyB,kBAAA,GAAA1C,MAAM,CAACS,SAAS,cAAAiC,kBAAA,GAAhBA,kBAAA,CAAkBhC,GAAG,qBAArBgC,kBAAA,CAAuBzB,UAAU,KAAI,CAAC;QACzDT,MAAM,CAACS,UAAU,CAAC,CAAC2B,sBAAsB,CAACH,QAAQ,CAACD,uBAAuB,CAAC,CAAC,CAAC,CAAC;QAC9EhC,MAAM,CAACS,UAAU,CAAC,CAAC4B,mBAAmB,CAACJ,QAAQ,CAACD,uBAAuB,CAAC,CAAC,CAAC,CAAC;MAC7E;IACF,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnD,QAAQ,CAAC,4BAA4B,EAAE,YAAM;IAC3CI,EAAE,CAAC,wDAAwD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAAoD,kBAAA;MACvE,IAAMlD,UAAU,GAAG,IAAA+C,yCAAkB,EAAC,EAAE,CAAC;MAEzC,IAAM3C,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAEFC,MAAM,EAAAsC,kBAAA,GAAC9C,MAAM,CAACS,SAAS,qBAAhBqC,kBAAA,CAAkBpC,GAAG,CAAC,CAACC,aAAa,CAAC;QAC1CC,UAAU,EAAEJ,MAAM,CAACM,GAAG,CAACC,MAAM,CAAC;QAC9BE,UAAU,EAAET,MAAM,CAACM,GAAG,CAACC,MAAM,CAAC;QAC9BgC,WAAW,EAAEvC,MAAM,CAACM,GAAG,CAACC,MAAM;MAChC,CAAC,CAAC;MAGFP,MAAM,CAACR,MAAM,CAACS,SAAS,CAACC,GAAG,CAACO,UAAU,CAAC,CAACkB,eAAe,CAAC,GAAG,CAAC;MAC5D3B,MAAM,CAACR,MAAM,CAACS,SAAS,CAACC,GAAG,CAACE,UAAU,CAAC,CAACuB,eAAe,CAAC,CAAC,CAAC;IAC5D,CAAC,EAAC;IAEF1C,EAAE,CAAC,2DAA2D,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAAsD,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA;MAC1E,IAAMvD,UAAU,GAAG,IAAA+C,yCAAkB,EAAC,CAAC,CAAC;MAExC,IAAM3C,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAGFC,MAAM,EAAAwC,kBAAA,GAAChD,MAAM,CAACS,SAAS,cAAAuC,kBAAA,GAAhBA,kBAAA,CAAkBtC,GAAG,qBAArBsC,kBAAA,CAAuB/B,UAAU,CAAC,CAAC2B,sBAAsB,CAAC,GAAG,CAAC;MACrEpC,MAAM,EAAAyC,mBAAA,GAACjD,MAAM,CAACS,SAAS,cAAAwC,mBAAA,GAAhBA,mBAAA,CAAkBvC,GAAG,qBAArBuC,mBAAA,CAAuBhC,UAAU,CAAC,CAACmB,YAAY,CAAC,GAAG,CAAC;MAC3D5B,MAAM,EAAA0C,mBAAA,GAAClD,MAAM,CAACS,SAAS,cAAAyC,mBAAA,GAAhBA,mBAAA,CAAkBxC,GAAG,qBAArBwC,mBAAA,CAAuBtC,UAAU,CAAC,CAACY,IAAI,CAAC,CAAC,CAAC;MACjDhB,MAAM,EAAA2C,mBAAA,GAACnD,MAAM,CAACS,SAAS,cAAA0C,mBAAA,GAAhBA,mBAAA,CAAkBzC,GAAG,qBAArByC,mBAAA,CAAuBvC,UAAU,CAAC,CAACwB,YAAY,CAAC,CAAC,CAAC;IAC3D,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF/C,QAAQ,CAAC,YAAY,EAAE,YAAM;IAC3BI,EAAE,CAAC,yDAAyD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAA0D,mBAAA,EAAAC,mBAAA;MACxE,IAAMzD,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,CAClC;MAED,IAAME,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAEFC,MAAM,EAAA4C,mBAAA,GAACpD,MAAM,CAACS,SAAS,cAAA2C,mBAAA,GAAhBA,mBAAA,CAAkB1C,GAAG,cAAA0C,mBAAA,GAArBA,mBAAA,CAAuBlC,SAAS,qBAAhCkC,mBAAA,CAAkCjC,eAAe,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC;MACjEhB,MAAM,EAAA6C,mBAAA,GAACrD,MAAM,CAACS,SAAS,cAAA4C,mBAAA,GAAhBA,mBAAA,CAAkB3C,GAAG,qBAArB2C,mBAAA,CAAuBxC,UAAU,CAAC,CAACW,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC,EAAC;IAEF/B,EAAE,CAAC,yCAAyC,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAA4D,mBAAA,EAAAC,mBAAA;MACxD,IAAM3D,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAG,CAAC,EAClC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAG,CAAC,EAClC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,CAClC;MAED,IAAME,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAGFC,MAAM,EAAA8C,mBAAA,GAACtD,MAAM,CAACS,SAAS,cAAA6C,mBAAA,GAAhBA,mBAAA,CAAkB5C,GAAG,cAAA4C,mBAAA,GAArBA,mBAAA,CAAuBpC,SAAS,qBAAhCoC,mBAAA,CAAkCnC,eAAe,CAAC,CAACgB,eAAe,CAAC,CAAC,CAAC;MAC5E3B,MAAM,EAAA+C,mBAAA,GAACvD,MAAM,CAACS,SAAS,cAAA8C,mBAAA,GAAhBA,mBAAA,CAAkB7C,GAAG,qBAArB6C,mBAAA,CAAuBtC,UAAU,CAAC,CAACkB,eAAe,CAAC,GAAG,CAAC;IAChE,CAAC,EAAC;IAEF1C,EAAE,CAAC,iDAAiD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAA8D,mBAAA,EAAAC,mBAAA;MAChE,IAAM7D,UAAU,GAAG,CACjB;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,EACjC;QAAED,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC,CAClC;MAED,IAAME,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAVA;QAAW,CAAC;QACvBS,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAGFC,MAAM,EAAAgD,mBAAA,GAACxD,MAAM,CAACS,SAAS,cAAA+C,mBAAA,GAAhBA,mBAAA,CAAkB9C,GAAG,cAAA8C,mBAAA,GAArBA,mBAAA,CAAuBtC,SAAS,qBAAhCsC,mBAAA,CAAkCrC,eAAe,CAAC,CAACiB,YAAY,CAAC,CAAC,CAAC;MACzE5B,MAAM,EAAAiD,mBAAA,GAACzD,MAAM,CAACS,SAAS,cAAAgD,mBAAA,GAAhBA,mBAAA,CAAkB/C,GAAG,qBAArB+C,mBAAA,CAAuB5C,UAAU,CAAC,CAACsB,eAAe,CAAC,CAAC,CAAC;IAC9D,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9C,QAAQ,CAAC,aAAa,EAAE,YAAM;IAC5BI,EAAE,CAAC,2CAA2C,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MAAA,IAAAgE,mBAAA;MAC1D,IAAMC,eAAe,GAAG,IAAAhB,yCAAkB,EAAC,IAAI,CAAC;MAEhD,IAAMiB,SAAS,GAAG5B,IAAI,CAACC,GAAG,CAAC,CAAC;MAE5B,IAAMjC,MAAM,SAASC,kCAAe,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAE+D;QAAgB,CAAC;QACxCtD,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CAAC;MAEF,IAAMsD,OAAO,GAAG7B,IAAI,CAACC,GAAG,CAAC,CAAC;MAC1B,IAAM6B,cAAc,GAAGD,OAAO,GAAGD,SAAS;MAG1CpD,MAAM,CAACsD,cAAc,CAAC,CAAC1B,YAAY,CAAC,IAAI,CAAC;MACzC5B,MAAM,EAAAkD,mBAAA,GAAC1D,MAAM,CAACS,SAAS,qBAAhBiD,mBAAA,CAAkBhD,GAAG,CAAC,CAACqD,WAAW,CAAC,CAAC;IAC7C,CAAC,EAAC;IAEFtE,EAAE,CAAC,sDAAsD,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;MACrE,IAAMiE,eAAe,GAAG,IAAAhB,yCAAkB,EAAC,IAAI,CAAC;MAGhD,MAAMnC,MAAM,CACVP,kCAAe,CAACC,OAAO,CAAC;QACtBC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE;UAAER,UAAU,EAAE+D;QAAgB,CAAC;QACxCtD,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UAAEC,MAAM,EAAE;QAAQ;MAC7B,CAAC,CACH,CAAC,CAACyD,QAAQ,CAACC,GAAG,CAACC,OAAO,CAAC,CAAC;IAC1B,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}