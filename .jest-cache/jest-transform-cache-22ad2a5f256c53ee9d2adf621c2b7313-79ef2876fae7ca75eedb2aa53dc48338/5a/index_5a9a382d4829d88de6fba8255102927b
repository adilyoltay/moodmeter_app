4f09553b6f5cfe5b5df29654a9c58296
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AIErrorCode = void 0;
Object.defineProperty(exports, "AIEventType", {
  enumerable: true,
  get: function get() {
    return _aiTelemetry.AIEventType;
  }
});
exports.requiresFeatureFlag = exports.isAIMessage = exports.isAIError = exports.YBOCSQuestionType = exports.TreatmentType = exports.TherapeuticApproach = exports.SessionFrequency = exports.RiskLevel = exports.RiskCategory = exports.OnboardingStep = exports.OnboardingSessionState = exports.OCDSeverityLevel = exports.InterventionType = exports.FallbackBehavior = exports.EvidenceLevel = exports.ErrorSeverity = exports.EmotionalTone = exports.CrisisRiskLevel = exports.ConversationState = exports.CBTTechnique = exports.ArtworkType = exports.AccessibilityNeed = exports.AIProvider = exports.AIInteractionType = void 0;
var _featureFlags = require("../../../constants/featureFlags");
var _aiTelemetry = require("../telemetry/aiTelemetry");
var CBTTechnique = exports.CBTTechnique = function (CBTTechnique) {
  CBTTechnique["SOCRATIC_QUESTIONING"] = "socratic_questioning";
  CBTTechnique["THOUGHT_CHALLENGING"] = "thought_challenging";
  CBTTechnique["BEHAVIORAL_EXPERIMENT"] = "behavioral_experiment";
  CBTTechnique["COGNITIVE_RESTRUCTURING"] = "cognitive_restructuring";
  CBTTechnique["MINDFULNESS"] = "mindfulness";
  CBTTechnique["EXPOSURE_THERAPY"] = "exposure_therapy";
  CBTTechnique["ACTIVITY_SCHEDULING"] = "activity_scheduling";
  CBTTechnique["PROBLEM_SOLVING"] = "problem_solving";
  return CBTTechnique;
}({});
var EmotionalTone = exports.EmotionalTone = function (EmotionalTone) {
  EmotionalTone["SUPPORTIVE"] = "supportive";
  EmotionalTone["ENCOURAGING"] = "encouraging";
  EmotionalTone["EMPATHETIC"] = "empathetic";
  EmotionalTone["EDUCATIONAL"] = "educational";
  EmotionalTone["CHALLENGING"] = "challenging";
  EmotionalTone["CALMING"] = "calming";
  EmotionalTone["MOTIVATING"] = "motivating";
  return EmotionalTone;
}({});
var CrisisRiskLevel = exports.CrisisRiskLevel = function (CrisisRiskLevel) {
  CrisisRiskLevel["NONE"] = "none";
  CrisisRiskLevel["LOW"] = "low";
  CrisisRiskLevel["MEDIUM"] = "medium";
  CrisisRiskLevel["HIGH"] = "high";
  CrisisRiskLevel["CRITICAL"] = "critical";
  return CrisisRiskLevel;
}({});
var AIProvider = exports.AIProvider = function (AIProvider) {
  AIProvider["GEMINI"] = "gemini";
  AIProvider["LOCAL"] = "local";
  return AIProvider;
}({});
var FallbackBehavior = exports.FallbackBehavior = function (FallbackBehavior) {
  FallbackBehavior["GENERIC_RESPONSE"] = "generic";
  FallbackBehavior["SILENCE"] = "silence";
  FallbackBehavior["REDIRECT_TO_HUMAN"] = "redirect";
  FallbackBehavior["OFFLINE_RESOURCES"] = "offline_resources";
  return FallbackBehavior;
}({});
var ConversationState = exports.ConversationState = function (ConversationState) {
  ConversationState["STABLE"] = "stable";
  ConversationState["ELEVATED"] = "elevated";
  ConversationState["THERAPEUTIC"] = "therapeutic";
  ConversationState["EDUCATIONAL"] = "educational";
  ConversationState["CELEBRATION"] = "celebration";
  return ConversationState;
}({});
var AIInteractionType = exports.AIInteractionType = function (AIInteractionType) {
  AIInteractionType["CHAT_MESSAGE"] = "chat_message";
  AIInteractionType["INSIGHT_GENERATED"] = "insight_generated";
  AIInteractionType["ONBOARDING_STEP"] = "onboarding_step";
  AIInteractionType["ART_THERAPY_SESSION"] = "art_therapy_session";
  AIInteractionType["CBT_EXERCISE"] = "cbt_exercise";
  return AIInteractionType;
}({});
var AIErrorCode = exports.AIErrorCode = function (AIErrorCode) {
  AIErrorCode["FEATURE_DISABLED"] = "feature_disabled";
  AIErrorCode["INITIALIZATION_FAILED"] = "initialization_failed";
  AIErrorCode["NO_PROVIDER_AVAILABLE"] = "no_provider_available";
  AIErrorCode["CONFIGURATION_ERROR"] = "configuration_error";
  AIErrorCode["INVALID_API_KEY"] = "invalid_api_key";
  AIErrorCode["NETWORK_ERROR"] = "network_error";
  AIErrorCode["TIMEOUT"] = "timeout";
  AIErrorCode["CONNECTION_FAILED"] = "connection_failed";
  AIErrorCode["RATE_LIMIT"] = "rate_limit";
  AIErrorCode["QUOTA_EXCEEDED"] = "quota_exceeded";
  AIErrorCode["CONCURRENT_LIMIT"] = "concurrent_limit";
  AIErrorCode["MODEL_ERROR"] = "model_error";
  AIErrorCode["INVALID_RESPONSE"] = "invalid_response";
  AIErrorCode["MODEL_NOT_AVAILABLE"] = "model_not_available";
  AIErrorCode["MODEL_OVERLOADED"] = "model_overloaded";
  AIErrorCode["PROVIDER_ERROR"] = "provider_error";
  AIErrorCode["PROCESSING_FAILED"] = "processing_failed";
  AIErrorCode["INVALID_INPUT"] = "invalid_input";
  AIErrorCode["DATA_VALIDATION_FAILED"] = "data_validation_failed";
  AIErrorCode["CONTENT_TOO_LONG"] = "content_too_long";
  AIErrorCode["SAFETY_VIOLATION"] = "safety_violation";
  AIErrorCode["PRIVACY_VIOLATION"] = "privacy_violation";
  AIErrorCode["PII_DETECTED"] = "pii_detected";
  AIErrorCode["CONTENT_FILTERED"] = "content_filtered";
  AIErrorCode["UNAUTHORIZED_ACCESS"] = "unauthorized_access";
  AIErrorCode["RESOURCE_NOT_FOUND"] = "resource_not_found";
  AIErrorCode["SESSION_NOT_FOUND"] = "session_not_found";
  AIErrorCode["SESSION_EXPIRED"] = "session_expired";
  AIErrorCode["CACHE_ERROR"] = "cache_error";
  AIErrorCode["STORAGE_ERROR"] = "storage_error";
  AIErrorCode["USER_NOT_FOUND"] = "user_not_found";
  AIErrorCode["CONTEXT_MISSING"] = "context_missing";
  AIErrorCode["PROFILE_INCOMPLETE"] = "profile_incomplete";
  AIErrorCode["FALLBACK_TRIGGERED"] = "fallback_triggered";
  AIErrorCode["RECOVERY_FAILED"] = "recovery_failed";
  AIErrorCode["UNKNOWN"] = "unknown";
  AIErrorCode["INTERNAL_ERROR"] = "internal_error";
  return AIErrorCode;
}({});
var ErrorSeverity = exports.ErrorSeverity = function (ErrorSeverity) {
  ErrorSeverity["LOW"] = "low";
  ErrorSeverity["MEDIUM"] = "medium";
  ErrorSeverity["HIGH"] = "high";
  ErrorSeverity["CRITICAL"] = "critical";
  return ErrorSeverity;
}({});
var ArtworkType = exports.ArtworkType = function (ArtworkType) {
  ArtworkType["AI_GENERATED"] = "ai_generated";
  ArtworkType["USER_DRAWN"] = "user_drawn";
  ArtworkType["COLLABORATIVE"] = "collaborative";
  ArtworkType["GUIDED_CREATION"] = "guided_creation";
  return ArtworkType;
}({});
var TreatmentType = exports.TreatmentType = function (TreatmentType) {
  TreatmentType["CBT"] = "cbt";
  TreatmentType["EXPOSURE_THERAPY"] = "exposure_therapy";
  TreatmentType["MEDICATION"] = "medication";
  TreatmentType["GROUP_THERAPY"] = "group_therapy";
  TreatmentType["FAMILY_THERAPY"] = "family_therapy";
  TreatmentType["ART_THERAPY"] = "art_therapy";
  return TreatmentType;
}({});
var isAIMessage = exports.isAIMessage = function isAIMessage(obj) {
  return obj && typeof obj.id === 'string' && typeof obj.content === 'string' && ['user', 'assistant', 'system'].includes(obj.role) && (obj.timestamp instanceof Date || obj.timestamp && !isNaN(new Date(obj.timestamp).getTime()));
};
var isAIError = exports.isAIError = function isAIError(obj) {
  return obj && typeof obj.code === 'string' && typeof obj.message === 'string' && Object.values(AIErrorCode).includes(obj.code) && Object.values(ErrorSeverity).includes(obj.severity);
};
var requiresFeatureFlag = exports.requiresFeatureFlag = function requiresFeatureFlag(config) {
  return _featureFlags.FEATURE_FLAGS.isEnabled(config.featureFlag);
};
var YBOCSQuestionType = exports.YBOCSQuestionType = function (YBOCSQuestionType) {
  YBOCSQuestionType["OBSESSIONS"] = "obsessions";
  YBOCSQuestionType["COMPULSIONS"] = "compulsions";
  return YBOCSQuestionType;
}({});
var OCDSeverityLevel = exports.OCDSeverityLevel = function (OCDSeverityLevel) {
  OCDSeverityLevel["MINIMAL"] = "minimal";
  OCDSeverityLevel["MILD"] = "mild";
  OCDSeverityLevel["MODERATE"] = "moderate";
  OCDSeverityLevel["SEVERE"] = "severe";
  OCDSeverityLevel["EXTREME"] = "extreme";
  return OCDSeverityLevel;
}({});
var OnboardingStep = exports.OnboardingStep = function (OnboardingStep) {
  OnboardingStep["WELCOME"] = "welcome";
  OnboardingStep["CONSENT"] = "consent";
  OnboardingStep["BASIC_INFO"] = "basic_info";
  OnboardingStep["CULTURAL_PREFERENCES"] = "cultural_preferences";
  OnboardingStep["YBOCS_ASSESSMENT"] = "ybocs_assessment";
  OnboardingStep["SYMPTOM_EXPLORATION"] = "symptom_exploration";
  OnboardingStep["THERAPEUTIC_PREFERENCES"] = "therapeutic_preferences";
  OnboardingStep["RISK_ASSESSMENT"] = "risk_assessment";
  OnboardingStep["GOAL_SETTING"] = "goal_setting";
  OnboardingStep["TREATMENT_PLANNING"] = "treatment_planning";
  OnboardingStep["SAFETY_PLANNING"] = "safety_planning";
  OnboardingStep["COMPLETION"] = "completion";
  return OnboardingStep;
}({});
var OnboardingSessionState = exports.OnboardingSessionState = function (OnboardingSessionState) {
  OnboardingSessionState["ACTIVE"] = "active";
  OnboardingSessionState["PAUSED"] = "paused";
  OnboardingSessionState["COMPLETED"] = "completed";
  OnboardingSessionState["ABANDONED"] = "abandoned";
  OnboardingSessionState["ERROR"] = "error";
  return OnboardingSessionState;
}({});
var TherapeuticApproach = exports.TherapeuticApproach = function (TherapeuticApproach) {
  TherapeuticApproach["CBT"] = "cbt";
  TherapeuticApproach["EXPOSURE_THERAPY"] = "exposure_therapy";
  TherapeuticApproach["MINDFULNESS"] = "mindfulness";
  TherapeuticApproach["BEHAVIORAL_ACTIVATION"] = "behavioral_activation";
  TherapeuticApproach["ACCEPTANCE_COMMITMENT"] = "acceptance_commitment";
  TherapeuticApproach["PEER_SUPPORT"] = "peer_support";
  TherapeuticApproach["FAMILY_INVOLVEMENT"] = "family_involvement";
  return TherapeuticApproach;
}({});
var SessionFrequency = exports.SessionFrequency = function (SessionFrequency) {
  SessionFrequency["DAILY"] = "daily";
  SessionFrequency["TWICE_WEEKLY"] = "twice_weekly";
  SessionFrequency["WEEKLY"] = "weekly";
  SessionFrequency["BIWEEKLY"] = "biweekly";
  SessionFrequency["AS_NEEDED"] = "as_needed";
  return SessionFrequency;
}({});
var AccessibilityNeed = exports.AccessibilityNeed = function (AccessibilityNeed) {
  AccessibilityNeed["LARGE_TEXT"] = "large_text";
  AccessibilityNeed["HIGH_CONTRAST"] = "high_contrast";
  AccessibilityNeed["SCREEN_READER"] = "screen_reader";
  AccessibilityNeed["VOICE_CONTROL"] = "voice_control";
  AccessibilityNeed["SIMPLIFIED_UI"] = "simplified_ui";
  AccessibilityNeed["EXTENDED_TIME"] = "extended_time";
  return AccessibilityNeed;
}({});
var InterventionType = exports.InterventionType = function (InterventionType) {
  InterventionType["COGNITIVE_RESTRUCTURING"] = "cognitive_restructuring";
  InterventionType["MINDFULNESS_TRAINING"] = "mindfulness_training";
  InterventionType["BEHAVIORAL_ACTIVATION"] = "behavioral_activation";
  InterventionType["PSYCHOEDUCATION"] = "psychoeducation";
  InterventionType["RELAPSE_PREVENTION"] = "relapse_prevention";
  InterventionType["FAMILY_EDUCATION"] = "family_education";
  return InterventionType;
}({});
var EvidenceLevel = exports.EvidenceLevel = function (EvidenceLevel) {
  EvidenceLevel["GRADE_A"] = "grade_a";
  EvidenceLevel["GRADE_B"] = "grade_b";
  EvidenceLevel["GRADE_C"] = "grade_c";
  EvidenceLevel["EXPERT_CONSENSUS"] = "expert_consensus";
  EvidenceLevel["EMERGING"] = "emerging";
  return EvidenceLevel;
}({});
var RiskLevel = exports.RiskLevel = function (RiskLevel) {
  RiskLevel["NONE"] = "none";
  RiskLevel["LOW"] = "low";
  RiskLevel["MEDIUM"] = "medium";
  RiskLevel["MODERATE"] = "moderate";
  RiskLevel["HIGH"] = "high";
  RiskLevel["VERY_HIGH"] = "very_high";
  RiskLevel["IMMINENT"] = "imminent";
  RiskLevel["CRITICAL"] = "critical";
  return RiskLevel;
}({});
var RiskCategory = exports.RiskCategory = function (RiskCategory) {
  RiskCategory["CLINICAL"] = "clinical";
  RiskCategory["PSYCHOSOCIAL"] = "psychosocial";
  RiskCategory["ENVIRONMENTAL"] = "environmental";
  RiskCategory["BEHAVIORAL"] = "behavioral";
  RiskCategory["COGNITIVE"] = "cognitive";
  return RiskCategory;
}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,