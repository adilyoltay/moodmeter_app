97090c3c9fe7e9f7514cf5d37a67de71
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.initializeSupabase = initializeSupabase;
exports.supabaseService = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _env2 = require("expo/virtual/env");
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _aiTelemetry = require("../features/ai/telemetry/aiTelemetry");
var _deadLetterQueue = _interopRequireDefault(require("./sync/deadLetterQueue"));
var _categoryMapping = require("../utils/categoryMapping");
var Linking = _interopRequireWildcard(require("expo-linking"));
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _expoAuthSession = require("expo-auth-session");
var _supabase = require("../lib/supabase");
var _privacy = require("../utils/privacy");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var SUPABASE_URL = _env2.env.EXPO_PUBLIC_SUPABASE_URL;
var SUPABASE_ANON_KEY = _env2.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('üö® CRITICAL: Supabase credentials missing from environment variables');
  console.error('Required: EXPO_PUBLIC_SUPABASE_URL, EXPO_PUBLIC_SUPABASE_ANON_KEY');
  if (!__DEV__) {
    throw new Error('SUPABASE_CREDENTIALS_MISSING: Application cannot start without proper credentials');
  }
  console.warn('‚ö†Ô∏è Development mode: Using demo credentials for testing');
}
var SupabaseNativeService = function () {
  function SupabaseNativeService() {
    (0, _classCallCheck2.default)(this, SupabaseNativeService);
    this.currentUser = null;
    this.userProfileCache = new Map();
    this.client = _supabase.supabase;
    console.log('‚úÖ Supabase Native Service initialized (shared client)');
  }
  return (0, _createClass2.default)(SupabaseNativeService, [{
    key: "initialize",
    value: function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        try {
          console.log('üîê Initializing Supabase auth...');
          console.log('üîê Attempting session refresh...');
          var _yield$this$client$au = yield this.client.auth.refreshSession(),
            session = _yield$this$client$au.data.session,
            error = _yield$this$client$au.error;
          if (error) {
            console.log('üîê Session refresh error (normal if no session):', error.message);
          }
          if (session != null && session.user) {
            var _session$user$app_met;
            this.currentUser = session.user;
            console.log('‚úÖ Refreshed session found:', {
              email: session.user.email,
              provider: (_session$user$app_met = session.user.app_metadata) == null ? void 0 : _session$user$app_met.provider,
              confirmed: !!session.user.email_confirmed_at
            });
            return session.user;
          } else {
            console.log('üîê No session from refresh, checking current session...');
          }
          console.log('üîê Getting current session...');
          var _yield$this$client$au2 = yield this.client.auth.getSession(),
            currentSession = _yield$this$client$au2.data.session,
            sessionError = _yield$this$client$au2.error;
          if (sessionError) {
            console.error('‚ùå Session error:', sessionError);
            return null;
          }
          if (currentSession != null && currentSession.user) {
            var _currentSession$user$;
            this.currentUser = currentSession.user;
            console.log('‚úÖ Existing session found:', {
              email: currentSession.user.email,
              provider: (_currentSession$user$ = currentSession.user.app_metadata) == null ? void 0 : _currentSession$user$.provider,
              confirmed: !!currentSession.user.email_confirmed_at
            });
            return currentSession.user;
          }
          console.log('‚ÑπÔ∏è No existing session');
          return null;
        } catch (error) {
          console.error('‚ùå Auth initialization failed:', error);
          return null;
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
  }, {
    key: "signUpWithEmail",
    value: function () {
      var _signUpWithEmail = (0, _asyncToGenerator2.default)(function* (email, password, name) {
        try {
          console.log('üìß Supabase native signup:', email);
          var _yield$this$client$au3 = yield this.client.auth.signUp({
              email: email,
              password: password,
              options: {
                data: {
                  name: name,
                  full_name: name,
                  provider: 'email'
                }
              }
            }),
            data = _yield$this$client$au3.data,
            error = _yield$this$client$au3.error;
          if (error) {
            console.error('‚ùå Signup error:', error);
            throw error;
          }
          if (data.user && !data.session) {
            console.log('üìß Email confirmation required for:', email);
            return {
              user: data.user,
              session: null,
              needsConfirmation: true
            };
          }
          if (data.user && data.session) {
            this.currentUser = data.user;
            console.log('‚úÖ Immediate signup success:', email);
            return {
              user: data.user,
              session: data.session,
              needsConfirmation: false
            };
          }
          throw new Error('Unexpected signup result');
        } catch (error) {
          console.error('‚ùå Supabase signup failed:', error);
          throw error;
        }
      });
      function signUpWithEmail(_x, _x2, _x3) {
        return _signUpWithEmail.apply(this, arguments);
      }
      return signUpWithEmail;
    }()
  }, {
    key: "signInWithEmail",
    value: function () {
      var _signInWithEmail = (0, _asyncToGenerator2.default)(function* (email, password) {
        try {
          console.log('üîê Supabase native login:', email);
          var _yield$this$client$au4 = yield this.client.auth.signInWithPassword({
              email: email,
              password: password
            }),
            data = _yield$this$client$au4.data,
            error = _yield$this$client$au4.error;
          if (error) {
            console.error('‚ùå Login error:', error);
            throw error;
          }
          if (data.user && data.session) {
            this.currentUser = data.user;
            console.log('‚úÖ Login successful:', email);
            return {
              user: data.user,
              session: data.session
            };
          }
          throw new Error('Login failed: No user or session');
        } catch (error) {
          console.error('‚ùå Supabase login failed:', error);
          throw error;
        }
      });
      function signInWithEmail(_x4, _x5) {
        return _signInWithEmail.apply(this, arguments);
      }
      return signInWithEmail;
    }()
  }, {
    key: "signInWithGoogle",
    value: function () {
      var _signInWithGoogle = (0, _asyncToGenerator2.default)(function* () {
        try {
          console.log('üîê Google OAuth initiation...');
          var isExpoGo = _expoConstants.default.appOwnership === 'expo';
          var redirectUrl = isExpoGo ? (0, _expoAuthSession.makeRedirectUri)({
            path: 'auth/callback'
          }) : Linking.createURL('auth/callback');
          console.log('üîê Redirect URL will be:', redirectUrl);
          var _yield$this$client$au5 = yield this.client.auth.signInWithOAuth({
              provider: 'google',
              options: {
                redirectTo: redirectUrl,
                queryParams: {
                  access_type: 'offline',
                  prompt: 'consent'
                },
                skipBrowserRedirect: true
              }
            }),
            data = _yield$this$client$au5.data,
            error = _yield$this$client$au5.error;
          if (error) {
            console.error('‚ùå Google OAuth error:', error);
            throw error;
          }
          console.log('üîê Google OAuth data received:', JSON.stringify(data, null, 2));
          if (data.url) {
            console.log('üîê OAuth URL ready for WebView:', data.url);
            return data;
          } else {
            console.error('‚ùå No OAuth URL received from Supabase');
            throw new Error('No OAuth URL received');
          }
        } catch (error) {
          console.error('‚ùå Google OAuth failed:', error);
          throw error;
        }
      });
      function signInWithGoogle() {
        return _signInWithGoogle.apply(this, arguments);
      }
      return signInWithGoogle;
    }()
  }, {
    key: "signOut",
    value: function () {
      var _signOut = (0, _asyncToGenerator2.default)(function* () {
        var _this = this;
        try {
          console.log('üîê Signing out...');
          var net = yield _netinfo.default.fetch();
          var isOnline = !!net.isConnected && net.isInternetReachable !== false;
          var tryGlobal = function () {
            var _ref = (0, _asyncToGenerator2.default)(function* () {
              var attempt = 0;
              var max = 3;
              while (attempt < max) {
                try {
                  attempt++;
                  if (attempt > 1) {
                    try {
                      yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
                        event: 'auth_signout_retry',
                        attempt: attempt
                      });
                    } catch (_unused) {}
                  }
                  var _yield$_this$client$a = yield _this.client.auth.signOut({
                      scope: 'global'
                    }),
                    error = _yield$_this$client$a.error;
                  if (error) throw error;
                  return true;
                } catch (e) {
                  if (attempt >= max) return false;
                  yield new Promise(function (r) {
                    return setTimeout(r, 300 * attempt);
                  });
                }
              }
              return false;
            });
            return function tryGlobal() {
              return _ref.apply(this, arguments);
            };
          }();
          var globalOk = false;
          if (isOnline) globalOk = yield tryGlobal();
          if (!globalOk) {
            try {
              yield this.client.auth.signOut({
                scope: 'local'
              });
            } catch (_unused2) {}
          }
          this.currentUser = null;
          console.log(`‚úÖ Sign out successful (${globalOk ? 'global' : 'local'})`);
        } catch (error) {
          console.error('‚ùå Sign out failed:', error);
          this.currentUser = null;
          try {
            yield this.client.auth.signOut({
              scope: 'local'
            });
          } catch (_unused3) {}
          throw error;
        }
      });
      function signOut() {
        return _signOut.apply(this, arguments);
      }
      return signOut;
    }()
  }, {
    key: "setSession",
    value: function () {
      var _setSession = (0, _asyncToGenerator2.default)(function* (tokens) {
        try {
          if (__DEV__) console.log('üîê Setting session with tokens (masked)...');
          var _yield$this$client$au6 = yield this.client.auth.setSession({
              access_token: tokens.access_token,
              refresh_token: tokens.refresh_token
            }),
            data = _yield$this$client$au6.data,
            error = _yield$this$client$au6.error;
          if (error) {
            console.error('‚ùå Set session error:', error);
            throw error;
          }
          if (data.user) {
            this.currentUser = data.user;
            console.log('‚úÖ Session set successfully, user:', data.user.email);
          }
        } catch (error) {
          console.error('‚ùå Set session failed:', error);
          throw error;
        }
      });
      function setSession(_x6) {
        return _setSession.apply(this, arguments);
      }
      return setSession;
    }()
  }, {
    key: "resendEmailConfirmation",
    value: function () {
      var _resendEmailConfirmation = (0, _asyncToGenerator2.default)(function* (email) {
        try {
          var _yield$this$client$au7 = yield this.client.auth.resend({
              type: 'signup',
              email: email
            }),
            error = _yield$this$client$au7.error;
          if (error) throw error;
          console.log('‚úÖ Email confirmation resent to:', email);
        } catch (error) {
          console.error('‚ùå Resend email confirmation failed:', error);
          throw error;
        }
      });
      function resendEmailConfirmation(_x7) {
        return _resendEmailConfirmation.apply(this, arguments);
      }
      return resendEmailConfirmation;
    }()
  }, {
    key: "onAuthStateChange",
    value: function onAuthStateChange(callback) {
      var _this2 = this;
      return this.client.auth.onAuthStateChange(function (event, session) {
        var _session$user, _session$user2, _session$user3, _session$user4;
        console.log('üîê Auth state changed:', event, 'User:', (session == null || (_session$user = session.user) == null ? void 0 : _session$user.email) || 'none');
        console.log('üîê Session details:', {
          hasSession: !!session,
          hasUser: !!(session != null && session.user),
          email: session == null || (_session$user2 = session.user) == null ? void 0 : _session$user2.email,
          provider: session == null || (_session$user3 = session.user) == null || (_session$user3 = _session$user3.app_metadata) == null ? void 0 : _session$user3.provider,
          confirmed: session == null || (_session$user4 = session.user) == null ? void 0 : _session$user4.email_confirmed_at,
          accessToken: session != null && session.access_token ? 'present' : 'missing'
        });
        _this2.currentUser = (session == null ? void 0 : session.user) || null;
        callback(event, session);
      });
    }
  }, {
    key: "getCurrentUser",
    value: function getCurrentUser() {
      return this.currentUser;
    }
  }, {
    key: "getUserProfile",
    value: function () {
      var _getUserProfile = (0, _asyncToGenerator2.default)(function* (userId, options) {
        try {
          var _options$cacheMs;
          var cacheMs = (_options$cacheMs = options == null ? void 0 : options.cacheMs) != null ? _options$cacheMs : 60000;
          var forceRefresh = (options == null ? void 0 : options.forceRefresh) === true;
          var cached = this.userProfileCache.get(userId);
          if (!forceRefresh && cached && Date.now() - cached.fetchedAt < cacheMs) {
            if (__DEV__) console.log('üóÑÔ∏è Using cached user profile for', userId);
            return cached.data;
          }
          console.log('üîç Fetching user profile from database...', userId);
          var _yield$this$client$fr = yield this.client.from('user_profiles').select('*').eq('user_id', userId).single(),
            data = _yield$this$client$fr.data,
            error = _yield$this$client$fr.error;
          if (error && error.code !== 'PGRST116') throw error;
          console.log('‚úÖ User profile fetched from database');
          this.userProfileCache.set(userId, {
            data: data != null ? data : null,
            fetchedAt: Date.now()
          });
          return data != null ? data : null;
        } catch (error) {
          console.error('‚ùå Get user profile failed:', error);
          if (__DEV__) {
            console.log('üîß DEV: Returning fallback profile to continue app functionality');
            return {
              id: userId,
              user_id: userId,
              ocd_symptoms: ['contamination', 'checking'],
              daily_goal: 3,
              ybocs_score: 12,
              ybocs_severity: 'mild',
              onboarding_completed: true,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            };
          }
          return null;
        }
      });
      function getUserProfile(_x8, _x9) {
        return _getUserProfile.apply(this, arguments);
      }
      return getUserProfile;
    }()
  }, {
    key: "createUserProfile",
    value: function () {
      var _createUserProfile = (0, _asyncToGenerator2.default)(function* (userId, email, name, provider) {
        try {
          var _yield$this$client$fr2 = yield this.client.from('users').insert({
              id: userId,
              email: email,
              name: name,
              provider: provider,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }).select().single(),
            data = _yield$this$client$fr2.data,
            error = _yield$this$client$fr2.error;
          if (error) throw error;
          console.log('‚úÖ User profile created:', email);
          return data;
        } catch (error) {
          console.error('‚ùå Create user profile failed:', error);
          throw error;
        }
      });
      function createUserProfile(_x0, _x1, _x10, _x11) {
        return _createUserProfile.apply(this, arguments);
      }
      return createUserProfile;
    }()
  }, {
    key: "saveUserProfile",
    value: function () {
      var _saveUserProfile = (0, _asyncToGenerator2.default)(function* (profile) {
        try {
          console.log('üîÑ Saving user profile to database...', profile);
          yield this.ensureUserProfileExists(profile.user_id);
          var _yield$this$client$fr3 = yield this.client.from('user_profiles').upsert(Object.assign({}, profile, {
              updated_at: new Date().toISOString()
            })).select().single(),
            data = _yield$this$client$fr3.data,
            error = _yield$this$client$fr3.error;
          if (error) throw error;
          console.log('‚úÖ User profile saved to database:', data.user_id);
          return data;
        } catch (error) {
          console.error('‚ùå Save user profile failed:', error);
          throw error;
        }
      });
      function saveUserProfile(_x12) {
        return _saveUserProfile.apply(this, arguments);
      }
      return saveUserProfile;
    }()
  }, {
    key: "upsertAIProfile",
    value: function () {
      var _upsertAIProfile = (0, _asyncToGenerator2.default)(function* (userId, profileData) {
        var onboardingCompleted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        try {
          yield this.ensureUserProfileExists(userId);
          var payload = {
            user_id: userId,
            profile_data: profileData,
            onboarding_completed: onboardingCompleted,
            updated_at: new Date().toISOString()
          };
          if (onboardingCompleted) {
            payload.completed_at = new Date().toISOString();
          }
          var _yield$this$client$fr4 = yield this.client.from('ai_profiles').upsert(payload, {
              onConflict: 'user_id'
            }),
            error = _yield$this$client$fr4.error;
          if (error) throw error;
          console.log('‚úÖ AI profile upserted:', userId);
        } catch (error) {
          console.error('‚ùå upsertAIProfile failed:', error);
          throw error;
        }
      });
      function upsertAIProfile(_x13, _x14) {
        return _upsertAIProfile.apply(this, arguments);
      }
      return upsertAIProfile;
    }()
  }, {
    key: "upsertAITreatmentPlan",
    value: (function () {
      var _upsertAITreatmentPlan = (0, _asyncToGenerator2.default)(function* (userId, planData) {
        var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'active';
        try {
          yield this.ensureUserProfileExists(userId);
          var payload = {
            user_id: userId,
            plan_data: planData,
            status: status,
            updated_at: new Date().toISOString()
          };
          var _yield$this$client$fr5 = yield this.client.from('ai_treatment_plans').upsert(payload, {
              onConflict: 'user_id'
            }),
            error = _yield$this$client$fr5.error;
          if (error) throw error;
          console.log('‚úÖ AI treatment plan upserted:', userId);
        } catch (error) {
          console.error('‚ùå upsertAITreatmentPlan failed:', error);
          throw error;
        }
      });
      function upsertAITreatmentPlan(_x15, _x16) {
        return _upsertAITreatmentPlan.apply(this, arguments);
      }
      return upsertAITreatmentPlan;
    }())
  }, {
    key: "mapCategoryForDatabase",
    value: function mapCategoryForDatabase(category) {
      return (0, _categoryMapping.mapToDatabaseCategory)(category);
    }
  }, {
    key: "saveCompulsion",
    value: function () {
      var _saveCompulsion = (0, _asyncToGenerator2.default)(function* (compulsion) {
        try {
          var _sanitizedCompulsion$;
          console.log('üîÑ Saving compulsion to database...', compulsion);
          yield this.ensureUserProfileExists(compulsion.user_id);
          var sanitizedCompulsion = Object.assign({}, compulsion, {
            notes: (0, _privacy.sanitizePII)(compulsion.notes || ''),
            trigger: (0, _privacy.sanitizePII)(compulsion.trigger || '')
          });
          var mappedCompulsion = Object.assign({}, sanitizedCompulsion, {
            subcategory: (_sanitizedCompulsion$ = sanitizedCompulsion.subcategory) != null ? _sanitizedCompulsion$ : sanitizedCompulsion.category,
            category: this.mapCategoryForDatabase(sanitizedCompulsion.category),
            timestamp: new Date().toISOString()
          });
          var standardized = require("../utils/dataStandardization").dataStandardizer.standardizeCompulsionData(mappedCompulsion);
          var _yield$this$client$fr6 = yield this.client.from('compulsions').upsert(standardized, {
              onConflict: 'id'
            }).select().single(),
            data = _yield$this$client$fr6.data,
            error = _yield$this$client$fr6.error;
          if (error) throw error;
          console.log('‚úÖ Compulsion saved to database:', data.id);
          return data;
        } catch (error) {
          console.error('‚ùå Save compulsion failed:', error);
          throw error;
        }
      });
      function saveCompulsion(_x17) {
        return _saveCompulsion.apply(this, arguments);
      }
      return saveCompulsion;
    }()
  }, {
    key: "getCompulsions",
    value: function () {
      var _getCompulsions = (0, _asyncToGenerator2.default)(function* (userId, startDate, endDate) {
        try {
          console.log('üîç Fetching compulsions from database...', {
            userId: userId,
            startDate: startDate,
            endDate: endDate
          });
          var query = this.client.from('compulsions').select('*').eq('user_id', userId).order('timestamp', {
            ascending: false
          });
          if (startDate) query = query.gte('timestamp', startDate);
          if (endDate) query = query.lte('timestamp', endDate);
          var _yield$query = yield query,
            data = _yield$query.data,
            error = _yield$query.error;
          if (error) throw error;
          var compulsions = (data || []).map(function (record) {
            return Object.assign({}, record, {
              category: record.subcategory || record.category
            });
          });
          console.log(`‚úÖ Fetched ${compulsions.length} compulsions from database`);
          return compulsions;
        } catch (error) {
          console.error('‚ùå Get compulsions failed:', error);
          return [];
        }
      });
      function getCompulsions(_x18, _x19, _x20) {
        return _getCompulsions.apply(this, arguments);
      }
      return getCompulsions;
    }()
  }, {
    key: "deleteCompulsion",
    value: function () {
      var _deleteCompulsion = (0, _asyncToGenerator2.default)(function* (id) {
        try {
          console.log('üóëÔ∏è Deleting compulsion from database...', id);
          var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
          if (!uuidRegex.test(id)) {
            console.log('‚ö†Ô∏è Skipping database delete - ID is not a valid UUID (likely a local-only record):', id);
            return;
          }
          var _yield$this$client$fr7 = yield this.client.from('compulsions').delete().eq('id', id),
            error = _yield$this$client$fr7.error;
          if (error) throw error;
          console.log('‚úÖ Compulsion deleted from database:', id);
        } catch (error) {
          console.error('‚ùå Delete compulsion failed:', error);
          throw error;
        }
      });
      function deleteCompulsion(_x21) {
        return _deleteCompulsion.apply(this, arguments);
      }
      return deleteCompulsion;
    }()
  }, {
    key: "createGamificationProfile",
    value: function () {
      var _createGamificationProfile = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          yield this.ensureUserProfileExists(userId);
          var _yield$this$client$fr8 = yield this.client.from('gamification_profiles').upsert({
              user_id: userId,
              streak_count: 0,
              healing_points_total: 0,
              healing_points_today: 0,
              streak_last_update: new Date().toISOString().split('T')[0],
              level: 1,
              achievements: [],
              micro_rewards: []
            }, {
              onConflict: 'user_id'
            }).select().single(),
            data = _yield$this$client$fr8.data,
            error = _yield$this$client$fr8.error;
          if (error) throw error;
          console.log('‚úÖ Gamification profile created/updated:', userId);
          return data;
        } catch (error) {
          console.error('‚ùå Create gamification profile failed:', error);
          return null;
        }
      });
      function createGamificationProfile(_x22) {
        return _createGamificationProfile.apply(this, arguments);
      }
      return createGamificationProfile;
    }()
  }, {
    key: "ensureUserProfileExists",
    value: function () {
      var _ensureUserProfileExists = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          var _yield$this$client$fr9 = yield this.client.from('users').select('id').eq('id', userId).single(),
            existingUser = _yield$this$client$fr9.data;
          if (!existingUser) {
            var _yield$this$client$au8 = yield this.client.auth.getUser(),
              authUser = _yield$this$client$au8.data;
            if (authUser.user && authUser.user.id === userId) {
              var _authUser$user$user_m, _authUser$user$email, _authUser$user$app_me;
              var _yield$this$client$fr0 = yield this.client.from('users').upsert({
                  id: userId,
                  email: authUser.user.email || '',
                  name: ((_authUser$user$user_m = authUser.user.user_metadata) == null ? void 0 : _authUser$user$user_m.name) || ((_authUser$user$email = authUser.user.email) == null ? void 0 : _authUser$user$email.split('@')[0]) || 'User',
                  provider: ((_authUser$user$app_me = authUser.user.app_metadata) == null ? void 0 : _authUser$user$app_me.provider) || 'email',
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString()
                }, {
                  onConflict: 'id'
                }),
                error = _yield$this$client$fr0.error;
              if (error) throw error;
              console.log('‚úÖ User profile upserted in public.users:', userId);
            }
          }
        } catch (error) {
          console.error('‚ùå Ensure user profile failed:', error);
          throw error;
        }
      });
      function ensureUserProfileExists(_x23) {
        return _ensureUserProfileExists.apply(this, arguments);
      }
      return ensureUserProfileExists;
    }()
  }, {
    key: "updateGamificationProfile",
    value: function () {
      var _updateGamificationProfile = (0, _asyncToGenerator2.default)(function* (userId, updates) {
        try {
          console.log('üîÑ Updating gamification profile...', {
            userId: userId,
            updates: updates
          });
          var _yield$this$client$fr1 = yield this.client.from('gamification_profiles').update(Object.assign({}, updates, {
              updated_at: new Date().toISOString()
            })).eq('user_id', userId),
            error = _yield$this$client$fr1.error;
          if (error) throw error;
          console.log('‚úÖ Gamification profile updated:', userId);
        } catch (error) {
          console.error('‚ùå Update gamification profile failed:', error);
          try {
            yield _deadLetterQueue.default.addToDeadLetter({
              id: `gpf_${Date.now()}`,
              type: 'update',
              entity: 'gamification_profiles',
              data: {
                user_id: userId,
                updates: updates
              },
              errorMessage: 'update_gamification_profile_failed'
            }, error);
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.STORAGE_RETRY_SUCCESS, {
              key: 'gamification_profile_dead_letter',
              attempts: 0
            });
          } catch (_unused4) {}
        }
      });
      function updateGamificationProfile(_x24, _x25) {
        return _updateGamificationProfile.apply(this, arguments);
      }
      return updateGamificationProfile;
    }()
  }, {
    key: "createCompulsion",
    value: function () {
      var _createCompulsion = (0, _asyncToGenerator2.default)(function* (compulsion) {
        try {
          console.log('üìù Creating compulsion:', compulsion);
          var saved = yield this.saveCompulsion(compulsion);
          console.log('‚úÖ Compulsion created via saveCompulsion:', saved == null ? void 0 : saved.id);
          return saved;
        } catch (error) {
          console.error('‚ùå Failed to create compulsion:', error);
          return null;
        }
      });
      function createCompulsion(_x26) {
        return _createCompulsion.apply(this, arguments);
      }
      return createCompulsion;
    }()
  }, {
    key: "getUserCompulsions",
    value: function () {
      var _getUserCompulsions = (0, _asyncToGenerator2.default)(function* (userId) {
        var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
        try {
          var _yield$this$client$fr10 = yield this.client.from('compulsions').select('*').eq('user_id', userId).order('timestamp', {
              ascending: false
            }).limit(limit),
            data = _yield$this$client$fr10.data,
            error = _yield$this$client$fr10.error;
          if (error) {
            console.error('‚ùå Error fetching compulsions:', error);
            return [];
          }
          return data || [];
        } catch (error) {
          console.error('‚ùå Failed to fetch compulsions:', error);
          return [];
        }
      });
      function getUserCompulsions(_x27) {
        return _getUserCompulsions.apply(this, arguments);
      }
      return getUserCompulsions;
    }()
  }, {
    key: "computeContentHash",
    value: function computeContentHash(text) {
      var normalized = text.trim().replace(/\s+/g, ' ').toLowerCase();
      var hash = 0;
      for (var i = 0; i < normalized.length; i++) {
        var char = normalized.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return Math.abs(hash).toString(16);
    }
  }, {
    key: "saveVoiceCheckin",
    value: function () {
      var _saveVoiceCheckin = (0, _asyncToGenerator2.default)(function* (record) {
        try {
          var _error$message;
          yield this.ensureUserProfileExists(record.user_id);
          var sanitizedRecord = Object.assign({}, record, {
            text: (0, _privacy.sanitizePII)(record.text || ''),
            trigger: (0, _privacy.sanitizePII)(record.trigger || '')
          });
          var contentHash = this.computeContentHash(sanitizedRecord.text);
          var payload = {
            user_id: sanitizedRecord.user_id,
            text: sanitizedRecord.text,
            mood: sanitizedRecord.mood,
            trigger: sanitizedRecord.trigger,
            confidence: sanitizedRecord.confidence,
            lang: sanitizedRecord.lang,
            content_hash: contentHash,
            created_at: sanitizedRecord.created_at || new Date().toISOString()
          };
          var _yield$this$client$fr11 = yield this.client.from('voice_checkins').upsert(payload, {
              onConflict: 'user_id,content_hash',
              ignoreDuplicates: true
            }),
            error = _yield$this$client$fr11.error;
          if (error && !((_error$message = error.message) != null && _error$message.includes('duplicate'))) {
            console.warn('‚ö†Ô∏è saveVoiceCheckin error:', error);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è saveVoiceCheckin skipped:', error == null ? void 0 : error.message);
        }
      });
      function saveVoiceCheckin(_x28) {
        return _saveVoiceCheckin.apply(this, arguments);
      }
      return saveVoiceCheckin;
    }()
  }, {
    key: "saveThoughtRecord",
    value: function () {
      var _saveThoughtRecord = (0, _asyncToGenerator2.default)(function* (record) {
        try {
          var _error$message2;
          yield this.ensureUserProfileExists(record.user_id);
          var sanitizedRecord = Object.assign({}, record, {
            automatic_thought: (0, _privacy.sanitizePII)(record.automatic_thought || ''),
            evidence_for: (0, _privacy.sanitizePII)(record.evidence_for || ''),
            evidence_against: (0, _privacy.sanitizePII)(record.evidence_against || ''),
            new_view: (0, _privacy.sanitizePII)(record.new_view || '')
          });
          var contentHash = this.computeContentHash(sanitizedRecord.automatic_thought);
          var payload = {
            user_id: sanitizedRecord.user_id,
            automatic_thought: sanitizedRecord.automatic_thought,
            evidence_for: sanitizedRecord.evidence_for,
            evidence_against: sanitizedRecord.evidence_against,
            distortions: sanitizedRecord.distortions,
            new_view: sanitizedRecord.new_view,
            lang: sanitizedRecord.lang,
            content_hash: contentHash,
            created_at: sanitizedRecord.created_at || new Date().toISOString()
          };
          var _yield$this$client$fr12 = yield this.client.from('thought_records').upsert(payload, {
              onConflict: 'user_id,content_hash',
              ignoreDuplicates: true
            }),
            error = _yield$this$client$fr12.error;
          if (error && !((_error$message2 = error.message) != null && _error$message2.includes('duplicate'))) {
            console.warn('‚ö†Ô∏è saveThoughtRecord error:', error);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è saveThoughtRecord skipped (table may not exist):', error == null ? void 0 : error.message);
        }
      });
      function saveThoughtRecord(_x29) {
        return _saveThoughtRecord.apply(this, arguments);
      }
      return saveThoughtRecord;
    }()
  }, {
    key: "saveCBTRecord",
    value: function () {
      var _saveCBTRecord = (0, _asyncToGenerator2.default)(function* (record) {
        try {
          yield this.ensureUserProfileExists(record.user_id);
          var sanitizedRecord = Object.assign({}, record, {
            thought: (0, _privacy.sanitizePII)(record.thought || ''),
            evidence_for: (0, _privacy.sanitizePII)(record.evidence_for || ''),
            evidence_against: (0, _privacy.sanitizePII)(record.evidence_against || ''),
            reframe: (0, _privacy.sanitizePII)(record.reframe || ''),
            trigger: (0, _privacy.sanitizePII)(record.trigger || ''),
            notes: (0, _privacy.sanitizePII)(record.notes || '')
          });
          var contentHash = sanitizedRecord.content_hash || `cbt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          var _yield$this$client$fr13 = yield this.client.from('thought_records').insert({
              user_id: sanitizedRecord.user_id,
              thought: sanitizedRecord.thought,
              distortions: sanitizedRecord.distortions || [],
              evidence_for: sanitizedRecord.evidence_for || null,
              evidence_against: sanitizedRecord.evidence_against || null,
              reframe: sanitizedRecord.reframe,
              mood_before: sanitizedRecord.mood_before,
              mood_after: sanitizedRecord.mood_after,
              trigger: sanitizedRecord.trigger || null,
              notes: sanitizedRecord.notes || null,
              content_hash: contentHash,
              created_at: new Date().toISOString()
            }).select('id').single(),
            data = _yield$this$client$fr13.data,
            error = _yield$this$client$fr13.error;
          if (error) throw error;
          console.log('‚úÖ CBT record saved:', data.id);
          return data;
        } catch (error) {
          console.error('‚ùå Failed to save CBT record:', error);
          yield _deadLetterQueue.default.addToDeadLetter({
            id: `cbt_${Date.now()}`,
            type: 'create',
            entity: 'thought_records',
            data: record,
            errorMessage: 'save_cbt_record_failed'
          }, error);
          return null;
        }
      });
      function saveCBTRecord(_x30) {
        return _saveCBTRecord.apply(this, arguments);
      }
      return saveCBTRecord;
    }()
  }, {
    key: "getCBTRecords",
    value: function () {
      var _getCBTRecords = (0, _asyncToGenerator2.default)(function* (userId, dateRange) {
        try {
          var query = this.client.from('thought_records').select('*').eq('user_id', userId).order('created_at', {
            ascending: false
          });
          if (dateRange) {
            query = query.gte('created_at', dateRange.start.toISOString()).lte('created_at', dateRange.end.toISOString());
          }
          var _yield$query$limit = yield query.limit(100),
            data = _yield$query$limit.data,
            error = _yield$query$limit.error;
          if (error) throw error;
          return data || [];
        } catch (error) {
          console.error('‚ùå Failed to fetch CBT records:', error);
          return [];
        }
      });
      function getCBTRecords(_x31, _x32) {
        return _getCBTRecords.apply(this, arguments);
      }
      return getCBTRecords;
    }()
  }, {
    key: "deleteCBTRecord",
    value: function () {
      var _deleteCBTRecord = (0, _asyncToGenerator2.default)(function* (recordId) {
        try {
          var _yield$this$client$fr14 = yield this.client.from('thought_records').delete().eq('id', recordId),
            error = _yield$this$client$fr14.error;
          if (error) throw error;
          console.log('‚úÖ CBT record deleted:', recordId);
        } catch (error) {
          console.error('‚ùå Failed to delete CBT record:', error);
          yield _deadLetterQueue.default.addToDeadLetter({
            id: `cbt_del_${Date.now()}`,
            type: 'delete',
            entity: 'thought_records',
            data: {
              id: recordId
            },
            errorMessage: 'delete_cbt_record_failed'
          }, error);
        }
      });
      function deleteCBTRecord(_x33) {
        return _deleteCBTRecord.apply(this, arguments);
      }
      return deleteCBTRecord;
    }()
  }, {
    key: "saveVoiceSessionSummary",
    value: function () {
      var _saveVoiceSessionSummary = (0, _asyncToGenerator2.default)(function* (session) {
        try {
          yield this.ensureUserProfileExists(session.user_id);
          var payload = {
            user_id: session.user_id,
            started_at: session.started_at,
            ended_at: session.ended_at,
            duration_ms: session.duration_ms,
            transcription_count: session.transcription_count,
            error_count: session.error_count,
            created_at: session.created_at || new Date().toISOString()
          };
          yield this.client.from('voice_sessions').upsert(payload, {
            onConflict: 'user_id,started_at'
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è saveVoiceSessionSummary skipped (table may not exist):', error == null ? void 0 : error.message);
        }
      });
      function saveVoiceSessionSummary(_x34) {
        return _saveVoiceSessionSummary.apply(this, arguments);
      }
      return saveVoiceSessionSummary;
    }()
  }, {
    key: "saveBreathSession",
    value: function () {
      var _saveBreathSession = (0, _asyncToGenerator2.default)(function* (session) {
        try {
          var _yield$this$client$fr15 = yield this.client.from('breath_sessions').upsert(session, {
              onConflict: 'id'
            }),
            data = _yield$this$client$fr15.data,
            error = _yield$this$client$fr15.error;
          if (error) throw error;
        } catch (error) {
          console.warn('‚ö†Ô∏è saveBreathSession skipped (table may not exist):', error == null ? void 0 : error.message);
        }
      });
      function saveBreathSession(_x35) {
        return _saveBreathSession.apply(this, arguments);
      }
      return saveBreathSession;
    }()
  }, {
    key: "saveMoodEntry",
    value: function () {
      var _saveMoodEntry = (0, _asyncToGenerator2.default)(function* (entry) {
        try {
          console.log('üîÑ Saving mood entry...', entry);
          yield this.ensureUserProfileExists(entry.user_id);
          var sanitizedEntry = Object.assign({}, entry, {
            notes: (0, _privacy.sanitizePII)(entry.notes || ''),
            trigger: (0, _privacy.sanitizePII)(entry.trigger || '')
          });
          var contentText = `${sanitizedEntry.user_id}|${Math.round(sanitizedEntry.mood_score)}|${Math.round(sanitizedEntry.energy_level)}|${Math.round(sanitizedEntry.anxiety_level)}|${sanitizedEntry.notes.trim().toLowerCase()}|${sanitizedEntry.trigger.trim().toLowerCase()}|${new Date().toISOString().slice(0, 10)}`;
          var content_hash = this.computeContentHash(contentText);
          var payload = Object.assign({}, sanitizedEntry, {
            content_hash: content_hash,
            created_at: new Date().toISOString()
          });
          var _yield$this$client$fr16 = yield this.client.from('mood_entries').upsert(payload, {
              onConflict: 'user_id,content_hash',
              ignoreDuplicates: true
            }).select().single(),
            data = _yield$this$client$fr16.data,
            error = _yield$this$client$fr16.error;
          if (error) {
            var _error$message3;
            if (error.code === '23505' || (_error$message3 = error.message) != null && _error$message3.includes('duplicate')) {
              console.log('‚ÑπÔ∏è Mood entry already exists (duplicate prevented)');
              return null;
            }
            throw error;
          }
          console.log('‚úÖ Mood entry saved:', (data == null ? void 0 : data.id) || 'duplicate_prevented');
          return data;
        } catch (error) {
          console.error('‚ùå Save mood entry failed:', error);
          throw error;
        }
      });
      function saveMoodEntry(_x36) {
        return _saveMoodEntry.apply(this, arguments);
      }
      return saveMoodEntry;
    }()
  }, {
    key: "getMoodEntries",
    value: function () {
      var _getMoodEntries = (0, _asyncToGenerator2.default)(function* (userId) {
        var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7;
        try {
          console.log('üîç Fetching mood entries...', {
            userId: userId,
            days: days
          });
          var startDate = new Date();
          startDate.setDate(startDate.getDate() - days);
          var _yield$this$client$fr17 = yield this.client.from('mood_entries').select('*').eq('user_id', userId).gte('created_at', startDate.toISOString()).order('created_at', {
              ascending: false
            }),
            data = _yield$this$client$fr17.data,
            error = _yield$this$client$fr17.error;
          if (error) throw error;
          console.log(`‚úÖ Fetched ${(data == null ? void 0 : data.length) || 0} mood entries`);
          return data || [];
        } catch (error) {
          console.error('‚ùå Get mood entries failed:', error);
          if (error && typeof error === 'object') {
            var supabaseError = error;
            if (supabaseError.code) {
              console.error('üîç Supabase Error Details:', {
                code: supabaseError.code,
                message: supabaseError.message,
                details: supabaseError.details,
                hint: supabaseError.hint
              });
            }
          }
          return [];
        }
      });
      function getMoodEntries(_x37) {
        return _getMoodEntries.apply(this, arguments);
      }
      return getMoodEntries;
    }()
  }, {
    key: "updateMoodEntry",
    value: function () {
      var _updateMoodEntry = (0, _asyncToGenerator2.default)(function* (entryId, updates) {
        try {
          var _yield$this$client$fr18 = yield this.client.from('mood_entries').update(updates).eq('id', entryId).select().single(),
            data = _yield$this$client$fr18.data,
            error = _yield$this$client$fr18.error;
          if (error) throw error;
          return data;
        } catch (error) {
          console.error('‚ùå Update mood entry failed:', error);
          throw error;
        }
      });
      function updateMoodEntry(_x38, _x39) {
        return _updateMoodEntry.apply(this, arguments);
      }
      return updateMoodEntry;
    }()
  }, {
    key: "deleteMoodEntry",
    value: function () {
      var _deleteMoodEntry = (0, _asyncToGenerator2.default)(function* (entryId) {
        try {
          console.log('üóëÔ∏è Attempting to delete mood entry:', entryId);
          var isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(entryId);
          if (!isUUID) {
            console.warn('‚ö†Ô∏è Invalid UUID format detected:', entryId);
            console.log('üí° This appears to be a client-generated ID (mood_timestamp_random)');
            console.log('üîÑ Skipping server delete - entry was likely never synced or already deleted');
            return;
          }
          var _yield$this$client$fr19 = yield this.client.from('mood_entries').delete().eq('id', entryId),
            error = _yield$this$client$fr19.error;
          if (error) throw error;
          console.log('‚úÖ Mood entry deleted successfully from server:', entryId);
        } catch (error) {
          console.error('‚ùå Delete mood entry failed:', error);
          throw error;
        }
      });
      function deleteMoodEntry(_x40) {
        return _deleteMoodEntry.apply(this, arguments);
      }
      return deleteMoodEntry;
    }()
  }, {
    key: "deleteVoiceCheckin",
    value: function () {
      var _deleteVoiceCheckin = (0, _asyncToGenerator2.default)(function* (checkinId) {
        try {
          console.log('üóëÔ∏è Attempting to delete voice checkin:', checkinId);
          var isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(checkinId);
          if (!isUUID) {
            console.warn('‚ö†Ô∏è Invalid UUID format detected for voice checkin:', checkinId);
            console.log('üîÑ Skipping server delete - entry may not exist on server');
            return;
          }
          var _yield$this$client$fr20 = yield this.client.from('voice_checkins').delete().eq('id', checkinId),
            error = _yield$this$client$fr20.error;
          if (error) throw error;
          console.log('‚úÖ Voice checkin deleted successfully from server:', checkinId);
        } catch (error) {
          console.error('‚ùå Failed to delete voice checkin:', error);
          throw error;
        }
      });
      function deleteVoiceCheckin(_x41) {
        return _deleteVoiceCheckin.apply(this, arguments);
      }
      return deleteVoiceCheckin;
    }()
  }, {
    key: "deleteThoughtRecord",
    value: function () {
      var _deleteThoughtRecord = (0, _asyncToGenerator2.default)(function* (recordId) {
        try {
          console.log('üóëÔ∏è Attempting to delete thought record:', recordId);
          var isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(recordId);
          if (!isUUID) {
            console.warn('‚ö†Ô∏è Invalid UUID format detected for thought record:', recordId);
            console.log('üîÑ Skipping server delete - entry may not exist on server');
            return;
          }
          var _yield$this$client$fr21 = yield this.client.from('thought_records').delete().eq('id', recordId),
            error = _yield$this$client$fr21.error;
          if (error) throw error;
          console.log('‚úÖ Thought record deleted successfully from server:', recordId);
        } catch (error) {
          console.error('‚ùå Failed to delete thought record:', error);
          throw error;
        }
      });
      function deleteThoughtRecord(_x42) {
        return _deleteThoughtRecord.apply(this, arguments);
      }
      return deleteThoughtRecord;
    }()
  }, {
    key: "supabaseClient",
    get: function get() {
      return this.client;
    }
  }]);
}();
function initializeSupabase() {
  return _initializeSupabase.apply(this, arguments);
}
function _initializeSupabase() {
  _initializeSupabase = (0, _asyncToGenerator2.default)(function* () {
    return yield supabaseService.initialize();
  });
  return _initializeSupabase.apply(this, arguments);
}
var supabaseService = exports.supabaseService = new SupabaseNativeService();
var _default = exports.default = supabaseService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,