a7e50af63f79856eb2ff3a03ce269fe2
_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../features/ai/hooks/useAdaptiveSuggestion");
_getJestObj().mock("../../components/ui/QualityRibbon", function () {
  return {
    QualityRibbon: function QualityRibbon(_ref) {
      var qualityMeta = _ref.qualityMeta;
      var React = require('react');
      var _require = require('react-native'),
        View = _require.View,
        Text = _require.Text;
      if (!qualityMeta) return null;
      return React.createElement(View, {
        testID: 'quality-ribbon'
      }, qualityMeta.source && React.createElement(Text, {
        testID: 'source-badge'
      }, qualityMeta.source === 'unified' ? 'Fresh' : qualityMeta.source === 'cache' ? 'Cache' : 'Heuristic'), qualityMeta.qualityLevel && React.createElement(Text, {
        testID: 'quality-badge'
      }, qualityMeta.qualityLevel === 'high' ? 'High' : qualityMeta.qualityLevel === 'medium' ? 'Med' : 'Low'), qualityMeta.sampleSize !== undefined && React.createElement(Text, {
        testID: 'sample-badge'
      }, `n=${qualityMeta.sampleSize}`), qualityMeta.freshnessMs !== undefined && React.createElement(Text, {
        testID: 'age-badge'
      }, qualityMeta.freshnessMs < 60000 ? `${Math.round(qualityMeta.freshnessMs / 1000)}s` : qualityMeta.freshnessMs < 3600000 ? `${Math.round(qualityMeta.freshnessMs / 60000)}m` : `${Math.round(qualityMeta.freshnessMs / 3600000)}h`));
    }
  };
});
_getJestObj().mock("../../components/ui/AdaptiveSuggestionCard", function () {
  return {
    AdaptiveSuggestionCard: function AdaptiveSuggestionCard(_ref2) {
      var suggestion = _ref2.suggestion,
        qualityMeta = _ref2.qualityMeta,
        onAction = _ref2.onAction,
        onDismiss = _ref2.onDismiss;
      var React = require('react');
      var _require2 = require('react-native'),
        View = _require2.View,
        Text = _require2.Text,
        TouchableOpacity = _require2.TouchableOpacity;
      var _require3 = require("../../components/ui/QualityRibbon"),
        QualityRibbon = _require3.QualityRibbon;
      return React.createElement(View, {
        testID: 'adaptive-suggestion-card'
      }, qualityMeta && React.createElement(QualityRibbon, {
        qualityMeta: qualityMeta
      }), suggestion && React.createElement(View, null, React.createElement(Text, {
        testID: 'suggestion-title'
      }, suggestion.title), React.createElement(Text, {
        testID: 'suggestion-content'
      }, suggestion.content), React.createElement(TouchableOpacity, {
        testID: 'suggestion-action',
        onPress: onAction
      }, React.createElement(Text, null, 'Accept')), React.createElement(TouchableOpacity, {
        testID: 'suggestion-dismiss',
        onPress: onDismiss
      }, React.createElement(Text, null, 'Dismiss'))));
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _reactQuery = require("@tanstack/react-query");
var _AdaptiveSuggestionCard = require("../../components/ui/AdaptiveSuggestionCard");
var _QualityRibbon = require("../../components/ui/QualityRibbon");
var _useAdaptiveSuggestion = require("../../features/ai/hooks/useAdaptiveSuggestion");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockUseAdaptiveSuggestion = _useAdaptiveSuggestion.useAdaptiveSuggestion;
var TestWrapper = function TestWrapper(_ref3) {
  var children = _ref3.children;
  var queryClient = new _reactQuery.QueryClient({
    defaultOptions: {
      queries: {
        retry: false
      },
      mutations: {
        retry: false
      }
    }
  });
  return (0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
    client: queryClient,
    children: children
  });
};
var QualityRibbonTestComponent = function QualityRibbonTestComponent(_ref4) {
  var qualityMeta = _ref4.qualityMeta,
    suggestion = _ref4.suggestion;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "quality-ribbon-test",
    children: [suggestion && (0, _jsxRuntime.jsx)(_AdaptiveSuggestionCard.AdaptiveSuggestionCard, {
      suggestion: suggestion,
      onAction: function onAction() {},
      onDismiss: function onDismiss() {},
      qualityMeta: qualityMeta
    }), qualityMeta && (0, _jsxRuntime.jsx)(_QualityRibbon.QualityRibbon, {
      qualityMeta: qualityMeta
    })]
  });
};
var TodayScreen = function TodayScreen() {
  var _React$useState = _react.default.useState({
      source: 'unified',
      qualityLevel: 'high',
      sampleSize: 15,
      freshnessMs: 0
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    qualityMeta = _React$useState2[0],
    setQualityMeta = _React$useState2[1];
  var suggestion = {
    show: true,
    title: 'Test Suggestion',
    content: 'This is a test suggestion with high quality',
    category: 'mood',
    confidence: 0.85,
    cta: {
      screen: '/(tabs)/breathwork',
      params: {}
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative2.View, {
    testID: "today-screen",
    children: (0, _jsxRuntime.jsx)(_AdaptiveSuggestionCard.AdaptiveSuggestionCard, {
      suggestion: suggestion,
      qualityMeta: qualityMeta,
      onAction: function onAction() {
        return console.log('Action');
      },
      onDismiss: function onDismiss() {
        return console.log('Dismiss');
      }
    })
  });
};
var MoodScreen = function MoodScreen() {
  var _React$useState3 = _react.default.useState({
      source: 'cache',
      qualityLevel: 'medium',
      sampleSize: 7,
      freshnessMs: 600000
    }),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    qualityMeta = _React$useState4[0],
    setQualityMeta = _React$useState4[1];
  var suggestion = {
    show: true,
    title: 'Mood Insight',
    content: 'Based on your mood patterns',
    category: 'mood',
    confidence: 0.65,
    cta: {
      screen: '/(tabs)/mood',
      params: {}
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative2.View, {
    testID: "mood-screen",
    children: (0, _jsxRuntime.jsx)(_AdaptiveSuggestionCard.AdaptiveSuggestionCard, {
      suggestion: suggestion,
      qualityMeta: qualityMeta,
      onAction: function onAction() {
        return console.log('Action');
      },
      onDismiss: function onDismiss() {
        return console.log('Dismiss');
      }
    })
  });
};
var QualityScenarios = {
  highQuality: {
    meta: {
      source: 'unified',
      qualityLevel: 'high',
      sampleSize: 15,
      freshnessMs: 120000
    },
    expectedBadges: ['Fresh', 'High', 'n=15', '2m']
  },
  mediumQuality: {
    meta: {
      source: 'heuristic',
      qualityLevel: 'medium',
      sampleSize: 7,
      freshnessMs: 600000
    },
    expectedBadges: ['Heuristic', 'Med', 'n=7', '10m']
  },
  lowQuality: {
    meta: {
      source: 'cache',
      qualityLevel: 'low',
      sampleSize: 3,
      freshnessMs: 3600000
    },
    expectedBadges: ['Cache', 'Low', 'n=3', '1h']
  },
  noMeta: {
    meta: null,
    expectedBadges: []
  }
};
describe('Quality Ribbon E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockImplementation(function (key) {
      if (key.includes('compulsions')) return Promise.resolve('[]');
      if (key.includes('thought_records')) return Promise.resolve('[]');
      if (key.includes('mood_entries')) return Promise.resolve(JSON.stringify([{
        id: 'mood_1',
        mood_score: 75,
        energy_level: 7,
        anxiety_level: 3,
        created_at: new Date().toISOString()
      }]));
      return Promise.resolve(null);
    });
    mockAsyncStorage.setItem.mockResolvedValue();
    mockAsyncStorage.removeItem.mockResolvedValue();
    mockUseAdaptiveSuggestion.mockReturnValue({
      suggestion: {
        show: true,
        title: 'Default Suggestion',
        content: 'Default content',
        category: 'mood',
        confidence: 0.75,
        cta: {
          screen: '/(tabs)/breathwork',
          params: {}
        }
      },
      isLoading: false,
      qualityMetadata: {
        source: 'unified',
        qualityLevel: 'high',
        sampleSize: 10,
        freshnessMs: 0
      },
      refresh: jest.fn(),
      generateSuggestionFromPipeline: jest.fn()
    });
  });
  describe('ðŸŽ¨ Visual Display Tests', function () {
    it('[QR:smoke:e2e_today] should render all quality badges for high quality data', (0, _asyncToGenerator2.default)(function* () {
      var _QualityScenarios$hig = QualityScenarios.highQuality,
        meta = _QualityScenarios$hig.meta,
        expectedBadges = _QualityScenarios$hig.expectedBadges;
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
            qualityMeta: meta,
            suggestion: {
              title: 'Test',
              content: 'Test content'
            }
          })
        })),
        queryByText = _render.queryByText;
      for (var badge of expectedBadges) {
        expect(queryByText(badge)).toBeTruthy();
      }
    }));
    it('[QR:smoke:e2e_today] should apply correct styling for different quality levels', (0, _asyncToGenerator2.default)(function* () {
      var scenarios = ['highQuality', 'mediumQuality', 'lowQuality'];
      for (var scenario of scenarios) {
        var meta = QualityScenarios[scenario].meta;
        var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
            children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
              qualityMeta: meta
            })
          })),
          getByTestId = _render2.getByTestId,
          rerender = _render2.rerender;
        var ribbon = getByTestId('quality-ribbon');
        expect(ribbon).toBeTruthy();
        rerender((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_reactNative2.View, {})
        }));
      }
    }));
  });
  describe('ðŸŽ¨ Conditional Rendering Tests', function () {
    it('should hide ribbon when meta is null or undefined', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
            qualityMeta: null
          })
        })),
        queryByTestId = _render3.queryByTestId;
      expect(queryByTestId('quality-ribbon')).toBeFalsy();
    }));
    it('should handle partial meta data gracefully', (0, _asyncToGenerator2.default)(function* () {
      var partialMeta = {
        source: 'unified'
      };
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
            qualityMeta: partialMeta
          })
        })),
        queryByText = _render4.queryByText;
      expect(queryByText('Fresh')).toBeTruthy();
      expect(queryByText(/n=/)).toBeFalsy();
    }));
  });
  describe('ðŸ”„ Dynamic Update Tests', function () {
    it('should update ribbon when meta changes', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
            qualityMeta: QualityScenarios.highQuality.meta
          })
        })),
        rerender = _render5.rerender,
        queryByText = _render5.queryByText;
      expect(queryByText('Fresh')).toBeTruthy();
      expect(queryByText('High')).toBeTruthy();
      rerender((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
          qualityMeta: QualityScenarios.mediumQuality.meta
        })
      }));
      expect(queryByText('Fresh')).toBeFalsy();
      expect(queryByText('Heuristic')).toBeTruthy();
      expect(queryByText('Med')).toBeTruthy();
    }));
  });
  describe('ðŸ“Š Integration with Mood Screen', function () {
    it('[QR:smoke:e2e_mood] should display quality ribbon on mood screen adaptive suggestion', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MoodScreen, {})
        })),
        queryByText = _render6.queryByText,
        getByTestId = _render6.getByTestId;
      expect(getByTestId('mood-screen')).toBeTruthy();
      expect(queryByText('Cache')).toBeTruthy();
      expect(queryByText('Med')).toBeTruthy();
      expect(queryByText('n=7')).toBeTruthy();
    }));
    it('[QR:smoke:e2e_mood] should handle mood screen without quality metadata', (0, _asyncToGenerator2.default)(function* () {
      mockUseAdaptiveSuggestion.mockReturnValueOnce({
        suggestion: {
          show: true,
          title: 'Mood Suggestion',
          content: 'Content'
        },
        qualityMetadata: null,
        isLoading: false,
        refresh: jest.fn(),
        generateSuggestionFromPipeline: jest.fn()
      });
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MoodScreen, {})
        })),
        queryByTestId = _render7.queryByTestId;
      expect(queryByTestId('mood-screen')).toBeTruthy();
      expect(queryByTestId('quality-ribbon')).toBeFalsy();
    }));
    it('[QR:smoke:e2e_mood] should update quality ribbon after mood entry', (0, _asyncToGenerator2.default)(function* () {
      var qualityMeta = QualityScenarios.lowQuality.meta;
      mockUseAdaptiveSuggestion.mockImplementation(function () {
        return {
          suggestion: {
            show: true,
            title: 'Mood',
            content: 'Content'
          },
          qualityMetadata: qualityMeta,
          isLoading: false,
          refresh: jest.fn(function () {
            qualityMeta = QualityScenarios.highQuality.meta;
          }),
          generateSuggestionFromPipeline: jest.fn()
        };
      });
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MoodScreen, {})
        })),
        queryByText = _render8.queryByText,
        rerender = _render8.rerender;
      expect(queryByText('Cache')).toBeTruthy();
      expect(queryByText('Low')).toBeTruthy();
      (0, _reactNative.act)(function () {
        mockUseAdaptiveSuggestion().refresh();
      });
      rerender((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(MoodScreen, {})
      }));
      expect(queryByText('Fresh')).toBeTruthy();
      expect(queryByText('High')).toBeTruthy();
    }));
    it('[QR:smoke:e2e_mood] should maintain quality ribbon during loading states', (0, _asyncToGenerator2.default)(function* () {
      var meta = QualityScenarios.mediumQuality.meta;
      mockUseAdaptiveSuggestion.mockReturnValueOnce({
        suggestion: null,
        qualityMetadata: meta,
        isLoading: true,
        refresh: jest.fn(),
        generateSuggestionFromPipeline: jest.fn()
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
            qualityMeta: meta
          })
        })),
        queryByText = _render9.queryByText;
      expect(queryByText('Heuristic')).toBeTruthy();
      expect(queryByText('Med')).toBeTruthy();
    }));
  });
  describe('ðŸŽ¤ Voice Interaction Tests', function () {
    it('[QR:smoke:e2e_voice] should show quality ribbon after voice analysis', (0, _asyncToGenerator2.default)(function* () {
      var voiceMeta = {
        source: 'unified',
        qualityLevel: 'high',
        sampleSize: 1,
        freshnessMs: 0
      };
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(QualityRibbonTestComponent, {
            qualityMeta: voiceMeta,
            suggestion: {
              title: 'Voice Analysis Complete',
              content: 'Your mood seems positive'
            }
          })
        })),
        queryByText = _render0.queryByText;
      expect(queryByText('Fresh')).toBeTruthy();
      expect(queryByText('High')).toBeTruthy();
      expect(queryByText('n=1')).toBeTruthy();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,