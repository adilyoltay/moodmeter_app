{"version":3,"names":["_getJestObj","mock","__esModule","default","supabaseClient","from","jest","fn","select","eq","maybeSingle","_asyncToGenerator2","data","error","upsert","delete","like","actual","requireActual","Object","assign","trackAIInteraction","emitAIInvalidation","mockEmitAIInvalidation","apply","arguments","_interopRequireDefault","require","_asyncStorage","_seedData","_require","unifiedPipeline","actualTelemetry","AIEventType","describe","userId","TEST_ENV","SEED_USER_ID","beforeAll","process","env","TEST_MODE","TEST_TTL_MS","TEST_PIPELINE_STUB","TEST_SEED_USER_ID","EXPO_PUBLIC_ENABLE_AI","resetModules","beforeEach","clearAllMocks","AsyncStorage","clear","it","moodsRaw","generateMoodData","MOOD_SCENARIOS","high","moods","map","m","timestamp","created_at","mood_score","mood_level","result","type","content","context","source","expect","metadata","toBe","calls","args","toContain","UNIFIED_PIPELINE_STARTED","UNIFIED_PIPELINE_COMPLETED","keys","getAllKeys","some","k","startsWith","medium","second","UNIFIED_PIPELINE_CACHE_HIT","low","triggerInvalidation","eventTypes","CACHE_INVALIDATION","toHaveBeenCalledWith","afterInvalidate","filter","c","includes","length","toBeGreaterThanOrEqual"],"sources":["SystemTodayPipeline.spec.tsx"],"sourcesContent":["/**\n * ðŸ§ª System-Mode Tests â€” Today (Real UnifiedAIPipeline)\n *\n * Runs the real pipeline (no stubs) with deterministic inputs and verifies:\n * - Fresh processing and cache write\n * - Cache hit on subsequent run\n * - Invalidation emits telemetry and reruns pipeline\n * Tags: [QRsys:today:fresh|cache|invalidate]\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n// unifiedPipeline will be required after env is set\nlet unifiedPipeline: any;\n\n// Use actual enums while spying on function\nconst actualTelemetry = jest.requireActual('@/features/ai/telemetry/aiTelemetry');\nimport type { AIEventType as AIEventTypeType } from '@/features/ai/telemetry/aiTelemetry';\nconst AIEventType: typeof actualTelemetry.AIEventType = actualTelemetry.AIEventType;\n\n// Deterministic seed helpers\nimport {\n  MOOD_SCENARIOS,\n  generateMoodData,\n  TEST_ENV\n} from '../fixtures/seedData';\n\n// Mock Supabase service to avoid network/credentials\njest.mock('@/services/supabase', () => ({\n  __esModule: true,\n  default: {\n    supabaseClient: {\n      from: jest.fn(() => ({\n        select: jest.fn(() => ({ eq: jest.fn(() => ({ maybeSingle: jest.fn(async () => ({ data: null, error: null })) })) })),\n        upsert: jest.fn(async () => ({ data: null, error: null })),\n        delete: jest.fn(() => ({ eq: jest.fn(async () => ({ data: null, error: null })) })),\n        like: jest.fn(() => ({ delete: jest.fn(() => ({ eq: jest.fn(async () => ({ data: null, error: null })) })) })),\n        eq: jest.fn(() => ({ maybeSingle: jest.fn(async () => ({ data: null, error: null })) })),\n      }))\n    }\n  }\n}));\n\n// Spy on telemetry while keeping actual enum\njest.mock('@/features/ai/telemetry/aiTelemetry', () => {\n  const actual = jest.requireActual('@/features/ai/telemetry/aiTelemetry');\n  return {\n    __esModule: true,\n    ...actual,\n    trackAIInteraction: jest.fn(async () => {}),\n  };\n});\n\n// Capture AI invalidation emission (name must start with mock* for jest mock factory scope)\nconst mockEmitAIInvalidation = jest.fn();\njest.mock('@/hooks/useCacheInvalidation', () => ({\n  __esModule: true,\n  emitAIInvalidation: (...args: any[]) => mockEmitAIInvalidation(...args),\n}));\n\ndescribe('System Today - Unified Pipeline', () => {\n  const userId = TEST_ENV.SEED_USER_ID;\n  let trackAIInteraction: jest.Mock;\n\n  beforeAll(() => {\n    // Ensure system-mode env\n    process.env.TEST_MODE = '1';\n    process.env.TEST_TTL_MS = '5000';\n    process.env.TEST_PIPELINE_STUB = '0';\n    process.env.TEST_SEED_USER_ID = userId;\n    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';\n    // Re-evaluate modules with env in place\n    jest.resetModules();\n    unifiedPipeline = require('@/features/ai/core/UnifiedAIPipeline').unifiedPipeline;\n    trackAIInteraction = (require('@/features/ai/telemetry/aiTelemetry') as typeof actualTelemetry & { trackAIInteraction: jest.Mock }).trackAIInteraction as jest.Mock;\n  });\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    await (AsyncStorage as any).clear();\n  });\n\n  it('[QRsys:today:fresh] processes fresh and writes unified:* cache', async () => {\n    const moodsRaw = generateMoodData(MOOD_SCENARIOS.high);\n    // Map to pipeline analytics fields\n    const moods = moodsRaw.map(m => ({\n      ...m,\n      timestamp: m.created_at,\n      mood_score: m.mood_level,\n    }));\n\n    const result = await unifiedPipeline.process({\n      userId,\n      type: 'data',\n      content: { moods },\n      context: { source: 'mood' }\n    });\n\n    expect(result.metadata.source).toBe('fresh');\n\n    // Telemetry events\n    const calls = (trackAIInteraction as jest.Mock).mock.calls.map(args => args[0]);\n    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_STARTED as unknown as AIEventTypeType);\n    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_COMPLETED as unknown as AIEventTypeType);\n\n    // Cache key persisted\n    const keys = await AsyncStorage.getAllKeys();\n    expect(keys.some((k: string) => k.startsWith(`unified:${userId}:`))).toBe(true);\n  });\n\n  it('[QRsys:today:cache] returns cache on subsequent run', async () => {\n    const moodsRaw = generateMoodData(MOOD_SCENARIOS.medium);\n    const moods = moodsRaw.map(m => ({ ...m, timestamp: m.created_at, mood_score: m.mood_level }));\n\n    await unifiedPipeline.process({ userId, type: 'data', content: { moods }, context: { source: 'mood' } });\n    const second = await unifiedPipeline.process({ userId, type: 'data', content: { moods }, context: { source: 'mood' } });\n\n    expect(second.metadata.source).toBe('cache');\n\n    // Telemetry records cache hit\n    const calls = (trackAIInteraction as jest.Mock).mock.calls.map(args => args[0]);\n    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_CACHE_HIT as unknown as AIEventTypeType);\n  });\n\n  it('[QRsys:today:invalidate] emits invalidation and reruns pipeline', async () => {\n    const moodsRaw = generateMoodData(MOOD_SCENARIOS.low);\n    const moods = moodsRaw.map(m => ({ ...m, timestamp: m.created_at, mood_score: m.mood_level }));\n\n    await unifiedPipeline.process({ userId, type: 'data', content: { moods }, context: { source: 'mood' } });\n\n    // Trigger invalidation (clears memory cache + emits event, Supabase deletion mocked)\n    await unifiedPipeline.triggerInvalidation('mood_added', userId);\n\n    // Verify telemetry and event emission\n    const eventTypes = (trackAIInteraction as jest.Mock).mock.calls.map(args => args[0]);\n    expect(eventTypes).toContain(AIEventType.CACHE_INVALIDATION as unknown as AIEventTypeType);\n    expect(mockEmitAIInvalidation).toHaveBeenCalledWith('mood_added', userId);\n\n    // Run again â€” may read from AsyncStorage (cache) but should record start/complete again\n    await unifiedPipeline.process({ userId, type: 'data', content: { moods }, context: { source: 'mood' } });\n    const afterInvalidate = (trackAIInteraction as jest.Mock).mock.calls.filter(c => [\n      AIEventType.UNIFIED_PIPELINE_STARTED,\n      AIEventType.UNIFIED_PIPELINE_COMPLETED\n    ].includes(c[0])).length;\n    expect(afterInvalidate).toBeGreaterThanOrEqual(2); // At least one more start/complete pair\n  });\n});\n\n"],"mappings":"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","ignoreList":[]}