09c13dff7d59cd66dbcad32ff4529632
_getJestObj().mock("../../services/supabase", function () {
  return {
    __esModule: true,
    default: {
      supabaseClient: {
        from: jest.fn(function () {
          return {
            select: jest.fn(function () {
              return {
                eq: jest.fn(function () {
                  return {
                    maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            upsert: jest.fn((0, _asyncToGenerator2.default)(function* () {
              return {
                data: null,
                error: null
              };
            })),
            delete: jest.fn(function () {
              return {
                eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            }),
            like: jest.fn(function () {
              return {
                delete: jest.fn(function () {
                  return {
                    eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            eq: jest.fn(function () {
              return {
                maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            })
          };
        })
      }
    }
  };
});
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry", function () {
  var actual = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
  return Object.assign({
    __esModule: true
  }, actual, {
    trackAIInteraction: jest.fn((0, _asyncToGenerator2.default)(function* () {}))
  });
});
_getJestObj().mock("../../hooks/useCacheInvalidation", function () {
  return {
    __esModule: true,
    emitAIInvalidation: function emitAIInvalidation() {
      return mockEmitAIInvalidation.apply(void 0, arguments);
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var unifiedPipeline;
var actualTelemetry = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
var AIEventType = actualTelemetry.AIEventType;
var mockEmitAIInvalidation = jest.fn();
describe('System Today - Unified Pipeline', function () {
  var userId = _seedData.TEST_ENV.SEED_USER_ID;
  var trackAIInteraction;
  beforeAll(function () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.TEST_SEED_USER_ID = userId;
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    jest.resetModules();
    unifiedPipeline = require("../../features/ai/core/UnifiedAIPipeline").unifiedPipeline;
    trackAIInteraction = require("../../features/ai/telemetry/aiTelemetry").trackAIInteraction;
  });
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield _asyncStorage.default.clear();
  }));
  it('[QRsys:today:fresh] processes fresh and writes unified:* cache', (0, _asyncToGenerator2.default)(function* () {
    var moodsRaw = (0, _seedData.generateMoodData)(_seedData.MOOD_SCENARIOS.high);
    var moods = moodsRaw.map(function (m) {
      return Object.assign({}, m, {
        timestamp: m.created_at,
        mood_score: m.mood_level
      });
    });
    var result = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    expect(result.metadata.source).toBe('fresh');
    var calls = trackAIInteraction.mock.calls.map(function (args) {
      return args[0];
    });
    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_STARTED);
    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_COMPLETED);
    var keys = yield _asyncStorage.default.getAllKeys();
    expect(keys.some(function (k) {
      return k.startsWith(`unified:${userId}:`);
    })).toBe(true);
  }));
  it('[QRsys:today:cache] returns cache on subsequent run', (0, _asyncToGenerator2.default)(function* () {
    var moodsRaw = (0, _seedData.generateMoodData)(_seedData.MOOD_SCENARIOS.medium);
    var moods = moodsRaw.map(function (m) {
      return Object.assign({}, m, {
        timestamp: m.created_at,
        mood_score: m.mood_level
      });
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var second = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    expect(second.metadata.source).toBe('cache');
    var calls = trackAIInteraction.mock.calls.map(function (args) {
      return args[0];
    });
    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_CACHE_HIT);
  }));
  it('[QRsys:today:invalidate] emits invalidation and reruns pipeline', (0, _asyncToGenerator2.default)(function* () {
    var moodsRaw = (0, _seedData.generateMoodData)(_seedData.MOOD_SCENARIOS.low);
    var moods = moodsRaw.map(function (m) {
      return Object.assign({}, m, {
        timestamp: m.created_at,
        mood_score: m.mood_level
      });
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    yield unifiedPipeline.triggerInvalidation('mood_added', userId);
    var eventTypes = trackAIInteraction.mock.calls.map(function (args) {
      return args[0];
    });
    expect(eventTypes).toContain(AIEventType.CACHE_INVALIDATION);
    expect(mockEmitAIInvalidation).toHaveBeenCalledWith('mood_added', userId);
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var afterInvalidate = trackAIInteraction.mock.calls.filter(function (c) {
      return [AIEventType.UNIFIED_PIPELINE_STARTED, AIEventType.UNIFIED_PIPELINE_COMPLETED].includes(c[0]);
    }).length;
    expect(afterInvalidate).toBeGreaterThanOrEqual(2);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInN1cGFiYXNlQ2xpZW50IiwiZnJvbSIsImplc3QiLCJmbiIsInNlbGVjdCIsImVxIiwibWF5YmVTaW5nbGUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkYXRhIiwiZXJyb3IiLCJ1cHNlcnQiLCJkZWxldGUiLCJsaWtlIiwiYWN0dWFsIiwicmVxdWlyZUFjdHVhbCIsIk9iamVjdCIsImFzc2lnbiIsInRyYWNrQUlJbnRlcmFjdGlvbiIsImVtaXRBSUludmFsaWRhdGlvbiIsIm1vY2tFbWl0QUlJbnZhbGlkYXRpb24iLCJhcHBseSIsImFyZ3VtZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9zZWVkRGF0YSIsIl9yZXF1aXJlIiwidW5pZmllZFBpcGVsaW5lIiwiYWN0dWFsVGVsZW1ldHJ5IiwiQUlFdmVudFR5cGUiLCJkZXNjcmliZSIsInVzZXJJZCIsIlRFU1RfRU5WIiwiU0VFRF9VU0VSX0lEIiwiYmVmb3JlQWxsIiwicHJvY2VzcyIsImVudiIsIlRFU1RfTU9ERSIsIlRFU1RfVFRMX01TIiwiVEVTVF9QSVBFTElORV9TVFVCIiwiVEVTVF9TRUVEX1VTRVJfSUQiLCJFWFBPX1BVQkxJQ19FTkFCTEVfQUkiLCJyZXNldE1vZHVsZXMiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIkFzeW5jU3RvcmFnZSIsImNsZWFyIiwiaXQiLCJtb29kc1JhdyIsImdlbmVyYXRlTW9vZERhdGEiLCJNT09EX1NDRU5BUklPUyIsImhpZ2giLCJtb29kcyIsIm1hcCIsIm0iLCJ0aW1lc3RhbXAiLCJjcmVhdGVkX2F0IiwibW9vZF9zY29yZSIsIm1vb2RfbGV2ZWwiLCJyZXN1bHQiLCJ0eXBlIiwiY29udGVudCIsImNvbnRleHQiLCJzb3VyY2UiLCJleHBlY3QiLCJtZXRhZGF0YSIsInRvQmUiLCJjYWxscyIsImFyZ3MiLCJ0b0NvbnRhaW4iLCJVTklGSUVEX1BJUEVMSU5FX1NUQVJURUQiLCJVTklGSUVEX1BJUEVMSU5FX0NPTVBMRVRFRCIsImtleXMiLCJnZXRBbGxLZXlzIiwic29tZSIsImsiLCJzdGFydHNXaXRoIiwibWVkaXVtIiwic2Vjb25kIiwiVU5JRklFRF9QSVBFTElORV9DQUNIRV9ISVQiLCJsb3ciLCJ0cmlnZ2VySW52YWxpZGF0aW9uIiwiZXZlbnRUeXBlcyIsIkNBQ0hFX0lOVkFMSURBVElPTiIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYWZ0ZXJJbnZhbGlkYXRlIiwiZmlsdGVyIiwiYyIsImluY2x1ZGVzIiwibGVuZ3RoIiwidG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCJdLCJzb3VyY2VzIjpbIlN5c3RlbVRvZGF5UGlwZWxpbmUuc3BlYy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDwn6eqIFN5c3RlbS1Nb2RlIFRlc3RzIOKAlCBUb2RheSAoUmVhbCBVbmlmaWVkQUlQaXBlbGluZSlcbiAqXG4gKiBSdW5zIHRoZSByZWFsIHBpcGVsaW5lIChubyBzdHVicykgd2l0aCBkZXRlcm1pbmlzdGljIGlucHV0cyBhbmQgdmVyaWZpZXM6XG4gKiAtIEZyZXNoIHByb2Nlc3NpbmcgYW5kIGNhY2hlIHdyaXRlXG4gKiAtIENhY2hlIGhpdCBvbiBzdWJzZXF1ZW50IHJ1blxuICogLSBJbnZhbGlkYXRpb24gZW1pdHMgdGVsZW1ldHJ5IGFuZCByZXJ1bnMgcGlwZWxpbmVcbiAqIFRhZ3M6IFtRUnN5czp0b2RheTpmcmVzaHxjYWNoZXxpbnZhbGlkYXRlXVxuICovXG5cbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuLy8gdW5pZmllZFBpcGVsaW5lIHdpbGwgYmUgcmVxdWlyZWQgYWZ0ZXIgZW52IGlzIHNldFxubGV0IHVuaWZpZWRQaXBlbGluZTogYW55O1xuXG4vLyBVc2UgYWN0dWFsIGVudW1zIHdoaWxlIHNweWluZyBvbiBmdW5jdGlvblxuY29uc3QgYWN0dWFsVGVsZW1ldHJ5ID0gamVzdC5yZXF1aXJlQWN0dWFsKCdAL2ZlYXR1cmVzL2FpL3RlbGVtZXRyeS9haVRlbGVtZXRyeScpO1xuaW1wb3J0IHR5cGUgeyBBSUV2ZW50VHlwZSBhcyBBSUV2ZW50VHlwZVR5cGUgfSBmcm9tICdAL2ZlYXR1cmVzL2FpL3RlbGVtZXRyeS9haVRlbGVtZXRyeSc7XG5jb25zdCBBSUV2ZW50VHlwZTogdHlwZW9mIGFjdHVhbFRlbGVtZXRyeS5BSUV2ZW50VHlwZSA9IGFjdHVhbFRlbGVtZXRyeS5BSUV2ZW50VHlwZTtcblxuLy8gRGV0ZXJtaW5pc3RpYyBzZWVkIGhlbHBlcnNcbmltcG9ydCB7XG4gIE1PT0RfU0NFTkFSSU9TLFxuICBnZW5lcmF0ZU1vb2REYXRhLFxuICBURVNUX0VOVlxufSBmcm9tICcuLi9maXh0dXJlcy9zZWVkRGF0YSc7XG5cbi8vIE1vY2sgU3VwYWJhc2Ugc2VydmljZSB0byBhdm9pZCBuZXR3b3JrL2NyZWRlbnRpYWxzXG5qZXN0Lm1vY2soJ0Avc2VydmljZXMvc3VwYWJhc2UnLCAoKSA9PiAoe1xuICBfX2VzTW9kdWxlOiB0cnVlLFxuICBkZWZhdWx0OiB7XG4gICAgc3VwYWJhc2VDbGllbnQ6IHtcbiAgICAgIGZyb206IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgc2VsZWN0OiBqZXN0LmZuKCgpID0+ICh7IGVxOiBqZXN0LmZuKCgpID0+ICh7IG1heWJlU2luZ2xlOiBqZXN0LmZuKGFzeW5jICgpID0+ICh7IGRhdGE6IG51bGwsIGVycm9yOiBudWxsIH0pKSB9KSkgfSkpLFxuICAgICAgICB1cHNlcnQ6IGplc3QuZm4oYXN5bmMgKCkgPT4gKHsgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSkpLFxuICAgICAgICBkZWxldGU6IGplc3QuZm4oKCkgPT4gKHsgZXE6IGplc3QuZm4oYXN5bmMgKCkgPT4gKHsgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSkpIH0pKSxcbiAgICAgICAgbGlrZTogamVzdC5mbigoKSA9PiAoeyBkZWxldGU6IGplc3QuZm4oKCkgPT4gKHsgZXE6IGplc3QuZm4oYXN5bmMgKCkgPT4gKHsgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSkpIH0pKSB9KSksXG4gICAgICAgIGVxOiBqZXN0LmZuKCgpID0+ICh7IG1heWJlU2luZ2xlOiBqZXN0LmZuKGFzeW5jICgpID0+ICh7IGRhdGE6IG51bGwsIGVycm9yOiBudWxsIH0pKSB9KSksXG4gICAgICB9KSlcbiAgICB9XG4gIH1cbn0pKTtcblxuLy8gU3B5IG9uIHRlbGVtZXRyeSB3aGlsZSBrZWVwaW5nIGFjdHVhbCBlbnVtXG5qZXN0Lm1vY2soJ0AvZmVhdHVyZXMvYWkvdGVsZW1ldHJ5L2FpVGVsZW1ldHJ5JywgKCkgPT4ge1xuICBjb25zdCBhY3R1YWwgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ0AvZmVhdHVyZXMvYWkvdGVsZW1ldHJ5L2FpVGVsZW1ldHJ5Jyk7XG4gIHJldHVybiB7XG4gICAgX19lc01vZHVsZTogdHJ1ZSxcbiAgICAuLi5hY3R1YWwsXG4gICAgdHJhY2tBSUludGVyYWN0aW9uOiBqZXN0LmZuKGFzeW5jICgpID0+IHt9KSxcbiAgfTtcbn0pO1xuXG4vLyBDYXB0dXJlIEFJIGludmFsaWRhdGlvbiBlbWlzc2lvbiAobmFtZSBtdXN0IHN0YXJ0IHdpdGggbW9jayogZm9yIGplc3QgbW9jayBmYWN0b3J5IHNjb3BlKVxuY29uc3QgbW9ja0VtaXRBSUludmFsaWRhdGlvbiA9IGplc3QuZm4oKTtcbmplc3QubW9jaygnQC9ob29rcy91c2VDYWNoZUludmFsaWRhdGlvbicsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGVtaXRBSUludmFsaWRhdGlvbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBtb2NrRW1pdEFJSW52YWxpZGF0aW9uKC4uLmFyZ3MpLFxufSkpO1xuXG5kZXNjcmliZSgnU3lzdGVtIFRvZGF5IC0gVW5pZmllZCBQaXBlbGluZScsICgpID0+IHtcbiAgY29uc3QgdXNlcklkID0gVEVTVF9FTlYuU0VFRF9VU0VSX0lEO1xuICBsZXQgdHJhY2tBSUludGVyYWN0aW9uOiBqZXN0Lk1vY2s7XG5cbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAvLyBFbnN1cmUgc3lzdGVtLW1vZGUgZW52XG4gICAgcHJvY2Vzcy5lbnYuVEVTVF9NT0RFID0gJzEnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfVFRMX01TID0gJzUwMDAnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfUElQRUxJTkVfU1RVQiA9ICcwJztcbiAgICBwcm9jZXNzLmVudi5URVNUX1NFRURfVVNFUl9JRCA9IHVzZXJJZDtcbiAgICBwcm9jZXNzLmVudi5FWFBPX1BVQkxJQ19FTkFCTEVfQUkgPSAndHJ1ZSc7XG4gICAgLy8gUmUtZXZhbHVhdGUgbW9kdWxlcyB3aXRoIGVudiBpbiBwbGFjZVxuICAgIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gICAgdW5pZmllZFBpcGVsaW5lID0gcmVxdWlyZSgnQC9mZWF0dXJlcy9haS9jb3JlL1VuaWZpZWRBSVBpcGVsaW5lJykudW5pZmllZFBpcGVsaW5lO1xuICAgIHRyYWNrQUlJbnRlcmFjdGlvbiA9IChyZXF1aXJlKCdAL2ZlYXR1cmVzL2FpL3RlbGVtZXRyeS9haVRlbGVtZXRyeScpIGFzIHR5cGVvZiBhY3R1YWxUZWxlbWV0cnkgJiB7IHRyYWNrQUlJbnRlcmFjdGlvbjogamVzdC5Nb2NrIH0pLnRyYWNrQUlJbnRlcmFjdGlvbiBhcyBqZXN0Lk1vY2s7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGF3YWl0IChBc3luY1N0b3JhZ2UgYXMgYW55KS5jbGVhcigpO1xuICB9KTtcblxuICBpdCgnW1FSc3lzOnRvZGF5OmZyZXNoXSBwcm9jZXNzZXMgZnJlc2ggYW5kIHdyaXRlcyB1bmlmaWVkOiogY2FjaGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9vZHNSYXcgPSBnZW5lcmF0ZU1vb2REYXRhKE1PT0RfU0NFTkFSSU9TLmhpZ2gpO1xuICAgIC8vIE1hcCB0byBwaXBlbGluZSBhbmFseXRpY3MgZmllbGRzXG4gICAgY29uc3QgbW9vZHMgPSBtb29kc1Jhdy5tYXAobSA9PiAoe1xuICAgICAgLi4ubSxcbiAgICAgIHRpbWVzdGFtcDogbS5jcmVhdGVkX2F0LFxuICAgICAgbW9vZF9zY29yZTogbS5tb29kX2xldmVsLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVuaWZpZWRQaXBlbGluZS5wcm9jZXNzKHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgIGNvbnRlbnQ6IHsgbW9vZHMgfSxcbiAgICAgIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfVxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5tZXRhZGF0YS5zb3VyY2UpLnRvQmUoJ2ZyZXNoJyk7XG5cbiAgICAvLyBUZWxlbWV0cnkgZXZlbnRzXG4gICAgY29uc3QgY2FsbHMgPSAodHJhY2tBSUludGVyYWN0aW9uIGFzIGplc3QuTW9jaykubW9jay5jYWxscy5tYXAoYXJncyA9PiBhcmdzWzBdKTtcbiAgICBleHBlY3QoY2FsbHMpLnRvQ29udGFpbihBSUV2ZW50VHlwZS5VTklGSUVEX1BJUEVMSU5FX1NUQVJURUQgYXMgdW5rbm93biBhcyBBSUV2ZW50VHlwZVR5cGUpO1xuICAgIGV4cGVjdChjYWxscykudG9Db250YWluKEFJRXZlbnRUeXBlLlVOSUZJRURfUElQRUxJTkVfQ09NUExFVEVEIGFzIHVua25vd24gYXMgQUlFdmVudFR5cGVUeXBlKTtcblxuICAgIC8vIENhY2hlIGtleSBwZXJzaXN0ZWRcbiAgICBjb25zdCBrZXlzID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEFsbEtleXMoKTtcbiAgICBleHBlY3Qoa2V5cy5zb21lKChrOiBzdHJpbmcpID0+IGsuc3RhcnRzV2l0aChgdW5pZmllZDoke3VzZXJJZH06YCkpKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdCgnW1FSc3lzOnRvZGF5OmNhY2hlXSByZXR1cm5zIGNhY2hlIG9uIHN1YnNlcXVlbnQgcnVuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vb2RzUmF3ID0gZ2VuZXJhdGVNb29kRGF0YShNT09EX1NDRU5BUklPUy5tZWRpdW0pO1xuICAgIGNvbnN0IG1vb2RzID0gbW9vZHNSYXcubWFwKG0gPT4gKHsgLi4ubSwgdGltZXN0YW1wOiBtLmNyZWF0ZWRfYXQsIG1vb2Rfc2NvcmU6IG0ubW9vZF9sZXZlbCB9KSk7XG5cbiAgICBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcbiAgICBjb25zdCBzZWNvbmQgPSBhd2FpdCB1bmlmaWVkUGlwZWxpbmUucHJvY2Vzcyh7IHVzZXJJZCwgdHlwZTogJ2RhdGEnLCBjb250ZW50OiB7IG1vb2RzIH0sIGNvbnRleHQ6IHsgc291cmNlOiAnbW9vZCcgfSB9KTtcblxuICAgIGV4cGVjdChzZWNvbmQubWV0YWRhdGEuc291cmNlKS50b0JlKCdjYWNoZScpO1xuXG4gICAgLy8gVGVsZW1ldHJ5IHJlY29yZHMgY2FjaGUgaGl0XG4gICAgY29uc3QgY2FsbHMgPSAodHJhY2tBSUludGVyYWN0aW9uIGFzIGplc3QuTW9jaykubW9jay5jYWxscy5tYXAoYXJncyA9PiBhcmdzWzBdKTtcbiAgICBleHBlY3QoY2FsbHMpLnRvQ29udGFpbihBSUV2ZW50VHlwZS5VTklGSUVEX1BJUEVMSU5FX0NBQ0hFX0hJVCBhcyB1bmtub3duIGFzIEFJRXZlbnRUeXBlVHlwZSk7XG4gIH0pO1xuXG4gIGl0KCdbUVJzeXM6dG9kYXk6aW52YWxpZGF0ZV0gZW1pdHMgaW52YWxpZGF0aW9uIGFuZCByZXJ1bnMgcGlwZWxpbmUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9vZHNSYXcgPSBnZW5lcmF0ZU1vb2REYXRhKE1PT0RfU0NFTkFSSU9TLmxvdyk7XG4gICAgY29uc3QgbW9vZHMgPSBtb29kc1Jhdy5tYXAobSA9PiAoeyAuLi5tLCB0aW1lc3RhbXA6IG0uY3JlYXRlZF9hdCwgbW9vZF9zY29yZTogbS5tb29kX2xldmVsIH0pKTtcblxuICAgIGF3YWl0IHVuaWZpZWRQaXBlbGluZS5wcm9jZXNzKHsgdXNlcklkLCB0eXBlOiAnZGF0YScsIGNvbnRlbnQ6IHsgbW9vZHMgfSwgY29udGV4dDogeyBzb3VyY2U6ICdtb29kJyB9IH0pO1xuXG4gICAgLy8gVHJpZ2dlciBpbnZhbGlkYXRpb24gKGNsZWFycyBtZW1vcnkgY2FjaGUgKyBlbWl0cyBldmVudCwgU3VwYWJhc2UgZGVsZXRpb24gbW9ja2VkKVxuICAgIGF3YWl0IHVuaWZpZWRQaXBlbGluZS50cmlnZ2VySW52YWxpZGF0aW9uKCdtb29kX2FkZGVkJywgdXNlcklkKTtcblxuICAgIC8vIFZlcmlmeSB0ZWxlbWV0cnkgYW5kIGV2ZW50IGVtaXNzaW9uXG4gICAgY29uc3QgZXZlbnRUeXBlcyA9ICh0cmFja0FJSW50ZXJhY3Rpb24gYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzLm1hcChhcmdzID0+IGFyZ3NbMF0pO1xuICAgIGV4cGVjdChldmVudFR5cGVzKS50b0NvbnRhaW4oQUlFdmVudFR5cGUuQ0FDSEVfSU5WQUxJREFUSU9OIGFzIHVua25vd24gYXMgQUlFdmVudFR5cGVUeXBlKTtcbiAgICBleHBlY3QobW9ja0VtaXRBSUludmFsaWRhdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ21vb2RfYWRkZWQnLCB1c2VySWQpO1xuXG4gICAgLy8gUnVuIGFnYWluIOKAlCBtYXkgcmVhZCBmcm9tIEFzeW5jU3RvcmFnZSAoY2FjaGUpIGJ1dCBzaG91bGQgcmVjb3JkIHN0YXJ0L2NvbXBsZXRlIGFnYWluXG4gICAgYXdhaXQgdW5pZmllZFBpcGVsaW5lLnByb2Nlc3MoeyB1c2VySWQsIHR5cGU6ICdkYXRhJywgY29udGVudDogeyBtb29kcyB9LCBjb250ZXh0OiB7IHNvdXJjZTogJ21vb2QnIH0gfSk7XG4gICAgY29uc3QgYWZ0ZXJJbnZhbGlkYXRlID0gKHRyYWNrQUlJbnRlcmFjdGlvbiBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHMuZmlsdGVyKGMgPT4gW1xuICAgICAgQUlFdmVudFR5cGUuVU5JRklFRF9QSVBFTElORV9TVEFSVEVELFxuICAgICAgQUlFdmVudFR5cGUuVU5JRklFRF9QSVBFTElORV9DT01QTEVURURcbiAgICBdLmluY2x1ZGVzKGNbMF0pKS5sZW5ndGg7XG4gICAgZXhwZWN0KGFmdGVySW52YWxpZGF0ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgyKTsgLy8gQXQgbGVhc3Qgb25lIG1vcmUgc3RhcnQvY29tcGxldGUgcGFpclxuICB9KTtcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiJBQTJCQUEsV0FBQSxHQUFLQyxJQUFJLDRCQUF3QjtFQUFBLE9BQU87SUFDdENDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUU7TUFDUEMsY0FBYyxFQUFFO1FBQ2RDLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7VUFBQSxPQUFPO1lBQ25CQyxNQUFNLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO2NBQUEsT0FBTztnQkFBRUUsRUFBRSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQztrQkFBQSxPQUFPO29CQUFFRyxXQUFXLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxLQUFBSSxrQkFBQSxDQUFBUixPQUFBLEVBQUM7c0JBQUEsT0FBYTt3QkFBRVMsSUFBSSxFQUFFLElBQUk7d0JBQUVDLEtBQUssRUFBRTtzQkFBSyxDQUFDO29CQUFBLENBQUM7a0JBQUUsQ0FBQztnQkFBQSxDQUFDO2NBQUUsQ0FBQztZQUFBLENBQUMsQ0FBQztZQUNySEMsTUFBTSxFQUFFUixJQUFJLENBQUNDLEVBQUUsS0FBQUksa0JBQUEsQ0FBQVIsT0FBQSxFQUFDO2NBQUEsT0FBYTtnQkFBRVMsSUFBSSxFQUFFLElBQUk7Z0JBQUVDLEtBQUssRUFBRTtjQUFLLENBQUM7WUFBQSxDQUFDLEVBQUM7WUFDMURFLE1BQU0sRUFBRVQsSUFB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