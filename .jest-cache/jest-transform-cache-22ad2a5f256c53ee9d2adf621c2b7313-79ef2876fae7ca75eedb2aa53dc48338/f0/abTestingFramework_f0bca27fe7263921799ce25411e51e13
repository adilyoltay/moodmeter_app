1509a1ba12d8af3a9909d96900f60432
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.abTestingFramework = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _featureFlags = require("../../../constants/featureFlags");
var ABTestingFramework = function () {
  function ABTestingFramework() {
    (0, _classCallCheck2.default)(this, ABTestingFramework);
    this.STORAGE_KEYS = {
      TESTS: 'ab_tests',
      ASSIGNMENTS: 'ab_test_assignments',
      RESULTS: 'ab_test_results'
    };
  }
  return (0, _createClass2.default)(ABTestingFramework, [{
    key: "getUserTestAssignment",
    value: (function () {
      var _getUserTestAssignment = (0, _asyncToGenerator2.default)(function* (userId) {
        if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_AB_TESTING')) {
          return {
            testId: null,
            variantId: null,
            parameters: null
          };
        }
        try {
          var assignment = yield this.getExistingAssignment(userId);
          if (assignment) {
            var test = yield this.getTest(assignment.testId);
            if (test && test.status === 'active') {
              var variant = test.variants.find(function (v) {
                return v.variantId === assignment.variantId;
              });
              return {
                testId: assignment.testId,
                variantId: assignment.variantId,
                parameters: (variant == null ? void 0 : variant.parameters) || null
              };
            }
          }
          var eligibleTest = yield this.findEligibleTest(userId);
          if (eligibleTest) {
            var assignedVariant = this.assignUserToVariant(eligibleTest);
            var newAssignment = {
              userId: userId,
              testId: eligibleTest.testId,
              variantId: assignedVariant.variantId,
              assignedAt: new Date(),
              isActive: true
            };
            yield this.saveAssignment(newAssignment);
            console.log(`üß™ User assigned to A/B test: ${eligibleTest.name} - ${assignedVariant.name}`);
            return {
              testId: eligibleTest.testId,
              variantId: assignedVariant.variantId,
              parameters: assignedVariant.parameters
            };
          }
          return {
            testId: null,
            variantId: null,
            parameters: null
          };
        } catch (error) {
          console.error('‚ùå Failed to get A/B test assignment:', error);
          return {
            testId: null,
            variantId: null,
            parameters: null
          };
        }
      });
      function getUserTestAssignment(_x) {
        return _getUserTestAssignment.apply(this, arguments);
      }
      return getUserTestAssignment;
    }())
  }, {
    key: "recordTestEvent",
    value: (function () {
      var _recordTestEvent = (0, _asyncToGenerator2.default)(function* (userId, eventType) {
        var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        try {
          var assignment = yield this.getExistingAssignment(userId);
          if (!assignment || !assignment.isActive) return;
          var result = {
            testId: assignment.testId,
            variantId: assignment.variantId,
            userId: userId,
            eventType: eventType,
            timestamp: new Date(),
            metadata: metadata
          };
          yield this.saveTestResult(result);
          console.log(`üìä Recorded A/B test event: ${eventType} for variant ${assignment.variantId}`);
        } catch (error) {
          console.error('‚ùå Failed to record A/B test event:', error);
        }
      });
      function recordTestEvent(_x2, _x3) {
        return _recordTestEvent.apply(this, arguments);
      }
      return recordTestEvent;
    }())
  }, {
    key: "createTest",
    value: (function () {
      var _createTest = (0, _asyncToGenerator2.default)(function* (test) {
        try {
          var tests = yield this.getTests();
          tests.push(test);
          yield _asyncStorage.default.setItem(this.STORAGE_KEYS.TESTS, JSON.stringify(tests));
          console.log(`üß™ Created A/B test: ${test.name}`);
        } catch (error) {
          console.error('‚ùå Failed to create A/B test:', error);
        }
      });
      function createTest(_x4) {
        return _createTest.apply(this, arguments);
      }
      return createTest;
    }())
  }, {
    key: "getTestAnalysis",
    value: (function () {
      var _getTestAnalysis = (0, _asyncToGenerator2.default)(function* (testId) {
        var _this = this;
        try {
          var results = yield this.getTestResults(testId);
          if (results.length === 0) {
            return {
              testId: testId,
              status: 'insufficient_data',
              results: {},
              recommendation: 'continue'
            };
          }
          var test = yield this.getTest(testId);
          if (!test) return null;
          var analysis = {
            testId: testId,
            status: 'in_progress',
            results: {},
            recommendation: 'continue'
          };
          var _loop = function* _loop(variant) {
            var variantResults = results.filter(function (r) {
              return r.variantId === variant.variantId;
            });
            var shown = variantResults.filter(function (r) {
              return r.eventType === 'suggestion_shown';
            });
            var clicked = variantResults.filter(function (r) {
              return r.eventType === 'suggestion_clicked';
            });
            var dismissed = variantResults.filter(function (r) {
              return r.eventType === 'suggestion_dismissed';
            });
            var clickThroughRate = shown.length > 0 ? clicked.length / shown.length : 0;
            var dismissalRate = shown.length > 0 ? dismissed.length / shown.length : 0;
            var engagementTimes = clicked.map(function (r) {
              return r.metadata.sessionDuration || 0;
            }).filter(function (t) {
              return t > 0;
            });
            var avgEngagementTime = engagementTimes.length > 0 ? engagementTimes.reduce(function (sum, t) {
              return sum + t;
            }, 0) / engagementTimes.length : 0;
            analysis.results[variant.variantId] = {
              sampleSize: shown.length,
              clickThroughRate: clickThroughRate,
              dismissalRate: dismissalRate,
              avgEngagementTime: avgEngagementTime,
              confidence: _this.calculateStatisticalConfidence(shown.length, clickThroughRate)
            };
          };
          for (var variant of test.variants) {
            yield* _loop(variant);
          }
          var variants = Object.entries(analysis.results);
          if (variants.length >= 2) {
            var sortedByMetric = variants.sort(function (a, b) {
              var metricA = _this.getMetricValue(a[1], test.primaryMetric);
              var metricB = _this.getMetricValue(b[1], test.primaryMetric);
              return metricB - metricA;
            });
            var _sortedByMetric = (0, _slicedToArray2.default)(sortedByMetric, 2),
              winnerData = _sortedByMetric[0],
              runnerUpData = _sortedByMetric[1];
            var winnerMetric = this.getMetricValue(winnerData[1], test.primaryMetric);
            var runnerUpMetric = this.getMetricValue(runnerUpData[1], test.primaryMetric);
            if (winnerData[1].sampleSize >= test.targetSampleSize && winnerData[1].confidence >= test.confidenceLevel && Math.abs(winnerMetric - runnerUpMetric) >= test.minimumEffectSize) {
              analysis.status = 'significant';
              analysis.winningVariant = winnerData[0];
              analysis.recommendation = 'implement_winner';
              analysis.results[winnerData[0]].isWinning = true;
            }
          }
          return analysis;
        } catch (error) {
          console.error('‚ùå Failed to analyze A/B test:', error);
          return null;
        }
      });
      function getTestAnalysis(_x5) {
        return _getTestAnalysis.apply(this, arguments);
      }
      return getTestAnalysis;
    }())
  }, {
    key: "getTestTemplates",
    value: function getTestTemplates() {
      return [{
        testId: 'cooldown_frequency_test',
        name: 'Suggestion Frequency Test',
        description: 'Test different cooldown periods: 2h vs 4h vs 6h',
        startDate: new Date(),
        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
        status: 'draft',
        participationRate: 0.3,
        eligibilityCriteria: {
          minAppUsageDays: 7
        },
        variants: [{
          variantId: 'control_4h',
          name: 'Control (4h cooldown)',
          weight: 0.4,
          parameters: {
            cooldownHours: 4,
            snoozeHours: 2
          }
        }, {
          variantId: 'aggressive_2h',
          name: 'Aggressive (2h cooldown)',
          weight: 0.3,
          parameters: {
            cooldownHours: 2,
            snoozeHours: 1,
            maxSuggestionsPerDay: 8
          }
        }, {
          variantId: 'conservative_6h',
          name: 'Conservative (6h cooldown)',
          weight: 0.3,
          parameters: {
            cooldownHours: 6,
            snoozeHours: 3,
            maxSuggestionsPerDay: 4
          }
        }],
        primaryMetric: 'click_through_rate',
        secondaryMetrics: ['dismissal_rate', 'engagement_time'],
        targetSampleSize: 100,
        confidenceLevel: 0.95,
        minimumEffectSize: 0.05
      }, {
        testId: 'timing_strategy_test',
        name: 'Timing Strategy Test',
        description: 'Test circadian-based timing vs fixed timing',
        startDate: new Date(),
        endDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000),
        status: 'draft',
        participationRate: 0.25,
        eligibilityCriteria: {
          minAppUsageDays: 14
        },
        variants: [{
          variantId: 'circadian_based',
          name: 'Smart Timing (Circadian)',
          weight: 0.5,
          parameters: {
            respectCircadianTiming: true,
            minimumTimingScore: 50,
            showTimingReason: true
          }
        }, {
          variantId: 'fixed_timing',
          name: 'Fixed Timing',
          weight: 0.5,
          parameters: {
            respectCircadianTiming: false,
            minimumTimingScore: 0
          }
        }],
        primaryMetric: 'click_through_rate',
        secondaryMetrics: ['user_satisfaction', 'engagement_time'],
        targetSampleSize: 150,
        confidenceLevel: 0.95,
        minimumEffectSize: 0.08
      }, {
        testId: 'communication_style_test',
        name: 'Communication Style Test',
        description: 'Test direct vs gentle vs encouraging messaging',
        startDate: new Date(),
        endDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
        status: 'draft',
        participationRate: 0.4,
        eligibilityCriteria: {},
        variants: [{
          variantId: 'encouraging',
          name: 'Encouraging Style',
          weight: 0.4,
          parameters: {
            communicationStyle: 'encouraging',
            showProgress: true
          }
        }, {
          variantId: 'direct',
          name: 'Direct Style',
          weight: 0.3,
          parameters: {
            communicationStyle: 'direct',
            cardStyle: 'compact'
          }
        }, {
          variantId: 'gentle',
          name: 'Gentle Style',
          weight: 0.3,
          parameters: {
            communicationStyle: 'gentle',
            cardStyle: 'detailed',
            useAnimation: true
          }
        }],
        primaryMetric: 'user_satisfaction',
        secondaryMetrics: ['click_through_rate', 'dismissal_rate'],
        targetSampleSize: 80,
        confidenceLevel: 0.90,
        minimumEffectSize: 0.10
      }];
    }
  }, {
    key: "getExistingAssignment",
    value: function () {
      var _getExistingAssignment = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          var assignments = yield this.getAssignments();
          return assignments.find(function (a) {
            return a.userId === userId && a.isActive;
          }) || null;
        } catch (error) {
          return null;
        }
      });
      function getExistingAssignment(_x6) {
        return _getExistingAssignment.apply(this, arguments);
      }
      return getExistingAssignment;
    }()
  }, {
    key: "findEligibleTest",
    value: function () {
      var _findEligibleTest = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          var tests = yield this.getTests();
          var activeTests = tests.filter(function (t) {
            return t.status === 'active' && new Date() >= t.startDate && new Date() <= t.endDate;
          });
          for (var test of activeTests) {
            if (!(yield this.isUserEligible(userId, test))) continue;
            if (Math.random() > test.participationRate) continue;
            return test;
          }
          return null;
        } catch (error) {
          return null;
        }
      });
      function findEligibleTest(_x7) {
        return _findEligibleTest.apply(this, arguments);
      }
      return findEligibleTest;
    }()
  }, {
    key: "isUserEligible",
    value: function () {
      var _isUserEligible = (0, _asyncToGenerator2.default)(function* (userId, test) {
        var _eligibilityCriteria$;
        var eligibilityCriteria = test.eligibilityCriteria;
        if ((_eligibilityCriteria$ = eligibilityCriteria.excludeUserIds) != null && _eligibilityCriteria$.includes(userId)) {
          return false;
        }
        if (eligibilityCriteria.minAppUsageDays) {}
        if (eligibilityCriteria.requiredFeatureFlags) {
          for (var flag of eligibilityCriteria.requiredFeatureFlags) {
            if (!_featureFlags.FEATURE_FLAGS.isEnabled(flag)) {
              return false;
            }
          }
        }
        return true;
      });
      function isUserEligible(_x8, _x9) {
        return _isUserEligible.apply(this, arguments);
      }
      return isUserEligible;
    }()
  }, {
    key: "assignUserToVariant",
    value: function assignUserToVariant(test) {
      var random = Math.random();
      var cumulativeWeight = 0;
      for (var variant of test.variants) {
        cumulativeWeight += variant.weight;
        if (random <= cumulativeWeight) {
          return variant;
        }
      }
      return test.variants[0];
    }
  }, {
    key: "getMetricValue",
    value: function getMetricValue(result, metric) {
      switch (metric) {
        case 'click_through_rate':
          return result.clickThroughRate;
        case 'dismissal_rate':
          return 1 - result.dismissalRate;
        case 'engagement_time':
          return result.avgEngagementTime;
        case 'user_satisfaction':
          return result.clickThroughRate;
        default:
          return result.clickThroughRate;
      }
    }
  }, {
    key: "calculateStatisticalConfidence",
    value: function calculateStatisticalConfidence(sampleSize, successRate) {
      if (sampleSize < 10) return 0.1;
      if (sampleSize < 50) return 0.5;
      if (sampleSize < 100) return 0.8;
      return 0.95;
    }
  }, {
    key: "getTests",
    value: function () {
      var _getTests = (0, _asyncToGenerator2.default)(function* () {
        try {
          var stored = yield _asyncStorage.default.getItem(this.STORAGE_KEYS.TESTS);
          return stored ? JSON.parse(stored) : [];
        } catch (error) {
          return [];
        }
      });
      function getTests() {
        return _getTests.apply(this, arguments);
      }
      return getTests;
    }()
  }, {
    key: "getTest",
    value: function () {
      var _getTest = (0, _asyncToGenerator2.default)(function* (testId) {
        var tests = yield this.getTests();
        return tests.find(function (t) {
          return t.testId === testId;
        }) || null;
      });
      function getTest(_x0) {
        return _getTest.apply(this, arguments);
      }
      return getTest;
    }()
  }, {
    key: "getAssignments",
    value: function () {
      var _getAssignments = (0, _asyncToGenerator2.default)(function* () {
        try {
          var stored = yield _asyncStorage.default.getItem(this.STORAGE_KEYS.ASSIGNMENTS);
          return stored ? JSON.parse(stored) : [];
        } catch (error) {
          return [];
        }
      });
      function getAssignments() {
        return _getAssignments.apply(this, arguments);
      }
      return getAssignments;
    }()
  }, {
    key: "saveAssignment",
    value: function () {
      var _saveAssignment = (0, _asyncToGenerator2.default)(function* (assignment) {
        try {
          var assignments = yield this.getAssignments();
          assignments.push(assignment);
          yield _asyncStorage.default.setItem(this.STORAGE_KEYS.ASSIGNMENTS, JSON.stringify(assignments));
        } catch (error) {
          console.error('‚ùå Failed to save A/B test assignment:', error);
        }
      });
      function saveAssignment(_x1) {
        return _saveAssignment.apply(this, arguments);
      }
      return saveAssignment;
    }()
  }, {
    key: "getTestResults",
    value: function () {
      var _getTestResults = (0, _asyncToGenerator2.default)(function* (testId) {
        try {
          var stored = yield _asyncStorage.default.getItem(this.STORAGE_KEYS.RESULTS);
          var results = stored ? JSON.parse(stored) : [];
          return testId ? results.filter(function (r) {
            return r.testId === testId;
          }) : results;
        } catch (error) {
          return [];
        }
      });
      function getTestResults(_x10) {
        return _getTestResults.apply(this, arguments);
      }
      return getTestResults;
    }()
  }, {
    key: "saveTestResult",
    value: function () {
      var _saveTestResult = (0, _asyncToGenerator2.default)(function* (result) {
        try {
          var results = yield this.getTestResults();
          results.push(result);
          var trimmed = results.slice(-1000);
          yield _asyncStorage.default.setItem(this.STORAGE_KEYS.RESULTS, JSON.stringify(trimmed));
        } catch (error) {
          console.error('‚ùå Failed to save A/B test result:', error);
        }
      });
      function saveTestResult(_x11) {
        return _saveTestResult.apply(this, arguments);
      }
      return saveTestResult;
    }()
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!ABTestingFramework.instance) {
        ABTestingFramework.instance = new ABTestingFramework();
      }
      return ABTestingFramework.instance;
    }
  }]);
}();
var abTestingFramework = exports.abTestingFramework = ABTestingFramework.getInstance();
var _default = exports.default = abTestingFramework;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,