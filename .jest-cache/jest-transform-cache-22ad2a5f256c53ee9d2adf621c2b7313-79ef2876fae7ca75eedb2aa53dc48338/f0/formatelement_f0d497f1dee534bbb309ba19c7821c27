dfe8f5809550f87822ad9bc887f87c26
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["children"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatElement = formatElement;
exports.formatElementList = formatElementList;
exports.formatJson = formatJson;
var _prettyFormat = _interopRequireWildcard(require("pretty-format"));
var _mapProps = require("./map-props");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function formatElement(element) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    compact = _ref.compact,
    _ref$highlight = _ref.highlight,
    highlight = _ref$highlight === void 0 ? true : _ref$highlight,
    _ref$mapProps = _ref.mapProps,
    mapProps = _ref$mapProps === void 0 ? _mapProps.defaultMapProps : _ref$mapProps;
  if (element == null) {
    return '(null)';
  }
  var _element$props = element.props,
    children = _element$props.children,
    props = (0, _objectWithoutProperties2.default)(_element$props, _excluded);
  var childrenToDisplay = typeof children === 'string' ? [children] : undefined;
  return (0, _prettyFormat.default)({
    $$typeof: Symbol.for('react.test.json'),
    type: `${element.type}`,
    props: mapProps ? mapProps(props) : props,
    children: childrenToDisplay
  }, {
    plugins: [_prettyFormat.plugins.ReactTestComponent, _prettyFormat.plugins.ReactElement],
    printFunctionName: false,
    printBasicPrototype: false,
    highlight: highlight,
    min: compact
  });
}
function formatElementList(elements, options) {
  if (elements.length === 0) {
    return '(no elements)';
  }
  return elements.map(function (element) {
    return formatElement(element, options);
  }).join('\n');
}
function formatJson(json) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    compact = _ref2.compact,
    _ref2$highlight = _ref2.highlight,
    highlight = _ref2$highlight === void 0 ? true : _ref2$highlight,
    _ref2$mapProps = _ref2.mapProps,
    mapProps = _ref2$mapProps === void 0 ? _mapProps.defaultMapProps : _ref2$mapProps;
  return (0, _prettyFormat.default)(json, {
    plugins: [getElementJsonPlugin(mapProps), _prettyFormat.plugins.ReactElement],
    highlight: highlight,
    printBasicPrototype: false,
    min: compact
  });
}
function getElementJsonPlugin(mapProps) {
  return {
    test: function test(val) {
      return _prettyFormat.plugins.ReactTestComponent.test(val);
    },
    serialize: function serialize(val, config, indentation, depth, refs, printer) {
      var newVal = val;
      if (mapProps && val.props) {
        newVal = Object.assign({}, val, {
          props: mapProps(val.props)
        });
      }
      return _prettyFormat.plugins.ReactTestComponent.serialize(newVal, config, indentation, depth, refs, printer);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,