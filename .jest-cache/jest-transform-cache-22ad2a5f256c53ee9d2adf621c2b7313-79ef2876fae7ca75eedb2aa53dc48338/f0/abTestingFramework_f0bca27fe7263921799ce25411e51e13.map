{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_featureFlags","ABTestingFramework","_classCallCheck2","default","STORAGE_KEYS","TESTS","ASSIGNMENTS","RESULTS","_createClass2","key","value","_getUserTestAssignment","_asyncToGenerator2","userId","FEATURE_FLAGS","isEnabled","testId","variantId","parameters","assignment","getExistingAssignment","test","getTest","status","variant","variants","find","v","eligibleTest","findEligibleTest","assignedVariant","assignUserToVariant","newAssignment","assignedAt","Date","isActive","saveAssignment","console","log","name","error","getUserTestAssignment","_x","apply","arguments","_recordTestEvent","eventType","metadata","length","undefined","result","timestamp","saveTestResult","recordTestEvent","_x2","_x3","_createTest","tests","getTests","push","AsyncStorage","setItem","JSON","stringify","createTest","_x4","_getTestAnalysis","_this","results","getTestResults","recommendation","analysis","_loop","variantResults","filter","r","shown","clicked","dismissed","clickThroughRate","dismissalRate","engagementTimes","map","sessionDuration","t","avgEngagementTime","reduce","sum","sampleSize","confidence","calculateStatisticalConfidence","Object","entries","sortedByMetric","sort","a","b","metricA","getMetricValue","primaryMetric","metricB","_sortedByMetric","_slicedToArray2","winnerData","runnerUpData","winnerMetric","runnerUpMetric","targetSampleSize","confidenceLevel","Math","abs","minimumEffectSize","winningVariant","isWinning","getTestAnalysis","_x5","getTestTemplates","description","startDate","endDate","now","participationRate","eligibilityCriteria","minAppUsageDays","weight","cooldownHours","snoozeHours","maxSuggestionsPerDay","secondaryMetrics","respectCircadianTiming","minimumTimingScore","showTimingReason","communicationStyle","showProgress","cardStyle","useAnimation","_getExistingAssignment","assignments","getAssignments","_x6","_findEligibleTest","activeTests","isUserEligible","random","_x7","_isUserEligible","_eligibilityCriteria$","excludeUserIds","includes","requiredFeatureFlags","flag","_x8","_x9","cumulativeWeight","metric","successRate","_getTests","stored","getItem","parse","_getTest","_x0","_getAssignments","_saveAssignment","_x1","_getTestResults","_x10","_saveTestResult","trimmed","slice","_x11","getInstance","instance","abTestingFramework","exports","_default"],"sources":["abTestingFramework.ts"],"sourcesContent":["/**\n * üß™ A/B Testing Framework for Adaptive Suggestions\n * \n * Test different approaches to adaptive interventions:\n * - Suggestion frequencies (conservative vs aggressive)\n * - Timing strategies (circadian-based vs fixed)\n * - Content approaches (direct vs gentle)\n * - Cooldown periods (2h vs 4h vs 6h)\n * \n * Privacy-first with opt-in participation and clear user control.\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\nimport { adaptiveSuggestionAnalytics } from '../analytics/adaptiveSuggestionAnalytics';\n\n// Types\ninterface ABTest {\n  testId: string;\n  name: string;\n  description: string;\n  \n  // Test configuration\n  startDate: Date;\n  endDate: Date;\n  status: 'draft' | 'active' | 'paused' | 'completed';\n  \n  // Participation\n  participationRate: number; // 0-1, what % of users should see this test\n  eligibilityCriteria: {\n    minAppUsageDays?: number;\n    requiredFeatureFlags?: string[];\n    excludeUserIds?: string[];\n  };\n  \n  // Test variants\n  variants: ABTestVariant[];\n  \n  // Success metrics\n  primaryMetric: 'click_through_rate' | 'dismissal_rate' | 'engagement_time' | 'user_satisfaction';\n  secondaryMetrics?: ('click_through_rate' | 'dismissal_rate' | 'engagement_time' | 'user_satisfaction')[];\n  \n  // Sample size and confidence\n  targetSampleSize: number;\n  confidenceLevel: number; // 0.95 for 95%\n  minimumEffectSize: number; // Minimum improvement to consider significant\n}\n\ninterface ABTestVariant {\n  variantId: string;\n  name: string;\n  weight: number; // 0-1, traffic allocation\n  \n  // Test parameters\n  parameters: {\n    // Timing parameters\n    cooldownHours?: number;\n    snoozeHours?: number;\n    respectCircadianTiming?: boolean;\n    minimumTimingScore?: number; // 0-100\n    \n    // Content parameters\n    communicationStyle?: 'direct' | 'gentle' | 'encouraging';\n    showConfidence?: boolean;\n    showTimingReason?: boolean;\n    \n    // Frequency parameters\n    maxSuggestionsPerDay?: number;\n    maxSuggestionsPerHour?: number;\n    aggressiveness?: 'conservative' | 'moderate' | 'aggressive';\n    \n    // UI parameters\n    cardStyle?: 'compact' | 'detailed';\n    showProgress?: boolean;\n    useAnimation?: boolean;\n  };\n}\n\ninterface ABTestAssignment {\n  userId: string;\n  testId: string;\n  variantId: string;\n  assignedAt: Date;\n  isActive: boolean;\n}\n\ninterface ABTestResult {\n  testId: string;\n  variantId: string;\n  userId: string;\n  eventType: 'suggestion_shown' | 'suggestion_clicked' | 'suggestion_dismissed';\n  timestamp: Date;\n  metadata: {\n    suggestionCategory?: string;\n    timingScore?: number;\n    userStressLevel?: string;\n    sessionDuration?: number;\n    snoozeHours?: number;\n  };\n}\n\ninterface ABTestAnalysis {\n  testId: string;\n  status: 'insufficient_data' | 'in_progress' | 'significant' | 'inconclusive';\n  results: {\n    [variantId: string]: {\n      sampleSize: number;\n      clickThroughRate: number;\n      dismissalRate: number;\n      avgEngagementTime: number;\n      confidence: number; // Statistical confidence\n      isWinning?: boolean;\n    };\n  };\n  recommendation: 'continue' | 'stop_test' | 'extend_test' | 'implement_winner';\n  winningVariant?: string;\n  statisticalSignificance?: number;\n}\n\nclass ABTestingFramework {\n  private static instance: ABTestingFramework;\n  private readonly STORAGE_KEYS = {\n    TESTS: 'ab_tests',\n    ASSIGNMENTS: 'ab_test_assignments',\n    RESULTS: 'ab_test_results'\n  };\n\n  private constructor() {}\n\n  public static getInstance(): ABTestingFramework {\n    if (!ABTestingFramework.instance) {\n      ABTestingFramework.instance = new ABTestingFramework();\n    }\n    return ABTestingFramework.instance;\n  }\n\n  /**\n   * üß™ Get user's test assignment for adaptive suggestions\n   */\n  async getUserTestAssignment(userId: string): Promise<{\n    testId: string | null;\n    variantId: string | null;\n    parameters: ABTestVariant['parameters'] | null;\n  }> {\n    if (!FEATURE_FLAGS.isEnabled('AI_AB_TESTING')) {\n      return { testId: null, variantId: null, parameters: null };\n    }\n\n    try {\n      // Check if user has existing assignment\n      const assignment = await this.getExistingAssignment(userId);\n      if (assignment) {\n        const test = await this.getTest(assignment.testId);\n        if (test && test.status === 'active') {\n          const variant = test.variants.find(v => v.variantId === assignment.variantId);\n          return {\n            testId: assignment.testId,\n            variantId: assignment.variantId,\n            parameters: variant?.parameters || null\n          };\n        }\n      }\n\n      // Check for new test eligibility\n      const eligibleTest = await this.findEligibleTest(userId);\n      if (eligibleTest) {\n        const assignedVariant = this.assignUserToVariant(eligibleTest);\n        const newAssignment: ABTestAssignment = {\n          userId,\n          testId: eligibleTest.testId,\n          variantId: assignedVariant.variantId,\n          assignedAt: new Date(),\n          isActive: true\n        };\n        \n        await this.saveAssignment(newAssignment);\n        \n        console.log(`üß™ User assigned to A/B test: ${eligibleTest.name} - ${assignedVariant.name}`);\n        \n        return {\n          testId: eligibleTest.testId,\n          variantId: assignedVariant.variantId,\n          parameters: assignedVariant.parameters\n        };\n      }\n\n      return { testId: null, variantId: null, parameters: null };\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get A/B test assignment:', error);\n      return { testId: null, variantId: null, parameters: null };\n    }\n  }\n\n  /**\n   * üìä Record A/B test event\n   */\n  async recordTestEvent(\n    userId: string,\n    eventType: ABTestResult['eventType'],\n    metadata: ABTestResult['metadata'] = {}\n  ): Promise<void> {\n    try {\n      const assignment = await this.getExistingAssignment(userId);\n      if (!assignment || !assignment.isActive) return;\n\n      const result: ABTestResult = {\n        testId: assignment.testId,\n        variantId: assignment.variantId,\n        userId,\n        eventType,\n        timestamp: new Date(),\n        metadata\n      };\n\n      await this.saveTestResult(result);\n      console.log(`üìä Recorded A/B test event: ${eventType} for variant ${assignment.variantId}`);\n      \n    } catch (error) {\n      console.error('‚ùå Failed to record A/B test event:', error);\n    }\n  }\n\n  /**\n   * üèóÔ∏è Create new A/B test\n   */\n  async createTest(test: ABTest): Promise<void> {\n    try {\n      const tests = await this.getTests();\n      tests.push(test);\n      await AsyncStorage.setItem(this.STORAGE_KEYS.TESTS, JSON.stringify(tests));\n      console.log(`üß™ Created A/B test: ${test.name}`);\n    } catch (error) {\n      console.error('‚ùå Failed to create A/B test:', error);\n    }\n  }\n\n  /**\n   * üìä Get test analysis\n   */\n  async getTestAnalysis(testId: string): Promise<ABTestAnalysis | null> {\n    try {\n      const results = await this.getTestResults(testId);\n      if (results.length === 0) {\n        return {\n          testId,\n          status: 'insufficient_data',\n          results: {},\n          recommendation: 'continue'\n        };\n      }\n\n      const test = await this.getTest(testId);\n      if (!test) return null;\n\n      const analysis: ABTestAnalysis = {\n        testId,\n        status: 'in_progress',\n        results: {},\n        recommendation: 'continue'\n      };\n\n      // Calculate metrics for each variant\n      for (const variant of test.variants) {\n        const variantResults = results.filter(r => r.variantId === variant.variantId);\n        const shown = variantResults.filter(r => r.eventType === 'suggestion_shown');\n        const clicked = variantResults.filter(r => r.eventType === 'suggestion_clicked');\n        const dismissed = variantResults.filter(r => r.eventType === 'suggestion_dismissed');\n\n        const clickThroughRate = shown.length > 0 ? clicked.length / shown.length : 0;\n        const dismissalRate = shown.length > 0 ? dismissed.length / shown.length : 0;\n        const engagementTimes = clicked\n          .map(r => r.metadata.sessionDuration || 0)\n          .filter(t => t > 0);\n        const avgEngagementTime = engagementTimes.length > 0 \n          ? engagementTimes.reduce((sum, t) => sum + t, 0) / engagementTimes.length \n          : 0;\n\n        analysis.results[variant.variantId] = {\n          sampleSize: shown.length,\n          clickThroughRate,\n          dismissalRate,\n          avgEngagementTime,\n          confidence: this.calculateStatisticalConfidence(shown.length, clickThroughRate)\n        };\n      }\n\n      // Determine winning variant and statistical significance\n      const variants = Object.entries(analysis.results);\n      if (variants.length >= 2) {\n        const sortedByMetric = variants.sort((a, b) => {\n          const metricA = this.getMetricValue(a[1], test.primaryMetric);\n          const metricB = this.getMetricValue(b[1], test.primaryMetric);\n          return metricB - metricA; // Higher is better for CTR, engagement; lower for dismissal\n        });\n\n        const [winnerData, runnerUpData] = sortedByMetric;\n        const winnerMetric = this.getMetricValue(winnerData[1], test.primaryMetric);\n        const runnerUpMetric = this.getMetricValue(runnerUpData[1], test.primaryMetric);\n        \n        if (winnerData[1].sampleSize >= test.targetSampleSize && \n            winnerData[1].confidence >= test.confidenceLevel &&\n            Math.abs(winnerMetric - runnerUpMetric) >= test.minimumEffectSize) {\n          \n          analysis.status = 'significant';\n          analysis.winningVariant = winnerData[0];\n          analysis.recommendation = 'implement_winner';\n          analysis.results[winnerData[0]].isWinning = true;\n        }\n      }\n\n      return analysis;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to analyze A/B test:', error);\n      return null;\n    }\n  }\n\n  /**\n   * üì¶ Get predefined test templates\n   */\n  getTestTemplates(): ABTest[] {\n    return [\n      {\n        testId: 'cooldown_frequency_test',\n        name: 'Suggestion Frequency Test',\n        description: 'Test different cooldown periods: 2h vs 4h vs 6h',\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days\n        status: 'draft',\n        participationRate: 0.3,\n        eligibilityCriteria: {\n          minAppUsageDays: 7\n        },\n        variants: [\n          {\n            variantId: 'control_4h',\n            name: 'Control (4h cooldown)',\n            weight: 0.4,\n            parameters: {\n              cooldownHours: 4,\n              snoozeHours: 2\n            }\n          },\n          {\n            variantId: 'aggressive_2h',\n            name: 'Aggressive (2h cooldown)',\n            weight: 0.3,\n            parameters: {\n              cooldownHours: 2,\n              snoozeHours: 1,\n              maxSuggestionsPerDay: 8\n            }\n          },\n          {\n            variantId: 'conservative_6h',\n            name: 'Conservative (6h cooldown)',\n            weight: 0.3,\n            parameters: {\n              cooldownHours: 6,\n              snoozeHours: 3,\n              maxSuggestionsPerDay: 4\n            }\n          }\n        ],\n        primaryMetric: 'click_through_rate',\n        secondaryMetrics: ['dismissal_rate', 'engagement_time'],\n        targetSampleSize: 100,\n        confidenceLevel: 0.95,\n        minimumEffectSize: 0.05\n      },\n\n      {\n        testId: 'timing_strategy_test',\n        name: 'Timing Strategy Test',\n        description: 'Test circadian-based timing vs fixed timing',\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 21 days\n        status: 'draft',\n        participationRate: 0.25,\n        eligibilityCriteria: {\n          minAppUsageDays: 14\n        },\n        variants: [\n          {\n            variantId: 'circadian_based',\n            name: 'Smart Timing (Circadian)',\n            weight: 0.5,\n            parameters: {\n              respectCircadianTiming: true,\n              minimumTimingScore: 50,\n              showTimingReason: true\n            }\n          },\n          {\n            variantId: 'fixed_timing',\n            name: 'Fixed Timing',\n            weight: 0.5,\n            parameters: {\n              respectCircadianTiming: false,\n              minimumTimingScore: 0\n            }\n          }\n        ],\n        primaryMetric: 'click_through_rate',\n        secondaryMetrics: ['user_satisfaction', 'engagement_time'],\n        targetSampleSize: 150,\n        confidenceLevel: 0.95,\n        minimumEffectSize: 0.08\n      },\n\n      {\n        testId: 'communication_style_test',\n        name: 'Communication Style Test',\n        description: 'Test direct vs gentle vs encouraging messaging',\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 days\n        status: 'draft',\n        participationRate: 0.4,\n        eligibilityCriteria: {},\n        variants: [\n          {\n            variantId: 'encouraging',\n            name: 'Encouraging Style',\n            weight: 0.4,\n            parameters: {\n              communicationStyle: 'encouraging',\n              showProgress: true\n            }\n          },\n          {\n            variantId: 'direct',\n            name: 'Direct Style',\n            weight: 0.3,\n            parameters: {\n              communicationStyle: 'direct',\n              cardStyle: 'compact'\n            }\n          },\n          {\n            variantId: 'gentle',\n            name: 'Gentle Style',\n            weight: 0.3,\n            parameters: {\n              communicationStyle: 'gentle',\n              cardStyle: 'detailed',\n              useAnimation: true\n            }\n          }\n        ],\n        primaryMetric: 'user_satisfaction',\n        secondaryMetrics: ['click_through_rate', 'dismissal_rate'],\n        targetSampleSize: 80,\n        confidenceLevel: 0.90,\n        minimumEffectSize: 0.10\n      }\n    ];\n  }\n\n  // =============================================================================\n  // PRIVATE HELPER METHODS\n  // =============================================================================\n\n  private async getExistingAssignment(userId: string): Promise<ABTestAssignment | null> {\n    try {\n      const assignments = await this.getAssignments();\n      return assignments.find(a => a.userId === userId && a.isActive) || null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  private async findEligibleTest(userId: string): Promise<ABTest | null> {\n    try {\n      const tests = await this.getTests();\n      const activeTests = tests.filter(t => \n        t.status === 'active' && \n        new Date() >= t.startDate && \n        new Date() <= t.endDate\n      );\n\n      for (const test of activeTests) {\n        // Check eligibility\n        if (!await this.isUserEligible(userId, test)) continue;\n\n        // Check participation rate\n        if (Math.random() > test.participationRate) continue;\n\n        return test;\n      }\n\n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  private async isUserEligible(userId: string, test: ABTest): Promise<boolean> {\n    const { eligibilityCriteria } = test;\n    \n    // Check exclusion list\n    if (eligibilityCriteria.excludeUserIds?.includes(userId)) {\n      return false;\n    }\n\n    // Check minimum usage days (simplified - would need real user data)\n    if (eligibilityCriteria.minAppUsageDays) {\n      // In a real implementation, check against user registration date\n      // For now, assume eligible\n    }\n\n    // Check feature flags\n    if (eligibilityCriteria.requiredFeatureFlags) {\n      for (const flag of eligibilityCriteria.requiredFeatureFlags) {\n        if (!FEATURE_FLAGS.isEnabled(flag as any)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private assignUserToVariant(test: ABTest): ABTestVariant {\n    const random = Math.random();\n    let cumulativeWeight = 0;\n    \n    for (const variant of test.variants) {\n      cumulativeWeight += variant.weight;\n      if (random <= cumulativeWeight) {\n        return variant;\n      }\n    }\n    \n    // Fallback to first variant\n    return test.variants[0];\n  }\n\n  private getMetricValue(result: ABTestAnalysis['results'][string], metric: ABTest['primaryMetric']): number {\n    switch (metric) {\n      case 'click_through_rate':\n        return result.clickThroughRate;\n      case 'dismissal_rate':\n        return 1 - result.dismissalRate; // Higher is better (lower dismissal)\n      case 'engagement_time':\n        return result.avgEngagementTime;\n      case 'user_satisfaction':\n        return result.clickThroughRate; // Proxy for satisfaction\n      default:\n        return result.clickThroughRate;\n    }\n  }\n\n  private calculateStatisticalConfidence(sampleSize: number, successRate: number): number {\n    // Simplified confidence calculation\n    // In production, use proper statistical tests\n    if (sampleSize < 10) return 0.1;\n    if (sampleSize < 50) return 0.5;\n    if (sampleSize < 100) return 0.8;\n    return 0.95;\n  }\n\n  // Storage helpers\n  private async getTests(): Promise<ABTest[]> {\n    try {\n      const stored = await AsyncStorage.getItem(this.STORAGE_KEYS.TESTS);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async getTest(testId: string): Promise<ABTest | null> {\n    const tests = await this.getTests();\n    return tests.find(t => t.testId === testId) || null;\n  }\n\n  private async getAssignments(): Promise<ABTestAssignment[]> {\n    try {\n      const stored = await AsyncStorage.getItem(this.STORAGE_KEYS.ASSIGNMENTS);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async saveAssignment(assignment: ABTestAssignment): Promise<void> {\n    try {\n      const assignments = await this.getAssignments();\n      assignments.push(assignment);\n      await AsyncStorage.setItem(this.STORAGE_KEYS.ASSIGNMENTS, JSON.stringify(assignments));\n    } catch (error) {\n      console.error('‚ùå Failed to save A/B test assignment:', error);\n    }\n  }\n\n  private async getTestResults(testId?: string): Promise<ABTestResult[]> {\n    try {\n      const stored = await AsyncStorage.getItem(this.STORAGE_KEYS.RESULTS);\n      const results: ABTestResult[] = stored ? JSON.parse(stored) : [];\n      return testId ? results.filter(r => r.testId === testId) : results;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async saveTestResult(result: ABTestResult): Promise<void> {\n    try {\n      const results = await this.getTestResults();\n      results.push(result);\n      // Keep only last 1000 results\n      const trimmed = results.slice(-1000);\n      await AsyncStorage.setItem(this.STORAGE_KEYS.RESULTS, JSON.stringify(trimmed));\n    } catch (error) {\n      console.error('‚ùå Failed to save A/B test result:', error);\n    }\n  }\n}\n\nexport const abTestingFramework = ABTestingFramework.getInstance();\nexport type { ABTest, ABTestVariant, ABTestAnalysis, ABTestAssignment };\nexport default abTestingFramework;\n"],"mappings":";;;;;;;;;AAYA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AAAyD,IA0GnDE,kBAAkB;EAQtB,SAAAA,mBAAA,EAAsB;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,kBAAA;IAAA,KANLG,YAAY,GAAG;MAC9BC,KAAK,EAAE,UAAU;MACjBC,WAAW,EAAE,qBAAqB;MAClCC,OAAO,EAAE;IACX,CAAC;EAEsB;EAAC,WAAAC,aAAA,CAAAL,OAAA,EAAAF,kBAAA;IAAAQ,GAAA;IAAAC,KAAA;MAAA,IAAAC,sBAAA,OAAAC,kBAAA,CAAAT,OAAA,EAYxB,WAA4BU,MAAc,EAIvC;QACD,IAAI,CAACC,2BAAa,CAACC,SAAS,CAAC,eAAe,CAAC,EAAE;UAC7C,OAAO;YAAEC,MAAM,EAAE,IAAI;YAAEC,SAAS,EAAE,IAAI;YAAEC,UAAU,EAAE;UAAK,CAAC;QAC5D;QAEA,IAAI;UAEF,IAAMC,UAAU,SAAS,IAAI,CAACC,qBAAqB,CAACP,MAAM,CAAC;UAC3D,IAAIM,UAAU,EAAE;YACd,IAAME,IAAI,SAAS,IAAI,CAACC,OAAO,CAACH,UAAU,CAACH,MAAM,CAAC;YAClD,IAAIK,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,QAAQ,EAAE;cACpC,IAAMC,OAAO,GAAGH,IAAI,CAACI,QAAQ,CAACC,IAAI,CAAC,UAAAC,CAAC;gBAAA,OAAIA,CAAC,CAACV,SAAS,KAAKE,UAAU,CAACF,SAAS;cAAA,EAAC;cAC7E,OAAO;gBACLD,MAAM,EAAEG,UAAU,CAACH,MAAM;gBACzBC,SAAS,EAAEE,UAAU,CAACF,SAAS;gBAC/BC,UAAU,EAAE,CAAAM,OAAO,oBAAPA,OAAO,CAAEN,UAAU,KAAI;cACrC,CAAC;YACH;UACF;UAGA,IAAMU,YAAY,SAAS,IAAI,CAACC,gBAAgB,CAAChB,MAAM,CAAC;UACxD,IAAIe,YAAY,EAAE;YAChB,IAAME,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAACH,YAAY,CAAC;YAC9D,IAAMI,aAA+B,GAAG;cACtCnB,MAAM,EAANA,MAAM;cACNG,MAAM,EAAEY,YAAY,CAACZ,MAAM;cAC3BC,SAAS,EAAEa,eAAe,CAACb,SAAS;cACpCgB,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC;cACtBC,QAAQ,EAAE;YACZ,CAAC;YAED,MAAM,IAAI,CAACC,cAAc,CAACJ,aAAa,CAAC;YAExCK,OAAO,CAACC,GAAG,CAAC,iCAAiCV,YAAY,CAACW,IAAI,MAAMT,eAAe,CAACS,IAAI,EAAE,CAAC;YAE3F,OAAO;cACLvB,MAAM,EAAEY,YAAY,CAACZ,MAAM;cAC3BC,SAAS,EAAEa,eAAe,CAACb,SAAS;cACpCC,UAAU,EAAEY,eAAe,CAACZ;YAC9B,CAAC;UACH;UAEA,OAAO;YAAEF,MAAM,EAAE,IAAI;YAAEC,SAAS,EAAE,IAAI;YAAEC,UAAU,EAAE;UAAK,CAAC;QAE5D,CAAC,CAAC,OAAOsB,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;UAC5D,OAAO;YAAExB,MAAM,EAAE,IAAI;YAAEC,SAAS,EAAE,IAAI;YAAEC,UAAU,EAAE;UAAK,CAAC;QAC5D;MACF,CAAC;MAAA,SArDKuB,qBAAqBA,CAAAC,EAAA;QAAA,OAAA/B,sBAAA,CAAAgC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAArBH,qBAAqB;IAAA;EAAA;IAAAhC,GAAA;IAAAC,KAAA;MAAA,IAAAmC,gBAAA,OAAAjC,kBAAA,CAAAT,OAAA,EA0D3B,WACEU,MAAc,EACdiC,SAAoC,EAErB;QAAA,IADfC,QAAkC,GAAAH,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAAG,CAAC,CAAC;QAEvC,IAAI;UACF,IAAMzB,UAAU,SAAS,IAAI,CAACC,qBAAqB,CAACP,MAAM,CAAC;UAC3D,IAAI,CAACM,UAAU,IAAI,CAACA,UAAU,CAACgB,QAAQ,EAAE;UAEzC,IAAMe,MAAoB,GAAG;YAC3BlC,MAAM,EAAEG,UAAU,CAACH,MAAM;YACzBC,SAAS,EAAEE,UAAU,CAACF,SAAS;YAC/BJ,MAAM,EAANA,MAAM;YACNiC,SAAS,EAATA,SAAS;YACTK,SAAS,EAAE,IAAIjB,IAAI,CAAC,CAAC;YACrBa,QAAQ,EAARA;UACF,CAAC;UAED,MAAM,IAAI,CAACK,cAAc,CAACF,MAAM,CAAC;UACjCb,OAAO,CAACC,GAAG,CAAC,+BAA+BQ,SAAS,gBAAgB3B,UAAU,CAACF,SAAS,EAAE,CAAC;QAE7F,CAAC,CAAC,OAAOuB,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC5D;MACF,CAAC;MAAA,SAxBKa,eAAeA,CAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAV,gBAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAfS,eAAe;IAAA;EAAA;IAAA5C,GAAA;IAAAC,KAAA;MAAA,IAAA8C,WAAA,OAAA5C,kBAAA,CAAAT,OAAA,EA6BrB,WAAiBkB,IAAY,EAAiB;QAC5C,IAAI;UACF,IAAMoC,KAAK,SAAS,IAAI,CAACC,QAAQ,CAAC,CAAC;UACnCD,KAAK,CAACE,IAAI,CAACtC,IAAI,CAAC;UAChB,MAAMuC,qBAAY,CAACC,OAAO,CAAC,IAAI,CAACzD,YAAY,CAACC,KAAK,EAAEyD,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC,CAAC;UAC1EpB,OAAO,CAACC,GAAG,CAAC,wBAAwBjB,IAAI,CAACkB,IAAI,EAAE,CAAC;QAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF,CAAC;MAAA,SATKwB,UAAUA,CAAAC,GAAA;QAAA,OAAAT,WAAA,CAAAb,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAVoB,UAAU;IAAA;EAAA;IAAAvD,GAAA;IAAAC,KAAA;MAAA,IAAAwD,gBAAA,OAAAtD,kBAAA,CAAAT,OAAA,EAchB,WAAsBa,MAAc,EAAkC;QAAA,IAAAmD,KAAA;QACpE,IAAI;UACF,IAAMC,OAAO,SAAS,IAAI,CAACC,cAAc,CAACrD,MAAM,CAAC;UACjD,IAAIoD,OAAO,CAACpB,MAAM,KAAK,CAAC,EAAE;YACxB,OAAO;cACLhC,MAAM,EAANA,MAAM;cACNO,MAAM,EAAE,mBAAmB;cAC3B6C,OAAO,EAAE,CAAC,CAAC;cACXE,cAAc,EAAE;YAClB,CAAC;UACH;UAEA,IAAMjD,IAAI,SAAS,IAAI,CAACC,OAAO,CAACN,MAAM,CAAC;UACvC,IAAI,CAACK,IAAI,EAAE,OAAO,IAAI;UAEtB,IAAMkD,QAAwB,GAAG;YAC/BvD,MAAM,EAANA,MAAM;YACNO,MAAM,EAAE,aAAa;YACrB6C,OAAO,EAAE,CAAC,CAAC;YACXE,cAAc,EAAE;UAClB,CAAC;UAAC,IAAAE,KAAA,aAAAA,MAAAhD,OAAA,EAGmC;YACnC,IAAMiD,cAAc,GAAGL,OAAO,CAACM,MAAM,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAAC1D,SAAS,KAAKO,OAAO,CAACP,SAAS;YAAA,EAAC;YAC7E,IAAM2D,KAAK,GAAGH,cAAc,CAACC,MAAM,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAAC7B,SAAS,KAAK,kBAAkB;YAAA,EAAC;YAC5E,IAAM+B,OAAO,GAAGJ,cAAc,CAACC,MAAM,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAAC7B,SAAS,KAAK,oBAAoB;YAAA,EAAC;YAChF,IAAMgC,SAAS,GAAGL,cAAc,CAACC,MAAM,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAAC7B,SAAS,KAAK,sBAAsB;YAAA,EAAC;YAEpF,IAAMiC,gBAAgB,GAAGH,KAAK,CAAC5B,MAAM,GAAG,CAAC,GAAG6B,OAAO,CAAC7B,MAAM,GAAG4B,KAAK,CAAC5B,MAAM,GAAG,CAAC;YAC7E,IAAMgC,aAAa,GAAGJ,KAAK,CAAC5B,MAAM,GAAG,CAAC,GAAG8B,SAAS,CAAC9B,MAAM,GAAG4B,KAAK,CAAC5B,MAAM,GAAG,CAAC;YAC5E,IAAMiC,eAAe,GAAGJ,OAAO,CAC5BK,GAAG,CAAC,UAAAP,CAAC;cAAA,OAAIA,CAAC,CAAC5B,QAAQ,CAACoC,eAAe,IAAI,CAAC;YAAA,EAAC,CACzCT,MAAM,CAAC,UAAAU,CAAC;cAAA,OAAIA,CAAC,GAAG,CAAC;YAAA,EAAC;YACrB,IAAMC,iBAAiB,GAAGJ,eAAe,CAACjC,MAAM,GAAG,CAAC,GAChDiC,eAAe,CAACK,MAAM,CAAC,UAACC,GAAG,EAAEH,CAAC;cAAA,OAAKG,GAAG,GAAGH,CAAC;YAAA,GAAE,CAAC,CAAC,GAAGH,eAAe,CAACjC,MAAM,GACvE,CAAC;YAELuB,QAAQ,CAACH,OAAO,CAAC5C,OAAO,CAACP,SAAS,CAAC,GAAG;cACpCuE,UAAU,EAAEZ,KAAK,CAAC5B,MAAM;cACxB+B,gBAAgB,EAAhBA,gBAAgB;cAChBC,aAAa,EAAbA,aAAa;cACbK,iBAAiB,EAAjBA,iBAAiB;cACjBI,UAAU,EAAEtB,KAAI,CAACuB,8BAA8B,CAACd,KAAK,CAAC5B,MAAM,EAAE+B,gBAAgB;YAChF,CAAC;UACH,CAAC;UAtBD,KAAK,IAAMvD,OAAO,IAAIH,IAAI,CAACI,QAAQ;YAAA,OAAA+C,KAAA,CAAAhD,OAAA;UAAA;UAyBnC,IAAMC,QAAQ,GAAGkE,MAAM,CAACC,OAAO,CAACrB,QAAQ,CAACH,OAAO,CAAC;UACjD,IAAI3C,QAAQ,CAACuB,MAAM,IAAI,CAAC,EAAE;YACxB,IAAM6C,cAAc,GAAGpE,QAAQ,CAACqE,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;cAC7C,IAAMC,OAAO,GAAG9B,KAAI,CAAC+B,cAAc,CAACH,CAAC,CAAC,CAAC,CAAC,EAAE1E,IAAI,CAAC8E,aAAa,CAAC;cAC7D,IAAMC,OAAO,GAAGjC,KAAI,CAAC+B,cAAc,CAACF,CAAC,CAAC,CAAC,CAAC,EAAE3E,IAAI,CAAC8E,aAAa,CAAC;cAC7D,OAAOC,OAAO,GAAGH,OAAO;YAC1B,CAAC,CAAC;YAEF,IAAAI,eAAA,OAAAC,eAAA,CAAAnG,OAAA,EAAmC0F,cAAc;cAA1CU,UAAU,GAAAF,eAAA;cAAEG,YAAY,GAAAH,eAAA;YAC/B,IAAMI,YAAY,GAAG,IAAI,CAACP,cAAc,CAACK,UAAU,CAAC,CAAC,CAAC,EAAElF,IAAI,CAAC8E,aAAa,CAAC;YAC3E,IAAMO,cAAc,GAAG,IAAI,CAACR,cAAc,CAACM,YAAY,CAAC,CAAC,CAAC,EAAEnF,IAAI,CAAC8E,aAAa,CAAC;YAE/E,IAAII,UAAU,CAAC,CAAC,CAAC,CAACf,UAAU,IAAInE,IAAI,CAACsF,gBAAgB,IACjDJ,UAAU,CAAC,CAAC,CAAC,CAACd,UAAU,IAAIpE,IAAI,CAACuF,eAAe,IAChDC,IAAI,CAACC,GAAG,CAACL,YAAY,GAAGC,cAAc,CAAC,IAAIrF,IAAI,CAAC0F,iBAAiB,EAAE;cAErExC,QAAQ,CAAChD,MAAM,GAAG,aAAa;cAC/BgD,QAAQ,CAACyC,cAAc,GAAGT,UAAU,CAAC,CAAC,CAAC;cACvChC,QAAQ,CAACD,cAAc,GAAG,kBAAkB;cAC5CC,QAAQ,CAACH,OAAO,CAACmC,UAAU,CAAC,CAAC,CAAC,CAAC,CAACU,SAAS,GAAG,IAAI;YAClD;UACF;UAEA,OAAO1C,QAAQ;QAEjB,CAAC,CAAC,OAAO/B,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;UACrD,OAAO,IAAI;QACb;MACF,CAAC;MAAA,SA7EK0E,eAAeA,CAAAC,GAAA;QAAA,OAAAjD,gBAAA,CAAAvB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAfsE,eAAe;IAAA;EAAA;IAAAzG,GAAA;IAAAC,KAAA,EAkFrB,SAAA0G,gBAAgBA,CAAA,EAAa;MAC3B,OAAO,CACL;QACEpG,MAAM,EAAE,yBAAyB;QACjCuB,IAAI,EAAE,2BAA2B;QACjC8E,WAAW,EAAE,iDAAiD;QAC9DC,SAAS,EAAE,IAAIpF,IAAI,CAAC,CAAC;QACrBqF,OAAO,EAAE,IAAIrF,IAAI,CAACA,IAAI,CAACsF,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACxDjG,MAAM,EAAE,OAAO;QACfkG,iBAAiB,EAAE,GAAG;QACtBC,mBAAmB,EAAE;UACnBC,eAAe,EAAE;QACnB,CAAC;QACDlG,QAAQ,EAAE,CACR;UACER,SAAS,EAAE,YAAY;UACvBsB,IAAI,EAAE,uBAAuB;UAC7BqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACV2G,aAAa,EAAE,CAAC;YAChBC,WAAW,EAAE;UACf;QACF,CAAC,EACD;UACE7G,SAAS,EAAE,eAAe;UAC1BsB,IAAI,EAAE,0BAA0B;UAChCqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACV2G,aAAa,EAAE,CAAC;YAChBC,WAAW,EAAE,CAAC;YACdC,oBAAoB,EAAE;UACxB;QACF,CAAC,EACD;UACE9G,SAAS,EAAE,iBAAiB;UAC5BsB,IAAI,EAAE,4BAA4B;UAClCqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACV2G,aAAa,EAAE,CAAC;YAChBC,WAAW,EAAE,CAAC;YACdC,oBAAoB,EAAE;UACxB;QACF,CAAC,CACF;QACD5B,aAAa,EAAE,oBAAoB;QACnC6B,gBAAgB,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;QACvDrB,gBAAgB,EAAE,GAAG;QACrBC,eAAe,EAAE,IAAI;QACrBG,iBAAiB,EAAE;MACrB,CAAC,EAED;QACE/F,MAAM,EAAE,sBAAsB;QAC9BuB,IAAI,EAAE,sBAAsB;QAC5B8E,WAAW,EAAE,6CAA6C;QAC1DC,SAAS,EAAE,IAAIpF,IAAI,CAAC,CAAC;QACrBqF,OAAO,EAAE,IAAIrF,IAAI,CAACA,IAAI,CAACsF,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACxDjG,MAAM,EAAE,OAAO;QACfkG,iBAAiB,EAAE,IAAI;QACvBC,mBAAmB,EAAE;UACnBC,eAAe,EAAE;QACnB,CAAC;QACDlG,QAAQ,EAAE,CACR;UACER,SAAS,EAAE,iBAAiB;UAC5BsB,IAAI,EAAE,0BAA0B;UAChCqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACV+G,sBAAsB,EAAE,IAAI;YAC5BC,kBAAkB,EAAE,EAAE;YACtBC,gBAAgB,EAAE;UACpB;QACF,CAAC,EACD;UACElH,SAAS,EAAE,cAAc;UACzBsB,IAAI,EAAE,cAAc;UACpBqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACV+G,sBAAsB,EAAE,KAAK;YAC7BC,kBAAkB,EAAE;UACtB;QACF,CAAC,CACF;QACD/B,aAAa,EAAE,oBAAoB;QACnC6B,gBAAgB,EAAE,CAAC,mBAAmB,EAAE,iBAAiB,CAAC;QAC1DrB,gBAAgB,EAAE,GAAG;QACrBC,eAAe,EAAE,IAAI;QACrBG,iBAAiB,EAAE;MACrB,CAAC,EAED;QACE/F,MAAM,EAAE,0BAA0B;QAClCuB,IAAI,EAAE,0BAA0B;QAChC8E,WAAW,EAAE,gDAAgD;QAC7DC,SAAS,EAAE,IAAIpF,IAAI,CAAC,CAAC;QACrBqF,OAAO,EAAE,IAAIrF,IAAI,CAACA,IAAI,CAACsF,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACxDjG,MAAM,EAAE,OAAO;QACfkG,iBAAiB,EAAE,GAAG;QACtBC,mBAAmB,EAAE,CAAC,CAAC;QACvBjG,QAAQ,EAAE,CACR;UACER,SAAS,EAAE,aAAa;UACxBsB,IAAI,EAAE,mBAAmB;UACzBqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACVkH,kBAAkB,EAAE,aAAa;YACjCC,YAAY,EAAE;UAChB;QACF,CAAC,EACD;UACEpH,SAAS,EAAE,QAAQ;UACnBsB,IAAI,EAAE,cAAc;UACpBqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACVkH,kBAAkB,EAAE,QAAQ;YAC5BE,SAAS,EAAE;UACb;QACF,CAAC,EACD;UACErH,SAAS,EAAE,QAAQ;UACnBsB,IAAI,EAAE,cAAc;UACpBqF,MAAM,EAAE,GAAG;UACX1G,UAAU,EAAE;YACVkH,kBAAkB,EAAE,QAAQ;YAC5BE,SAAS,EAAE,UAAU;YACrBC,YAAY,EAAE;UAChB;QACF,CAAC,CACF;QACDpC,aAAa,EAAE,mBAAmB;QAClC6B,gBAAgB,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;QAC1DrB,gBAAgB,EAAE,EAAE;QACpBC,eAAe,EAAE,IAAI;QACrBG,iBAAiB,EAAE;MACrB,CAAC,CACF;IACH;EAAC;IAAAtG,GAAA;IAAAC,KAAA;MAAA,IAAA8H,sBAAA,OAAA5H,kBAAA,CAAAT,OAAA,EAMD,WAAoCU,MAAc,EAAoC;QACpF,IAAI;UACF,IAAM4H,WAAW,SAAS,IAAI,CAACC,cAAc,CAAC,CAAC;UAC/C,OAAOD,WAAW,CAAC/G,IAAI,CAAC,UAAAqE,CAAC;YAAA,OAAIA,CAAC,CAAClF,MAAM,KAAKA,MAAM,IAAIkF,CAAC,CAAC5D,QAAQ;UAAA,EAAC,IAAI,IAAI;QACzE,CAAC,CAAC,OAAOK,KAAK,EAAE;UACd,OAAO,IAAI;QACb;MACF,CAAC;MAAA,SAPapB,qBAAqBA,CAAAuH,GAAA;QAAA,OAAAH,sBAAA,CAAA7F,KAAA,OAAAC,SAAA;MAAA;MAAA,OAArBxB,qBAAqB;IAAA;EAAA;IAAAX,GAAA;IAAAC,KAAA;MAAA,IAAAkI,iBAAA,OAAAhI,kBAAA,CAAAT,OAAA,EASnC,WAA+BU,MAAc,EAA0B;QACrE,IAAI;UACF,IAAM4C,KAAK,SAAS,IAAI,CAACC,QAAQ,CAAC,CAAC;UACnC,IAAMmF,WAAW,GAAGpF,KAAK,CAACiB,MAAM,CAAC,UAAAU,CAAC;YAAA,OAChCA,CAAC,CAAC7D,MAAM,KAAK,QAAQ,IACrB,IAAIW,IAAI,CAAC,CAAC,IAAIkD,CAAC,CAACkC,SAAS,IACzB,IAAIpF,IAAI,CAAC,CAAC,IAAIkD,CAAC,CAACmC,OAAO;UAAA,CACzB,CAAC;UAED,KAAK,IAAMlG,IAAI,IAAIwH,WAAW,EAAE;YAE9B,IAAI,QAAO,IAAI,CAACC,cAAc,CAACjI,MAAM,EAAEQ,IAAI,CAAC,GAAE;YAG9C,IAAIwF,IAAI,CAACkC,MAAM,CAAC,CAAC,GAAG1H,IAAI,CAACoG,iBAAiB,EAAE;YAE5C,OAAOpG,IAAI;UACb;UAEA,OAAO,IAAI;QACb,CAAC,CAAC,OAAOmB,KAAK,EAAE;UACd,OAAO,IAAI;QACb;MACF,CAAC;MAAA,SAvBaX,gBAAgBA,CAAAmH,GAAA;QAAA,OAAAJ,iBAAA,CAAAjG,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAhBf,gBAAgB;IAAA;EAAA;IAAApB,GAAA;IAAAC,KAAA;MAAA,IAAAuI,eAAA,OAAArI,kBAAA,CAAAT,OAAA,EAyB9B,WAA6BU,MAAc,EAAEQ,IAAY,EAAoB;QAAA,IAAA6H,qBAAA;QAC3E,IAAQxB,mBAAmB,GAAKrG,IAAI,CAA5BqG,mBAAmB;QAG3B,KAAAwB,qBAAA,GAAIxB,mBAAmB,CAACyB,cAAc,aAAlCD,qBAAA,CAAoCE,QAAQ,CAACvI,MAAM,CAAC,EAAE;UACxD,OAAO,KAAK;QACd;QAGA,IAAI6G,mBAAmB,CAACC,eAAe,EAAE,CAGzC;QAGA,IAAID,mBAAmB,CAAC2B,oBAAoB,EAAE;UAC5C,KAAK,IAAMC,IAAI,IAAI5B,mBAAmB,CAAC2B,oBAAoB,EAAE;YAC3D,IAAI,CAACvI,2BAAa,CAACC,SAAS,CAACuI,IAAW,CAAC,EAAE;cACzC,OAAO,KAAK;YACd;UACF;QACF;QAEA,OAAO,IAAI;MACb,CAAC;MAAA,SAxBaR,cAAcA,CAAAS,GAAA,EAAAC,GAAA;QAAA,OAAAP,eAAA,CAAAtG,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAdkG,cAAc;IAAA;EAAA;IAAArI,GAAA;IAAAC,KAAA,EA0B5B,SAAQqB,mBAAmBA,CAACV,IAAY,EAAiB;MACvD,IAAM0H,MAAM,GAAGlC,IAAI,CAACkC,MAAM,CAAC,CAAC;MAC5B,IAAIU,gBAAgB,GAAG,CAAC;MAExB,KAAK,IAAMjI,OAAO,IAAIH,IAAI,CAACI,QAAQ,EAAE;QACnCgI,gBAAgB,IAAIjI,OAAO,CAACoG,MAAM;QAClC,IAAImB,MAAM,IAAIU,gBAAgB,EAAE;UAC9B,OAAOjI,OAAO;QAChB;MACF;MAGA,OAAOH,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC;IACzB;EAAC;IAAAhB,GAAA;IAAAC,KAAA,EAED,SAAQwF,cAAcA,CAAChD,MAAyC,EAAEwG,MAA+B,EAAU;MACzG,QAAQA,MAAM;QACZ,KAAK,oBAAoB;UACvB,OAAOxG,MAAM,CAAC6B,gBAAgB;QAChC,KAAK,gBAAgB;UACnB,OAAO,CAAC,GAAG7B,MAAM,CAAC8B,aAAa;QACjC,KAAK,iBAAiB;UACpB,OAAO9B,MAAM,CAACmC,iBAAiB;QACjC,KAAK,mBAAmB;UACtB,OAAOnC,MAAM,CAAC6B,gBAAgB;QAChC;UACE,OAAO7B,MAAM,CAAC6B,gBAAgB;MAClC;IACF;EAAC;IAAAtE,GAAA;IAAAC,KAAA,EAED,SAAQgF,8BAA8BA,CAACF,UAAkB,EAAEmE,WAAmB,EAAU;MAGtF,IAAInE,UAAU,GAAG,EAAE,EAAE,OAAO,GAAG;MAC/B,IAAIA,UAAU,GAAG,EAAE,EAAE,OAAO,GAAG;MAC/B,IAAIA,UAAU,GAAG,GAAG,EAAE,OAAO,GAAG;MAChC,OAAO,IAAI;IACb;EAAC;IAAA/E,GAAA;IAAAC,KAAA;MAAA,IAAAkJ,SAAA,OAAAhJ,kBAAA,CAAAT,OAAA,EAGD,aAA4C;QAC1C,IAAI;UACF,IAAM0J,MAAM,SAASjG,qBAAY,CAACkG,OAAO,CAAC,IAAI,CAAC1J,YAAY,CAACC,KAAK,CAAC;UAClE,OAAOwJ,MAAM,GAAG/F,IAAI,CAACiG,KAAK,CAACF,MAAM,CAAC,GAAG,EAAE;QACzC,CAAC,CAAC,OAAOrH,KAAK,EAAE;UACd,OAAO,EAAE;QACX;MACF,CAAC;MAAA,SAPakB,QAAQA,CAAA;QAAA,OAAAkG,SAAA,CAAAjH,KAAA,OAAAC,SAAA;MAAA;MAAA,OAARc,QAAQ;IAAA;EAAA;IAAAjD,GAAA;IAAAC,KAAA;MAAA,IAAAsJ,QAAA,OAAApJ,kBAAA,CAAAT,OAAA,EAStB,WAAsBa,MAAc,EAA0B;QAC5D,IAAMyC,KAAK,SAAS,IAAI,CAACC,QAAQ,CAAC,CAAC;QACnC,OAAOD,KAAK,CAAC/B,IAAI,CAAC,UAAA0D,CAAC;UAAA,OAAIA,CAAC,CAACpE,MAAM,KAAKA,MAAM;QAAA,EAAC,IAAI,IAAI;MACrD,CAAC;MAAA,SAHaM,OAAOA,CAAA2I,GAAA;QAAA,OAAAD,QAAA,CAAArH,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAPtB,OAAO;IAAA;EAAA;IAAAb,GAAA;IAAAC,KAAA;MAAA,IAAAwJ,eAAA,OAAAtJ,kBAAA,CAAAT,OAAA,EAKrB,aAA4D;QAC1D,IAAI;UACF,IAAM0J,MAAM,SAASjG,qBAAY,CAACkG,OAAO,CAAC,IAAI,CAAC1J,YAAY,CAACE,WAAW,CAAC;UACxE,OAAOuJ,MAAM,GAAG/F,IAAI,CAACiG,KAAK,CAACF,MAAM,CAAC,GAAG,EAAE;QACzC,CAAC,CAAC,OAAOrH,KAAK,EAAE;UACd,OAAO,EAAE;QACX;MACF,CAAC;MAAA,SAPakG,cAAcA,CAAA;QAAA,OAAAwB,eAAA,CAAAvH,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAd8F,cAAc;IAAA;EAAA;IAAAjI,GAAA;IAAAC,KAAA;MAAA,IAAAyJ,eAAA,OAAAvJ,kBAAA,CAAAT,OAAA,EAS5B,WAA6BgB,UAA4B,EAAiB;QACxE,IAAI;UACF,IAAMsH,WAAW,SAAS,IAAI,CAACC,cAAc,CAAC,CAAC;UAC/CD,WAAW,CAAC9E,IAAI,CAACxC,UAAU,CAAC;UAC5B,MAAMyC,qBAAY,CAACC,OAAO,CAAC,IAAI,CAACzD,YAAY,CAACE,WAAW,EAAEwD,IAAI,CAACC,SAAS,CAAC0E,WAAW,CAAC,CAAC;QACxF,CAAC,CAAC,OAAOjG,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QAC/D;MACF,CAAC;MAAA,SARaJ,cAAcA,CAAAgI,GAAA;QAAA,OAAAD,eAAA,CAAAxH,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAdR,cAAc;IAAA;EAAA;IAAA3B,GAAA;IAAAC,KAAA;MAAA,IAAA2J,eAAA,OAAAzJ,kBAAA,CAAAT,OAAA,EAU5B,WAA6Ba,MAAe,EAA2B;QACrE,IAAI;UACF,IAAM6I,MAAM,SAASjG,qBAAY,CAACkG,OAAO,CAAC,IAAI,CAAC1J,YAAY,CAACG,OAAO,CAAC;UACpE,IAAM6D,OAAuB,GAAGyF,MAAM,GAAG/F,IAAI,CAACiG,KAAK,CAACF,MAAM,CAAC,GAAG,EAAE;UAChE,OAAO7I,MAAM,GAAGoD,OAAO,CAACM,MAAM,CAAC,UAAAC,CAAC;YAAA,OAAIA,CAAC,CAAC3D,MAAM,KAAKA,MAAM;UAAA,EAAC,GAAGoD,OAAO;QACpE,CAAC,CAAC,OAAO5B,KAAK,EAAE;UACd,OAAO,EAAE;QACX;MACF,CAAC;MAAA,SARa6B,cAAcA,CAAAiG,IAAA;QAAA,OAAAD,eAAA,CAAA1H,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAdyB,cAAc;IAAA;EAAA;IAAA5D,GAAA;IAAAC,KAAA;MAAA,IAAA6J,eAAA,OAAA3J,kBAAA,CAAAT,OAAA,EAU5B,WAA6B+C,MAAoB,EAAiB;QAChE,IAAI;UACF,IAAMkB,OAAO,SAAS,IAAI,CAACC,cAAc,CAAC,CAAC;UAC3CD,OAAO,CAACT,IAAI,CAACT,MAAM,CAAC;UAEpB,IAAMsH,OAAO,GAAGpG,OAAO,CAACqG,KAAK,CAAC,CAAC,IAAI,CAAC;UACpC,MAAM7G,qBAAY,CAACC,OAAO,CAAC,IAAI,CAACzD,YAAY,CAACG,OAAO,EAAEuD,IAAI,CAACC,SAAS,CAACyG,OAAO,CAAC,CAAC;QAChF,CAAC,CAAC,OAAOhI,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QAC3D;MACF,CAAC;MAAA,SAVaY,cAAcA,CAAAsH,IAAA;QAAA,OAAAH,eAAA,CAAA5H,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAdQ,cAAc;IAAA;EAAA;IAAA3C,GAAA;IAAAC,KAAA,EA9d5B,SAAciK,WAAWA,CAAA,EAAuB;MAC9C,IAAI,CAAC1K,kBAAkB,CAAC2K,QAAQ,EAAE;QAChC3K,kBAAkB,CAAC2K,QAAQ,GAAG,IAAI3K,kBAAkB,CAAC,CAAC;MACxD;MACA,OAAOA,kBAAkB,CAAC2K,QAAQ;IACpC;EAAC;AAAA;AAseI,IAAMC,kBAAkB,GAAAC,OAAA,CAAAD,kBAAA,GAAG5K,kBAAkB,CAAC0K,WAAW,CAAC,CAAC;AAAC,IAAAI,QAAA,GAAAD,OAAA,CAAA3K,OAAA,GAEpD0K,kBAAkB","ignoreList":[]}