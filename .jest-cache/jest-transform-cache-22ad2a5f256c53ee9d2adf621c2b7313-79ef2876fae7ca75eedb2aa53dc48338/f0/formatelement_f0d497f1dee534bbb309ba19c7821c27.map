{"version":3,"names":["_prettyFormat","_interopRequireWildcard","require","_mapProps","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","formatElement","element","_ref","arguments","length","undefined","compact","_ref$highlight","highlight","_ref$mapProps","mapProps","defaultMapProps","_element$props","props","children","_objectWithoutProperties2","_excluded","childrenToDisplay","$$typeof","Symbol","for","type","plugins","ReactTestComponent","ReactElement","printFunctionName","printBasicPrototype","min","formatElementList","elements","options","map","join","formatJson","json","_ref2","_ref2$highlight","_ref2$mapProps","getElementJsonPlugin","test","val","serialize","config","indentation","depth","refs","printer","newVal","assign"],"sources":["../../src/helpers/format-element.ts"],"sourcesContent":["import type { ReactTestInstance, ReactTestRendererJSON } from 'react-test-renderer';\nimport type { NewPlugin } from 'pretty-format';\nimport prettyFormat, { plugins } from 'pretty-format';\n\nimport type { MapPropsFunction } from './map-props';\nimport { defaultMapProps } from './map-props';\n\nexport type FormatElementOptions = {\n  /** Minimize used space. */\n  compact?: boolean;\n\n  /** Highlight the output. */\n  highlight?: boolean;\n\n  /** Filter or map props to display. */\n  mapProps?: MapPropsFunction | null;\n};\n\n/***\n * Format given element as a pretty-printed string.\n *\n * @param element Element to format.\n */\nexport function formatElement(\n  element: ReactTestInstance | null,\n  { compact, highlight = true, mapProps = defaultMapProps }: FormatElementOptions = {},\n) {\n  if (element == null) {\n    return '(null)';\n  }\n\n  const { children, ...props } = element.props;\n  const childrenToDisplay = typeof children === 'string' ? [children] : undefined;\n\n  return prettyFormat(\n    {\n      // This prop is needed persuade the prettyFormat that the element is\n      // a ReactTestRendererJSON instance, so it is formatted as JSX.\n      $$typeof: Symbol.for('react.test.json'),\n      type: `${element.type}`,\n      props: mapProps ? mapProps(props) : props,\n      children: childrenToDisplay,\n    },\n    // See: https://www.npmjs.com/package/pretty-format#usage-with-options\n    {\n      plugins: [plugins.ReactTestComponent, plugins.ReactElement],\n      printFunctionName: false,\n      printBasicPrototype: false,\n      highlight: highlight,\n      min: compact,\n    },\n  );\n}\n\nexport function formatElementList(elements: ReactTestInstance[], options?: FormatElementOptions) {\n  if (elements.length === 0) {\n    return '(no elements)';\n  }\n\n  return elements.map((element) => formatElement(element, options)).join('\\n');\n}\n\nexport function formatJson(\n  json: ReactTestRendererJSON | ReactTestRendererJSON[],\n  { compact, highlight = true, mapProps = defaultMapProps }: FormatElementOptions = {},\n) {\n  return prettyFormat(json, {\n    plugins: [getElementJsonPlugin(mapProps), plugins.ReactElement],\n    highlight: highlight,\n    printBasicPrototype: false,\n    min: compact,\n  });\n}\n\nfunction getElementJsonPlugin(mapProps?: MapPropsFunction | null): NewPlugin {\n  return {\n    test: (val) => plugins.ReactTestComponent.test(val),\n    serialize: (val, config, indentation, depth, refs, printer) => {\n      let newVal = val;\n      if (mapProps && val.props) {\n        newVal = { ...val, props: mapProps(val.props) };\n      }\n      return plugins.ReactTestComponent.serialize(\n        newVal,\n        config,\n        indentation,\n        depth,\n        refs,\n        printer,\n      );\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]}