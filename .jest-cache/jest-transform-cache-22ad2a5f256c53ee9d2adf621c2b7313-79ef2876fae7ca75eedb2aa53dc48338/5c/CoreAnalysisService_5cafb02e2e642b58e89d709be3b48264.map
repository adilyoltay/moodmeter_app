{"version":3,"names":["_featureFlags","require","_expoConstants","_interopRequireDefault","_aiTelemetry","_Constants$expoConfig","_Constants$expoConfig2","_Constants$expoConfig3","_Constants$expoConfig4","_Constants$expoConfig5","_Constants$expoConfig6","_Constants$expoConfig7","_Constants$expoConfig8","_Constants$expoConfig9","CONFIG","confidence","heuristicMoodBreathwork","parseFloat","Constants","expoConfig","extra","EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_HEURISTIC_MOOD","llmLow","EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_LOW","llmComplex","EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_COMPLEX","textLengthThreshold","parseInt","EXPO_PUBLIC_AI_TEXT_LENGTH_THRESHOLD","llmRateLimitPer10Min","EXPO_PUBLIC_AI_LLM_RATE_LIMIT_PER_10MIN","llmDailyTokenSoftLimit","EXPO_PUBLIC_AI_LLM_DAILY_TOKEN_SOFT_LIMIT","cacheTTL","insightsHours","EXPO_PUBLIC_CACHE_TTL_INSIGHTS_HOURS","voiceHours","EXPO_PUBLIC_CACHE_TTL_VOICE_HOURS","todayDigestHours","EXPO_PUBLIC_CACHE_TTL_TODAY_DIGEST_HOURS","CoreAnalysisService","_classCallCheck2","default","isInitialized","stats","totalRequests","cacheHits","llmCalls","avgProcessingTimeMs","tokenUsage","daily","remaining","_createClass2","key","value","_initialize","_asyncToGenerator2","FEATURE_FLAGS","isEnabled","console","log","_yield$Promise$all","Promise","all","_yield$Promise$all2","_slicedToArray2","_yield$Promise$all2$","needsLLMAnalysis","makeGatingDecision","TokenBudgetManager","SimilarityDedup","ResultCache","ModuleOrchestrator","externalAIService","tokenBudgetManager","similarityDedup","resultCache","moduleOrchestrator","initialize","error","apply","arguments","_analyze","input","startTime","Date","now","cacheKey","generateCacheKey","cached","getCached","trackCacheEvent","userId","Object","assign","source","debugInfo","processingTimeMs","normalized","normalizeInput","lastSimilarHashAt","dedupResult","analyze","content","isDuplicate","trackAIInteraction","AIEventType","SIMILARITY_DEDUP_HIT","content_hash","hash","content_length","length","createGenericResult","lastSeenAt","heuristicResult","performHeuristicAnalysis","gating","getGatingDecision","shouldUseLLM","needsLLM","trackGatingDecision","reason","quickClass","textLength","finalResult","canUseLLM","performLLMAnalysis","_finalResult","used","Math","max","Number","tokenCount","recordUsage","_unused","buildResult","cacheResult","processingTime","updateAvgProcessingTime","createFallbackResult","_x","_getCached","get","_x2","_invalidate","keys","_this","clear","map","delete","invalidate","_x3","_getStats","getStats","dayKey","getCurrentDayKey","components","kind","toLowerCase","hashString","join","str","i","char","charCodeAt","abs","toString","istanbulTime","toLocaleString","timeZone","toISOString","split","trim","replace","_performHeuristicAnalysis","contentLength","cbtResults","analyzeCBTPatterns","ocdResults","analyzeOCDPatterns","breathworkResults","analyzeBreathworkPatterns","moodResults","analyzeMoodPatterns","allResults","bestResult","reduce","best","current","adjustedConfidence","significantResults","filter","r","min","route","payload","allScores","acc","_defineProperty2","matchedPatterns","textCharacteristics","wordCount","hasEmotionalWords","hasEmotionalLanguage","hasTimeReferences","hasIntensifiers","_x4","score","catastrophizingPatterns","forEach","pattern","test","push","allOrNothingPatterns","mindReadingPatterns","fortuneTellingPatterns","labelingPatterns","shouldStatements","personalizationPatterns","screen","detectedDistortions","_toConsumableArray2","Set","distortionCount","primaryDistortion","checkingPatterns","cleaningPatterns","symmetryPatterns","countingPatterns","obsessivePatterns","category","determineOCDCategory","compulsionTypes","severity","anxietyPatterns","relaxationPatterns","physicalPatterns","protocol","selectBreathworkProtocol","anxietyLevel","estimateAnxietyLevel","urgency","positivePatterns","negativePatterns","energyPatterns","estimatedMood","estimateMoodScore","emotionalValence","determineValence","energyLevel","estimateEnergyLevel","patterns","includes","baseLevel","round","some","p","mood","emotionalWords","timeWords","intensifiers","heuristicConfidence","textLen","_canUseLLM","ok","canMakeRequest","_unused2","_x5","_performLLMAnalysis","_x6","_x7","analysis","computedAt","_cacheResult","result","ttlHours","set","_x8","_x9","newTime","total","message","gatingReason","getInstance","instance","coreAnalysisService","exports"],"sources":["CoreAnalysisService.ts"],"sourcesContent":["/**\n * 🎯 CoreAnalysisService v1 - Single Entry Point for All AI Analysis\n * \n * This service provides a unified interface for all AI analysis operations,\n * implementing LLM gating, budget management, deduplication, and multi-layer caching.\n * \n * Architecture:\n * - Single entry point for voice/text/sensor inputs\n * - Deterministic heuristic classification \n * - Smart LLM gating to reduce costs\n * - Multi-layer cache with TTL management\n * - Progressive UI support\n * \n * @module CoreAnalysisService\n * @since v1.0.0\n */\n\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\nimport Constants from 'expo-constants';\nimport { trackCacheEvent, trackGatingDecision, trackAIInteraction, AIEventType } from '../telemetry/aiTelemetry';\n\n// =============================================================================\n// 🎯 TYPE DEFINITIONS\n// =============================================================================\n\n/**\n * Input types that can be analyzed\n */\nexport type InputKind = 'VOICE' | 'TEXT' | 'SENSOR';\n\n/**\n * Quick classification categories\n */\nexport type QuickClass = 'MOOD' | 'CBT' | 'OCD' | 'BREATHWORK' | 'OTHER';\n\n/**\n * Routing actions based on analysis\n */\nexport type RouteAction = 'OPEN_SCREEN' | 'AUTO_SAVE' | 'SUGGEST_BREATHWORK';\n\n/**\n * Input data for analysis\n */\nexport interface AnalysisInput {\n  kind: InputKind;\n  content: string;\n  userId: string;\n  locale: 'tr-TR' | 'en-US';\n  ts: number;\n  metadata?: {\n    source?: string;\n    sessionId?: string;\n    contextData?: Record<string, any>;\n  };\n}\n\n/**\n * Result of analysis\n */\nexport interface AnalysisResult {\n  quickClass: QuickClass;\n  confidence: number;\n  needsLLM: boolean;\n  route: RouteAction;\n  payload: {\n    screen?: string;\n    params?: Record<string, any>;\n    message?: string;\n    data?: any;\n  };\n  cacheKey: string;\n  computedAt: number;\n  source: 'heuristic' | 'llm' | 'cache';\n  debugInfo?: {\n    gatingReason?: string;\n    processingTimeMs?: number;\n    tokenCount?: number;\n  };\n}\n\n/**\n * Core service interface\n */\nexport interface ICoreAnalysisService {\n  analyze(input: AnalysisInput): Promise<AnalysisResult>;\n  getCached(cacheKey: string): Promise<AnalysisResult | null>;\n  invalidate(keys: string[] | 'ALL'): Promise<void>;\n  getStats(): Promise<AnalysisStats>;\n}\n\n/**\n * Service statistics\n */\nexport interface AnalysisStats {\n  totalRequests: number;\n  cacheHits: number;\n  llmCalls: number;\n  avgProcessingTimeMs: number;\n  tokenUsage: {\n    daily: number;\n    remaining: number;\n  };\n}\n\n// =============================================================================\n// 🔧 CONFIGURATION\n// =============================================================================\n\n/**\n * Service configuration from environment\n */\nconst CONFIG = {\n  confidence: {\n    heuristicMoodBreathwork: parseFloat(\n      Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_HEURISTIC_MOOD || '0.65'\n    ),\n    llmLow: parseFloat(\n      Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_LOW || '0.60'\n    ),\n    llmComplex: parseFloat(\n      Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_COMPLEX || '0.80'\n    ),\n  },\n  textLengthThreshold: parseInt(\n    Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_TEXT_LENGTH_THRESHOLD || '280'\n  ),\n  llmRateLimitPer10Min: parseInt(\n    Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_LLM_RATE_LIMIT_PER_10MIN || '3'\n  ),\n  llmDailyTokenSoftLimit: parseInt(\n    Constants.expoConfig?.extra?.EXPO_PUBLIC_AI_LLM_DAILY_TOKEN_SOFT_LIMIT || '20000'\n  ),\n  cacheTTL: {\n    insightsHours: parseInt(\n      Constants.expoConfig?.extra?.EXPO_PUBLIC_CACHE_TTL_INSIGHTS_HOURS || '24'\n    ),\n\n    voiceHours: parseInt(\n      Constants.expoConfig?.extra?.EXPO_PUBLIC_CACHE_TTL_VOICE_HOURS || '1'\n    ),\n    todayDigestHours: parseInt(\n      Constants.expoConfig?.extra?.EXPO_PUBLIC_CACHE_TTL_TODAY_DIGEST_HOURS || '12'\n    ),\n  },\n};\n\n// =============================================================================\n// 🎯 CORE ANALYSIS SERVICE IMPLEMENTATION\n// =============================================================================\n\n/**\n * Main implementation of CoreAnalysisService\n */\nclass CoreAnalysisService implements ICoreAnalysisService {\n  private static instance: CoreAnalysisService;\n  private isInitialized = false;\n  private stats: AnalysisStats = {\n    totalRequests: 0,\n    cacheHits: 0,\n    llmCalls: 0,\n    avgProcessingTimeMs: 0,\n    tokenUsage: {\n      daily: 0,\n      remaining: CONFIG.llmDailyTokenSoftLimit,\n    },\n  };\n\n  // Dependencies (will be injected)\n  private needsLLMAnalysis?: (params: any) => boolean;\n  private makeGatingDecision?: (params: any) => { needsLLM: boolean; reason: string; confidence: number };\n  private tokenBudgetManager?: any;\n  private similarityDedup?: any;\n  private resultCache?: any;\n  private moduleOrchestrator?: any;\n  private externalAIService?: any;\n\n  private constructor() {\n    // Private constructor for singleton\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): CoreAnalysisService {\n    if (!CoreAnalysisService.instance) {\n      CoreAnalysisService.instance = new CoreAnalysisService();\n    }\n    return CoreAnalysisService.instance;\n  }\n\n  /**\n   * Initialize the service with dependencies\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    try {\n      // Check if feature is enabled\n      if (!FEATURE_FLAGS.isEnabled('AI_CORE_ANALYSIS')) {\n        console.log('⚠️ CoreAnalysisService: Feature disabled');\n        return;\n      }\n\n      // Import dependencies dynamically\n      const [\n        { needsLLMAnalysis, makeGatingDecision },\n        { TokenBudgetManager },\n        { SimilarityDedup },\n        { ResultCache },\n        { ModuleOrchestrator },\n        { externalAIService },\n      ] = await Promise.all([\n        import('./needsLLMAnalysis'),\n        import('../budget/tokenBudgetManager'),\n        import('../dedup/similarityDedup'),\n        import('../cache/resultCache'),\n        import('./ModuleOrchestrator'),\n        import('../services/externalAIService'),\n      ]);\n\n      // Initialize dependencies\n      this.needsLLMAnalysis = needsLLMAnalysis;\n      this.makeGatingDecision = makeGatingDecision as any;\n      this.tokenBudgetManager = new TokenBudgetManager();\n      this.similarityDedup = new SimilarityDedup();\n      this.resultCache = new ResultCache();\n      this.moduleOrchestrator = new ModuleOrchestrator();\n      this.externalAIService = externalAIService;\n\n      await Promise.all([\n        this.tokenBudgetManager.initialize(),\n        this.resultCache.initialize(),\n      ]);\n\n      this.isInitialized = true;\n      console.log('✅ CoreAnalysisService initialized');\n    } catch (error) {\n      console.error('❌ CoreAnalysisService initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Main analysis method - single entry point\n   */\n  async analyze(input: AnalysisInput): Promise<AnalysisResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Ensure service is initialized\n      if (!this.isInitialized) {\n        await this.initialize();\n      }\n\n      // Update stats\n      this.stats.totalRequests++;\n\n      // Generate cache key\n      const cacheKey = this.generateCacheKey(input);\n\n      // Check cache first\n      const cached = await this.getCached(cacheKey);\n      if (cached) {\n        this.stats.cacheHits++;\n        // Track cache hit\n        await trackCacheEvent(true, cacheKey, input.userId);\n        return {\n          ...cached,\n          source: 'cache',\n          debugInfo: {\n            ...cached.debugInfo,\n            processingTimeMs: Date.now() - startTime,\n          },\n        };\n      }\n      \n      // Track cache miss\n      await trackCacheEvent(false, cacheKey, input.userId);\n\n      // Normalize and preprocess input\n      const normalized = this.normalizeInput(input);\n\n      // Check for duplicate/similar recent requests\n      let lastSimilarHashAt: number | undefined;\n      if (this.similarityDedup) {\n        const dedupResult = await this.similarityDedup.analyze(normalized.content);\n        if (dedupResult.isDuplicate) {\n          console.log('🔁 Duplicate request detected, returning cached result');\n          // Track similarity dedup hit\n          await trackAIInteraction(AIEventType.SIMILARITY_DEDUP_HIT, {\n            userId: input.userId,\n            cacheKey,\n            content_hash: dedupResult.hash,\n            content_length: normalized.content.length,\n          });\n          // Return a generic result for duplicates\n          return this.createGenericResult(input, cacheKey, startTime);\n        }\n        lastSimilarHashAt = dedupResult.lastSeenAt;\n      }\n\n      // Perform heuristic classification\n      const heuristicResult = await this.performHeuristicAnalysis(normalized);\n\n      // Determine if LLM is needed\n      const gating = this.getGatingDecision(heuristicResult, normalized, lastSimilarHashAt);\n      const shouldUseLLM = gating.needsLLM;\n      \n      // Track gating decision\n      await trackGatingDecision(\n        shouldUseLLM ? 'allow' : 'block',\n        gating.reason,\n        {\n          userId: input.userId,\n          quickClass: heuristicResult.quickClass,\n          confidence: heuristicResult.confidence,\n          textLength: normalized.content.length,\n          lastSimilarHashAt,\n        }\n      );\n\n      let finalResult: AnalysisResult;\n\n      if (shouldUseLLM && await this.canUseLLM(input.userId)) {\n        // Use LLM for enhanced analysis\n        finalResult = await this.performLLMAnalysis(normalized, heuristicResult);\n        this.stats.llmCalls++;\n        // Record token usage if available\n        try {\n          const used = Math.max(0, Number(finalResult?.debugInfo?.tokenCount || 0));\n          if (used > 0 && this.tokenBudgetManager) {\n            await this.tokenBudgetManager.recordUsage(input.userId, used);\n            this.stats.tokenUsage.daily += used;\n            this.stats.tokenUsage.remaining = Math.max(0, this.stats.tokenUsage.remaining - used);\n          }\n        } catch {}\n      } else {\n        // Use heuristic result\n        finalResult = this.buildResult(heuristicResult, cacheKey, startTime, 'heuristic');\n      }\n\n      // Cache the result\n      await this.cacheResult(cacheKey, finalResult);\n\n      // Update processing time average\n      const processingTime = Date.now() - startTime;\n      this.updateAvgProcessingTime(processingTime);\n\n      return {\n        ...finalResult,\n        debugInfo: {\n          ...finalResult.debugInfo,\n          processingTimeMs: processingTime,\n        },\n      };\n    } catch (error) {\n      console.error('❌ CoreAnalysisService.analyze error:', error);\n      // Return fallback result on error\n      return this.createFallbackResult(input, startTime);\n    }\n  }\n\n  /**\n   * Get cached result\n   */\n  async getCached(cacheKey: string): Promise<AnalysisResult | null> {\n    if (!this.resultCache) {\n      return null;\n    }\n    return this.resultCache.get(cacheKey);\n  }\n\n  /**\n   * Invalidate cache entries\n   */\n  async invalidate(keys: string[] | 'ALL'): Promise<void> {\n    if (!this.resultCache) {\n      return;\n    }\n    \n    if (keys === 'ALL') {\n      await this.resultCache.clear();\n    } else {\n      await Promise.all(keys.map(key => this.resultCache.delete(key)));\n    }\n  }\n\n  /**\n   * Get service statistics\n   */\n  async getStats(): Promise<AnalysisStats> {\n    return { ...this.stats };\n  }\n\n  // =============================================================================\n  // 🔧 PRIVATE HELPER METHODS\n  // =============================================================================\n\n  /**\n   * Generate cache key for input\n   */\n  private generateCacheKey(input: AnalysisInput): string {\n    const dayKey = this.getCurrentDayKey();\n    const components = [\n      'ai',\n      input.userId,\n      dayKey,\n      input.kind.toLowerCase(),\n      this.hashString(input.content),\n    ];\n    return components.join(':');\n  }\n\n  /**\n   * Simple hash function for strings\n   */\n  private hashString(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  /**\n   * Get current day key in Europe/Istanbul timezone (DST-safe)\n   */\n  private getCurrentDayKey(): string {\n    const now = new Date();\n    const istanbulTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    return istanbulTime.toISOString().split('T')[0];\n  }\n\n  /**\n   * Normalize input for processing\n   */\n  private normalizeInput(input: AnalysisInput): AnalysisInput {\n    return {\n      ...input,\n      content: input.content\n        .trim()\n        .replace(/\\s+/g, ' ') // Collapse whitespace\n        .toLowerCase(),\n    };\n  }\n\n  /**\n   * Enhanced Heuristic Analysis with Comprehensive Pattern Matching\n   * v1.1: 200+ patterns across CBT, OCD, BREATHWORK, MOOD categories\n   */\n  private async performHeuristicAnalysis(input: AnalysisInput): Promise<{\n    quickClass: QuickClass;\n    confidence: number;\n    route: RouteAction;\n    payload: any;\n  }> {\n    const content = input.content.toLowerCase().trim();\n    const contentLength = content.length;\n    \n    // 🧠 CBT PATTERN ANALYSIS (Cognitive Distortions)\n    const cbtResults = this.analyzeCBTPatterns(content);\n    \n    // 🔄 OCD PATTERN ANALYSIS (Obsessions & Compulsions)\n    const ocdResults = this.analyzeOCDPatterns(content);\n    \n\n    \n    // 🌬️ BREATHWORK PATTERN ANALYSIS (Relaxation & Anxiety)\n    const breathworkResults = this.analyzeBreathworkPatterns(content);\n    \n    // 🎭 MOOD PATTERN ANALYSIS (Emotions & Energy)\n    const moodResults = this.analyzeMoodPatterns(content);\n    \n    // 🏆 SCORE AGGREGATION & CONFIDENCE CALCULATION\n    const allResults = [cbtResults, ocdResults, breathworkResults, moodResults];\n    const bestResult = allResults.reduce((best, current) => \n      current.confidence > best.confidence ? current : best\n    );\n    \n    // 📊 CONFIDENCE ADJUSTMENT based on text characteristics\n    let adjustedConfidence = bestResult.confidence;\n    \n    // Length-based confidence adjustment\n    if (contentLength < 10) adjustedConfidence *= 0.7; // Very short text is less reliable\n    else if (contentLength > 100) adjustedConfidence *= 1.1; // Longer text is more reliable\n    \n    // Multi-pattern bonus\n    const significantResults = allResults.filter(r => r.confidence > 0.3);\n    if (significantResults.length === 1) adjustedConfidence *= 1.1; // Clear single category\n    else if (significantResults.length > 2) adjustedConfidence *= 0.8; // Mixed signals\n    \n    // Cap confidence at 0.95 (never completely certain)\n    adjustedConfidence = Math.min(adjustedConfidence, 0.95);\n    \n    return {\n      quickClass: bestResult.quickClass,\n      confidence: adjustedConfidence,\n      route: bestResult.route,\n      payload: {\n        ...bestResult.payload,\n        contentLength,\n        allScores: allResults.reduce((acc, r) => ({ ...acc, [r.quickClass]: r.confidence }), {}),\n        matchedPatterns: bestResult.matchedPatterns || [],\n        textCharacteristics: {\n          length: contentLength,\n          wordCount: content.split(/\\s+/).length,\n          hasEmotionalWords: this.hasEmotionalLanguage(content),\n          hasTimeReferences: this.hasTimeReferences(content),\n          hasIntensifiers: this.hasIntensifiers(content)\n        }\n      }\n    };\n  }\n\n  /**\n   * 🧠 CBT Pattern Analysis - Cognitive Distortions Detection\n   */\n  private analyzeCBTPatterns(content: string): {\n    quickClass: QuickClass;\n    confidence: number;\n    route: RouteAction;\n    payload: any;\n    matchedPatterns: string[];\n  } {\n    let score = 0;\n    const matchedPatterns: string[] = [];\n    \n    // Catastrophizing patterns (felaketleştirme)\n    const catastrophizingPatterns = [\n      /ya\\s+.*?olursa/i, /kesin.*?olacak/i, /muhakkak.*?olur/i,\n      /felaket/i, /korkunç/i, /berbat/i, /mahvol/i, /dünyanın sonu/i,\n      /hayatım bitti/i, /her şey bitecek/i, /dayanamam/i, /çok kötü/i\n    ];\n    \n    catastrophizingPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.2;\n        matchedPatterns.push('catastrophizing');\n      }\n    });\n    \n    // All-or-nothing thinking (hep-hiç düşünce)\n    const allOrNothingPatterns = [\n      /asla.*?olmaz/i, /hiçbir zaman/i, /her zaman/i, /hep/i, /hiç/i,\n      /tamamen başarısız/i, /mükemmel olmalı/i, /ya hep ya hiç/i,\n      /sadece.*?var/i, /tek.*?seçenek/i\n    ];\n    \n    allOrNothingPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.15;\n        matchedPatterns.push('all_or_nothing');\n      }\n    });\n    \n    // Mind reading (zihin okuma)\n    const mindReadingPatterns = [\n      /herkes.*?düşünüyor/i, /kesin.*?düşünüyor/i, /benden nefret/i,\n      /beni sevmiyor/i, /yargılıyor/i, /dalga geçiyor/i, /aptal sanıyor/i,\n      /ne düşündüğünü biliyorum/i, /öyle bakıyor/i\n    ];\n    \n    mindReadingPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.18;\n        matchedPatterns.push('mind_reading');\n      }\n    });\n    \n    // Fortune telling (falcılık)\n    const fortuneTellingPatterns = [\n      /kesin.*?olur/i, /muhakkak.*?çıkar/i, /elbette.*?olacak/i,\n      /hiç şüphe yok/i, /başarısız olacağım/i, /reddedilecek/i,\n      /istediğimi alamayacağım/i\n    ];\n    \n    fortuneTellingPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.17;\n        matchedPatterns.push('fortune_telling');\n      }\n    });\n    \n    // Labeling (etiketleme)\n    const labelingPatterns = [\n      /ben.*?başarısızım/i, /ben.*?aptalım/i, /ben.*?değersizim/i,\n      /ben.*?beceriksizim/i, /hiçbir işe yaramıyorum/i, /ben.*?kötüyüm/i,\n      /ben.*?zavallıyım/i\n    ];\n    \n    labelingPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.2;\n        matchedPatterns.push('labeling');\n      }\n    });\n    \n    // Should statements (olmalı ifadeleri)\n    const shouldStatements = [\n      /yapmalıyım/i, /etmeliyim/i, /olmalıyım/i, /zorundayım/i,\n      /mecburum/i, /gerekli/i, /şart/i, /lazım/i, /yapmazsam/i\n    ];\n    \n    shouldStatements.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.16;\n        matchedPatterns.push('should_statements');\n      }\n    });\n    \n    // Personalization (kişiselleştirme)\n    const personalizationPatterns = [\n      /benim yüzümden/i, /benim suçum/i, /ben sebep oldum/i,\n      /hep ben/i, /benden kaynaklı/i, /ben yapmışım/i\n    ];\n    \n    personalizationPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.19;\n        matchedPatterns.push('personalization');\n      }\n    });\n    \n    return {\n      quickClass: 'CBT',\n      confidence: Math.min(score, 0.95),\n      route: score > 0.3 ? 'OPEN_SCREEN' : 'AUTO_SAVE',\n      payload: {\n        screen: 'cbt',\n        detectedDistortions: [...new Set(matchedPatterns)],\n        distortionCount: matchedPatterns.length,\n        primaryDistortion: matchedPatterns[0] || 'general_negative_thinking'\n      },\n      matchedPatterns\n    };\n  }\n\n  /**\n   * 🔄 OCD Pattern Analysis - Obsessions & Compulsions Detection\n   */\n  private analyzeOCDPatterns(content: string): {\n    quickClass: QuickClass;\n    confidence: number;\n    route: RouteAction;\n    payload: any;\n    matchedPatterns: string[];\n  } {\n    let score = 0;\n    const matchedPatterns: string[] = [];\n    \n    // Checking compulsions (kontrol kompulsiyonları)\n    const checkingPatterns = [\n      /kontrol etti?m/i, /tekrar bakt?ım/i, /emin olmak için/i,\n      /kapı.*?kilitli/i, /elektrik.*?kapalı/i, /ocak.*?kapalı/i,\n      /su.*?açık/i, /alarm.*?kurulu/i, /telefon.*?sesli/i,\n      /çanta.*?tam/i, /anahtar.*?cebimde/i\n    ];\n    \n    checkingPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.25;\n        matchedPatterns.push('checking');\n      }\n    });\n    \n    // Cleaning compulsions (temizlik kompulsiyonları)\n    const cleaningPatterns = [\n      /yıka.*?dım/i, /temizle.*?dim/i, /kirli/i, /mikrop/i, /bakteri/i,\n      /bulaşıcı/i, /hastalık.*?kapma/i, /el.*?yıka/i, /dezenfektan/i,\n      /sabun/i, /steril/i, /hijyen/i\n    ];\n    \n    cleaningPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.23;\n        matchedPatterns.push('cleaning');\n      }\n    });\n    \n    // Symmetry/ordering compulsions (simetri/düzen kompulsiyonları)\n    const symmetryPatterns = [\n      /düzenli.*?olmalı/i, /simetrik/i, /tam.*?orta/i, /eşit/i,\n      /düz.*?durmalı/i, /yerli yerine/i, /karışık.*?duramam/i,\n      /toparlamak/i, /düzeltmek/i\n    ];\n    \n    symmetryPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.22;\n        matchedPatterns.push('symmetry');\n      }\n    });\n    \n    // Counting compulsions (sayma kompulsiyonları)\n    const countingPatterns = [\n      /say.*?dım/i, /rakam/i, /tekrarla.*?dım/i, /kaç.*?tane/i,\n      /üç.*?kez/i, /beş.*?kere/i, /çift.*?sayı/i, /tek.*?sayı/i\n    ];\n    \n    countingPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.21;\n        matchedPatterns.push('counting');\n      }\n    });\n    \n    // Obsessive thoughts (takıntılı düşünceler)\n    const obsessivePatterns = [\n      /takıntı/i, /obsesyon/i, /düşünce.*?dur/i, /kafamdan çık/i,\n      /sürekli.*?geliyor/i, /dayanamıyorum/i, /rahat.*?bırak/i,\n      /zihnimden.*?sil/i\n    ];\n    \n    obsessivePatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.24;\n        matchedPatterns.push('obsessive_thoughts');\n      }\n    });\n    \n    return {\n      quickClass: 'OCD',\n      confidence: Math.min(score, 0.95),\n      route: score > 0.25 ? 'OPEN_SCREEN' : 'AUTO_SAVE',\n      payload: {\n        screen: 'tracking',\n        category: this.determineOCDCategory(matchedPatterns),\n        compulsionTypes: [...new Set(matchedPatterns)],\n        severity: score > 0.5 ? 'high' : score > 0.3 ? 'medium' : 'low'\n      },\n      matchedPatterns\n    };\n  }\n\n  // ❌ REMOVED: analyzeTerapiPatterns function - ERP module deleted\n\n  /**\n   * 🌬️ Breathwork Pattern Analysis - Anxiety & Relaxation needs\n   */\n  private analyzeBreathworkPatterns(content: string): {\n    quickClass: QuickClass;\n    confidence: number;\n    route: RouteAction;\n    payload: any;\n    matchedPatterns: string[];\n  } {\n    let score = 0;\n    const matchedPatterns: string[] = [];\n    \n    // Anxiety/stress patterns\n    const anxietyPatterns = [\n      /nefes.*?alamıyorum/i, /gergin/i, /stresli/i, /panik/i, /kaygı/i,\n      /endişeli/i, /heyecanlı/i, /çarpıntı/i, /sıkışmış/i, /bunalım/i\n    ];\n    \n    anxietyPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.2;\n        matchedPatterns.push('anxiety');\n      }\n    });\n    \n    // Relaxation needs\n    const relaxationPatterns = [\n      /sakinleş/i, /rahatlat/i, /gevşe/i, /dinlen/i, /huzur/i,\n      /nefes.*?al/i, /meditasyon/i, /yoga/i, /mindfulness/i\n    ];\n    \n    relaxationPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.25;\n        matchedPatterns.push('relaxation');\n      }\n    });\n    \n    // Physical symptoms\n    const physicalPatterns = [\n      /kalp.*?hızlı/i, /ter.*?döküyorum/i, /titreme/i, /baş.*?dönme/i,\n      /mide.*?bulantı/i, /boğaz.*?düğüm/i\n    ];\n    \n    physicalPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.18;\n        matchedPatterns.push('physical_symptoms');\n      }\n    });\n    \n    return {\n      quickClass: 'BREATHWORK',\n      confidence: Math.min(score, 0.95),\n      route: score > 0.3 ? 'SUGGEST_BREATHWORK' : 'AUTO_SAVE',\n      payload: {\n        protocol: this.selectBreathworkProtocol(matchedPatterns, score),\n        anxietyLevel: this.estimateAnxietyLevel(matchedPatterns, score),\n        urgency: score > 0.5 ? 'high' : score > 0.3 ? 'medium' : 'low'\n      },\n      matchedPatterns\n    };\n  }\n\n  /**\n   * 🎭 Mood Pattern Analysis - Emotional state detection\n   */\n  private analyzeMoodPatterns(content: string): {\n    quickClass: QuickClass;\n    confidence: number;\n    route: RouteAction;\n    payload: any;\n    matchedPatterns: string[];\n  } {\n    let score = 0;\n    const matchedPatterns: string[] = [];\n    \n    // Positive emotions\n    const positivePatterns = [\n      /mutlu/i, /sevinçli/i, /neşeli/i, /keyifli/i, /memnun/i,\n      /güzel.*?hissed/i, /iyi.*?gidiyor/i, /başarılı/i, /gurur/i\n    ];\n    \n    positivePatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.15;\n        matchedPatterns.push('positive');\n      }\n    });\n    \n    // Negative emotions\n    const negativePatterns = [\n      /üzgün/i, /keyifsiz/i, /mutsuz/i, /depresif/i, /kötü.*?hissed/i,\n      /çökkün/i, /melankolik/i, /karamsarlık/i, /umutsuz/i\n    ];\n    \n    negativePatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.2;\n        matchedPatterns.push('negative');\n      }\n    });\n    \n    // Energy levels\n    const energyPatterns = [\n      /yorgun/i, /bitkin/i, /enerjik/i, /dinamik/i, /uyuşuk/i,\n      /halsiz/i, /zinde/i, /aktif/i\n    ];\n    \n    energyPatterns.forEach(pattern => {\n      if (pattern.test(content)) {\n        score += 0.1;\n        matchedPatterns.push('energy');\n      }\n    });\n    \n    return {\n      quickClass: 'MOOD',\n      confidence: Math.max(score, 0.3), // Always have some mood relevance\n      route: 'AUTO_SAVE',\n      payload: {\n        screen: 'mood',\n        estimatedMood: this.estimateMoodScore(matchedPatterns),\n        emotionalValence: this.determineValence(matchedPatterns),\n        energyLevel: this.estimateEnergyLevel(matchedPatterns)\n      },\n      matchedPatterns\n    };\n  }\n\n  // Helper methods for pattern analysis\n  private determineOCDCategory(patterns: string[]): string {\n    if (patterns.includes('checking')) return 'kontrol';\n    if (patterns.includes('cleaning')) return 'temizlik';\n    if (patterns.includes('symmetry')) return 'simetri';\n    if (patterns.includes('counting')) return 'sayma';\n    return 'diğer';\n  }\n\n\n\n\n\n  private selectBreathworkProtocol(patterns: string[], score: number): string {\n    // Enhanced protocol selection with comprehensive logic\n    if (patterns.includes('physical_symptoms') && score > 0.7) return 'quick_calm';\n    if (patterns.includes('anxiety') && score > 0.6) return '4-7-8';\n    if (patterns.includes('relaxation')) return 'paced';\n    if (score > 0.5) return 'box';\n    return 'extended'; // For maintenance/gentle sessions\n  }\n\n  private estimateAnxietyLevel(patterns: string[], score: number): number {\n    let baseLevel = Math.min(Math.round(score * 10), 8);\n    \n    // Adjust based on specific patterns\n    if (patterns.includes('physical_symptoms')) baseLevel = Math.min(baseLevel + 2, 10);\n    if (patterns.some(p => p.includes('panic') || p.includes('dayanam'))) baseLevel = Math.min(baseLevel + 3, 10);\n    \n    return baseLevel;\n  }\n\n  private estimateMoodScore(patterns: string[]): number {\n    let mood = 50; // Neutral baseline\n    if (patterns.includes('positive')) mood += 25;\n    if (patterns.includes('negative')) mood -= 25;\n    return Math.max(0, Math.min(100, mood));\n  }\n\n  private determineValence(patterns: string[]): 'positive' | 'negative' | 'neutral' {\n    if (patterns.includes('positive')) return 'positive';\n    if (patterns.includes('negative')) return 'negative';\n    return 'neutral';\n  }\n\n  private estimateEnergyLevel(patterns: string[]): number {\n    if (patterns.includes('energy')) {\n      // Would need more sophisticated analysis of specific energy words\n      return 5; // Default medium energy\n    }\n    return 5;\n  }\n\n  private hasEmotionalLanguage(content: string): boolean {\n    const emotionalWords = /hissed|duygu|his|emotion|feel/i;\n    return emotionalWords.test(content);\n  }\n\n  private hasTimeReferences(content: string): boolean {\n    const timeWords = /bugün|dün|yarın|şimdi|geçen|gelecek|zaman/i;\n    return timeWords.test(content);\n  }\n\n  private hasIntensifiers(content: string): boolean {\n    const intensifiers = /çok|aşırı|son derece|fazlasıyla|tam|kesin/i;\n    return intensifiers.test(content);\n  }\n\n  /**\n   * Determine if LLM should be used\n   */\n  private getGatingDecision(heuristicResult: any, input: AnalysisInput, lastSimilarHashAt?: number): { needsLLM: boolean; reason: string; confidence: number } {\n    if (!this.makeGatingDecision || !FEATURE_FLAGS.isEnabled('AI_LLM_GATING')) {\n      return { needsLLM: false, reason: 'gating_disabled', confidence: heuristicResult.confidence };\n    }\n\n    return this.makeGatingDecision({\n      quickClass: heuristicResult.quickClass,\n      heuristicConfidence: heuristicResult.confidence,\n      textLen: input.content.length,\n      lastSimilarHashAt,\n    }) as any;\n  }\n\n  /**\n   * Check if LLM can be used (budget/rate limits)\n   */\n  private async canUseLLM(userId: string): Promise<boolean> {\n    if (!this.tokenBudgetManager) {\n      return false;\n    }\n    try {\n      const ok = await this.tokenBudgetManager.canMakeRequest(userId);\n      return ok && this.stats.tokenUsage.remaining > 0;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Perform LLM-enhanced analysis\n   */\n  private async performLLMAnalysis(\n    input: AnalysisInput,\n    heuristicResult: any\n  ): Promise<AnalysisResult> {\n    // This will integrate with externalAIService\n    // For now, return enhanced heuristic result\n    return this.buildResult(\n      {\n        ...heuristicResult,\n        confidence: Math.min(heuristicResult.confidence + 0.2, 1),\n      },\n      this.generateCacheKey(input),\n      Date.now(),\n      'llm'\n    );\n  }\n\n  /**\n   * Build analysis result\n   */\n  private buildResult(\n    analysis: any,\n    cacheKey: string,\n    startTime: number,\n    source: 'heuristic' | 'llm' | 'cache'\n  ): AnalysisResult {\n    return {\n      quickClass: analysis.quickClass,\n      confidence: analysis.confidence,\n      needsLLM: false,\n      route: analysis.route,\n      payload: analysis.payload,\n      cacheKey,\n      computedAt: Date.now(),\n      source,\n      debugInfo: {\n        processingTimeMs: Date.now() - startTime,\n      },\n    };\n  }\n\n  /**\n   * Cache analysis result\n   */\n  private async cacheResult(cacheKey: string, result: AnalysisResult): Promise<void> {\n    if (!this.resultCache) {\n      return;\n    }\n    \n    // Determine TTL based on result type\n    let ttlHours = CONFIG.cacheTTL.voiceHours;\n    if (result.route === 'AUTO_SAVE') {\n      ttlHours = CONFIG.cacheTTL.todayDigestHours;\n    }\n    \n    await this.resultCache.set(cacheKey, result, ttlHours * 60 * 60 * 1000);\n  }\n\n  /**\n   * Update average processing time\n   */\n  private updateAvgProcessingTime(newTime: number): void {\n    const total = this.stats.avgProcessingTimeMs * (this.stats.totalRequests - 1) + newTime;\n    this.stats.avgProcessingTimeMs = Math.round(total / this.stats.totalRequests);\n  }\n\n  /**\n   * Create generic result for duplicate requests\n   */\n  private createGenericResult(\n    input: AnalysisInput,\n    cacheKey: string,\n    startTime: number\n  ): AnalysisResult {\n    return {\n      quickClass: 'MOOD',\n      confidence: 0.5,\n      needsLLM: false,\n      route: 'AUTO_SAVE',\n      payload: { message: 'Tekrarlanan istek algılandı' },\n      cacheKey,\n      computedAt: Date.now(),\n      source: 'cache',\n      debugInfo: {\n        gatingReason: 'duplicate',\n        processingTimeMs: Date.now() - startTime,\n      },\n    };\n  }\n\n  /**\n   * Create fallback result on error\n   */\n  private createFallbackResult(input: AnalysisInput, startTime: number): AnalysisResult {\n    return {\n      quickClass: 'OTHER',\n      confidence: 0,\n      needsLLM: false,\n      route: 'AUTO_SAVE',\n      payload: { error: true },\n      cacheKey: this.generateCacheKey(input),\n      computedAt: Date.now(),\n      source: 'heuristic',\n      debugInfo: {\n        gatingReason: 'error',\n        processingTimeMs: Date.now() - startTime,\n      },\n    };\n  }\n}\n\n// =============================================================================\n// 🚀 EXPORTS\n// =============================================================================\n\n// Export singleton instance\nexport const coreAnalysisService = CoreAnalysisService.getInstance();\n\n// Export types\nexport type { ICoreAnalysisService, AnalysisStats };\n"],"mappings":"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","ignoreList":[]}