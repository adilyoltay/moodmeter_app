1856be6ac89b454195d48c9d7c3437f4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coreAnalysisService = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _featureFlags = require("../../../constants/featureFlags");
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _aiTelemetry = require("../telemetry/aiTelemetry");
var _Constants$expoConfig, _Constants$expoConfig2, _Constants$expoConfig3, _Constants$expoConfig4, _Constants$expoConfig5, _Constants$expoConfig6, _Constants$expoConfig7, _Constants$expoConfig8, _Constants$expoConfig9;
var CONFIG = {
  confidence: {
    heuristicMoodBreathwork: parseFloat(((_Constants$expoConfig = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig = _Constants$expoConfig.extra) == null ? void 0 : _Constants$expoConfig.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_HEURISTIC_MOOD) || '0.65'),
    llmLow: parseFloat(((_Constants$expoConfig2 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig2 = _Constants$expoConfig2.extra) == null ? void 0 : _Constants$expoConfig2.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_LOW) || '0.60'),
    llmComplex: parseFloat(((_Constants$expoConfig3 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig3 = _Constants$expoConfig3.extra) == null ? void 0 : _Constants$expoConfig3.EXPO_PUBLIC_AI_CONFIDENCE_THRESHOLD_LLM_COMPLEX) || '0.80')
  },
  textLengthThreshold: parseInt(((_Constants$expoConfig4 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig4 = _Constants$expoConfig4.extra) == null ? void 0 : _Constants$expoConfig4.EXPO_PUBLIC_AI_TEXT_LENGTH_THRESHOLD) || '280'),
  llmRateLimitPer10Min: parseInt(((_Constants$expoConfig5 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig5 = _Constants$expoConfig5.extra) == null ? void 0 : _Constants$expoConfig5.EXPO_PUBLIC_AI_LLM_RATE_LIMIT_PER_10MIN) || '3'),
  llmDailyTokenSoftLimit: parseInt(((_Constants$expoConfig6 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig6 = _Constants$expoConfig6.extra) == null ? void 0 : _Constants$expoConfig6.EXPO_PUBLIC_AI_LLM_DAILY_TOKEN_SOFT_LIMIT) || '20000'),
  cacheTTL: {
    insightsHours: parseInt(((_Constants$expoConfig7 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig7 = _Constants$expoConfig7.extra) == null ? void 0 : _Constants$expoConfig7.EXPO_PUBLIC_CACHE_TTL_INSIGHTS_HOURS) || '24'),
    voiceHours: parseInt(((_Constants$expoConfig8 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig8 = _Constants$expoConfig8.extra) == null ? void 0 : _Constants$expoConfig8.EXPO_PUBLIC_CACHE_TTL_VOICE_HOURS) || '1'),
    todayDigestHours: parseInt(((_Constants$expoConfig9 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig9 = _Constants$expoConfig9.extra) == null ? void 0 : _Constants$expoConfig9.EXPO_PUBLIC_CACHE_TTL_TODAY_DIGEST_HOURS) || '12')
  }
};
var CoreAnalysisService = function () {
  function CoreAnalysisService() {
    (0, _classCallCheck2.default)(this, CoreAnalysisService);
    this.isInitialized = false;
    this.stats = {
      totalRequests: 0,
      cacheHits: 0,
      llmCalls: 0,
      avgProcessingTimeMs: 0,
      tokenUsage: {
        daily: 0,
        remaining: CONFIG.llmDailyTokenSoftLimit
      }
    };
  }
  return (0, _createClass2.default)(CoreAnalysisService, [{
    key: "initialize",
    value: (function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        if (this.isInitialized) {
          return;
        }
        try {
          if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_CORE_ANALYSIS')) {
            console.log('‚ö†Ô∏è CoreAnalysisService: Feature disabled');
            return;
          }
          var _yield$Promise$all = yield Promise.all([import("./needsLLMAnalysis"), import("../budget/tokenBudgetManager"), import("../dedup/similarityDedup"), import("../cache/resultCache"), import("./ModuleOrchestrator"), import("../services/externalAIService")]),
            _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 6),
            _yield$Promise$all2$ = _yield$Promise$all2[0],
            needsLLMAnalysis = _yield$Promise$all2$.needsLLMAnalysis,
            makeGatingDecision = _yield$Promise$all2$.makeGatingDecision,
            TokenBudgetManager = _yield$Promise$all2[1].TokenBudgetManager,
            SimilarityDedup = _yield$Promise$all2[2].SimilarityDedup,
            ResultCache = _yield$Promise$all2[3].ResultCache,
            ModuleOrchestrator = _yield$Promise$all2[4].ModuleOrchestrator,
            externalAIService = _yield$Promise$all2[5].externalAIService;
          this.needsLLMAnalysis = needsLLMAnalysis;
          this.makeGatingDecision = makeGatingDecision;
          this.tokenBudgetManager = new TokenBudgetManager();
          this.similarityDedup = new SimilarityDedup();
          this.resultCache = new ResultCache();
          this.moduleOrchestrator = new ModuleOrchestrator();
          this.externalAIService = externalAIService;
          yield Promise.all([this.tokenBudgetManager.initialize(), this.resultCache.initialize()]);
          this.isInitialized = true;
          console.log('‚úÖ CoreAnalysisService initialized');
        } catch (error) {
          console.error('‚ùå CoreAnalysisService initialization failed:', error);
          throw error;
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }())
  }, {
    key: "analyze",
    value: (function () {
      var _analyze = (0, _asyncToGenerator2.default)(function* (input) {
        var startTime = Date.now();
        try {
          if (!this.isInitialized) {
            yield this.initialize();
          }
          this.stats.totalRequests++;
          var _cacheKey = this.generateCacheKey(input);
          var cached = yield this.getCached(_cacheKey);
          if (cached) {
            this.stats.cacheHits++;
            yield (0, _aiTelemetry.trackCacheEvent)(true, _cacheKey, input.userId);
            return Object.assign({}, cached, {
              source: 'cache',
              debugInfo: Object.assign({}, cached.debugInfo, {
                processingTimeMs: Date.now() - startTime
              })
            });
          }
          yield (0, _aiTelemetry.trackCacheEvent)(false, _cacheKey, input.userId);
          var normalized = this.normalizeInput(input);
          var lastSimilarHashAt;
          if (this.similarityDedup) {
            var dedupResult = yield this.similarityDedup.analyze(normalized.content);
            if (dedupResult.isDuplicate) {
              console.log('üîÅ Duplicate request detected, returning cached result');
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SIMILARITY_DEDUP_HIT, {
                userId: input.userId,
                cacheKey: _cacheKey,
                content_hash: dedupResult.hash,
                content_length: normalized.content.length
              });
              return this.createGenericResult(input, _cacheKey, startTime);
            }
            lastSimilarHashAt = dedupResult.lastSeenAt;
          }
          var heuristicResult = yield this.performHeuristicAnalysis(normalized);
          var gating = this.getGatingDecision(heuristicResult, normalized, lastSimilarHashAt);
          var shouldUseLLM = gating.needsLLM;
          yield (0, _aiTelemetry.trackGatingDecision)(shouldUseLLM ? 'allow' : 'block', gating.reason, {
            userId: input.userId,
            quickClass: heuristicResult.quickClass,
            confidence: heuristicResult.confidence,
            textLength: normalized.content.length,
            lastSimilarHashAt: lastSimilarHashAt
          });
          var finalResult;
          if (shouldUseLLM && (yield this.canUseLLM(input.userId))) {
            finalResult = yield this.performLLMAnalysis(normalized, heuristicResult);
            this.stats.llmCalls++;
            try {
              var _finalResult;
              var used = Math.max(0, Number(((_finalResult = finalResult) == null || (_finalResult = _finalResult.debugInfo) == null ? void 0 : _finalResult.tokenCount) || 0));
              if (used > 0 && this.tokenBudgetManager) {
                yield this.tokenBudgetManager.recordUsage(input.userId, used);
                this.stats.tokenUsage.daily += used;
                this.stats.tokenUsage.remaining = Math.max(0, this.stats.tokenUsage.remaining - used);
              }
            } catch (_unused) {}
          } else {
            finalResult = this.buildResult(heuristicResult, _cacheKey, startTime, 'heuristic');
          }
          yield this.cacheResult(_cacheKey, finalResult);
          var processingTime = Date.now() - startTime;
          this.updateAvgProcessingTime(processingTime);
          return Object.assign({}, finalResult, {
            debugInfo: Object.assign({}, finalResult.debugInfo, {
              processingTimeMs: processingTime
            })
          });
        } catch (error) {
          console.error('‚ùå CoreAnalysisService.analyze error:', error);
          return this.createFallbackResult(input, startTime);
        }
      });
      function analyze(_x) {
        return _analyze.apply(this, arguments);
      }
      return analyze;
    }())
  }, {
    key: "getCached",
    value: (function () {
      var _getCached = (0, _asyncToGenerator2.default)(function* (cacheKey) {
        if (!this.resultCache) {
          return null;
        }
        return this.resultCache.get(cacheKey);
      });
      function getCached(_x2) {
        return _getCached.apply(this, arguments);
      }
      return getCached;
    }())
  }, {
    key: "invalidate",
    value: (function () {
      var _invalidate = (0, _asyncToGenerator2.default)(function* (keys) {
        var _this = this;
        if (!this.resultCache) {
          return;
        }
        if (keys === 'ALL') {
          yield this.resultCache.clear();
        } else {
          yield Promise.all(keys.map(function (key) {
            return _this.resultCache.delete(key);
          }));
        }
      });
      function invalidate(_x3) {
        return _invalidate.apply(this, arguments);
      }
      return invalidate;
    }())
  }, {
    key: "getStats",
    value: (function () {
      var _getStats = (0, _asyncToGenerator2.default)(function* () {
        return Object.assign({}, this.stats);
      });
      function getStats() {
        return _getStats.apply(this, arguments);
      }
      return getStats;
    }())
  }, {
    key: "generateCacheKey",
    value: function generateCacheKey(input) {
      var dayKey = this.getCurrentDayKey();
      var components = ['ai', input.userId, dayKey, input.kind.toLowerCase(), this.hashString(input.content)];
      return components.join(':');
    }
  }, {
    key: "hashString",
    value: function hashString(str) {
      var hash = 0;
      for (var i = 0; i < str.length; i++) {
        var char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return Math.abs(hash).toString(36);
    }
  }, {
    key: "getCurrentDayKey",
    value: function getCurrentDayKey() {
      var now = new Date();
      var istanbulTime = new Date(now.toLocaleString('en-US', {
        timeZone: 'Europe/Istanbul'
      }));
      return istanbulTime.toISOString().split('T')[0];
    }
  }, {
    key: "normalizeInput",
    value: function normalizeInput(input) {
      return Object.assign({}, input, {
        content: input.content.trim().replace(/\s+/g, ' ').toLowerCase()
      });
    }
  }, {
    key: "performHeuristicAnalysis",
    value: (function () {
      var _performHeuristicAnalysis = (0, _asyncToGenerator2.default)(function* (input) {
        var content = input.content.toLowerCase().trim();
        var contentLength = content.length;
        var cbtResults = this.analyzeCBTPatterns(content);
        var ocdResults = this.analyzeOCDPatterns(content);
        var breathworkResults = this.analyzeBreathworkPatterns(content);
        var moodResults = this.analyzeMoodPatterns(content);
        var allResults = [cbtResults, ocdResults, breathworkResults, moodResults];
        var bestResult = allResults.reduce(function (best, current) {
          return current.confidence > best.confidence ? current : best;
        });
        var adjustedConfidence = bestResult.confidence;
        if (contentLength < 10) adjustedConfidence *= 0.7;else if (contentLength > 100) adjustedConfidence *= 1.1;
        var significantResults = allResults.filter(function (r) {
          return r.confidence > 0.3;
        });
        if (significantResults.length === 1) adjustedConfidence *= 1.1;else if (significantResults.length > 2) adjustedConfidence *= 0.8;
        adjustedConfidence = Math.min(adjustedConfidence, 0.95);
        return {
          quickClass: bestResult.quickClass,
          confidence: adjustedConfidence,
          route: bestResult.route,
          payload: Object.assign({}, bestResult.payload, {
            contentLength: contentLength,
            allScores: allResults.reduce(function (acc, r) {
              return Object.assign({}, acc, (0, _defineProperty2.default)({}, r.quickClass, r.confidence));
            }, {}),
            matchedPatterns: bestResult.matchedPatterns || [],
            textCharacteristics: {
              length: contentLength,
              wordCount: content.split(/\s+/).length,
              hasEmotionalWords: this.hasEmotionalLanguage(content),
              hasTimeReferences: this.hasTimeReferences(content),
              hasIntensifiers: this.hasIntensifiers(content)
            }
          })
        };
      });
      function performHeuristicAnalysis(_x4) {
        return _performHeuristicAnalysis.apply(this, arguments);
      }
      return performHeuristicAnalysis;
    }())
  }, {
    key: "analyzeCBTPatterns",
    value: function analyzeCBTPatterns(content) {
      var score = 0;
      var matchedPatterns = [];
      var catastrophizingPatterns = [/ya\s+.*?olursa/i, /kesin.*?olacak/i, /muhakkak.*?olur/i, /felaket/i, /korkun√ß/i, /berbat/i, /mahvol/i, /d√ºnyanƒ±n sonu/i, /hayatƒ±m bitti/i, /her ≈üey bitecek/i, /dayanamam/i, /√ßok k√∂t√º/i];
      catastrophizingPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.2;
          matchedPatterns.push('catastrophizing');
        }
      });
      var allOrNothingPatterns = [/asla.*?olmaz/i, /hi√ßbir zaman/i, /her zaman/i, /hep/i, /hi√ß/i, /tamamen ba≈üarƒ±sƒ±z/i, /m√ºkemmel olmalƒ±/i, /ya hep ya hi√ß/i, /sadece.*?var/i, /tek.*?se√ßenek/i];
      allOrNothingPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.15;
          matchedPatterns.push('all_or_nothing');
        }
      });
      var mindReadingPatterns = [/herkes.*?d√º≈ü√ºn√ºyor/i, /kesin.*?d√º≈ü√ºn√ºyor/i, /benden nefret/i, /beni sevmiyor/i, /yargƒ±lƒ±yor/i, /dalga ge√ßiyor/i, /aptal sanƒ±yor/i, /ne d√º≈ü√ºnd√ºƒü√ºn√º biliyorum/i, /√∂yle bakƒ±yor/i];
      mindReadingPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.18;
          matchedPatterns.push('mind_reading');
        }
      });
      var fortuneTellingPatterns = [/kesin.*?olur/i, /muhakkak.*?√ßƒ±kar/i, /elbette.*?olacak/i, /hi√ß ≈ü√ºphe yok/i, /ba≈üarƒ±sƒ±z olacaƒüƒ±m/i, /reddedilecek/i, /istediƒüimi alamayacaƒüƒ±m/i];
      fortuneTellingPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.17;
          matchedPatterns.push('fortune_telling');
        }
      });
      var labelingPatterns = [/ben.*?ba≈üarƒ±sƒ±zƒ±m/i, /ben.*?aptalƒ±m/i, /ben.*?deƒüersizim/i, /ben.*?beceriksizim/i, /hi√ßbir i≈üe yaramƒ±yorum/i, /ben.*?k√∂t√ºy√ºm/i, /ben.*?zavallƒ±yƒ±m/i];
      labelingPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.2;
          matchedPatterns.push('labeling');
        }
      });
      var shouldStatements = [/yapmalƒ±yƒ±m/i, /etmeliyim/i, /olmalƒ±yƒ±m/i, /zorundayƒ±m/i, /mecburum/i, /gerekli/i, /≈üart/i, /lazƒ±m/i, /yapmazsam/i];
      shouldStatements.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.16;
          matchedPatterns.push('should_statements');
        }
      });
      var personalizationPatterns = [/benim y√ºz√ºmden/i, /benim su√ßum/i, /ben sebep oldum/i, /hep ben/i, /benden kaynaklƒ±/i, /ben yapmƒ±≈üƒ±m/i];
      personalizationPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.19;
          matchedPatterns.push('personalization');
        }
      });
      return {
        quickClass: 'CBT',
        confidence: Math.min(score, 0.95),
        route: score > 0.3 ? 'OPEN_SCREEN' : 'AUTO_SAVE',
        payload: {
          screen: 'cbt',
          detectedDistortions: (0, _toConsumableArray2.default)(new Set(matchedPatterns)),
          distortionCount: matchedPatterns.length,
          primaryDistortion: matchedPatterns[0] || 'general_negative_thinking'
        },
        matchedPatterns: matchedPatterns
      };
    }
  }, {
    key: "analyzeOCDPatterns",
    value: function analyzeOCDPatterns(content) {
      var score = 0;
      var matchedPatterns = [];
      var checkingPatterns = [/kontrol etti?m/i, /tekrar bakt?ƒ±m/i, /emin olmak i√ßin/i, /kapƒ±.*?kilitli/i, /elektrik.*?kapalƒ±/i, /ocak.*?kapalƒ±/i, /su.*?a√ßƒ±k/i, /alarm.*?kurulu/i, /telefon.*?sesli/i, /√ßanta.*?tam/i, /anahtar.*?cebimde/i];
      checkingPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.25;
          matchedPatterns.push('checking');
        }
      });
      var cleaningPatterns = [/yƒ±ka.*?dƒ±m/i, /temizle.*?dim/i, /kirli/i, /mikrop/i, /bakteri/i, /bula≈üƒ±cƒ±/i, /hastalƒ±k.*?kapma/i, /el.*?yƒ±ka/i, /dezenfektan/i, /sabun/i, /steril/i, /hijyen/i];
      cleaningPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.23;
          matchedPatterns.push('cleaning');
        }
      });
      var symmetryPatterns = [/d√ºzenli.*?olmalƒ±/i, /simetrik/i, /tam.*?orta/i, /e≈üit/i, /d√ºz.*?durmalƒ±/i, /yerli yerine/i, /karƒ±≈üƒ±k.*?duramam/i, /toparlamak/i, /d√ºzeltmek/i];
      symmetryPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.22;
          matchedPatterns.push('symmetry');
        }
      });
      var countingPatterns = [/say.*?dƒ±m/i, /rakam/i, /tekrarla.*?dƒ±m/i, /ka√ß.*?tane/i, /√º√ß.*?kez/i, /be≈ü.*?kere/i, /√ßift.*?sayƒ±/i, /tek.*?sayƒ±/i];
      countingPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.21;
          matchedPatterns.push('counting');
        }
      });
      var obsessivePatterns = [/takƒ±ntƒ±/i, /obsesyon/i, /d√º≈ü√ºnce.*?dur/i, /kafamdan √ßƒ±k/i, /s√ºrekli.*?geliyor/i, /dayanamƒ±yorum/i, /rahat.*?bƒ±rak/i, /zihnimden.*?sil/i];
      obsessivePatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.24;
          matchedPatterns.push('obsessive_thoughts');
        }
      });
      return {
        quickClass: 'OCD',
        confidence: Math.min(score, 0.95),
        route: score > 0.25 ? 'OPEN_SCREEN' : 'AUTO_SAVE',
        payload: {
          screen: 'tracking',
          category: this.determineOCDCategory(matchedPatterns),
          compulsionTypes: (0, _toConsumableArray2.default)(new Set(matchedPatterns)),
          severity: score > 0.5 ? 'high' : score > 0.3 ? 'medium' : 'low'
        },
        matchedPatterns: matchedPatterns
      };
    }
  }, {
    key: "analyzeBreathworkPatterns",
    value: function analyzeBreathworkPatterns(content) {
      var score = 0;
      var matchedPatterns = [];
      var anxietyPatterns = [/nefes.*?alamƒ±yorum/i, /gergin/i, /stresli/i, /panik/i, /kaygƒ±/i, /endi≈üeli/i, /heyecanlƒ±/i, /√ßarpƒ±ntƒ±/i, /sƒ±kƒ±≈ümƒ±≈ü/i, /bunalƒ±m/i];
      anxietyPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.2;
          matchedPatterns.push('anxiety');
        }
      });
      var relaxationPatterns = [/sakinle≈ü/i, /rahatlat/i, /gev≈üe/i, /dinlen/i, /huzur/i, /nefes.*?al/i, /meditasyon/i, /yoga/i, /mindfulness/i];
      relaxationPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.25;
          matchedPatterns.push('relaxation');
        }
      });
      var physicalPatterns = [/kalp.*?hƒ±zlƒ±/i, /ter.*?d√∂k√ºyorum/i, /titreme/i, /ba≈ü.*?d√∂nme/i, /mide.*?bulantƒ±/i, /boƒüaz.*?d√ºƒü√ºm/i];
      physicalPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.18;
          matchedPatterns.push('physical_symptoms');
        }
      });
      return {
        quickClass: 'BREATHWORK',
        confidence: Math.min(score, 0.95),
        route: score > 0.3 ? 'SUGGEST_BREATHWORK' : 'AUTO_SAVE',
        payload: {
          protocol: this.selectBreathworkProtocol(matchedPatterns, score),
          anxietyLevel: this.estimateAnxietyLevel(matchedPatterns, score),
          urgency: score > 0.5 ? 'high' : score > 0.3 ? 'medium' : 'low'
        },
        matchedPatterns: matchedPatterns
      };
    }
  }, {
    key: "analyzeMoodPatterns",
    value: function analyzeMoodPatterns(content) {
      var score = 0;
      var matchedPatterns = [];
      var positivePatterns = [/mutlu/i, /sevin√ßli/i, /ne≈üeli/i, /keyifli/i, /memnun/i, /g√ºzel.*?hissed/i, /iyi.*?gidiyor/i, /ba≈üarƒ±lƒ±/i, /gurur/i];
      positivePatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.15;
          matchedPatterns.push('positive');
        }
      });
      var negativePatterns = [/√ºzg√ºn/i, /keyifsiz/i, /mutsuz/i, /depresif/i, /k√∂t√º.*?hissed/i, /√ß√∂kk√ºn/i, /melankolik/i, /karamsarlƒ±k/i, /umutsuz/i];
      negativePatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.2;
          matchedPatterns.push('negative');
        }
      });
      var energyPatterns = [/yorgun/i, /bitkin/i, /enerjik/i, /dinamik/i, /uyu≈üuk/i, /halsiz/i, /zinde/i, /aktif/i];
      energyPatterns.forEach(function (pattern) {
        if (pattern.test(content)) {
          score += 0.1;
          matchedPatterns.push('energy');
        }
      });
      return {
        quickClass: 'MOOD',
        confidence: Math.max(score, 0.3),
        route: 'AUTO_SAVE',
        payload: {
          screen: 'mood',
          estimatedMood: this.estimateMoodScore(matchedPatterns),
          emotionalValence: this.determineValence(matchedPatterns),
          energyLevel: this.estimateEnergyLevel(matchedPatterns)
        },
        matchedPatterns: matchedPatterns
      };
    }
  }, {
    key: "determineOCDCategory",
    value: function determineOCDCategory(patterns) {
      if (patterns.includes('checking')) return 'kontrol';
      if (patterns.includes('cleaning')) return 'temizlik';
      if (patterns.includes('symmetry')) return 'simetri';
      if (patterns.includes('counting')) return 'sayma';
      return 'diƒüer';
    }
  }, {
    key: "selectBreathworkProtocol",
    value: function selectBreathworkProtocol(patterns, score) {
      if (patterns.includes('physical_symptoms') && score > 0.7) return 'quick_calm';
      if (patterns.includes('anxiety') && score > 0.6) return '4-7-8';
      if (patterns.includes('relaxation')) return 'paced';
      if (score > 0.5) return 'box';
      return 'extended';
    }
  }, {
    key: "estimateAnxietyLevel",
    value: function estimateAnxietyLevel(patterns, score) {
      var baseLevel = Math.min(Math.round(score * 10), 8);
      if (patterns.includes('physical_symptoms')) baseLevel = Math.min(baseLevel + 2, 10);
      if (patterns.some(function (p) {
        return p.includes('panic') || p.includes('dayanam');
      })) baseLevel = Math.min(baseLevel + 3, 10);
      return baseLevel;
    }
  }, {
    key: "estimateMoodScore",
    value: function estimateMoodScore(patterns) {
      var mood = 50;
      if (patterns.includes('positive')) mood += 25;
      if (patterns.includes('negative')) mood -= 25;
      return Math.max(0, Math.min(100, mood));
    }
  }, {
    key: "determineValence",
    value: function determineValence(patterns) {
      if (patterns.includes('positive')) return 'positive';
      if (patterns.includes('negative')) return 'negative';
      return 'neutral';
    }
  }, {
    key: "estimateEnergyLevel",
    value: function estimateEnergyLevel(patterns) {
      if (patterns.includes('energy')) {
        return 5;
      }
      return 5;
    }
  }, {
    key: "hasEmotionalLanguage",
    value: function hasEmotionalLanguage(content) {
      var emotionalWords = /hissed|duygu|his|emotion|feel/i;
      return emotionalWords.test(content);
    }
  }, {
    key: "hasTimeReferences",
    value: function hasTimeReferences(content) {
      var timeWords = /bug√ºn|d√ºn|yarƒ±n|≈üimdi|ge√ßen|gelecek|zaman/i;
      return timeWords.test(content);
    }
  }, {
    key: "hasIntensifiers",
    value: function hasIntensifiers(content) {
      var intensifiers = /√ßok|a≈üƒ±rƒ±|son derece|fazlasƒ±yla|tam|kesin/i;
      return intensifiers.test(content);
    }
  }, {
    key: "getGatingDecision",
    value: function getGatingDecision(heuristicResult, input, lastSimilarHashAt) {
      if (!this.makeGatingDecision || !_featureFlags.FEATURE_FLAGS.isEnabled('AI_LLM_GATING')) {
        return {
          needsLLM: false,
          reason: 'gating_disabled',
          confidence: heuristicResult.confidence
        };
      }
      return this.makeGatingDecision({
        quickClass: heuristicResult.quickClass,
        heuristicConfidence: heuristicResult.confidence,
        textLen: input.content.length,
        lastSimilarHashAt: lastSimilarHashAt
      });
    }
  }, {
    key: "canUseLLM",
    value: (function () {
      var _canUseLLM = (0, _asyncToGenerator2.default)(function* (userId) {
        if (!this.tokenBudgetManager) {
          return false;
        }
        try {
          var ok = yield this.tokenBudgetManager.canMakeRequest(userId);
          return ok && this.stats.tokenUsage.remaining > 0;
        } catch (_unused2) {
          return false;
        }
      });
      function canUseLLM(_x5) {
        return _canUseLLM.apply(this, arguments);
      }
      return canUseLLM;
    }())
  }, {
    key: "performLLMAnalysis",
    value: (function () {
      var _performLLMAnalysis = (0, _asyncToGenerator2.default)(function* (input, heuristicResult) {
        return this.buildResult(Object.assign({}, heuristicResult, {
          confidence: Math.min(heuristicResult.confidence + 0.2, 1)
        }), this.generateCacheKey(input), Date.now(), 'llm');
      });
      function performLLMAnalysis(_x6, _x7) {
        return _performLLMAnalysis.apply(this, arguments);
      }
      return performLLMAnalysis;
    }())
  }, {
    key: "buildResult",
    value: function buildResult(analysis, cacheKey, startTime, source) {
      return {
        quickClass: analysis.quickClass,
        confidence: analysis.confidence,
        needsLLM: false,
        route: analysis.route,
        payload: analysis.payload,
        cacheKey: cacheKey,
        computedAt: Date.now(),
        source: source,
        debugInfo: {
          processingTimeMs: Date.now() - startTime
        }
      };
    }
  }, {
    key: "cacheResult",
    value: (function () {
      var _cacheResult = (0, _asyncToGenerator2.default)(function* (cacheKey, result) {
        if (!this.resultCache) {
          return;
        }
        var ttlHours = CONFIG.cacheTTL.voiceHours;
        if (result.route === 'AUTO_SAVE') {
          ttlHours = CONFIG.cacheTTL.todayDigestHours;
        }
        yield this.resultCache.set(cacheKey, result, ttlHours * 60 * 60 * 1000);
      });
      function cacheResult(_x8, _x9) {
        return _cacheResult.apply(this, arguments);
      }
      return cacheResult;
    }())
  }, {
    key: "updateAvgProcessingTime",
    value: function updateAvgProcessingTime(newTime) {
      var total = this.stats.avgProcessingTimeMs * (this.stats.totalRequests - 1) + newTime;
      this.stats.avgProcessingTimeMs = Math.round(total / this.stats.totalRequests);
    }
  }, {
    key: "createGenericResult",
    value: function createGenericResult(input, cacheKey, startTime) {
      return {
        quickClass: 'MOOD',
        confidence: 0.5,
        needsLLM: false,
        route: 'AUTO_SAVE',
        payload: {
          message: 'Tekrarlanan istek algƒ±landƒ±'
        },
        cacheKey: cacheKey,
        computedAt: Date.now(),
        source: 'cache',
        debugInfo: {
          gatingReason: 'duplicate',
          processingTimeMs: Date.now() - startTime
        }
      };
    }
  }, {
    key: "createFallbackResult",
    value: function createFallbackResult(input, startTime) {
      return {
        quickClass: 'OTHER',
        confidence: 0,
        needsLLM: false,
        route: 'AUTO_SAVE',
        payload: {
          error: true
        },
        cacheKey: this.generateCacheKey(input),
        computedAt: Date.now(),
        source: 'heuristic',
        debugInfo: {
          gatingReason: 'error',
          processingTimeMs: Date.now() - startTime
        }
      };
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!CoreAnalysisService.instance) {
        CoreAnalysisService.instance = new CoreAnalysisService();
      }
      return CoreAnalysisService.instance;
    }
  }]);
}();
var coreAnalysisService = exports.coreAnalysisService = CoreAnalysisService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,