2ffc9207653d901b33b1db5bcfdf5430
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindUnsafeByTypeQueries = void 0;
var _errors = require("../helpers/errors");
var UNSAFE_getByType = function UNSAFE_getByType(instance) {
  return function getByTypeFn(type) {
    try {
      return instance.findByType(type);
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByTypeFn);
    }
  };
};
var UNSAFE_getAllByType = function UNSAFE_getAllByType(instance) {
  return function getAllByTypeFn(type) {
    var results = instance.findAllByType(type);
    if (results.length === 0) {
      throw new _errors.ErrorWithStack('No instances found', getAllByTypeFn);
    }
    return results;
  };
};
var UNSAFE_queryByType = function UNSAFE_queryByType(instance) {
  return function queryByTypeFn(type) {
    try {
      return UNSAFE_getByType(instance)(type);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByTypeFn);
    }
  };
};
var UNSAFE_queryAllByType = function UNSAFE_queryAllByType(instance) {
  return function (type) {
    try {
      return UNSAFE_getAllByType(instance)(type);
    } catch (_unused) {
      return [];
    }
  };
};
var bindUnsafeByTypeQueries = function bindUnsafeByTypeQueries(instance) {
  return {
    UNSAFE_getByType: UNSAFE_getByType(instance),
    UNSAFE_getAllByType: UNSAFE_getAllByType(instance),
    UNSAFE_queryByType: UNSAFE_queryByType(instance),
    UNSAFE_queryAllByType: UNSAFE_queryAllByType(instance)
  };
};
exports.bindUnsafeByTypeQueries = bindUnsafeByTypeQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXJyb3JzIiwicmVxdWlyZSIsIlVOU0FGRV9nZXRCeVR5cGUiLCJpbnN0YW5jZSIsImdldEJ5VHlwZUZuIiwidHlwZSIsImZpbmRCeVR5cGUiLCJlcnJvciIsIkVycm9yV2l0aFN0YWNrIiwicHJlcGFyZUVycm9yTWVzc2FnZSIsIlVOU0FGRV9nZXRBbGxCeVR5cGUiLCJnZXRBbGxCeVR5cGVGbiIsInJlc3VsdHMiLCJmaW5kQWxsQnlUeXBlIiwibGVuZ3RoIiwiVU5TQUZFX3F1ZXJ5QnlUeXBlIiwicXVlcnlCeVR5cGVGbiIsImNyZWF0ZVF1ZXJ5QnlFcnJvciIsIlVOU0FGRV9xdWVyeUFsbEJ5VHlwZSIsIl91bnVzZWQiLCJiaW5kVW5zYWZlQnlUeXBlUXVlcmllcyIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcmllcy91bnNhZmUtdHlwZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuaW1wb3J0IHsgRXJyb3JXaXRoU3RhY2ssIHByZXBhcmVFcnJvck1lc3NhZ2UgfSBmcm9tICcuLi9oZWxwZXJzL2Vycm9ycyc7XG5pbXBvcnQgeyBjcmVhdGVRdWVyeUJ5RXJyb3IgfSBmcm9tICcuLi9oZWxwZXJzL2Vycm9ycyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgdHlwZSBVbnNhZmVDb21wb25lbnRUeXBlID0gUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+O1xuXG5jb25zdCBVTlNBRkVfZ2V0QnlUeXBlID0gKFxuICBpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UsXG4pOiAoKHR5cGU6IFVuc2FmZUNvbXBvbmVudFR5cGUpID0+IFJlYWN0VGVzdEluc3RhbmNlKSA9PlxuICBmdW5jdGlvbiBnZXRCeVR5cGVGbih0eXBlOiBVbnNhZmVDb21wb25lbnRUeXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5maW5kQnlUeXBlKHR5cGUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2socHJlcGFyZUVycm9yTWVzc2FnZShlcnJvciksIGdldEJ5VHlwZUZuKTtcbiAgICB9XG4gIH07XG5cbmNvbnN0IFVOU0FGRV9nZXRBbGxCeVR5cGUgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbik6ICgodHlwZTogVW5zYWZlQ29tcG9uZW50VHlwZSkgPT4gQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+KSA9PlxuICBmdW5jdGlvbiBnZXRBbGxCeVR5cGVGbih0eXBlOiBVbnNhZmVDb21wb25lbnRUeXBlKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IGluc3RhbmNlLmZpbmRBbGxCeVR5cGUodHlwZSk7XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2soJ05vIGluc3RhbmNlcyBmb3VuZCcsIGdldEFsbEJ5VHlwZUZuKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbmNvbnN0IFVOU0FGRV9xdWVyeUJ5VHlwZSA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlLFxuKTogKCh0eXBlOiBVbnNhZmVDb21wb25lbnRUeXBlKSA9PiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGwpID0+XG4gIGZ1bmN0aW9uIHF1ZXJ5QnlUeXBlRm4odHlwZTogVW5zYWZlQ29tcG9uZW50VHlwZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gVU5TQUZFX2dldEJ5VHlwZShpbnN0YW5jZSkodHlwZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjcmVhdGVRdWVyeUJ5RXJyb3IoZXJyb3IsIHF1ZXJ5QnlUeXBlRm4pO1xuICAgIH1cbiAgfTtcblxuY29uc3QgVU5TQUZFX3F1ZXJ5QWxsQnlUeXBlID1cbiAgKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6ICgodHlwZTogVW5zYWZlQ29tcG9uZW50VHlwZSkgPT4gQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+KSA9PlxuICAodHlwZTogVW5zYWZlQ29tcG9uZW50VHlwZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gVU5TQUZFX2dldEFsbEJ5VHlwZShpbnN0YW5jZSkodHlwZSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuXG4vLyBVbnNhZmUgYWxpYXNlc1xuZXhwb3J0IHR5cGUgVW5zYWZlQnlUeXBlUXVlcmllcyA9IHtcbiAgVU5TQUZFX2dldEJ5VHlwZTogPFA+KHR5cGU6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4pID0+IFJlYWN0VGVzdEluc3RhbmNlO1xuICBVTlNBRkVfZ2V0QWxsQnlUeXBlOiA8UD4odHlwZTogUmVhY3QuQ29tcG9uZW50VHlwZTxQPikgPT4gQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+O1xuICBVTlNBRkVfcXVlcnlCeVR5cGU6IDxQPih0eXBlOiBSZWFjdC5Db21wb25lbnRUeXBlPFA+KSA9PiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGw7XG4gIFVOU0FGRV9xdWVyeUFsbEJ5VHlwZTogPFA+KHR5cGU6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4pID0+IEFycmF5PFJlYWN0VGVzdEluc3RhbmNlPjtcbn07XG5cbi8vIFRPRE86IG1pZ3JhdGUgdG8gbWFrZVF1ZXJpZXMgcGF0dGVyblxuZXhwb3J0IGNvbnN0IGJpbmRVbnNhZmVCeVR5cGVRdWVyaWVzID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6IFVuc2FmZUJ5VHlwZVF1ZXJpZXMgPT4gKHtcbiAgVU5TQUZFX2dldEJ5VHlwZTogVU5TQUZFX2dldEJ5VHlwZShpbnN0YW5jZSksXG4gIFVOU0FGRV9nZXRBbGxCeVR5cGU6IFVOU0FGRV9nZXRBbGxCeVR5cGUoaW5zdGFuY2UpLFxuICBVTlNBRkVfcXVlcnlCeVR5cGU6IFVOU0FGRV9xdWVyeUJ5VHlwZShpbnN0YW5jZSksXG4gIFVOU0FGRV9xdWVyeUFsbEJ5VHlwZTogVU5TQUZFX3F1ZXJ5QWxsQnlUeXBlKGluc3RhbmNlKSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFNQSxJQUFNQyxnQkFBZ0IsR0FDcEIsU0FESUEsZ0JBQWdCQSxDQUNwQkMsUUFBMkI7RUFBQSxPQUUzQixTQUFTQyxXQUFXQSxDQUFDQyxJQUF5QixFQUFFO0lBQzlDLElBQUk7TUFDRixPQUFPRixRQUFRLENBQUNHLFVBQVUsQ0FBQ0QsSUFBSSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxPQUFPRSxLQUFLLEVBQUU7TUFDZCxNQUFNLElBQUlQLE9BQUEsQ0FBQVEsY0FBYyxDQUFDLElBQUFSLE9BQUEsQ0FBQVMsbUJBQW1CLEVBQUNGLEtBQUssQ0FBQyxFQUFFSCxXQUFXLENBQUM7SUFDbkU7RUFDRixDQUFDO0FBQUE7QUFFSCxJQUFNTSxtQkFBbUIsR0FDdkIsU0FESUEsbUJBQW1CQSxDQUN2QlAsUUFBMkI7RUFBQSxPQUUzQixTQUFTUSxjQUFjQSxDQUFDTixJQUF5QixFQUFFO0lBQ2pELElBQU1PLE9BQU8sR0FBR1QsUUFBUSxDQUFDVSxhQUFhLENBQUNSLElBQUksQ0FBQztJQUM1QyxJQUFJTyxPQUFPLENBQUNFLE1BQU0sS0FBSyxDQUFDLEVBQUU7TUFDeEIsTUFBTSxJQUFJZCxPQUFBLENBQUFRLGNBQWMsQ0FBQyxvQkFBb0IsRUFBRUcsY0FBYyxDQUFDO0lBQ2hFO0lBQ0EsT0FBT0MsT0FBTztFQUNoQixDQUFDO0FBQUE7QUFFSCxJQUFNRyxrQkFBa0IsR0FDdEIsU0FESUEsa0JBQWtCQSxDQUN0QlosUUFBMkI7RUFBQSxPQUUzQixTQUFTYSxhQUFhQSxDQUFDWCxJQUF5QixFQUFFO0lBQ2hELElBQUk7TUFDRixPQUFPSCxnQkFBZ0IsQ0FBQ0MsUUFBUSxDQUFDLENBQUNFLElBQUksQ0FBQztJQUN6QyxDQUFDLENBQUMsT0FBT0UsS0FBSyxFQUFFO01BQ2QsT0FBTyxJQUFBUCxPQUFBLENBQUFpQixrQkFBa0IsRUFBQ1YsS0FBSyxFQUFFUyxhQUFhLENBQUM7SUFDakQ7RUFDRixDQUFDO0FBQUE7QUFFSCxJQUFNRSxxQkFBcUIsR0FDeEIsU0FER0EscUJBQXFCQSxDQUN4QmYsUUFBMkI7RUFBQSxPQUMzQixVQUFBRSxJQUF5QixFQUFLO0lBQzdCLElBQUk7TUFDRixPQUFPSyxtQkFBbUIsQ0FBQ1AsUUFBUSxDQUFDLENBQUNFLElBQUksQ0FBQztJQUM1QyxDQUFDLENBQUMsT0FBQWMsT0FBQSxFQUFNO01BQ04sT0FBTyxFQUFFO0lBQ1g7RUFDRixDQUFDO0FBQUE7QUFXSSxJQUFNQyx1QkFBdUIsR0FBSSxTQUEzQkEsdUJBQXVCQSxDQUFJakIsUUFBMkI7RUFBQSxPQUEyQjtJQUM1RkQsZ0JBQWdCLEVBQUVBLGdCQUFnQixDQUFDQyxRQUFRLENBQUM7SUFDNUNPLG1CQUFtQixFQUFFQSxtQkFBbUIsQ0FBQ1AsUUFBUSxDQUFDO0lBQ2xEWSxrQkFBa0IsRUFBRUEsa0JBQWtCLENBQUNaLFFBQVEsQ0FBQztJQUNoRGUscUJBQXFCLEVBQUVBLHFCQUFxQixDQUFDZixRQUFRO0VBQ3ZELENBQUM7QUFBQSxDQUFDO0FBQUNrQixPQUFBLENBQUFELHVCQUFBLEdBQUFBLHVCQUFBIiwiaWdub3JlTGlzdCI6W119