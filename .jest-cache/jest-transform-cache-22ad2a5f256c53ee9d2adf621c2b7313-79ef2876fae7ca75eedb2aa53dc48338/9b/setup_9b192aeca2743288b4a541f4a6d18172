57461c6e0fed25523ab78720fc7b1cea
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setup = setup;
var _timers = require("../../helpers/timers");
var _wrapAsync = require("../../helpers/wrap-async");
var _clear = require("../clear");
var _paste = require("../paste");
var _press = require("../press");
var _scroll = require("../scroll");
var _type = require("../type");
var _utils = require("../utils");
function universalJestAdvanceTimersBy(ms) {
  if ((0, _timers.jestFakeTimersAreEnabled)()) {
    return jest.advanceTimersByTime(ms);
  } else {
    return Promise.resolve();
  }
}
var defaultOptions = {
  delay: 0,
  advanceTimers: universalJestAdvanceTimersBy
};
function setup(options) {
  var config = createConfig(options);
  var instance = createInstance(config);
  return instance;
}
function createConfig(options) {
  return Object.assign({}, defaultOptions, options);
}
function createInstance(config) {
  var instance = {
    config: config
  };
  var api = {
    press: wrapAndBindImpl(instance, _press.press),
    longPress: wrapAndBindImpl(instance, _press.longPress),
    type: wrapAndBindImpl(instance, _type.type),
    clear: wrapAndBindImpl(instance, _clear.clear),
    paste: wrapAndBindImpl(instance, _paste.paste),
    scrollTo: wrapAndBindImpl(instance, _scroll.scrollTo)
  };
  Object.assign(instance, api);
  return instance;
}
function wrapAndBindImpl(instance, impl) {
  function method() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (0, _wrapAsync.wrapAsync)(function () {
      return (impl.apply(instance, args).then(function () {
          var _ref = (0, _asyncToGenerator2.default)(function* (result) {
            yield (0, _utils.wait)(instance.config);
            return result;
          });
          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }())
      );
    });
  }
  Object.defineProperty(method, 'name', {
    get: function get() {
      return impl.name;
    }
  });
  return method;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,