2438f5ff32fac04842b6db7fd1686924
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.deadLetterQueue = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var DeadLetterQueueService = function () {
  function DeadLetterQueueService() {
    (0, _classCallCheck2.default)(this, DeadLetterQueueService);
    this.STORAGE_KEY = 'dead_letter_queue';
    this.MAX_ARCHIVE_DAYS = 30;
  }
  return (0, _createClass2.default)(DeadLetterQueueService, [{
    key: "addToDeadLetter",
    value: function () {
      var _addToDeadLetter = (0, _asyncToGenerator2.default)(function* (item, error) {
        var _error$code;
        var queue = yield this.getQueue();
        var record = Object.assign({}, item, {
          failedAt: new Date().toISOString(),
          errorMessage: (error == null ? void 0 : error.message) || item.errorMessage || 'Unknown error',
          errorCode: (_error$code = error == null ? void 0 : error.code) != null ? _error$code : error == null ? void 0 : error.status,
          canRetry: this.isRetryable(error),
          archived: false
        });
        queue.push(record);
        yield this.saveQueue(queue);
      });
      function addToDeadLetter(_x, _x2) {
        return _addToDeadLetter.apply(this, arguments);
      }
      return addToDeadLetter;
    }()
  }, {
    key: "retryDeadLetterItem",
    value: function () {
      var _retryDeadLetterItem = (0, _asyncToGenerator2.default)(function* (itemId, requeue) {
        var queue = yield this.getQueue();
        var found = queue.find(function (i) {
          return i.id === itemId;
        });
        if (!found || !found.canRetry || found.archived) return false;
        try {
          yield requeue(found.data);
          yield this.removeFromQueue(itemId);
          return true;
        } catch (_unused) {
          return false;
        }
      });
      function retryDeadLetterItem(_x3, _x4) {
        return _retryDeadLetterItem.apply(this, arguments);
      }
      return retryDeadLetterItem;
    }()
  }, {
    key: "list",
    value: function () {
      var _list = (0, _asyncToGenerator2.default)(function* () {
        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
        var queue = yield this.getQueue();
        return queue.slice(-limit).reverse();
      });
      function list() {
        return _list.apply(this, arguments);
      }
      return list;
    }()
  }, {
    key: "archiveOldItems",
    value: function () {
      var _archiveOldItems = (0, _asyncToGenerator2.default)(function* () {
        var queue = yield this.getQueue();
        var cutoff = new Date(Date.now() - this.MAX_ARCHIVE_DAYS * 86400000);
        var archived = 0;
        var updated = queue.map(function (item) {
          if (!item.archived && new Date(item.failedAt) < cutoff) {
            archived++;
            return Object.assign({}, item, {
              archived: true
            });
          }
          return item;
        });
        yield this.saveQueue(updated);
        return archived;
      });
      function archiveOldItems() {
        return _archiveOldItems.apply(this, arguments);
      }
      return archiveOldItems;
    }()
  }, {
    key: "processDeadLetterQueue",
    value: function () {
      var _processDeadLetterQueue = (0, _asyncToGenerator2.default)(function* () {
        var _this = this;
        var retried = 0;
        var archived = 0;
        var items = yield this.getQueue();
        var SUPPORTED_ENTITIES = new Set(['compulsion', 'achievement', 'mood_entry', 'ai_profile', 'treatment_plan', 'voice_checkin', 'thought_record']);
        var SUPPORTED_OPERATIONS = new Set(['CREATE', 'UPDATE', 'DELETE']);
        try {
          var NetInfo = require('@react-native-community/netinfo').default;
          var state = yield NetInfo.fetch();
          var offline = !(state.isConnected && state.isInternetReachable !== false);
          if (offline) return {
            retried: 0,
            archived: archived + (yield this.archiveOldItems())
          };
        } catch (_unused2) {}
        var _loop = function* _loop() {
            if (item.archived) return 0;
            if (!SUPPORTED_OPERATIONS.has(item.type) || !SUPPORTED_ENTITIES.has(item.entity)) {
              item.archived = true;
              archived++;
              console.warn('🗄️ Archived unsupported DLQ item:', {
                entity: item.entity,
                type: item.type
              });
              return 0;
            }
            if (item.canRetry && (item.retryCount || 0) < 5) {
              try {
                var attempt = (item.retryCount || 0) + 1;
                var base = 2000;
                var delay = Math.min(base * Math.pow(2, attempt), 60000) + Math.floor(Math.random() * 500);
                yield new Promise(function (res) {
                  return setTimeout(res, delay);
                });
                var _yield$import = yield import("../offlineSync"),
                  offlineSyncService = _yield$import.offlineSyncService;
                yield offlineSyncService.addToSyncQueue({
                  type: item.type,
                  entity: item.entity,
                  data: item.data
                });
                yield _this.removeFromQueue(item.id);
                retried++;
              } catch (_unused3) {}
            }
          },
          _ret;
        for (var item of items) {
          _ret = yield* _loop();
          if (_ret === 0) continue;
        }
        if (archived > 0) {
          yield this.saveQueue(items);
        }
        archived += yield this.archiveOldItems();
        return {
          retried: retried,
          archived: archived
        };
      });
      function processDeadLetterQueue() {
        return _processDeadLetterQueue.apply(this, arguments);
      }
      return processDeadLetterQueue;
    }()
  }, {
    key: "getStatistics",
    value: function () {
      var _getStatistics = (0, _asyncToGenerator2.default)(function* () {
        var queue = yield this.getQueue();
        var stats = {
          total: queue.length,
          retryable: queue.filter(function (i) {
            return i.canRetry && !i.archived;
          }).length,
          archived: queue.filter(function (i) {
            return i.archived;
          }).length,
          byEntity: {},
          byError: {}
        };
        queue.forEach(function (i) {
          var _i$errorCode;
          stats.byEntity[i.entity] = (stats.byEntity[i.entity] || 0) + 1;
          var err = ((_i$errorCode = i.errorCode) != null ? _i$errorCode : 'unknown').toString();
          stats.byError[err] = (stats.byError[err] || 0) + 1;
        });
        return stats;
      });
      function getStatistics() {
        return _getStatistics.apply(this, arguments);
      }
      return getStatistics;
    }()
  }, {
    key: "isRetryable",
    value: function isRetryable(error) {
      if (!error) return false;
      if ((error == null ? void 0 : error.code) === 'NETWORK_ERROR') return true;
      if ((error == null ? void 0 : error.code) === 'TIMEOUT') return true;
      if ((error == null ? void 0 : error.status) === 429) return true;
      if ((error == null ? void 0 : error.status) >= 500 && (error == null ? void 0 : error.status) < 600) return true;
      if ((error == null ? void 0 : error.status) === 401 || (error == null ? void 0 : error.status) === 403) return false;
      if ((error == null ? void 0 : error.status) === 400) return false;
      return false;
    }
  }, {
    key: "getQueue",
    value: function () {
      var _getQueue = (0, _asyncToGenerator2.default)(function* () {
        try {
          var raw = yield _asyncStorage.default.getItem(this.STORAGE_KEY);
          return raw ? JSON.parse(raw) : [];
        } catch (_unused4) {
          return [];
        }
      });
      function getQueue() {
        return _getQueue.apply(this, arguments);
      }
      return getQueue;
    }()
  }, {
    key: "saveQueue",
    value: function () {
      var _saveQueue = (0, _asyncToGenerator2.default)(function* (queue) {
        yield _asyncStorage.default.setItem(this.STORAGE_KEY, JSON.stringify(queue));
      });
      function saveQueue(_x5) {
        return _saveQueue.apply(this, arguments);
      }
      return saveQueue;
    }()
  }, {
    key: "removeFromQueue",
    value: function () {
      var _removeFromQueue = (0, _asyncToGenerator2.default)(function* (itemId) {
        var queue = yield this.getQueue();
        var filtered = queue.filter(function (i) {
          return i.id !== itemId;
        });
        yield this.saveQueue(filtered);
      });
      function removeFromQueue(_x6) {
        return _removeFromQueue.apply(this, arguments);
      }
      return removeFromQueue;
    }()
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!DeadLetterQueueService.instance) {
        DeadLetterQueueService.instance = new DeadLetterQueueService();
      }
      return DeadLetterQueueService.instance;
    }
  }]);
}();
var deadLetterQueue = exports.deadLetterQueue = DeadLetterQueueService.getInstance();
var _default = exports.default = deadLetterQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,