564ce730b26d72031dfd5e60710166ae
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TouchableWithoutFeedback;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _PressabilityDebug = require("../../Pressability/PressabilityDebug");
var _usePressability = _interopRequireDefault(require("../../Pressability/usePressability"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["onBlur", "onFocus"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var PASSTHROUGH_PROPS = ['accessibilityActions', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityLanguage', 'accessibilityIgnoresInvertColors', 'accessibilityLabel', 'accessibilityLiveRegion', 'accessibilityRole', 'accessibilityValue', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'accessibilityViewIsModal', 'aria-modal', 'hitSlop', 'importantForAccessibility', 'nativeID', 'onAccessibilityAction', 'onBlur', 'onFocus', 'onLayout', 'testID'];
function TouchableWithoutFeedback(props) {
  var _props$ariaBusy, _props$accessibilityS, _props$ariaChecked, _props$accessibilityS2, _props$ariaDisabled, _props$accessibilityS3, _props$ariaExpanded, _props$accessibilityS4, _props$ariaSelected, _props$accessibilityS5, _props$ariaHidden, _props$id;
  var disabled = props.disabled,
    rejectResponderTermination = props.rejectResponderTermination,
    ariaDisabled = props['aria-disabled'],
    accessibilityState = props.accessibilityState,
    hitSlop = props.hitSlop,
    delayLongPress = props.delayLongPress,
    delayPressIn = props.delayPressIn,
    delayPressOut = props.delayPressOut,
    pressRetentionOffset = props.pressRetentionOffset,
    touchSoundDisabled = props.touchSoundDisabled,
    _onBlur = props.onBlur,
    _onFocus = props.onFocus,
    onLongPress = props.onLongPress,
    onPress = props.onPress,
    onPressIn = props.onPressIn,
    onPressOut = props.onPressOut;
  var pressabilityConfig = (0, _react.useMemo)(function () {
    return {
      cancelable: !rejectResponderTermination,
      disabled: disabled !== null ? disabled : ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
      hitSlop: hitSlop,
      delayLongPress: delayLongPress,
      delayPressIn: delayPressIn,
      delayPressOut: delayPressOut,
      minPressDuration: 0,
      pressRectOffset: pressRetentionOffset,
      android_disableSound: touchSoundDisabled,
      onBlur: _onBlur,
      onFocus: _onFocus,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: onPressIn,
      onPressOut: onPressOut
    };
  }, [rejectResponderTermination, disabled, ariaDisabled, accessibilityState == null ? void 0 : accessibilityState.disabled, hitSlop, delayLongPress, delayPressIn, delayPressOut, pressRetentionOffset, touchSoundDisabled, _onBlur, _onFocus, onLongPress, onPress, onPressIn, onPressOut]);
  var eventHandlers = (0, _usePressability.default)(pressabilityConfig);
  var element = React.Children.only(props.children);
  var children = [element.props.children];
  var ariaLive = props['aria-live'];
  if (__DEV__) {
    if (element.type === _View.default) {
      children.push((0, _jsxRuntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
        color: "red",
        hitSlop: props.hitSlop
      }));
    }
  }
  var _accessibilityState = {
    busy: (_props$ariaBusy = props['aria-busy']) != null ? _props$ariaBusy : (_props$accessibilityS = props.accessibilityState) == null ? void 0 : _props$accessibilityS.busy,
    checked: (_props$ariaChecked = props['aria-checked']) != null ? _props$ariaChecked : (_props$accessibilityS2 = props.accessibilityState) == null ? void 0 : _props$accessibilityS2.checked,
    disabled: (_props$ariaDisabled = props['aria-disabled']) != null ? _props$ariaDisabled : (_props$accessibilityS3 = props.accessibilityState) == null ? void 0 : _props$accessibilityS3.disabled,
    expanded: (_props$ariaExpanded = props['aria-expanded']) != null ? _props$ariaExpanded : (_props$accessibilityS4 = props.accessibilityState) == null ? void 0 : _props$accessibilityS4.expanded,
    selected: (_props$ariaSelected = props['aria-selected']) != null ? _props$ariaSelected : (_props$accessibilityS5 = props.accessibilityState) == null ? void 0 : _props$accessibilityS5.selected
  };
  var onBlur = eventHandlers.onBlur,
    onFocus = eventHandlers.onFocus,
    eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(eventHandlers, _excluded);
  var elementProps = Object.assign({}, eventHandlersWithoutBlurAndFocus, {
    accessible: props.accessible !== false,
    accessibilityState: props.disabled != null ? Object.assign({}, _accessibilityState, {
      disabled: props.disabled
    }) : _accessibilityState,
    focusable: props.focusable !== false && props.onPress !== undefined && !props.disabled,
    accessibilityElementsHidden: (_props$ariaHidden = props['aria-hidden']) != null ? _props$ariaHidden : props.accessibilityElementsHidden,
    importantForAccessibility: props['aria-hidden'] === true ? 'no-hide-descendants' : props.importantForAccessibility,
    accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : props.accessibilityLiveRegion,
    nativeID: (_props$id = props.id) != null ? _props$id : props.nativeID
  });
  for (var prop of PASSTHROUGH_PROPS) {
    if (props[prop] !== undefined) {
      elementProps[prop] = props[prop];
    }
  }
  return React.cloneElement.apply(React, [element, elementProps].concat(children));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,