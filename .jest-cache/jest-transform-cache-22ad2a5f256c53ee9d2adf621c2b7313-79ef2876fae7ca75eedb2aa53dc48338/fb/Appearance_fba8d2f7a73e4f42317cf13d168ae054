dfe56fe4972c98cb4d5f0d4c7bd794f4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addChangeListener = addChangeListener;
exports.getColorScheme = getColorScheme;
exports.setColorScheme = setColorScheme;
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));
var _invariant = _interopRequireDefault(require("invariant"));
var lazyState;
function getState() {
  if (lazyState != null) {
    return lazyState;
  }
  var eventEmitter = new _EventEmitter.default();
  var NativeAppearance = require("./NativeAppearance").default;
  if (NativeAppearance == null) {
    lazyState = {
      NativeAppearance: null,
      appearance: null,
      eventEmitter: eventEmitter
    };
  } else {
    var state = {
      NativeAppearance: NativeAppearance,
      appearance: null,
      eventEmitter: eventEmitter
    };
    new _NativeEventEmitter.default(NativeAppearance).addListener('appearanceChanged', function (newAppearance) {
      state.appearance = {
        colorScheme: toColorScheme(newAppearance.colorScheme)
      };
      eventEmitter.emit('change', state.appearance);
    });
    lazyState = state;
  }
  return lazyState;
}
function getColorScheme() {
  var colorScheme = null;
  var state = getState();
  var NativeAppearance = state.NativeAppearance;
  if (NativeAppearance != null) {
    if (state.appearance == null) {
      state.appearance = {
        colorScheme: toColorScheme(NativeAppearance.getColorScheme())
      };
    }
    colorScheme = state.appearance.colorScheme;
  }
  return colorScheme;
}
function setColorScheme(colorScheme) {
  var state = getState();
  var NativeAppearance = state.NativeAppearance;
  if (NativeAppearance != null) {
    NativeAppearance.setColorScheme(colorScheme != null ? colorScheme : 'unspecified');
    state.appearance = {
      colorScheme: toColorScheme(NativeAppearance.getColorScheme())
    };
  }
}
function addChangeListener(listener) {
  var _getState = getState(),
    eventEmitter = _getState.eventEmitter;
  return eventEmitter.addListener('change', listener);
}
function toColorScheme(colorScheme) {
  (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
  return colorScheme;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlRXZlbnRFbWl0dGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfRXZlbnRFbWl0dGVyIiwiX2ludmFyaWFudCIsImxhenlTdGF0ZSIsImdldFN0YXRlIiwiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwiTmF0aXZlQXBwZWFyYW5jZSIsImRlZmF1bHQiLCJhcHBlYXJhbmNlIiwic3RhdGUiLCJOYXRpdmVFdmVudEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsIm5ld0FwcGVhcmFuY2UiLCJjb2xvclNjaGVtZSIsInRvQ29sb3JTY2hlbWUiLCJlbWl0IiwiZ2V0Q29sb3JTY2hlbWUiLCJzZXRDb2xvclNjaGVtZSIsImFkZENoYW5nZUxpc3RlbmVyIiwibGlzdGVuZXIiLCJfZ2V0U3RhdGUiLCJpbnZhcmlhbnQiXSwic291cmNlcyI6WyJBcHBlYXJhbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7RXZlbnRTdWJzY3JpcHRpb259IGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgdHlwZSB7QXBwZWFyYW5jZVByZWZlcmVuY2VzLCBDb2xvclNjaGVtZU5hbWV9IGZyb20gJy4vTmF0aXZlQXBwZWFyYW5jZSc7XG5pbXBvcnQgdHlwZW9mIElOYXRpdmVBcHBlYXJhbmNlIGZyb20gJy4vTmF0aXZlQXBwZWFyYW5jZSc7XG5cbmltcG9ydCBOYXRpdmVFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL05hdGl2ZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnR5cGUgQXBwZWFyYW5jZSA9IHtcbiAgY29sb3JTY2hlbWU6ID9Db2xvclNjaGVtZU5hbWUsXG59O1xuXG5sZXQgbGF6eVN0YXRlOiA/e1xuICArTmF0aXZlQXBwZWFyYW5jZTogSU5hdGl2ZUFwcGVhcmFuY2UsXG4gIC8vIENhY2hlIHRoZSBjb2xvciBzY2hlbWUgdG8gcmVkdWNlIHRoZSBjb3N0IG9mIHJlYWRpbmcgaXQgYmV0d2VlbiBjaGFuZ2VzLlxuICAvLyBOT1RFOiBJZiBgTmF0aXZlQXBwZWFyYW5jZWAgaXMgbnVsbCwgdGhpcyB3aWxsIGFsd2F5cyBiZSBudWxsLlxuICBhcHBlYXJhbmNlOiA/QXBwZWFyYW5jZSxcbiAgLy8gTk9URTogVGhpcyBpcyBub24tbnVsbGFibGUgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIGBvbkNoYW5nZWRMaXN0ZW5lcmAgdG9cbiAgLy8gcmV0dXJuIGEgbm9uLW51bGxhYmxlIGBFdmVudFN1YnNjcmlwdGlvbmAgdmFsdWUuIFRoaXMgaXMgbm90IHRoZSBjb21tb25cbiAgLy8gcGF0aCwgc28gd2UgZG8gbm90IGhhdmUgdG8gb3Zlci1vcHRpbWl6ZSBpdC5cbiAgK2V2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyPHtjaGFuZ2U6IFtBcHBlYXJhbmNlXX0+LFxufTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYWxsIHN0YXRlIGFuZCBsaXN0ZW5lcnMgYXJlIGxhemlseSBpbml0aWFsaXplZCBjb3JyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIGdldFN0YXRlKCk6ICROb25NYXliZVR5cGU8dHlwZW9mIGxhenlTdGF0ZT4ge1xuICBpZiAobGF6eVN0YXRlICE9IG51bGwpIHtcbiAgICByZXR1cm4gbGF6eVN0YXRlO1xuICB9XG4gIGNvbnN0IGV2ZW50RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8e2NoYW5nZTogW0FwcGVhcmFuY2VdfT4oKTtcbiAgLy8gTk9URTogQXZvaWQgaW5pdGlhbGl6aW5nIGBOYXRpdmVBcHBlYXJhbmNlYCB1bnRpbCBpdCBpcyBhY3R1YWxseSB1c2VkLlxuICBjb25zdCBOYXRpdmVBcHBlYXJhbmNlID0gcmVxdWlyZSgnLi9OYXRpdmVBcHBlYXJhbmNlJykuZGVmYXVsdDtcbiAgaWYgKE5hdGl2ZUFwcGVhcmFuY2UgPT0gbnVsbCkge1xuICAgIC8vIEFzc2lnbiBgbnVsbGAgdG8gYXZvaWQgcmUtaW5pdGlhbGl6aW5nIG9uIHN1YnNlcXVlbnQgaW52b2NhdGlvbnMuXG4gICAgbGF6eVN0YXRlID0ge1xuICAgICAgTmF0aXZlQXBwZWFyYW5jZTogbnVsbCxcbiAgICAgIGFwcGVhcmFuY2U6IG51bGwsXG4gICAgICBldmVudEVtaXR0ZXIsXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdGF0ZTogJE5vbk1heWJlVHlwZTx0eXBlb2YgbGF6eVN0YXRlPiA9IHtcbiAgICAgIE5hdGl2ZUFwcGVhcmFuY2UsXG4gICAgICBhcHBlYXJhbmNlOiBudWxsLFxuICAgICAgZXZlbnRFbWl0dGVyLFxuICAgIH07XG4gICAgbmV3IE5hdGl2ZUV2ZW50RW1pdHRlcjx7XG4gICAgICBhcHBlYXJhbmNlQ2hhbmdlZDogW0FwcGVhcmFuY2VQcmVmZXJlbmNlc10sXG4gICAgfT4oTmF0aXZlQXBwZWFyYW5jZSkuYWRkTGlzdGVuZXIoJ2FwcGVhcmFuY2VDaGFuZ2VkJywgbmV3QXBwZWFyYW5jZSA9PiB7XG4gICAgICBzdGF0ZS5hcHBlYXJhbmNlID0ge1xuICAgICAgICBjb2xvclNjaGVtZTogdG9Db2xvclNjaGVtZShuZXdBcHBlYXJhbmNlLmNvbG9yU2NoZW1lKSxcbiAgICAgIH07XG4gICAgICBldmVudEVtaXR0ZXIuZW1pdCgnY2hhbmdlJywgc3RhdGUuYXBwZWFyYW5jZSk7XG4gICAgfSk7XG4gICAgbGF6eVN0YXRlID0gc3RhdGU7XG4gIH1cbiAgcmV0dXJuIGxhenlTdGF0ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGNvbG9yIHNjaGVtZSBwcmVmZXJlbmNlLiBUaGlzIHZhbHVlIG1heSBjaGFuZ2UsIHNvIHRoZVxuICogdmFsdWUgc2hvdWxkIG5vdCBiZSBjYWNoZWQgd2l0aG91dCBlaXRoZXIgbGlzdGVuaW5nIHRvIGNoYW5nZXMgb3IgdXNpbmdcbiAqIHRoZSBgdXNlQ29sb3JTY2hlbWVgIGhvb2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvclNjaGVtZSgpOiA/Q29sb3JTY2hlbWVOYW1lIHtcbiAgbGV0IGNvbG9yU2NoZW1lID0gbnVsbDtcbiAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICBjb25zdCB7TmF0aXZlQXBwZWFyYW5jZX0gPSBzdGF0ZTtcbiAgaWYgKE5hdGl2ZUFwcGVhcmFuY2UgIT0gbnVsbCkge1xuICAgIGlmIChzdGF0ZS5hcHBlYXJhbmNlID09IG51bGwpIHtcbiAgICAgIC8vIExhemlseSBpbml0aWFsaXplIGBzdGF0ZS5hcHBlYXJhbmNlYC4gVGhpcyBzaG91bGQgb25seVxuICAgICAgLy8gaGFwcGVuIG9uY2UgYmVjYXVzZSB3ZSBuZXZlciByZWFzc2lnbiBhIG51bGwgdmFsdWUgdG8gaXQuXG4gICAgICBzdGF0ZS5hcHBlYXJhbmNlID0ge1xuICAgICAgICBjb2xvclNjaGVtZTogdG9Db2xvclNjaGVtZShOYXRpdmVBcHBlYXJhbmNlLmdldENvbG9yU2NoZW1lKCkpLFxuICAgICAgfTtcbiAgICB9XG4gICAgY29sb3JTY2hlbWUgPSBzdGF0ZS5hcHBlYXJhbmNlLmNvbG9yU2NoZW1lO1xuICB9XG4gIHJldHVybiBjb2xvclNjaGVtZTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBjdXJyZW50IGNvbG9yIHNjaGVtZSB0byB0aGUgc3VwcGxpZWQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb2xvclNjaGVtZShjb2xvclNjaGVtZTogP0NvbG9yU2NoZW1lTmFtZSk6IHZvaWQge1xuICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gIGNvbnN0IHtOYXRpdmVBcHBlYXJhbmNlfSA9IHN0YXRlO1xuICBpZiAoTmF0aXZlQXBwZWFyYW5jZSAhPSBudWxsKSB7XG4gICAgTmF0aXZlQXBwZWFyYW5jZS5zZXRDb2xvclNjaGVtZShjb2xvclNjaGVtZSA/PyAndW5zcGVjaWZpZWQnKTtcbiAgICBzdGF0ZS5hcHBlYXJhbmNlID0ge1xuICAgICAgY29sb3JTY2hlbWU6IHRvQ29sb3JTY2hlbWUoTmF0aXZlQXBwZWFyYW5jZS5nZXRDb2xvclNjaGVtZSgpKSxcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogQWRkIGFuIGV2ZW50IGhhbmRsZXIgdGhhdCBpcyBmaXJlZCB3aGVuIGFwcGVhcmFuY2UgcHJlZmVyZW5jZXMgY2hhbmdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2hhbmdlTGlzdGVuZXIoXG4gIGxpc3RlbmVyOiAoe2NvbG9yU2NoZW1lOiA/Q29sb3JTY2hlbWVOYW1lfSkgPT4gdm9pZCxcbik6IEV2ZW50U3Vic2NyaXB0aW9uIHtcbiAgY29uc3Qge2V2ZW50RW1pdHRlcn0gPSBnZXRTdGF0ZSgpO1xuICByZXR1cm4gZXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG59XG5cbi8qKlxuICogVE9ETzogKGhyYW1vcykgVDUyOTE5NjUyIFVzZSA/Q29sb3JTY2hlbWVOYW1lIG9uY2UgY29kZWdlbiBzdXBwb3J0cyB1bmlvblxuICovXG5mdW5jdGlvbiB0b0NvbG9yU2NoZW1lKGNvbG9yU2NoZW1lOiA/c3RyaW5nKTogP0NvbG9yU2NoZW1lTmFtZSB7XG4gIGludmFyaWFudChcbiAgICBjb2xvclNjaGVtZSA9PT0gJ2RhcmsnIHx8IGNvbG9yU2NoZW1lID09PSAnbGlnaHQnIHx8IGNvbG9yU2NoZW1lID09IG51bGwsXG4gICAgXCJVbnJlY29nbml6ZWQgY29sb3Igc2NoZW1lLiBEaWQgeW91IG1lYW4gJ2RhcmsnLCAnbGlnaHQnIG9yIG51bGw/XCIsXG4gICk7XG4gIHJldHVybiBjb2xvclNjaGVtZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWNBLElBQUFBLG1CQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFNQSxJQUFJRyxTQVNIO0FBS0QsU0FBU0MsUUFBUUEsQ0FBQSxFQUFvQztFQUNuRCxJQUFJRCxTQUFTLElBQUksSUFBSSxFQUFFO0lBQ3JCLE9BQU9BLFNBQVM7RUFDbEI7RUFDQSxJQUFNRSxZQUFZLEdBQUcsSUFBSUMscUJBQVksQ0FBeUIsQ0FBQztFQUUvRCxJQUFNQyxnQkFBZ0IsR0FBR1AsT0FBTyxxQkFBcUIsQ0FBQyxDQUFDUSxPQUFPO0VBQzlELElBQUlELGdCQUFnQixJQUFJLElBQUksRUFBRTtJQUU1QkosU0FBUyxHQUFHO01BQ1ZJLGdCQUFnQixFQUFFLElBQUk7TUFDdEJFLFVBQVUsRUFBRSxJQUFJO01BQ2hCSixZQUFZLEVBQVpBO0lBQ0YsQ0FBQztFQUNILENBQUMsTUFBTTtJQUNMLElBQU1LLEtBQXNDLEdBQUc7TUFDN0NILGdCQUFnQixFQUFoQkEsZ0JBQWdCO01BQ2hCRSxVQUFVLEVBQUUsSUFBSTtNQUNoQkosWUFBWSxFQUFaQTtJQUNGLENBQUM7SUFDRCxJQUFJTSwyQkFBa0IsQ0FFbkJKLGdCQUFnQixDQUFDLENBQUNLLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxVQUFBQyxhQUFhLEVBQUk7TUFDckVILEtBQUssQ0FBQ0QsVUFBVSxHQUFHO1FBQ2pCSyxXQUFXLEVBQUVDLGFBQWEsQ0FBQ0YsYUFBYSxDQUFDQyxXQUFXO01BQ3RELENBQUM7TUFDRFQsWUFBWSxDQUFDVyxJQUFJLENBQUMsUUFBUSxFQUFFTixLQUFLLENBQUNELFVBQVUsQ0FBQztJQUMvQyxDQUFDLENBQUM7SUFDRk4sU0FBUyxHQUFHTyxLQUFLO0VBQ25CO0VBQ0EsT0FBT1AsU0FBUztBQUNsQjtBQU9PLFNBQVNjLGNBQWNBLENBQUEsRUFBcUI7RUFDakQsSUFBSUgsV0FBVyxHQUFHLElBQUk7RUFDdEIsSUFBTUosS0FBSyxHQUFHTixRQUFRLENBQUMsQ0FBQztFQUN4QixJQUFPRyxnQkFBZ0IsR0FBSUcsS0FBSyxDQUF6QkgsZ0JBQWdCO0VBQ3ZCLElBQUlBLGdCQUFnQixJQUFJLElBQUksRUFBRTtJQUM1QixJQUFJRyxLQUFLLENBQUNELFVBQVUsSUFBSSxJQUFJLEVBQUU7TUFHNUJDLEtBQUssQ0FBQ0QsVUFBVSxHQUFHO1FBQ2pCSyxXQUFXLEVBQUVDLGFBQWEsQ0FBQ1IsZ0JBQWdCLENBQUNVLGNBQWMsQ0FBQyxDQUFDO01BQzlELENBQUM7SUFDSDtJQUNBSCxXQUFXLEdBQUdKLEtBQUssQ0FBQ0QsVUFBVSxDQUFDSyxXQUFXO0VBQzVDO0VBQ0EsT0FBT0EsV0FBVztBQUNwQjtBQUtPLFNBQVNJLGNBQWNBLENBQUNKLFdBQTZCLEVBQVE7RUFDbEUsSUFBTUosS0FBSyxHQUFHTixRQUFRLENBQUMsQ0FBQztFQUN4QixJQUFPRyxnQkFBZ0IsR0FBSUcsS0FBSyxDQUF6QkgsZ0JBQWdCO0VBQ3ZCLElBQUlBLGdCQUFnQixJQUFJLElBQUksRUFBRTtJQUM1QkEsZ0JBQWdCLENBQUNXLGNBQWMsQ0FBQ0osV0FBVyxXQUFYQSxXQUFXLEdBQUksYUFBYSxDQUFDO0lBQzdESixLQUFLLENBQUNELFVBQVUsR0FBRztNQUNqQkssV0FBVyxFQUFFQyxhQUFhLENBQUNSLGdCQUFnQixDQUFDVSxjQUFjLENBQUMsQ0FBQztJQUM5RCxDQUFDO0VBQ0g7QUFDRjtBQUtPLFNBQVNFLGlCQUFpQkEsQ0FDL0JDLFFBQW1ELEVBQ2hDO0VBQ25CLElBQUFDLFNBQUEsR0FBdUJqQixRQUFRLENBQUMsQ0FBQztJQUExQkMsWUFBWSxHQUFBZ0IsU0FBQSxDQUFaaEIsWUFBWTtFQUNuQixPQUFPQSxZQUFZLENBQUNPLFdBQVcsQ0FBQyxRQUFRLEVBQUVRLFFBQVEsQ0FBQztBQUNyRDtBQUtBLFNBQVNMLGFBQWFBLENBQUNELFdBQW9CLEVBQW9CO0VBQzdELElBQUFRLGtCQUFTLEVBQ1BSLFdBQVcsS0FBSyxNQUFNLElBQUlBLFdBQVcsS0FBSyxPQUFPLElBQUlBLFdBQVcsSUFBSSxJQUFJLEVBQ3hFLGtFQUNGLENBQUM7RUFDRCxPQUFPQSxXQUFXO0FBQ3BCIiwiaWdub3JlTGlzdCI6W119