bceb90dbaa45b4c8d9a86d6a7703a24e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _UnifiedAIPipeline = require("../../features/ai/core/UnifiedAIPipeline");
var _supabaseTestClient = require("./utils/supabaseTestClient");
var userId = process.env.TEST_SEED_USER_ID || 'test-user-live-1';
var supabase = (0, _supabaseTestClient.createSupabaseTestClient)();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Telemetry Supabase', function () {
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:telemetry:started] and [QRlive:telemetry:completed] are recorded', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 6
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 900e3,
        mood_score: 6
      };
    });
    yield _UnifiedAIPipeline.unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    var _yield$supabase$from$ = yield supabase.from('ai_telemetry').select('event_type').eq('user_id', userId),
      data = _yield$supabase$from$.data,
      error = _yield$supabase$from$.error;
    expect(error).toBeNull();
    var events = (data || []).map(function (r) {
      return String(r.event_type);
    });
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_started');
    })).toBe(true);
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_completed');
    })).toBe(true);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVW5pZmllZEFJUGlwZWxpbmUiLCJyZXF1aXJlIiwiX3N1cGFiYXNlVGVzdENsaWVudCIsInVzZXJJZCIsInByb2Nlc3MiLCJlbnYiLCJURVNUX1NFRURfVVNFUl9JRCIsInN1cGFiYXNlIiwiY3JlYXRlU3VwYWJhc2VUZXN0Q2xpZW50IiwiY2xlYW51cCIsIl9jbGVhbnVwIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiZnJvbSIsImRlbGV0ZSIsImVxIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJURVNUX01PREUiLCJURVNUX1RUTF9NUyIsIlRFU1RfUElQRUxJTkVfU1RVQiIsIkVYUE9fUFVCTElDX0VOQUJMRV9BSSIsImFmdGVyQWxsIiwiaXQiLCJtb29kcyIsIkFycmF5IiwibGVuZ3RoIiwiXyIsImkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibW9vZF9zY29yZSIsInVuaWZpZWRQaXBlbGluZSIsInR5cGUiLCJjb250ZW50IiwiY29udGV4dCIsInNvdXJjZSIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJCIsInNlbGVjdCIsImRhdGEiLCJlcnJvciIsImV4cGVjdCIsInRvQmVOdWxsIiwiZXZlbnRzIiwibWFwIiwiciIsIlN0cmluZyIsImV2ZW50X3R5cGUiLCJzb21lIiwiZSIsImluY2x1ZGVzIiwidG9CZSJdLCJzb3VyY2VzIjpbIkxpdmVUZWxlbWV0cnlTdXBhYmFzZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGl2ZSBTdXBhYmFzZSBUZXN0cyDigJQgVGVsZW1ldHJ5IChRUmxpdmUpXG4gKiBUYWdzOiBbUVJsaXZlOnRlbGVtZXRyeTpzdGFydGVkXSBbUVJsaXZlOnRlbGVtZXRyeTpjb21wbGV0ZWRdXG4gKi9cbmltcG9ydCB7IHVuaWZpZWRQaXBlbGluZSB9IGZyb20gJ0AvZmVhdHVyZXMvYWkvY29yZS9VbmlmaWVkQUlQaXBlbGluZSc7XG5pbXBvcnQgeyBjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQgfSBmcm9tICcuL3V0aWxzL3N1cGFiYXNlVGVzdENsaWVudCc7XG5cbmNvbnN0IHVzZXJJZCA9IHByb2Nlc3MuZW52LlRFU1RfU0VFRF9VU0VSX0lEIHx8ICd0ZXN0LXVzZXItbGl2ZS0xJztcbmNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU3VwYWJhc2VUZXN0Q2xpZW50KCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gIGF3YWl0IHN1cGFiYXNlLmZyb20oJ2FpX3RlbGVtZXRyeScpLmRlbGV0ZSgpLmVxKCd1c2VyX2lkJywgdXNlcklkKTtcbn1cblxuZGVzY3JpYmUoJ0xpdmUgVGVsZW1ldHJ5IFN1cGFiYXNlJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LlRFU1RfTU9ERSA9ICcxJztcbiAgICBwcm9jZXNzLmVudi5URVNUX1RUTF9NUyA9ICc1MDAwJztcbiAgICBwcm9jZXNzLmVudi5URVNUX1BJUEVMSU5FX1NUVUIgPSAnMCc7XG4gICAgcHJvY2Vzcy5lbnYuRVhQT19QVUJMSUNfRU5BQkxFX0FJID0gJ3RydWUnO1xuICAgIGF3YWl0IGNsZWFudXAoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGNsZWFudXAoKTtcbiAgfSk7XG5cbiAgaXQoJ1tRUmxpdmU6dGVsZW1ldHJ5OnN0YXJ0ZWRdIGFuZCBbUVJsaXZlOnRlbGVtZXRyeTpjb21wbGV0ZWRdIGFyZSByZWNvcmRlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb29kcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDYgfSwgKF8sIGkpID0+ICh7IHRpbWVzdGFtcDogRGF0ZS5ub3coKSAtIGkgKiA5MDBlMywgbW9vZF9zY29yZTogNiB9KSk7XG4gICAgYXdhaXQgdW5pZmllZFBpcGVsaW5lLnByb2Nlc3MoeyB1c2VySWQsIHR5cGU6ICdkYXRhJywgY29udGVudDogeyBtb29kcyB9LCBjb250ZXh0OiB7IHNvdXJjZTogJ21vb2QnIH0gfSk7XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2FpX3RlbGVtZXRyeScpXG4gICAgICAuc2VsZWN0KCdldmVudF90eXBlJylcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlTnVsbCgpO1xuICAgIGNvbnN0IGV2ZW50cyA9IChkYXRhIHx8IFtdKS5tYXAociA9PiBTdHJpbmcoci5ldmVudF90eXBlKSk7XG4gICAgZXhwZWN0KGV2ZW50cy5zb21lKGUgPT4gZS5pbmNsdWRlcygndW5pZmllZF9waXBlbGluZV9zdGFydGVkJykpKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChldmVudHMuc29tZShlID0+IGUuaW5jbHVkZXMoJ3VuaWZpZWRfcGlwZWxpbmVfY29tcGxldGVkJykpKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuXG5cbiJdLCJtYXBwaW5ncyI6Ijs7QUFJQSxJQUFBQSxrQkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsT0FBQTtBQUVBLElBQU1FLE1BQU0sR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGlCQUFpQixJQUFJLGtCQUFrQjtBQUNsRSxJQUFNQyxRQUFRLEdBQUcsSUFBQUMsNENBQXdCLEVBQUMsQ0FBQztBQUFDLFNBRTdCQyxPQUFPQSxDQUFBO0VBQUEsT0FBQUMsUUFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQTtBQUFBLFNBQUFGLFNBQUE7RUFBQUEsUUFBQSxPQUFBRyxrQkFBQSxDQUFBQyxPQUFBLEVBQXRCLGFBQXlCO0lBQ3ZCLE1BQU1QLFFBQVEsQ0FBQ1EsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxFQUFFLENBQUMsU0FBUyxFQUFFZCxNQUFNLENBQUM7RUFDcEUsQ0FBQztFQUFBLE9BQUFPLFFBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUE7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