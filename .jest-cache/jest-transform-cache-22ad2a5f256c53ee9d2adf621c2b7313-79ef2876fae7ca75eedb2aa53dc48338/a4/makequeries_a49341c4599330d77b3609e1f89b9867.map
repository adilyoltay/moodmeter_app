{"version":3,"names":["_errors","require","_formatElement","_logger","_screen","_waitFor","_interopRequireDefault","e","__esModule","default","deprecatedKeys","extractDeprecatedWaitForOptions","options","undefined","waitForOptions","timeout","interval","stackTraceError","forEach","key","option","logger","warn","toString","formatErrorMessage","message","printElementTree","screen","isDetached","json","toJSON","formatJson","appendElementTreeToError","error","_error$stack","oldMessage","stack","replace","makeQueries","queryAllByQuery","getMissingError","getMultipleError","getAllByQuery","instance","_ref","arguments","length","_ref$printElementTree","getAllFn","predicate","results","errorMessage","ErrorWithStack","queryByQuery","_ref2","_ref2$printElementTre","singleQueryFn","getByQuery","_ref3","_ref3$printElementTre","getFn","findAllByQuery","findAllFn","queryOptions","_ref4","_ref4$onTimeout","onTimeout","_objectWithoutProperties2","_excluded","deprecatedWaitForOptions","Object","assign","findByQuery","findFn","_ref5","_ref5$onTimeout","_excluded2","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy"],"sources":["../../src/queries/make-queries.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\n\nimport { ErrorWithStack } from '../helpers/errors';\nimport { formatJson } from '../helpers/format-element';\nimport { logger } from '../helpers/logger';\nimport { screen } from '../screen';\nimport type { WaitForOptions } from '../wait-for';\nimport waitFor from '../wait-for';\n\nexport type GetByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options,\n) => ReactTestInstance;\n\nexport type GetAllByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options,\n) => ReactTestInstance[];\n\nexport type QueryByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options,\n) => ReactTestInstance | null;\n\nexport type QueryAllByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options,\n) => ReactTestInstance[];\n\nexport type FindByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  // Remove `& WaitForOptions` when all queries have been migrated to support 2nd arg query options.\n  options?: Options & WaitForOptions,\n  waitForOptions?: WaitForOptions,\n) => Promise<ReactTestInstance>;\n\nexport type FindAllByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  // Remove `& WaitForOptions` when all queries have been migrated to support 2nd arg query options.\n  options?: Options & WaitForOptions,\n  waitForOptions?: WaitForOptions,\n) => Promise<ReactTestInstance[]>;\n\ntype UnboundQuery<Query> = (instance: ReactTestInstance) => Query;\n\nexport type UnboundQueries<Predicate, Options> = {\n  getBy: UnboundQuery<GetByQuery<Predicate, Options>>;\n  getAllBy: UnboundQuery<GetAllByQuery<Predicate, Options>>;\n  queryBy: UnboundQuery<QueryByQuery<Predicate, Options>>;\n  queryAllBy: UnboundQuery<QueryAllByQuery<Predicate, Options>>;\n  findBy: UnboundQuery<FindByQuery<Predicate, Options>>;\n  findAllBy: UnboundQuery<FindAllByQuery<Predicate, Options>>;\n};\n\nconst deprecatedKeys: (keyof WaitForOptions)[] = ['timeout', 'interval', 'stackTraceError'];\n\n// The WaitForOptions has been moved to the second option param of findBy* methods with the adding of TextMatchOptions\n// To make the migration easier and avoid a breaking change, keep reading this options from the first param but warn\nfunction extractDeprecatedWaitForOptions(options?: WaitForOptions) {\n  if (!options) {\n    return undefined;\n  }\n\n  const waitForOptions: WaitForOptions = {\n    timeout: options.timeout,\n    interval: options.interval,\n    stackTraceError: options.stackTraceError,\n  };\n\n  deprecatedKeys.forEach((key) => {\n    const option = options[key];\n    if (option) {\n      logger.warn(\n        `Use of option \"${key}\" in a findBy* query options (2nd parameter) is deprecated. Please pass this option in the waitForOptions (3rd parameter).\nExample:\n\n  findByText(text, {}, { ${key}: ${option.toString()} })`,\n      );\n    }\n  });\n\n  return waitForOptions;\n}\n\nfunction formatErrorMessage(message: string, printElementTree: boolean) {\n  if (!printElementTree) {\n    return message;\n  }\n\n  if (screen.isDetached) {\n    return `${message}\\n\\nScreen is no longer attached. Check your test for \"findBy*\" or \"waitFor\" calls that have not been awaited.\\n\\nWe recommend enabling \"eslint-plugin-testing-library\" to catch these issues at build time:\\nhttps://callstack.github.io/react-native-testing-library/docs/start/quick-start#eslint-plugin`;\n  }\n\n  const json = screen.toJSON();\n  if (!json) {\n    return message;\n  }\n\n  return `${message}\\n\\n${formatJson(json)}`;\n}\n\nfunction appendElementTreeToError(error: Error) {\n  const oldMessage = error.message;\n  error.message = formatErrorMessage(oldMessage, true);\n\n  // Required to make Jest print the element tree on error\n  error.stack = error.stack?.replace(oldMessage, error.message);\n\n  return error;\n}\n\nexport function makeQueries<Predicate, Options>(\n  queryAllByQuery: UnboundQuery<QueryAllByQuery<Predicate, Options>>,\n  getMissingError: (predicate: Predicate, options?: Options) => string,\n  getMultipleError: (predicate: Predicate, options?: Options) => string,\n): UnboundQueries<Predicate, Options> {\n  function getAllByQuery(instance: ReactTestInstance, { printElementTree = true } = {}) {\n    return function getAllFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length === 0) {\n        const errorMessage = formatErrorMessage(\n          getMissingError(predicate, options),\n          printElementTree,\n        );\n        throw new ErrorWithStack(errorMessage, getAllFn);\n      }\n\n      return results;\n    };\n  }\n\n  function queryByQuery(instance: ReactTestInstance, { printElementTree = true } = {}) {\n    return function singleQueryFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(\n          formatErrorMessage(getMultipleError(predicate, options), printElementTree),\n          singleQueryFn,\n        );\n      }\n\n      if (results.length === 0) {\n        return null;\n      }\n\n      return results[0];\n    };\n  }\n\n  function getByQuery(instance: ReactTestInstance, { printElementTree = true } = {}) {\n    return function getFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(getMultipleError(predicate, options), getFn);\n      }\n\n      if (results.length === 0) {\n        const errorMessage = formatErrorMessage(\n          getMissingError(predicate, options),\n          printElementTree,\n        );\n        throw new ErrorWithStack(errorMessage, getFn);\n      }\n\n      return results[0];\n    };\n  }\n\n  function findAllByQuery(instance: ReactTestInstance) {\n    return function findAllFn(\n      predicate: Predicate,\n      queryOptions?: Options & WaitForOptions,\n      {\n        onTimeout = (error) => appendElementTreeToError(error),\n        ...waitForOptions\n      }: WaitForOptions = {},\n    ) {\n      const stackTraceError = new ErrorWithStack('STACK_TRACE_ERROR', findAllFn);\n      const deprecatedWaitForOptions = extractDeprecatedWaitForOptions(queryOptions);\n\n      return waitFor(\n        () => getAllByQuery(instance, { printElementTree: false })(predicate, queryOptions),\n        {\n          ...deprecatedWaitForOptions,\n          ...waitForOptions,\n          stackTraceError,\n          onTimeout,\n        },\n      );\n    };\n  }\n\n  function findByQuery(instance: ReactTestInstance) {\n    return function findFn(\n      predicate: Predicate,\n      queryOptions?: Options & WaitForOptions,\n      {\n        onTimeout = (error) => appendElementTreeToError(error),\n        ...waitForOptions\n      }: WaitForOptions = {},\n    ) {\n      const stackTraceError = new ErrorWithStack('STACK_TRACE_ERROR', findFn);\n      const deprecatedWaitForOptions = extractDeprecatedWaitForOptions(queryOptions);\n\n      return waitFor(\n        () => getByQuery(instance, { printElementTree: false })(predicate, queryOptions),\n        {\n          ...deprecatedWaitForOptions,\n          ...waitForOptions,\n          stackTraceError,\n          onTimeout,\n        },\n      );\n    };\n  }\n\n  return {\n    getBy: getByQuery,\n    getAllBy: getAllByQuery,\n    queryBy: queryByQuery,\n    queryAllBy: queryAllByQuery,\n    findBy: findByQuery,\n    findAllBy: findAllByQuery,\n  };\n}\n"],"mappings":"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","ignoreList":[]}