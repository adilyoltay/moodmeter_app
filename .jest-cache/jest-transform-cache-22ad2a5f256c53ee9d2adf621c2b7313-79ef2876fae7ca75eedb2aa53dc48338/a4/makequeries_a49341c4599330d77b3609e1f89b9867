14250801a91755d8e9db5aa28ce6220d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["onTimeout"],
  _excluded2 = ["onTimeout"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeQueries = makeQueries;
var _errors = require("../helpers/errors");
var _formatElement = require("../helpers/format-element");
var _logger = require("../helpers/logger");
var _screen = require("../screen");
var _waitFor = _interopRequireDefault(require("../wait-for"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
var deprecatedKeys = ['timeout', 'interval', 'stackTraceError'];
function extractDeprecatedWaitForOptions(options) {
  if (!options) {
    return undefined;
  }
  var waitForOptions = {
    timeout: options.timeout,
    interval: options.interval,
    stackTraceError: options.stackTraceError
  };
  deprecatedKeys.forEach(function (key) {
    var option = options[key];
    if (option) {
      _logger.logger.warn(`Use of option "${key}" in a findBy* query options (2nd parameter) is deprecated. Please pass this option in the waitForOptions (3rd parameter).
Example:

  findByText(text, {}, { ${key}: ${option.toString()} })`);
    }
  });
  return waitForOptions;
}
function formatErrorMessage(message, printElementTree) {
  if (!printElementTree) {
    return message;
  }
  if (_screen.screen.isDetached) {
    return `${message}\n\nScreen is no longer attached. Check your test for "findBy*" or "waitFor" calls that have not been awaited.\n\nWe recommend enabling "eslint-plugin-testing-library" to catch these issues at build time:\nhttps://callstack.github.io/react-native-testing-library/docs/start/quick-start#eslint-plugin`;
  }
  var json = _screen.screen.toJSON();
  if (!json) {
    return message;
  }
  return `${message}\n\n${(0, _formatElement.formatJson)(json)}`;
}
function appendElementTreeToError(error) {
  var _error$stack;
  var oldMessage = error.message;
  error.message = formatErrorMessage(oldMessage, true);
  error.stack = (_error$stack = error.stack) == null ? void 0 : _error$stack.replace(oldMessage, error.message);
  return error;
}
function makeQueries(queryAllByQuery, getMissingError, getMultipleError) {
  function getAllByQuery(instance) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$printElementTree = _ref.printElementTree,
      printElementTree = _ref$printElementTree === void 0 ? true : _ref$printElementTree;
    return function getAllFn(predicate, options) {
      var results = queryAllByQuery(instance)(predicate, options);
      if (results.length === 0) {
        var errorMessage = formatErrorMessage(getMissingError(predicate, options), printElementTree);
        throw new _errors.ErrorWithStack(errorMessage, getAllFn);
      }
      return results;
    };
  }
  function queryByQuery(instance) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$printElementTre = _ref2.printElementTree,
      printElementTree = _ref2$printElementTre === void 0 ? true : _ref2$printElementTre;
    return function singleQueryFn(predicate, options) {
      var results = queryAllByQuery(instance)(predicate, options);
      if (results.length > 1) {
        throw new _errors.ErrorWithStack(formatErrorMessage(getMultipleError(predicate, options), printElementTree), singleQueryFn);
      }
      if (results.length === 0) {
        return null;
      }
      return results[0];
    };
  }
  function getByQuery(instance) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$printElementTre = _ref3.printElementTree,
      printElementTree = _ref3$printElementTre === void 0 ? true : _ref3$printElementTre;
    return function getFn(predicate, options) {
      var results = queryAllByQuery(instance)(predicate, options);
      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(predicate, options), getFn);
      }
      if (results.length === 0) {
        var errorMessage = formatErrorMessage(getMissingError(predicate, options), printElementTree);
        throw new _errors.ErrorWithStack(errorMessage, getFn);
      }
      return results[0];
    };
  }
  function findAllByQuery(instance) {
    return function findAllFn(predicate, queryOptions) {
      var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _ref4$onTimeout = _ref4.onTimeout,
        onTimeout = _ref4$onTimeout === void 0 ? function (error) {
          return appendElementTreeToError(error);
        } : _ref4$onTimeout,
        waitForOptions = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
      var stackTraceError = new _errors.ErrorWithStack('STACK_TRACE_ERROR', findAllFn);
      var deprecatedWaitForOptions = extractDeprecatedWaitForOptions(queryOptions);
      return (0, _waitFor.default)(function () {
        return getAllByQuery(instance, {
          printElementTree: false
        })(predicate, queryOptions);
      }, Object.assign({}, deprecatedWaitForOptions, waitForOptions, {
        stackTraceError: stackTraceError,
        onTimeout: onTimeout
      }));
    };
  }
  function findByQuery(instance) {
    return function findFn(predicate, queryOptions) {
      var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _ref5$onTimeout = _ref5.onTimeout,
        onTimeout = _ref5$onTimeout === void 0 ? function (error) {
          return appendElementTreeToError(error);
        } : _ref5$onTimeout,
        waitForOptions = (0, _objectWithoutProperties2.default)(_ref5, _excluded2);
      var stackTraceError = new _errors.ErrorWithStack('STACK_TRACE_ERROR', findFn);
      var deprecatedWaitForOptions = extractDeprecatedWaitForOptions(queryOptions);
      return (0, _waitFor.default)(function () {
        return getByQuery(instance, {
          printElementTree: false
        })(predicate, queryOptions);
      }, Object.assign({}, deprecatedWaitForOptions, waitForOptions, {
        stackTraceError: stackTraceError,
        onTimeout: onTimeout
      }));
    };
  }
  return {
    getBy: getByQuery,
    getAllBy: getAllByQuery,
    queryBy: queryByQuery,
    queryAllBy: queryAllByQuery,
    findBy: findByQuery,
    findAllBy: findAllByQuery
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,