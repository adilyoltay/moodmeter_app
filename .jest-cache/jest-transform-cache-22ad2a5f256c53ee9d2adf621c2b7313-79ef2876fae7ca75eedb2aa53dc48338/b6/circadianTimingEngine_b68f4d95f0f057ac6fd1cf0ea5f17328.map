{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_featureFlags","_adaptiveSuggestionAnalytics","CircadianTimingEngine","_classCallCheck2","default","config","enabled","learningEnabled","culturalAdaptation","minimumDataPoints","adaptationRate","confidenceThreshold","_createClass2","key","value","_getTimingRecommendation","_asyncToGenerator2","userId","FEATURE_FLAGS","isEnabled","getDefaultRecommendation","profile","getUserCircadianProfile","currentHour","Date","getHours","calculateTimingScore","error","console","getTimingRecommendation","_x","apply","arguments","_getOptimalTimingForNext24Hours","results","hour","recommendation","push","score","timeLabel","formatHour","sort","a","b","getOptimalTimingForNext24Hours","_x2","_learnFromInteraction","wasSuccessful","stressLevel","personalPatterns","responsiveHours","includes","stressPeaks","optimalHours","low","filter","h","medium","high","lastUpdated","saveUserCircadianProfile","log","learnFromInteraction","_x3","_x4","_x5","_x6","factors","circadian","cultural","personal","historical","rationales","isQuietHour","isCulturallyAppropriate","isCulturallyPoor","energyPeaks","isHistoricallyGood","getHistoricalEffectiveness","Math","max","min","dataPoints","length","confidence","alternatives","generateAlternatives","slice","rationale","join","_getUserCircadianProfile","stored","AsyncStorage","getItem","JSON","parse","daysSinceUpdate","now","getTime","createDefaultProfile","_x7","_createDefaultProfile","chronotype","timingData","adaptiveSuggestionAnalytics","getOptimalTimingRecommendations","bestHours","map","morningHours","eveningHours","quietHours","start","end","culturalFactors","prayerTimes","mealTimes","workHours","weekendPattern","_x8","_saveUserCircadianProfile","setItem","stringify","_x9","_profile$quietHours","_profile$culturalFact","isWorkHours","isMealTime","some","mealHour","abs","isPrayerTime","prayerHour","_profile$culturalFact2","isVeryEarly","offset","alternativeHour","reason","toString","padStart","getInstance","instance","circadianTimingEngine","exports","_default"],"sources":["circadianTimingEngine.ts"],"sourcesContent":["/**\n * ‚è∞ Circadian Timing Engine - Smart Timing for Adaptive Suggestions\n * \n * Optimal suggestion timing based on:\n * - Turkish cultural context (prayer times, meal times, work schedules)\n * - Individual circadian preferences learned from user behavior\n * - Real-world timing effectiveness from analytics\n * - Stress level and energy patterns throughout the day\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\nimport { adaptiveSuggestionAnalytics } from '../analytics/adaptiveSuggestionAnalytics';\n\n// Types\ninterface CircadianProfile {\n  userId: string;\n  chronotype: 'morning' | 'evening' | 'intermediate'; // Learned from behavior\n  optimalHours: {\n    high: number[]; // Best hours (>70% effectiveness)\n    medium: number[]; // Good hours (40-70% effectiveness) \n    low: number[]; // Poor hours (<40% effectiveness)\n  };\n  quietHours: {\n    start: number; // 22\n    end: number;   // 8\n  };\n  culturalFactors: {\n    prayerTimes?: number[]; // Approximate prayer hours\n    mealTimes: number[];    // Traditional meal times\n    workHours: {\n      start: number;\n      end: number;\n    };\n    weekendPattern: boolean; // Different pattern on weekends\n  };\n  personalPatterns: {\n    stressPeaks: number[]; // Hours when user typically stressed\n    energyPeaks: number[];  // Hours when user has most energy\n    responsiveHours: number[]; // Hours with highest CTR\n  };\n  lastUpdated: Date;\n}\n\ninterface TimingRecommendation {\n  score: number; // 0-100, higher = better timing\n  rationale: string;\n  confidence: number; // 0-1\n  factors: {\n    circadian: number;    // Circadian rhythm factor (-50 to +50)\n    cultural: number;     // Cultural appropriateness (-30 to +30)\n    personal: number;     // Personal pattern factor (-20 to +20)\n    historical: number;   // Historical effectiveness (-20 to +20)\n  };\n  alternatives?: {\n    hour: number;\n    score: number;\n    reason: string;\n  }[];\n}\n\ninterface CircadianConfig {\n  enabled: boolean;\n  learningEnabled: boolean; // Learn from user behavior\n  culturalAdaptation: boolean;\n  minimumDataPoints: number; // Before making recommendations\n  adaptationRate: number; // How quickly to adapt to new patterns (0-1)\n  confidenceThreshold: number; // Minimum confidence to override defaults\n}\n\nclass CircadianTimingEngine {\n  private static instance: CircadianTimingEngine;\n  private config: CircadianConfig = {\n    enabled: true,\n    learningEnabled: true,\n    culturalAdaptation: true,\n    minimumDataPoints: 10,\n    adaptationRate: 0.3,\n    confidenceThreshold: 0.6\n  };\n\n  private constructor() {}\n\n  public static getInstance(): CircadianTimingEngine {\n    if (!CircadianTimingEngine.instance) {\n      CircadianTimingEngine.instance = new CircadianTimingEngine();\n    }\n    return CircadianTimingEngine.instance;\n  }\n\n  /**\n   * ‚è∞ Get timing recommendation for current moment\n   */\n  async getTimingRecommendation(userId: string): Promise<TimingRecommendation> {\n    if (!this.config.enabled || !FEATURE_FLAGS.isEnabled('AI_ADAPTIVE_INTERVENTIONS')) {\n      return this.getDefaultRecommendation();\n    }\n\n    try {\n      const profile = await this.getUserCircadianProfile(userId);\n      const currentHour = new Date().getHours();\n      \n      return this.calculateTimingScore(currentHour, profile);\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get timing recommendation:', error);\n      return this.getDefaultRecommendation();\n    }\n  }\n\n  /**\n   * üìä Get best timing for next 24 hours\n   */\n  async getOptimalTimingForNext24Hours(userId: string): Promise<Array<{\n    hour: number;\n    score: number;\n    timeLabel: string;\n    recommendation: 'optimal' | 'good' | 'avoid';\n  }>> {\n    const profile = await this.getUserCircadianProfile(userId);\n    const results = [];\n    \n    for (let hour = 0; hour < 24; hour++) {\n      const recommendation = this.calculateTimingScore(hour, profile);\n      results.push({\n        hour,\n        score: recommendation.score,\n        timeLabel: this.formatHour(hour),\n        recommendation: recommendation.score >= 70 ? 'optimal' : \n                       recommendation.score >= 40 ? 'good' : 'avoid'\n      });\n    }\n    \n    return results.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * üß† Learn from user interaction patterns\n   */\n  async learnFromInteraction(\n    userId: string, \n    hour: number, \n    wasSuccessful: boolean,\n    stressLevel: 'low' | 'moderate' | 'high'\n  ): Promise<void> {\n    if (!this.config.learningEnabled) return;\n\n    try {\n      const profile = await this.getUserCircadianProfile(userId);\n      \n      // Update responsiveness data\n      if (wasSuccessful) {\n        if (!profile.personalPatterns.responsiveHours.includes(hour)) {\n          profile.personalPatterns.responsiveHours.push(hour);\n        }\n      }\n      \n      // Update stress patterns\n      if (stressLevel === 'high') {\n        if (!profile.personalPatterns.stressPeaks.includes(hour)) {\n          profile.personalPatterns.stressPeaks.push(hour);\n        }\n      }\n      \n      // Adaptive learning - gradually adjust optimal hours based on success\n      if (wasSuccessful && profile.optimalHours.low.includes(hour)) {\n        // Move from low to medium if consistently successful\n        profile.optimalHours.low = profile.optimalHours.low.filter(h => h !== hour);\n        profile.optimalHours.medium.push(hour);\n      } else if (!wasSuccessful && profile.optimalHours.high.includes(hour)) {\n        // Downgrade from high if failing\n        profile.optimalHours.high = profile.optimalHours.high.filter(h => h !== hour);\n        profile.optimalHours.medium.push(hour);\n      }\n      \n      profile.lastUpdated = new Date();\n      await this.saveUserCircadianProfile(profile);\n      \n      console.log(`üß† Updated circadian profile for user at ${hour}:00 (success: ${wasSuccessful})`);\n      \n    } catch (error) {\n      console.error('‚ùå Failed to learn from interaction:', error);\n    }\n  }\n\n  /**\n   * üìä Calculate timing score for specific hour\n   */\n  private calculateTimingScore(hour: number, profile: CircadianProfile): TimingRecommendation {\n    let score = 50; // Base score\n    const factors = { circadian: 0, cultural: 0, personal: 0, historical: 0 };\n    const rationales: string[] = [];\n    \n    // 1. Circadian rhythm factors (-50 to +50)\n    if (profile.optimalHours.high.includes(hour)) {\n      factors.circadian += 40;\n      rationales.push('Optimal circadian window');\n    } else if (profile.optimalHours.medium.includes(hour)) {\n      factors.circadian += 15;\n      rationales.push('Good circadian timing');\n    } else if (profile.optimalHours.low.includes(hour)) {\n      factors.circadian -= 30;\n      rationales.push('Suboptimal circadian timing');\n    }\n\n    // Quiet hours penalty\n    if (this.isQuietHour(hour, profile)) {\n      factors.circadian -= 50;\n      rationales.push('Quiet hours - not recommended');\n    }\n    \n    // 2. Cultural factors (-30 to +30)\n    if (this.config.culturalAdaptation) {\n      if (this.isCulturallyAppropriate(hour, profile)) {\n        factors.cultural += 20;\n        rationales.push('Culturally appropriate time');\n      } else if (this.isCulturallyPoor(hour, profile)) {\n        factors.cultural -= 25;\n        rationales.push('Culturally inappropriate time');\n      }\n    }\n    \n    // 3. Personal patterns (-20 to +20) \n    if (profile.personalPatterns.responsiveHours.includes(hour)) {\n      factors.personal += 15;\n      rationales.push('Historically responsive time');\n    }\n    \n    if (profile.personalPatterns.stressPeaks.includes(hour)) {\n      factors.personal -= 10;\n      rationales.push('Typical stress peak time');\n    }\n    \n    if (profile.personalPatterns.energyPeaks.includes(hour)) {\n      factors.personal += 10;\n      rationales.push('High energy time');\n    }\n\n    // 4. Historical effectiveness from analytics (-20 to +20)\n    // This would ideally use real analytics data\n    const isHistoricallyGood = this.getHistoricalEffectiveness(hour);\n    if (isHistoricallyGood > 0.7) {\n      factors.historical += 15;\n      rationales.push('Strong historical performance');\n    } else if (isHistoricallyGood < 0.3) {\n      factors.historical -= 15;\n      rationales.push('Poor historical performance');\n    }\n    \n    // Calculate final score\n    score += factors.circadian + factors.cultural + factors.personal + factors.historical;\n    score = Math.max(0, Math.min(100, score)); // Clamp 0-100\n\n    // Calculate confidence based on data availability\n    const dataPoints = profile.personalPatterns.responsiveHours.length;\n    const confidence = Math.min(0.9, Math.max(0.3, dataPoints / this.config.minimumDataPoints));\n\n    // Generate alternatives\n    const alternatives = this.generateAlternatives(hour, profile).slice(0, 3);\n\n    return {\n      score,\n      rationale: rationales.join(', ') || 'Standard timing assessment',\n      confidence,\n      factors,\n      alternatives\n    };\n  }\n\n  /**\n   * üë§ Get or create user circadian profile\n   */\n  private async getUserCircadianProfile(userId: string): Promise<CircadianProfile> {\n    try {\n      const key = `circadian_profile_${userId}`;\n      const stored = await AsyncStorage.getItem(key);\n      \n      if (stored) {\n        const profile = JSON.parse(stored);\n        // Check if profile is recent (less than 30 days old)\n        const daysSinceUpdate = (Date.now() - new Date(profile.lastUpdated).getTime()) / (1000 * 60 * 60 * 24);\n        \n        if (daysSinceUpdate < 30) {\n          return profile;\n        }\n      }\n      \n      // Create new profile or refresh old one\n      return await this.createDefaultProfile(userId);\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get circadian profile:', error);\n      return await this.createDefaultProfile(userId);\n    }\n  }\n\n  /**\n   * üÜï Create default circadian profile\n   */\n  private async createDefaultProfile(userId: string): Promise<CircadianProfile> {\n    // Try to infer chronotype from analytics if available\n    let chronotype: 'morning' | 'evening' | 'intermediate' = 'intermediate';\n    let optimalHours = { high: [9, 10, 14, 15], medium: [8, 11, 13, 16, 19], low: [6, 7, 12, 17, 18, 20, 21] };\n\n    try {\n      // Get timing recommendations from analytics\n      const timingData = await adaptiveSuggestionAnalytics.getOptimalTimingRecommendations();\n      \n      if (timingData.bestHours.length > 0) {\n        const bestHours = timingData.bestHours.map(h => h.hour);\n        const morningHours = bestHours.filter(h => h >= 6 && h <= 12).length;\n        const eveningHours = bestHours.filter(h => h >= 17 && h <= 23).length;\n        \n        if (morningHours > eveningHours) {\n          chronotype = 'morning';\n          optimalHours.high = [7, 8, 9, 10];\n          optimalHours.medium = [6, 11, 14, 15];\n        } else if (eveningHours > morningHours) {\n          chronotype = 'evening';\n          optimalHours.high = [15, 16, 18, 19];\n          optimalHours.medium = [14, 17, 20];\n        }\n      }\n    } catch (error) {\n      console.log('üìä No analytics data available, using defaults');\n    }\n\n    const profile: CircadianProfile = {\n      userId,\n      chronotype,\n      optimalHours,\n      quietHours: { start: 22, end: 8 },\n      culturalFactors: {\n        prayerTimes: [5, 12, 15, 18, 19], // Approximate prayer times\n        mealTimes: [8, 13, 19], // Breakfast, lunch, dinner\n        workHours: { start: 9, end: 18 },\n        weekendPattern: true\n      },\n      personalPatterns: {\n        stressPeaks: [],\n        energyPeaks: [],\n        responsiveHours: []\n      },\n      lastUpdated: new Date()\n    };\n\n    await this.saveUserCircadianProfile(profile);\n    return profile;\n  }\n\n  /**\n   * üíæ Save circadian profile\n   */\n  private async saveUserCircadianProfile(profile: CircadianProfile): Promise<void> {\n    try {\n      const key = `circadian_profile_${profile.userId}`;\n      await AsyncStorage.setItem(key, JSON.stringify(profile));\n    } catch (error) {\n      console.error('‚ùå Failed to save circadian profile:', error);\n    }\n  }\n\n  /**\n   * üåô Check if hour is in quiet period\n   */\n  private isQuietHour(hour: number, profile: CircadianProfile): boolean {\n    const { start, end } = profile.quietHours;\n    if (start > end) {\n      // Crosses midnight (e.g., 22:00 - 08:00)\n      return hour >= start || hour < end;\n    } else {\n      // Same day (e.g., 01:00 - 06:00)\n      return hour >= start && hour < end;\n    }\n  }\n\n  /**\n   * üïå Check cultural appropriateness\n   */\n  private isCulturallyAppropriate(hour: number, profile: CircadianProfile): boolean {\n    const { prayerTimes, mealTimes, workHours } = profile.culturalFactors;\n    \n    // Good times: Between meals, not during prayer times, within work hours\n    const isWorkHours = hour >= workHours.start && hour <= workHours.end;\n    const isMealTime = mealTimes?.some(mealHour => Math.abs(hour - mealHour) < 1);\n    const isPrayerTime = prayerTimes?.some(prayerHour => Math.abs(hour - prayerHour) < 0.5);\n    \n    return isWorkHours && !isMealTime && !isPrayerTime;\n  }\n\n  /**\n   * ‚ùå Check culturally poor timing\n   */\n  private isCulturallyPoor(hour: number, profile: CircadianProfile): boolean {\n    const { prayerTimes, mealTimes } = profile.culturalFactors;\n    \n    // Poor times: During prayer or meal times, very early morning\n    const isMealTime = mealTimes?.some(mealHour => Math.abs(hour - mealHour) < 1);\n    const isPrayerTime = prayerTimes?.some(prayerHour => Math.abs(hour - prayerHour) < 0.5);\n    const isVeryEarly = hour >= 5 && hour < 7;\n    \n    return isMealTime || isPrayerTime || isVeryEarly;\n  }\n\n  /**\n   * üìä Get historical effectiveness (simplified)\n   */\n  private getHistoricalEffectiveness(hour: number): number {\n    // This would ideally query real analytics data\n    // For now, using general patterns\n    if (hour >= 9 && hour <= 11) return 0.8;  // Morning high\n    if (hour >= 14 && hour <= 16) return 0.75; // Afternoon high\n    if (hour >= 19 && hour <= 21) return 0.6;  // Evening moderate\n    if (hour >= 22 || hour <= 6) return 0.1;   // Night/early morning low\n    return 0.5; // Default moderate\n  }\n\n  /**\n   * üîÑ Generate alternative timing suggestions\n   */\n  private generateAlternatives(currentHour: number, profile: CircadianProfile): Array<{\n    hour: number;\n    score: number;\n    reason: string;\n  }> {\n    const alternatives = [];\n    \n    // Check +1, +2, +3 hours\n    for (let offset of [1, 2, 3]) {\n      const alternativeHour = (currentHour + offset) % 24;\n      if (!this.isQuietHour(alternativeHour, profile)) {\n        const recommendation = this.calculateTimingScore(alternativeHour, profile);\n        alternatives.push({\n          hour: alternativeHour,\n          score: recommendation.score,\n          reason: `${offset} saat sonra - ${recommendation.rationale}`\n        });\n      }\n    }\n    \n    return alternatives.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * üïê Format hour for display\n   */\n  private formatHour(hour: number): string {\n    return `${hour.toString().padStart(2, '0')}:00`;\n  }\n\n  /**\n   * ‚ö° Get default recommendation when service unavailable\n   */\n  private getDefaultRecommendation(): TimingRecommendation {\n    const currentHour = new Date().getHours();\n    \n    // Simple default scoring\n    let score = 50;\n    let rationale = 'Default timing assessment';\n    \n    if (currentHour >= 22 || currentHour <= 6) {\n      score = 10;\n      rationale = 'Quiet hours - not recommended';\n    } else if ((currentHour >= 9 && currentHour <= 11) || (currentHour >= 14 && currentHour <= 16)) {\n      score = 70;\n      rationale = 'Generally good timing';\n    }\n\n    return {\n      score,\n      rationale,\n      confidence: 0.3, // Low confidence for defaults\n      factors: { circadian: 0, cultural: 0, personal: 0, historical: 0 }\n    };\n  }\n}\n\nexport const circadianTimingEngine = CircadianTimingEngine.getInstance();\nexport type { TimingRecommendation, CircadianProfile };\nexport default circadianTimingEngine;\n"],"mappings":"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","ignoreList":[]}