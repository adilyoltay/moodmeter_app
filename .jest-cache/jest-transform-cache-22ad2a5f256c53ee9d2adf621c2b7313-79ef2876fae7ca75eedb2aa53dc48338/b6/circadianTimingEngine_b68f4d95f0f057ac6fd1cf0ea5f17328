e16c1858f02ed697d24e157e11113ceb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.circadianTimingEngine = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _featureFlags = require("../../../constants/featureFlags");
var _adaptiveSuggestionAnalytics = require("../analytics/adaptiveSuggestionAnalytics");
var CircadianTimingEngine = function () {
  function CircadianTimingEngine() {
    (0, _classCallCheck2.default)(this, CircadianTimingEngine);
    this.config = {
      enabled: true,
      learningEnabled: true,
      culturalAdaptation: true,
      minimumDataPoints: 10,
      adaptationRate: 0.3,
      confidenceThreshold: 0.6
    };
  }
  return (0, _createClass2.default)(CircadianTimingEngine, [{
    key: "getTimingRecommendation",
    value: (function () {
      var _getTimingRecommendation = (0, _asyncToGenerator2.default)(function* (userId) {
        if (!this.config.enabled || !_featureFlags.FEATURE_FLAGS.isEnabled('AI_ADAPTIVE_INTERVENTIONS')) {
          return this.getDefaultRecommendation();
        }
        try {
          var profile = yield this.getUserCircadianProfile(userId);
          var currentHour = new Date().getHours();
          return this.calculateTimingScore(currentHour, profile);
        } catch (error) {
          console.error('‚ùå Failed to get timing recommendation:', error);
          return this.getDefaultRecommendation();
        }
      });
      function getTimingRecommendation(_x) {
        return _getTimingRecommendation.apply(this, arguments);
      }
      return getTimingRecommendation;
    }())
  }, {
    key: "getOptimalTimingForNext24Hours",
    value: (function () {
      var _getOptimalTimingForNext24Hours = (0, _asyncToGenerator2.default)(function* (userId) {
        var profile = yield this.getUserCircadianProfile(userId);
        var results = [];
        for (var hour = 0; hour < 24; hour++) {
          var recommendation = this.calculateTimingScore(hour, profile);
          results.push({
            hour: hour,
            score: recommendation.score,
            timeLabel: this.formatHour(hour),
            recommendation: recommendation.score >= 70 ? 'optimal' : recommendation.score >= 40 ? 'good' : 'avoid'
          });
        }
        return results.sort(function (a, b) {
          return b.score - a.score;
        });
      });
      function getOptimalTimingForNext24Hours(_x2) {
        return _getOptimalTimingForNext24Hours.apply(this, arguments);
      }
      return getOptimalTimingForNext24Hours;
    }())
  }, {
    key: "learnFromInteraction",
    value: (function () {
      var _learnFromInteraction = (0, _asyncToGenerator2.default)(function* (userId, hour, wasSuccessful, stressLevel) {
        if (!this.config.learningEnabled) return;
        try {
          var profile = yield this.getUserCircadianProfile(userId);
          if (wasSuccessful) {
            if (!profile.personalPatterns.responsiveHours.includes(hour)) {
              profile.personalPatterns.responsiveHours.push(hour);
            }
          }
          if (stressLevel === 'high') {
            if (!profile.personalPatterns.stressPeaks.includes(hour)) {
              profile.personalPatterns.stressPeaks.push(hour);
            }
          }
          if (wasSuccessful && profile.optimalHours.low.includes(hour)) {
            profile.optimalHours.low = profile.optimalHours.low.filter(function (h) {
              return h !== hour;
            });
            profile.optimalHours.medium.push(hour);
          } else if (!wasSuccessful && profile.optimalHours.high.includes(hour)) {
            profile.optimalHours.high = profile.optimalHours.high.filter(function (h) {
              return h !== hour;
            });
            profile.optimalHours.medium.push(hour);
          }
          profile.lastUpdated = new Date();
          yield this.saveUserCircadianProfile(profile);
          console.log(`üß† Updated circadian profile for user at ${hour}:00 (success: ${wasSuccessful})`);
        } catch (error) {
          console.error('‚ùå Failed to learn from interaction:', error);
        }
      });
      function learnFromInteraction(_x3, _x4, _x5, _x6) {
        return _learnFromInteraction.apply(this, arguments);
      }
      return learnFromInteraction;
    }())
  }, {
    key: "calculateTimingScore",
    value: function calculateTimingScore(hour, profile) {
      var score = 50;
      var factors = {
        circadian: 0,
        cultural: 0,
        personal: 0,
        historical: 0
      };
      var rationales = [];
      if (profile.optimalHours.high.includes(hour)) {
        factors.circadian += 40;
        rationales.push('Optimal circadian window');
      } else if (profile.optimalHours.medium.includes(hour)) {
        factors.circadian += 15;
        rationales.push('Good circadian timing');
      } else if (profile.optimalHours.low.includes(hour)) {
        factors.circadian -= 30;
        rationales.push('Suboptimal circadian timing');
      }
      if (this.isQuietHour(hour, profile)) {
        factors.circadian -= 50;
        rationales.push('Quiet hours - not recommended');
      }
      if (this.config.culturalAdaptation) {
        if (this.isCulturallyAppropriate(hour, profile)) {
          factors.cultural += 20;
          rationales.push('Culturally appropriate time');
        } else if (this.isCulturallyPoor(hour, profile)) {
          factors.cultural -= 25;
          rationales.push('Culturally inappropriate time');
        }
      }
      if (profile.personalPatterns.responsiveHours.includes(hour)) {
        factors.personal += 15;
        rationales.push('Historically responsive time');
      }
      if (profile.personalPatterns.stressPeaks.includes(hour)) {
        factors.personal -= 10;
        rationales.push('Typical stress peak time');
      }
      if (profile.personalPatterns.energyPeaks.includes(hour)) {
        factors.personal += 10;
        rationales.push('High energy time');
      }
      var isHistoricallyGood = this.getHistoricalEffectiveness(hour);
      if (isHistoricallyGood > 0.7) {
        factors.historical += 15;
        rationales.push('Strong historical performance');
      } else if (isHistoricallyGood < 0.3) {
        factors.historical -= 15;
        rationales.push('Poor historical performance');
      }
      score += factors.circadian + factors.cultural + factors.personal + factors.historical;
      score = Math.max(0, Math.min(100, score));
      var dataPoints = profile.personalPatterns.responsiveHours.length;
      var confidence = Math.min(0.9, Math.max(0.3, dataPoints / this.config.minimumDataPoints));
      var alternatives = this.generateAlternatives(hour, profile).slice(0, 3);
      return {
        score: score,
        rationale: rationales.join(', ') || 'Standard timing assessment',
        confidence: confidence,
        factors: factors,
        alternatives: alternatives
      };
    }
  }, {
    key: "getUserCircadianProfile",
    value: (function () {
      var _getUserCircadianProfile = (0, _asyncToGenerator2.default)(function* (userId) {
        try {
          var key = `circadian_profile_${userId}`;
          var stored = yield _asyncStorage.default.getItem(key);
          if (stored) {
            var profile = JSON.parse(stored);
            var daysSinceUpdate = (Date.now() - new Date(profile.lastUpdated).getTime()) / (1000 * 60 * 60 * 24);
            if (daysSinceUpdate < 30) {
              return profile;
            }
          }
          return yield this.createDefaultProfile(userId);
        } catch (error) {
          console.error('‚ùå Failed to get circadian profile:', error);
          return yield this.createDefaultProfile(userId);
        }
      });
      function getUserCircadianProfile(_x7) {
        return _getUserCircadianProfile.apply(this, arguments);
      }
      return getUserCircadianProfile;
    }())
  }, {
    key: "createDefaultProfile",
    value: (function () {
      var _createDefaultProfile = (0, _asyncToGenerator2.default)(function* (userId) {
        var chronotype = 'intermediate';
        var optimalHours = {
          high: [9, 10, 14, 15],
          medium: [8, 11, 13, 16, 19],
          low: [6, 7, 12, 17, 18, 20, 21]
        };
        try {
          var timingData = yield _adaptiveSuggestionAnalytics.adaptiveSuggestionAnalytics.getOptimalTimingRecommendations();
          if (timingData.bestHours.length > 0) {
            var bestHours = timingData.bestHours.map(function (h) {
              return h.hour;
            });
            var morningHours = bestHours.filter(function (h) {
              return h >= 6 && h <= 12;
            }).length;
            var eveningHours = bestHours.filter(function (h) {
              return h >= 17 && h <= 23;
            }).length;
            if (morningHours > eveningHours) {
              chronotype = 'morning';
              optimalHours.high = [7, 8, 9, 10];
              optimalHours.medium = [6, 11, 14, 15];
            } else if (eveningHours > morningHours) {
              chronotype = 'evening';
              optimalHours.high = [15, 16, 18, 19];
              optimalHours.medium = [14, 17, 20];
            }
          }
        } catch (error) {
          console.log('üìä No analytics data available, using defaults');
        }
        var profile = {
          userId: userId,
          chronotype: chronotype,
          optimalHours: optimalHours,
          quietHours: {
            start: 22,
            end: 8
          },
          culturalFactors: {
            prayerTimes: [5, 12, 15, 18, 19],
            mealTimes: [8, 13, 19],
            workHours: {
              start: 9,
              end: 18
            },
            weekendPattern: true
          },
          personalPatterns: {
            stressPeaks: [],
            energyPeaks: [],
            responsiveHours: []
          },
          lastUpdated: new Date()
        };
        yield this.saveUserCircadianProfile(profile);
        return profile;
      });
      function createDefaultProfile(_x8) {
        return _createDefaultProfile.apply(this, arguments);
      }
      return createDefaultProfile;
    }())
  }, {
    key: "saveUserCircadianProfile",
    value: (function () {
      var _saveUserCircadianProfile = (0, _asyncToGenerator2.default)(function* (profile) {
        try {
          var key = `circadian_profile_${profile.userId}`;
          yield _asyncStorage.default.setItem(key, JSON.stringify(profile));
        } catch (error) {
          console.error('‚ùå Failed to save circadian profile:', error);
        }
      });
      function saveUserCircadianProfile(_x9) {
        return _saveUserCircadianProfile.apply(this, arguments);
      }
      return saveUserCircadianProfile;
    }())
  }, {
    key: "isQuietHour",
    value: function isQuietHour(hour, profile) {
      var _profile$quietHours = profile.quietHours,
        start = _profile$quietHours.start,
        end = _profile$quietHours.end;
      if (start > end) {
        return hour >= start || hour < end;
      } else {
        return hour >= start && hour < end;
      }
    }
  }, {
    key: "isCulturallyAppropriate",
    value: function isCulturallyAppropriate(hour, profile) {
      var _profile$culturalFact = profile.culturalFactors,
        prayerTimes = _profile$culturalFact.prayerTimes,
        mealTimes = _profile$culturalFact.mealTimes,
        workHours = _profile$culturalFact.workHours;
      var isWorkHours = hour >= workHours.start && hour <= workHours.end;
      var isMealTime = mealTimes == null ? void 0 : mealTimes.some(function (mealHour) {
        return Math.abs(hour - mealHour) < 1;
      });
      var isPrayerTime = prayerTimes == null ? void 0 : prayerTimes.some(function (prayerHour) {
        return Math.abs(hour - prayerHour) < 0.5;
      });
      return isWorkHours && !isMealTime && !isPrayerTime;
    }
  }, {
    key: "isCulturallyPoor",
    value: function isCulturallyPoor(hour, profile) {
      var _profile$culturalFact2 = profile.culturalFactors,
        prayerTimes = _profile$culturalFact2.prayerTimes,
        mealTimes = _profile$culturalFact2.mealTimes;
      var isMealTime = mealTimes == null ? void 0 : mealTimes.some(function (mealHour) {
        return Math.abs(hour - mealHour) < 1;
      });
      var isPrayerTime = prayerTimes == null ? void 0 : prayerTimes.some(function (prayerHour) {
        return Math.abs(hour - prayerHour) < 0.5;
      });
      var isVeryEarly = hour >= 5 && hour < 7;
      return isMealTime || isPrayerTime || isVeryEarly;
    }
  }, {
    key: "getHistoricalEffectiveness",
    value: function getHistoricalEffectiveness(hour) {
      if (hour >= 9 && hour <= 11) return 0.8;
      if (hour >= 14 && hour <= 16) return 0.75;
      if (hour >= 19 && hour <= 21) return 0.6;
      if (hour >= 22 || hour <= 6) return 0.1;
      return 0.5;
    }
  }, {
    key: "generateAlternatives",
    value: function generateAlternatives(currentHour, profile) {
      var alternatives = [];
      for (var offset of [1, 2, 3]) {
        var alternativeHour = (currentHour + offset) % 24;
        if (!this.isQuietHour(alternativeHour, profile)) {
          var recommendation = this.calculateTimingScore(alternativeHour, profile);
          alternatives.push({
            hour: alternativeHour,
            score: recommendation.score,
            reason: `${offset} saat sonra - ${recommendation.rationale}`
          });
        }
      }
      return alternatives.sort(function (a, b) {
        return b.score - a.score;
      });
    }
  }, {
    key: "formatHour",
    value: function formatHour(hour) {
      return `${hour.toString().padStart(2, '0')}:00`;
    }
  }, {
    key: "getDefaultRecommendation",
    value: function getDefaultRecommendation() {
      var currentHour = new Date().getHours();
      var score = 50;
      var rationale = 'Default timing assessment';
      if (currentHour >= 22 || currentHour <= 6) {
        score = 10;
        rationale = 'Quiet hours - not recommended';
      } else if (currentHour >= 9 && currentHour <= 11 || currentHour >= 14 && currentHour <= 16) {
        score = 70;
        rationale = 'Generally good timing';
      }
      return {
        score: score,
        rationale: rationale,
        confidence: 0.3,
        factors: {
          circadian: 0,
          cultural: 0,
          personal: 0,
          historical: 0
        }
      };
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!CircadianTimingEngine.instance) {
        CircadianTimingEngine.instance = new CircadianTimingEngine();
      }
      return CircadianTimingEngine.instance;
    }
  }]);
}();
var circadianTimingEngine = exports.circadianTimingEngine = CircadianTimingEngine.getInstance();
var _default = exports.default = circadianTimingEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,