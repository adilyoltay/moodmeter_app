444b1852031c30249db21be452370cfd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _NativeActionSheetManager = _interopRequireDefault(require("./NativeActionSheetManager"));
var _excluded = ["tintColor", "cancelButtonTintColor", "disabledButtonTintColor", "destructiveButtonIndex"];
var processColor = require("../StyleSheet/processColor").default;
var invariant = require('invariant');
var ActionSheetIOS = {
  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof callback === 'function', 'Must provide a valid callback');
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    var tintColor = options.tintColor,
      cancelButtonTintColor = options.cancelButtonTintColor,
      disabledButtonTintColor = options.disabledButtonTintColor,
      destructiveButtonIndex = options.destructiveButtonIndex,
      remainingOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
    var destructiveButtonIndices = null;
    if (Array.isArray(destructiveButtonIndex)) {
      destructiveButtonIndices = destructiveButtonIndex;
    } else if (typeof destructiveButtonIndex === 'number') {
      destructiveButtonIndices = [destructiveButtonIndex];
    }
    var processedTintColor = processColor(tintColor);
    var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
    var processedDisabledButtonTintColor = processColor(disabledButtonTintColor);
    invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
    invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
    invariant(processedDisabledButtonTintColor == null || typeof processedDisabledButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions disabledButtonTintColor');
    _NativeActionSheetManager.default.showActionSheetWithOptions(Object.assign({}, remainingOptions, {
      tintColor: processedTintColor,
      cancelButtonTintColor: processedCancelButtonTintColor,
      disabledButtonTintColor: processedDisabledButtonTintColor,
      destructiveButtonIndices: destructiveButtonIndices
    }), callback);
  },
  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    _NativeActionSheetManager.default.showShareActionSheetWithOptions(Object.assign({}, options, {
      tintColor: processColor(options.tintColor)
    }), failureCallback, successCallback);
  },
  dismissActionSheet: function dismissActionSheet() {
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
      _NativeActionSheetManager.default.dismissActionSheet();
    }
  }
};
var _default = exports.default = ActionSheetIOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlQWN0aW9uU2hlZXRNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZXhjbHVkZWQiLCJwcm9jZXNzQ29sb3IiLCJkZWZhdWx0IiwiaW52YXJpYW50IiwiQWN0aW9uU2hlZXRJT1MiLCJzaG93QWN0aW9uU2hlZXRXaXRoT3B0aW9ucyIsIm9wdGlvbnMiLCJjYWxsYmFjayIsIlJDVEFjdGlvblNoZWV0TWFuYWdlciIsInRpbnRDb2xvciIsImNhbmNlbEJ1dHRvblRpbnRDb2xvciIsImRpc2FibGVkQnV0dG9uVGludENvbG9yIiwiZGVzdHJ1Y3RpdmVCdXR0b25JbmRleCIsInJlbWFpbmluZ09wdGlvbnMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiZGVzdHJ1Y3RpdmVCdXR0b25JbmRpY2VzIiwiQXJyYXkiLCJpc0FycmF5IiwicHJvY2Vzc2VkVGludENvbG9yIiwicHJvY2Vzc2VkQ2FuY2VsQnV0dG9uVGludENvbG9yIiwicHJvY2Vzc2VkRGlzYWJsZWRCdXR0b25UaW50Q29sb3IiLCJPYmplY3QiLCJhc3NpZ24iLCJzaG93U2hhcmVBY3Rpb25TaGVldFdpdGhPcHRpb25zIiwiZmFpbHVyZUNhbGxiYWNrIiwic3VjY2Vzc0NhbGxiYWNrIiwiZGlzbWlzc0FjdGlvblNoZWV0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQWN0aW9uU2hlZXRJT1MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1Byb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuXG5pbXBvcnQgUkNUQWN0aW9uU2hlZXRNYW5hZ2VyIGZyb20gJy4vTmF0aXZlQWN0aW9uU2hlZXRNYW5hZ2VyJztcblxuY29uc3QgcHJvY2Vzc0NvbG9yID0gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKS5kZWZhdWx0O1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmV4cG9ydCB0eXBlIEFjdGlvblNoZWV0SU9TT3B0aW9ucyA9ICRSZWFkT25seTx7XG4gIHRpdGxlPzogP3N0cmluZyxcbiAgbWVzc2FnZT86ID9zdHJpbmcsXG4gIG9wdGlvbnM6IEFycmF5PHN0cmluZz4sXG4gIGRlc3RydWN0aXZlQnV0dG9uSW5kZXg/OiA/bnVtYmVyIHwgP0FycmF5PG51bWJlcj4sXG4gIGNhbmNlbEJ1dHRvbkluZGV4PzogP251bWJlcixcbiAgYW5jaG9yPzogP251bWJlcixcbiAgdGludENvbG9yPzogQ29sb3JWYWx1ZSB8IFByb2Nlc3NlZENvbG9yVmFsdWUsXG4gIGNhbmNlbEJ1dHRvblRpbnRDb2xvcj86IENvbG9yVmFsdWUgfCBQcm9jZXNzZWRDb2xvclZhbHVlLFxuICBkaXNhYmxlZEJ1dHRvblRpbnRDb2xvcj86IENvbG9yVmFsdWUgfCBQcm9jZXNzZWRDb2xvclZhbHVlLFxuICB1c2VySW50ZXJmYWNlU3R5bGU/OiBzdHJpbmcsXG4gIGRpc2FibGVkQnV0dG9uSW5kaWNlcz86IEFycmF5PG51bWJlcj4sXG59PjtcblxuZXhwb3J0IHR5cGUgU2hhcmVBY3Rpb25TaGVldElPU09wdGlvbnMgPSAkUmVhZE9ubHk8e1xuICBtZXNzYWdlPzogP3N0cmluZyxcbiAgdXJsPzogP3N0cmluZyxcbiAgc3ViamVjdD86ID9zdHJpbmcsXG4gIGFuY2hvcj86ID9udW1iZXIsXG4gIHRpbnRDb2xvcj86ID9udW1iZXIsXG4gIGNhbmNlbEJ1dHRvblRpbnRDb2xvcj86ID9udW1iZXIsXG4gIGRpc2FibGVkQnV0dG9uVGludENvbG9yPzogP251bWJlcixcbiAgZXhjbHVkZWRBY3Rpdml0eVR5cGVzPzogP0FycmF5PHN0cmluZz4sXG4gIHVzZXJJbnRlcmZhY2VTdHlsZT86ID9zdHJpbmcsXG59PjtcblxuZXhwb3J0IHR5cGUgU2hhcmVBY3Rpb25TaGVldEVycm9yID0gJFJlYWRPbmx5PHtcbiAgZG9tYWluOiBzdHJpbmcsXG4gIGNvZGU6IHN0cmluZyxcbiAgdXNlckluZm8/OiA/T2JqZWN0LFxuICBtZXNzYWdlOiBzdHJpbmcsXG59PjtcblxuLyoqXG4gKiBEaXNwbGF5IGFjdGlvbiBzaGVldHMgYW5kIHNoYXJlIHNoZWV0cyBvbiBpT1MuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvYWN0aW9uc2hlZXRpb3NcbiAqL1xuY29uc3QgQWN0aW9uU2hlZXRJT1MgPSB7XG4gIC8qKlxuICAgKiBEaXNwbGF5IGFuIGlPUyBhY3Rpb24gc2hlZXQuXG4gICAqXG4gICAqIFRoZSBgb3B0aW9uc2Agb2JqZWN0IG11c3QgY29udGFpbiBvbmUgb3IgbW9yZSBvZjpcbiAgICpcbiAgICogLSBgb3B0aW9uc2AgKGFycmF5IG9mIHN0cmluZ3MpIC0gYSBsaXN0IG9mIGJ1dHRvbiB0aXRsZXMgKHJlcXVpcmVkKVxuICAgKiAtIGBjYW5jZWxCdXR0b25JbmRleGAgKGludCkgLSBpbmRleCBvZiBjYW5jZWwgYnV0dG9uIGluIGBvcHRpb25zYFxuICAgKiAtIGBkZXN0cnVjdGl2ZUJ1dHRvbkluZGV4YCAoaW50IG9yIGFycmF5IG9mIGludHMpIC0gaW5kZXggb3IgaW5kaWNlcyBvZiBkZXN0cnVjdGl2ZSBidXR0b25zIGluIGBvcHRpb25zYFxuICAgKiAtIGB0aXRsZWAgKHN0cmluZykgLSBhIHRpdGxlIHRvIHNob3cgYWJvdmUgdGhlIGFjdGlvbiBzaGVldFxuICAgKiAtIGBtZXNzYWdlYCAoc3RyaW5nKSAtIGEgbWVzc2FnZSB0byBzaG93IGJlbG93IHRoZSB0aXRsZVxuICAgKiAtIGBkaXNhYmxlZEJ1dHRvbkluZGljZXNgIChhcnJheSBvZiBudW1iZXJzKSAtIGEgbGlzdCBvZiBidXR0b24gaW5kaWNlcyB3aGljaCBzaG91bGQgYmUgZGlzYWJsZWRcbiAgICpcbiAgICogVGhlICdjYWxsYmFjaycgZnVuY3Rpb24gdGFrZXMgb25lIHBhcmFtZXRlciwgdGhlIHplcm8tYmFzZWQgaW5kZXhcbiAgICogb2YgdGhlIHNlbGVjdGVkIGl0ZW0uXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FjdGlvbnNoZWV0aW9zI3Nob3dhY3Rpb25zaGVldHdpdGhvcHRpb25zXG4gICAqL1xuICBzaG93QWN0aW9uU2hlZXRXaXRoT3B0aW9ucyhcbiAgICBvcHRpb25zOiBBY3Rpb25TaGVldElPU09wdGlvbnMsXG4gICAgY2FsbGJhY2s6IChidXR0b25JbmRleDogbnVtYmVyKSA9PiB2b2lkLFxuICApIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgb3B0aW9ucyAhPT0gbnVsbCxcbiAgICAgICdPcHRpb25zIG11c3QgYmUgYSB2YWxpZCBvYmplY3QnLFxuICAgICk7XG4gICAgaW52YXJpYW50KHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJywgJ011c3QgcHJvdmlkZSBhIHZhbGlkIGNhbGxiYWNrJyk7XG4gICAgaW52YXJpYW50KFJDVEFjdGlvblNoZWV0TWFuYWdlciwgXCJBY3Rpb25TaGVldE1hbmFnZXIgZG9lc24ndCBleGlzdFwiKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIHRpbnRDb2xvcixcbiAgICAgIGNhbmNlbEJ1dHRvblRpbnRDb2xvcixcbiAgICAgIGRpc2FibGVkQnV0dG9uVGludENvbG9yLFxuICAgICAgZGVzdHJ1Y3RpdmVCdXR0b25JbmRleCxcbiAgICAgIC4uLnJlbWFpbmluZ09wdGlvbnNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBsZXQgZGVzdHJ1Y3RpdmVCdXR0b25JbmRpY2VzID0gbnVsbDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRlc3RydWN0aXZlQnV0dG9uSW5kZXgpKSB7XG4gICAgICBkZXN0cnVjdGl2ZUJ1dHRvbkluZGljZXMgPSBkZXN0cnVjdGl2ZUJ1dHRvbkluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlc3RydWN0aXZlQnV0dG9uSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICBkZXN0cnVjdGl2ZUJ1dHRvbkluZGljZXMgPSBbZGVzdHJ1Y3RpdmVCdXR0b25JbmRleF07XG4gICAgfVxuXG4gICAgY29uc3QgcHJvY2Vzc2VkVGludENvbG9yID0gcHJvY2Vzc0NvbG9yKHRpbnRDb2xvcik7XG4gICAgY29uc3QgcHJvY2Vzc2VkQ2FuY2VsQnV0dG9uVGludENvbG9yID0gcHJvY2Vzc0NvbG9yKGNhbmNlbEJ1dHRvblRpbnRDb2xvcik7XG4gICAgY29uc3QgcHJvY2Vzc2VkRGlzYWJsZWRCdXR0b25UaW50Q29sb3IgPSBwcm9jZXNzQ29sb3IoXG4gICAgICBkaXNhYmxlZEJ1dHRvblRpbnRDb2xvcixcbiAgICApO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgcHJvY2Vzc2VkVGludENvbG9yID09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NlZFRpbnRDb2xvciA9PT0gJ251bWJlcicsXG4gICAgICAnVW5leHBlY3RlZCBjb2xvciBnaXZlbiBmb3IgQWN0aW9uU2hlZXRJT1Muc2hvd0FjdGlvblNoZWV0V2l0aE9wdGlvbnMgdGludENvbG9yJyxcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgIHByb2Nlc3NlZENhbmNlbEJ1dHRvblRpbnRDb2xvciA9PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBwcm9jZXNzZWRDYW5jZWxCdXR0b25UaW50Q29sb3IgPT09ICdudW1iZXInLFxuICAgICAgJ1VuZXhwZWN0ZWQgY29sb3IgZ2l2ZW4gZm9yIEFjdGlvblNoZWV0SU9TLnNob3dBY3Rpb25TaGVldFdpdGhPcHRpb25zIGNhbmNlbEJ1dHRvblRpbnRDb2xvcicsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBwcm9jZXNzZWREaXNhYmxlZEJ1dHRvblRpbnRDb2xvciA9PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBwcm9jZXNzZWREaXNhYmxlZEJ1dHRvblRpbnRDb2xvciA9PT0gJ251bWJlcicsXG4gICAgICAnVW5leHBlY3RlZCBjb2xvciBnaXZlbiBmb3IgQWN0aW9uU2hlZXRJT1Muc2hvd0FjdGlvblNoZWV0V2l0aE9wdGlvbnMgZGlzYWJsZWRCdXR0b25UaW50Q29sb3InLFxuICAgICk7XG4gICAgUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLnNob3dBY3Rpb25TaGVldFdpdGhPcHRpb25zKFxuICAgICAge1xuICAgICAgICAuLi5yZW1haW5pbmdPcHRpb25zLFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuICAgICAgICB0aW50Q29sb3I6IHByb2Nlc3NlZFRpbnRDb2xvcixcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgICAgY2FuY2VsQnV0dG9uVGludENvbG9yOiBwcm9jZXNzZWRDYW5jZWxCdXR0b25UaW50Q29sb3IsXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgICAgIGRpc2FibGVkQnV0dG9uVGludENvbG9yOiBwcm9jZXNzZWREaXNhYmxlZEJ1dHRvblRpbnRDb2xvcixcbiAgICAgICAgZGVzdHJ1Y3RpdmVCdXR0b25JbmRpY2VzLFxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpc3BsYXkgdGhlIGlPUyBzaGFyZSBzaGVldC4gVGhlIGBvcHRpb25zYCBvYmplY3Qgc2hvdWxkIGNvbnRhaW5cbiAgICogb25lIG9yIGJvdGggb2YgYG1lc3NhZ2VgIGFuZCBgdXJsYCBhbmQgY2FuIGFkZGl0aW9uYWxseSBoYXZlXG4gICAqIGEgYHN1YmplY3RgIG9yIGBleGNsdWRlZEFjdGl2aXR5VHlwZXNgOlxuICAgKlxuICAgKiAtIGB1cmxgIChzdHJpbmcpIC0gYSBVUkwgdG8gc2hhcmVcbiAgICogLSBgbWVzc2FnZWAgKHN0cmluZykgLSBhIG1lc3NhZ2UgdG8gc2hhcmVcbiAgICogLSBgc3ViamVjdGAgKHN0cmluZykgLSBhIHN1YmplY3QgZm9yIHRoZSBtZXNzYWdlXG4gICAqIC0gYGV4Y2x1ZGVkQWN0aXZpdHlUeXBlc2AgKGFycmF5KSAtIHRoZSBhY3Rpdml0aWVzIHRvIGV4Y2x1ZGUgZnJvbVxuICAgKiAgIHRoZSBBY3Rpb25TaGVldFxuICAgKiAtIGB0aW50Q29sb3JgIChjb2xvcikgLSB0aW50IGNvbG9yIG9mIHRoZSBidXR0b25zXG4gICAqXG4gICAqIFRoZSAnZmFpbHVyZUNhbGxiYWNrJyBmdW5jdGlvbiB0YWtlcyBvbmUgcGFyYW1ldGVyLCBhbiBlcnJvciBvYmplY3QuXG4gICAqIFRoZSBvbmx5IHByb3BlcnR5IGRlZmluZWQgb24gdGhpcyBvYmplY3QgaXMgYW4gb3B0aW9uYWwgYHN0YWNrYCBwcm9wZXJ0eVxuICAgKiBvZiB0eXBlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBUaGUgJ3N1Y2Nlc3NDYWxsYmFjaycgZnVuY3Rpb24gdGFrZXMgdHdvIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqIC0gYSBib29sZWFuIHZhbHVlIHNpZ25pZnlpbmcgc3VjY2VzcyBvciBmYWlsdXJlXG4gICAqIC0gYSBzdHJpbmcgdGhhdCwgaW4gdGhlIGNhc2Ugb2Ygc3VjY2VzcywgaW5kaWNhdGVzIHRoZSBtZXRob2Qgb2Ygc2hhcmluZ1xuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hY3Rpb25zaGVldGlvcyNzaG93c2hhcmVhY3Rpb25zaGVldHdpdGhvcHRpb25zXG4gICAqL1xuICBzaG93U2hhcmVBY3Rpb25TaGVldFdpdGhPcHRpb25zKFxuICAgIG9wdGlvbnM6IFNoYXJlQWN0aW9uU2hlZXRJT1NPcHRpb25zLFxuICAgIGZhaWx1cmVDYWxsYmFjazogRnVuY3Rpb24gfCAoKGVycm9yOiBTaGFyZUFjdGlvblNoZWV0RXJyb3IpID0+IHZvaWQpLFxuICAgIHN1Y2Nlc3NDYWxsYmFjazogRnVuY3Rpb24gfCAoKHN1Y2Nlc3M6IGJvb2xlYW4sIG1ldGhvZDogP3N0cmluZykgPT4gdm9pZCksXG4gICkge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsLFxuICAgICAgJ09wdGlvbnMgbXVzdCBiZSBhIHZhbGlkIG9iamVjdCcsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgZmFpbHVyZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ011c3QgcHJvdmlkZSBhIHZhbGlkIGZhaWx1cmVDYWxsYmFjaycsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygc3VjY2Vzc0NhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ011c3QgcHJvdmlkZSBhIHZhbGlkIHN1Y2Nlc3NDYWxsYmFjaycsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLCBcIkFjdGlvblNoZWV0TWFuYWdlciBkb2Vzbid0IGV4aXN0XCIpO1xuICAgIFJDVEFjdGlvblNoZWV0TWFuYWdlci5zaG93U2hhcmVBY3Rpb25TaGVldFdpdGhPcHRpb25zKFxuICAgICAgey4uLm9wdGlvbnMsIHRpbnRDb2xvcjogcHJvY2Vzc0NvbG9yKG9wdGlvbnMudGludENvbG9yKSBhcyAkRmxvd0ZpeE1lfSxcbiAgICAgIGZhaWx1cmVDYWxsYmFjayxcbiAgICAgIHN1Y2Nlc3NDYWxsYmFjayxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNtaXNzZXMgdGhlIG1vc3QgdXBwZXIgaU9TIGFjdGlvbiBzaGVldCBwcmVzZW50ZWQsIGlmIG5vIGFjdGlvbiBzaGVldCBpc1xuICAgKiBwcmVzZW50IGEgd2FybmluZyBpcyBkaXNwbGF5ZWQuXG4gICAqL1xuICBkaXNtaXNzQWN0aW9uU2hlZXQ6ICgpID0+IHtcbiAgICBpbnZhcmlhbnQoUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLCBcIkFjdGlvblNoZWV0TWFuYWdlciBkb2Vzbid0IGV4aXN0XCIpO1xuICAgIGlmICh0eXBlb2YgUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLmRpc21pc3NBY3Rpb25TaGVldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLmRpc21pc3NBY3Rpb25TaGVldCgpO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvblNoZWV0SU9TO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFhQSxJQUFBQSx5QkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQStELElBQUFDLFNBQUE7QUFFL0QsSUFBTUMsWUFBWSxHQUFHRixPQUFPLDZCQUE2QixDQUFDLENBQUNHLE9BQU87QUFDbEUsSUFBTUMsU0FBUyxHQUFHSixPQUFPLENBQUMsV0FBVyxDQUFDO0FBd0N0QyxJQUFNSyxjQUFjLEdBQUc7RUFrQnJCQywwQkFBMEIsV0FBMUJBLDBCQUEwQkEsQ0FDeEJDLE9BQThCLEVBQzlCQyxRQUF1QyxFQUN2QztJQUNBSixTQUFTLENBQ1AsT0FBT0csT0FBTyxLQUFLLFFBQVEsSUFBSUEsT0FBTyxLQUFLLElBQUksRUFDL0MsZ0NBQ0YsQ0FBQztJQUNESCxTQUFTLENBQUMsT0FBT0ksUUFBUSxLQUFLLFVBQVUsRUFBRSwrQkFBK0IsQ0FBQztJQUMxRUosU0FBUyxDQUFDSyxpQ0FBcUIsRUFBRSxrQ0FBa0MsQ0FBQztJQUVwRSxJQUNFQyxTQUFTLEdBS1BILE9BQU8sQ0FMVEcsU0FBUztNQUNUQyxxQkFBcUIsR0FJbkJKLE9BQU8sQ0FKVEkscUJBQXFCO01BQ3JCQyx1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