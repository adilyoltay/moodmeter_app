{"version":3,"names":["_NativeActionSheetManager","_interopRequireDefault","require","_excluded","processColor","default","invariant","ActionSheetIOS","showActionSheetWithOptions","options","callback","RCTActionSheetManager","tintColor","cancelButtonTintColor","disabledButtonTintColor","destructiveButtonIndex","remainingOptions","_objectWithoutProperties2","destructiveButtonIndices","Array","isArray","processedTintColor","processedCancelButtonTintColor","processedDisabledButtonTintColor","Object","assign","showShareActionSheetWithOptions","failureCallback","successCallback","dismissActionSheet","_default","exports"],"sources":["ActionSheetIOS.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {ProcessedColorValue} from '../StyleSheet/processColor';\nimport type {ColorValue} from '../StyleSheet/StyleSheet';\n\nimport RCTActionSheetManager from './NativeActionSheetManager';\n\nconst processColor = require('../StyleSheet/processColor').default;\nconst invariant = require('invariant');\n\nexport type ActionSheetIOSOptions = $ReadOnly<{\n  title?: ?string,\n  message?: ?string,\n  options: Array<string>,\n  destructiveButtonIndex?: ?number | ?Array<number>,\n  cancelButtonIndex?: ?number,\n  anchor?: ?number,\n  tintColor?: ColorValue | ProcessedColorValue,\n  cancelButtonTintColor?: ColorValue | ProcessedColorValue,\n  disabledButtonTintColor?: ColorValue | ProcessedColorValue,\n  userInterfaceStyle?: string,\n  disabledButtonIndices?: Array<number>,\n}>;\n\nexport type ShareActionSheetIOSOptions = $ReadOnly<{\n  message?: ?string,\n  url?: ?string,\n  subject?: ?string,\n  anchor?: ?number,\n  tintColor?: ?number,\n  cancelButtonTintColor?: ?number,\n  disabledButtonTintColor?: ?number,\n  excludedActivityTypes?: ?Array<string>,\n  userInterfaceStyle?: ?string,\n}>;\n\nexport type ShareActionSheetError = $ReadOnly<{\n  domain: string,\n  code: string,\n  userInfo?: ?Object,\n  message: string,\n}>;\n\n/**\n * Display action sheets and share sheets on iOS.\n *\n * See https://reactnative.dev/docs/actionsheetios\n */\nconst ActionSheetIOS = {\n  /**\n   * Display an iOS action sheet.\n   *\n   * The `options` object must contain one or more of:\n   *\n   * - `options` (array of strings) - a list of button titles (required)\n   * - `cancelButtonIndex` (int) - index of cancel button in `options`\n   * - `destructiveButtonIndex` (int or array of ints) - index or indices of destructive buttons in `options`\n   * - `title` (string) - a title to show above the action sheet\n   * - `message` (string) - a message to show below the title\n   * - `disabledButtonIndices` (array of numbers) - a list of button indices which should be disabled\n   *\n   * The 'callback' function takes one parameter, the zero-based index\n   * of the selected item.\n   *\n   * See https://reactnative.dev/docs/actionsheetios#showactionsheetwithoptions\n   */\n  showActionSheetWithOptions(\n    options: ActionSheetIOSOptions,\n    callback: (buttonIndex: number) => void,\n  ) {\n    invariant(\n      typeof options === 'object' && options !== null,\n      'Options must be a valid object',\n    );\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(RCTActionSheetManager, \"ActionSheetManager doesn't exist\");\n\n    const {\n      tintColor,\n      cancelButtonTintColor,\n      disabledButtonTintColor,\n      destructiveButtonIndex,\n      ...remainingOptions\n    } = options;\n    let destructiveButtonIndices = null;\n\n    if (Array.isArray(destructiveButtonIndex)) {\n      destructiveButtonIndices = destructiveButtonIndex;\n    } else if (typeof destructiveButtonIndex === 'number') {\n      destructiveButtonIndices = [destructiveButtonIndex];\n    }\n\n    const processedTintColor = processColor(tintColor);\n    const processedCancelButtonTintColor = processColor(cancelButtonTintColor);\n    const processedDisabledButtonTintColor = processColor(\n      disabledButtonTintColor,\n    );\n\n    invariant(\n      processedTintColor == null || typeof processedTintColor === 'number',\n      'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor',\n    );\n    invariant(\n      processedCancelButtonTintColor == null ||\n        typeof processedCancelButtonTintColor === 'number',\n      'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor',\n    );\n    invariant(\n      processedDisabledButtonTintColor == null ||\n        typeof processedDisabledButtonTintColor === 'number',\n      'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions disabledButtonTintColor',\n    );\n    RCTActionSheetManager.showActionSheetWithOptions(\n      {\n        ...remainingOptions,\n        // $FlowFixMe[incompatible-call]\n        tintColor: processedTintColor,\n        // $FlowFixMe[incompatible-call]\n        cancelButtonTintColor: processedCancelButtonTintColor,\n        // $FlowFixMe[incompatible-call]\n        disabledButtonTintColor: processedDisabledButtonTintColor,\n        destructiveButtonIndices,\n      },\n      callback,\n    );\n  },\n\n  /**\n   * Display the iOS share sheet. The `options` object should contain\n   * one or both of `message` and `url` and can additionally have\n   * a `subject` or `excludedActivityTypes`:\n   *\n   * - `url` (string) - a URL to share\n   * - `message` (string) - a message to share\n   * - `subject` (string) - a subject for the message\n   * - `excludedActivityTypes` (array) - the activities to exclude from\n   *   the ActionSheet\n   * - `tintColor` (color) - tint color of the buttons\n   *\n   * The 'failureCallback' function takes one parameter, an error object.\n   * The only property defined on this object is an optional `stack` property\n   * of type `string`.\n   *\n   * The 'successCallback' function takes two parameters:\n   *\n   * - a boolean value signifying success or failure\n   * - a string that, in the case of success, indicates the method of sharing\n   *\n   * See https://reactnative.dev/docs/actionsheetios#showshareactionsheetwithoptions\n   */\n  showShareActionSheetWithOptions(\n    options: ShareActionSheetIOSOptions,\n    failureCallback: Function | ((error: ShareActionSheetError) => void),\n    successCallback: Function | ((success: boolean, method: ?string) => void),\n  ) {\n    invariant(\n      typeof options === 'object' && options !== null,\n      'Options must be a valid object',\n    );\n    invariant(\n      typeof failureCallback === 'function',\n      'Must provide a valid failureCallback',\n    );\n    invariant(\n      typeof successCallback === 'function',\n      'Must provide a valid successCallback',\n    );\n    invariant(RCTActionSheetManager, \"ActionSheetManager doesn't exist\");\n    RCTActionSheetManager.showShareActionSheetWithOptions(\n      {...options, tintColor: processColor(options.tintColor) as $FlowFixMe},\n      failureCallback,\n      successCallback,\n    );\n  },\n\n  /**\n   * Dismisses the most upper iOS action sheet presented, if no action sheet is\n   * present a warning is displayed.\n   */\n  dismissActionSheet: () => {\n    invariant(RCTActionSheetManager, \"ActionSheetManager doesn't exist\");\n    if (typeof RCTActionSheetManager.dismissActionSheet === 'function') {\n      RCTActionSheetManager.dismissActionSheet();\n    }\n  },\n};\n\nexport default ActionSheetIOS;\n"],"mappings":"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","ignoreList":[]}