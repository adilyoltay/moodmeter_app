ba11e83d2ecd5c99345d2411627c567b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));
var _ViewConfigIgnore = require("../NativeComponent/ViewConfigIgnore");
var _codegenNativeCommands = _interopRequireDefault(require("../Utilities/codegenNativeCommands"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
  supportedCommands: ['setIsVisible_EXPERIMENTAL']
});
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
  uiViewClassName: 'RCTImageView',
  bubblingEventTypes: {},
  directEventTypes: {
    topLoadStart: {
      registrationName: 'onLoadStart'
    },
    topProgress: {
      registrationName: 'onProgress'
    },
    topError: {
      registrationName: 'onError'
    },
    topLoad: {
      registrationName: 'onLoad'
    },
    topLoadEnd: {
      registrationName: 'onLoadEnd'
    }
  },
  validAttributes: {
    blurRadius: true,
    defaultSource: true,
    internal_analyticTag: true,
    resizeMethod: true,
    resizeMode: true,
    resizeMultiplier: true,
    tintColor: {
      process: require("../StyleSheet/processColor").default
    },
    borderBottomLeftRadius: true,
    borderTopLeftRadius: true,
    src: true,
    source: true,
    borderRadius: true,
    headers: true,
    shouldNotifyLoadEvents: true,
    overlayColor: {
      process: require("../StyleSheet/processColor").default
    },
    borderColor: {
      process: require("../StyleSheet/processColor").default
    },
    accessible: true,
    progressiveRenderingEnabled: true,
    fadeDuration: true,
    borderBottomRightRadius: true,
    borderTopRightRadius: true,
    loadingIndicatorSrc: true
  }
} : {
  uiViewClassName: 'RCTImageView',
  bubblingEventTypes: {},
  directEventTypes: {
    topLoadStart: {
      registrationName: 'onLoadStart'
    },
    topProgress: {
      registrationName: 'onProgress'
    },
    topError: {
      registrationName: 'onError'
    },
    topPartialLoad: {
      registrationName: 'onPartialLoad'
    },
    topLoad: {
      registrationName: 'onLoad'
    },
    topLoadEnd: {
      registrationName: 'onLoadEnd'
    }
  },
  validAttributes: Object.assign({
    blurRadius: true,
    capInsets: {
      diff: require("../Utilities/differ/insetsDiffer").default
    },
    defaultSource: {
      process: require("./resolveAssetSource").default
    },
    internal_analyticTag: true,
    resizeMode: true,
    source: true,
    tintColor: {
      process: require("../StyleSheet/processColor").default
    }
  }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
    onLoadStart: true,
    onLoad: true,
    onLoadEnd: true,
    onProgress: true,
    onError: true,
    onPartialLoad: true
  }))
};
var ImageViewNativeComponent = NativeComponentRegistry.get('RCTImageView', function () {
  return __INTERNAL_VIEW_CONFIG;
});
var _default = exports.default = ImageViewNativeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,