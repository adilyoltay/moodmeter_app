5300e96005ab0136fed2ee1479e4c944
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    getAllKeys: jest.fn(),
    multiGet: jest.fn(),
    multiSet: jest.fn(),
    multiRemove: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    useRouter: jest.fn(function () {
      return {
        push: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    Stack: {
      Screen: 'Stack.Screen'
    }
  };
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Today Page Quality Ribbon - Simplified Tests', function () {
  describe('[QR:today:fresh] Fresh Source Tests', function () {
    it('[QR:today:fresh] should create Fresh badge props correctly', function () {
      var meta = {
        source: 'unified',
        quality: 'high',
        sampleSize: 16,
        freshnessMs: 1000,
        processedAt: Date.now()
      };
      var props = {
        source: meta.source,
        quality: meta.quality,
        sampleSize: meta.sampleSize,
        freshnessMs: meta.freshnessMs
      };
      expect(props.source).toBe('unified');
      expect(props.quality).toBe('high');
      expect(props.sampleSize).toBe(16);
      expect(props.freshnessMs).toBeLessThan(5000);
    });
    it('[QR:today:fresh] should handle cache invalidation scenario', function () {
      var cacheInvalidated = false;
      var invalidateCache = function invalidateCache() {
        cacheInvalidated = true;
      };
      invalidateCache();
      expect(cacheInvalidated).toBe(true);
    });
  });
  describe('[QR:today:cache] Cache Behavior Tests', function () {
    it('[QR:today:cache] should transition from Fresh to Cache after TTL', function () {
      var TEST_TTL_MS = 5000;
      var meta = {
        source: 'unified',
        freshnessMs: 1000,
        processedAt: Date.now()
      };
      expect(meta.source).toBe('unified');
      expect(meta.freshnessMs).toBeLessThan(TEST_TTL_MS);
      var afterTTL = {
        source: 'cache',
        freshnessMs: TEST_TTL_MS + 1000,
        processedAt: Date.now() - TEST_TTL_MS - 1000
      };
      expect(afterTTL.source).toBe('cache');
      expect(afterTTL.freshnessMs).toBeGreaterThan(TEST_TTL_MS);
    });
    it('[QR:today:cache] should show appropriate age for cached results', function () {
      var twoHoursAgo = Date.now() - 2 * 60 * 60 * 1000;
      var meta = {
        source: 'cache',
        freshnessMs: Date.now() - twoHoursAgo,
        processedAt: twoHoursAgo
      };
      var ageInHours = Math.floor(meta.freshnessMs / (60 * 60 * 1000));
      expect(meta.source).toBe('cache');
      expect(ageInHours).toBe(2);
    });
  });
  describe('[QR:today:hidden] Hiding Conditions Tests', function () {
    it('[QR:today:hidden] should hide when no metadata provided', function () {
      var meta = null;
      var shouldRender = meta !== null && meta !== undefined;
      expect(shouldRender).toBe(false);
    });
    it('[QR:today:hidden] should hide when pipeline fails', function () {
      var pipelineError = null;
      try {
        throw new Error('Pipeline processing failed');
      } catch (error) {
        pipelineError = error;
      }
      var shouldRender = pipelineError === null;
      expect(shouldRender).toBe(false);
      expect(pipelineError).toBeTruthy();
    });
  });
  describe('[QR:today:quality] Quality Level Tests', function () {
    var qualityScenarios = [{
      quality: 'high',
      expectedBadge: 'High',
      sampleSize: 16
    }, {
      quality: 'medium',
      expectedBadge: 'Med',
      sampleSize: 10
    }, {
      quality: 'low',
      expectedBadge: 'Low',
      sampleSize: 4
    }];
    qualityScenarios.forEach(function (_ref) {
      var quality = _ref.quality,
        expectedBadge = _ref.expectedBadge,
        sampleSize = _ref.sampleSize;
      it(`[QR:today:quality] should handle ${quality} quality with n=${sampleSize}`, function () {
        var meta = {
          source: 'unified',
          quality: quality,
          sampleSize: sampleSize,
          freshnessMs: 1000
        };
        expect(meta.quality).toBe(quality);
        expect(meta.sampleSize).toBe(sampleSize);
        var badgeMap = {
          high: 'High',
          medium: 'Med',
          low: 'Low'
        };
        expect(badgeMap[quality]).toBe(expectedBadge);
      });
    });
  });
  describe('[QR:today:heuristic] Heuristic Fallback Tests', function () {
    it('[QR:today:heuristic] should show Fast badge for heuristic source', function () {
      var meta = {
        source: 'heuristic',
        quality: 'low',
        sampleSize: 4,
        freshnessMs: 100
      };
      expect(meta.source).toBe('heuristic');
      expect(meta.freshnessMs).toBeLessThan(1000);
      var sourceMap = {
        heuristic: 'Fast',
        unified: 'Fresh',
        cache: 'Cache',
        llm: 'LLM'
      };
      expect(sourceMap[meta.source]).toBe('Fast');
    });
  });
  describe('[QR:today:testmode] Test Mode Integration', function () {
    it('[QR:today:testmode] should respect TEST_TTL_MS environment variable', function () {
      var TEST_MODE = process.env.TEST_MODE === '1';
      var TEST_TTL_MS = parseInt(process.env.TEST_TTL_MS || '5000');
      expect(TEST_MODE).toBe(true);
      expect(TEST_TTL_MS).toBe(5000);
      var cacheExpiryTime = TEST_TTL_MS;
      expect(cacheExpiryTime).toBeLessThan(10000);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,