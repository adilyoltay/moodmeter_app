31d77ec556f829aa821b9ebec934f9ca
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAll = findAll;
var _config = require("../config");
var _accessibility = require("./accessibility");
var _componentTree = require("./component-tree");
function findAll(root, predicate, options) {
  var _ref, _options$includeHidde, _ref2;
  var results = findAllInternal(root, predicate, options);
  var includeHiddenElements = (_ref = (_options$includeHidde = options == null ? void 0 : options.includeHiddenElements) != null ? _options$includeHidde : options == null ? void 0 : options.hidden) != null ? _ref : (_ref2 = (0, _config.getConfig)()) == null ? void 0 : _ref2.defaultIncludeHiddenElements;
  if (includeHiddenElements) {
    return results;
  }
  var cache = new WeakMap();
  return results.filter(function (element) {
    return !(0, _accessibility.isHiddenFromAccessibility)(element, {
      cache: cache
    });
  });
}
function findAllInternal(root, predicate, options) {
  var results = [];
  var matchingDescendants = [];
  root.children.forEach(function (child) {
    if (typeof child === 'string') {
      return;
    }
    matchingDescendants.push.apply(matchingDescendants, (0, _toConsumableArray2.default)(findAllInternal(child, predicate, options)));
  });
  if ((!(options != null && options.matchDeepestOnly) || matchingDescendants.length === 0) && (0, _componentTree.isHostElement)(root) && predicate(root)) {
    results.push(root);
  }
  results.push.apply(results, matchingDescendants);
  return results;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwicmVxdWlyZSIsIl9hY2Nlc3NpYmlsaXR5IiwiX2NvbXBvbmVudFRyZWUiLCJmaW5kQWxsIiwicm9vdCIsInByZWRpY2F0ZSIsIm9wdGlvbnMiLCJfcmVmIiwiX29wdGlvbnMkaW5jbHVkZUhpZGRlIiwiX3JlZjIiLCJyZXN1bHRzIiwiZmluZEFsbEludGVybmFsIiwiaW5jbHVkZUhpZGRlbkVsZW1lbnRzIiwiaGlkZGVuIiwiZ2V0Q29uZmlnIiwiZGVmYXVsdEluY2x1ZGVIaWRkZW5FbGVtZW50cyIsImNhY2hlIiwiV2Vha01hcCIsImZpbHRlciIsImVsZW1lbnQiLCJpc0hpZGRlbkZyb21BY2Nlc3NpYmlsaXR5IiwibWF0Y2hpbmdEZXNjZW5kYW50cyIsImNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwicHVzaCIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImRlZmF1bHQiLCJtYXRjaERlZXBlc3RPbmx5IiwibGVuZ3RoIiwiaXNIb3N0RWxlbWVudCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2ZpbmQtYWxsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuaW1wb3J0IHsgZ2V0Q29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IGlzSGlkZGVuRnJvbUFjY2Vzc2liaWxpdHkgfSBmcm9tICcuL2FjY2Vzc2liaWxpdHknO1xuaW1wb3J0IHR5cGUgeyBIb3N0VGVzdEluc3RhbmNlIH0gZnJvbSAnLi9jb21wb25lbnQtdHJlZSc7XG5pbXBvcnQgeyBpc0hvc3RFbGVtZW50IH0gZnJvbSAnLi9jb21wb25lbnQtdHJlZSc7XG5cbmludGVyZmFjZSBGaW5kQWxsT3B0aW9ucyB7XG4gIC8qKiBNYXRjaCBlbGVtZW50cyBoaWRkZW4gZnJvbSBhY2Nlc3NpYmlsaXR5ICovXG4gIGluY2x1ZGVIaWRkZW5FbGVtZW50cz86IGJvb2xlYW47XG5cbiAgLyoqIFJUTC1jb21wYXRpYmxlIGFsaWFzIHRvIGBpbmNsdWRlSGlkZGVuRWxlbWVudHNgICovXG4gIGhpZGRlbj86IGJvb2xlYW47XG5cbiAgLyogRXhjbHVkZSBhbnkgYW5jZXN0b3JzIG9mIGRlZXBlc3QgbWF0Y2hlZCBlbGVtZW50cyBldmVuIGlmIHRoZXkgbWF0Y2ggdGhlIHByZWRpY2F0ZSAqL1xuICBtYXRjaERlZXBlc3RPbmx5PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBbGwoXG4gIHJvb3Q6IFJlYWN0VGVzdEluc3RhbmNlLFxuICBwcmVkaWNhdGU6IChlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSkgPT4gYm9vbGVhbixcbiAgb3B0aW9ucz86IEZpbmRBbGxPcHRpb25zLFxuKTogSG9zdFRlc3RJbnN0YW5jZVtdIHtcbiAgY29uc3QgcmVzdWx0cyA9IGZpbmRBbGxJbnRlcm5hbChyb290LCBwcmVkaWNhdGUsIG9wdGlvbnMpO1xuXG4gIGNvbnN0IGluY2x1ZGVIaWRkZW5FbGVtZW50cyA9XG4gICAgb3B0aW9ucz8uaW5jbHVkZUhpZGRlbkVsZW1lbnRzID8/IG9wdGlvbnM/LmhpZGRlbiA/PyBnZXRDb25maWcoKT8uZGVmYXVsdEluY2x1ZGVIaWRkZW5FbGVtZW50cztcblxuICBpZiAoaW5jbHVkZUhpZGRlbkVsZW1lbnRzKSB7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cblxuICBjb25zdCBjYWNoZSA9IG5ldyBXZWFrTWFwPFJlYWN0VGVzdEluc3RhbmNlPigpO1xuICByZXR1cm4gcmVzdWx0cy5maWx0ZXIoKGVsZW1lbnQpID0+ICFpc0hpZGRlbkZyb21BY2Nlc3NpYmlsaXR5KGVsZW1lbnQsIHsgY2FjaGUgfSkpO1xufVxuXG4vLyBFeHRyYWN0ZWQgZnJvbSBSZWFjdCBUZXN0IFJlbmRlcmVyXG4vLyBzcmM6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzhlMmJkZTZmMjc1MWFhNjMzNWYzY2VmNDg4YzA1YzNlYTA4ZTA3NGEvcGFja2FnZXMvcmVhY3QtdGVzdC1yZW5kZXJlci9zcmMvUmVhY3RUZXN0UmVuZGVyZXIuanMjTDQwMlxuZnVuY3Rpb24gZmluZEFsbEludGVybmFsKFxuICByb290OiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgcHJlZGljYXRlOiAoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpID0+IGJvb2xlYW4sXG4gIG9wdGlvbnM/OiBGaW5kQWxsT3B0aW9ucyxcbik6IEhvc3RUZXN0SW5zdGFuY2VbXSB7XG4gIGNvbnN0IHJlc3VsdHM6IEhvc3RUZXN0SW5zdGFuY2VbXSA9IFtdO1xuXG4gIC8vIE1hdGNoIGRlc2NlbmRhbnRzIGZpcnN0IGJ1dCBkbyBub3QgYWRkIHRoZW0gdG8gcmVzdWx0cyB5ZXQuXG4gIGNvbnN0IG1hdGNoaW5nRGVzY2VuZGFudHM6IEhvc3RUZXN0SW5zdGFuY2VbXSA9IFtdO1xuICByb290LmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWF0Y2hpbmdEZXNjZW5kYW50cy5wdXNoKC4uLmZpbmRBbGxJbnRlcm5hbChjaGlsZCwgcHJlZGljYXRlLCBvcHRpb25zKSk7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAvLyBXaGVuIG1hdGNoRGVlcGVzdE9ubHkgPSB0cnVlOiBhZGQgY3VycmVudCBlbGVtZW50IG9ubHkgaWYgbm8gZGVzY2VuZGFudHMgbWF0Y2hcbiAgICAoIW9wdGlvbnM/Lm1hdGNoRGVlcGVzdE9ubHkgfHwgbWF0Y2hpbmdEZXNjZW5kYW50cy5sZW5ndGggPT09IDApICYmXG4gICAgaXNIb3N0RWxlbWVudChyb290KSAmJlxuICAgIHByZWRpY2F0ZShyb290KVxuICApIHtcbiAgICByZXN1bHRzLnB1c2gocm9vdCk7XG4gIH1cblxuICAvLyBBZGQgbWF0Y2hpbmcgZGVzY2VuZGFudHMgYWZ0ZXIgZWxlbWVudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCB0cmVlIHdhbGsgb3JkZXIuXG4gIHJlc3VsdHMucHVzaCguLi5tYXRjaGluZ0Rlc2NlbmRhbnRzKTtcblxuICByZXR1cm4gcmVzdWx0cztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxjQUFBLEdBQUFGLE9BQUE7QUFhTyxTQUFTRyxPQUFPQSxDQUNyQkMsSUFBdUIsRUFDdkJDLFNBQWtELEVBQ2xEQyxPQUF3QixFQUNKO0VBQUEsSUFBQUMsSUFBQSxFQUFBQyxxQkFBQSxFQUFBQyxLQUFBO0VBQ3BCLElBQU1DLE9BQU8sR0FBR0MsZUFBZSxDQUFDUCxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxDQUFDO0VBRXpELElBQU1NLHFCQUFxQixJQUFBTCxJQUFBLElBQUFDLHFCQUFBLEdBQ3pCRixPQUFPLG9CQUFQQSxPQUFPLENBQUVNLHFCQUFxQixZQUFBSixxQkFBQSxHQUFJRixPQUFPLG9CQUFQQSxPQUFPLENBQUVPLE1BQU0sWUFBQU4sSUFBQSxJQUFBRSxLQUFBLEdBQUksSUFBQVYsT0FBQSxDQUFBZSxTQUFTLEVBQUMsQ0FBQyxxQkFBWEwsS0FBQSxDQUFhTSw0QkFBNEI7RUFFaEcsSUFBSUgscUJBQXFCLEVBQUU7SUFDekIsT0FBT0YsT0FBTztFQUNoQjtFQUVBLElBQU1NLEtBQUssR0FBRyxJQUFJQyxPQUFPLENBQW9CLENBQUM7RUFDOUMsT0FBT1AsT0FBTyxDQUFDUSxNQUFNLENBQUUsVUFBQUMsT0FBTztJQUFBLE9BQUssQ0FBQyxJQUFBbEIsY0FBQSxDQUFBbUIseUJBQXlCLEVBQUNELE9BQU8sRUFBRTtNQUFFSCxLQUFBLEVBQUFBO0lBQU0sQ0FBQyxDQUFDO0VBQUEsRUFBQztBQUNwRjtBQUlBLFNBQVNMLGVBQWVBLENBQ3RCUCxJQUF1QixFQUN2QkMsU0FBa0QsRUFDbERDLE9BQXdCLEVBQ0o7RUFDcEIsSUFBTUksT0FBMkIsR0FBRyxFQUFFO0VBR3RDLElBQU1XLG1CQUF1QyxHQUFHLEVBQUU7RUFDbERqQixJQUFJLENBQUNrQixRQUFRLENBQUNDLE9BQU8sQ0FBRSxVQUFBQyxLQUFLLEVBQUs7SUFDL0IsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUFFO01BQzdCO0lBQ0Y7SUFDQUgsbUJBQW1CLENBQUNJLElBQUksQ0FBQUMsS0FBQSxDQUF4QkwsbUJBQW1CLE1BQUFNLG1CQUFBLENBQUFDLE9BQUEsRUFBU2pCLGVBQWUsQ0FBQ2EsS0FBSyxFQUFFbkIsU0FBUyxFQUFFQyxPQUFPLENBQUMsRUFBQztFQUN6RSxDQUFDLENBQUM7RUFFRixJQUVFLENBQUMsRUFBQ0EsT0FBTyxZQUFQQSxPQUFPLENBQUV1QixnQkFBZ0IsS0FBSVIsbUJBQW1CLENBQUNTLE1BQU0sS0FBSyxDQUFDLEtBQy9ELElBQUE1QixjQUFBLENBQUE2QixhQUFhLEVBQUMzQixJQUFJLENBQUMsSUFDbkJDLFNBQVMsQ0FBQ0QsSUFBSSxDQUFDLEVBQ2Y7SUFDQU0sT0FBTyxDQUFDZSxJQUFJLENBQUNyQixJQUFJLENBQUM7RUFDcEI7RUFHQU0sT0FBTyxDQUFDZSxJQUFJLENBQUFDLEtBQUEsQ0FBWmhCLE9BQU8sRUFBU1csbUJBQW1CLENBQUM7RUFFcEMsT0FBT1gsT0FBTztBQUNoQiIsImlnbm9yZUxpc3QiOltdfQ==