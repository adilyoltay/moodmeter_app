c2c96041e2d280e15a13e86107351ed6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dailyJobsManager = exports.DailyJobsManager = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _env2 = require("expo/virtual/env");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _reactNative = require("react-native");
var _storage = require("../../../utils/storage");
var _UnifiedAIPipeline = require("../core/UnifiedAIPipeline");
var _aiTelemetry = require("../telemetry/aiTelemetry");
var _supabase = _interopRequireDefault(require("../../../services/supabase"));
var BATCH_TASK_NAME = 'AI_DAILY_BATCH_JOBS';
var BATCH_SCHEDULE_TIME = _env2.env.EXPO_PUBLIC_BATCH_SCHEDULE_LOCAL || '03:05';
var LAST_RUN_KEY = 'ai:batch:lastRun';
var DailyJobsManager = exports.DailyJobsManager = function () {
  function DailyJobsManager() {
    (0, _classCallCheck2.default)(this, DailyJobsManager);
    this.isRunning = false;
    this.lastRunTime = null;
  }
  return (0, _createClass2.default)(DailyJobsManager, [{
    key: "initialize",
    value: (function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        var _this = this;
        if (_reactNative.Platform.OS === 'web') {
          console.log('‚ö†Ô∏è Background tasks not supported on web');
          return;
        }
        try {
          if (false) {
            console.log('‚úÖ Daily batch jobs registered (DISABLED)');
          }
          var lastRun = yield _asyncStorage.default.getItem(LAST_RUN_KEY);
          this.lastRunTime = lastRun ? parseInt(lastRun) : null;
          if (this.shouldRunCatchUp()) {
            console.log('üîÑ Running catch-up batch jobs');
            setTimeout(function () {
              return _this.runAllJobs();
            }, 5000);
          }
        } catch (error) {
          console.error('‚ùå Failed to initialize batch jobs:', error);
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }())
  }, {
    key: "shouldRunCatchUp",
    value: function shouldRunCatchUp() {
      if (!this.lastRunTime) return true;
      var hoursSinceLastRun = (Date.now() - this.lastRunTime) / (1000 * 60 * 60);
      return hoursSinceLastRun > 24;
    }
  }, {
    key: "runAllJobs",
    value: (function () {
      var _runAllJobs = (0, _asyncToGenerator2.default)(function* (userId) {
        if (this.isRunning) {
          console.log('‚è≥ Batch jobs already running, skipping');
          return [];
        }
        this.isRunning = true;
        var results = [];
        var startTime = Date.now();
        try {
          console.log('üöÄ Starting daily batch jobs');
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.BATCH_JOB_STARTED, {
            timestamp: new Date().toISOString(),
            userId: userId
          });
          if (!userId) {
            var userSession = yield _asyncStorage.default.getItem('supabase-session');
            if (userSession) {
              var _session$user;
              var session = JSON.parse(userSession);
              userId = (_session$user = session.user) == null ? void 0 : _session$user.id;
            }
          }
          if (!userId) {
            throw new Error('No user ID available for batch jobs');
          }
          var trendResult = yield this.runTrendAnalysis(userId);
          results.push(trendResult);
          var moodResult = yield this.runMoodAnalysis(userId);
          results.push(moodResult);
          var riskResult = yield this.runRiskUpdate(userId);
          results.push(riskResult);
          var digestResult = yield this.generateTodayDigest(userId);
          results.push(digestResult);
          var cleanupResult = yield this.runCacheCleanup(userId);
          results.push(cleanupResult);
          yield _asyncStorage.default.setItem(LAST_RUN_KEY, Date.now().toString());
          this.lastRunTime = Date.now();
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.BATCH_JOB_COMPLETED, {
            timestamp: new Date().toISOString(),
            userId: userId,
            duration: Date.now() - startTime,
            successCount: results.filter(function (r) {
              return r.success;
            }).length,
            failureCount: results.filter(function (r) {
              return !r.success;
            }).length
          });
          console.log('‚úÖ Daily batch jobs completed', {
            duration: `${(Date.now() - startTime) / 1000}s`,
            success: results.filter(function (r) {
              return r.success;
            }).length,
            failed: results.filter(function (r) {
              return !r.success;
            }).length
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è Batch jobs skipped:', error instanceof Error ? error.message : 'Unknown error');
          if (userId) {
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.BATCH_JOB_FAILED, {
              error: error instanceof Error ? error.message : 'Unknown error',
              userId: userId
            });
          }
        } finally {
          this.isRunning = false;
        }
        return results;
      });
      function runAllJobs(_x) {
        return _runAllJobs.apply(this, arguments);
      }
      return runAllJobs;
    }())
  }, {
    key: "runTrendAnalysis",
    value: (function () {
      var _runTrendAnalysis = (0, _asyncToGenerator2.default)(function* (userId) {
        var startTime = Date.now();
        try {
          var _yield$Promise$all = yield Promise.all([this.fetchCompulsionData(userId, 7), this.fetchCompulsionData(userId, 28)]),
            _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
            compulsions7d = _yield$Promise$all2[0],
            compulsions28d = _yield$Promise$all2[1];
          var _yield$Promise$all3 = yield Promise.all([this.fetchMoodData(userId, 7), this.fetchMoodData(userId, 28)]),
            _yield$Promise$all4 = (0, _slicedToArray2.default)(_yield$Promise$all3, 2),
            moods7d = _yield$Promise$all4[0],
            moods28d = _yield$Promise$all4[1];
          var trends7d = {
            period: '7d',
            metrics: {
              compulsionTrend: this.calculateTrend(compulsions7d.map(function (c) {
                return c.count;
              })),
              moodTrend: this.calculateTrend(moods7d.map(function (m) {
                return m.value;
              })),
              erpComplianceTrend: this.calculateTrend(erp7d.map(function (e) {
                return e.completed ? 1 : 0;
              })),
              resistanceTrend: this.calculateTrend(compulsions7d.map(function (c) {
                return c.avgResistance;
              }))
            },
            insights: []
          };
          var trends28d = {
            period: '28d',
            metrics: {
              compulsionTrend: this.calculateTrend(compulsions28d.map(function (c) {
                return c.count;
              })),
              moodTrend: this.calculateTrend(moods28d.map(function (m) {
                return m.value;
              })),
              erpComplianceTrend: this.calculateTrend(erp28d.map(function (e) {
                return e.completed ? 1 : 0;
              })),
              resistanceTrend: this.calculateTrend(compulsions28d.map(function (c) {
                return c.avgResistance;
              }))
            },
            insights: []
          };
          if (trends7d.metrics.compulsionTrend < -0.2) {
            trends7d.insights.push('Kompulsiyonlarƒ±nda son 7 g√ºnde azalma var, harika gidiyorsun!');
          }
          if (trends7d.metrics.resistanceTrend > 0.3) {
            trends7d.insights.push('Diren√ß g√ºc√ºn artƒ±yor, bu √ßok deƒüerli bir ilerleme');
          }
          if (trends28d.metrics.erpComplianceTrend > 0.5) {
            trends28d.insights.push('Terapi egzersizlerine d√ºzenli devam ediyorsun, tedavi uyumun m√ºkemmel');
          }
          var cacheKey7d = `ai:${userId}:${new Date().toISOString().split('T')[0]}:trends:7d`;
          var cacheKey28d = `ai:${userId}:${new Date().toISOString().split('T')[0]}:trends:28d`;
          yield _asyncStorage.default.setItem(cacheKey7d, JSON.stringify(trends7d));
          yield _asyncStorage.default.setItem(cacheKey28d, JSON.stringify(trends28d));
          return {
            jobName: 'TrendAnalysis',
            success: true,
            startTime: startTime,
            endTime: Date.now(),
            metrics: {
              trends7d: trends7d.metrics,
              trends28d: trends28d.metrics,
              insightsCount: trends7d.insights.length + trends28d.insights.length
            }
          };
        } catch (error) {
          console.error('‚ùå Trend analysis failed:', error);
          return {
            jobName: 'TrendAnalysis',
            success: false,
            startTime: startTime,
            endTime: Date.now(),
            error: error instanceof Error ? error.message : 'Unknown error'
          };
        }
      });
      function runTrendAnalysis(_x2) {
        return _runTrendAnalysis.apply(this, arguments);
      }
      return runTrendAnalysis;
    }())
  }, {
    key: "runMoodAnalysis",
    value: (function () {
      var _runMoodAnalysis = (0, _asyncToGenerator2.default)(function* (userId) {
        var startTime = Date.now();
        try {
          var moods = yield this.fetchMoodData(userId, 14);
          if (moods.length < 3) {
            return {
              jobName: 'MoodAnalysis',
              success: true,
              startTime: startTime,
              endTime: Date.now(),
              metrics: {
                skipped: true,
                reason: 'Insufficient data'
              }
            };
          }
          var smoothedMoods = this.exponentialSmoothing(moods.map(function (m) {
            return m.value;
          }), 0.3);
          var outliers = this.detectOutliers(moods.map(function (m) {
            return m.value;
          }));
          var analysisResult = {
            smoothedValues: smoothedMoods,
            outlierIndices: outliers,
            insights: []
          };
          if (outliers.length > 0) {
            analysisResult.insights.push(`Son 2 haftada ${outliers.length} ani duygu durum deƒüi≈üimi tespit edildi`);
          }
          var avgMood = smoothedMoods.reduce(function (a, b) {
            return a + b;
          }, 0) / smoothedMoods.length;
          if (avgMood < 40) {
            analysisResult.insights.push('Genel duygu durumun d√º≈ü√ºk seyrediyor, destek almayƒ± d√º≈ü√ºnebilirsin');
          }
          var cacheKey = `ai:${userId}:${new Date().toISOString().split('T')[0]}:mood:analysis`;
          yield _asyncStorage.default.setItem(cacheKey, JSON.stringify(analysisResult));
          return {
            jobName: 'MoodAnalysis',
            success: true,
            startTime: startTime,
            endTime: Date.now(),
            metrics: {
              dataPoints: moods.length,
              outliers: outliers.length,
              avgMood: Math.round(avgMood)
            }
          };
        } catch (error) {
          console.error('‚ùå Mood analysis failed:', error);
          return {
            jobName: 'MoodAnalysis',
            success: false,
            startTime: startTime,
            endTime: Date.now(),
            error: error instanceof Error ? error.message : 'Unknown error'
          };
        }
      });
      function runMoodAnalysis(_x3) {
        return _runMoodAnalysis.apply(this, arguments);
      }
      return runMoodAnalysis;
    }())
  }, {
    key: "runRiskUpdate",
    value: (function () {
      var _runRiskUpdate = (0, _asyncToGenerator2.default)(function* (userId) {
        var startTime = Date.now();
        try {
          var riskKey = _storage.StorageKeys.USER_SETTINGS(userId);
          var settings = yield _asyncStorage.default.getItem(riskKey);
          var currentRisk = settings ? JSON.parse(settings).riskScore || 0.5 : 0.5;
          var recentCompulsions = yield this.fetchCompulsionData(userId, 3);
          var riskDelta = 0;
          var compulsionTrend = this.calculateTrend(recentCompulsions.map(function (c) {
            return c.count;
          }));
          if (compulsionTrend > 0.3) riskDelta += 0.05;
          if (compulsionTrend < -0.3) riskDelta -= 0.05;
          var erpCompliance = recentTerapi.filter(function (e) {
            return e.completed;
          }).length / Math.max(recentTerapi.length, 1);
          if (erpCompliance > 0.7) riskDelta -= 0.05;
          if (erpCompliance < 0.3) riskDelta += 0.05;
          var newRisk = Math.max(0, Math.min(1, currentRisk + riskDelta));
          var shouldUpdate = Math.abs(riskDelta) >= 0.15;
          if (shouldUpdate) {
            var updatedSettings = Object.assign({}, settings ? JSON.parse(settings) : {}, {
              riskScore: newRisk,
              riskUpdatedAt: Date.now()
            });
            yield _asyncStorage.default.setItem(riskKey, JSON.stringify(updatedSettings));
            console.log(`üìä Risk score updated: ${currentRisk.toFixed(2)} ‚Üí ${newRisk.toFixed(2)}`);
          }
          return {
            jobName: 'RiskUpdate',
            success: true,
            startTime: startTime,
            endTime: Date.now(),
            metrics: {
              previousRisk: currentRisk,
              newRisk: shouldUpdate ? newRisk : currentRisk,
              delta: riskDelta,
              updated: shouldUpdate
            }
          };
        } catch (error) {
          console.error('‚ùå Risk update failed:', error);
          return {
            jobName: 'RiskUpdate',
            success: false,
            startTime: startTime,
            endTime: Date.now(),
            error: error instanceof Error ? error.message : 'Unknown error'
          };
        }
      });
      function runRiskUpdate(_x4) {
        return _runRiskUpdate.apply(this, arguments);
      }
      return runRiskUpdate;
    }())
  }, {
    key: "generateTodayDigest",
    value: (function () {
      var _generateTodayDigest = (0, _asyncToGenerator2.default)(function* (userId) {
        var startTime = Date.now();
        try {
          var _todayCompulsions$, _todayCompulsions$2;
          var today = new Date().toISOString().split('T')[0];
          var todayCompulsions = yield this.fetchCompulsionData(userId, 1);
          var todayMoods = yield this.fetchMoodData(userId, 1);
          var totalCompulsions = ((_todayCompulsions$ = todayCompulsions[0]) == null ? void 0 : _todayCompulsions$.count) || 0;
          var avgResistance = ((_todayCompulsions$2 = todayCompulsions[0]) == null ? void 0 : _todayCompulsions$2.avgResistance) || 0;
          var moodValues = todayMoods.map(function (m) {
            return m.value;
          });
          var moodRange = {
            min: moodValues.length > 0 ? Math.min.apply(Math, (0, _toConsumableArray2.default)(moodValues)) : 50,
            max: moodValues.length > 0 ? Math.max.apply(Math, (0, _toConsumableArray2.default)(moodValues)) : 50
          };
          var digest = {
            userId: userId,
            date: today,
            summary: {
              highlights: [],
              challenges: [],
              recommendations: []
            },
            metrics: {
              totalCompulsions: totalCompulsions,
              avgResistance: avgResistance,
              moodRange: moodRange
            },
            generatedAt: Date.now(),
            ttl: parseInt(_env2.env.EXPO_PUBLIC_CACHE_TTL_TODAY_DIGEST_HOURS || '12')
          };
          if (avgResistance > 7) {
            digest.summary.highlights.push('G√º√ßl√º diren√ß g√∂sterdin! üí™');
          }
          if (totalCompulsions === 0) {
            digest.summary.highlights.push('Kompulsiyonsuz bir g√ºn! üåü');
          }
          if (totalCompulsions > 5) {
            digest.summary.challenges.push('Kompulsiyon sayƒ±sƒ± normalden fazla');
          }
          if (moodRange.max - moodRange.min > 40) {
            digest.summary.challenges.push('Duygu durum dalgalanmalarƒ± var');
          }
          if (avgResistance < 5) {
            digest.summary.recommendations.push('Diren√ß tekniklerini g√∂zden ge√ßir');
          }
          if (moodRange.min < 30) {
            digest.summary.recommendations.push('Nefes egzersizleri ruh halini iyile≈ütirebilir');
          }
          var cacheKey = `ai:${userId}:${today}:todayDigest`;
          yield _asyncStorage.default.setItem(cacheKey, JSON.stringify(digest));
          try {
            yield _UnifiedAIPipeline.unifiedPipeline.process({
              userId: userId,
              content: digest,
              context: {
                source: 'batch-today-digest',
                cacheKey: cacheKey,
                timestamp: Date.now()
              }
            });
            console.log('‚úÖ Daily digest processed through UnifiedAIPipeline');
          } catch (error) {
            console.warn('‚ö†Ô∏è UnifiedAIPipeline processing failed for daily digest:', error);
          }
          return {
            jobName: 'TodayDigest',
            success: true,
            startTime: startTime,
            endTime: Date.now(),
            metrics: {
              highlights: digest.summary.highlights.length,
              challenges: digest.summary.challenges.length,
              recommendations: digest.summary.recommendations.length
            }
          };
        } catch (error) {
          console.error('‚ùå Today digest generation failed:', error);
          return {
            jobName: 'TodayDigest',
            success: false,
            startTime: startTime,
            endTime: Date.now(),
            error: error instanceof Error ? error.message : 'Unknown error'
          };
        }
      });
      function generateTodayDigest(_x5) {
        return _generateTodayDigest.apply(this, arguments);
      }
      return generateTodayDigest;
    }())
  }, {
    key: "runCacheCleanup",
    value: (function () {
      var _runCacheCleanup = (0, _asyncToGenerator2.default)(function* (userId) {
        var startTime = Date.now();
        try {
          var allKeys = yield _asyncStorage.default.getAllKeys();
          var aiKeys = allKeys.filter(function (key) {
            return key.startsWith('ai:');
          });
          var removedCount = 0;
          var now = Date.now();
          for (var key of aiKeys) {
            try {
              var value = yield _asyncStorage.default.getItem(key);
              if (value) {
                var data = JSON.parse(value);
                if (data.computedAt && data.ttl) {
                  var expiresAt = data.computedAt + data.ttl * 60 * 60 * 1000;
                  if (now > expiresAt) {
                    yield _asyncStorage.default.removeItem(key);
                    removedCount++;
                  }
                }
                var keyParts = key.split(':');
                if (keyParts.length >= 3) {
                  var dateStr = keyParts[2];
                  if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
                    var keyDate = new Date(dateStr);
                    var daysDiff = (now - keyDate.getTime()) / (1000 * 60 * 60 * 24);
                    if (daysDiff > 30) {
                      yield _asyncStorage.default.removeItem(key);
                      removedCount++;
                    }
                  }
                }
              }
            } catch (error) {
              console.warn(`Failed to process cache key ${key}:`, error);
            }
          }
          console.log(`üßπ Cache cleanup: removed ${removedCount} expired entries`);
          return {
            jobName: 'CacheCleanup',
            success: true,
            startTime: startTime,
            endTime: Date.now(),
            metrics: {
              totalKeys: aiKeys.length,
              removedKeys: removedCount
            }
          };
        } catch (error) {
          console.error('‚ùå Cache cleanup failed:', error);
          return {
            jobName: 'CacheCleanup',
            success: false,
            startTime: startTime,
            endTime: Date.now(),
            error: error instanceof Error ? error.message : 'Unknown error'
          };
        }
      });
      function runCacheCleanup(_x6) {
        return _runCacheCleanup.apply(this, arguments);
      }
      return runCacheCleanup;
    }())
  }, {
    key: "fetchCompulsionData",
    value: function () {
      var _fetchCompulsionData = (0, _asyncToGenerator2.default)(function* (userId, days) {
        var data = [];
        var now = new Date();
        var _loop = function* _loop() {
          var date = new Date(now);
          date.setDate(date.getDate() - i);
          var dateStr = date.toISOString().split('T')[0];
          var key = _storage.StorageKeys.COMPULSIONS(userId);
          var stored = yield _asyncStorage.default.getItem(key);
          var allCompulsions = stored ? JSON.parse(stored) : [];
          var dayCompulsions = allCompulsions.filter(function (c) {
            return new Date(c.timestamp).toISOString().split('T')[0] === dateStr;
          });
          var avgResistance = dayCompulsions.length > 0 ? dayCompulsions.reduce(function (sum, c) {
            return sum + (c.resistanceLevel || 0);
          }, 0) / dayCompulsions.length : 0;
          data.push({
            date: dateStr,
            count: dayCompulsions.length,
            avgResistance: avgResistance
          });
        };
        for (var i = 0; i < days; i++) {
          yield* _loop();
        }
        return data.reverse();
      });
      function fetchCompulsionData(_x7, _x8) {
        return _fetchCompulsionData.apply(this, arguments);
      }
      return fetchCompulsionData;
    }()
  }, {
    key: "fetchMoodData",
    value: function () {
      var _fetchMoodData = (0, _asyncToGenerator2.default)(function* (userId, days) {
        var data = [];
        var now = new Date();
        for (var i = 0; i < days; i++) {
          var date = new Date(now);
          date.setDate(date.getDate() - i);
          var dateStr = date.toISOString().split('T')[0];
          try {
            var moods = yield _supabase.default.getMoodEntries(userId, dateStr, dateStr);
            if (moods && moods.length > 0) {
              var avgMood = moods.reduce(function (sum, m) {
                return sum + m.mood;
              }, 0) / moods.length;
              data.push({
                date: dateStr,
                value: avgMood,
                count: moods.length
              });
            } else {
              data.push({
                date: dateStr,
                value: 50,
                count: 0
              });
            }
          } catch (error) {
            console.warn(`Failed to fetch mood data for ${dateStr}:`, error);
            data.push({
              date: dateStr,
              value: 50,
              count: 0
            });
          }
        }
        return data.reverse();
      });
      function fetchMoodData(_x9, _x0) {
        return _fetchMoodData.apply(this, arguments);
      }
      return fetchMoodData;
    }()
  }, {
    key: "calculateTrend",
    value: function calculateTrend(values) {
      if (values.length < 2) return 0;
      var n = values.length;
      var indices = Array.from({
        length: n
      }, function (_, i) {
        return i;
      });
      var sumX = indices.reduce(function (a, b) {
        return a + b;
      }, 0);
      var sumY = values.reduce(function (a, b) {
        return a + b;
      }, 0);
      var sumXY = indices.reduce(function (sum, x, i) {
        return sum + x * values[i];
      }, 0);
      var sumX2 = indices.reduce(function (sum, x) {
        return sum + x * x;
      }, 0);
      var slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
      var maxSlope = Math.max.apply(Math, (0, _toConsumableArray2.default)(values)) - Math.min.apply(Math, (0, _toConsumableArray2.default)(values));
      return maxSlope > 0 ? Math.max(-1, Math.min(1, slope / maxSlope)) : 0;
    }
  }, {
    key: "exponentialSmoothing",
    value: function exponentialSmoothing(values, alpha) {
      if (values.length === 0) return [];
      var smoothed = [values[0]];
      for (var i = 1; i < values.length; i++) {
        smoothed.push(alpha * values[i] + (1 - alpha) * smoothed[i - 1]);
      }
      return smoothed;
    }
  }, {
    key: "detectOutliers",
    value: function detectOutliers(values) {
      if (values.length < 4) return [];
      var sorted = (0, _toConsumableArray2.default)(values).sort(function (a, b) {
        return a - b;
      });
      var q1 = sorted[Math.floor(sorted.length * 0.25)];
      var q3 = sorted[Math.floor(sorted.length * 0.75)];
      var iqr = q3 - q1;
      var lowerBound = q1 - 1.5 * iqr;
      var upperBound = q3 + 1.5 * iqr;
      var outliers = [];
      values.forEach(function (value, index) {
        if (value < lowerBound || value > upperBound) {
          outliers.push(index);
        }
      });
      return outliers;
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!this.instance) {
        this.instance = new DailyJobsManager();
      }
      return this.instance;
    }
  }]);
}();
var dailyJobsManager = exports.dailyJobsManager = DailyJobsManager.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,