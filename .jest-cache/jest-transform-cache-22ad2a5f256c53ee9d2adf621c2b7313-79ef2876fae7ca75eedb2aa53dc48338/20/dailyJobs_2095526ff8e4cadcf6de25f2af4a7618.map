{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_reactNative","_storage","_UnifiedAIPipeline","_aiTelemetry","_supabase","BATCH_TASK_NAME","BATCH_SCHEDULE_TIME","_env2","env","EXPO_PUBLIC_BATCH_SCHEDULE_LOCAL","LAST_RUN_KEY","DailyJobsManager","exports","_classCallCheck2","default","isRunning","lastRunTime","_createClass2","key","value","_initialize","_asyncToGenerator2","_this","Platform","OS","console","log","lastRun","AsyncStorage","getItem","parseInt","shouldRunCatchUp","setTimeout","runAllJobs","error","initialize","apply","arguments","hoursSinceLastRun","Date","now","_runAllJobs","userId","results","startTime","trackAIInteraction","AIEventType","BATCH_JOB_STARTED","timestamp","toISOString","userSession","_session$user","session","JSON","parse","user","id","Error","trendResult","runTrendAnalysis","push","moodResult","runMoodAnalysis","riskResult","runRiskUpdate","digestResult","generateTodayDigest","cleanupResult","runCacheCleanup","setItem","toString","BATCH_JOB_COMPLETED","duration","successCount","filter","r","success","length","failureCount","failed","warn","message","BATCH_JOB_FAILED","_x","_runTrendAnalysis","_yield$Promise$all","Promise","all","fetchCompulsionData","_yield$Promise$all2","_slicedToArray2","compulsions7d","compulsions28d","_yield$Promise$all3","fetchMoodData","_yield$Promise$all4","moods7d","moods28d","trends7d","period","metrics","compulsionTrend","calculateTrend","map","c","count","moodTrend","m","erpComplianceTrend","erp7d","e","completed","resistanceTrend","avgResistance","insights","trends28d","erp28d","cacheKey7d","split","cacheKey28d","stringify","jobName","endTime","insightsCount","_x2","_runMoodAnalysis","moods","skipped","reason","smoothedMoods","exponentialSmoothing","outliers","detectOutliers","analysisResult","smoothedValues","outlierIndices","avgMood","reduce","a","b","cacheKey","dataPoints","Math","round","_x3","_runRiskUpdate","riskKey","StorageKeys","USER_SETTINGS","settings","currentRisk","riskScore","recentCompulsions","riskDelta","erpCompliance","recentTerapi","max","newRisk","min","shouldUpdate","abs","updatedSettings","Object","assign","riskUpdatedAt","toFixed","previousRisk","delta","updated","_x4","_generateTodayDigest","_todayCompulsions$","_todayCompulsions$2","today","todayCompulsions","todayMoods","totalCompulsions","moodValues","moodRange","_toConsumableArray2","digest","date","summary","highlights","challenges","recommendations","generatedAt","ttl","EXPO_PUBLIC_CACHE_TTL_TODAY_DIGEST_HOURS","unifiedPipeline","process","content","context","source","_x5","_runCacheCleanup","allKeys","getAllKeys","aiKeys","startsWith","removedCount","data","computedAt","expiresAt","removeItem","keyParts","dateStr","match","keyDate","daysDiff","getTime","totalKeys","removedKeys","_x6","_fetchCompulsionData","days","_loop","setDate","getDate","i","COMPULSIONS","stored","allCompulsions","dayCompulsions","sum","resistanceLevel","reverse","_x7","_x8","_fetchMoodData","supabaseService","getMoodEntries","mood","_x9","_x0","values","n","indices","Array","from","_","sumX","sumY","sumXY","x","sumX2","slope","maxSlope","alpha","smoothed","sorted","sort","q1","floor","q3","iqr","lowerBound","upperBound","forEach","index","getInstance","instance","dailyJobsManager"],"sources":["dailyJobs.ts"],"sourcesContent":["/**\n * Daily Batch Jobs for AI Analysis\n * Hybrid implementation: Device (Expo) + Edge (Supabase Cron)\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n// import * as TaskManager from 'expo-task-manager'; // DISABLED: Not available in development\n// import * as BackgroundFetch from 'expo-background-fetch'; // DISABLED: Not available in development\nimport { Platform } from 'react-native';\nimport { StorageKeys } from '@/utils/storage';\nimport { unifiedPipeline } from '../core/UnifiedAIPipeline';\nimport { trackAIInteraction, AIEventType } from '../telemetry/aiTelemetry';\nimport supabaseService from '@/services/supabase';\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\n\nconst BATCH_TASK_NAME = 'AI_DAILY_BATCH_JOBS';\nconst BATCH_SCHEDULE_TIME = process.env.EXPO_PUBLIC_BATCH_SCHEDULE_LOCAL || '03:05';\nconst LAST_RUN_KEY = 'ai:batch:lastRun';\n\nexport interface BatchJobResult {\n  jobName: string;\n  success: boolean;\n  startTime: number;\n  endTime: number;\n  metrics?: Record<string, any>;\n  error?: string;\n}\n\nexport interface TrendAnalysis {\n  period: '7d' | '28d';\n  metrics: {\n    compulsionTrend: number; // -1 to 1 (decreasing to increasing)\n    moodTrend: number; // -1 to 1\n    resistanceTrend: number; // -1 to 1\n  };\n  insights: string[];\n}\n\nexport interface TodayDigest {\n  userId: string;\n  date: string;\n  summary: {\n    highlights: string[];\n    challenges: string[];\n    recommendations: string[];\n  };\n  metrics: {\n    totalCompulsions: number;\n    avgResistance: number;\n\n    moodRange: { min: number; max: number };\n  };\n  generatedAt: number;\n  ttl: number; // hours\n}\n\n/**\n * DailyJobsManager - Orchestrates all batch jobs\n */\nexport class DailyJobsManager {\n  private static instance: DailyJobsManager;\n  private isRunning = false;\n  private lastRunTime: number | null = null;\n\n  static getInstance(): DailyJobsManager {\n    if (!this.instance) {\n      this.instance = new DailyJobsManager();\n    }\n    return this.instance;\n  }\n\n  /**\n   * Initialize background task for device-side execution\n   */\n  async initialize() {\n    if (Platform.OS === 'web') {\n      console.log('‚ö†Ô∏è Background tasks not supported on web');\n      return;\n    }\n\n    try {\n      // DISABLED IN DEVELOPMENT: Check if already registered\n      // const isRegistered = await TaskManager.isTaskRegisteredAsync(BATCH_TASK_NAME);\n      \n      if (false) { // DISABLED: Background tasks\n        // Register the background task\n        // await BackgroundFetch.registerTaskAsync(BATCH_TASK_NAME, {\n        //   minimumInterval: 60 * 60 * 12, // 12 hours minimum\n        //   stopOnTerminate: false,\n        //   startOnBoot: true,\n        // });\n        console.log('‚úÖ Daily batch jobs registered (DISABLED)');\n      }\n\n      // Load last run time\n      const lastRun = await AsyncStorage.getItem(LAST_RUN_KEY);\n      this.lastRunTime = lastRun ? parseInt(lastRun) : null;\n\n      // Check if catch-up needed (>24h since last run)\n      if (this.shouldRunCatchUp()) {\n        console.log('üîÑ Running catch-up batch jobs');\n        setTimeout(() => this.runAllJobs(), 5000); // Delay 5s after app start\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to initialize batch jobs:', error);\n    }\n  }\n\n  /**\n   * Check if catch-up run is needed\n   */\n  private shouldRunCatchUp(): boolean {\n    if (!this.lastRunTime) return true;\n    const hoursSinceLastRun = (Date.now() - this.lastRunTime) / (1000 * 60 * 60);\n    return hoursSinceLastRun > 24;\n  }\n\n  /**\n   * Run all daily batch jobs\n   */\n  async runAllJobs(userId?: string): Promise<BatchJobResult[]> {\n    if (this.isRunning) {\n      console.log('‚è≥ Batch jobs already running, skipping');\n      return [];\n    }\n\n    this.isRunning = true;\n    const results: BatchJobResult[] = [];\n    const startTime = Date.now();\n\n    try {\n      console.log('üöÄ Starting daily batch jobs');\n\n      // Track batch start\n      await trackAIInteraction(AIEventType.BATCH_JOB_STARTED, {\n        timestamp: new Date().toISOString(),\n        userId,\n      });\n\n      // Get user ID if not provided\n      if (!userId) {\n        const userSession = await AsyncStorage.getItem('supabase-session');\n        if (userSession) {\n          const session = JSON.parse(userSession);\n          userId = session.user?.id;\n        }\n      }\n\n      if (!userId) {\n        throw new Error('No user ID available for batch jobs');\n      }\n\n      // 1. Trend Analysis (7d and 28d)\n      const trendResult = await this.runTrendAnalysis(userId);\n      results.push(trendResult);\n\n      // 2. Mood Smoothing & Outlier Detection\n      const moodResult = await this.runMoodAnalysis(userId);\n      results.push(moodResult);\n\n      // 3. Risk Micro-updates (Œî‚â•0.15)\n      const riskResult = await this.runRiskUpdate(userId);\n      results.push(riskResult);\n\n      // 4. Today Digest Pre-computation\n      const digestResult = await this.generateTodayDigest(userId);\n      results.push(digestResult);\n\n      // 5. Cache Cleanup\n      const cleanupResult = await this.runCacheCleanup(userId);\n      results.push(cleanupResult);\n\n      // Update last run time\n      await AsyncStorage.setItem(LAST_RUN_KEY, Date.now().toString());\n      this.lastRunTime = Date.now();\n\n      // Track batch completion\n      await trackAIInteraction(AIEventType.BATCH_JOB_COMPLETED, {\n        timestamp: new Date().toISOString(),\n        userId,\n        duration: Date.now() - startTime,\n        successCount: results.filter(r => r.success).length,\n        failureCount: results.filter(r => !r.success).length,\n      });\n\n      console.log('‚úÖ Daily batch jobs completed', {\n        duration: `${(Date.now() - startTime) / 1000}s`,\n        success: results.filter(r => r.success).length,\n        failed: results.filter(r => !r.success).length,\n      });\n\n    } catch (error) {\n      // üîá SILENCED: Development batch job errors (normal in dev mode)\n      console.warn('‚ö†Ô∏è Batch jobs skipped:', error instanceof Error ? error.message : 'Unknown error');\n      \n      // Only track if we have a valid userId (production scenario)\n      if (userId) {\n        await trackAIInteraction(AIEventType.BATCH_JOB_FAILED, {\n          error: error instanceof Error ? error.message : 'Unknown error',\n          userId,\n        });\n      }\n    } finally {\n      this.isRunning = false;\n    }\n\n    return results;\n  }\n\n  /**\n   * 1. Trend Analysis - Analyze 7d and 28d trends\n   */\n  private async runTrendAnalysis(userId: string): Promise<BatchJobResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Fetch historical data\n      const [compulsions7d, compulsions28d] = await Promise.all([\n        this.fetchCompulsionData(userId, 7),\n        this.fetchCompulsionData(userId, 28),\n      ]);\n\n      const [moods7d, moods28d] = await Promise.all([\n        this.fetchMoodData(userId, 7),\n        this.fetchMoodData(userId, 28),\n      ]);\n\n      // ‚úÖ REMOVED: ERP data fetching - ERP module deleted\n\n      // Calculate trends\n      const trends7d: TrendAnalysis = {\n        period: '7d',\n        metrics: {\n          compulsionTrend: this.calculateTrend(compulsions7d.map(c => c.count)),\n          moodTrend: this.calculateTrend(moods7d.map(m => m.value)),\n          erpComplianceTrend: this.calculateTrend(erp7d.map(e => e.completed ? 1 : 0)),\n          resistanceTrend: this.calculateTrend(compulsions7d.map(c => c.avgResistance)),\n        },\n        insights: [],\n      };\n\n      const trends28d: TrendAnalysis = {\n        period: '28d',\n        metrics: {\n          compulsionTrend: this.calculateTrend(compulsions28d.map(c => c.count)),\n          moodTrend: this.calculateTrend(moods28d.map(m => m.value)),\n          erpComplianceTrend: this.calculateTrend(erp28d.map(e => e.completed ? 1 : 0)),\n          resistanceTrend: this.calculateTrend(compulsions28d.map(c => c.avgResistance)),\n        },\n        insights: [],\n      };\n\n      // Generate insights based on trends\n      if (trends7d.metrics.compulsionTrend < -0.2) {\n        trends7d.insights.push('Kompulsiyonlarƒ±nda son 7 g√ºnde azalma var, harika gidiyorsun!');\n      }\n      if (trends7d.metrics.resistanceTrend > 0.3) {\n        trends7d.insights.push('Diren√ß g√ºc√ºn artƒ±yor, bu √ßok deƒüerli bir ilerleme');\n      }\n      if (trends28d.metrics.erpComplianceTrend > 0.5) {\n        trends28d.insights.push('Terapi egzersizlerine d√ºzenli devam ediyorsun, tedavi uyumun m√ºkemmel');\n      }\n\n      // Store trends in cache\n      const cacheKey7d = `ai:${userId}:${new Date().toISOString().split('T')[0]}:trends:7d`;\n      const cacheKey28d = `ai:${userId}:${new Date().toISOString().split('T')[0]}:trends:28d`;\n      \n      await AsyncStorage.setItem(cacheKey7d, JSON.stringify(trends7d));\n      await AsyncStorage.setItem(cacheKey28d, JSON.stringify(trends28d));\n\n      return {\n        jobName: 'TrendAnalysis',\n        success: true,\n        startTime,\n        endTime: Date.now(),\n        metrics: {\n          trends7d: trends7d.metrics,\n          trends28d: trends28d.metrics,\n          insightsCount: trends7d.insights.length + trends28d.insights.length,\n        },\n      };\n\n    } catch (error) {\n      console.error('‚ùå Trend analysis failed:', error);\n      return {\n        jobName: 'TrendAnalysis',\n        success: false,\n        startTime,\n        endTime: Date.now(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * 2. Mood Analysis - Smoothing and outlier detection\n   */\n  private async runMoodAnalysis(userId: string): Promise<BatchJobResult> {\n    const startTime = Date.now();\n    \n    try {\n      const moods = await this.fetchMoodData(userId, 14); // 2 weeks of data\n      \n      if (moods.length < 3) {\n        return {\n          jobName: 'MoodAnalysis',\n          success: true,\n          startTime,\n          endTime: Date.now(),\n          metrics: { skipped: true, reason: 'Insufficient data' },\n        };\n      }\n\n      // Apply exponential smoothing\n      const smoothedMoods = this.exponentialSmoothing(moods.map(m => m.value), 0.3);\n      \n      // Detect outliers using IQR method\n      const outliers = this.detectOutliers(moods.map(m => m.value));\n      \n      // Store analysis results\n      const analysisResult = {\n        smoothedValues: smoothedMoods,\n        outlierIndices: outliers,\n        insights: [],\n      };\n\n      if (outliers.length > 0) {\n        analysisResult.insights.push(`Son 2 haftada ${outliers.length} ani duygu durum deƒüi≈üimi tespit edildi`);\n      }\n\n      const avgMood = smoothedMoods.reduce((a, b) => a + b, 0) / smoothedMoods.length;\n      if (avgMood < 40) {\n        analysisResult.insights.push('Genel duygu durumun d√º≈ü√ºk seyrediyor, destek almayƒ± d√º≈ü√ºnebilirsin');\n      }\n\n      // Cache the result\n      const cacheKey = `ai:${userId}:${new Date().toISOString().split('T')[0]}:mood:analysis`;\n      await AsyncStorage.setItem(cacheKey, JSON.stringify(analysisResult));\n\n      return {\n        jobName: 'MoodAnalysis',\n        success: true,\n        startTime,\n        endTime: Date.now(),\n        metrics: {\n          dataPoints: moods.length,\n          outliers: outliers.length,\n          avgMood: Math.round(avgMood),\n        },\n      };\n\n    } catch (error) {\n      console.error('‚ùå Mood analysis failed:', error);\n      return {\n        jobName: 'MoodAnalysis',\n        success: false,\n        startTime,\n        endTime: Date.now(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * 3. Risk Update - Micro-updates for risk scores\n   */\n  private async runRiskUpdate(userId: string): Promise<BatchJobResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Get current risk score\n      const riskKey = StorageKeys.USER_SETTINGS(userId);\n      const settings = await AsyncStorage.getItem(riskKey);\n      const currentRisk = settings ? JSON.parse(settings).riskScore || 0.5 : 0.5;\n\n      // Calculate risk delta based on recent data\n      const recentCompulsions = await this.fetchCompulsionData(userId, 3);\n      // ‚úÖ REMOVED: Recent ERP data - ERP module deleted\n      \n      let riskDelta = 0;\n      \n      // Increase risk if compulsions are increasing\n      const compulsionTrend = this.calculateTrend(recentCompulsions.map(c => c.count));\n      if (compulsionTrend > 0.3) riskDelta += 0.05;\n      if (compulsionTrend < -0.3) riskDelta -= 0.05;\n      \n      // Decrease risk if Terapi compliance is good\n      const erpCompliance = recentTerapi.filter(e => e.completed).length / Math.max(recentTerapi.length, 1);\n      if (erpCompliance > 0.7) riskDelta -= 0.05;\n      if (erpCompliance < 0.3) riskDelta += 0.05;\n      \n      // Apply delta if significant (‚â•0.15)\n      const newRisk = Math.max(0, Math.min(1, currentRisk + riskDelta));\n      const shouldUpdate = Math.abs(riskDelta) >= 0.15;\n      \n      if (shouldUpdate) {\n        const updatedSettings = {\n          ...(settings ? JSON.parse(settings) : {}),\n          riskScore: newRisk,\n          riskUpdatedAt: Date.now(),\n        };\n        await AsyncStorage.setItem(riskKey, JSON.stringify(updatedSettings));\n        \n        console.log(`üìä Risk score updated: ${currentRisk.toFixed(2)} ‚Üí ${newRisk.toFixed(2)}`);\n      }\n\n      return {\n        jobName: 'RiskUpdate',\n        success: true,\n        startTime,\n        endTime: Date.now(),\n        metrics: {\n          previousRisk: currentRisk,\n          newRisk: shouldUpdate ? newRisk : currentRisk,\n          delta: riskDelta,\n          updated: shouldUpdate,\n        },\n      };\n\n    } catch (error) {\n      console.error('‚ùå Risk update failed:', error);\n      return {\n        jobName: 'RiskUpdate',\n        success: false,\n        startTime,\n        endTime: Date.now(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * 4. Generate Today Digest - Pre-compute daily summary\n   */\n  private async generateTodayDigest(userId: string): Promise<BatchJobResult> {\n    const startTime = Date.now();\n    \n    try {\n      const today = new Date().toISOString().split('T')[0];\n      \n      // Gather today's data\n      const todayCompulsions = await this.fetchCompulsionData(userId, 1);\n      const todayMoods = await this.fetchMoodData(userId, 1);\n      // ‚úÖ REMOVED: Today ERP data - ERP module deleted\n      \n      // Calculate metrics\n      const totalCompulsions = todayCompulsions[0]?.count || 0;\n      const avgResistance = todayCompulsions[0]?.avgResistance || 0;\n      // ‚úÖ REMOVED: ERP sessions calculation - ERP module deleted\n      const moodValues = todayMoods.map(m => m.value);\n      const moodRange = {\n        min: moodValues.length > 0 ? Math.min(...moodValues) : 50,\n        max: moodValues.length > 0 ? Math.max(...moodValues) : 50,\n      };\n\n      // Generate digest content\n      const digest: TodayDigest = {\n        userId,\n        date: today,\n        summary: {\n          highlights: [],\n          challenges: [],\n          recommendations: [],\n        },\n        metrics: {\n          totalCompulsions,\n          avgResistance,\n          // ‚úÖ REMOVED: erpSessions - ERP module deleted\n          moodRange,\n        },\n        generatedAt: Date.now(),\n        ttl: parseInt(process.env.EXPO_PUBLIC_CACHE_TTL_TODAY_DIGEST_HOURS || '12'),\n      };\n\n      // Generate highlights\n      if (avgResistance > 7) {\n        digest.summary.highlights.push('G√º√ßl√º diren√ß g√∂sterdin! üí™');\n      }\n      // ‚úÖ REMOVED: ERP sessions highlights - ERP module deleted\n      if (totalCompulsions === 0) {\n        digest.summary.highlights.push('Kompulsiyonsuz bir g√ºn! üåü');\n      }\n\n      // Generate challenges\n      if (totalCompulsions > 5) {\n        digest.summary.challenges.push('Kompulsiyon sayƒ±sƒ± normalden fazla');\n      }\n      if (moodRange.max - moodRange.min > 40) {\n        digest.summary.challenges.push('Duygu durum dalgalanmalarƒ± var');\n      }\n\n      // Generate recommendations\n      // ‚úÖ REMOVED: ERP recommendations - ERP module deleted\n      if (avgResistance < 5) {\n        digest.summary.recommendations.push('Diren√ß tekniklerini g√∂zden ge√ßir');\n      }\n      if (moodRange.min < 30) {\n        digest.summary.recommendations.push('Nefes egzersizleri ruh halini iyile≈ütirebilir');\n      }\n\n      // Store digest in cache\n      const cacheKey = `ai:${userId}:${today}:todayDigest`;\n      await AsyncStorage.setItem(cacheKey, JSON.stringify(digest));\n\n      // Process digest through UnifiedAIPipeline for comprehensive analysis\n      try {\n        await unifiedPipeline.process({\n          userId,\n          content: digest,\n          context: {\n            source: 'batch-today-digest',\n            cacheKey,\n            timestamp: Date.now()\n          }\n        });\n        console.log('‚úÖ Daily digest processed through UnifiedAIPipeline');\n      } catch (error) {\n        console.warn('‚ö†Ô∏è UnifiedAIPipeline processing failed for daily digest:', error);\n      }\n\n      return {\n        jobName: 'TodayDigest',\n        success: true,\n        startTime,\n        endTime: Date.now(),\n        metrics: {\n          highlights: digest.summary.highlights.length,\n          challenges: digest.summary.challenges.length,\n          recommendations: digest.summary.recommendations.length,\n        },\n      };\n\n    } catch (error) {\n      console.error('‚ùå Today digest generation failed:', error);\n      return {\n        jobName: 'TodayDigest',\n        success: false,\n        startTime,\n        endTime: Date.now(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * 5. Cache Cleanup - Remove expired cache entries\n   */\n  private async runCacheCleanup(userId: string): Promise<BatchJobResult> {\n    const startTime = Date.now();\n    \n    try {\n      const allKeys = await AsyncStorage.getAllKeys();\n      const aiKeys = allKeys.filter(key => key.startsWith('ai:'));\n      \n      let removedCount = 0;\n      const now = Date.now();\n      \n      for (const key of aiKeys) {\n        try {\n          const value = await AsyncStorage.getItem(key);\n          if (value) {\n            const data = JSON.parse(value);\n            \n            // Check if expired based on computedAt and TTL\n            if (data.computedAt && data.ttl) {\n              const expiresAt = data.computedAt + (data.ttl * 60 * 60 * 1000);\n              if (now > expiresAt) {\n                await AsyncStorage.removeItem(key);\n                removedCount++;\n              }\n            }\n            \n            // Remove old daily keys (>30 days)\n            const keyParts = key.split(':');\n            if (keyParts.length >= 3) {\n              const dateStr = keyParts[2];\n              if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n                const keyDate = new Date(dateStr);\n                const daysDiff = (now - keyDate.getTime()) / (1000 * 60 * 60 * 24);\n                if (daysDiff > 30) {\n                  await AsyncStorage.removeItem(key);\n                  removedCount++;\n                }\n              }\n            }\n          }\n        } catch (error) {\n          // Skip invalid entries\n          console.warn(`Failed to process cache key ${key}:`, error);\n        }\n      }\n\n      console.log(`üßπ Cache cleanup: removed ${removedCount} expired entries`);\n\n      return {\n        jobName: 'CacheCleanup',\n        success: true,\n        startTime,\n        endTime: Date.now(),\n        metrics: {\n          totalKeys: aiKeys.length,\n          removedKeys: removedCount,\n        },\n      };\n\n    } catch (error) {\n      console.error('‚ùå Cache cleanup failed:', error);\n      return {\n        jobName: 'CacheCleanup',\n        success: false,\n        startTime,\n        endTime: Date.now(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // Helper methods\n\n  private async fetchCompulsionData(userId: string, days: number) {\n    const data = [];\n    const now = new Date();\n    \n    for (let i = 0; i < days; i++) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const key = StorageKeys.COMPULSIONS(userId);\n      const stored = await AsyncStorage.getItem(key);\n      const allCompulsions = stored ? JSON.parse(stored) : [];\n      \n      const dayCompulsions = allCompulsions.filter((c: any) => \n        new Date(c.timestamp).toISOString().split('T')[0] === dateStr\n      );\n      \n      const avgResistance = dayCompulsions.length > 0\n        ? dayCompulsions.reduce((sum: number, c: any) => sum + (c.resistanceLevel || 0), 0) / dayCompulsions.length\n        : 0;\n      \n      data.push({\n        date: dateStr,\n        count: dayCompulsions.length,\n        avgResistance,\n      });\n    }\n    \n    return data.reverse(); // Return in chronological order\n  }\n\n  private async fetchMoodData(userId: string, days: number) {\n    const data = [];\n    const now = new Date();\n    \n    for (let i = 0; i < days; i++) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      // Fetch from Supabase or local storage\n      try {\n        const moods = await supabaseService.getMoodEntries(userId, dateStr, dateStr);\n        if (moods && moods.length > 0) {\n          const avgMood = moods.reduce((sum, m) => sum + m.mood, 0) / moods.length;\n          data.push({\n            date: dateStr,\n            value: avgMood,\n            count: moods.length,\n          });\n        } else {\n          data.push({\n            date: dateStr,\n            value: 50, // Default neutral mood\n            count: 0,\n          });\n        }\n      } catch (error) {\n        console.warn(`Failed to fetch mood data for ${dateStr}:`, error);\n        data.push({\n          date: dateStr,\n          value: 50,\n          count: 0,\n        });\n      }\n    }\n    \n    return data.reverse();\n  }\n\n  // ‚úÖ REMOVED: fetchTerapiData method - ERP module deleted\n\n  private calculateTrend(values: number[]): number {\n    if (values.length < 2) return 0;\n    \n    // Simple linear regression\n    const n = values.length;\n    const indices = Array.from({ length: n }, (_, i) => i);\n    \n    const sumX = indices.reduce((a, b) => a + b, 0);\n    const sumY = values.reduce((a, b) => a + b, 0);\n    const sumXY = indices.reduce((sum, x, i) => sum + x * values[i], 0);\n    const sumX2 = indices.reduce((sum, x) => sum + x * x, 0);\n    \n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    \n    // Normalize to -1 to 1 range\n    const maxSlope = Math.max(...values) - Math.min(...values);\n    return maxSlope > 0 ? Math.max(-1, Math.min(1, slope / maxSlope)) : 0;\n  }\n\n  private exponentialSmoothing(values: number[], alpha: number): number[] {\n    if (values.length === 0) return [];\n    \n    const smoothed = [values[0]];\n    for (let i = 1; i < values.length; i++) {\n      smoothed.push(alpha * values[i] + (1 - alpha) * smoothed[i - 1]);\n    }\n    \n    return smoothed;\n  }\n\n  private detectOutliers(values: number[]): number[] {\n    if (values.length < 4) return [];\n    \n    const sorted = [...values].sort((a, b) => a - b);\n    const q1 = sorted[Math.floor(sorted.length * 0.25)];\n    const q3 = sorted[Math.floor(sorted.length * 0.75)];\n    const iqr = q3 - q1;\n    \n    const lowerBound = q1 - 1.5 * iqr;\n    const upperBound = q3 + 1.5 * iqr;\n    \n    const outliers: number[] = [];\n    values.forEach((value, index) => {\n      if (value < lowerBound || value > upperBound) {\n        outliers.push(index);\n      }\n    });\n    \n    return outliers;\n  }\n}\n\n/**\n * Task Manager Definition - Executed by Expo in background\n */\n// DISABLED IN DEVELOPMENT - Background tasks cause ExpoTaskManager errors\n// TaskManager.defineTask(BATCH_TASK_NAME, async () => {\n//   try {\n//     console.log('üìÖ Background batch job triggered');\n    \n//     const manager = DailyJobsManager.getInstance();\n//     const results = await manager.runAllJobs();\n    \n//     return results.every(r => r.success)\n//       ? BackgroundFetch.BackgroundFetchResult.NewData\n//       : BackgroundFetch.BackgroundFetchResult.Failed;\n      \n//   } catch (error) {\n//     console.error('‚ùå Background batch job error:', error);\n//     return BackgroundFetch.BackgroundFetchResult.Failed;\n//   }\n// });\n\n// Export singleton instance\nexport const dailyJobsManager = DailyJobsManager.getInstance();\n"],"mappings":"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","ignoreList":[]}