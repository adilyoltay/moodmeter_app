b32d8fea0088fd790e44ac52138ea52b
_getJestObj().mock("../../services/supabase", function () {
  return {
    __esModule: true,
    default: {
      supabaseClient: {
        from: jest.fn(function () {
          return {
            select: jest.fn(function () {
              return {
                eq: jest.fn(function () {
                  return {
                    maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            upsert: jest.fn((0, _asyncToGenerator2.default)(function* () {
              return {
                data: null,
                error: null
              };
            })),
            delete: jest.fn(function () {
              return {
                eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            }),
            like: jest.fn(function () {
              return {
                delete: jest.fn(function () {
                  return {
                    eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            eq: jest.fn(function () {
              return {
                maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            })
          };
        })
      }
    }
  };
});
_getJestObj().mock("../../features/ai/services/checkinService", function () {
  return {
    __esModule: true,
    unifiedVoiceAnalysis: jest.fn((0, _asyncToGenerator2.default)(function* () {
      throw new Error('forced voice analysis failure');
    }))
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _UnifiedAIPipeline = require("../../features/ai/core/UnifiedAIPipeline");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var actualTelemetry = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
describe('System Voice - Unified Pipeline', function () {
  beforeAll(function () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.TEST_SEED_USER_ID = process.env.TEST_SEED_USER_ID || 'test-user-1';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
  });
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield _asyncStorage.default.clear();
  }));
  it('[QRsys:voice:fallback] uses heuristic fallback when voice analysis fails', (0, _asyncToGenerator2.default)(function* () {
    var _result$voice;
    var userId = process.env.TEST_SEED_USER_ID || 'test-user-1';
    var text = 'Bug√ºn biraz yorgun ve stresliyim, nefes egzersizi iyi gelebilir.';
    var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
      userId: userId,
      type: 'voice',
      content: text,
      context: {
        source: 'today'
      }
    });
    expect(result.metadata.source).toBe('fresh');
    expect(result.voice).toBeDefined();
    expect((_result$voice = result.voice) == null ? void 0 : _result$voice.suggestion).toContain('Heuristic');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,