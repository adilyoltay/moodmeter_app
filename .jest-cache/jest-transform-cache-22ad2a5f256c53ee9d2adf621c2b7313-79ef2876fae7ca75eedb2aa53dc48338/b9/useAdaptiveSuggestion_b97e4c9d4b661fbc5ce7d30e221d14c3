1c646456b44a32ef5ca480caf2d07f44
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAdaptiveSuggestion = useAdaptiveSuggestion;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _featureFlags = require("../../../constants/featureFlags");
var _aiTelemetry = require("../telemetry/aiTelemetry");
var _adaptiveSuggestionAnalytics = require("../analytics/adaptiveSuggestionAnalytics");
var _circadianTimingEngine = require("../timing/circadianTimingEngine");
var _abTestingFramework = require("../testing/abTestingFramework");
var DEFAULT_COOLDOWN_HOURS = __DEV__ ? 0.1 : 4;
var DEFAULT_SNOOZE_HOURS = __DEV__ ? 0.05 : 2;
if (__DEV__) {
  _asyncStorage.default.removeItem('adaptive_suggestion_last_a477080d-4d3f-4edc-9c31-4a1076c0967b').catch(function () {});
  console.log('üîß DEV: Auto-cleared adaptive suggestion cooldown for testing');
}
var QUIET_START_HOUR = 22;
var QUIET_END_HOUR = 8;
function useAdaptiveSuggestion() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var isQuietHours = function isQuietHours() {
    var now = new Date();
    var hour = now.getHours();
    return hour >= QUIET_START_HOUR || hour < QUIET_END_HOUR;
  };
  var buildMinimalContext = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (userId) {
      var context = {
        userId: userId,
        timestamp: Date.now(),
        currentContext: {
          userState: {
            stressLevel: 'moderate',
            activityState: 'unknown',
            energyLevel: 50
          }
        }
      };
      try {
        var threeDaysAgo = Date.now() - 3 * 24 * 60 * 60 * 1000;
        var _yield$import = yield import("../../../utils/storage"),
          StorageKeys = _yield$import.StorageKeys;
        try {
          var compulsionsKey = StorageKeys.COMPULSIONS(userId);
          var compulsionsData = yield _asyncStorage.default.getItem(compulsionsKey);
          if (compulsionsData) {
            var compulsions = JSON.parse(compulsionsData);
            var recentCompulsions = compulsions.filter(function (c) {
              return c.timestamp >= threeDaysAgo;
            });
            context.recentActivity = context.recentActivity || {};
            context.recentActivity.compulsionCount = recentCompulsions.length;
            if (recentCompulsions.length > 10) {
              context.currentContext.userState.stressLevel = 'high';
              context.currentContext.userState.energyLevel = 30;
            } else if (recentCompulsions.length > 5) {
              context.currentContext.userState.stressLevel = 'moderate';
              context.currentContext.userState.energyLevel = 50;
            } else {
              context.currentContext.userState.stressLevel = 'low';
              context.currentContext.userState.energyLevel = 70;
            }
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to get compulsions data for context:', error);
        }
        try {
          var thoughtRecordsKey = StorageKeys.THOUGHT_RECORDS(userId);
          var cbtData = yield _asyncStorage.default.getItem(thoughtRecordsKey);
          if (cbtData) {
            var records = JSON.parse(cbtData);
            var recentRecords = records.filter(function (r) {
              return r.timestamp >= threeDaysAgo;
            });
            context.recentActivity = context.recentActivity || {};
            context.recentActivity.cbtRecords = recentRecords.length;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to get CBT data for context:', error);
        }
        try {
          var moodTracker = (yield import("../../../services/moodTrackingService")).default;
          var moodEntries = yield moodTracker.getMoodEntries(userId, 3);
          context.recentActivity = context.recentActivity || {};
          context.recentActivity.moodEntries = moodEntries.length;
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to get mood data for context:', error);
        }
        try {
          var breathworkKey = StorageKeys.BREATH_SESSIONS(userId);
          var breathworkData = yield _asyncStorage.default.getItem(breathworkKey);
          if (breathworkData) {
            var sessions = JSON.parse(breathworkData);
            var recentSessions = sessions.filter(function (s) {
              return s.timestamp >= threeDaysAgo;
            });
            context.recentActivity = context.recentActivity || {};
            context.recentActivity.breathworkSessions = recentSessions.length;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to get breathwork data for context:', error);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Error building minimal context, using defaults:', error);
      }
      return context;
    });
    return function buildMinimalContext(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var buildContextAnalysisResult = function buildContextAnalysisResult(userId, minimalContext) {
    return {
      userId: userId,
      timestamp: new Date(),
      analysisId: `context_${Date.now()}`,
      environmentalFactors: [{
        factor: 'TIME_OF_DAY',
        value: new Date().getHours(),
        confidence: 0.9,
        source: 'device'
      }],
      userState: Object.assign({}, minimalContext.currentContext.userState, {
        activityState: minimalContext.currentContext.userState.activityState,
        stressLevel: minimalContext.currentContext.userState.stressLevel,
        moodIndicator: 'neutral',
        socialEngagement: 50
      }),
      riskAssessment: {
        overallRisk: minimalContext.currentContext.userState.stressLevel,
        riskFactors: [],
        protectiveFactors: [],
        interventionUrgency: minimalContext.currentContext.userState.stressLevel === 'high' ? 'medium' : 'low'
      },
      insights: {
        keyObservations: [],
        patterns: [],
        recommendations: [],
        predictedNeeds: []
      },
      privacyLevel: 'minimal',
      dataQuality: 0.8,
      sources: ['device', 'user_activity']
    };
  };
  var generateSuggestion = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (userId) {
      var _testParameters, _testParameters2, _testParameters$respe, _testParameters3, _testParameters$minim, _testParameters4;
      if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_JITAI_SYSTEM') || !_featureFlags.FEATURE_FLAGS.isEnabled('AI_ADAPTIVE_INTERVENTIONS')) {
        console.log('üö´ Adaptive suggestions disabled by feature flags');
        return {
          show: false
        };
      }
      var testParameters = null;
      var testId = null;
      try {
        var testAssignment = yield _abTestingFramework.abTestingFramework.getUserTestAssignment(userId);
        testParameters = testAssignment.parameters;
        testId = testAssignment.testId;
        if (testId && testParameters) {
          console.log(`üß™ User in A/B test: ${testId}`, testParameters);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to get A/B test assignment:', error);
      }
      var cooldownHours = ((_testParameters = testParameters) == null ? void 0 : _testParameters.cooldownHours) || DEFAULT_COOLDOWN_HOURS;
      var snoozeHours = ((_testParameters2 = testParameters) == null ? void 0 : _testParameters2.snoozeHours) || DEFAULT_SNOOZE_HOURS;
      var respectCircadianTiming = (_testParameters$respe = (_testParameters3 = testParameters) == null ? void 0 : _testParameters3.respectCircadianTiming) != null ? _testParameters$respe : true;
      var minimumTimingScore = (_testParameters$minim = (_testParameters4 = testParameters) == null ? void 0 : _testParameters4.minimumTimingScore) != null ? _testParameters$minim : 30;
      try {
        setLoading(true);
        var snoozeKey = `adaptive_suggestion_snooze_until_${userId}`;
        var snoozeUntil = yield _asyncStorage.default.getItem(snoozeKey);
        if (snoozeUntil && Date.now() < parseInt(snoozeUntil)) {
          console.log('üò¥ Adaptive suggestion snoozed');
          return {
            show: false
          };
        }
        var cooldownKey = `adaptive_suggestion_last_${userId}`;
        var lastSuggested = yield _asyncStorage.default.getItem(cooldownKey);
        if (lastSuggested) {
          var timeSinceLastSuggestion = Date.now() - parseInt(lastSuggested);
          var cooldownMs = cooldownHours * 60 * 60 * 1000;
          if (timeSinceLastSuggestion < cooldownMs) {
            var hoursLeft = Math.ceil((cooldownMs - timeSinceLastSuggestion) / (60 * 60 * 1000));
            console.log(`‚è∞ Adaptive suggestion cooldown: ${hoursLeft}h remaining (A/B test: ${cooldownHours}h)`);
            if (__DEV__) {
              console.log(`üîß DEV MODE: To clear cooldown, run in console: AsyncStorage.removeItem('${cooldownKey}')`);
            }
            return {
              show: false
            };
          }
        }
        if (isQuietHours()) {
          console.log('üåô Quiet hours - no adaptive suggestions');
          return {
            show: false
          };
        }
        var timingRecommendation = null;
        if (respectCircadianTiming) {
          try {
            timingRecommendation = yield _circadianTimingEngine.circadianTimingEngine.getTimingRecommendation(userId);
            if (timingRecommendation.score < minimumTimingScore) {
              console.log(`‚è∞ Poor timing score: ${timingRecommendation.score}/100 (min: ${minimumTimingScore}) - ${timingRecommendation.rationale}`);
              if (timingRecommendation.alternatives && timingRecommendation.alternatives.length > 0) {
                var bestAlternative = timingRecommendation.alternatives[0];
                console.log(`üí° Better timing available at ${bestAlternative.hour}:00 (score: ${bestAlternative.score})`);
              }
              return {
                show: false
              };
            }
            console.log(`‚è∞ Good timing: ${timingRecommendation.score}/100 - ${timingRecommendation.rationale}`);
          } catch (error) {
            console.warn('‚ö†Ô∏è Circadian timing check failed:', error);
          }
        } else {
          console.log('‚è∞ Circadian timing disabled by A/B test - proceeding without timing check');
        }
        var context = yield buildMinimalContext(userId);
        console.log('üìä Built minimal context for adaptive suggestion:', {
          stressLevel: context.currentContext.userState.stressLevel,
          energyLevel: context.currentContext.userState.energyLevel,
          recentActivity: context.recentActivity
        });
        var timing = null;
        var confidence = 0;
        try {
          var _timing;
          var _yield$import2 = yield import("../jitai/jitaiEngine"),
            jitaiEngine = _yield$import2.jitaiEngine;
          var jitaiContext = {
            userId: userId,
            userProfile: {
              preferredLanguage: 'tr',
              symptomSeverity: context.currentContext.userState.stressLevel === 'high' ? 7 : context.currentContext.userState.stressLevel === 'low' ? 3 : 5,
              communicationStyle: 'encouraging',
              triggerWords: [],
              avoidanceTopics: [],
              therapeuticGoals: [],
              preferredCBTTechniques: [],
              riskFactors: [],
              culturalContext: 'turkish'
            },
            currentContext: buildContextAnalysisResult(userId, context),
            interventionHistory: [],
            currentUserState: {
              isAppActive: true,
              lastInteraction: new Date(),
              recentMood: 'neutral',
              energyLevel: context.currentContext.userState.energyLevel,
              stressPattern: [context.currentContext.userState.stressLevel]
            },
            personalizationProfile: {
              preferredTimes: ['09:00', '14:00', '19:00'],
              responsiveStates: ['ACTIVE', 'RESTING'],
              effectiveCategories: ['breathwork', 'cbt'],
              culturalPreferences: {
                language: 'tr'
              },
              communicationStyle: 'encouraging'
            }
          };
          timing = yield jitaiEngine.predictOptimalTiming(jitaiContext);
          confidence = ((_timing = timing) == null || (_timing = _timing.optimalTiming) == null ? void 0 : _timing.confidence) || 0;
          console.log('üéØ JITAI timing prediction:', {
            confidence: confidence
          });
          if (confidence < 0.5) {
            console.log('üìâ JITAI confidence too low, skipping suggestion');
            return {
              show: false
            };
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è JITAI timing prediction failed:', error);
          confidence = 0.6;
        }
        var suggestion = null;
        try {
          var adaptiveInterventions = (yield import("../interventions/adaptiveInterventions")).default;
          var interventionContext = {
            userId: userId,
            userProfile: {
              preferredLanguage: 'tr',
              symptomSeverity: context.currentContext.userState.stressLevel === 'high' ? 7 : context.currentContext.userState.stressLevel === 'low' ? 3 : 5,
              communicationStyle: 'encouraging',
              triggerWords: [],
              avoidanceTopics: [],
              therapeuticGoals: [],
              preferredCBTTechniques: [],
              riskFactors: [],
              culturalContext: 'turkish'
            },
            currentContext: buildContextAnalysisResult(userId, context),
            userConfig: {
              enabled: true,
              userAutonomyLevel: 'high',
              maxInterventionsPerHour: 2,
              maxInterventionsPerDay: 6,
              respectQuietHours: true,
              quietHours: {
                start: "22:00",
                end: "08:00"
              },
              preferredDeliveryMethods: [],
              allowInAppInterruptions: true,
              allowNotifications: false,
              enableHapticFeedback: true,
              adaptToUserFeedback: true,
              learnFromEffectiveness: true,
              culturalAdaptation: true,
              crisisOverride: true,
              emergencyContacts: [],
              escalationProtocol: true
            },
            recentInterventions: [],
            recentUserActivity: {
              lastAppUsage: new Date(),
              sessionDuration: 0
            },
            deviceState: {
              batteryLevel: 1,
              isCharging: false,
              networkConnected: true,
              inFocus: true
            }
          };
          suggestion = yield adaptiveInterventions.triggerContextualIntervention(interventionContext);
          console.log('üí° Adaptive intervention generated:', suggestion);
        } catch (error) {
          console.warn('‚ö†Ô∏è Adaptive intervention failed:', error);
          suggestion = yield generateEnhancedFallbackSuggestion(userId, context);
        }
        if (__DEV__ && (!suggestion || !suggestion.show)) {
          console.log('üîß DEV: No suggestion generated, forcing one for Quality Ribbon test');
          suggestion = {
            show: true,
            id: `dev_test_${Date.now()}`,
            title: 'üéØ Debug: Quality Ribbon Test',
            content: 'Bu Development modda Quality Ribbon g√∂r√ºn√ºm√ºn√º test etmek i√ßin otomatik olu≈üturulan bir √∂nerdir.',
            category: 'mood',
            confidence: 0.85,
            priority: 'medium',
            timing: 'optimal',
            cta: {
              label: 'Teste Devam Et',
              screen: '/(tabs)/mood',
              params: {}
            }
          };
        }
        if (suggestion && suggestion.show) {
          yield _asyncStorage.default.setItem(cooldownKey, Date.now().toString());
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.ADAPTIVE_SUGGESTION_SHOWN, {
            userId: userId,
            category: suggestion.category || 'general',
            confidence: confidence,
            delivery: 'inline_card',
            source: 'today',
            stressLevel: context.currentContext.userState.stressLevel,
            energyLevel: context.currentContext.userState.energyLevel
          });
          yield _adaptiveSuggestionAnalytics.adaptiveSuggestionAnalytics.trackEvent('shown', userId, {
            show: true,
            title: suggestion.title,
            content: suggestion.content,
            category: suggestion.category,
            confidence: confidence,
            cta: suggestion.cta
          });
          if (testId) {
            var _timingRecommendation;
            yield _abTestingFramework.abTestingFramework.recordTestEvent(userId, 'suggestion_shown', {
              suggestionCategory: suggestion.category,
              timingScore: (_timingRecommendation = timingRecommendation) == null ? void 0 : _timingRecommendation.score,
              userStressLevel: context.currentContext.userState.stressLevel
            });
          }
          return {
            show: true,
            title: suggestion.title,
            content: suggestion.content,
            cta: suggestion.cta,
            confidence: confidence,
            category: suggestion.category
          };
        }
        return {
          show: false
        };
      } catch (error) {
        console.error('‚ùå Adaptive suggestion generation failed:', error);
        return {
          show: false
        };
      } finally {
        setLoading(false);
      }
    });
    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var generateFallbackSuggestion = function generateFallbackSuggestion(context) {
    var recentActivity = context.recentActivity,
      currentContext = context.currentContext;
    if (currentContext.userState.stressLevel === 'high') {
      return {
        show: true,
        title: "Nefes Al",
        content: "Stres seviyeniz y√ºksek g√∂r√ºn√ºyor. 5 dakikalƒ±k nefes egzersizi yapmak ister misiniz?",
        category: 'breathwork',
        cta: {
          screen: '/(tabs)/breathwork',
          params: {
            autoStart: true,
            protocol: 'box'
          }
        }
      };
    }
    if (!recentActivity || (recentActivity.moodEntries || 0) === 0) {
      return {
        show: true,
        title: "Nasƒ±l Hissediyorsun?",
        content: "Bug√ºn nasƒ±l hissettiƒüinizi kaydetmek ister misiniz?",
        category: 'mood',
        cta: {
          screen: '/(tabs)/mood'
        }
      };
    }
    if (((recentActivity == null ? void 0 : recentActivity.compulsionCount) || 0) > 5 && ((recentActivity == null ? void 0 : recentActivity.cbtRecords) || 0) === 0) {
      return {
        show: true,
        title: "D√º≈ü√ºnce Kaydƒ±",
        content: "Son g√ºnlerde biraz zorlanƒ±yor gibisiniz. D√º≈ü√ºncelerinizi kaydetmek yardƒ±mcƒ± olabilir.",
        category: 'cbt',
        cta: {
          screen: '/(tabs)/cbt'
        }
      };
    }
    return {
      show: false
    };
  };
  var generateEnhancedFallbackSuggestion = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (userId, context) {
      var recentActivity = context.recentActivity,
        currentContext = context.currentContext;
      var shouldTryBreathwork = currentContext.userState.stressLevel === 'high' || currentContext.userState.energyLevel < 30 || ((recentActivity == null ? void 0 : recentActivity.compulsionCount) || 0) > 3;
      if (shouldTryBreathwork) {
        try {
          var _yield$import3 = yield import("../services/breathworkSuggestionService"),
            BreathworkSuggestionService = _yield$import3.BreathworkSuggestionService;
          var moodTracker = (yield import("../../../services/moodTrackingService")).default;
          var moodScore = undefined;
          try {
            var lastMood = yield moodTracker.getLastMoodEntry(userId);
            moodScore = lastMood == null ? void 0 : lastMood.mood_score;
          } catch (error) {
            console.warn('‚ö†Ô∏è Failed to get mood for breathwork context:', error);
          }
          var breathworkContext = {
            userId: userId,
            currentTime: new Date(),
            moodScore: moodScore,
            recentCompulsions: (recentActivity == null ? void 0 : recentActivity.compulsionCount) || 0,
            anxietyLevel: moodScore ? Math.max(1, Math.min(10, Math.round(11 - moodScore / 10))) : currentContext.userState.stressLevel === 'high' ? 8 : currentContext.userState.stressLevel === 'low' ? 3 : 5
          };
          var breathworkService = BreathworkSuggestionService.getInstance();
          var breathworkSuggestion = yield breathworkService.generateSuggestion(breathworkContext);
          if (breathworkSuggestion) {
            var _breathworkSuggestion, _breathworkSuggestion2;
            var protocol = ((_breathworkSuggestion = breathworkSuggestion.protocol) == null ? void 0 : _breathworkSuggestion.name) || 'box';
            var anxietyLevel = breathworkContext.anxietyLevel;
            return {
              show: true,
              id: `breathwork_${Date.now()}`,
              title: ((_breathworkSuggestion2 = breathworkSuggestion.trigger) == null ? void 0 : _breathworkSuggestion2.reason) || "Nefes Al",
              content: breathworkSuggestion.protocol.description || `${protocol === '4-7-8' ? '4-7-8' : 'Kutu'} nefes tekniƒüi ile ${Math.ceil(breathworkSuggestion.protocol.duration / 60) || 5} dakika nefes egzersizi yaparak rahatlamaya ne dersiniz?`,
              category: 'breathwork',
              confidence: 0.8,
              priority: breathworkSuggestion.urgency === 'high' ? 'urgent' : breathworkSuggestion.urgency === 'low' ? 'low' : 'medium',
              timing: 'optimal',
              cta: {
                label: 'Nefes Egzersiziyle Ba≈üla',
                screen: '/(tabs)/breathwork',
                params: {
                  protocol: anxietyLevel >= 7 ? '4-7-8' : 'box',
                  autoStart: 'true',
                  source: 'adaptive_suggestion'
                }
              }
            };
          }
          console.log('üå¨Ô∏è Breathwork service returned no suggestion');
        } catch (error) {
          console.warn('‚ö†Ô∏è Enhanced breathwork suggestion failed:', error);
        }
      }
      return generateFallbackSuggestion(context);
    });
    return function generateEnhancedFallbackSuggestion(_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }();
  var generateSuggestionFromPipeline = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (userId, result) {
      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'today';
      if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_JITAI_SYSTEM') || !_featureFlags.FEATURE_FLAGS.isEnabled('AI_ADAPTIVE_INTERVENTIONS')) {
        console.log('üö´ Pipeline-based adaptive suggestions disabled by flags');
        return {
          show: false
        };
      }
      try {
        var _testParameters5, _testParameters$respe2, _testParameters6, _testParameters$minim2, _testParameters7;
        var testParameters = null;
        var testId = null;
        try {
          var testAssignment = yield _abTestingFramework.abTestingFramework.getUserTestAssignment(userId);
          testParameters = testAssignment.parameters;
          testId = testAssignment.testId;
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to get A/B test assignment:', error);
        }
        var cooldownHours = ((_testParameters5 = testParameters) == null ? void 0 : _testParameters5.cooldownHours) || DEFAULT_COOLDOWN_HOURS;
        var respectCircadianTiming = (_testParameters$respe2 = (_testParameters6 = testParameters) == null ? void 0 : _testParameters6.respectCircadianTiming) != null ? _testParameters$respe2 : true;
        var minimumTimingScore = (_testParameters$minim2 = (_testParameters7 = testParameters) == null ? void 0 : _testParameters7.minimumTimingScore) != null ? _testParameters$minim2 : 30;
        var snoozeKey = `adaptive_suggestion_snooze_until_${userId}`;
        var snoozeUntil = yield _asyncStorage.default.getItem(snoozeKey);
        if (snoozeUntil && Date.now() < parseInt(snoozeUntil)) {
          return {
            show: false
          };
        }
        var cooldownKey = `adaptive_suggestion_last_${userId}`;
        var lastSuggested = yield _asyncStorage.default.getItem(cooldownKey);
        if (lastSuggested) {
          var timeSinceLastSuggestion = Date.now() - parseInt(lastSuggested);
          var cooldownMs = cooldownHours * 60 * 60 * 1000;
          if (timeSinceLastSuggestion < cooldownMs) {
            return {
              show: false
            };
          }
        }
        if (isQuietHours()) {
          return {
            show: false
          };
        }
        if (respectCircadianTiming) {
          try {
            var timingRecommendation = yield _circadianTimingEngine.circadianTimingEngine.getTimingRecommendation(userId);
            if (timingRecommendation.score < minimumTimingScore) {
              console.log(`‚è∞ Poor timing score for ${source}: ${timingRecommendation.score}/${minimumTimingScore}`);
              return {
                show: false
              };
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è Circadian timing check failed:', error);
          }
        }
        var weeklyDelta = 0;
        var volatility = 0;
        var baselines = {};
        var sampleSize = 0;
        var bestTimes = [];
        try {
          if (result.analytics && source !== 'today' && result.analytics[source]) {
            var analytics = result.analytics[source];
            weeklyDelta = analytics.weeklyDelta || 0;
            volatility = analytics.volatility || 0;
            baselines = analytics.baselines || {};
            sampleSize = analytics.sampleSize || 0;
            bestTimes = analytics.bestTimes || [];
          } else if (Array.isArray(result.patterns)) {
            var pattern = result.patterns.find(function (p) {
              return p.category === source;
            });
            if (pattern != null && pattern.dashboardMetrics) {
              weeklyDelta = pattern.dashboardMetrics.weeklyDelta || 0;
              volatility = pattern.dashboardMetrics.volatility || 0;
              baselines = pattern.dashboardMetrics.baselines || {};
              sampleSize = pattern.dashboardMetrics.sampleSize || 0;
            }
          } else {
            console.log(`‚ö° Analytics absent for ${source}, using enhanced fallbacks`);
            if (source === 'cbt') {
              var _result$insights, _result$insights2;
              var therapeuticCount = ((_result$insights = result.insights) == null || (_result$insights = _result$insights.therapeutic) == null ? void 0 : _result$insights.length) || 0;
              var progressCount = ((_result$insights2 = result.insights) == null || (_result$insights2 = _result$insights2.progress) == null ? void 0 : _result$insights2.length) || 0;
              var totalInsights = therapeuticCount + progressCount;
              if (totalInsights > 0) {
                var _result$metadata;
                sampleSize = Math.max(totalInsights, (_result$metadata = result.metadata) != null && _result$metadata.processingTime ? Math.min(10, Math.floor(result.metadata.processingTime / 800)) : 0);
                var patternDiversity = Array.isArray(result.patterns) ? result.patterns.length : 0;
                volatility = therapeuticCount > 5 ? 30 : therapeuticCount > 3 ? 20 : therapeuticCount > 1 ? 15 : 10;
                var therapeuticRatio = totalInsights > 0 ? therapeuticCount / totalInsights : 0;
                weeklyDelta = therapeuticRatio > 0.7 ? 8 : therapeuticRatio > 0.4 ? 5 : progressCount > 3 ? 3 : 0;
                baselines.cbt = progressCount >= 3 ? 7 : therapeuticCount >= 2 ? 5 : 3;
                if (patternDiversity > 0) {
                  volatility = Math.min(volatility + patternDiversity * 2, 35);
                  weeklyDelta = Math.max(weeklyDelta - 1, 0);
                }
              } else {
                var _result$metadata2;
                var processingTime = ((_result$metadata2 = result.metadata) == null ? void 0 : _result$metadata2.processingTime) || 0;
                if (processingTime > 2000) {
                  sampleSize = 1;
                  volatility = 5;
                  weeklyDelta = -2;
                  baselines.cbt = 4;
                } else {
                  sampleSize = 0;
                  volatility = 0;
                  weeklyDelta = 0;
                  baselines.cbt = 3;
                }
              }
              console.log(`üß† CBT enhanced fallback: insights=${totalInsights}, sampleSize=${sampleSize}, volatility=${volatility}, weeklyDelta=${weeklyDelta}`);
            } else if (source === 'tracking') {
              if (Array.isArray(result.patterns) && result.patterns.length > 0) {
                var _result$metadata3;
                var temporalPatterns = result.patterns.filter(function (p) {
                  var _p$type;
                  return p.temporal === true || ((_p$type = p.type) == null ? void 0 : _p$type.includes('temporal'));
                });
                var allPatterns = result.patterns;
                var increasingPatterns = allPatterns.filter(function (p) {
                  var _p$description, _p$description2, _p$description3;
                  return p.trend === 'increasing' || ((_p$description = p.description) == null || (_p$description = _p$description.toLowerCase()) == null ? void 0 : _p$description.includes('increase')) || ((_p$description2 = p.description) == null || (_p$description2 = _p$description2.toLowerCase()) == null ? void 0 : _p$description2.includes('artƒ±')) || ((_p$description3 = p.description) == null || (_p$description3 = _p$description3.toLowerCase()) == null ? void 0 : _p$description3.includes('y√ºksel')) || p.severity === 'high' && p.confidence > 0.7;
                }).length;
                var decreasingPatterns = allPatterns.filter(function (p) {
                  var _p$description4, _p$description5, _p$description6;
                  return p.trend === 'decreasing' || ((_p$description4 = p.description) == null || (_p$description4 = _p$description4.toLowerCase()) == null ? void 0 : _p$description4.includes('azal')) || ((_p$description5 = p.description) == null || (_p$description5 = _p$description5.toLowerCase()) == null ? void 0 : _p$description5.includes('d√º≈ü')) || ((_p$description6 = p.description) == null || (_p$description6 = _p$description6.toLowerCase()) == null ? void 0 : _p$description6.includes('improve')) || p.severity === 'low' && p.confidence > 0.7;
                }).length;
                var stablePatterns = allPatterns.length - increasingPatterns - decreasingPatterns;
                var trendStrength = increasingPatterns * 12 - decreasingPatterns * 12 + stablePatterns * 0;
                weeklyDelta = Math.max(-25, Math.min(25, trendStrength));
                var patternSampleSize = temporalPatterns.length * 2;
                var metadataSampleSize = (_result$metadata3 = result.metadata) != null && _result$metadata3.processingTime ? Math.min(10, Math.floor(result.metadata.processingTime / 400)) : 0;
                sampleSize = Math.max(patternSampleSize, metadataSampleSize, allPatterns.length);
                var patternConflict = Math.abs(increasingPatterns - decreasingPatterns);
                var patternConsistency = stablePatterns / allPatterns.length;
                volatility = patternConflict * 6 + (patternConsistency > 0.6 ? 0 : 10);
                if (decreasingPatterns > increasingPatterns && decreasingPatterns >= 2) {
                  baselines.compulsions = 4;
                } else if (increasingPatterns > decreasingPatterns && increasingPatterns >= 2) {
                  baselines.compulsions = 8;
                } else {
                  baselines.compulsions = 6;
                }
                console.log(`üìä Tracking enhanced fallback: patterns=${allPatterns.length}, inc=${increasingPatterns}, dec=${decreasingPatterns}, stable=${stablePatterns}, weeklyDelta=${weeklyDelta}`);
              } else {
                var _result$metadata4;
                var _processingTime = ((_result$metadata4 = result.metadata) == null ? void 0 : _result$metadata4.processingTime) || 0;
                var contextSize = 0;
                if (_processingTime > 3000 || contextSize > 20) {
                  sampleSize = Math.min(8, Math.floor(_processingTime / 500) + Math.floor(contextSize / 5));
                  weeklyDelta = -2;
                  volatility = 8;
                  baselines.compulsions = 5;
                } else if (_processingTime > 1000) {
                  sampleSize = 3;
                  weeklyDelta = 0;
                  volatility = 5;
                  baselines.compulsions = 6;
                } else {
                  sampleSize = 1;
                  weeklyDelta = 0;
                  volatility = 3;
                  baselines.compulsions = 7;
                }
                console.log(`üìä Tracking metadata fallback: processingTime=${_processingTime}, contextSize=${contextSize}, sampleSize=${sampleSize}`);
              }
            }
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to extract metrics from pipeline result:', error);
        }
        var suggestion = null;
        switch (source) {
          case 'mood':
            suggestion = generateMoodSuggestion(weeklyDelta, volatility, baselines, sampleSize);
            break;
          case 'cbt':
            suggestion = generateCBTSuggestion(weeklyDelta, volatility, baselines, sampleSize);
            break;
          case 'tracking':
            suggestion = generateTrackingSuggestion(weeklyDelta, volatility, baselines, sampleSize);
            break;
          default:
            return {
              show: false
            };
        }
        if (!suggestion || !suggestion.show) {
          return {
            show: false
          };
        }
        yield _asyncStorage.default.setItem(cooldownKey, Date.now().toString());
        var confidence = 0.7;
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.ADAPTIVE_SUGGESTION_SHOWN, {
          userId: userId,
          category: suggestion.category,
          confidence: confidence,
          delivery: 'cross_module_card',
          source: source || 'today',
          hasWeeklyDelta: weeklyDelta !== 0,
          hasVolatility: volatility > 0,
          sampleSize: sampleSize
        });
        yield _adaptiveSuggestionAnalytics.adaptiveSuggestionAnalytics.trackEvent('shown', userId, suggestion);
        if (testId) {
          yield _abTestingFramework.abTestingFramework.recordTestEvent(userId, 'suggestion_shown', {
            suggestionCategory: suggestion.category
          });
        }
        return {
          show: true,
          title: suggestion.title,
          content: suggestion.content,
          cta: suggestion.cta,
          confidence: confidence,
          category: suggestion.category
        };
      } catch (error) {
        console.error(`‚ùå Pipeline-based suggestion generation failed for ${source}:`, error);
        return {
          show: false
        };
      }
    });
    return function (_x5, _x6) {
      return _ref4.apply(this, arguments);
    };
  }(), []);
  var generateMoodSuggestion = function generateMoodSuggestion(weeklyDelta, volatility, baselines, sampleSize) {
    if (weeklyDelta > 10 && sampleSize >= 5) {
      return {
        show: true,
        title: "G√ºzel ƒ∞vme!",
        content: "Mood'un bu hafta iyile≈ümi≈ü. Bunu bir CBT kaydƒ± ile peki≈ütirmek ister misin?",
        category: 'cbt',
        cta: {
          screen: '/(tabs)/cbt'
        }
      };
    }
    if (baselines.mood && baselines.mood < 40 || volatility > 15) {
      return {
        show: true,
        title: "Kƒ±sa Bir Mola",
        content: "Kendini zorlayƒ±cƒ± hissediyorsun. 5 dakikalƒ±k nefes egzersizi rahatlatabilir.",
        category: 'breathwork',
        cta: {
          screen: '/(tabs)/breathwork',
          params: {
            autoStart: true,
            protocol: 'box'
          }
        }
      };
    }
    if (sampleSize < 3) {
      return {
        show: true,
        title: "Nasƒ±l Hissediyorsun?",
        content: "Son g√ºnlerde mood kaydƒ± yok. ≈ûimdi bir kayƒ±t eklemek ister misin?",
        category: 'mood',
        cta: {
          screen: '/(tabs)/mood'
        }
      };
    }
    return {
      show: false
    };
  };
  var generateCBTSuggestion = function generateCBTSuggestion(weeklyDelta, volatility, baselines, sampleSize) {
    if (weeklyDelta > 8 && sampleSize >= 3) {
      return {
        show: true,
        title: "ƒ∞lerleme Kaydƒ±",
        content: "CBT kayƒ±tlarƒ±n √ßok tutarlƒ±! Mood tracking ile desteklemeye ne dersin?",
        category: 'mood',
        cta: {
          screen: '/(tabs)/mood'
        }
      };
    }
    if (volatility > 20) {
      return {
        show: true,
        title: "√ñnce Sakinle≈ü",
        content: "D√º≈ü√ºnceler karma≈üƒ±k g√∂r√ºn√ºyor. √ñnce nefes egzersizi ile sakinle≈ümeye ne dersin?",
        category: 'breathwork',
        cta: {
          screen: '/(tabs)/breathwork',
          params: {
            autoStart: true,
            protocol: '4-7-8'
          }
        }
      };
    }
    if (sampleSize < 2) {
      return {
        show: true,
        title: "D√º≈ü√ºnce Analizi",
        content: "D√º≈ü√ºncelerini analiz etmek i√ßin g√ºzel bir zaman. Ba≈ülamaya ne dersin?",
        category: 'cbt',
        cta: {
          screen: '/(tabs)/cbt'
        }
      };
    }
    return {
      show: false
    };
  };
  var generateTrackingSuggestion = function generateTrackingSuggestion(weeklyDelta, volatility, baselines, sampleSize) {
    if (weeklyDelta > 15 || baselines.compulsions && baselines.compulsions > 8) {
      return {
        show: true,
        title: "Stresi Azalt",
        content: "Komp√ºlsiyon sayƒ±n artmƒ±≈ü. Hemen nefes egzersizi ile stresi azaltmaya ne dersin?",
        category: 'breathwork',
        cta: {
          screen: '/(tabs)/breathwork',
          params: {
            autoStart: true,
            protocol: '4-7-8'
          }
        }
      };
    }
    if (weeklyDelta < -10 && sampleSize >= 5) {
      return {
        show: true,
        title: "Ba≈üarƒ±nƒ± Analiz Et",
        content: "Diren√ß oranƒ±n harika! Bu pattern'i CBT kaydƒ± ile analiz etmek ister misin?",
        category: 'cbt',
        cta: {
          screen: '/(tabs)/cbt'
        }
      };
    }
    if (sampleSize >= 7) {
      return {
        show: true,
        title: "Mood Korelasyonu",
        content: "Takip kayƒ±tlarƒ±n √ßok d√ºzenli! Mood ile korelasyonunu g√∂rmek ister misin?",
        category: 'mood',
        cta: {
          screen: '/(tabs)/mood'
        }
      };
    }
    return {
      show: false
    };
  };
  var trackSuggestionClick = (0, _react.useCallback)(function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (userId, suggestion, sessionDuration) {
      try {
        yield _adaptiveSuggestionAnalytics.adaptiveSuggestionAnalytics.trackEvent('clicked', userId, suggestion, {
          sessionDuration: sessionDuration
        });
        var currentHour = new Date().getHours();
        yield _circadianTimingEngine.circadianTimingEngine.learnFromInteraction(userId, currentHour, true, suggestion.category === 'breathwork' ? 'high' : 'moderate');
        try {
          yield _abTestingFramework.abTestingFramework.recordTestEvent(userId, 'suggestion_clicked', {
            suggestionCategory: suggestion.category,
            sessionDuration: sessionDuration
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to record A/B test click event:', error);
        }
        console.log('üìä Tracked adaptive suggestion click for analytics, timing, and A/B testing');
      } catch (error) {
        console.error('‚ùå Failed to track suggestion click:', error);
      }
    });
    return function (_x7, _x8, _x9) {
      return _ref5.apply(this, arguments);
    };
  }(), []);
  var trackSuggestionDismissal = (0, _react.useCallback)(function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (userId, suggestion, snoozeHours) {
      try {
        yield _adaptiveSuggestionAnalytics.adaptiveSuggestionAnalytics.trackEvent('dismissed', userId, suggestion, {
          snoozeHours: snoozeHours
        });
        var currentHour = new Date().getHours();
        yield _circadianTimingEngine.circadianTimingEngine.learnFromInteraction(userId, currentHour, false, suggestion.category === 'breathwork' ? 'high' : 'moderate');
        try {
          yield _abTestingFramework.abTestingFramework.recordTestEvent(userId, 'suggestion_dismissed', {
            suggestionCategory: suggestion.category,
            snoozeHours: snoozeHours
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to record A/B test dismissal event:', error);
        }
        console.log('üìä Tracked adaptive suggestion dismissal for analytics, timing, and A/B testing');
      } catch (error) {
        console.error('‚ùå Failed to track suggestion dismissal:', error);
      }
    });
    return function (_x0, _x1, _x10) {
      return _ref6.apply(this, arguments);
    };
  }(), []);
  var snoozeSuggestion = (0, _react.useCallback)(function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* (userId, hours) {
      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';
      var snoozeHours = hours;
      if (!snoozeHours) {
        try {
          var _testAssignment$param;
          var testAssignment = yield _abTestingFramework.abTestingFramework.getUserTestAssignment(userId);
          snoozeHours = ((_testAssignment$param = testAssignment.parameters) == null ? void 0 : _testAssignment$param.snoozeHours) || DEFAULT_SNOOZE_HOURS;
        } catch (error) {
          snoozeHours = DEFAULT_SNOOZE_HOURS;
        }
      }
      try {
        var snoozeKey = `adaptive_suggestion_snooze_until_${userId}`;
        var snoozeUntil = Date.now() + snoozeHours * 60 * 60 * 1000;
        yield _asyncStorage.default.setItem(snoozeKey, snoozeUntil.toString());
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.ADAPTIVE_SUGGESTION_DISMISSED, {
          userId: userId,
          source: source,
          snoozeHours: snoozeHours,
          category: 'dismissed'
        });
        console.log(`üò¥ Adaptive suggestion snoozed for ${snoozeHours} hours (A/B test controlled)`);
      } catch (error) {
        console.error('‚ùå Failed to snooze adaptive suggestion:', error);
      }
    });
    return function (_x11, _x12) {
      return _ref7.apply(this, arguments);
    };
  }(), []);
  return {
    generateSuggestion: generateSuggestion,
    generateSuggestionFromPipeline: generateSuggestionFromPipeline,
    snoozeSuggestion: snoozeSuggestion,
    trackSuggestionClick: trackSuggestionClick,
    trackSuggestionDismissal: trackSuggestionDismissal,
    loading: loading,
    isQuietHours: isQuietHours
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,