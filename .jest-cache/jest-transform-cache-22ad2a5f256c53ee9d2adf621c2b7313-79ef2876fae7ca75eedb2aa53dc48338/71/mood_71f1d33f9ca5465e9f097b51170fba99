d2414b70bc25910fd3e3ccf0843ec42b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MoodScreen;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _vectorIcons = require("@expo/vector-icons");
var _expoRouter = require("expo-router");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _ScreenLayout = _interopRequireDefault(require("../../components/layout/ScreenLayout"));
var _Toast = require("../../components/ui/Toast");
var _FAB = _interopRequireDefault(require("../../components/ui/FAB"));
var _MoodQuickEntry = require("../../components/mood/MoodQuickEntry");
var _UserCentricMoodDashboard = _interopRequireDefault(require("../../components/ui/UserCentricMoodDashboard"));
var _SupabaseAuthContext = require("../../contexts/SupabaseAuthContext");
var _useTranslation2 = require("../../hooks/useTranslation");
var _supabase = _interopRequireDefault(require("../../services/supabase"));
var _offlineSync = require("../../services/offlineSync");
var _moodTrackingService = _interopRequireDefault(require("../../services/moodTrackingService"));
var _moodPatternAnalysisService = require("../../features/ai/services/moodPatternAnalysisService");
var _UnifiedAIPipeline = require("../../features/ai/core/UnifiedAIPipeline");
var _smartMoodJournalingService = require("../../features/ai/services/smartMoodJournalingService");
var _unifiedGamificationService = require("../../features/ai/services/unifiedGamificationService");
var _gamificationStore = require("../../store/gamificationStore");
var _featureFlags = require("../../constants/featureFlags");
var _privacy = require("../../utils/privacy");
var _secureDataService = require("../../services/encryption/secureDataService");
var _aiTelemetry = require("../../features/ai/telemetry/aiTelemetry");
var _useAdaptiveSuggestion = require("../../features/ai/hooks/useAdaptiveSuggestion");
var _AdaptiveSuggestionCard = _interopRequireDefault(require("../../components/ui/AdaptiveSuggestionCard"));
var _insightRegistry = require("../../features/ai/insights/insightRegistry");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width;
function MoodScreen() {
  var router = (0, _expoRouter.useRouter)();
  var params = (0, _expoRouter.useLocalSearchParams)();
  var _useAuth = (0, _SupabaseAuthContext.useAuth)(),
    user = _useAuth.user;
  var _useTranslation = (0, _useTranslation2.useTranslation)(),
    t = _useTranslation.t;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    moodEntries = _useState2[0],
    setMoodEntries = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    refreshing = _useState6[0],
    setRefreshing = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showQuickEntry = _useState8[0],
    setShowQuickEntry = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    editingEntry = _useState0[0],
    setEditingEntry = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showMoodDashboard = _useState10[0],
    setShowMoodDashboard = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    showToast = _useState12[0],
    setShowToast = _useState12[1];
  var _useState13 = (0, _react.useState)(''),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    toastMessage = _useState14[0],
    setToastMessage = _useState14[1];
  var _useState15 = (0, _react.useState)('week'),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    selectedTimeRange = _useState16[0],
    setSelectedTimeRange = _useState16[1];
  var _useState17 = (0, _react.useState)(5),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    displayLimit = _useState18[0],
    setDisplayLimit = _useState18[1];
  var _useState19 = (0, _react.useState)([]),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    moodPatterns = _useState20[0],
    setMoodPatterns = _useState20[1];
  var _useState21 = (0, _react.useState)(null),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    predictiveInsights = _useState22[0],
    setPredictiveInsights = _useState22[1];
  var _useState23 = (0, _react.useState)(null),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    adaptiveSuggestion = _useState24[0],
    setAdaptiveSuggestion = _useState24[1];
  var _useState25 = (0, _react.useState)(null),
    _useState26 = (0, _slicedToArray2.default)(_useState25, 2),
    adaptiveMeta = _useState26[0],
    setAdaptiveMeta = _useState26[1];
  var _useAdaptiveSuggestio = (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)(),
    generateSuggestionFromPipeline = _useAdaptiveSuggestio.generateSuggestionFromPipeline,
    trackSuggestionClick = _useAdaptiveSuggestio.trackSuggestionClick,
    trackSuggestionDismissal = _useAdaptiveSuggestio.trackSuggestionDismissal,
    snoozeSuggestion = _useAdaptiveSuggestio.snoozeSuggestion;
  (0, _react.useEffect)(function () {
    if (params.prefill === 'true' && !showQuickEntry) {
      console.log('üìù Opening mood form with pre-filled data:', params);
      setShowQuickEntry(true);
    }
  }, [params.prefill]);
  (0, _native.useFocusEffect)(_react.default.useCallback(function () {
    if (user != null && user.id) {
      console.log('üîÑ Mood tab focused, refreshing mood entries...');
      loadMoodEntries();
    }
  }, [user == null ? void 0 : user.id, selectedTimeRange]));
  (0, _react.useEffect)(function () {
    if (user != null && user.id) {
      loadMoodEntries();
    }
  }, [user == null ? void 0 : user.id, selectedTimeRange]);
  (0, _react.useEffect)(function () {
    if (user != null && user.id && moodEntries.length >= 3) {
      analyzeMoodPatterns();
    }
  }, [moodEntries, user == null ? void 0 : user.id]);
  var loadMoodAIWithUnifiedPipeline = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (entries) {
      console.log(`üîç Mood Analytics Debug: entries.length=${entries.length}, minRequired=3, user=${!!(user != null && user.id)}`);
      if (!(user != null && user.id) || !_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_PIPELINE') || entries.length < 3) {
        console.log('‚ö†Ô∏è UnifiedAIPipeline for Mood disabled or insufficient data. Falling back.');
        return;
      }
      console.log('üîÑ Force invalidating cache to get fresh mood analytics...');
      try {
        yield _UnifiedAIPipeline.unifiedPipeline.triggerInvalidation('manual_refresh', user.id);
        console.log('‚úÖ Cache invalidated - will get fresh analytics');
      } catch (invalidationError) {
        console.warn('‚ö†Ô∏è Cache invalidation failed:', invalidationError);
      }
      try {
        var _result$metadata, _result$metadata2, _result$analytics2, _result$insights, _result$insights3, _result$insights4, _result$metadata3;
        console.log('üöÄ Starting UnifiedAIPipeline mood analysis...');
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_REQUESTED, {
          source: 'mood_screen',
          dataType: 'mood_patterns',
          entriesCount: entries.length
        }, user.id);
        var sanitized = entries.slice(-50).map(function (m) {
          return Object.assign({}, m, {
            notes: m.notes ? (0, _privacy.sanitizePII)(m.notes) : m.notes
          });
        });
        var auditPayload = sanitized;
        try {
          var encrypted = yield _secureDataService.secureDataService.encryptSensitiveData({
            moods: sanitized,
            dataType: 'mood_patterns'
          });
          auditPayload = encrypted;
        } catch (encryptionError) {
          console.warn('‚ö†Ô∏è Encryption failed, using sanitized data:', encryptionError);
        }
        var result = yield _UnifiedAIPipeline.unifiedPipeline.process({
          userId: user.id,
          type: 'data',
          content: {
            moods: sanitized
          },
          context: {
            source: 'mood',
            timestamp: Date.now(),
            metadata: {
              dataType: 'mood_patterns',
              privacy: {
                piiSanitized: true,
                encryptionLevel: 'sanitized_plaintext',
                dataEncrypted: !!auditPayload
              }
            }
          }
        });
        console.log('üéØ UnifiedAIPipeline mood analysis completed:', result);
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_COMPLETED, {
          source: 'mood_screen',
          cacheHit: ((_result$metadata = result.metadata) == null ? void 0 : _result$metadata.source) === 'cache',
          moduleCount: 1,
          dataPoints: sanitized.length,
          processingTime: ((_result$metadata2 = result.metadata) == null ? void 0 : _result$metadata2.processingTime) || 0
        }, user.id);
        try {
          var suggestion = yield generateSuggestionFromPipeline(user.id, result, 'mood');
          if (suggestion.show) {
            setAdaptiveSuggestion(suggestion);
            try {
              var registryItems = (0, _insightRegistry.mapUnifiedResultToRegistryItems)(result, 'mood', {
                trigger: 'mood_analysis',
                baseCategory: 'mood'
              });
              var qualityMeta = (0, _insightRegistry.extractUIQualityMeta)(registryItems, 'suggestion');
              setAdaptiveMeta(qualityMeta);
              console.log('üìä Quality metadata for mood suggestion:', qualityMeta);
            } catch (metaError) {
              console.warn('‚ö†Ô∏è Quality metadata generation failed:', metaError);
              setAdaptiveMeta(null);
            }
            console.log('‚ú® Mood adaptive suggestion generated:', suggestion.title);
          } else {
            setAdaptiveSuggestion(null);
            setAdaptiveMeta(null);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Adaptive suggestion generation failed (non-blocking):', error);
          setAdaptiveSuggestion(null);
          setAdaptiveMeta(null);
        }
        if (result.patterns) {
          var _result$analytics;
          var normalizedPatterns = Array.isArray(result.patterns) ? result.patterns : result.patterns.temporal || [];
          var mappedPatterns = normalizedPatterns.map(function (pattern) {
            var dashboardMetrics = pattern.dashboardMetrics || {};
            return {
              type: pattern.type || 'temporal',
              title: pattern.title || pattern.description || 'Mood Pattern',
              description: pattern.description || pattern.pattern || '',
              confidence: pattern.confidence || 0.7,
              severity: pattern.severity || 'medium',
              actionable: pattern.actionable || true,
              suggestion: pattern.suggestion || 'Mood takibine devam et',
              source: 'unified_pipeline',
              data: Object.assign({}, pattern.data, {
                weeklyDelta: dashboardMetrics.weeklyDelta,
                currentWeekAvg: dashboardMetrics.currentWeekAvg,
                previousWeekAvg: dashboardMetrics.previousWeekAvg,
                weeklyTrend: dashboardMetrics.trend,
                meaCorrelations: {
                  moodEnergy: dashboardMetrics.moodEnergyCorrelation,
                  moodAnxiety: dashboardMetrics.moodAnxietyCorrelation,
                  energyAnxiety: dashboardMetrics.energyAnxietyCorrelation
                },
                emotionalProfile: dashboardMetrics.emotionalProfile,
                averages: {
                  mood: dashboardMetrics.averageMood,
                  energy: dashboardMetrics.averageEnergy,
                  anxiety: dashboardMetrics.averageAnxiety
                },
                dailyPattern: dashboardMetrics.dayName ? {
                  dayOfWeek: dashboardMetrics.dayOfWeek,
                  dayName: dashboardMetrics.dayName,
                  significance: dashboardMetrics.significance,
                  sampleSize: dashboardMetrics.sampleSize
                } : undefined,
                dataPoints: dashboardMetrics.dataPoints,
                analyticsReady: true
              })
            };
          });
          if ((_result$analytics = result.analytics) != null && _result$analytics.mood) {
            var _analytics$profile, _analytics$profile2, _analytics$profile3, _analytics$profile4, _analytics$volatility, _analytics$bestTimes, _analytics$bestTimes2, _analytics$profile5;
            var analytics = result.analytics.mood;
            var clinicalPattern = {
              type: 'clinical_profile',
              title: `${(_analytics$profile = analytics.profile) != null && _analytics$profile.type ? analytics.profile.type.charAt(0).toUpperCase() + analytics.profile.type.slice(1) : 'Clinical'} Profil`,
              description: ((_analytics$profile2 = analytics.profile) == null || (_analytics$profile2 = _analytics$profile2.rationale) == null ? void 0 : _analytics$profile2.join(', ')) || 'Clinical mood profile analizi',
              confidence: analytics.confidence || 0.8,
              severity: ((_analytics$profile3 = analytics.profile) == null ? void 0 : _analytics$profile3.type) === 'stressed' || ((_analytics$profile4 = analytics.profile) == null ? void 0 : _analytics$profile4.type) === 'fatigued' ? 'high' : 'medium',
              actionable: true,
              suggestion: `Volatilite: ${(_analytics$volatility = analytics.volatility) == null ? void 0 : _analytics$volatility.toFixed(1)}, En iyi zaman: ${((_analytics$bestTimes = analytics.bestTimes) == null ? void 0 : _analytics$bestTimes.dayOfWeek) || 'belirsiz'} ${((_analytics$bestTimes2 = analytics.bestTimes) == null ? void 0 : _analytics$bestTimes2.timeOfDay) || ''}`,
              source: 'clinical_analytics',
              data: {
                profileType: (_analytics$profile5 = analytics.profile) == null ? void 0 : _analytics$profile5.type,
                confidence: analytics.confidence,
                weeklyDelta: analytics.weeklyDelta,
                volatility: analytics.volatility,
                baselines: analytics.baselines,
                correlations: analytics.correlations,
                bestTimes: analytics.bestTimes,
                sampleSize: analytics.sampleSize,
                dataQuality: analytics.dataQuality,
                analyticsReady: true
              }
            };
            mappedPatterns = [clinicalPattern].concat((0, _toConsumableArray2.default)(mappedPatterns));
            console.log('üìä Clinical analytics added to patterns:', clinicalPattern.title);
          }
          console.log('üéØ Enhanced mood patterns with dashboard metrics:', mappedPatterns);
          setMoodPatterns(mappedPatterns);
          var enhancedMetricsCount = mappedPatterns.filter(function (p) {
            return p.data.analyticsReady;
          }).length;
          if (enhancedMetricsCount > 0) {
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
              source: 'mood_screen_enhanced',
              enhancedPatternsCount: enhancedMetricsCount,
              dashboardMetricsTypes: mappedPatterns.map(function (p) {
                return p.type;
              }).filter(function (type, index, arr) {
                return arr.indexOf(type) === index;
              }),
              meaAnalysisAvailable: mappedPatterns.some(function (p) {
                return p.data.meaCorrelations;
              }),
              weeklyDeltaAvailable: mappedPatterns.some(function (p) {
                return p.data.weeklyDelta !== undefined;
              })
            }, user.id);
          }
        }
        if ((_result$analytics2 = result.analytics) != null && _result$analytics2.mood) {
          var _analytics$profile6, _analytics$profile7, _analytics$profile8, _analytics$bestTimes3, _analytics$bestTimes4, _analytics$profile9, _analytics$bestTimes5, _analytics$bestTimes6;
          var _analytics = result.analytics.mood;
          console.log('üéØ Processing enhanced mood analytics:', _analytics);
          var enhancedInsight = {
            riskLevel: _analytics.baselines.mood < 30 ? 'high' : _analytics.baselines.mood < 50 ? 'medium' : 'low',
            moodTrend: _analytics.weeklyDelta,
            averageRecentMood: Math.round(_analytics.baselines.mood),
            volatility: _analytics.volatility,
            earlyWarning: {
              triggered: _analytics.baselines.mood < 30 || _analytics.weeklyDelta < -10 || _analytics.volatility > 15 || ((_analytics$profile6 = _analytics.profile) == null ? void 0 : _analytics$profile6.type) === 'stressed',
              message: ((_analytics$profile7 = _analytics.profile) == null ? void 0 : _analytics$profile7.type) === 'stressed' ? `Stresli profil tespit edildi: ${_analytics.profile.rationale.join(', ')}` : _analytics.baselines.mood < 30 ? `D√º≈ü√ºk mood baseline: ${_analytics.baselines.mood.toFixed(1)}` : _analytics.weeklyDelta < -10 ? `Haftalƒ±k mood d√º≈ü√º≈ü√º: ${_analytics.weeklyDelta.toFixed(1)} puan` : _analytics.volatility > 15 ? `Y√ºksek mood volatilitesi: ${_analytics.volatility.toFixed(1)}` : null
            },
            interventions: [],
            recommendations: [].concat((0, _toConsumableArray2.default)(((_analytics$profile8 = _analytics.profile) == null ? void 0 : _analytics$profile8.rationale) || []), [(_analytics$bestTimes3 = _analytics.bestTimes) != null && _analytics$bestTimes3.dayOfWeek ? `En iyi g√ºn: ${_analytics.bestTimes.dayOfWeek}` : '', (_analytics$bestTimes4 = _analytics.bestTimes) != null && _analytics$bestTimes4.timeOfDay ? `En iyi zaman: ${_analytics.bestTimes.timeOfDay}` : '']).filter(Boolean),
            enhancedAnalytics: {
              volatility: _analytics.volatility,
              baselines: _analytics.baselines,
              correlations: _analytics.correlations,
              profile: _analytics.profile,
              bestTimes: _analytics.bestTimes,
              dataQuality: _analytics.dataQuality,
              confidence: _analytics.confidence,
              sampleSize: _analytics.sampleSize
            },
            source: 'unified_pipeline_analytics'
          };
          setPredictiveInsights(enhancedInsight);
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
            source: 'mood_screen_enhanced_analytics',
            analyticsProfile: (_analytics$profile9 = _analytics.profile) == null ? void 0 : _analytics$profile9.type,
            volatility: _analytics.volatility,
            weeklyDelta: _analytics.weeklyDelta,
            dataQuality: _analytics.dataQuality,
            confidence: _analytics.confidence,
            correlationsCount: Object.keys(_analytics.correlations).filter(function (k) {
              var correlation = _analytics.correlations[k];
              return (correlation == null ? void 0 : correlation.r) !== null;
            }).length,
            bestTimesAvailable: !!((_analytics$bestTimes5 = _analytics.bestTimes) != null && _analytics$bestTimes5.dayOfWeek || (_analytics$bestTimes6 = _analytics.bestTimes) != null && _analytics$bestTimes6.timeOfDay)
          }, user.id);
          console.log('üéØ Enhanced mood analytics processed successfully');
        } else if ((_result$insights = result.insights) != null && _result$insights.progress || result.patterns) {
          var _result$insights2;
          var predictiveInsight = null;
          if ((_result$insights2 = result.insights) != null && _result$insights2.progress && result.insights.progress.length > 0) {
            var progressInsights = result.insights.progress;
            var avgMoodMetric = progressInsights.find(function (p) {
              return p.metric === 'average_mood';
            });
            var trendMetric = progressInsights.find(function (p) {
              return p.metric === 'mood_trend';
            });
            var avgMoodValue = (avgMoodMetric == null ? void 0 : avgMoodMetric.value) || 50;
            var trendChangeValue = (trendMetric == null ? void 0 : trendMetric.change) || 0;
            predictiveInsight = {
              riskLevel: avgMoodValue < 30 ? 'high' : avgMoodValue < 50 ? 'medium' : 'low',
              moodTrend: trendChangeValue,
              averageRecentMood: Math.round(avgMoodValue),
              earlyWarning: {
                triggered: avgMoodValue < 30 || trendChangeValue < -15,
                message: avgMoodValue < 30 ? 'Son g√ºnlerde mood seviyende belirgin d√º≈ü√º≈ü var. Destek almayƒ± d√º≈ü√ºn√ºr m√ºs√ºn?' : trendChangeValue < -15 ? 'Mood seviyende d√º≈ü√º≈ü trendi tespit ettik. Kendine iyi bakmanƒ±n zamanƒ±.' : null
              },
              interventions: [],
              recommendations: progressInsights.map(function (p) {
                return p.interpretation;
              }).filter(Boolean),
              source: 'unified_pipeline_progress'
            };
          } else if (result.patterns) {
            var _normalizedPatterns = Array.isArray(result.patterns) ? result.patterns : result.patterns.temporal || [];
            var weeklyDeltaPattern = _normalizedPatterns.find(function (p) {
              return p.type === 'mood_weekly_delta';
            });
            var meaPattern = _normalizedPatterns.find(function (p) {
              return p.type === 'mood_mea_correlation';
            });
            if (weeklyDeltaPattern != null && weeklyDeltaPattern.dashboardMetrics || meaPattern != null && meaPattern.dashboardMetrics) {
              var weeklyMetrics = weeklyDeltaPattern == null ? void 0 : weeklyDeltaPattern.dashboardMetrics;
              var meaMetrics = meaPattern == null ? void 0 : meaPattern.dashboardMetrics;
              var currentMoodAvg = (weeklyMetrics == null ? void 0 : weeklyMetrics.currentWeekAvg) || (meaMetrics == null ? void 0 : meaMetrics.averageMood) || 50;
              var weeklyDelta = (weeklyMetrics == null ? void 0 : weeklyMetrics.weeklyDelta) || 0;
              predictiveInsight = {
                riskLevel: currentMoodAvg < 30 ? 'high' : currentMoodAvg < 50 ? 'medium' : 'low',
                moodTrend: weeklyDelta,
                averageRecentMood: Math.round(currentMoodAvg),
                earlyWarning: {
                  triggered: currentMoodAvg < 30 || weeklyDelta < -10,
                  message: currentMoodAvg < 30 ? 'Mevcut mood seviyesi d√º≈ü√ºk - kendine iyi bakmaya odaklan' : weeklyDelta < -10 ? `Haftalƒ±k mood ${weeklyDelta.toFixed(1)} puan d√º≈üt√º - trend'i takip et` : null
                },
                interventions: [],
                recommendations: [weeklyDeltaPattern == null ? void 0 : weeklyDeltaPattern.suggestion, meaPattern == null ? void 0 : meaPattern.suggestion].filter(Boolean),
                enhancedData: {
                  weeklyMetrics: weeklyMetrics,
                  meaAnalysis: meaMetrics,
                  emotionalProfile: meaMetrics == null ? void 0 : meaMetrics.emotionalProfile
                },
                source: 'unified_pipeline_patterns'
              };
            }
          }
          if (predictiveInsight) {
            console.log('üîÆ Enhanced predictive insights with unified metrics:', predictiveInsight);
            setPredictiveInsights(predictiveInsight);
          }
        }
        var insightsCount = (((_result$insights3 = result.insights) == null || (_result$insights3 = _result$insights3.therapeutic) == null ? void 0 : _result$insights3.length) || 0) + (((_result$insights4 = result.insights) == null || (_result$insights4 = _result$insights4.progress) == null ? void 0 : _result$insights4.length) || 0);
        var patternsCount = Array.isArray(result.patterns) ? result.patterns.length : 0;
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
          source: 'mood_screen',
          insightsCount: insightsCount,
          patternsCount: patternsCount,
          deliveryTime: ((_result$metadata3 = result.metadata) == null ? void 0 : _result$metadata3.processingTime) || 0
        }, user.id);
      } catch (error) {
        console.error('‚ùå UnifiedAIPipeline mood analysis failed:', error);
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_ERROR, {
          source: 'mood_screen',
          error: error instanceof Error ? error.message : 'Unknown error',
          fallbackTriggered: true
        }, user.id);
        console.log('üîÑ Falling back to MoodPatternAnalysisService...');
        yield runLegacyMoodAnalysis(entries);
      }
    });
    return function loadMoodAIWithUnifiedPipeline(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var runLegacyMoodAnalysis = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (entries) {
      if (!(user != null && user.id)) return;
      try {
        var serviceEntries = entries.map(function (entry) {
          return {
            id: entry.id,
            user_id: entry.user_id,
            mood_score: entry.mood_score,
            energy_level: entry.energy_level,
            anxiety_level: entry.anxiety_level,
            notes: entry.notes || '',
            trigger: entry.trigger || '',
            created_at: entry.created_at,
            timestamp: entry.created_at,
            synced: true
          };
        });
        var patternService = _moodPatternAnalysisService.MoodPatternAnalysisService.getInstance();
        var deepPatterns = yield patternService.analyzeMoodPatterns(serviceEntries, user.id, 'full');
        console.log('üîÑ Fallback analysis completed:', deepPatterns);
        var mergedPatterns = mergeHeuristicAndAIPatterns(moodPatterns, deepPatterns);
        setMoodPatterns(mergedPatterns);
      } catch (fallbackError) {
        console.error('‚ùå Fallback mood analysis also failed:', fallbackError);
      }
    });
    return function runLegacyMoodAnalysis(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var analyzeMoodPatterns = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (!(user != null && user.id) || moodEntries.length < 3) return;
      try {
        console.log('üß† Starting mood pattern analysis...');
        var serviceEntries = moodEntries.map(function (entry) {
          return {
            id: entry.id,
            user_id: entry.user_id,
            mood_score: entry.mood_score,
            energy_level: entry.energy_level,
            anxiety_level: entry.anxiety_level,
            notes: entry.notes || '',
            trigger: entry.trigger || '',
            created_at: entry.created_at
          };
        });
        var quickPatterns = generateQuickHeuristicPatterns(serviceEntries);
        console.log('‚ö° Phase-1 (Heuristic) patterns:', quickPatterns);
        setMoodPatterns(quickPatterns);
        if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_PROGRESSIVE')) {
          setTimeout((0, _asyncToGenerator2.default)(function* () {
            yield loadMoodAIWithUnifiedPipeline(moodEntries);
          }), 3000);
        } else {
          if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_PIPELINE')) {
            yield loadMoodAIWithUnifiedPipeline(moodEntries);
          } else {
            yield runLegacyMoodAnalysis(serviceEntries);
          }
        }
        if (serviceEntries.length >= 5 && !predictiveInsights) {
          try {
            var recentEntries = serviceEntries.slice(-7);
            var avgRecentMood = recentEntries.reduce(function (sum, e) {
              return sum + e.mood_score;
            }, 0) / recentEntries.length;
            var oldEntries = serviceEntries.slice(-14, -7);
            var avgOldMood = oldEntries.length > 0 ? oldEntries.reduce(function (sum, e) {
              return sum + e.mood_score;
            }, 0) / oldEntries.length : avgRecentMood;
            var moodTrend = avgRecentMood - avgOldMood;
            var riskLevel = avgRecentMood < 30 ? 'high' : avgRecentMood < 50 ? 'medium' : 'low';
            var predictiveInsight = {
              riskLevel: riskLevel,
              moodTrend: moodTrend,
              averageRecentMood: Math.round(avgRecentMood),
              earlyWarning: {
                triggered: riskLevel === 'high' || moodTrend < -15,
                message: riskLevel === 'high' ? 'Son g√ºnlerde mood seviyende belirgin d√º≈ü√º≈ü var. Destek almayƒ± d√º≈ü√ºn√ºr m√ºs√ºn?' : moodTrend < -15 ? 'Mood seviyende d√º≈ü√º≈ü trendi tespit ettik. Kendine iyi bakmanƒ±n zamanƒ±.' : null
              },
              interventions: [],
              recommendations: []
            };
            if (riskLevel !== 'low') {
              predictiveInsight.interventions.push({
                type: 'immediate',
                action: 'Nefes egzersizi yap (4-7-8 tekniƒüi)'
              });
              if (moodTrend < -10) {
                predictiveInsight.interventions.push({
                  type: 'preventive',
                  action: 'G√ºnl√ºk mood takibini s√ºrd√ºr ve tetikleyicileri fark et'
                });
              }
            }
            if (moodTrend < -10) {
              predictiveInsight.recommendations.push('D√º≈ü√º≈ü trendini fark ettin - nefes egzersizleri ve mindfulness teknikleri deneyebilirsin.');
            }
            if (avgRecentMood < 40) {
              predictiveInsight.recommendations.push('D√º≈ü√ºk mood d√∂neminde kendine ekstra iyi bak - sevdiƒüin aktiviteleri yapmayƒ± dene.');
            }
            if (avgRecentMood >= 70) {
              predictiveInsight.recommendations.push('Pozitif bir d√∂nemdesin! Bu iyi hissi s√ºrd√ºrmek i√ßin d√ºzenli rutinlere devam et.');
            }
            console.log('üîÆ Fallback predictive insights generated:', predictiveInsight);
            setPredictiveInsights(predictiveInsight);
          } catch (predictiveError) {
            console.error('‚ö†Ô∏è Fallback predictive analysis failed:', predictiveError);
          }
        }
      } catch (error) {
        console.error('‚ùå Pattern analysis failed:', error);
        setMoodPatterns([]);
        setPredictiveInsights(null);
      }
    });
    return function analyzeMoodPatterns() {
      return _ref3.apply(this, arguments);
    };
  }();
  var generateQuickHeuristicPatterns = function generateQuickHeuristicPatterns(entries) {
    var patterns = [];
    if (entries.length < 3) return patterns;
    var recent = entries.slice(0, 3);
    var avgRecentMood = recent.reduce(function (sum, e) {
      return sum + e.mood_score;
    }, 0) / recent.length;
    if (avgRecentMood < 40) {
      patterns.push({
        type: 'temporal',
        title: 'Son G√ºnlerde D√º≈ü√ºk Mood',
        description: `Son 3 kayƒ±tta ortalama mood ${Math.round(avgRecentMood)}`,
        confidence: 0.8,
        severity: avgRecentMood < 30 ? 'high' : 'medium',
        actionable: true,
        suggestion: 'Kendine iyi bakmaya odaklan, nefes egzersizi deneyebilirsin',
        source: 'heuristic',
        data: {
          recentAverage: Math.round(avgRecentMood),
          sampleSize: recent.length
        }
      });
    } else if (avgRecentMood > 70) {
      patterns.push({
        type: 'temporal',
        title: 'Pozitif Mood Trendi',
        description: `Son kayƒ±tlarda y√ºksek mood seviyesi (${Math.round(avgRecentMood)})`,
        confidence: 0.7,
        severity: 'low',
        actionable: false,
        suggestion: 'Bu pozitif durumu s√ºrd√ºrmeye devam et',
        source: 'heuristic'
      });
    }
    var moods = entries.map(function (e) {
      return e.mood_score;
    });
    var energies = entries.map(function (e) {
      return e.energy_level;
    });
    var anxieties = entries.map(function (e) {
      return e.anxiety_level;
    });
    var calculateCorrelation = function calculateCorrelation(x, y) {
      if (x.length !== y.length || x.length === 0) return 0;
      var n = x.length;
      var meanX = x.reduce(function (a, b) {
        return a + b;
      }, 0) / n;
      var meanY = y.reduce(function (a, b) {
        return a + b;
      }, 0) / n;
      var numerator = 0;
      var sumXSquared = 0;
      var sumYSquared = 0;
      for (var i = 0; i < n; i++) {
        var xDiff = x[i] - meanX;
        var yDiff = y[i] - meanY;
        numerator += xDiff * yDiff;
        sumXSquared += xDiff * xDiff;
        sumYSquared += yDiff * yDiff;
      }
      var denominator = Math.sqrt(sumXSquared * sumYSquared);
      return denominator === 0 ? 0 : numerator / denominator;
    };
    var moodEnergyCorr = calculateCorrelation(moods, energies);
    var moodAnxietyCorr = calculateCorrelation(moods, anxieties);
    var energyAnxietyCorr = calculateCorrelation(energies, anxieties);
    var profileType = 'balanced';
    var profileTitle = 'Dengeli Duygusal Profil';
    var profileDescription = 'Mood, enerji ve anksiyete seviyelerin dengeli g√∂r√ºn√ºyor';
    var severity = 'low';
    var suggestion = 'Bu dengeyi korumaya devam et';
    if (moodEnergyCorr > 0.5 && moodAnxietyCorr < -0.3) {
      profileType = 'optimal';
      profileTitle = 'Optimal Duygusal Denge';
      profileDescription = 'Mood y√ºksek olduƒüunda enerji artƒ±yor, anksiyete azalƒ±yor - ideal durum';
      severity = 'low';
      suggestion = 'Harika! Bu optimal durumu s√ºrd√ºrmeye devam et';
    } else if (moodEnergyCorr < -0.3 && moodAnxietyCorr > 0.3) {
      profileType = 'depression_risk';
      profileTitle = 'Depresif Eƒüilim Riski';
      profileDescription = 'D√º≈ü√ºk mood, d√º≈ü√ºk enerji ve y√ºksek anksiyete birlikte - dikkat gerekli';
      severity = 'high';
      suggestion = 'Enerji artƒ±rƒ±cƒ± aktiviteler (egzersiz, g√ºne≈ü ƒ±≈üƒ±ƒüƒ±) ve anksiyete azaltƒ±cƒ± teknikler uygulayƒ±n';
    } else if (energyAnxietyCorr > 0.6) {
      profileType = 'manic_tendency';
      profileTitle = 'Y√ºksek Enerji Dalgalanmasƒ±';
      profileDescription = 'Enerji ve anksiyete birlikte deƒüi≈üiyor - dengeleme gerekli';
      severity = 'medium';
      suggestion = 'Sakinle≈ütirici aktiviteler (meditasyon, yava≈ü nefes) ile dengeyi koruyun';
    } else if (Math.abs(moodEnergyCorr) < 0.4 && Math.abs(moodAnxietyCorr) < 0.4) {
      profileType = 'balanced';
      profileTitle = 'Dengeli Duygusal Profil';
      profileDescription = 'Duygu durumlarƒ±n baƒüƒ±msƒ±z ve dengeli - saƒülƒ±klƒ± bir pattern';
      severity = 'low';
      suggestion = 'Bu dengeyi korumaya devam et, mindfulness pratiƒüi yapabilirsin';
    } else {
      profileType = 'unstable';
      profileTitle = 'Deƒüi≈üken Duygusal Durum';
      profileDescription = 'Duygu durumlarƒ±nda d√ºzensiz deƒüi≈üimler var';
      severity = 'medium';
      suggestion = 'D√ºzenli mood takibi ile pattern\'leri g√∂zlemle ve sakinle≈ütirici rutinler geli≈ütir';
    }
    patterns.push({
      type: 'mea_correlation',
      title: profileTitle,
      description: profileDescription,
      confidence: Math.min(0.9, entries.length * 0.05),
      severity: severity,
      actionable: profileType !== 'optimal',
      suggestion: suggestion,
      source: 'heuristic',
      data: {
        profileType: profileType,
        correlations: {
          moodEnergy: Number(moodEnergyCorr.toFixed(3)),
          moodAnxiety: Number(moodAnxietyCorr.toFixed(3)),
          energyAnxiety: Number(energyAnxietyCorr.toFixed(3))
        },
        averages: {
          mood: Number((moods.reduce(function (a, b) {
            return a + b;
          }, 0) / moods.length).toFixed(1)),
          energy: Number((energies.reduce(function (a, b) {
            return a + b;
          }, 0) / energies.length).toFixed(1)),
          anxiety: Number((anxieties.reduce(function (a, b) {
            return a + b;
          }, 0) / anxieties.length).toFixed(1))
        },
        sampleSize: entries.length
      }
    });
    return patterns;
  };
  var mergeHeuristicAndAIPatterns = function mergeHeuristicAndAIPatterns(heuristicPatterns, aiPatterns) {
    var merged = [];
    aiPatterns.forEach(function (aiPattern) {
      merged.push(Object.assign({}, aiPattern, {
        source: 'ai',
        updated: true
      }));
    });
    heuristicPatterns.forEach(function (heuristic) {
      var hasAISimilar = aiPatterns.some(function (ai) {
        return ai.type === heuristic.type && ai.title.includes(heuristic.title.split(' ')[0]);
      });
      if (!hasAISimilar) {
        merged.push(Object.assign({}, heuristic, {
          source: 'heuristic'
        }));
      }
    });
    return merged;
  };
  var loadMoodEntries = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      if (!(user != null && user.id)) return;
      try {
        setIsLoading(true);
        var periodDays = selectedTimeRange === 'today' ? 1 : selectedTimeRange === 'week' ? 7 : 30;
        var rawEntries = yield _moodTrackingService.default.getMoodEntries(user.id, periodDays);
        var entries = (rawEntries || []).map(function (entry) {
          return {
            id: entry.id,
            mood_score: entry.mood_score,
            energy_level: entry.energy_level,
            anxiety_level: entry.anxiety_level,
            notes: entry.notes || '',
            trigger: entry.triggers && entry.triggers.length > 0 ? entry.triggers[0] : undefined,
            created_at: entry.timestamp,
            user_id: entry.user_id
          };
        });
        setMoodEntries(entries);
      } catch (error) {
        console.error('Failed to load mood entries:', error);
        setToastMessage('Mood kayƒ±tlarƒ± y√ºklenemedi');
        setShowToast(true);
      } finally {
        setIsLoading(false);
      }
    });
    return function loadMoodEntries() {
      return _ref5.apply(this, arguments);
    };
  }();
  var handleRefresh = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* () {
      setRefreshing(true);
      yield loadMoodEntries();
      yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      setRefreshing(false);
    });
    return function handleRefresh() {
      return _ref6.apply(this, arguments);
    };
  }();
  var getMoodColor = function getMoodColor(score) {
    if (score >= 90) return '#EC4899';
    if (score >= 80) return '#8B5CF6';
    if (score >= 70) return '#10B981';
    if (score >= 60) return '#06B6D4';
    if (score >= 50) return '#84CC16';
    if (score >= 40) return '#EAB308';
    if (score >= 30) return '#F97316';
    if (score >= 20) return '#3B82F6';
    return '#EF4444';
  };
  var getMoodLabel = function getMoodLabel(score) {
    if (score >= 90) return 'Heyecanlƒ±';
    if (score >= 80) return 'Enerjik';
    if (score >= 70) return 'Mutlu';
    if (score >= 60) return 'Sakin';
    if (score >= 50) return 'Normal';
    if (score >= 40) return 'Endi≈üeli';
    if (score >= 30) return 'Sinirli';
    if (score >= 20) return '√úzg√ºn';
    return 'Kƒ±zgƒ±n';
  };
  var handleQuickEntry = function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* (data) {
      if (!(user != null && user.id)) return;
      try {
        var _journalAnalysis;
        var moodEntry = {
          user_id: user.id,
          mood_score: data.mood,
          energy_level: data.energy,
          anxiety_level: data.anxiety,
          notes: data.notes,
          triggers: data.trigger ? [data.trigger] : [],
          activities: [],
          sync_attempts: 0
        };
        var journalAnalysis = null;
        if (data.notes && data.notes.trim().length > 10) {
          try {
            console.log('üìù Analyzing mood journal entry...');
            var journalingService = new _smartMoodJournalingService.SmartMoodJournalingService();
            journalAnalysis = yield journalingService.analyzeJournalEntry(user.id, data.notes, {
              existingMoodScore: data.mood,
              timestamp: new Date()
            });
            console.log('üìä Journal analysis completed:', journalAnalysis);
          } catch (analysisError) {
            console.error('‚ö†Ô∏è Journal analysis failed:', analysisError);
          }
        }
        var savedEntry = yield _moodTrackingService.default.saveMoodEntry(moodEntry);
        try {
          yield _UnifiedAIPipeline.unifiedPipeline.triggerInvalidation('mood_added', user.id);
          console.log('üîÑ Cache invalidated after mood entry: patterns + insights + progress');
        } catch (invalidationError) {
          console.warn('‚ö†Ô∏è Cache invalidation failed (non-critical):', invalidationError);
        }
        var gamificationResult = null;
        var pointsEarned = 0;
        var achievements = [];
        try {
          console.log('üéÆ Calculating mood points and achievements...');
          var userHistory = yield _moodTrackingService.default.getMoodEntries(user.id, 30);
          var moodEntryForPoints = {
            id: `temp_${Date.now()}`,
            user_id: user.id,
            mood_score: data.mood,
            energy_level: data.energy,
            anxiety_level: data.anxiety,
            notes: data.notes,
            trigger: data.trigger,
            timestamp: new Date().toISOString(),
            synced: false,
            sync_attempts: 0,
            triggers: data.trigger ? [data.trigger] : [],
            activities: []
          };
          var pointsResult = yield _unifiedGamificationService.unifiedGamificationService.awardUnifiedPoints(user.id, 'mood_entry', {
            mood_score: data.mood,
            energy_level: data.energy,
            anxiety_level: data.anxiety,
            trigger: data.trigger
          }, {
            moodEntry: moodEntryForPoints
          });
          pointsEarned = pointsResult.totalPoints;
          var achievementsList = [];
          achievements = achievementsList;
          gamificationResult = {
            points: pointsEarned,
            achievements: achievements,
            breakdown: pointsResult.breakdown
          };
          console.log('üéÆ Gamification completed:', gamificationResult);
          try {
            yield _gamificationStore.useGamificationStore.getState().updateStreak();
            console.log('‚úÖ Streak updated after mood entry');
          } catch (streakError) {
            console.error('‚ö†Ô∏è Streak update failed:', streakError);
          }
        } catch (gamificationError) {
          console.error('‚ö†Ô∏è Mood gamification failed:', gamificationError);
        }
        var toastMsg = 'Mood kaydƒ± olu≈üturuldu ‚úÖ';
        if (pointsEarned > 0) {
          toastMsg += ` üéØ +${pointsEarned} puan kazandƒ±nƒ±z!`;
        }
        if (achievements.length > 0) {
          toastMsg += ` üèÜ ${achievements.length} rozet a√ßƒ±ldƒ±!`;
        }
        if ((_journalAnalysis = journalAnalysis) != null && _journalAnalysis.insights) {
          var insightCount = journalAnalysis.insights.suggestions.length;
          if (insightCount > 0) {
            toastMsg += ` üìä ${insightCount} insight`;
          }
        }
        setToastMessage(toastMsg);
        setShowToast(true);
        setShowQuickEntry(false);
        yield loadMoodEntries();
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      } catch (error) {
        console.error('Failed to save mood entry:', error);
        try {
          yield _offlineSync.offlineSyncService.addToSyncQueue({
            type: 'CREATE',
            entity: 'mood_entry',
            data: {
              user_id: user.id,
              mood_score: data.mood,
              energy_level: data.energy,
              anxiety_level: data.anxiety,
              notes: data.notes,
              trigger: data.trigger,
              created_at: new Date().toISOString()
            }
          });
          setToastMessage('Mood kaydƒ± offline kaydedildi üì±');
          setShowToast(true);
          setShowQuickEntry(false);
          setEditingEntry(null);
        } catch (syncError) {
          setToastMessage('Kayƒ±t olu≈üturulamadƒ±');
          setShowToast(true);
        }
      }
    });
    return function handleQuickEntry(_x3) {
      return _ref7.apply(this, arguments);
    };
  }();
  var handleEditEntry = function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* (entry) {
      try {
        console.log('‚úèÔ∏è Editing mood entry:', entry.id);
        var currentEntry = moodEntries.find(function (e) {
          return e.id === entry.id;
        });
        if (!currentEntry) {
          setToastMessage('Kayƒ±t bulunamadƒ±');
          setShowToast(true);
          return;
        }
        setEditingEntry(currentEntry);
        setShowQuickEntry(true);
        setToastMessage('D√ºzenleme formu a√ßƒ±lƒ±yor...');
        setShowToast(true);
        yield (0, _aiTelemetry.trackAIInteraction)('MOOD_ENTRY_EDIT', {
          entryId: entry.id,
          mood: entry.mood_score,
          energy: entry.energy_level,
          anxiety: entry.anxiety_level
        });
      } catch (error) {
        console.error('‚ùå Failed to edit entry:', error);
        setToastMessage('D√ºzenleme ba≈ülatƒ±lamadƒ±');
        setShowToast(true);
      }
    });
    return function handleEditEntry(_x4) {
      return _ref8.apply(this, arguments);
    };
  }();
  var handleDeleteEntry = function () {
    var _ref9 = (0, _asyncToGenerator2.default)(function* (entryId) {
      try {
        console.log('üóëÔ∏è Deleting mood entry:', entryId);
        _reactNative.Alert.alert('Kaydƒ± Sil', 'Bu mood kaydƒ±nƒ± silmek istediƒüinizden emin misiniz? Bu i≈ülem geri alƒ±namaz.', [{
          text: 'ƒ∞ptal',
          style: 'cancel'
        }, {
          text: 'Sil',
          style: 'destructive',
          onPress: function () {
            var _onPress = (0, _asyncToGenerator2.default)(function* () {
              try {
                var entryToDelete = moodEntries.find(function (e) {
                  return e.id === entryId;
                });
                if (!entryToDelete) {
                  setToastMessage('Kayƒ±t bulunamadƒ±');
                  setShowToast(true);
                  return;
                }
                yield (0, _aiTelemetry.trackAIInteraction)('MOOD_ENTRY_DELETE', {
                  entryId: entryId,
                  mood: entryToDelete.mood_score,
                  energy: entryToDelete.energy_level,
                  anxiety: entryToDelete.anxiety_level
                });
                if (user) {
                  try {
                    yield _supabase.default.deleteMoodEntry(entryId);
                    console.log('‚úÖ Mood entry deleted from server');
                  } catch (serverError) {
                    console.warn('‚ö†Ô∏è Server delete failed, continuing with local delete:', serverError);
                  }
                  yield _moodTrackingService.default.deleteMoodEntry(entryId);
                  console.log('‚úÖ Mood entry deleted from local storage');
                  setMoodEntries(function (prev) {
                    return prev.filter(function (entry) {
                      return entry.id !== entryId;
                    });
                  });
                  setToastMessage('Mood kaydƒ± silindi');
                  setShowToast(true);
                  yield Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
                  yield loadMoodEntries();
                } else {
                  yield _moodTrackingService.default.deleteMoodEntry(entryId);
                  setMoodEntries(function (prev) {
                    return prev.filter(function (entry) {
                      return entry.id !== entryId;
                    });
                  });
                  setToastMessage('Mood kaydƒ± offline silindi');
                  setShowToast(true);
                }
              } catch (deleteError) {
                console.error('‚ùå Failed to delete mood entry:', deleteError);
                setToastMessage('Kayƒ±t silinemedi');
                setShowToast(true);
              }
            });
            function onPress() {
              return _onPress.apply(this, arguments);
            }
            return onPress;
          }()
        }], {
          cancelable: true
        });
      } catch (error) {
        console.error('‚ùå Failed to initiate delete:', error);
        setToastMessage('Silme i≈ülemi ba≈ülatƒ±lamadƒ±');
        setShowToast(true);
      }
    });
    return function handleDeleteEntry(_x5) {
      return _ref9.apply(this, arguments);
    };
  }();
  var calculateStats = function calculateStats() {
    if (moodEntries.length === 0) {
      return {
        avgMood: 0,
        avgEnergy: 0,
        avgAnxiety: 0,
        totalEntries: 0,
        trend: 'stable'
      };
    }
    var avgMood = moodEntries.reduce(function (sum, e) {
      return sum + e.mood_score;
    }, 0) / moodEntries.length;
    var avgEnergy = moodEntries.reduce(function (sum, e) {
      return sum + e.energy_level;
    }, 0) / moodEntries.length;
    var avgAnxiety = moodEntries.reduce(function (sum, e) {
      return sum + e.anxiety_level;
    }, 0) / moodEntries.length;
    var trend = 'stable';
    if (moodEntries.length >= 2) {
      var recent = moodEntries.slice(0, Math.ceil(moodEntries.length / 2));
      var older = moodEntries.slice(Math.ceil(moodEntries.length / 2));
      var recentAvg = recent.reduce(function (sum, e) {
        return sum + e.mood_score;
      }, 0) / recent.length;
      var olderAvg = older.reduce(function (sum, e) {
        return sum + e.mood_score;
      }, 0) / older.length;
      trend = recentAvg > olderAvg + 5 ? 'up' : recentAvg < olderAvg - 5 ? 'down' : 'stable';
    }
    return {
      avgMood: Math.round(avgMood),
      avgEnergy: Math.round(avgEnergy),
      avgAnxiety: Math.round(avgAnxiety),
      totalEntries: moodEntries.length,
      trend: trend
    };
  };
  var stats = calculateStats();
  var generateMoodJourneyData = function generateMoodJourneyData(entries, patterns, predictiveInsights) {
    var _predictiveInsights$e4;
    var today = new Date();
    var oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    var firstEntry = entries.length > 0 ? new Date(entries[entries.length - 1].created_at) : today;
    var daysTracking = Math.max(1, Math.ceil((today.getTime() - firstEntry.getTime()) / (1000 * 60 * 60 * 24)));
    var avgMood = entries.length > 0 ? entries.reduce(function (sum, e) {
      return sum + e.mood_score;
    }, 0) / entries.length : 50;
    var recentEntries = entries.slice(0, 5);
    var olderEntries = entries.slice(5, 10);
    var recentAvg = recentEntries.length > 0 ? recentEntries.reduce(function (sum, e) {
      return sum + e.mood_score;
    }, 0) / recentEntries.length : avgMood;
    var olderAvg = olderEntries.length > 0 ? olderEntries.reduce(function (sum, e) {
      return sum + e.mood_score;
    }, 0) / olderEntries.length : avgMood;
    var emotionalGrowth = 'ba≈ülangƒ±√ß';
    if (entries.length >= 30) {
      if (recentAvg >= 70) emotionalGrowth = 'uzman';else if (recentAvg >= 60) emotionalGrowth = 'stabil';else if (recentAvg > olderAvg + 5) emotionalGrowth = 'geli≈üiyor';
    } else if (entries.length >= 10) {
      if (recentAvg > olderAvg + 5) emotionalGrowth = 'geli≈üiyor';else if (recentAvg >= 60) emotionalGrowth = 'stabil';
    }
    var moodTrend = recentAvg > olderAvg + 5 ? 'y√ºkseliyor' : recentAvg < olderAvg - 5 ? 'd√º≈ü√ºyor' : 'stabil';
    var emotionDistribution = [{
      emotion: 'Mutlu',
      percentage: Math.round(entries.filter(function (e) {
        return e.mood_score >= 70;
      }).length / Math.max(entries.length, 1) * 100),
      color: '#4CAF50'
    }, {
      emotion: 'Sakin',
      percentage: Math.round(entries.filter(function (e) {
        return e.mood_score >= 60 && e.mood_score < 70;
      }).length / Math.max(entries.length, 1) * 100),
      color: '#26A69A'
    }, {
      emotion: 'Normal',
      percentage: Math.round(entries.filter(function (e) {
        return e.mood_score >= 40 && e.mood_score < 60;
      }).length / Math.max(entries.length, 1) * 100),
      color: '#66BB6A'
    }, {
      emotion: 'Endi≈üeli',
      percentage: Math.round(entries.filter(function (e) {
        return e.mood_score >= 30 && e.mood_score < 40;
      }).length / Math.max(entries.length, 1) * 100),
      color: '#FFA726'
    }, {
      emotion: '√úzg√ºn',
      percentage: Math.round(entries.filter(function (e) {
        return e.mood_score < 30;
      }).length / Math.max(entries.length, 1) * 100),
      color: '#FF7043'
    }].filter(function (emotion) {
      return emotion.percentage > 0;
    });
    var dominantEmotion = emotionDistribution.length > 0 ? emotionDistribution.reduce(function (max, current) {
      return current.percentage > max.percentage ? current : max;
    }).emotion : 'Normal';
    var weekDays = ['Pzt', 'Sal', '√áar', 'Per', 'Cum', 'Cmt', 'Paz'];
    var weeklyColors = weekDays.map(function (day, index) {
      var recentEntries = entries.slice(0, 7);
      var entryForDay = recentEntries[index % recentEntries.length];
      var avgMood = 50;
      if (entries.length > 0) {
        if (index < entries.length) {
          avgMood = entries[index].mood_score;
        } else {
          avgMood = Math.round(entries.reduce(function (sum, e) {
            return sum + e.mood_score;
          }, 0) / entries.length);
        }
      }
      return {
        day: day,
        color: getMoodColor(avgMood),
        mood: avgMood,
        highlight: avgMood >= 80 ? 'Harika g√ºn!' : avgMood <= 30 ? 'Zorlu g√ºn' : undefined
      };
    });
    var generatePersonalizedEncouragement = function generatePersonalizedEncouragement() {
      if (entries.length === 0) {
        return 'Mood takip yolculuƒüuna ho≈ü geldin. Bu ilk adƒ±mƒ±n cesaret ister ve deƒüerli.';
      }
      var recentEntries = entries.slice(0, 5);
      var avgRecentMood = recentEntries.length > 0 ? recentEntries.reduce(function (sum, e) {
        return sum + e.mood_score;
      }, 0) / recentEntries.length : 50;
      if (entries.length >= 30) {
        return `${entries.length} kayƒ±tla d√ºzenli takip yapƒ±yorsun. Bu istikrar, duygusal farkƒ±ndalƒ±ƒüƒ±nƒ±n ne kadar geli≈ütiƒüini g√∂steriyor.`;
      } else if (entries.length >= 14) {
        return `${entries.length} kayƒ±t tamamladƒ±n. ƒ∞ki haftadƒ±r s√ºrd√ºrd√ºƒü√ºn bu takip, harika bir alƒ±≈ükanlƒ±k olu≈üturuyor.`;
      } else if (avgRecentMood >= 70) {
        return `Son kayƒ±tlarda mood ortalamasƒ± ${Math.round(avgRecentMood)}. Pozitif bir d√∂nemdesin ve bunu fark etmek g√ºzel.`;
      } else if (avgRecentMood <= 40) {
        return `Zorlu bir d√∂nemde ${entries.length} kayƒ±t yapmƒ±≈üsƒ±n. Bu kendine olan saygƒ±nƒ±n g√∂stergesi.`;
      } else {
        return `${entries.length} mood kaydƒ±yla duygularƒ±nƒ± g√∂zlemleme becerilerin geli≈üiyor. Bu s√ºre√ß zaman alƒ±r, sabƒ±rlƒ± ol.`;
      }
    };
    var currentEncouragement = generatePersonalizedEncouragement();
    return {
      moodStory: {
        daysTracking: daysTracking,
        entriesCount: entries.length,
        emotionalGrowth: emotionalGrowth,
        currentStreak: function () {
          if (entries.length === 0) return 0;
          var streak = 0;
          var today = new Date();
          var _loop = function _loop() {
            var checkDate = new Date(today.getTime() - i * 24 * 60 * 60 * 1000);
            var dayStart = new Date(checkDate.getFullYear(), checkDate.getMonth(), checkDate.getDate());
            var dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);
            var hasEntryThisDay = entries.some(function (entry) {
              var entryDate = new Date(entry.created_at);
              return entryDate >= dayStart && entryDate < dayEnd;
            });
            if (hasEntryThisDay) {
              streak++;
            } else {
              return 1;
            }
          };
          for (var i = 0; i < 30; i++) {
            if (_loop()) break;
          }
          return streak;
        }(),
        averageMood: Math.round(avgMood),
        moodTrend: moodTrend
      },
      personalInsights: {
        strongestPattern: function (_predictiveInsights$e) {
          if (patterns.length === 0) return 'Hen√ºz yeterli veri yok - devam et';
          if (predictiveInsights != null && (_predictiveInsights$e = predictiveInsights.enhancedAnalytics) != null && _predictiveInsights$e.profile) {
            var profile = predictiveInsights.enhancedAnalytics.profile;
            var profileDescriptions = {
              'stressed': 'Stresli Profil - D√º≈ü√ºk mood, y√ºksek anksiyete',
              'volatile': 'Volatil Profil - Y√ºksek mood dalgalanmalarƒ±',
              'fatigued': 'Yorgun Profil - D√º≈ü√ºk enerji ve mood',
              'recovering': 'Toparlanma Profili - Pozitif haftalƒ±k trend',
              'resilient': 'Diren√ßli Profil - Y√ºksek mood, d√º≈ü√ºk volatilite',
              'elevated': 'Y√ºksek Profil - Stabil y√ºksek mood',
              'stable': 'Stabil Profil - Dengeli duygusal durum'
            };
            return profileDescriptions[profile.type] || `${profile.type.charAt(0).toUpperCase()}${profile.type.slice(1)} Profil`;
          }
          var actionablePatterns = patterns.filter(function (p) {
            return p.actionable && p.confidence > 0.7;
          });
          if (actionablePatterns.length > 0) {
            return actionablePatterns[0].title || 'Pattern tespit edildi';
          }
          var sortedPatterns = (0, _toConsumableArray2.default)(patterns).sort(function (a, b) {
            return (b.confidence || 0) - (a.confidence || 0);
          });
          return sortedPatterns[0].title || 'Duygusal pattern analizi yapƒ±lƒ±yor';
        }(),
        challengeArea: function (_predictiveInsights$e2, _unifiedMeaPattern$da) {
          if (patterns.length === 0) return 'Veri toplama ve d√ºzenlilik';
          if (predictiveInsights != null && (_predictiveInsights$e2 = predictiveInsights.enhancedAnalytics) != null && _predictiveInsights$e2.profile) {
            var profileType = predictiveInsights.enhancedAnalytics.profile.type;
            var volatility = predictiveInsights.enhancedAnalytics.volatility || 0;
            var weeklyDelta = predictiveInsights.enhancedAnalytics.weeklyDelta || 0;
            var challengeAreas = {
              'stressed': 'Stress y√∂netimi ve anksiyete azaltƒ±cƒ± teknikler',
              'volatile': `Y√ºksek volatilite (${volatility.toFixed(1)}) - duygu d√ºzenlemesi`,
              'fatigued': 'Enerji artƒ±rƒ±cƒ± aktiviteler ve uyku d√ºzeni',
              'recovering': weeklyDelta > 0 ? 'Bu pozitif trendi s√ºrd√ºrmek' : 'Toparlanma s√ºrecini desteklemek',
              'resilient': 'Bu g√º√ßl√º durumu koruyucu stratejiler',
              'elevated': 'Y√ºksek mood seviyesini s√ºrd√ºr√ºlebilir kƒ±lmak',
              'stable': 'Bu dengeyi koruma ve farkƒ±nda·∏çlƒ±ƒüƒ± artƒ±rma'
            };
            return challengeAreas[profileType] || `${profileType} profili i√ßin destek stratejileri`;
          }
          var unifiedMeaPattern = patterns.find(function (p) {
            return p.type === 'mood_mea_correlation' && p.source === 'unified_pipeline';
          });
          if (unifiedMeaPattern != null && (_unifiedMeaPattern$da = unifiedMeaPattern.data) != null && _unifiedMeaPattern$da.emotionalProfile) {
            var _profileType = unifiedMeaPattern.data.emotionalProfile;
            switch (_profileType) {
              case 'depression_risk':
                return 'Enerji artƒ±rƒ±cƒ± aktiviteler ve anksiyete y√∂netimi';
              case 'hyperarousal':
                return 'Y√ºksek uyarƒ±lma - sakinle≈ütirici teknikler';
              case 'anxious_low_mood':
                return 'Mood ve anksiyete dengeleme stratejileri';
              case 'disconnected':
                return 'Duygusal baƒülantƒ± kurma ve farkƒ±ndalƒ±k';
              case 'optimal':
                return 'Bu optimal durumu koruma stratejileri';
              default:
                return unifiedMeaPattern.suggestion || 'MEA dengelemesi';
            }
          }
          var criticalPatterns = patterns.filter(function (p) {
            return p.severity === 'high' || p.severity === 'critical';
          });
          if (criticalPatterns.length > 0) {
            return criticalPatterns[0].suggestion || 'Duygusal dengeleme teknikleri';
          }
          var meaPatterns = patterns.filter(function (p) {
            return p.type === 'mea_correlation';
          });
          if (meaPatterns.length > 0) {
            var _meaPattern$data, _meaPattern$data2;
            var meaPattern = meaPatterns[0];
            if (((_meaPattern$data = meaPattern.data) == null ? void 0 : _meaPattern$data.profileType) === 'depression_risk') {
              return 'Enerji artƒ±rƒ±cƒ± aktiviteler ve anksiyete y√∂netimi';
            } else if (((_meaPattern$data2 = meaPattern.data) == null ? void 0 : _meaPattern$data2.profileType) === 'manic_tendency') {
              return 'Sakinle≈ütirici teknikler ve denge kurma';
            }
          }
          return 'Mood pattern\'lerini g√∂zlemleme';
        }(),
        nextMilestone: function () {
          var streakTarget = 7;
          var weeklyTarget = 21;
          var monthlyTarget = 30;
          if (entries.length < streakTarget) {
            return `${streakTarget - entries.length} daha kayƒ±t (7 g√ºnl√ºk hedef)`;
          } else if (entries.length < weeklyTarget) {
            return `${weeklyTarget - entries.length} daha kayƒ±t (3 haftalƒ±k istikrar)`;
          } else if (entries.length < monthlyTarget) {
            return `${monthlyTarget - entries.length} daha kayƒ±t (aylƒ±k uzman seviyesi)`;
          } else {
            var nextTarget = Math.ceil(entries.length / 30) * 30 + 30;
            return `${nextTarget - entries.length} daha kayƒ±t (${Math.ceil(nextTarget / 30)} aylƒ±k uzman)`;
          }
        }(),
        encouragement: currentEncouragement,
        actionableStep: function (_predictiveInsights$e3) {
          if (predictiveInsights != null && (_predictiveInsights$e3 = predictiveInsights.earlyWarning) != null && _predictiveInsights$e3.triggered) {
            return '√ñncelik: kendine iyi bak, nefes egzersizi yap';
          }
          if (patterns.length > 0) {
            var actionablePattern = patterns.find(function (p) {
              return p.actionable && p.suggestion;
            });
            if (actionablePattern) {
              return actionablePattern.suggestion;
            }
          }
          if (entries.length < 7) {
            return 'Bug√ºn mood kaydƒ±nƒ± yapmaya devam et';
          } else if (avgMood < 50) {
            return 'Mood d√ºzenleme teknikleri deneyebilirsin';
          } else {
            return 'Duygusal farkƒ±ndalƒ±ƒüƒ±nƒ± s√ºrd√ºr, harikasƒ±n';
          }
        }()
      },
      emotionalSpectrum: {
        dominantEmotion: dominantEmotion,
        emotionDistribution: emotionDistribution,
        weeklyColors: weeklyColors
      },
      patterns: patterns.map(function (pattern) {
        return {
          type: pattern.type || 'temporal',
          title: pattern.title || 'Pattern',
          description: pattern.description || '',
          suggestion: pattern.suggestion || '',
          severity: pattern.severity || 'low',
          actionable: pattern.actionable || false
        };
      }),
      prediction: {
        riskLevel: (predictiveInsights == null ? void 0 : predictiveInsights.riskLevel) || 'low',
        earlyWarning: (predictiveInsights == null ? void 0 : predictiveInsights.earlyWarning) || undefined,
        interventions: (predictiveInsights == null ? void 0 : predictiveInsights.interventions) || [],
        recommendation: (predictiveInsights == null || (_predictiveInsights$e4 = predictiveInsights.earlyWarning) == null ? void 0 : _predictiveInsights$e4.message) || 'Mood takibine devam et, her ≈üey yolunda g√∂r√ºn√ºyor.'
      },
      achievements: function () {
        var achievements = [];
        if (entries.length > 0) {
          achievements.push({
            title: 'Mood Takip Yolculuƒüu Ba≈üladƒ±',
            description: `${new Date(firstEntry).toLocaleDateString('tr-TR')} tarihinde ilk mood kaydƒ±nƒ± yaptƒ±n`,
            date: firstEntry,
            celebration: 'üåü',
            impact: 'Duygusal farkƒ±ndalƒ±k yolculuƒüunda cesaret g√∂sterdin'
          });
        }
        if (entries.length >= 7) {
          achievements.push({
            title: 'Haftalƒ±k Mood Uzmanƒ±',
            description: `${entries.length} mood kaydƒ± ile bir haftalƒ±k veri topladƒ±n`,
            date: today,
            celebration: 'üìä',
            impact: 'Tutarlƒ± takip alƒ±≈ükanlƒ±ƒüƒ± olu≈üturmaya ba≈üladƒ±n'
          });
        }
        if (entries.length >= 30) {
          achievements.push({
            title: 'Aylƒ±k Mood Takip√ßisi',
            description: `${entries.length} kayƒ±t ile bir aylƒ±k mood pattern\'in olu≈ütu`,
            date: today,
            celebration: 'üìà',
            impact: 'Uzun vadeli duygusal pattern\'lerin g√∂r√ºn√ºr hale geldi'
          });
        }
        if (avgMood >= 70 && entries.length >= 5) {
          achievements.push({
            title: 'Pozitif Mood Seviyesi',
            description: `Ortalama mood seviyesi ${Math.round(avgMood)} - harika bir durumdayƒ±n`,
            date: today,
            celebration: '‚òÄÔ∏è',
            impact: 'ƒ∞yi duygusal durumunu fark edip deƒüerlendiriyorsun'
          });
        }
        var avgEnergy = entries.length > 0 ? entries.reduce(function (sum, e) {
          return sum + e.energy_level;
        }, 0) / entries.length : 50;
        if (avgEnergy >= 70 && entries.length >= 5) {
          achievements.push({
            title: 'Y√ºksek Enerji',
            description: `Ortalama enerji seviyen ${Math.round(avgEnergy)} - enerjik g√ºnler ge√ßiriyorsun`,
            date: today,
            celebration: '‚ö°',
            impact: 'Y√ºksek enerji seviyeni fark etmek motivasyon artƒ±rƒ±yor'
          });
        }
        var avgAnxiety = entries.length > 0 ? entries.reduce(function (sum, e) {
          return sum + e.anxiety_level;
        }, 0) / entries.length : 50;
        if (avgAnxiety <= 30 && entries.length >= 7) {
          achievements.push({
            title: 'Kaygƒ± Y√∂netimi',
            description: `Ortalama kaygƒ± seviyesi ${Math.round(avgAnxiety)} - g√ºzel bir y√∂netim sergiliyor`,
            date: today,
            celebration: 'üßò',
            impact: 'Kaygƒ± seviyen kontrol altƒ±nda ve bunun farkƒ±ndasƒ±n'
          });
        }
        return achievements;
      }()
    };
  };
  var calculateProgress = function calculateProgress() {
    var goalCount = selectedTimeRange === 'today' ? 3 : selectedTimeRange === 'week' ? 10 : 30;
    var currentCount = stats.totalEntries;
    return Math.min(Math.round(currentCount / goalCount * 100), 100);
  };
  var calculateWeeklyChange = function calculateWeeklyChange() {
    if (stats.trend === 'up') return '+10%';
    if (stats.trend === 'down') return '-5%';
    return '0%';
  };
  var getFilteredEntries = function getFilteredEntries() {
    return moodEntries.slice(0, displayLimit);
  };
  var filteredEntries = getFilteredEntries();
  return (0, _jsxRuntime.jsxs)(_ScreenLayout.default, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.headerContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.headerContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.headerLeft
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.headerTitle,
          children: "Mood Takibi"
        }), (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
          style: styles.headerRight,
          onPress: function onPress() {
            console.log('üé≠ Opening Mood Dashboard');
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
            setShowMoodDashboard(true);
          },
          children: (0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
            name: "chart-line",
            size: 24,
            color: "#EC4899"
          })
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.tabContainer,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
          style: styles.tabButton,
          onPress: function onPress() {
            setSelectedTimeRange('today');
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.tabText, selectedTimeRange === 'today' && styles.tabTextActive],
            children: "Bug\xFCn"
          }), selectedTimeRange === 'today' && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.tabIndicator
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
          style: styles.tabButton,
          onPress: function onPress() {
            setSelectedTimeRange('week');
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.tabText, selectedTimeRange === 'week' && styles.tabTextActive],
            children: "Hafta"
          }), selectedTimeRange === 'week' && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.tabIndicator
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
          style: styles.tabButton,
          onPress: function onPress() {
            setSelectedTimeRange('month');
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.tabText, selectedTimeRange === 'month' && styles.tabTextActive],
            children: "Ay"
          }), selectedTimeRange === 'month' && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.tabIndicator
          })]
        })]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      style: styles.container,
      showsVerticalScrollIndicator: false,
      refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
        refreshing: refreshing,
        onRefresh: handleRefresh,
        tintColor: "#EC4899"
      }),
      children: [(adaptiveSuggestion == null ? void 0 : adaptiveSuggestion.show) && (0, _jsxRuntime.jsx)(_AdaptiveSuggestionCard.default, {
        suggestion: adaptiveSuggestion,
        onAccept: (0, _asyncToGenerator2.default)(function* () {
          if (!(user != null && user.id) || !(adaptiveSuggestion != null && adaptiveSuggestion.cta)) return;
          yield trackSuggestionClick(user.id, adaptiveSuggestion);
          router.push(adaptiveSuggestion.cta.screen, adaptiveSuggestion.cta.params);
          setAdaptiveSuggestion(null);
          setAdaptiveMeta(null);
        }),
        onDismiss: (0, _asyncToGenerator2.default)(function* () {
          if (!(user != null && user.id)) return;
          yield trackSuggestionDismissal(user.id, adaptiveSuggestion);
          setAdaptiveSuggestion(null);
          setAdaptiveMeta(null);
        }),
        meta: adaptiveMeta,
        style: {
          marginHorizontal: 16,
          marginBottom: 16
        }
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.dateText,
        children: new Date().toLocaleDateString('tr-TR', {
          month: 'long',
          day: 'numeric',
          year: 'numeric'
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.weekStatsCard,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.weekStatsHeader,
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.weekStatsTitle,
              children: "\xD6zet"
            })
          }), stats.trend !== 'stable' && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.percentageBadge, stats.trend === 'up' ? styles.trendUp : styles.trendDown],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.percentageText,
              children: calculateWeeklyChange()
            })
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.statsGrid,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
              name: "emoticon-outline",
              size: 24,
              color: "#EC4899"
            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.statValue,
              children: [stats.avgMood, "/100"]
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.statLabel,
              children: "Ort. Mood"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
              name: "lightning-bolt-outline",
              size: 24,
              color: "#F59E0B"
            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.statValue,
              children: [stats.avgEnergy, "/100"]
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.statLabel,
              children: "Ort. Enerji"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
              name: "heart-pulse",
              size: 24,
              color: "#3B82F6"
            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.statValue,
              children: [stats.avgAnxiety, "/100"]
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.statLabel,
              children: "Ort. Anksiyete"
            })]
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.progressContainer,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.progressHeader,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.progressLabel,
              children: "\u0130lerleme"
            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.progressPercentage,
              children: [calculateProgress(), "%"]
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.progressBar,
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.progressFill, {
                width: `${calculateProgress()}%`
              }]
            })
          })]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.listSection,
        children: [filteredEntries.length === 0 ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.emptyState,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
            name: "emoticon-sad-outline",
            size: 48,
            color: "#E5E7EB"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.emptyText,
            children: "Hen\xFCz mood kayd\u0131 yok"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.emptySubtext,
            children: "A\u015Fa\u011F\u0131daki + butonuna t\u0131klayarak ilk kayd\u0131n\u0131z\u0131 olu\u015Fturun"
          })]
        }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.recordingsContainer,
          children: filteredEntries.map(function (entry) {
            var moodColor = entry.mood_score >= 70 ? '#10B981' : entry.mood_score >= 40 ? '#F59E0B' : '#EF4444';
            return (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.recordingCard,
              children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.recordingContent,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.recordingHeader,
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.recordingInfo,
                    children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
                      name: "emoticon-outline",
                      size: 20,
                      color: moodColor
                    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.recordingTime,
                      children: new Date(entry.created_at).toLocaleTimeString('tr-TR', {
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: false
                      })
                    })]
                  }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                    style: styles.recordingScores,
                    children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                      style: [styles.moodScore, {
                        color: moodColor
                      }],
                      children: [entry.mood_score, "/100"]
                    })
                  })]
                }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.recordingMetrics,
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.metricItem,
                    children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
                      name: "lightning-bolt",
                      size: 14,
                      color: "#F59E0B"
                    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                      style: styles.metricValue,
                      children: ["Enerji: ", entry.energy_level]
                    })]
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.metricItem,
                    children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
                      name: "heart-pulse",
                      size: 14,
                      color: "#3B82F6"
                    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                      style: styles.metricValue,
                      children: ["Anksiyete: ", entry.anxiety_level]
                    })]
                  })]
                }), entry.notes && (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.recordingNotes,
                  numberOfLines: 2,
                  children: entry.notes
                })]
              }), (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
                onPress: function onPress() {
                  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
                  handleDeleteEntry(entry.id);
                },
                style: styles.deleteIcon,
                hitSlop: {
                  top: 10,
                  bottom: 10,
                  left: 10,
                  right: 10
                },
                children: (0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
                  name: "delete-outline",
                  size: 20,
                  color: "#9CA3AF"
                })
              })]
            }, entry.id);
          })
        }), filteredEntries.length > 0 && moodEntries.length > displayLimit && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.showMoreContainer,
          children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
            style: styles.showMoreButton,
            onPress: function onPress() {
              setDisplayLimit(function (prev) {
                return prev + 5;
              });
              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.showMoreText,
              children: "Daha Fazla G\xF6ster"
            })
          })
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.bottomSpacing
      })]
    }), (0, _jsxRuntime.jsx)(_FAB.default, {
      icon: "plus",
      onPress: function onPress() {
        setShowQuickEntry(true);
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      },
      position: "fixed",
      backgroundColor: "#EC4899"
    }), (0, _jsxRuntime.jsx)(_MoodQuickEntry.MoodQuickEntry, {
      visible: showQuickEntry,
      onClose: function onClose() {
        setShowQuickEntry(false);
        setEditingEntry(null);
      },
      onSubmit: handleQuickEntry,
      editingEntry: editingEntry,
      initialData: params.prefill === 'true' ? {
        mood: params.mood ? Number(params.mood) : 50,
        energy: params.energy ? Number(params.energy) : 5,
        anxiety: params.anxiety ? Number(params.anxiety) : 5,
        notes: params.text || '',
        trigger: params.trigger || ''
      } : undefined
    }), (0, _jsxRuntime.jsx)(_Toast.Toast, {
      visible: showToast,
      message: toastMessage,
      onHide: function onHide() {
        return setShowToast(false);
      },
      type: toastMessage.includes('‚úÖ') ? 'success' : 'info'
    }), (0, _jsxRuntime.jsx)(_UserCentricMoodDashboard.default, {
      visible: showMoodDashboard,
      onClose: function onClose() {
        return setShowMoodDashboard(false);
      },
      moodJourney: generateMoodJourneyData(moodEntries, moodPatterns, predictiveInsights),
      moodEntries: moodEntries,
      onStartAction: function onStartAction(actionId) {
        console.log('üé≠ User started mood action:', actionId);
        if (actionId === 'next_mood_step') {
          setShowMoodDashboard(false);
          setShowQuickEntry(true);
        }
      }
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB'
  },
  statsCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2
  },
  visualModeSelector: {
    marginTop: 16,
    marginBottom: 8,
    marginHorizontal: 16
  },
  modeToggle: {
    flexDirection: 'row',
    gap: 8,
    marginTop: 12
  },
  modeButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 6,
    paddingVertical: 10,
    paddingHorizontal: 12,
    borderRadius: 8,
    backgroundColor: '#FFF',
    borderWidth: 1,
    borderColor: '#E5E7EB'
  },
  modeButtonActive: {
    backgroundColor: '#7C9885',
    borderColor: '#7C9885'
  },
  modeButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6B7280'
  },
  modeButtonTextActive: {
    color: '#FFFFFF'
  },
  wheelContainer: {
    alignItems: 'center',
    paddingVertical: 20
  },
  wheelHeader: {
    marginBottom: 16,
    alignItems: 'center'
  },
  wheelDescription: {
    fontSize: 13,
    color: '#6B7280',
    marginTop: 4
  },
  wheelInfo: {
    marginTop: 20,
    paddingHorizontal: 20
  },
  wheelInfoText: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 16
  },
  wheelLegend: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    gap: 12
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6
  },
  legendDot: {
    width: 12,
    height: 12,
    borderRadius: 6
  },
  legendText: {
    fontSize: 12,
    color: '#374151'
  },
  headerContainer: {
    backgroundColor: '#F9FAFB',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB'
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB'
  },
  headerLeft: {
    width: 32
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#374151',
    fontFamily: 'Inter',
    flex: 1,
    textAlign: 'center'
  },
  headerRight: {
    width: 32,
    alignItems: 'center'
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    justifyContent: 'space-around'
  },
  tabButton: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    position: 'relative'
  },
  tabText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6B7280',
    fontFamily: 'Inter'
  },
  tabTextActive: {
    color: '#EC4899',
    fontWeight: '700'
  },
  tabIndicator: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    height: 2,
    backgroundColor: '#EC4899'
  },
  dateText: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    marginVertical: 12,
    fontFamily: 'Inter'
  },
  weekStatsCard: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginTop: 16,
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1
    },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2
  },
  weekStatsHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 20
  },
  weekStatsTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#374151',
    fontFamily: 'Inter'
  },
  weekStatsSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
    fontFamily: 'Inter'
  },
  percentageBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12
  },
  trendUp: {
    backgroundColor: '#D1FAE5'
  },
  trendDown: {
    backgroundColor: '#FEE2E2'
  },
  percentageText: {
    fontSize: 12,
    fontWeight: '600',
    fontFamily: 'Inter',
    color: '#065F46'
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 16
  },
  statItem: {
    alignItems: 'center',
    flex: 1
  },
  statValue: {
    fontSize: 20,
    fontWeight: '700',
    color: '#374151',
    fontFamily: 'Inter',
    marginTop: 8
  },
  statLabel: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4,
    fontFamily: 'Inter'
  },
  progressContainer: {
    marginTop: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#F3F4F6'
  },
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8
  },
  progressLabel: {
    fontSize: 14,
    color: '#6B7280',
    fontFamily: 'Inter'
  },
  progressPercentage: {
    fontSize: 14,
    fontWeight: '600',
    color: '#EC4899',
    fontFamily: 'Inter'
  },
  progressBar: {
    height: 8,
    backgroundColor: '#F3F4F6',
    borderRadius: 4,
    overflow: 'hidden'
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#EC4899',
    borderRadius: 4
  },
  listSection: {
    paddingHorizontal: 16,
    marginTop: 24,
    paddingBottom: 100
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 16,
    fontFamily: 'Inter'
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 48
  },
  emptyText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#6B7280',
    marginTop: 16,
    fontFamily: 'Inter'
  },
  emptySubtext: {
    fontSize: 14,
    color: '#9CA3AF',
    marginTop: 8,
    textAlign: 'center',
    fontFamily: 'Inter'
  },
  recordingsContainer: {
    gap: 12
  },
  recordingCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 12,
    flexDirection: 'row',
    alignItems: 'flex-start',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1
    },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1
  },
  recordingContent: {
    flex: 1
  },
  recordingHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8
  },
  recordingInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8
  },
  recordingTime: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    fontFamily: 'Inter'
  },
  recordingScores: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  moodScore: {
    fontSize: 16,
    fontWeight: '700',
    fontFamily: 'Inter'
  },
  recordingMetrics: {
    flexDirection: 'row',
    gap: 16,
    marginBottom: 6
  },
  metricItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4
  },
  metricValue: {
    fontSize: 12,
    color: '#6B7280',
    fontFamily: 'Inter'
  },
  recordingNotes: {
    fontSize: 13,
    color: '#6B7280',
    fontFamily: 'Inter',
    lineHeight: 18
  },
  deleteIcon: {
    padding: 8,
    marginLeft: 8
  },
  showMoreContainer: {
    alignItems: 'center',
    marginTop: 16
  },
  showMoreButton: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 10,
    paddingHorizontal: 24,
    borderRadius: 8,
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E5E7EB'
  },
  showMoreText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    fontFamily: 'Inter'
  },
  bottomSpacing: {
    height: 100
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,