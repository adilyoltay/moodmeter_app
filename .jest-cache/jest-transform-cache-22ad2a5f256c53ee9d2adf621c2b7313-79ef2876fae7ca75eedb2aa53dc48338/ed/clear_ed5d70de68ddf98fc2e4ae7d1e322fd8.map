{"version":3,"names":["_errors","require","_hostComponentNames","_pointerEvents","_textInput","_eventBuilder","_type","_utils","clear","_x","_clear","apply","arguments","_asyncToGenerator2","default","element","isHostTextInput","ErrorWithStack","type","isEditableTextInput","isPointerEventEnabled","dispatchEvent","EventBuilder","Common","focus","textToClear","getTextInputValue","selectionRange","start","end","length","TextInput","selectionChange","emptyText","emitTypingEvents","config","key","text","wait","endEditing","blur"],"sources":["../../src/user-event/clear.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\n\nimport { ErrorWithStack } from '../helpers/errors';\nimport { isHostTextInput } from '../helpers/host-component-names';\nimport { isPointerEventEnabled } from '../helpers/pointer-events';\nimport { getTextInputValue, isEditableTextInput } from '../helpers/text-input';\nimport { EventBuilder } from './event-builder';\nimport type { UserEventInstance } from './setup';\nimport { emitTypingEvents } from './type/type';\nimport { dispatchEvent, wait } from './utils';\n\nexport async function clear(this: UserEventInstance, element: ReactTestInstance): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `clear() only supports host \"TextInput\" elements. Passed element has type: \"${element.type}\".`,\n      clear,\n    );\n  }\n\n  if (!isEditableTextInput(element) || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  // 1. Enter element\n  await dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  // 2. Select all\n  const textToClear = getTextInputValue(element);\n  const selectionRange = {\n    start: 0,\n    end: textToClear.length,\n  };\n  await dispatchEvent(\n    element,\n    'selectionChange',\n    EventBuilder.TextInput.selectionChange(selectionRange),\n  );\n\n  // 3. Press backspace with selected text\n  const emptyText = '';\n  await emitTypingEvents(element, {\n    config: this.config,\n    key: 'Backspace',\n    text: emptyText,\n  });\n\n  // 4. Exit element\n  await wait(this.config);\n  await dispatchEvent(element, 'endEditing', EventBuilder.TextInput.endEditing(emptyText));\n  await dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n}\n"],"mappings":";;;;;;;;AAEA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,UAAA,GAAAH,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AAEA,IAAAK,KAAA,GAAAL,OAAA;AACA,IAAAM,MAAA,GAAAN,OAAA;AAAA,SAEsBO,KAAKA,CAAAC,EAAA;EAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,OAAA;EAAAA,MAAA,OAAAG,kBAAA,CAAAC,OAAA,EAApB,WAA8CC,OAA0B,EAAiB;IAC9F,IAAI,CAAC,IAAAb,mBAAA,CAAAc,eAAe,EAACD,OAAO,CAAC,EAAE;MAC7B,MAAM,IAAIf,OAAA,CAAAiB,cAAc,CACtB,8EAA8EF,OAAO,CAACG,IAAI,IAAI,EAC9FV,KACF,CAAC;IACH;IAEA,IAAI,CAAC,IAAAJ,UAAA,CAAAe,mBAAmB,EAACJ,OAAO,CAAC,IAAI,CAAC,IAAAZ,cAAA,CAAAiB,qBAAqB,EAACL,OAAO,CAAC,EAAE;MACpE;IACF;IAGA,MAAM,IAAAR,MAAA,CAAAc,aAAa,EAACN,OAAO,EAAE,OAAO,EAAEV,aAAA,CAAAiB,YAAY,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAGlE,IAAMC,WAAW,GAAG,IAAArB,UAAA,CAAAsB,iBAAiB,EAACX,OAAO,CAAC;IAC9C,IAAMY,cAAc,GAAG;MACrBC,KAAK,EAAE,CAAC;MACRC,GAAG,EAAEJ,WAAW,CAACK;IACnB,CAAC;IACD,MAAM,IAAAvB,MAAA,CAAAc,aAAa,EACjBN,OAAO,EACP,iBAAiB,EACjBV,aAAA,CAAAiB,YAAY,CAACS,SAAS,CAACC,eAAe,CAACL,cAAc,CACvD,CAAC;IAGD,IAAMM,SAAS,GAAG,EAAE;IACpB,MAAM,IAAA3B,KAAA,CAAA4B,gBAAgB,EAACnB,OAAO,EAAE;MAC9BoB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,GAAG,EAAE,WAAW;MAChBC,IAAI,EAAEJ;IACR,CAAC,CAAC;IAGF,MAAM,IAAA1B,MAAA,CAAA+B,IAAI,EAAC,IAAI,CAACH,MAAM,CAAC;IACvB,MAAM,IAAA5B,MAAA,CAAAc,aAAa,EAACN,OAAO,EAAE,YAAY,EAAEV,aAAA,CAAAiB,YAAY,CAACS,SAAS,CAACQ,UAAU,CAACN,SAAS,CAAC,CAAC;IACxF,MAAM,IAAA1B,MAAA,CAAAc,aAAa,EAACN,OAAO,EAAE,MAAM,EAAEV,aAAA,CAAAiB,YAAY,CAACC,MAAM,CAACiB,IAAI,CAAC,CAAC,CAAC;EAClE;EAAA,OAAA9B,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}