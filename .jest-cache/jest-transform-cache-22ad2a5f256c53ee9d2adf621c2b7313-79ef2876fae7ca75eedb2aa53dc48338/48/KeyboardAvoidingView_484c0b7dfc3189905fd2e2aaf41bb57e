552bc4bf52865966eb3900c7874f6475
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _LayoutAnimation = _interopRequireDefault(require("../../LayoutAnimation/LayoutAnimation"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _AccessibilityInfo = _interopRequireDefault(require("../AccessibilityInfo/AccessibilityInfo"));
var _View = _interopRequireDefault(require("../View/View"));
var _Keyboard = _interopRequireDefault(require("./Keyboard"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style", "onLayout"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var KeyboardAvoidingView = function (_React$Component) {
  function KeyboardAvoidingView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, KeyboardAvoidingView);
    _this = _callSuper(this, KeyboardAvoidingView, [props]);
    _this._frame = null;
    _this._keyboardEvent = null;
    _this._subscriptions = [];
    _this._initialFrameHeight = 0;
    _this._bottom = 0;
    _this._onKeyboardChange = function (event) {
      _this._keyboardEvent = event;
      _this._updateBottomIfNecessary();
    };
    _this._onKeyboardHide = function (event) {
      _this._keyboardEvent = null;
      _this._updateBottomIfNecessary();
    };
    _this._onLayout = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (event) {
        event.persist();
        var oldFrame = _this._frame;
        _this._frame = event.nativeEvent.layout;
        if (!_this._initialFrameHeight) {
          _this._initialFrameHeight = _this._frame.height;
        }
        if (!oldFrame || oldFrame.height !== _this._frame.height) {
          yield _this._updateBottomIfNecessary();
        }
        if (_this.props.onLayout) {
          _this.props.onLayout(event);
        }
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    _this._setBottom = function (value) {
      var _this$props$enabled;
      var enabled = (_this$props$enabled = _this.props.enabled) != null ? _this$props$enabled : true;
      _this._bottom = value;
      if (enabled) {
        _this.setState({
          bottom: value
        });
      }
    };
    _this._updateBottomIfNecessary = (0, _asyncToGenerator2.default)(function* () {
      var _this$props$enabled2;
      if (_this._keyboardEvent == null) {
        _this._setBottom(0);
        return;
      }
      var _this$_keyboardEvent = _this._keyboardEvent,
        duration = _this$_keyboardEvent.duration,
        easing = _this$_keyboardEvent.easing,
        endCoordinates = _this$_keyboardEvent.endCoordinates;
      var height = yield _this._relativeKeyboardHeight(endCoordinates);
      if (_this._bottom === height) {
        return;
      }
      _this._setBottom(height);
      var enabled = (_this$props$enabled2 = _this.props.enabled) != null ? _this$props$enabled2 : true;
      if (enabled && duration && easing) {
        _LayoutAnimation.default.configureNext({
          duration: duration > 10 ? duration : 10,
          update: {
            duration: duration > 10 ? duration : 10,
            type: _LayoutAnimation.default.Types[easing] || 'keyboard'
          }
        });
      }
    });
    _this.state = {
      bottom: 0
    };
    _this.viewRef = React.createRef();
    return _this;
  }
  (0, _inherits2.default)(KeyboardAvoidingView, _React$Component);
  return (0, _createClass2.default)(KeyboardAvoidingView, [{
    key: "_relativeKeyboardHeight",
    value: function () {
      var _relativeKeyboardHeight2 = (0, _asyncToGenerator2.default)(function* (keyboardFrame) {
        var _this$props$keyboardV;
        var frame = this._frame;
        if (!frame || !keyboardFrame) {
          return 0;
        }
        if (_Platform.default.OS === 'ios' && keyboardFrame.screenY === 0 && (yield _AccessibilityInfo.default.prefersCrossFadeTransitions())) {
          return 0;
        }
        var keyboardY = keyboardFrame.screenY - ((_this$props$keyboardV = this.props.keyboardVerticalOffset) != null ? _this$props$keyboardV : 0);
        if (this.props.behavior === 'height') {
          return Math.max(this.state.bottom + frame.y + frame.height - keyboardY, 0);
        }
        return Math.max(frame.y + frame.height - keyboardY, 0);
      });
      function _relativeKeyboardHeight(_x2) {
        return _relativeKeyboardHeight2.apply(this, arguments);
      }
      return _relativeKeyboardHeight;
    }()
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      var _this$props$enabled3;
      var enabled = (_this$props$enabled3 = this.props.enabled) != null ? _this$props$enabled3 : true;
      if (enabled && this._bottom !== prevState.bottom) {
        this.setState({
          bottom: this._bottom
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!_Keyboard.default.isVisible()) {
        this._keyboardEvent = null;
        this._setBottom(0);
      }
      if (_Platform.default.OS === 'ios') {
        this._subscriptions = [_Keyboard.default.addListener('keyboardWillHide', this._onKeyboardHide), _Keyboard.default.addListener('keyboardWillShow', this._onKeyboardChange)];
      } else {
        this._subscriptions = [_Keyboard.default.addListener('keyboardDidHide', this._onKeyboardChange), _Keyboard.default.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._subscriptions.forEach(function (subscription) {
        subscription.remove();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        behavior = _this$props.behavior,
        children = _this$props.children,
        contentContainerStyle = _this$props.contentContainerStyle,
        _this$props$enabled4 = _this$props.enabled,
        enabled = _this$props$enabled4 === void 0 ? true : _this$props$enabled4,
        _this$props$keyboardV2 = _this$props.keyboardVerticalOffset,
        keyboardVerticalOffset = _this$props$keyboardV2 === void 0 ? 0 : _this$props$keyboardV2,
        style = _this$props.style,
        onLayout = _this$props.onLayout,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var bottomHeight = enabled === true ? this.state.bottom : 0;
      switch (behavior) {
        case 'height':
          var heightStyle;
          if (this._frame != null && this.state.bottom > 0) {
            heightStyle = {
              height: this._initialFrameHeight - bottomHeight,
              flex: 0
            };
          }
          return (0, _jsxRuntime.jsx)(_View.default, Object.assign({
            ref: this.viewRef,
            style: _StyleSheet.default.compose(style, heightStyle),
            onLayout: this._onLayout
          }, props, {
            children: children
          }));
        case 'position':
          return (0, _jsxRuntime.jsx)(_View.default, Object.assign({
            ref: this.viewRef,
            style: style,
            onLayout: this._onLayout
          }, props, {
            children: (0, _jsxRuntime.jsx)(_View.default, {
              style: _StyleSheet.default.compose(contentContainerStyle, {
                bottom: bottomHeight
              }),
              children: children
            })
          }));
        case 'padding':
          return (0, _jsxRuntime.jsx)(_View.default, Object.assign({
            ref: this.viewRef,
            style: _StyleSheet.default.compose(style, {
              paddingBottom: bottomHeight
            }),
            onLayout: this._onLayout
          }, props, {
            children: children
          }));
        default:
          return (0, _jsxRuntime.jsx)(_View.default, Object.assign({
            ref: this.viewRef,
            onLayout: this._onLayout,
            style: style
          }, props, {
            children: children
          }));
      }
    }
  }]);
}(React.Component);
var _default = exports.default = KeyboardAvoidingView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,