d6bfbd292131c53d26ffc5c7625bd404
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getIsReactActEnvironment = getIsReactActEnvironment;
exports.setReactActEnvironment = setIsReactActEnvironment;
var React = _interopRequireWildcard(require("react"));
var _reactTestRenderer = require("react-test-renderer");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var reactAct = typeof React.act === 'function' ? React.act : _reactTestRenderer.act;
function setIsReactActEnvironment(isReactActEnvironment) {
  globalThis.IS_REACT_ACT_ENVIRONMENT = isReactActEnvironment;
}
function getIsReactActEnvironment() {
  return globalThis.IS_REACT_ACT_ENVIRONMENT;
}
function withGlobalActEnvironment(actImplementation) {
  return function (callback) {
    var previousActEnvironment = getIsReactActEnvironment();
    setIsReactActEnvironment(true);
    try {
      var callbackNeedsToBeAwaited = false;
      var actResult = actImplementation(function () {
        var result = callback();
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
          callbackNeedsToBeAwaited = true;
        }
        return result;
      });
      if (callbackNeedsToBeAwaited) {
        var thenable = actResult;
        return {
          then: function then(resolve, reject) {
            thenable.then(function (returnValue) {
              setIsReactActEnvironment(previousActEnvironment);
              resolve(returnValue);
            }, function (error) {
              setIsReactActEnvironment(previousActEnvironment);
              reject(error);
            });
          }
        };
      } else {
        setIsReactActEnvironment(previousActEnvironment);
        return actResult;
      }
    } catch (error) {
      setIsReactActEnvironment(previousActEnvironment);
      throw error;
    }
  };
}
var act = withGlobalActEnvironment(reactAct);
var _default = exports.default = act;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdFRlc3RSZW5kZXJlciIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJlYWN0QWN0IiwiYWN0Iiwic2V0SXNSZWFjdEFjdEVudmlyb25tZW50IiwiaXNSZWFjdEFjdEVudmlyb25tZW50IiwiZ2xvYmFsVGhpcyIsIklTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVCIsImdldElzUmVhY3RBY3RFbnZpcm9ubWVudCIsIndpdGhHbG9iYWxBY3RFbnZpcm9ubWVudCIsImFjdEltcGxlbWVudGF0aW9uIiwiY2FsbGJhY2siLCJwcmV2aW91c0FjdEVudmlyb25tZW50IiwiY2FsbGJhY2tOZWVkc1RvQmVBd2FpdGVkIiwiYWN0UmVzdWx0IiwicmVzdWx0IiwidGhlbiIsInRoZW5hYmxlIiwicmVzb2x2ZSIsInJlamVjdCIsInJldHVyblZhbHVlIiwiZXJyb3IiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvYWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBhbmQgdGhlIGFjdCgpIGltcGxlbWVudGF0aW9uIGlzIHNvdXJjZWQgZnJvbSByZWFjdC10ZXN0aW5nLWxpYnJhcnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZXN0aW5nLWxpYnJhcnkvcmVhY3QtdGVzdGluZy1saWJyYXJ5L2Jsb2IvM2RjZDhhOTY0OWUyNTA1NGMwZTY1MGQ5NWZjYTIzMTdiNzAwODU3Ni90eXBlcy9pbmRleC5kLnRzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhY3QgYXMgcmVhY3RUZXN0UmVuZGVyZXJBY3QgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuY29uc3QgcmVhY3RBY3QgPSB0eXBlb2YgUmVhY3QuYWN0ID09PSAnZnVuY3Rpb24nID8gUmVhY3QuYWN0IDogcmVhY3RUZXN0UmVuZGVyZXJBY3Q7XG50eXBlIFJlYWN0QWN0ID0gMCBleHRlbmRzIDEgJiB0eXBlb2YgUmVhY3QuYWN0ID8gdHlwZW9mIHJlYWN0VGVzdFJlbmRlcmVyQWN0IDogdHlwZW9mIFJlYWN0LmFjdDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdHdnL3JlYWN0LTE4L2Rpc2N1c3Npb25zLzEwMiBmb3IgbW9yZSBjb250ZXh0IG9uIGdsb2JhbC5JU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlRcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgdmFyIElTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVDogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gc2V0SXNSZWFjdEFjdEVudmlyb25tZW50KGlzUmVhY3RBY3RFbnZpcm9ubWVudDogYm9vbGVhbiB8IHVuZGVmaW5lZCkge1xuICBnbG9iYWxUaGlzLklTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVCA9IGlzUmVhY3RBY3RFbnZpcm9ubWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50KCkge1xuICByZXR1cm4gZ2xvYmFsVGhpcy5JU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQ7XG59XG5cbmZ1bmN0aW9uIHdpdGhHbG9iYWxBY3RFbnZpcm9ubWVudChhY3RJbXBsZW1lbnRhdGlvbjogUmVhY3RBY3QpIHtcbiAgcmV0dXJuIChjYWxsYmFjazogUGFyYW1ldGVyczxSZWFjdEFjdD5bMF0pID0+IHtcbiAgICBjb25zdCBwcmV2aW91c0FjdEVudmlyb25tZW50ID0gZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50KCk7XG4gICAgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50KHRydWUpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZSByZXR1cm4gdmFsdWUgb2YgYGFjdGAgaXMgYWx3YXlzIGEgdGhlbmFibGUuXG4gICAgICBsZXQgY2FsbGJhY2tOZWVkc1RvQmVBd2FpdGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBhY3RSZXN1bHQgPSBhY3RJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgaXMgdG9vIHN0cmljdCBoZXJlXG4gICAgICAgIGlmIChyZXN1bHQgIT09IG51bGwgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2FsbGJhY2tOZWVkc1RvQmVBd2FpdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjYWxsYmFja05lZWRzVG9CZUF3YWl0ZWQpIHtcbiAgICAgICAgY29uc3QgdGhlbmFibGUgPSBhY3RSZXN1bHQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGhlbjogKHJlc29sdmU6ICh2YWx1ZTogbmV2ZXIpID0+IG5ldmVyLCByZWplY3Q6ICh2YWx1ZTogbmV2ZXIpID0+IG5ldmVyKSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9jYXRjaC1vci1yZXR1cm4sIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cbiAgICAgICAgICAgIHRoZW5hYmxlLnRoZW4oXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL2Fsd2F5cy1yZXR1cm5cbiAgICAgICAgICAgICAgKHJldHVyblZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50KHByZXZpb3VzQWN0RW52aXJvbm1lbnQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUgYXMgbmV2ZXIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJc1JlYWN0QWN0RW52aXJvbm1lbnQocHJldmlvdXNBY3RFbnZpcm9ubWVudCk7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yIGFzIG5ldmVyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChwcmV2aW91c0FjdEVudmlyb25tZW50KTtcbiAgICAgICAgcmV0dXJuIGFjdFJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gQ2FuJ3QgYmUgYSBgZmluYWxseSB7fWAgYmxvY2sgc2luY2Ugd2UgZG9uJ3Qga25vdyBpZiB3ZSBoYXZlIHRvIGltbWVkaWF0ZWx5IHJlc3RvcmUgSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UXG4gICAgICAvLyBvciBpZiB3ZSBoYXZlIHRvIGF3YWl0IHRoZSBjYWxsYmFjayBmaXJzdC5cbiAgICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChwcmV2aW91c0FjdEVudmlyb25tZW50KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gQHRzLWV4cGVjdC1lcnJvcjogdHlwaW5ncyBnZXQgdG9vIGNvbXBsZXhcbmNvbnN0IGFjdCA9IHdpdGhHbG9iYWxBY3RFbnZpcm9ubWVudChyZWFjdEFjdCkgYXMgUmVhY3RBY3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGFjdDtcbmV4cG9ydCB7IGdldElzUmVhY3RBY3RFbnZpcm9ubWVudCwgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50IGFzIHNldFJlYWN0QWN0RW52aXJvbm1lbnQgfTtcbiJdLCJtYXBw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