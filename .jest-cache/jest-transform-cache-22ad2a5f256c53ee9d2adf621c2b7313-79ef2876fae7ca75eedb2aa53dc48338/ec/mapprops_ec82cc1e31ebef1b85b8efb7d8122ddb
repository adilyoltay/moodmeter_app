4bd2c3771875bd277fa2eb23d7394144
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultMapProps = defaultMapProps;
var _reactNative = require("react-native");
var _object = require("./object");
var propsToDisplay = ['accessible', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityLabel', 'accessibilityLabelledBy', 'accessibilityRole', 'accessibilityViewIsModal', 'alt', 'aria-busy', 'aria-checked', 'aria-disabled', 'aria-expanded', 'aria-hidden', 'aria-label', 'aria-labelledby', 'aria-modal', 'aria-selected', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'defaultValue', 'editable', 'importantForAccessibility', 'nativeID', 'placeholder', 'pointerEvents', 'role', 'testID', 'title', 'value'];
function defaultMapProps(props) {
  var result = {};
  var styles = _reactNative.StyleSheet.flatten(props.style);
  var styleToDisplay = extractStyle(styles);
  if (styleToDisplay !== undefined) {
    result.style = styleToDisplay;
  }
  var accessibilityState = (0, _object.removeUndefinedKeys)(props.accessibilityState);
  if (accessibilityState !== undefined) {
    result.accessibilityState = accessibilityState;
  }
  var accessibilityValue = (0, _object.removeUndefinedKeys)(props.accessibilityValue);
  if (accessibilityValue !== undefined) {
    result.accessibilityValue = accessibilityValue;
  }
  propsToDisplay.forEach(function (propName) {
    if (propName in props) {
      result[propName] = props[propName];
    }
  });
  return result;
}
function extractStyle(style) {
  if (style == null) {
    return undefined;
  }
  var result = {};
  if (style.display === 'none') {
    result.display = 'none';
  }
  if (style.opacity === 0) {
    result.opacity = 0;
  }
  var hasAnyKeys = Object.keys(result).length > 0;
  return hasAnyKeys ? result : undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX29iamVjdCIsInByb3BzVG9EaXNwbGF5IiwiZGVmYXVsdE1hcFByb3BzIiwicHJvcHMiLCJyZXN1bHQiLCJzdHlsZXMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlIiwic3R5bGVUb0Rpc3BsYXkiLCJleHRyYWN0U3R5bGUiLCJ1bmRlZmluZWQiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJyZW1vdmVVbmRlZmluZWRLZXlzIiwiYWNjZXNzaWJpbGl0eVZhbHVlIiwiZm9yRWFjaCIsInByb3BOYW1lIiwiZGlzcGxheSIsIm9wYWNpdHkiLCJoYXNBbnlLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL21hcC1wcm9wcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IHsgcmVtb3ZlVW5kZWZpbmVkS2V5cyB9IGZyb20gJy4vb2JqZWN0JztcblxuZXhwb3J0IHR5cGUgTWFwUHJvcHNGdW5jdGlvbiA9IChwcm9wczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pID0+IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG5jb25zdCBwcm9wc1RvRGlzcGxheSA9IFtcbiAgJ2FjY2Vzc2libGUnLFxuICAnYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuJyxcbiAgJ2FjY2Vzc2liaWxpdHlIaW50JyxcbiAgJ2FjY2Vzc2liaWxpdHlMYWJlbCcsXG4gICdhY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeScsXG4gICdhY2Nlc3NpYmlsaXR5Um9sZScsXG4gICdhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWwnLFxuICAnYWx0JyxcbiAgJ2FyaWEtYnVzeScsXG4gICdhcmlhLWNoZWNrZWQnLFxuICAnYXJpYS1kaXNhYmxlZCcsXG4gICdhcmlhLWV4cGFuZGVkJyxcbiAgJ2FyaWEtaGlkZGVuJyxcbiAgJ2FyaWEtbGFiZWwnLFxuICAnYXJpYS1sYWJlbGxlZGJ5JyxcbiAgJ2FyaWEtbW9kYWwnLFxuICAnYXJpYS1zZWxlY3RlZCcsXG4gICdhcmlhLXZhbHVlbWF4JyxcbiAgJ2FyaWEtdmFsdWVtaW4nLFxuICAnYXJpYS12YWx1ZW5vdycsXG4gICdhcmlhLXZhbHVldGV4dCcsXG4gICdkZWZhdWx0VmFsdWUnLFxuICAnZWRpdGFibGUnLFxuICAnaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eScsXG4gICduYXRpdmVJRCcsXG4gICdwbGFjZWhvbGRlcicsXG4gICdwb2ludGVyRXZlbnRzJyxcbiAgJ3JvbGUnLFxuICAndGVzdElEJyxcbiAgJ3RpdGxlJyxcbiAgJ3ZhbHVlJyxcbl0gYXMgY29uc3Q7XG5cbi8qKlxuICogUHJlc2VydmUgcHJvcHMgdGhhdCBhcmUgaGVscGZ1bCBpbiBkaWFnbm9zaW5nIHRlc3QgZmFpbHVyZXMsIHdoaWxlIHN0cmlwcGluZyByZXN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWFwUHJvcHMocHJvcHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICBjb25zdCByZXN1bHQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge307XG5cbiAgY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5mbGF0dGVuKHByb3BzLnN0eWxlIGFzIFZpZXdTdHlsZSk7XG4gIGNvbnN0IHN0eWxlVG9EaXNwbGF5ID0gZXh0cmFjdFN0eWxlKHN0eWxlcyk7XG4gIGlmIChzdHlsZVRvRGlzcGxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVzdWx0LnN0eWxlID0gc3R5bGVUb0Rpc3BsYXk7XG4gIH1cblxuICBjb25zdCBhY2Nlc3NpYmlsaXR5U3RhdGUgPSByZW1vdmVVbmRlZmluZWRLZXlzKHByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSk7XG4gIGlmIChhY2Nlc3NpYmlsaXR5U3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJlc3VsdC5hY2Nlc3NpYmlsaXR5U3RhdGUgPSBhY2Nlc3NpYmlsaXR5U3RhdGU7XG4gIH1cblxuICBjb25zdCBhY2Nlc3NpYmlsaXR5VmFsdWUgPSByZW1vdmVVbmRlZmluZWRLZXlzKHByb3BzLmFjY2Vzc2liaWxpdHlWYWx1ZSk7XG4gIGlmIChhY2Nlc3NpYmlsaXR5VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJlc3VsdC5hY2Nlc3NpYmlsaXR5VmFsdWUgPSBhY2Nlc3NpYmlsaXR5VmFsdWU7XG4gIH1cblxuICBwcm9wc1RvRGlzcGxheS5mb3JFYWNoKChwcm9wTmFtZSkgPT4ge1xuICAgIGlmIChwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgcmVzdWx0W3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RTdHlsZShzdHlsZTogVmlld1N0eWxlIHwgdW5kZWZpbmVkKSB7XG4gIGlmIChzdHlsZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fTtcbiAgaWYgKHN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgIHJlc3VsdC5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG5cbiAgaWYgKHN0eWxlLm9wYWNpdHkgPT09IDApIHtcbiAgICByZXN1bHQub3BhY2l0eSA9IDA7XG4gIH1cblxuICBjb25zdCBoYXNBbnlLZXlzID0gT2JqZWN0LmtleXMocmVzdWx0KS5sZW5ndGggPiAwO1xuICByZXR1cm4gaGFzQW55S2V5cyA/IHJlc3VsdCA6IHVuZGVmaW5lZDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsT0FBQSxHQUFBRCxP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