0b8c0fcb61543292bda86c4eb544b212
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeDisabled = toBeDisabled;
exports.toBeEnabled = toBeEnabled;
var _jestMatcherUtils = require("jest-matcher-utils");
var _redent = _interopRequireDefault(require("redent"));
var _accessibility = require("../helpers/accessibility");
var _componentTree = require("../helpers/component-tree");
var _formatElement = require("../helpers/format-element");
var _utils = require("./utils");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function toBeDisabled(element) {
  var _this = this;
  (0, _utils.checkHostElement)(element, toBeDisabled, this);
  var isDisabled = (0, _accessibility.computeAriaDisabled)(element) || isAncestorDisabled(element);
  return {
    pass: isDisabled,
    message: function message() {
      var is = _this.isNot ? 'is' : 'is not';
      return [(0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toBeDisabled`, 'element', ''), '', `Received element ${is} disabled:`, (0, _redent.default)((0, _formatElement.formatElement)(element), 2)].join('\n');
    }
  };
}
function toBeEnabled(element) {
  var _this2 = this;
  (0, _utils.checkHostElement)(element, toBeEnabled, this);
  var isEnabled = !(0, _accessibility.computeAriaDisabled)(element) && !isAncestorDisabled(element);
  return {
    pass: isEnabled,
    message: function message() {
      var is = _this2.isNot ? 'is' : 'is not';
      return [(0, _jestMatcherUtils.matcherHint)(`${_this2.isNot ? '.not' : ''}.toBeEnabled`, 'element', ''), '', `Received element ${is} enabled:`, (0, _redent.default)((0, _formatElement.formatElement)(element), 2)].join('\n');
    }
  };
}
function isAncestorDisabled(element) {
  var parent = (0, _componentTree.getHostParent)(element);
  if (parent == null) {
    return false;
  }
  return (0, _accessibility.computeAriaDisabled)(parent) || isAncestorDisabled(parent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdE1hdGNoZXJVdGlscyIsInJlcXVpcmUiLCJfcmVkZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hY2Nlc3NpYmlsaXR5IiwiX2NvbXBvbmVudFRyZWUiLCJfZm9ybWF0RWxlbWVudCIsIl91dGlscyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRvQmVEaXNhYmxlZCIsImVsZW1lbnQiLCJfdGhpcyIsImNoZWNrSG9zdEVsZW1lbnQiLCJpc0Rpc2FibGVkIiwiY29tcHV0ZUFyaWFEaXNhYmxlZCIsImlzQW5jZXN0b3JEaXNhYmxlZCIsInBhc3MiLCJtZXNzYWdlIiwiaXMiLCJpc05vdCIsIm1hdGNoZXJIaW50IiwiZm9ybWF0RWxlbWVudCIsImpvaW4iLCJ0b0JlRW5hYmxlZCIsIl90aGlzMiIsImlzRW5hYmxlZCIsInBhcmVudCIsImdldEhvc3RQYXJlbnQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0Y2hlcnMvdG8tYmUtZGlzYWJsZWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgbWF0Y2hlckhpbnQgfSBmcm9tICdqZXN0LW1hdGNoZXItdXRpbHMnO1xuaW1wb3J0IHJlZGVudCBmcm9tICdyZWRlbnQnO1xuXG5pbXBvcnQgeyBjb21wdXRlQXJpYURpc2FibGVkIH0gZnJvbSAnLi4vaGVscGVycy9hY2Nlc3NpYmlsaXR5JztcbmltcG9ydCB7IGdldEhvc3RQYXJlbnQgfSBmcm9tICcuLi9oZWxwZXJzL2NvbXBvbmVudC10cmVlJztcbmltcG9ydCB7IGZvcm1hdEVsZW1lbnQgfSBmcm9tICcuLi9oZWxwZXJzL2Zvcm1hdC1lbGVtZW50JztcbmltcG9ydCB7IGNoZWNrSG9zdEVsZW1lbnQgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQmVEaXNhYmxlZCh0aGlzOiBqZXN0Lk1hdGNoZXJDb250ZXh0LCBlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSkge1xuICBjaGVja0hvc3RFbGVtZW50KGVsZW1lbnQsIHRvQmVEaXNhYmxlZCwgdGhpcyk7XG5cbiAgY29uc3QgaXNEaXNhYmxlZCA9IGNvbXB1dGVBcmlhRGlzYWJsZWQoZWxlbWVudCkgfHwgaXNBbmNlc3RvckRpc2FibGVkKGVsZW1lbnQpO1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogaXNEaXNhYmxlZCxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCBpcyA9IHRoaXMuaXNOb3QgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBtYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVEaXNhYmxlZGAsICdlbGVtZW50JywgJycpLFxuICAgICAgICAnJyxcbiAgICAgICAgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gZGlzYWJsZWQ6YCxcbiAgICAgICAgcmVkZW50KGZvcm1hdEVsZW1lbnQoZWxlbWVudCksIDIpLFxuICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9CZUVuYWJsZWQodGhpczogamVzdC5NYXRjaGVyQ29udGV4dCwgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpIHtcbiAgY2hlY2tIb3N0RWxlbWVudChlbGVtZW50LCB0b0JlRW5hYmxlZCwgdGhpcyk7XG5cbiAgY29uc3QgaXNFbmFibGVkID0gIWNvbXB1dGVBcmlhRGlzYWJsZWQoZWxlbWVudCkgJiYgIWlzQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KTtcblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGlzRW5hYmxlZCxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCBpcyA9IHRoaXMuaXNOb3QgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBtYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVFbmFibGVkYCwgJ2VsZW1lbnQnLCAnJyksXG4gICAgICAgICcnLFxuICAgICAgICBgUmVjZWl2ZWQgZWxlbWVudCAke2lzfSBlbmFibGVkOmAsXG4gICAgICAgIHJlZGVudChmb3JtYXRFbGVtZW50KGVsZW1lbnQpLCAyKSxcbiAgICAgIF0uam9pbignXFxuJyk7XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbmNlc3RvckRpc2FibGVkKGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlKTogYm9vbGVhbiB7XG4gIGNvbnN0IHBhcmVudCA9IGdldEhvc3RQYXJlbnQoZWxlbWVudCk7XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb21wdXRlQXJpYURpc2FibGVkKHBhcmVudCkgfHwgaXNBbmNlc3RvckRpc2FibGVkKHBhcmVudCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxJQUFBQSxpQkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsY0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksY0FBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssY0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sTUFBQSxHQUFBTixPQUFBO0FBQTJDLFNBQUFFLHVCQUFBSyxDQUFBO0VBQUEsT0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQUVwQyxTQUFTRyxZQUFZQSxDQUE0QkMsT0FBMEIsRUFBRTtFQUFBLElBQUFDLEtBQUE7RUFDbEYsSUFBQU4sTUFBQSxDQUFBTyxnQkFBZ0IsRUFBQ0YsT0FBTyxFQUFFRCxZQUFZLEVBQUUsSUFBSSxDQUFDO0VBRTdDLElBQU1JLFVBQVUsR0FBRyxJQUFBWCxjQUFBLENBQUFZLG1CQUFtQixFQUFDSixPQUFPLENBQUMsSUFBSUssa0JBQWtCLENBQUNMLE9BQU8sQ0FBQztFQUU5RSxPQUFPO0lBQ0xNLElBQUksRUFBRUgsVUFBVTtJQUNoQkksT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUTtNQUNiLElBQU1DLEVBQUUsR0FBR1AsS0FBSSxDQUFDUSxLQUFLLEdBQUcsSUFBSSxHQUFHLFFBQVE7TUFDdkMsT0FBTyxDQUNMLElBQUFyQixpQkFBQSxDQUFBc0IsV0FBVyxFQUFDLEdBQUdULEtBQUksQ0FBQ1EsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQ3RFLEVBQUUsRUFDRixvQkFBb0JELEVBQUUsWUFBWSxFQUNsQyxJQUFBbEIsT0FBQSxDQUFBUSxPQUFNLEVBQUMsSUFBQUosY0FBQSxDQUFBaUIsYUFBYSxFQUFDWCxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDbEMsQ0FBQ1ksSUFBSSxDQUFDLElBQUksQ0FBQztJQUNkO0VBQ0YsQ0FBQztBQUNIO0FBRU8sU0FBU0MsV0FBV0EsQ0FBNEJiLE9BQTBCLEVBQUU7RUFBQSxJQUFBYyxNQUFBO0VBQ2pGLElBQUFuQixNQUFBLENBQUFPLGdCQUFnQixFQUFDRixPQUFPLEVBQUVhLFdBQVcsRUFBRSxJQUFJLENBQUM7RUFFNUMsSUFBTUUsU0FBUyxHQUFHLENBQUMsSUFBQXZCLGNBQUEsQ0FBQVksbUJBQW1CLEVBQUNKLE9BQU8sQ0FBQyxJQUFJLENBQUNLLGtCQUFrQixDQUFDTCxPQUFPLENBQUM7RUFFL0UsT0FBTztJQUNMTSxJQUFJLEVBQUVTLFNBQVM7SUFDZlIsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUTtNQUNiLElBQU1DLEVBQUUsR0FBR00sTUFBSSxDQUFDTCxLQUFLLEdBQUcsSUFBSSxHQUFHLFFBQVE7TUFDdkMsT0FBTyxDQUNMLElBQUFyQixpQkFBQSxDQUFBc0IsV0FBVyxFQUFDLEdBQUdJLE1BQUksQ0FBQ0wsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQ3JFLEVBQUUsRUFDRixvQkFBb0JELEVBQUUsV0FBVyxFQUNqQyxJQUFBbEIsT0FBQSxDQUFBUSxPQUFNLEVBQUMsSUFBQUosY0FBQSxDQUFBaUIsYUFBYSxFQUFDWCxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDbEMsQ0FBQ1ksSUFBSSxDQUFDLElBQUksQ0FBQztJQUNkO0VBQ0YsQ0FBQztBQUNIO0FBRUEsU0FBU1Asa0JBQWtCQSxDQUFDTCxPQUEwQixFQUFXO0VBQy9ELElBQU1nQixNQUFNLEdBQUcsSUFBQXZCLGNBQUEsQ0FBQXdCLGFBQWEsRUFBQ2pCLE9BQU8sQ0FBQztFQUNyQyxJQUFJZ0IsTUFBTSxJQUFJLElBQUksRUFBRTtJQUNsQixPQUFPLEtBQUs7RUFDZDtFQUVBLE9BQU8sSUFBQXhCLGNBQUEsQ0FBQVksbUJBQW1CLEVBQUNZLE1BQU0sQ0FBQyxJQUFJWCxrQkFBa0IsQ0FBQ1csTUFBTSxDQUFDO0FBQ2xFIiwiaWdub3JlTGlzdCI6W119