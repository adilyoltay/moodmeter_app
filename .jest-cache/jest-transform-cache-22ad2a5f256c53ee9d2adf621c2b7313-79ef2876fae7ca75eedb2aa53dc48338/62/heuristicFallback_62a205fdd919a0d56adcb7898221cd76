5d425700565618abcad321d8d59e2477
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectLanguage = detectLanguage;
exports.detectScenario = detectScenario;
exports.getHeuristicText = getHeuristicText;
var TEMPLATES = {
  tr: {
    anxiety: 'Şu an zor bir an olabilir. Beraber kısa bir nefes çalışması yapalım: 4 saniye al, 4 saniye tut, 6 saniye ver. Hazır olduğunda düşünceni günlüğe not edebilirsin.',
    sleep: 'Dinlenmekte zorlanıyorsan, ekran parlaklığını azalt ve 4-7-8 nefes tekniğini dene. Kısa bir gevşeme ile uykuya hazırlanabiliriz.',
    generic: 'Şu an dış servisler yanıt veremiyor ama beraberiz. Kısa bir nefes egzersizi deneyelim: 4-4-6. İstersen günlüğe kısa bir not ekleyebilirsin.'
  },
  en: {
    anxiety: "This might be a hard moment. Let's try a short breathing: inhale 4s, hold 4s, exhale 6s. When ready, jot a quick note in your journal.",
    sleep: 'If sleep is difficult, dim your screen and try 4-7-8 breathing. A short relaxation can help prepare for rest.',
    generic: "External AI is unavailable for now, but I'm here. Try 4-4-6 breathing. You can also add a short journal note."
  }
};
function detectScenario() {
  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var lastUser = (messages || []).filter(function (m) {
    return m.role === 'user';
  }).slice(-1)[0];
  var raw = ((lastUser == null ? void 0 : lastUser.content) || '').toLowerCase();
  if (/panik|kayg|endişe|anx/i.test(raw)) return 'anxiety';
  if (/uyku|gece|sleep/i.test(raw)) return 'sleep';
  return 'generic';
}
function detectLanguage(context) {
  var _therapeuticProfile;
  var pref = context == null || (_therapeuticProfile = context.therapeuticProfile) == null || (_therapeuticProfile = _therapeuticProfile.preferredLanguage) == null || _therapeuticProfile.toLowerCase == null ? void 0 : _therapeuticProfile.toLowerCase();
  return pref === 'en' ? 'en' : 'tr';
}
function getHeuristicText() {
  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var context = arguments.length > 1 ? arguments[1] : undefined;
  var lang = detectLanguage(context);
  var scenario = detectScenario(messages);
  return TEMPLATES[lang][scenario];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJURU1QTEFURVMiLCJ0ciIsImFueGlldHkiLCJzbGVlcCIsImdlbmVyaWMiLCJlbiIsImRldGVjdFNjZW5hcmlvIiwibWVzc2FnZXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJsYXN0VXNlciIsImZpbHRlciIsIm0iLCJyb2xlIiwic2xpY2UiLCJyYXciLCJjb250ZW50IiwidG9Mb3dlckNhc2UiLCJ0ZXN0IiwiZGV0ZWN0TGFuZ3VhZ2UiLCJjb250ZXh0IiwiX3RoZXJhcGV1dGljUHJvZmlsZSIsInByZWYiLCJ0aGVyYXBldXRpY1Byb2ZpbGUiLCJwcmVmZXJyZWRMYW5ndWFnZSIsImdldEhldXJpc3RpY1RleHQiLCJsYW5nIiwic2NlbmFyaW8iXSwic291cmNlcyI6WyJoZXVyaXN0aWNGYWxsYmFjay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEFJTWVzc2FnZSwgQ29udmVyc2F0aW9uQ29udGV4dCB9IGZyb20gJ0AvZmVhdHVyZXMvYWkvdHlwZXMnO1xuXG50eXBlIExhbmcgPSAndHInIHwgJ2VuJztcbnR5cGUgU2NlbmFyaW8gPSAnYW54aWV0eScgfCAnc2xlZXAnIHwgJ2dlbmVyaWMnO1xuXG5jb25zdCBURU1QTEFURVM6IFJlY29yZDxMYW5nLCBSZWNvcmQ8U2NlbmFyaW8sIHN0cmluZz4+ID0ge1xuICB0cjoge1xuICAgIGFueGlldHk6ICfFnnUgYW4gem9yIGJpciBhbiBvbGFiaWxpci4gQmVyYWJlciBrxLFzYSBiaXIgbmVmZXMgw6dhbMSxxZ9tYXPEsSB5YXBhbMSxbTogNCBzYW5peWUgYWwsIDQgc2FuaXllIHR1dCwgNiBzYW5peWUgdmVyLiBIYXrEsXIgb2xkdcSfdW5kYSBkw7zFn8O8bmNlbmkgZ8O8bmzDvMSfZSBub3QgZWRlYmlsaXJzaW4uJyxcbiAgICBzbGVlcDogJ0Rpbmxlbm1la3RlIHpvcmxhbsSxeW9yc2FuLCBla3JhbiBwYXJsYWtsxLHEn8SxbsSxIGF6YWx0IHZlIDQtNy04IG5lZmVzIHRla25pxJ9pbmkgZGVuZS4gS8Sxc2EgYmlyIGdldsWfZW1lIGlsZSB1eWt1eWEgaGF6xLFybGFuYWJpbGlyaXouJyxcbiAgICAvLyDinIUgUkVNT1ZFRDogZXJwIHNjZW5hcmlvIC0gRVJQIG1vZHVsZSBkZWxldGVkXG4gICAgZ2VuZXJpYzogJ8WedSBhbiBkxLHFnyBzZXJ2aXNsZXIgeWFuxLF0IHZlcmVtaXlvciBhbWEgYmVyYWJlcml6LiBLxLFzYSBiaXIgbmVmZXMgZWd6ZXJzaXppIGRlbmV5ZWxpbTogNC00LTYuIMSwc3RlcnNlbiBnw7xubMO8xJ9lIGvEsXNhIGJpciBub3QgZWtsZXllYmlsaXJzaW4uJ1xuICB9LFxuICBlbjoge1xuICAgIGFueGlldHk6IFwiVGhpcyBtaWdodCBiZSBhIGhhcmQgbW9tZW50LiBMZXQncyB0cnkgYSBzaG9ydCBicmVhdGhpbmc6IGluaGFsZSA0cywgaG9sZCA0cywgZXhoYWxlIDZzLiBXaGVuIHJlYWR5LCBqb3QgYSBxdWljayBub3RlIGluIHlvdXIgam91cm5hbC5cIixcbiAgICBzbGVlcDogJ0lmIHNsZWVwIGlzIGRpZmZpY3VsdCwgZGltIHlvdXIgc2NyZWVuIGFuZCB0cnkgNC03LTggYnJlYXRoaW5nLiBBIHNob3J0IHJlbGF4YXRpb24gY2FuIGhlbHAgcHJlcGFyZSBmb3IgcmVzdC4nLFxuICAgIC8vIOKchSBSRU1PVkVEOiBlcnAgc2NlbmFyaW8gLSBFUlAgbW9kdWxlIGRlbGV0ZWRcbiAgICBnZW5lcmljOiBcIkV4dGVybmFsIEFJIGlzIHVuYXZhaWxhYmxlIGZvciBub3csIGJ1dCBJJ20gaGVyZS4gVHJ5IDQtNC02IGJyZWF0aGluZy4gWW91IGNhbiBhbHNvIGFkZCBhIHNob3J0IGpvdXJuYWwgbm90ZS5cIlxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0U2NlbmFyaW8obWVzc2FnZXM6IEFJTWVzc2FnZVtdID0gW10pOiBTY2VuYXJpbyB7XG4gIGNvbnN0IGxhc3RVc2VyID0gKG1lc3NhZ2VzIHx8IFtdKS5maWx0ZXIobSA9PiBtLnJvbGUgPT09ICd1c2VyJykuc2xpY2UoLTEpWzBdO1xuICBjb25zdCByYXcgPSAobGFzdFVzZXI/LmNvbnRlbnQgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gIGlmICgvcGFuaWt8a2F5Z3xlbmRpxZ9lfGFueC9pLnRlc3QocmF3KSkgcmV0dXJuICdhbnhpZXR5JztcbiAgaWYgKC91eWt1fGdlY2V8c2xlZXAvaS50ZXN0KHJhdykpIHJldHVybiAnc2xlZXAnO1xuICAvLyDinIUgUkVNT1ZFRDogRVJQIHBhdHRlcm4gZGV0ZWN0aW9uIC0gRVJQIG1vZHVsZSBkZWxldGVkXG4gIHJldHVybiAnZ2VuZXJpYyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RMYW5ndWFnZShjb250ZXh0PzogQ29udmVyc2F0aW9uQ29udGV4dCk6IExhbmcge1xuICBjb25zdCBwcmVmID0gKGNvbnRleHQgYXMgYW55KT8udGhlcmFwZXV0aWNQcm9maWxlPy5wcmVmZXJyZWRMYW5ndWFnZT8udG9Mb3dlckNhc2U/LigpO1xuICByZXR1cm4gcHJlZiA9PT0gJ2VuJyA/ICdlbicgOiAndHInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGV1cmlzdGljVGV4dChtZXNzYWdlczogQUlNZXNzYWdlW10gPSBbXSwgY29udGV4dD86IENvbnZlcnNhdGlvbkNvbnRleHQpOiBzdHJpbmcge1xuICBjb25zdCBsYW5nID0gZGV0ZWN0TGFuZ3VhZ2UoY29udGV4dCk7XG4gIGNvbnN0IHNjZW5hcmlvID0gZGV0ZWN0U2NlbmFyaW8obWVzc2FnZXMpO1xuICByZXR1cm4gVEVNUExBVEVTW2xhbmddW3NjZW5hcmlvXTtcbn1cblxuXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLElBQU1BLFNBQWlELEdBQUc7RUFDeERDLEVBQUUsRUFBRTtJQUNGQyxPQUFPLEVBQUUsa0tBQWtLO0lBQzNLQyxLQUFLLEVBQUUsa0lBQWtJO0lBRXpJQyxPQUFPLEVBQUU7RUFDWCxDQUFDO0VBQ0RDLEVBQUUsRUFBRTtJQUNGSCxPQUFPLEVBQUUsd0lBQXdJO0lBQ2pKQyxLQUFLLEVBQUUsK0dBQStHO0lBRXRIQyxPQUFPLEVBQUU7RUFDWDtBQUNGLENBQUM7QUFFTSxTQUFTRSxjQUFjQSxDQUFBLEVBQXVDO0VBQUEsSUFBdENDLFFBQXFCLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLEVBQUU7RUFDdkQsSUFBTUcsUUFBUSxHQUFHLENBQUNKLFFBQVEsSUFBSSxFQUFFLEVBQUVLLE1BQU0sQ0FBQyxVQUFBQyxDQUFDO0lBQUEsT0FBSUEsQ0FBQyxDQUFDQyxJQUFJLEtBQUssTUFBTTtFQUFBLEVBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdFLElBQU1DLEdBQUcsR0FBRyxDQUFDLENBQUFMLFFBQVEsb0JBQVJBLFFBQVEsQ0FBRU0sT0FBTyxLQUFJLEVBQUUsRUFBRUMsV0FBVyxDQUFDLENBQUM7RUFDbkQsSUFBSSx3QkFBd0IsQ0FBQ0MsSUFBSSxDQUFDSCxHQUFHLENBQUMsRUFBRSxPQUFPLFNBQVM7RUFDeEQsSUFBSSxrQkFBa0IsQ0FBQ0csSUFBSSxDQUFDSCxHQUFHLENBQUMsRUFBRSxPQUFPLE9BQU87RUFFaEQsT0FBTyxTQUFTO0FBQ2xCO0FBRU8sU0FBU0ksY0FBY0EsQ0FBQ0MsT0FBNkIsRUFBUTtFQUFBLElBQUFDLG1CQUFBO0VBQ2xFLElBQU1DLElBQUksR0FBSUYsT0FBTyxhQUFBQyxtQkFBQSxHQUFQRCxPQUFPLENBQVVHLGtCQUFrQixjQUFBRixtQkFBQSxHQUFwQ0EsbUJBQUEsQ0FBc0NHLGlCQUFpQixhQUF2REgsbUJBQUEsQ0FBeURKLFdBQVcsb0JBQXBFSSxtQkFBQSxDQUF5REosV0FBVyxDQUFHLENBQUM7RUFDckYsT0FBT0ssSUFBSSxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUNwQztBQUVPLFNBQVNHLGdCQUFnQkEsQ0FBQSxFQUFvRTtFQUFBLElBQW5FbkIsUUFBcUIsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRTtFQUFBLElBQUVhLE9BQTZCLEdBQUFiLFNBQUEsQ0FBQUMsTUFBQSxPQUFBRCxTQUFBLE1BQUFFLFNBQUE7RUFDeEYsSUFBTWlCLElBQUksR0FBR1AsY0FBYyxDQUFDQyxPQUFPLENBQUM7RUFDcEMsSUFBTU8sUUFBUSxHQUFHdEIsY0FBYyxDQUFDQyxRQUFRLENBQUM7RUFDekMsT0FBT1AsU0FBUyxDQUFDMkIsSUFBSSxDQUFDLENBQUNDLFFBQVEsQ0FBQztBQUNsQyIsImlnbm9yZUxpc3QiOltdfQ==