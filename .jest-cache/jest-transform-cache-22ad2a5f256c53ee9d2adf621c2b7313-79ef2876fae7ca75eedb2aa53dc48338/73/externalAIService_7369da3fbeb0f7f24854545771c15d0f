02270471796127abc0bcf72e43d59593
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.externalAIService = exports.default = void 0;
var _env2 = require("expo/virtual/env");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _featureFlags = require("../../../constants/featureFlags");
var _types = require("../types");
var _aiTelemetry = require("../telemetry/aiTelemetry");
var _contentFilter = require("../safety/contentFilter");
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _edgeAIService = require("../../../services/edgeAIService");
var ExternalAIService = function () {
  function ExternalAIService() {
    (0, _classCallCheck2.default)(this, ExternalAIService);
    this.isEnabled = false;
    this.providers = new Map();
    this.activeProvider = null;
    this.requestQueue = new Map();
    this.rateLimiter = new Map();
    this.cacheConfig = {
      enabled: false,
      ttlMs: 0,
      maxSize: 100,
      useStorage: false
    };
    this.rateLimitConfig = {
      enabled: true,
      requestsPerMinute: 60,
      requestsPerHour: 1000,
      requestsPerDay: 10000,
      perUser: true
    };
    this.responseCache = new Map();
    this.userRateLimits = new Map();
    this.initializeProviders();
  }
  return (0, _createClass2.default)(ExternalAIService, [{
    key: "initialize",
    value: function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        if (__DEV__) console.log('üåê External AI Service: Initializing...');
        try {
          if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_EXTERNAL_API')) {
            if (__DEV__) console.log('üö´ External AI Service disabled by feature flag');
            this.isEnabled = false;
            return;
          }
          yield this.loadProviderConfigurations();
          yield this.performHealthChecks();
          this.activeProvider = this.selectBestProvider();
          if (!this.activeProvider) {
            yield (0, _aiTelemetry.trackAIError)({
              code: _types.AIErrorCode.NO_PROVIDER_AVAILABLE,
              message: 'No AI provider available after health checks',
              severity: _types.ErrorSeverity.HIGH,
              context: {
                component: 'ExternalAIService',
                method: 'initialize',
                providersChecked: this.providers.size,
                healthCheckResults: Array.from(this.providers.entries()).map(function (_ref) {
                  var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
                    provider = _ref2[0],
                    config = _ref2[1];
                  return {
                    provider: provider,
                    isAvailable: config.isAvailable,
                    lastHealthCheck: config.lastHealthCheck,
                    errorCount: config.errorCount
                  };
                })
              }
            });
            this.isEnabled = false;
            if (__DEV__) console.warn('‚ö†Ô∏è External AI disabled (no provider). System will use local fallback responses.');
            return;
          }
          this.isEnabled = true;
          this.startMemoryProbe();
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.EXTERNAL_AI_INITIALIZED, {
            activeProvider: this.activeProvider,
            availableProviders: Array.from(this.providers.keys()),
            totalProviders: this.providers.size
          });
          if (__DEV__) console.log('‚úÖ External AI Service initialized with provider:', this.activeProvider);
        } catch (error) {
          console.error('‚ùå External AI Service initialization failed:', error);
          this.isEnabled = false;
          yield (0, _aiTelemetry.trackAIError)({
            code: _types.AIErrorCode.INITIALIZATION_FAILED,
            message: 'External AI Service ba≈ülatƒ±lamadƒ±',
            severity: _types.ErrorSeverity.HIGH,
            context: {
              component: 'ExternalAIService',
              method: 'initialize'
            }
          });
          throw error;
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
  }, {
    key: "loadProviderConfigurations",
    value: (function () {
      var _loadProviderConfigurations = (0, _asyncToGenerator2.default)(function* () {
        var _Constants$expoConfig;
        var extra = ((_Constants$expoConfig = _expoConstants.default.expoConfig) == null ? void 0 : _Constants$expoConfig.extra) || {};
        var isLikelyPlaceholder = function isLikelyPlaceholder(value) {
          if (!value) return true;
          var v = String(value);
          return /REPLACE_WITH_REAL|REPLACE|your_?api_?key/i.test(v);
        };
        var selectedProvider = String(extra.EXPO_PUBLIC_AI_PROVIDER || _env2.env.EXPO_PUBLIC_AI_PROVIDER || 'gemini').toLowerCase();
        if (selectedProvider !== 'gemini') {
          if (__DEV__) console.warn(`‚ö†Ô∏è Only Gemini is supported. Configured provider '${selectedProvider}' will be ignored.`);
        }
        var hasEdgeFunction = yield _edgeAIService.edgeAIService.healthCheck();
        if (selectedProvider === 'gemini') {
          this.providers.set(_types.AIProvider.GEMINI, {
            provider: _types.AIProvider.GEMINI,
            apiKey: hasEdgeFunction ? 'edge-function-proxy' : '',
            baseURL: 'edge-function',
            model: 'gemini-1.5-flash',
            maxTokens: 4000,
            temperature: 0.7,
            timeout: 30000,
            isAvailable: hasEdgeFunction,
            lastHealthCheck: new Date(),
            errorCount: 0,
            successRate: 1.0
          });
          if (__DEV__) {
            console.log(`‚úÖ Edge Function configured: ${hasEdgeFunction ? 'Available' : 'Not Available'}`);
          }
        }
        var configuredProviders = Array.from(this.providers.keys());
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
          component: 'ExternalAIService',
          event: 'config_loaded',
          selectedProvider: selectedProvider,
          providersConfigured: configuredProviders
        });
      });
      function loadProviderConfigurations() {
        return _loadProviderConfigurations.apply(this, arguments);
      }
      return loadProviderConfigurations;
    }())
  }, {
    key: "performHealthChecks",
    value: (function () {
      var _performHealthChecks = (0, _asyncToGenerator2.default)(function* () {
        var _this = this;
        var healthCheckPromises = Array.from(this.providers.entries()).map(function () {
          var _ref4 = (0, _asyncToGenerator2.default)(function* (_ref3) {
            var _ref5 = (0, _slicedToArray2.default)(_ref3, 2),
              provider = _ref5[0],
              config = _ref5[1];
            try {
              var isHealthy = yield _this.checkProviderHealth(provider);
              config.isAvailable = isHealthy;
              config.lastHealthCheck = new Date();
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.AI_PROVIDER_HEALTH_CHECK, {
                provider: provider,
                isHealthy: isHealthy
              });
              if (__DEV__) {
                if (isHealthy) {
                  if (__DEV__) console.log(`‚úÖ ${provider} is available`);
                } else {
                  if (__DEV__) console.warn(`‚ö†Ô∏è ${provider} is not available`);
                }
              }
            } catch (error) {
              console.error(`‚ùå Health check failed for ${provider}:`, error);
              config.isAvailable = false;
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.AI_PROVIDER_FAILED, {
                provider: provider,
                reason: 'health_check_failed'
              });
            }
          });
          return function (_x) {
            return _ref4.apply(this, arguments);
          };
        }());
        yield Promise.all(healthCheckPromises);
      });
      function performHealthChecks() {
        return _performHealthChecks.apply(this, arguments);
      }
      return performHealthChecks;
    }())
  }, {
    key: "checkProviderHealth",
    value: (function () {
      var _checkProviderHealth = (0, _asyncToGenerator2.default)(function* (provider) {
        var config = this.providers.get(provider);
        if (!config) return false;
        if (config.baseURL === 'edge-function') {
          console.log('üöÄ Checking Edge Function health...');
          try {
            var edgeHealthy = yield _edgeAIService.edgeAIService.healthCheck();
            console.log(`‚úÖ Edge Function health check: ${edgeHealthy ? 'Healthy' : 'Unhealthy'}`);
            return edgeHealthy;
          } catch (error) {
            console.warn('‚ö†Ô∏è Edge Function health check failed:', error);
            return false;
          }
        }
        try {
          var response = yield this.makeProviderRequest(provider, {
            messages: [{
              role: 'user',
              content: 'Test'
            }],
            maxTokens: 10,
            temperature: 0
          });
          return response.success;
        } catch (error) {
          var _config = this.providers.get(provider);
          if (_config && _config.model !== 'gemini-1.5-pro') {
            var originalModel = _config.model;
            try {
              _config.model = 'gemini-1.5-pro';
              var fallbackResp = yield this.makeProviderRequest(provider, {
                messages: [{
                  role: 'user',
                  content: 'Test'
                }],
                maxTokens: 8,
                temperature: 0
              });
              return !!fallbackResp.success;
            } catch (_unused) {
              _config.model = originalModel;
              return false;
            }
          }
          return false;
        }
      });
      function checkProviderHealth(_x2) {
        return _checkProviderHealth.apply(this, arguments);
      }
      return checkProviderHealth;
    }())
  }, {
    key: "sanitizeSensitiveData",
    value: function sanitizeSensitiveData() {
      var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var context = arguments.length > 1 ? arguments[1] : undefined;
      var piiPatterns = {
        email: /\b[\w\.-]+@[\w\.-]+\.\w+\b/gi,
        phone: /(\+90|0)?[\s\-\.]?5\d{2}[\s\-\.]?\d{3}[\s\-\.]?\d{2}[\s\-\.]?\d{2}|\b\d{11,}\b/gi,
        turkishId: /\b\d{11}\b/gi,
        names: /\b[A-Z√áƒûƒ∞√ñ≈û√ú][a-z√ßƒüƒ±√∂≈ü√º]+\s[A-Z√áƒûƒ∞√ñ≈û√ú][a-z√ßƒüƒ±√∂≈ü√º]+\b/gi,
        creditCard: /\b\d{4}[\s\-]?\d{4}[\s\-]?\d{4}[\s\-]?\d{4}\b/gi,
        address: /\b\d+\s+[A-Z√áƒûƒ∞√ñ≈û√ú][a-z√ßƒüƒ±√∂≈ü√º]+\s+(Cd|Sk|St|Street|Caddesi|Sokaƒüƒ±)\b/gi,
        dateOfBirth: /\b(\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{4}|\d{4}[\/\-\.]\d{1,2}[\/\-\.]\d{1,2})\b/gi
      };
      var piiDetected = false;
      var sanitizedMessages = messages.map(function (message) {
        var sanitizedContent = (message == null ? void 0 : message.content) != null ? String(message.content) : '';
        for (var _ref6 of Object.entries(piiPatterns)) {
          var _ref7 = (0, _slicedToArray2.default)(_ref6, 2);
          var type = _ref7[0];
          var pattern = _ref7[1];
          var matches = sanitizedContent.match(pattern);
          var shouldMask = !!matches && (type !== 'names' || matches.length >= 2);
          if (shouldMask) {
            piiDetected = true;
            if (__DEV__) console.warn(`üîí PII detected and sanitized: ${type} (${matches.length} instances)`);
            switch (type) {
              case 'email':
                sanitizedContent = sanitizedContent.replace(pattern, '[EMAIL]');
                break;
              case 'phone':
                sanitizedContent = sanitizedContent.replace(pattern, '[PHONE]');
                break;
              case 'turkishId':
                sanitizedContent = sanitizedContent.replace(pattern, '[ID_NUMBER]');
                break;
              case 'names':
                sanitizedContent = sanitizedContent.replace(pattern, '[NAME]');
                break;
              case 'creditCard':
                sanitizedContent = sanitizedContent.replace(pattern, '[CREDIT_CARD]');
                break;
              case 'address':
                sanitizedContent = sanitizedContent.replace(pattern, '[ADDRESS]');
                break;
              case 'dateOfBirth':
                sanitizedContent = sanitizedContent.replace(pattern, '[DATE]');
                break;
            }
          }
        }
        return Object.assign({}, message, {
          content: sanitizedContent
        });
      });
      var baseContext = context && typeof context === 'object' ? context : {};
      var sanitizedContext = Object.assign({}, baseContext, {
        userMetadata: baseContext.userMetadata ? Object.assign({}, baseContext.userMetadata, {
          email: undefined,
          phone: undefined,
          fullName: undefined,
          realName: undefined
        }) : undefined,
        therapeuticProfile: baseContext.therapeuticProfile ? Object.assign({}, baseContext.therapeuticProfile, {
          personalDetails: undefined,
          contactInfo: undefined,
          emergencyContacts: undefined
        }) : undefined
      });
      return {
        sanitizedMessages: sanitizedMessages,
        sanitizedContext: sanitizedContext,
        piiDetected: piiDetected
      };
    }
  }, {
    key: "generatePromptHash",
    value: function generatePromptHash(messages, context, config) {
      var normalizedMessages = messages.map(function (msg) {
        return {
          role: msg.role,
          content: msg.content.trim().toLowerCase()
        };
      });
      var hashInput = JSON.stringify({
        messages: normalizedMessages,
        provider: (config == null ? void 0 : config.provider) || this.activeProvider,
        model: config == null ? void 0 : config.model,
        temperature: (config == null ? void 0 : config.temperature) || 0.7,
        therapeuticMode: (config == null ? void 0 : config.therapeuticMode) !== false
      });
      var hash = 0;
      for (var i = 0; i < hashInput.length; i++) {
        var char = hashInput.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return Math.abs(hash).toString(16);
    }
  }, {
    key: "getCachedResponse",
    value: (function () {
      var _getCachedResponse = (0, _asyncToGenerator2.default)(function* (promptHash, userId) {
        if (!this.cacheConfig.enabled) return null;
        var memoryCached = this.responseCache.get(promptHash);
        if (memoryCached && this.isCacheEntryValid(memoryCached)) {
          if (__DEV__) console.log('üì¶ Cache hit (memory):', promptHash.substring(0, 8));
          return Object.assign({}, memoryCached.response, {
            cached: true
          });
        }
        if (this.cacheConfig.useStorage) {
          try {
            var storedCache = yield _asyncStorage.default.getItem(`ai_cache_${promptHash}`);
            if (storedCache) {
              var cacheEntry = JSON.parse(storedCache);
              if (this.isCacheEntryValid(cacheEntry)) {
                this.responseCache.set(promptHash, cacheEntry);
                if (__DEV__) console.log('üì¶ Cache hit (storage):', promptHash.substring(0, 8));
                return Object.assign({}, cacheEntry.response, {
                  cached: true
                });
              } else {
                yield _asyncStorage.default.removeItem(`ai_cache_${promptHash}`);
              }
            }
          } catch (error) {
            console.error('‚ùå Cache read error:', error);
          }
        }
        return null;
      });
      function getCachedResponse(_x3, _x4) {
        return _getCachedResponse.apply(this, arguments);
      }
      return getCachedResponse;
    }())
  }, {
    key: "cacheResponse",
    value: (function () {
      var _cacheResponse = (0, _asyncToGenerator2.default)(function* (promptHash, response, userId) {
        if (!this.cacheConfig.enabled || !response.success) return;
        var cacheEntry = {
          response: Object.assign({}, response, {
            cached: false
          }),
          timestamp: Date.now(),
          ttl: this.cacheConfig.ttlMs,
          promptHash: promptHash,
          userId: userId
        };
        this.responseCache.set(promptHash, cacheEntry);
        this.cleanupMemoryCache();
        if (this.cacheConfig.useStorage) {
          try {
            yield _asyncStorage.default.setItem(`ai_cache_${promptHash}`, JSON.stringify(cacheEntry));
          } catch (error) {
            console.error('‚ùå Cache write error:', error);
          }
        }
        if (__DEV__) console.log('üì¶ Response cached:', promptHash.substring(0, 8));
      });
      function cacheResponse(_x5, _x6, _x7) {
        return _cacheResponse.apply(this, arguments);
      }
      return cacheResponse;
    }())
  }, {
    key: "isCacheEntryValid",
    value: function isCacheEntryValid(entry) {
      var now = Date.now();
      return now - entry.timestamp < entry.ttl;
    }
  }, {
    key: "cleanupMemoryCache",
    value: function cleanupMemoryCache() {
      var _this2 = this;
      if (this.responseCache.size <= this.cacheConfig.maxSize) return;
      var entries = Array.from(this.responseCache.entries());
      entries.sort(function (a, b) {
        return a[1].timestamp - b[1].timestamp;
      });
      var toDelete = entries.slice(0, entries.length - this.cacheConfig.maxSize);
      toDelete.forEach(function (_ref8) {
        var _ref9 = (0, _slicedToArray2.default)(_ref8, 1),
          key = _ref9[0];
        return _this2.responseCache.delete(key);
      });
    }
  }, {
    key: "checkUserRateLimit",
    value: (function () {
      var _checkUserRateLimit = (0, _asyncToGenerator2.default)(function* (userId) {
        if (!this.rateLimitConfig.enabled || !userId) return;
        var now = Date.now();
        var userLimits = this.userRateLimits.get(userId) || [];
        var validLimits = userLimits.filter(function (limit) {
          return now - limit.windowStart < limit.windowSizeMs;
        });
        var windows = [{
          sizeMs: 60 * 1000,
          maxRequests: this.rateLimitConfig.requestsPerMinute
        }, {
          sizeMs: 60 * 60 * 1000,
          maxRequests: this.rateLimitConfig.requestsPerHour
        }, {
          sizeMs: 24 * 60 * 60 * 1000,
          maxRequests: this.rateLimitConfig.requestsPerDay
        }];
        var _loop = function* _loop(window) {
          var windowTracker = validLimits.find(function (limit) {
            return limit.windowSizeMs === window.sizeMs;
          });
          if (windowTracker) {
            if (windowTracker.requests >= window.maxRequests) {
              var resetTime = new Date(windowTracker.windowStart + window.sizeMs);
              var error = new Error(`Rate limit exceeded. Resets at: ${resetTime.toISOString()}`);
              error.code = _types.AIErrorCode.RATE_LIMIT;
              error.severity = _types.ErrorSeverity.MEDIUM;
              error.recoverable = true;
              throw error;
            }
            windowTracker.requests++;
          } else {
            validLimits.push({
              requests: 1,
              windowStart: now,
              windowSizeMs: window.sizeMs,
              userId: userId
            });
          }
        };
        for (var window of windows) {
          yield* _loop(window);
        }
        this.userRateLimits.set(userId, validLimits);
      });
      function checkUserRateLimit(_x8) {
        return _checkUserRateLimit.apply(this, arguments);
      }
      return checkUserRateLimit;
    }())
  }, {
    key: "getAIResponse",
    value: function () {
      var _getAIResponse = (0, _asyncToGenerator2.default)(function* () {
        var _this3 = this;
        var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var config = arguments.length > 2 ? arguments[2] : undefined;
        var userId = arguments.length > 3 ? arguments[3] : undefined;
        var requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        if (!this.isEnabled) {
          return this.getFallbackResponse(requestId, 0);
        }
        var startTime = Date.now();
        var hasEdgeFunction = yield _edgeAIService.edgeAIService.healthCheck();
        if (hasEdgeFunction && userId) {
          try {
            var combinedText = messages.map(function (m) {
              return m.content;
            }).join(' ');
            var edgeResult = yield _edgeAIService.edgeAIService.analyzeText({
              text: combinedText,
              userId: userId,
              analysisType: 'mixed',
              context: {
                source: 'cbt',
                metadata: context
              }
            });
            if (edgeResult) {
              return {
                success: true,
                content: edgeResult.summary,
                requestId: requestId,
                provider: 'edge-function',
                model: 'gemini-via-edge',
                latency: Date.now() - startTime,
                tokens: {
                  prompt: combinedText.split(' ').length,
                  completion: edgeResult.summary.split(' ').length,
                  total: combinedText.split(' ').length + edgeResult.summary.split(' ').length
                },
                cached: false,
                filtered: false,
                metadata: {
                  confidence: edgeResult.confidence,
                  category: edgeResult.category
                }
              };
            }
          } catch (error) {
            console.warn('üö® Edge function failed, falling back to standard flow:', error);
          }
        }
        try {
          var hasContext = !!context && typeof context === 'object' && Object.keys(context).length > 0;
          if (!hasContext) {
            (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
              event: 'missing_context_for_ai_request'
            }, userId).catch(function () {});
          }
          var _this$sanitizeSensiti = this.sanitizeSensitiveData(messages || [], context || {}),
            sanitizedMessages = _this$sanitizeSensiti.sanitizedMessages,
            sanitizedContext = _this$sanitizeSensiti.sanitizedContext,
            piiDetected = _this$sanitizeSensiti.piiDetected;
          if (piiDetected) {
            if (__DEV__) console.warn('üîí PII detected and sanitized before AI request');
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
              piiDetected: true,
              userId: userId,
              messageCount: messages.length
            });
          }
          yield this.checkUserRateLimit(userId);
          var promptHash = this.generatePromptHash(sanitizedMessages, sanitizedContext, config);
          var cachedResponse = yield this.getCachedResponse(promptHash, userId);
          if (cachedResponse) {
            cachedResponse.requestId = requestId;
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.AI_RESPONSE_GENERATED, {
              provider: cachedResponse.provider,
              model: cachedResponse.model,
              success: true,
              latency: Date.now() - startTime,
              tokens: cachedResponse.tokens.total,
              cached: true,
              userId: userId
            });
            return cachedResponse;
          }
          yield this.checkRateLimit((config == null ? void 0 : config.provider) || this.activeProvider);
          var provider = (config == null ? void 0 : config.provider) || this.selectBestProvider();
          if (!provider) {
            var error = new Error('No AI provider available');
            error.code = _types.AIErrorCode.NO_PROVIDER_AVAILABLE;
            error.severity = _types.ErrorSeverity.HIGH;
            error.recoverable = false;
            throw error;
          }
          var preparedRequest = yield this.prepareRequest(sanitizedMessages, sanitizedContext, config);
          if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_PROMPT_LOGGING')) {
            try {
              var _preview$reverse$find;
              var preview = (sanitizedMessages || []).map(function (m) {
                return {
                  role: m.role,
                  content: m.content
                };
              }).slice(-8);
              if (__DEV__) {
                console.log('üìù [AI_PROMPT_LOGGING] Sanitized Prompt (last messages):', preview);
              }
              (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.AI_PROMPT_LOGGED, {
                promptHash: promptHash,
                messageCount: (sanitizedMessages == null ? void 0 : sanitizedMessages.length) || 0,
                provider: (config == null ? void 0 : config.provider) || this.activeProvider || 'gemini',
                model: config == null ? void 0 : config.model,
                piiDetected: piiDetected,
                lastUserMessage: ((_preview$reverse$find = preview.reverse().find(function (p) {
                  return p.role === 'user';
                })) == null || (_preview$reverse$find = _preview$reverse$find.content) == null ? void 0 : _preview$reverse$find.slice(0, 280)) || null
              }, userId).catch(function () {});
            } catch (_unused2) {}
          }
          var stagedTimeouts = [3000, 10000, 30000];
          var response = null;
          var lastError = null;
          var _loop2 = function* _loop2() {
            try {
              var _response;
              var controller = typeof AbortController !== 'undefined' ? new AbortController() : null;
              var timer = controller ? setTimeout(function () {
                return controller.abort();
              }, stage) : null;
              var reqWithTimeout = Object.assign({}, preparedRequest, {
                timeout: stage
              });
              response = yield _this3.makeProviderRequest(provider, reqWithTimeout);
              if (timer) clearTimeout(timer);
              if ((_response = response) != null && _response.success) return 1;
            } catch (e) {
              lastError = e;
            }
          };
          for (var stage of stagedTimeouts) {
            if (yield* _loop2()) break;
          }
          if (!response) {
            throw lastError || new Error('AI request failed with staged timeouts');
          }
          if (!response.success) {
            var heuristic = this.buildHeuristicFallback(messages, context);
            try {
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.FALLBACK_TRIGGERED, {
                provider: provider,
                reason: 'primary_failed'
              }, userId);
            } catch (_unused3) {}
            return Object.assign({}, heuristic, {
              requestId: requestId,
              latency: Date.now() - startTime
            });
          }
          if (response.success && (config == null ? void 0 : config.therapeuticMode) !== false) {
            var filterResult = yield _contentFilter.contentFilterService.filterContent({
              content: response.content
            }, {
              isTherapeutic: true
            });
            if (!filterResult.allowed) {
              response.filtered = true;
              var reasonText = Array.isArray(filterResult.reasons) && filterResult.reasons.length > 0 ? filterResult.reasons[0] : 'content_filtered';
              response.content = this.getFilteredResponse(reasonText);
              response.safetyScore = 0.1;
            } else {
              response.safetyScore = filterResult.confidence || 0.9;
            }
          }
          response.latency = Date.now() - startTime;
          response.requestId = requestId;
          response.timestamp = new Date();
          this.updateProviderStats(provider, response.success);
          if (response.success && !response.filtered) {
            yield this.cacheResponse(promptHash, response, userId);
          }
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.AI_RESPONSE_GENERATED, {
            provider: provider,
            model: response.model,
            success: response.success,
            latency: response.latency,
            tokens: response.tokens.total,
            filtered: response.filtered,
            fallbackUsed: response.fallbackUsed,
            cached: false,
            userId: userId
          });
          return response;
        } catch (error) {
          var _ref0, _error$constructor;
          console.error('‚ùå AI response generation failed:', error);
          var latency = Date.now() - startTime;
          yield (0, _aiTelemetry.trackAIError)({
            code: (_ref0 = error == null ? void 0 : error.code) != null ? _ref0 : _types.AIErrorCode.UNKNOWN,
            message: 'AI yanƒ±tƒ± alƒ±namadƒ±',
            severity: _types.ErrorSeverity.HIGH,
            context: {
              component: 'ExternalAIService',
              method: 'getAIResponse',
              provider: (config == null ? void 0 : config.provider) || this.activeProvider,
              latency: latency,
              requestId: requestId,
              errorType: (error == null || (_error$constructor = error.constructor) == null ? void 0 : _error$constructor.name) || 'Unknown'
            }
          });
          return this.getFallbackResponse(requestId, latency);
        }
      });
      function getAIResponse() {
        return _getAIResponse.apply(this, arguments);
      }
      return getAIResponse;
    }()
  }, {
    key: "getStreamingResponse",
    value: (function () {
      var _getStreamingResponse = (0, _asyncToGenerator2.default)(function* (messages, context, onChunk, config) {
        var err = new Error('Streaming not yet implemented');
        err.code = _types.AIErrorCode.UNKNOWN;
        throw err;
      });
      function getStreamingResponse(_x9, _x0, _x1, _x10) {
        return _getStreamingResponse.apply(this, arguments);
      }
      return getStreamingResponse;
    }())
  }, {
    key: "callGemini",
    value: function () {
      var _callGemini = (0, _asyncToGenerator2.default)(function* (request) {
        var _this4 = this;
        var config = this.providers.get(_types.AIProvider.GEMINI);
        var startTime = Date.now();
        try {
          var _config$model;
          var req = request && typeof request === 'object' ? request : {};
          if ((config == null ? void 0 : config.baseURL) === 'edge-function') {
            console.log('üöÄ Using Edge Function for Gemini API call...');
            var _safeMessages = Array.isArray(req.messages) ? req.messages.filter(Boolean) : [];
            var combinedText = _safeMessages.map(function (m) {
              var text = m && m.content != null ? String(m.content) : '';
              return text;
            }).join(' ').trim();
            if (!combinedText) {
              var _err = new Error('No text content provided for analysis');
              _err.code = _types.AIErrorCode.INVALID_REQUEST;
              throw _err;
            }
            var edgeResult = yield _edgeAIService.edgeAIService.analyzeText({
              text: combinedText,
              userId: req.userId || 'unknown',
              analysisType: 'mixed',
              context: {
                source: 'cbt',
                metadata: req.context
              }
            });
            if (edgeResult) {
              console.log('‚úÖ Edge Function Gemini call successful');
              return {
                success: true,
                content: edgeResult.summary,
                requestId: `edge_${Date.now()}`,
                provider: 'edge-function',
                model: 'gemini-1.5-flash',
                latency: Date.now() - startTime,
                tokens: {
                  prompt: combinedText.split(' ').length,
                  completion: edgeResult.summary.split(' ').length,
                  total: combinedText.split(' ').length + edgeResult.summary.split(' ').length
                },
                cached: false,
                filtered: false,
                metadata: {
                  confidence: edgeResult.confidence,
                  category: edgeResult.category
                }
              };
            } else {
              console.warn('‚ö†Ô∏è Edge Function returned null result');
              var _err2 = new Error('Edge Function analysis failed');
              _err2.code = _types.AIErrorCode.PROVIDER_ERROR;
              throw _err2;
            }
          }
          if (!(config != null && config.apiKey) || !(config != null && config.baseURL) || !(config != null && config.model)) {
            var _err3 = new Error('Gemini configuration missing - API key should be in Edge Functions');
            _err3.code = _types.AIErrorCode.NO_PROVIDER_AVAILABLE;
            throw _err3;
          }
          var hasAbort = typeof AbortController !== 'undefined';
          var controller = hasAbort ? new AbortController() : undefined;
          var timeoutId = hasAbort ? setTimeout(function () {
            return controller == null ? void 0 : controller.abort();
          }, config.timeout) : undefined;
          var safeMessages = Array.isArray(req.messages) ? req.messages.filter(Boolean) : [];
          var normalizedContents = safeMessages.map(function (m) {
            var role = m && m.role ? m.role === 'assistant' ? 'model' : 'user' : 'user';
            var text = m && m.content != null ? String(m.content) : '';
            return {
              role: role,
              parts: [{
                text: text
              }]
            };
          });
          var contentsToSend = normalizedContents.length > 0 ? normalizedContents : [{
            role: 'user',
            parts: [{
              text: 'Kƒ±sa, g√ºvenli ve terap√∂tik bir yanƒ±t √ºret.'
            }]
          }];
          var buildFetchOptions = function buildFetchOptions(body) {
            return {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'x-goog-api-key': config.apiKey
              },
              body: JSON.stringify(body),
              signal: hasAbort && controller ? controller.signal : undefined
            };
          };
          var buildBody = function buildBody() {
            return {
              contents: contentsToSend,
              generationConfig: {
                temperature: (req && req.temperature) != null ? req.temperature : config.temperature,
                maxOutputTokens: (req && req.maxTokens) != null ? req.maxTokens : config.maxTokens
              }
            };
          };
          var attemptModels = Array.from(new Set([config.model, (_config$model = config.model) != null && _config$model.includes('-latest') ? config.model : `${config.model}-latest`, 'gemini-1.5-pro', 'gemini-1.5-pro-latest'].filter(Boolean)));
          var lastError = null;
          var _loop3 = function* _loop3() {
              var _data, _data2, _data3, _data4;
              var response;
              try {
                response = yield fetch(`${config.baseURL}/models/${modelName}:generateContent`, buildFetchOptions(buildBody()));
              } catch (netErr) {
                if (__DEV__) console.warn('‚ö†Ô∏è Gemini network error at fetch():', netErr);
                lastError = netErr;
                return 0;
              }
              if (!response.ok) {
                var _detail;
                var detail = null;
                try {
                  detail = yield response.json();
                } catch (_unused4) {}
                if (__DEV__) console.warn(`‚ö†Ô∏è Gemini API error ${response.status} for model ${modelName}:`, ((_detail = detail) == null ? void 0 : _detail.error) || detail || 'no-body');
                if (response.status === 400 || response.status === 404) {
                  lastError = detail || {
                    status: response.status
                  };
                  return 0;
                }
                if (response.status === 429 || response.status >= 500) {
                  try {
                    yield (0, _aiTelemetry.trackAIInteraction)(response.status === 429 ? _aiTelemetry.AIEventType.AI_RATE_LIMIT_HIT : _aiTelemetry.AIEventType.API_ERROR, {
                      provider: 'gemini',
                      status: response.status,
                      model: modelName
                    });
                  } catch (_unused5) {}
                  var attempt = _this4._retryAttempt ? _this4._retryAttempt + 1 : 1;
                  _this4._retryAttempt = attempt;
                  var base = 500;
                  var delay = Math.min(base * Math.pow(2, attempt), 8000) + Math.floor(Math.random() * 300);
                  yield new Promise(function (res) {
                    return setTimeout(res, delay);
                  });
                  lastError = detail || {
                    status: response.status
                  };
                  return 0;
                }
                var _err4 = new Error(`Gemini API error: ${response.status}`);
                _err4.code = _types.AIErrorCode.PROVIDER_ERROR;
                _err4.detail = detail;
                throw _err4;
              }
              var data;
              try {
                data = yield response.json();
              } catch (parseErr) {
                if (__DEV__) console.warn('‚ö†Ô∏è Gemini response.json() parse error:', parseErr);
                lastError = parseErr;
                return 0;
              }
              var contentText = ((_data = data) == null || (_data = _data.candidates) == null || (_data = _data[0]) == null || (_data = _data.content) == null || (_data = _data.parts) == null || (_data = _data[0]) == null ? void 0 : _data.text) || '';
              if (hasAbort && timeoutId) clearTimeout(timeoutId);
              return {
                v: {
                  success: true,
                  content: contentText,
                  provider: _types.AIProvider.GEMINI,
                  model: modelName,
                  tokens: {
                    prompt: ((_data2 = data) == null || (_data2 = _data2.usageMetadata) == null ? void 0 : _data2.promptTokenCount) || 0,
                    completion: ((_data3 = data) == null || (_data3 = _data3.usageMetadata) == null ? void 0 : _data3.candidatesTokenCount) || 0,
                    total: ((_data4 = data) == null || (_data4 = _data4.usageMetadata) == null ? void 0 : _data4.totalTokenCount) || 0
                  },
                  latency: Date.now() - startTime,
                  timestamp: new Date(),
                  requestId: ''
                }
              };
            },
            _ret;
          for (var modelName of attemptModels) {
            _ret = yield* _loop3();
            if (_ret === 0) continue;
            if (_ret) return _ret.v;
          }
          if (hasAbort && timeoutId) clearTimeout(timeoutId);
          var err = new Error(`Gemini API call failed (all fallbacks). Last error: ${JSON.stringify(lastError)}`);
          err.code = _types.AIErrorCode.PROVIDER_ERROR;
          err.severity = _types.ErrorSeverity.HIGH;
          err.recoverable = true;
          throw err;
        } catch (error) {
          if (__DEV__) console.error('‚ùå Gemini API call failed:', error);
          var _err5 = new Error(`Gemini API call failed${error != null && error.message ? `: ${error.message}` : ''}`);
          _err5.code = _types.AIErrorCode.PROVIDER_ERROR;
          _err5.severity = _types.ErrorSeverity.HIGH;
          _err5.recoverable = true;
          throw _err5;
        }
      });
      function callGemini(_x11) {
        return _callGemini.apply(this, arguments);
      }
      return callGemini;
    }()
  }, {
    key: "initializeProviders",
    value: function initializeProviders() {
      if (__DEV__) console.log('üîß External AI Service providers initialized');
    }
  }, {
    key: "selectBestProvider",
    value: function selectBestProvider() {
      var bestProvider = null;
      var bestScore = -1;
      for (var _ref1 of this.providers.entries()) {
        var _ref10 = (0, _slicedToArray2.default)(_ref1, 2);
        var provider = _ref10[0];
        var config = _ref10[1];
        if (!config.isAvailable) continue;
        var score = config.successRate * 100 - config.errorCount + (config.isAvailable ? 10 : 0);
        if (score > bestScore) {
          bestScore = score;
          bestProvider = provider;
        }
      }
      return bestProvider;
    }
  }, {
    key: "getBackupProvider",
    value: function getBackupProvider(primaryProvider) {
      return null;
    }
  }, {
    key: "makeProviderRequest",
    value: function () {
      var _makeProviderRequest = (0, _asyncToGenerator2.default)(function* (provider, request) {
        return yield this.callGemini(request);
      });
      function makeProviderRequest(_x12, _x13) {
        return _makeProviderRequest.apply(this, arguments);
      }
      return makeProviderRequest;
    }()
  }, {
    key: "prepareRequest",
    value: function () {
      var _prepareRequest = (0, _asyncToGenerator2.default)(function* (messages, context, config) {
        var body = {
          messages: messages.map(function (msg) {
            return {
              role: msg.role,
              content: msg.content
            };
          }),
          maxTokens: config == null ? void 0 : config.maxTokens,
          temperature: config == null ? void 0 : config.temperature,
          model: config == null ? void 0 : config.model
        };
        if (config != null && config.systemPrompt) {
          body.systemInstruction = {
            role: 'system',
            parts: [{
              text: String(config.systemPrompt)
            }]
          };
        }
        return body;
      });
      function prepareRequest(_x14, _x15, _x16) {
        return _prepareRequest.apply(this, arguments);
      }
      return prepareRequest;
    }()
  }, {
    key: "checkRateLimit",
    value: function () {
      var _checkRateLimit = (0, _asyncToGenerator2.default)(function* (provider) {
        var limit = this.rateLimiter.get(provider);
        var now = Date.now();
        if (!limit) {
          this.rateLimiter.set(provider, {
            count: 1,
            resetTime: now + 60000
          });
          return;
        }
        if (now > limit.resetTime) {
          limit.count = 1;
          limit.resetTime = now + 60000;
          return;
        }
        if (limit.count >= 60) {
          var err = new Error('Rate limit exceeded');
          err.code = _types.AIErrorCode.RATE_LIMIT;
          throw err;
        }
        limit.count++;
      });
      function checkRateLimit(_x17) {
        return _checkRateLimit.apply(this, arguments);
      }
      return checkRateLimit;
    }()
  }, {
    key: "updateProviderStats",
    value: function updateProviderStats(provider, success) {
      var config = this.providers.get(provider);
      if (!config) return;
      if (success) {
        config.errorCount = Math.max(0, config.errorCount - 1);
        config.successRate = Math.min(1.0, config.successRate + 0.01);
      } else {
        config.errorCount++;
        config.successRate = Math.max(0.0, config.successRate - 0.05);
      }
    }
  }, {
    key: "getFilteredResponse",
    value: function getFilteredResponse(reason) {
      return `√úzg√ºn√ºm, g√ºvenlik protokolleri nedeniyle bu yanƒ±tƒ± veremiyorum. ${reason} Farklƒ± bir konuda size nasƒ±l yardƒ±mcƒ± olabilirim?`;
    }
  }, {
    key: "getFallbackResponse",
    value: function getFallbackResponse(requestId, latency) {
      return {
        success: false,
        content: '√úzg√ºn√ºm, ≈üu anda AI sistemi kullanƒ±lamƒ±yor. L√ºtfen daha sonra tekrar deneyin. Bu arada nefes alma egzersizi yapmayƒ± deneyebilirsiniz: 4 saniye nefes alƒ±n, 4 saniye tutun, 6 saniye bƒ±rakƒ±n.',
        provider: _types.AIProvider.LOCAL,
        model: 'heuristic-fallback',
        tokens: {
          prompt: 0,
          completion: 0,
          total: 0
        },
        latency: latency,
        timestamp: new Date(),
        requestId: requestId,
        fallbackUsed: true
      };
    }
  }, {
    key: "startMemoryProbe",
    value: function startMemoryProbe() {
      var _this5 = this;
      try {
        if (this._memoryProbeStarted) return;
        this._memoryProbeStarted = true;
        this._memoryProbeTimer = setInterval(function () {
          try {
            var cacheEntries = _this5.responseCache.size;
            var rateTrackers = _this5.userRateLimits.size;
            var queueSize = _this5.requestQueue.size;
            var usedHeap = null;
            var perf = globalThis.performance;
            if (perf && perf.memory && typeof perf.memory.usedJSHeapSize === 'number') {
              usedHeap = perf.memory.usedJSHeapSize;
            }
            (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
              event: 'memory_probe',
              usedHeap: usedHeap,
              cacheEntries: cacheEntries,
              rateTrackers: rateTrackers,
              queueSize: queueSize
            }).catch(function () {});
            var threshold = 150 * 1024 * 1024;
            if (typeof usedHeap === 'number' && usedHeap > threshold) {
              _this5.responseCache.clear();
              (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
                event: 'memory_threshold_exceeded',
                usedHeap: usedHeap
              }).catch(function () {});
            }
          } catch (_unused6) {}
        }, 60000);
      } catch (_unused7) {}
    }
  }, {
    key: "buildHeuristicFallback",
    value: function buildHeuristicFallback() {
      var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var context = arguments.length > 1 ? arguments[1] : undefined;
      var _require = require("./heuristicFallback"),
        getHeuristicText = _require.getHeuristicText;
      var text = getHeuristicText(messages, context);
      return {
        success: true,
        content: text,
        provider: _types.AIProvider.LOCAL,
        model: 'heuristic-fallback',
        tokens: {
          prompt: 0,
          completion: 0,
          total: 0
        },
        latency: 0,
        timestamp: new Date(),
        requestId: '',
        fallbackUsed: true
      };
    }
  }, {
    key: "enabled",
    get: function get() {
      return this.isEnabled && _featureFlags.FEATURE_FLAGS.isEnabled('AI_EXTERNAL_API');
    }
  }, {
    key: "currentProvider",
    get: function get() {
      return this.activeProvider;
    }
  }, {
    key: "getAvailableProviders",
    value: function getAvailableProviders() {
      return Array.from(this.providers.entries()).filter(function (_ref11) {
        var _ref12 = (0, _slicedToArray2.default)(_ref11, 2),
          _ = _ref12[0],
          config = _ref12[1];
        return config.isAvailable;
      }).map(function (_ref13) {
        var _ref14 = (0, _slicedToArray2.default)(_ref13, 2),
          provider = _ref14[0],
          _ = _ref14[1];
        return provider;
      });
    }
  }, {
    key: "getProviderStats",
    value: function getProviderStats(provider) {
      return this.providers.get(provider);
    }
  }, {
    key: "shutdown",
    value: (function () {
      var _shutdown = (0, _asyncToGenerator2.default)(function* () {
        if (__DEV__) console.log('üåê External AI Service: Shutting down...');
        this.isEnabled = false;
        this.requestQueue.clear();
        this.rateLimiter.clear();
        try {
          if (this._memoryProbeTimer) {
            clearInterval(this._memoryProbeTimer);
            this._memoryProbeTimer = undefined;
            this._memoryProbeStarted = false;
          }
        } catch (_unused8) {}
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.EXTERNAL_AI_SHUTDOWN, {
          providersShutdown: this.providers.size
        });
      });
      function shutdown() {
        return _shutdown.apply(this, arguments);
      }
      return shutdown;
    }())
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!ExternalAIService.instance) {
        ExternalAIService.instance = new ExternalAIService();
      }
      return ExternalAIService.instance;
    }
  }]);
}();
var externalAIService = exports.externalAIService = ExternalAIService.getInstance();
var _default = exports.default = externalAIService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,