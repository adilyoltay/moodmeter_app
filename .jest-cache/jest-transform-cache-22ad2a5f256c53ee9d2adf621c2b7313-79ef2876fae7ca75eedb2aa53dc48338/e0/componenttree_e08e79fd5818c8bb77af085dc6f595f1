6226bc1410597a04ce0f7529c61bdb84
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHostChildren = getHostChildren;
exports.getHostParent = getHostParent;
exports.getHostSelves = getHostSelves;
exports.getHostSiblings = getHostSiblings;
exports.getUnsafeRootElement = getUnsafeRootElement;
exports.isElementMounted = isElementMounted;
exports.isHostElement = isHostElement;
var _screen = require("../screen");
function isHostElement(element) {
  return typeof (element == null ? void 0 : element.type) === 'string';
}
function isElementMounted(element) {
  return getUnsafeRootElement(element) === _screen.screen.UNSAFE_root;
}
function getHostParent(element) {
  if (element == null) {
    return null;
  }
  var current = element.parent;
  while (current) {
    if (isHostElement(current)) {
      return current;
    }
    current = current.parent;
  }
  return null;
}
function getHostChildren(element) {
  if (element == null) {
    return [];
  }
  var hostChildren = [];
  element.children.forEach(function (child) {
    if (typeof child !== 'object') {
      return;
    }
    if (isHostElement(child)) {
      hostChildren.push(child);
    } else {
      hostChildren.push.apply(hostChildren, (0, _toConsumableArray2.default)(getHostChildren(child)));
    }
  });
  return hostChildren;
}
function getHostSelves(element) {
  return isHostElement(element) ? [element] : getHostChildren(element);
}
function getHostSiblings(element) {
  var hostParent = getHostParent(element);
  var hostSelves = getHostSelves(element);
  return getHostChildren(hostParent).filter(function (sibling) {
    return !hostSelves.includes(sibling);
  });
}
function getUnsafeRootElement(element) {
  var current = element;
  while (current.parent) {
    current = current.parent;
  }
  return current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2NyZWVuIiwicmVxdWlyZSIsImlzSG9zdEVsZW1lbnQiLCJlbGVtZW50IiwidHlwZSIsImlzRWxlbWVudE1vdW50ZWQiLCJnZXRVbnNhZmVSb290RWxlbWVudCIsInNjcmVlbiIsIlVOU0FGRV9yb290IiwiZ2V0SG9zdFBhcmVudCIsImN1cnJlbnQiLCJwYXJlbnQiLCJnZXRIb3N0Q2hpbGRyZW4iLCJob3N0Q2hpbGRyZW4iLCJjaGlsZHJlbiIsImZvckVhY2giLCJjaGlsZCIsInB1c2giLCJhcHBseSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJkZWZhdWx0IiwiZ2V0SG9zdFNlbHZlcyIsImdldEhvc3RTaWJsaW5ncyIsImhvc3RQYXJlbnQiLCJob3N0U2VsdmVzIiwiZmlsdGVyIiwic2libGluZyIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvY29tcG9uZW50LXRyZWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5pbXBvcnQgeyBzY3JlZW4gfSBmcm9tICcuLi9zY3JlZW4nO1xuLyoqXG4gKiBSZWFjdFRlc3RJbnN0YW5jZSByZWZlcnJpbmcgdG8gaG9zdCBlbGVtZW50LlxuICovXG5leHBvcnQgdHlwZSBIb3N0VGVzdEluc3RhbmNlID0gUmVhY3RUZXN0SW5zdGFuY2UgJiB7IHR5cGU6IHN0cmluZyB9O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBhIGhvc3QgZWxlbWVudC5cbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNIb3N0RWxlbWVudChlbGVtZW50PzogUmVhY3RUZXN0SW5zdGFuY2UgfCBudWxsKTogZWxlbWVudCBpcyBIb3N0VGVzdEluc3RhbmNlIHtcbiAgcmV0dXJuIHR5cGVvZiBlbGVtZW50Py50eXBlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudE1vdW50ZWQoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpIHtcbiAgcmV0dXJuIGdldFVuc2FmZVJvb3RFbGVtZW50KGVsZW1lbnQpID09PSBzY3JlZW4uVU5TQUZFX3Jvb3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyBmaXJzdCBob3N0IGFuY2VzdG9yIGZvciBnaXZlbiBlbGVtZW50LlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgc3RhcnQgdHJhdmVyc2luZyBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9zdFBhcmVudChlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGwpOiBIb3N0VGVzdEluc3RhbmNlIHwgbnVsbCB7XG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBjdXJyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgaWYgKGlzSG9zdEVsZW1lbnQoY3VycmVudCkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgaG9zdCBjaGlsZHJlbiBmb3IgZ2l2ZW4gZWxlbWVudC5cbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHN0YXJ0IHRyYXZlcnNpbmcgZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhvc3RDaGlsZHJlbihlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGwpOiBIb3N0VGVzdEluc3RhbmNlW10ge1xuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgaG9zdENoaWxkcmVuOiBIb3N0VGVzdEluc3RhbmNlW10gPSBbXTtcblxuICBlbGVtZW50LmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBjaGlsZCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNIb3N0RWxlbWVudChjaGlsZCkpIHtcbiAgICAgIGhvc3RDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaG9zdENoaWxkcmVuLnB1c2goLi4uZ2V0SG9zdENoaWxkcmVuKGNoaWxkKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaG9zdENoaWxkcmVuO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYXJyYXkgb2YgaG9zdCBlbGVtZW50cyB0aGF0IHJlcHJlc2VudCB0aGUgcGFzc2VkIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgc3RhcnQgdHJhdmVyc2luZyBmcm9tLlxuICogQHJldHVybnMgSWYgdGhlIHBhc3NlZCBlbGVtZW50IGlzIGEgaG9zdCBlbGVtZW50LCBpdCB3aWxsIHJldHVybiBhbiBhcnJheSBjb250YWluaW5nIG9ubHkgdGhhdCBlbGVtZW50LFxuICogaWYgdGhlIHBhc3NlZCBlbGVtZW50IGlzIGEgY29tcG9zaXRlIGVsZW1lbnQsIGl0IHdpbGwgcmV0dXJuIGFuIGFycmF5IGNvbnRhaW5pbmcgaXRzIGhvc3QgY2hpbGRyZW4gKHplcm8sIG9uZSBvciBtYW55KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhvc3RTZWx2ZXMoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UgfCBudWxsKTogSG9zdFRlc3RJbnN0YW5jZVtdIHtcbiAgcmV0dXJuIGlzSG9zdEVsZW1lbnQoZWxlbWVudCkgPyBbZWxlbWVudF0gOiBnZXRIb3N0Q2hpbGRyZW4oZWxlbWVudCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBob3N0IHNpYmxpbmdzIGZvciBnaXZlbiBlbGVtZW50LlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgc3RhcnQgdHJhdmVyc2luZyBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmdzKGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlIHwgbnVsbCk6IEhvc3RUZXN0SW5zdGFuY2VbXSB7XG4gIGNvbnN0IGhvc3RQYXJlbnQgPSBnZXRIb3N0UGFyZW50KGVsZW1lbnQpO1xuICBjb25zdCBob3N0U2VsdmVzID0gZ2V0SG9zdFNlbHZlcyhlbGVtZW50KTtcbiAgcmV0dXJuIGdldEhvc3RDaGlsZHJlbihob3N0UGFyZW50KS5maWx0ZXIoKHNpYmxpbmcpID0+ICFob3N0U2VsdmVzLmluY2x1ZGVzKHNpYmxpbmcpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB1bnNhZmUgcm9vdCBlbGVtZW50IG9mIHRoZSB0cmVlIChwcm9iYWJseSBjb21wb3NpdGUpLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHN0YXJ0IHRyYXZlcnNpbmcgZnJvbS5cbiAqIEByZXR1cm5zIFRoZSByb290IGVsZW1lbnQgb2YgdGhlIHRyZWUgKGhvc3Qgb3IgY29tcG9zaXRlKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVuc2FmZVJvb3RFbGVtZW50KGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlKSB7XG4gIGxldCBjdXJyZW50ID0gZWxlbWVudDtcbiAgd2hpbGUgKGN1cnJlbnQucGFyZW50KSB7XG4gICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBVU8sU0FBU0MsYUFBYUEsQ0FBQ0MsT0FBa0MsRUFBK0I7RUFDN0YsT0FBTyxRQUFPQSxPQUFPLG9CQUFQQSxPQUFPLENBQUVDLElBQUksTUFBSyxRQUFRO0FBQzFDO0FBRU8sU0FBU0MsZ0JBQWdCQSxDQUFDRixPQUEwQixFQUFFO0VBQzNELE9BQU9HLG9CQUFvQixDQUFDSCxPQUFPLENBQUMsS0FBS0gsT0FBQSxDQUFBTyxNQUFNLENBQUNDLFdBQVc7QUFDN0Q7QUFNTyxTQUFTQyxhQUFhQSxDQUFDTixPQUFpQyxFQUEyQjtFQUN4RixJQUFJQSxPQUFPLElBQUksSUFBSSxFQUFFO0lBQ25CLE9BQU8sSUFBSTtFQUNiO0VBRUEsSUFBSU8sT0FBTyxHQUFHUCxPQUFPLENBQUNRLE1BQU07RUFDNUIsT0FBT0QsT0FBTyxFQUFFO0lBQ2QsSUFBSVIsYUFBYSxDQUFDUSxPQUFPLENBQUMsRUFBRTtNQUMxQixPQUFPQSxPQUFPO0lBQ2hCO0lBRUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDQyxNQUFNO0VBQzFCO0VBRUEsT0FBTyxJQUFJO0FBQ2I7QUFNTyxTQUFTQyxlQUFlQSxDQUFDVCxPQUFpQyxFQUFzQjtFQUNyRixJQUFJQSxPQUFPLElBQUksSUFBSSxFQUFFO0lBQ25CLE9BQU8sRUFBRTtFQUNYO0VBRUEsSUFBTVUsWUFBZ0MsR0FBRyxFQUFFO0VBRTNDVixPQUFPLENBQUNXLFFBQVEsQ0FBQ0MsT0FBTyxDQUFFLFVBQUFDLEtBQUssRUFBSztJQUNsQyxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7TUFDN0I7SUFDRjtJQUVBLElBQUlkLGFBQWEsQ0FBQ2MsS0FBSyxDQUFDLEVBQUU7TUFDeEJILFlBQVksQ0FBQ0ksSUFBSSxDQUFDRCxLQUFLLENBQUM7SUFDMUIsQ0FBQyxNQUFNO01BQ0xILFlBQVksQ0FBQ0ksSUFBSSxDQUFBQyxLQUFBLENBQWpCTCxZQUFZLE1BQUFNLG1CQUFBLENBQUFDLE9BQUEsRUFBU1IsZUFBZSxDQUFDSSxLQUFLLENBQUMsRUFBQztJQUM5QztFQUNGLENBQUMsQ0FBQztFQUVGLE9BQU9ILFlBQVk7QUFDckI7QUFTTyxTQUFTUSxhQUFhQSxDQUFDbEIsT0FBaUMsRUFBc0I7RUFDbkYsT0FBT0QsYUFBYSxDQUFDQyxPQUFPLENBQUMsR0FBRyxDQUFDQSxPQUFPLENBQUMsR0FBR1MsZUFBZSxDQUFDVCxPQUFPLENBQUM7QUFDdEU7QUFNTyxTQUFTbUIsZUFBZUEsQ0FBQ25CLE9BQWlDLEVBQXNCO0VBQ3JGLElBQU1vQixVQUFVLEdBQUdkLGFBQWEsQ0FBQ04sT0FBTyxDQUFDO0VBQ3pDLElBQU1xQixVQUFVLEdBQUdILGFBQWEsQ0FBQ2xCLE9BQU8sQ0FBQztFQUN6QyxPQUFPUyxlQUFlLENBQUNXLFVBQVUsQ0FBQyxDQUFDRSxNQUFNLENBQUUsVUFBQUMsT0FBTztJQUFBLE9BQUssQ0FBQ0YsVUFBVSxDQUFDRyxRQUFRLENBQUNELE9BQU8sQ0FBQztFQUFBLEVBQUM7QUFDdkY7QUFRTyxTQUFTcEIsb0JBQW9CQSxDQUFDSCxPQUEwQixFQUFFO0VBQy9ELElBQUlPLE9BQU8sR0FBR1AsT0FBTztFQUNyQixPQUFPTyxPQUFPLENBQUNDLE1BQU0sRUFBRTtJQUNyQkQsT0FBTyxHQUFHQSxPQUFPLENBQUNDLE1BQU07RUFDMUI7RUFFQSxPQUFPRCxPQUFPO0FBQ2hCIiwiaWdub3JlTGlzdCI6W119