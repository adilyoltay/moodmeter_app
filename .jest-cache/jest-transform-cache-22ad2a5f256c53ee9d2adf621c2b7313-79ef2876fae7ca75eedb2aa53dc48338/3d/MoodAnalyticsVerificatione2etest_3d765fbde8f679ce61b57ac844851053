6aa0d8b7833e29bba1f9129423947ebe
_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../services/moodTrackingService");
_getJestObj().mock("../../features/ai/hooks/useAdaptiveSuggestion");
_getJestObj().mock("../../features/ai/core/UnifiedAIPipeline");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestDataGenerator = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _UnifiedAIPipeline = require("../../features/ai/core/UnifiedAIPipeline");
var _useAdaptiveSuggestion = require("../../features/ai/hooks/useAdaptiveSuggestion");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockUseAdaptiveSuggestion = _useAdaptiveSuggestion.useAdaptiveSuggestion;
var MoodAnalyticsTestComponent = function MoodAnalyticsTestComponent() {
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isProcessing = _React$useState2[0],
    setIsProcessing = _React$useState2[1];
  var handleRefresh = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      setIsProcessing(true);
      console.log('üéØ Processing enhanced mood analytics');
      var pipeline = new _UnifiedAIPipeline.UnifiedAIPipeline();
      var result = yield pipeline.process({
        userId: 'test-user-123',
        content: mockMoodEntries,
        type: 'data',
        context: {
          source: 'mood',
          timestamp: Date.now()
        }
      });
      console.log('üìä Analytics result:', JSON.stringify(result));
      setIsProcessing(false);
    });
    return function handleRefresh() {
      return _ref.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "mood-analytics-test",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "mood-refresh",
      onPress: handleRefresh,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Refresh Analytics"
      })
    }), isProcessing && (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "Processing..."
    })]
  });
};
var mockMoodEntries = Array.from({
  length: 8
}, function (_, i) {
  return {
    id: `mood_${i + 1}`,
    user_id: 'test-user-123',
    mood_score: 30 + Math.random() * 40,
    energy_level: 3 + Math.random() * 4,
    anxiety_level: 2 + Math.random() * 6,
    notes: `Test mood entry ${i + 1}`,
    created_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString()
  };
});
var mockAnalyticsResult = {
  weeklyDelta: 0,
  volatility: 9.48,
  baselines: {
    mood: 52,
    energy: 55,
    anxiety: 45
  },
  correlations: {
    moodEnergy: {
      r: 0.65,
      n: 8,
      p: 0.032
    },
    moodAnxiety: {
      r: -0.42,
      n: 8,
      p: 0.218
    },
    energyAnxiety: {
      r: -0.28,
      n: 8,
      p: 0.498
    }
  },
  profile: {
    type: 'fatigued',
    confidence: 0.75
  },
  bestTimes: {
    dayOfWeek: 'Tuesday',
    timeOfDay: 'morning'
  },
  sampleSize: 8,
  dataQuality: 0.8,
  confidence: 0.67
};
var mockPipelineResult = {
  metadata: {
    source: 'unified',
    processedAt: Date.now(),
    version: '2.1.0'
  },
  analytics: {
    mood: mockAnalyticsResult
  },
  insights: {
    therapeutic: [{
      text: 'Mood volatility y√ºksek g√∂r√ºn√ºyor. D√ºzenli uyku rutini √∂nerilir.',
      category: 'mood_stability',
      confidence: 0.8
    }]
  },
  patterns: {
    behavioral: [],
    temporal: [],
    environmental: []
  }
};
var expectedQualityMeta = {
  source: 'unified',
  qualityLevel: 'medium',
  sampleSize: 8,
  freshnessMs: 120000
};
describe('Mood Analytics Verification E2E', function () {
  var consoleLogSpy;
  var consoleWarnSpy;
  beforeEach(function () {
    jest.clearAllMocks();
    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
    mockAsyncStorage.getItem.mockImplementation(function (key) {
      if (key.includes('mood_entries')) {
        return Promise.resolve(JSON.stringify(mockMoodEntries));
      }
      return Promise.resolve(null);
    });
    mockUseAdaptiveSuggestion.mockReturnValue({
      generateSuggestionFromPipeline: jest.fn().mockResolvedValue({
        show: true,
        id: 'test-suggestion',
        title: 'üéØ Analytics-Based Suggestion',
        content: 'Based on your mood analysis...',
        category: 'mood',
        confidence: 0.75
      }),
      loading: false
    });
    var mockPipeline = {
      process: jest.fn().mockResolvedValue(mockPipelineResult)
    };
    _UnifiedAIPipeline.UnifiedAIPipeline.mockImplementation(function () {
      return mockPipeline;
    });
  });
  afterEach(function () {
    consoleLogSpy.mockRestore();
    consoleWarnSpy.mockRestore();
  });
  describe('üìä Analytics Generation Test', function () {
    it('should generate mood analytics with correct metrics', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MoodAnalyticsTestComponent, {})),
        getByTestId = _render.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('mood-refresh'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('üéØ Processing enhanced mood analytics'));
      }, {
        timeout: 5000
      });
      var analyticsCall = consoleLogSpy.mock.calls.find(function (call) {
        var _call$;
        return (_call$ = call[0]) == null ? void 0 : _call$.includes('Processing enhanced mood analytics');
      });
      expect(analyticsCall).toBeDefined();
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('sampleSize: 8'));
        expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('dataQuality: 0.8'));
        expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('confidence: 0.67'));
      });
    }));
    it('should detect clinical profile correctly', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MoodAnalyticsTestComponent, {})),
        getByTestId = _render2.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('mood-refresh'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('üìä Clinical analytics added to patterns: Fatigued Profil'));
      });
    }));
    it('should calculate MEA correlations when data is sufficient', (0, _asyncToGenerator2.default)(function* () {
      var correlatedMoodData = mockMoodEntries.map(function (entry, i) {
        return Object.assign({}, entry, {
          mood_score: 50 + i * 5,
          energy_level: 5 + i * 0.3,
          anxiety_level: 8 - i * 0.4
        });
      });
      mockAsyncStorage.getItem.mockImplementation(function (key) {
        if (key.includes('mood_entries')) {
          return Promise.resolve(JSON.stringify(correlatedMoodData));
        }
        return Promise.resolve(null);
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MoodAnalyticsTestComponent, {})),
        getByTestId = _render3.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('mood-refresh'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('correlationsCount'));
      });
      var telemetryCall = consoleLogSpy.mock.calls.find(function (call) {
        return typeof call[1] === 'string' && call[1].includes('correlationsCount');
      });
      if (telemetryCall) {
        var telemetryData = JSON.parse(telemetryCall[1]);
        expect(telemetryData.correlationsCount).toBeGreaterThan(0);
      }
    }));
  });
  describe('üéóÔ∏è Quality Metadata Generation Test', function () {
    it('should generate quality metadata for adaptive suggestion', (0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MoodAnalyticsTestComponent, {})),
        getByTestId = _render4.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('mood-refresh'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleLogSpy).toHaveBeenCalledWith('üìä Quality metadata for mood suggestion:', expect.objectContaining({
          source: expect.any(String),
          qualityLevel: expect.any(String),
          sampleSize: expect.any(Number)
        }));
      }, {
        timeout: 8000
      });
    }));
    it('should handle quality metadata generation failure gracefully', (0, _asyncToGenerator2.default)(function* () {
      jest.doMock("../../features/ai/insights/insightRegistry", function () {
        return {
          mapUnifiedResultToRegistryItems: jest.fn().mockImplementation(function () {
            throw new Error('Mock metadata generation error');
          }),
          extractUIQualityMeta: jest.fn()
        };
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MoodAnalyticsTestComponent, {})),
        getByTestId = _render5.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('mood-refresh'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleWarnSpy).toHaveBeenCalledWith('‚ö†Ô∏è Quality metadata generation failed:', expect.any(Error));
      });
    }));
  });
  describe('üéØ Adaptive Suggestion Integration Test', function () {
    it('should render AdaptiveSuggestionCard with quality ribbon', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MoodScreen, {})
        })),
        getByText = _render6.getByText,
        getByTestId = _render6.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        (0, _reactNative.fireEvent)(getByTestId('mood-refresh'), 'onRefresh');
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('üéØ Analytics-Based Suggestion')).toBeTruthy();
      }, {
        timeout: 8000
      });
    }));
    it('should handle suggestion interaction correctly', (0, _asyncToGenerator2.default)(function* () {
      var mockTrackSuggestionClick = jest.fn();
      mockUseAdaptiveSuggestion.mockReturnValue({
        generateSuggestionFromPipeline: jest.fn().mockResolvedValue({
          show: true,
          id: 'test-suggestion',
          title: 'üéØ Analytics-Based Suggestion',
          content: 'Test content',
          category: 'mood'
        }),
        trackSuggestionClick: mockTrackSuggestionClick,
        loading: false
      });
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MoodScreen, {})
        })),
        getByText = _render7.getByText,
        getByTestId = _render7.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        (0, _reactNative.fireEvent)(getByTestId('mood-refresh'), 'onRefresh');
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('üéØ Analytics-Based Suggestion')).toBeTruthy();
      });
      var tryButton = getByText('≈ûimdi Dene');
      _reactNative.fireEvent.press(tryButton);
      expect(mockTrackSuggestionClick).toHaveBeenCalled();
    }));
  });
  describe('‚ö° Performance & Cache Test', function () {
    it('should invalidate cache correctly for fresh analytics', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MoodAnalyticsTestComponent, {})),
        getByTestId = _render8.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('mood-refresh'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleLogSpy).toHaveBeenCalledWith('üîÑ Force invalidating cache to get fresh mood analytics...');
        expect(consoleLogSpy).toHaveBeenCalledWith('‚úÖ Cache invalidated - will get fresh analytics');
      });
    }));
  });
});
var TestDataGenerator = exports.TestDataGenerator = {
  generateMoodEntries: function generateMoodEntries(count, options) {
    var defaults = {
      moodRange: [20, 80],
      energyRange: [2, 8],
      anxietyRange: [1, 9]
    };
    var config = Object.assign({}, defaults, options);
    return Array.from({
      length: count
    }, function (_, i) {
      return {
        id: `mood_${i + 1}`,
        user_id: 'test-user-123',
        mood_score: config.moodRange[0] + Math.random() * (config.moodRange[1] - config.moodRange[0]),
        energy_level: config.energyRange[0] + Math.random() * (config.energyRange[1] - config.energyRange[0]),
        anxiety_level: config.anxietyRange[0] + Math.random() * (config.anxietyRange[1] - config.anxietyRange[0]),
        notes: `Test mood entry ${i + 1}`,
        created_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString()
      };
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,