7b050a7e93c3b41f57331367e1080562
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    getAllKeys: jest.fn(),
    multiGet: jest.fn(),
    multiSet: jest.fn(),
    multiRemove: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    useRouter: jest.fn(function () {
      return {
        push: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    Stack: {
      Screen: 'Stack.Screen'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Tracking Page - Quality Ribbon Integration', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield (0, _seedData.cleanupSeeds)(_seedData.TEST_ENV.SEED_USER_ID);
  }));
  afterEach((0, _asyncToGenerator2.default)(function* () {
    yield (0, _seedData.cleanupSeeds)(_seedData.TEST_ENV.SEED_USER_ID);
  }));
  describe('[QR:tracking:fresh] Fresh Pipeline Results', function () {
    it('[QR:tracking:fresh] should display Fresh source badge with compulsion data', (0, _asyncToGenerator2.default)(function* () {
      var _freshResult$qualityM, _freshResult$qualityM2, _freshResult$qualityM3, _freshResult$qualityM4;
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 3, 2);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'high', 'tracking');
      expect((_freshResult$qualityM = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM.source).toBe('unified');
      expect((_freshResult$qualityM2 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM2.freshnessMs).toBe(0);
      expect((_freshResult$qualityM3 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM3.sampleSize).toBe(20);
      expect((_freshResult$qualityM4 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM4.quality).toBe('high');
    }));
    it('[QR:tracking:fresh] should trigger cache invalidation for new compulsion', (0, _asyncToGenerator2.default)(function* () {
      var _freshResult$qualityM5, _freshResult$qualityM6;
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 2, 1);
      var cacheInvalidated = false;
      var mockInvalidation = function mockInvalidation() {
        cacheInvalidated = true;
      };
      mockInvalidation();
      expect(cacheInvalidated).toBe(true);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'medium', 'tracking');
      expect((_freshResult$qualityM5 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM5.source).toBe('unified');
      expect((_freshResult$qualityM6 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM6.freshnessMs).toBe(0);
    }));
  });
  describe('[QR:tracking:cache] Cache Behavior & TTL Transitions', function () {
    it('[QR:tracking:cache] should transition from Fresh to Cache after TTL expires', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 2, 2);
      var freshMeta = {
        source: 'unified',
        freshnessMs: 0,
        processedAt: Date.now()
      };
      expect(freshMeta.source).toBe('unified');
      expect(freshMeta.freshnessMs).toBeLessThan(_seedData.TEST_ENV.TTL_MS);
      var cachedMeta = {
        source: 'cache',
        freshnessMs: _seedData.TEST_ENV.TTL_MS + 1000,
        processedAt: Date.now() - _seedData.TEST_ENV.TTL_MS - 1000
      };
      expect(cachedMeta.source).toBe('cache');
      expect(cachedMeta.freshnessMs).toBeGreaterThan(_seedData.TEST_ENV.TTL_MS);
    }));
    it('[QR:tracking:cache] should show appropriate age badge for cached results', (0, _asyncToGenerator2.default)(function* () {
      var _cachedResult$quality;
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 1, 3);
      var oneHourAgo = Date.now() - 60 * 60 * 1000;
      var cachedResult = (0, _seedData.createMockPipelineResult)('cache', 'medium', 'tracking');
      var ageMs = Date.now() - oneHourAgo;
      var ageInHours = Math.floor(ageMs / (60 * 60 * 1000));
      expect((_cachedResult$quality = cachedResult.qualityMetadata) == null ? void 0 : _cachedResult$quality.source).toBe('cache');
      expect(ageInHours).toBe(1);
    }));
  });
  describe('[QR:tracking:hidden] Quality Ribbon Hiding Conditions', function () {
    it('[QR:tracking:hidden] should hide when no compulsion data provided', (0, _asyncToGenerator2.default)(function* () {
      var suggestion = {
        content: 'Tracking suggestion text',
        meta: null
      };
      var shouldShowRibbon = suggestion.meta !== null && suggestion.meta !== undefined;
      expect(shouldShowRibbon).toBe(false);
    }));
    it('[QR:tracking:hidden] should hide when pipeline processing fails', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 1, 1);
      var error = null;
      try {
        throw new Error('Tracking pipeline processing failed');
      } catch (e) {
        error = e;
      }
      var shouldShowRibbon = error === null;
      expect(shouldShowRibbon).toBe(false);
      expect(error).toBeTruthy();
    }));
    it('[QR:tracking:hidden] should hide when insufficient compulsion data', (0, _asyncToGenerator2.default)(function* () {
      var _lowQualityResult$qua, _lowQualityResult$qua2, _lowQualityResult$qua3;
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 1, 1);
      var lowQualityResult = (0, _seedData.createMockPipelineResult)('unified', 'low', 'tracking');
      expect((_lowQualityResult$qua = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua.sampleSize).toBe(5);
      expect((_lowQualityResult$qua2 = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua2.quality).toBe('low');
      var qualityThreshold = 3;
      var shouldHide = (((_lowQualityResult$qua3 = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua3.sampleSize) || 0) <= qualityThreshold;
      expect(shouldHide).toBe(false);
    }));
  });
  describe('[QR:tracking:quality] Quality Level Tests', function () {
    var qualityScenarios = [{
      scenario: 'high',
      expectedQuality: 'high',
      days: 5,
      perDay: 3,
      expectedSample: 20
    }, {
      scenario: 'medium',
      expectedQuality: 'medium',
      days: 3,
      perDay: 2,
      expectedSample: 11
    }, {
      scenario: 'low',
      expectedQuality: 'low',
      days: 1,
      perDay: 2,
      expectedSample: 5
    }];
    qualityScenarios.forEach(function (_ref0) {
      var scenario = _ref0.scenario,
        expectedQuality = _ref0.expectedQuality,
        days = _ref0.days,
        perDay = _ref0.perDay,
        expectedSample = _ref0.expectedSample;
      it(`[QR:tracking:${expectedQuality}] should show ${expectedQuality} quality for ${days}dÃ—${perDay}/day data`, (0, _asyncToGenerator2.default)(function* () {
        var _result$qualityMetada, _result$qualityMetada2, _result$qualityMetada3;
        yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, days, perDay);
        var result = (0, _seedData.createMockPipelineResult)('unified', scenario, 'tracking');
        expect((_result$qualityMetada = result.qualityMetadata) == null ? void 0 : _result$qualityMetada.quality).toBe(expectedQuality);
        expect((_result$qualityMetada2 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada2.sampleSize).toBe(expectedSample);
        expect((_result$qualityMetada3 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada3.source).toBe('unified');
      }));
    });
  });
  describe('[QR:tracking:categories] Compulsion Category Tests', function () {
    var categoryScenarios = [{
      category: 'contamination',
      expectedCompulsion: 'washing'
    }, {
      category: 'checking',
      expectedCompulsion: 'checking'
    }, {
      category: 'symmetry',
      expectedCompulsion: 'organizing'
    }];
    categoryScenarios.forEach(function (_ref10) {
      var category = _ref10.category,
        expectedCompulsion = _ref10.expectedCompulsion;
      it(`[QR:tracking:category] should handle ${category} compulsion category`, (0, _asyncToGenerator2.default)(function* () {
        var _result$qualityMetada4, _result$qualityMetada5;
        yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 2, 2, category);
        var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'tracking');
        expect((_result$qualityMetada4 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada4.source).toBe('unified');
        expect((_result$qualityMetada5 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada5.quality).toBe('high');
        var categoryData = {
          category: category,
          expectedCompulsionType: expectedCompulsion
        };
        expect(categoryData.category).toBe(category);
        expect(categoryData.expectedCompulsionType).toBe(expectedCompulsion);
      }));
    });
  });
  describe('[QR:tracking:testmode] Test Mode Integration', function () {
    it('[QR:tracking:testmode] should respect TEST_TTL_MS for tracking cache', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 1, 1);
      expect(_seedData.TEST_ENV.MODE).toBe(true);
      expect(_seedData.TEST_ENV.TTL_MS).toBe(5000);
      var testTTL = _seedData.TEST_ENV.MODE ? _seedData.TEST_ENV.TTL_MS : 3600000;
      expect(testTTL).toBe(5000);
      expect(testTTL).toBeLessThan(10000);
    }));
    it('[QR:tracking:testmode] should use deterministic user ID', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada6, _result$qualityMetada7;
      yield (0, _seedData.seedTrackingCompulsions)(_seedData.TEST_ENV.SEED_USER_ID, 1, 2);
      expect(_seedData.TEST_ENV.SEED_USER_ID).toBe('test-user-1');
      var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'tracking');
      expect((_result$qualityMetada6 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada6.source).toBe('unified');
      expect((_result$qualityMetada7 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada7.quality).toBe('high');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,