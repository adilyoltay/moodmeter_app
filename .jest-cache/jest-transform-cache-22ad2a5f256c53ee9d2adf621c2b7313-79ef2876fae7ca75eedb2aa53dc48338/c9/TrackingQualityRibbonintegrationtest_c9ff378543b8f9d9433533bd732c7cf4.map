{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","removeItem","clear","getAllKeys","multiGet","multiSet","multiRemove","useRouter","push","useLocalSearchParams","Stack","Screen","_interopRequireDefault","require","_asyncToGenerator2","_seedData","_require","describe","beforeEach","default","clearAllMocks","cleanupSeeds","TEST_ENV","SEED_USER_ID","afterEach","it","_freshResult$qualityM","_freshResult$qualityM2","_freshResult$qualityM3","_freshResult$qualityM4","seedTrackingCompulsions","freshResult","createMockPipelineResult","expect","qualityMetadata","source","toBe","freshnessMs","sampleSize","quality","_freshResult$qualityM5","_freshResult$qualityM6","cacheInvalidated","mockInvalidation","freshMeta","processedAt","Date","now","toBeLessThan","TTL_MS","cachedMeta","toBeGreaterThan","_cachedResult$quality","oneHourAgo","cachedResult","ageMs","ageInHours","Math","floor","suggestion","content","meta","shouldShowRibbon","undefined","error","Error","e","toBeTruthy","_lowQualityResult$qua","_lowQualityResult$qua2","_lowQualityResult$qua3","lowQualityResult","qualityThreshold","shouldHide","qualityScenarios","scenario","expectedQuality","days","perDay","expectedSample","forEach","_ref0","_result$qualityMetada","_result$qualityMetada2","_result$qualityMetada3","result","categoryScenarios","category","expectedCompulsion","_ref10","_result$qualityMetada4","_result$qualityMetada5","categoryData","expectedCompulsionType","MODE","testTTL","_result$qualityMetada6","_result$qualityMetada7"],"sources":["TrackingQualityRibbon.integration.test.tsx"],"sourcesContent":["/**\n * ðŸ§ª Integration Tests - Tracking Page Quality Ribbon\n * \n * Tests Fresh/Cache transitions, invalidation, and Quality Ribbon visibility\n * for Tracking/Compulsion data with deterministic test mode.\n */\n\nimport type { ProvenanceSource, QualityLevel } from '@/features/ai/insights/insightRegistry';\nimport { \n  seedTrackingCompulsions,\n  cleanupSeeds,\n  TEST_ENV,\n  createMockPipelineResult\n} from '../fixtures/seedData';\n\n// Mock dependencies\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  getAllKeys: jest.fn(),\n  multiGet: jest.fn(),\n  multiSet: jest.fn(),\n  multiRemove: jest.fn(),\n}));\n\njest.mock('expo-router', () => ({\n  useRouter: jest.fn(() => ({ push: jest.fn() })),\n  useLocalSearchParams: jest.fn(() => ({})),\n  Stack: { Screen: 'Stack.Screen' }\n}));\n\ndescribe('Tracking Page - Quality Ribbon Integration', () => {\n  \n  beforeEach(async () => {\n    jest.clearAllMocks();\n    await cleanupSeeds(TEST_ENV.SEED_USER_ID);\n  });\n\n  afterEach(async () => {\n    await cleanupSeeds(TEST_ENV.SEED_USER_ID);\n  });\n\n  describe('[QR:tracking:fresh] Fresh Pipeline Results', () => {\n    it('[QR:tracking:fresh] should display Fresh source badge with compulsion data', async () => {\n      // Seed tracking compulsions: 3 days, 2 per day = 6 total compulsions\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 3, 2);\n      \n      // Mock fresh pipeline result for tracking\n      const freshResult = createMockPipelineResult('unified', 'high', 'tracking');\n      \n      // Verify fresh source characteristics\n      expect(freshResult.qualityMetadata?.source).toBe('unified');\n      expect(freshResult.qualityMetadata?.freshnessMs).toBe(0); // Fresh = 0ms\n      expect(freshResult.qualityMetadata?.sampleSize).toBe(20); // High quality tracking\n      expect(freshResult.qualityMetadata?.quality).toBe('high');\n    });\n\n    it('[QR:tracking:fresh] should trigger cache invalidation for new compulsion', async () => {\n      // Initial seed\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 2, 1);\n      \n      // Simulate invalidation trigger\n      let cacheInvalidated = false;\n      const mockInvalidation = () => {\n        cacheInvalidated = true;\n      };\n      \n      // Simulate compulsion_added event\n      mockInvalidation();\n      \n      expect(cacheInvalidated).toBe(true);\n      \n      // After invalidation, next result should be Fresh\n      const freshResult = createMockPipelineResult('unified', 'medium', 'tracking');\n      expect(freshResult.qualityMetadata?.source).toBe('unified');\n      expect(freshResult.qualityMetadata?.freshnessMs).toBe(0);\n    });\n  });\n\n  describe('[QR:tracking:cache] Cache Behavior & TTL Transitions', () => {\n    it('[QR:tracking:cache] should transition from Fresh to Cache after TTL expires', async () => {\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 2, 2);\n      \n      // Initial state: Fresh\n      const freshMeta = {\n        source: 'unified' as ProvenanceSource,\n        freshnessMs: 0,\n        processedAt: Date.now()\n      };\n      \n      expect(freshMeta.source).toBe('unified');\n      expect(freshMeta.freshnessMs).toBeLessThan(TEST_ENV.TTL_MS);\n      \n      // After TTL expires: should become Cache\n      const cachedMeta = {\n        source: 'cache' as ProvenanceSource,\n        freshnessMs: TEST_ENV.TTL_MS + 1000,\n        processedAt: Date.now() - TEST_ENV.TTL_MS - 1000\n      };\n      \n      expect(cachedMeta.source).toBe('cache');\n      expect(cachedMeta.freshnessMs).toBeGreaterThan(TEST_ENV.TTL_MS);\n    });\n\n    it('[QR:tracking:cache] should show appropriate age badge for cached results', async () => {\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 1, 3);\n      \n      // Mock cached result with specific age\n      const oneHourAgo = Date.now() - (60 * 60 * 1000);\n      const cachedResult = createMockPipelineResult('cache', 'medium', 'tracking');\n      \n      // Calculate expected age\n      const ageMs = Date.now() - oneHourAgo;\n      const ageInHours = Math.floor(ageMs / (60 * 60 * 1000));\n      \n      expect(cachedResult.qualityMetadata?.source).toBe('cache');\n      expect(ageInHours).toBe(1); // Should be 1 hour\n    });\n  });\n\n  describe('[QR:tracking:hidden] Quality Ribbon Hiding Conditions', () => {\n    it('[QR:tracking:hidden] should hide when no compulsion data provided', async () => {\n      // No seed data - empty tracking\n      const suggestion = {\n        content: 'Tracking suggestion text',\n        meta: null // No quality metadata\n      };\n      \n      const shouldShowRibbon = suggestion.meta !== null && suggestion.meta !== undefined;\n      \n      expect(shouldShowRibbon).toBe(false);\n    });\n\n    it('[QR:tracking:hidden] should hide when pipeline processing fails', async () => {\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 1, 1);\n      \n      let error = null;\n      \n      // Simulate pipeline failure\n      try {\n        throw new Error('Tracking pipeline processing failed');\n      } catch (e) {\n        error = e;\n      }\n      \n      const shouldShowRibbon = error === null;\n      \n      expect(shouldShowRibbon).toBe(false);\n      expect(error).toBeTruthy();\n    });\n\n    it('[QR:tracking:hidden] should hide when insufficient compulsion data', async () => {\n      // Very minimal data - should trigger hidden state\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 1, 1); // Only 1 compulsion\n      \n      // Low quality should potentially hide ribbon based on thresholds\n      const lowQualityResult = createMockPipelineResult('unified', 'low', 'tracking');\n      \n      expect(lowQualityResult.qualityMetadata?.sampleSize).toBe(5); // Low quality threshold\n      expect(lowQualityResult.qualityMetadata?.quality).toBe('low');\n      \n      // In real app, this might be hidden based on quality threshold\n      const qualityThreshold = 3;\n      const shouldHide = (lowQualityResult.qualityMetadata?.sampleSize || 0) <= qualityThreshold;\n      \n      expect(shouldHide).toBe(false); // 5 > 3, so still shows\n    });\n  });\n\n  describe('[QR:tracking:quality] Quality Level Tests', () => {\n    const qualityScenarios = [\n      { scenario: 'high', expectedQuality: 'high', days: 5, perDay: 3, expectedSample: 20 },\n      { scenario: 'medium', expectedQuality: 'medium', days: 3, perDay: 2, expectedSample: 11 },\n      { scenario: 'low', expectedQuality: 'low', days: 1, perDay: 2, expectedSample: 5 }\n    ] as const;\n\n    qualityScenarios.forEach(({ scenario, expectedQuality, days, perDay, expectedSample }) => {\n      it(`[QR:tracking:${expectedQuality}] should show ${expectedQuality} quality for ${days}dÃ—${perDay}/day data`, async () => {\n        await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, days, perDay);\n        \n        const result = createMockPipelineResult('unified', scenario, 'tracking');\n        \n        expect(result.qualityMetadata?.quality).toBe(expectedQuality);\n        expect(result.qualityMetadata?.sampleSize).toBe(expectedSample);\n        expect(result.qualityMetadata?.source).toBe('unified');\n      });\n    });\n  });\n\n  describe('[QR:tracking:categories] Compulsion Category Tests', () => {\n    const categoryScenarios = [\n      { category: 'contamination', expectedCompulsion: 'washing' },\n      { category: 'checking', expectedCompulsion: 'checking' },\n      { category: 'symmetry', expectedCompulsion: 'organizing' }\n    ] as const;\n\n    categoryScenarios.forEach(({ category, expectedCompulsion }) => {\n      it(`[QR:tracking:category] should handle ${category} compulsion category`, async () => {\n        await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 2, 2, category);\n        \n        const result = createMockPipelineResult('unified', 'high', 'tracking');\n        \n        // Verify category-specific data is properly structured\n        expect(result.qualityMetadata?.source).toBe('unified');\n        expect(result.qualityMetadata?.quality).toBe('high');\n        \n        // In real implementation, category would influence analytics\n        // Here we just verify the pipeline processes category-specific data\n        const categoryData = {\n          category,\n          expectedCompulsionType: expectedCompulsion\n        };\n        \n        expect(categoryData.category).toBe(category);\n        expect(categoryData.expectedCompulsionType).toBe(expectedCompulsion);\n      });\n    });\n  });\n\n  describe('[QR:tracking:testmode] Test Mode Integration', () => {\n    it('[QR:tracking:testmode] should respect TEST_TTL_MS for tracking cache', async () => {\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 1, 1);\n      \n      expect(TEST_ENV.MODE).toBe(true);\n      expect(TEST_ENV.TTL_MS).toBe(5000);\n      \n      // Test mode should use shorter TTL for faster testing\n      const testTTL = TEST_ENV.MODE ? TEST_ENV.TTL_MS : 3600000;\n      expect(testTTL).toBe(5000);\n      expect(testTTL).toBeLessThan(10000); // Much shorter than production\n    });\n\n    it('[QR:tracking:testmode] should use deterministic user ID', async () => {\n      await seedTrackingCompulsions(TEST_ENV.SEED_USER_ID, 1, 2);\n      \n      expect(TEST_ENV.SEED_USER_ID).toBe('test-user-1');\n      \n      // All tracking data should use this deterministic ID\n      const result = createMockPipelineResult('unified', 'high', 'tracking');\n      \n      // Verify deterministic behavior\n      expect(result.qualityMetadata?.source).toBe('unified');\n      expect(result.qualityMetadata?.quality).toBe('high');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}