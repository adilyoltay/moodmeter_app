4d2270e0e4c44ebd6a9ae72847576a6b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenHeader = ScreenHeader;
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _expoStatusBar = require("expo-status-bar");
var _Colors = require("../../constants/Colors");
var _OfflineBanner = _interopRequireDefault(require("../ui/OfflineBanner"));
var _SafeModeBanner = _interopRequireDefault(require("../ui/SafeModeBanner"));
var _jsxRuntime = require("react/jsx-runtime");
function ScreenLayout(_ref) {
  var children = _ref.children,
    _ref$scrollable = _ref.scrollable,
    scrollable = _ref$scrollable === void 0 ? true : _ref$scrollable,
    _ref$showStatusBar = _ref.showStatusBar,
    showStatusBar = _ref$showStatusBar === void 0 ? true : _ref$showStatusBar,
    _ref$statusBarStyle = _ref.statusBarStyle,
    statusBarStyle = _ref$statusBarStyle === void 0 ? 'dark' : _ref$statusBarStyle,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? '#F9FAFB' : _ref$backgroundColor,
    _ref$edges = _ref.edges,
    edges = _ref$edges === void 0 ? ['top', 'bottom', 'left', 'right'] : _ref$edges;
  var containerStyle = [styles.container, {
    backgroundColor: backgroundColor
  }];
  var _wrapTextNodesDeep = function wrapTextNodesDeep(node) {
    var keyPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'k';
    if (node === null || node === undefined || typeof node === 'boolean') return null;
    if (typeof node === 'string' || typeof node === 'number') {
      return (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: node
      }, `${keyPrefix}_txt`);
    }
    if (Array.isArray(node)) {
      return node.map(function (child, idx) {
        var wrappedChild = _wrapTextNodesDeep(child, `${keyPrefix}_${idx}`);
        if (_react.default.isValidElement(wrappedChild)) {
          if (wrappedChild.key == null) {
            return _react.default.cloneElement(wrappedChild, {
              key: `${keyPrefix}_${idx}`
            });
          }
        }
        return wrappedChild;
      });
    }
    if (_react.default.isValidElement(node)) {
      var _props;
      var origChildren = (_props = node.props) == null ? void 0 : _props.children;
      if (origChildren === undefined) return node;
      var wrapped = _wrapTextNodesDeep(origChildren, `${keyPrefix}_c`);
      var childrenWithKeys = Array.isArray(wrapped) ? wrapped.map(function (ch, idx) {
        if (_react.default.isValidElement(ch)) {
          if (ch.key == null) {
            return _react.default.cloneElement(ch, {
              key: `${keyPrefix}_c_${idx}`
            });
          }
        }
        return ch;
      }) : wrapped;
      return _react.default.cloneElement(node, undefined, childrenWithKeys);
    }
    return node;
  };
  var childArray = _react.default.Children.toArray(children);
  var hasVirtualizedList = childArray.some(function (node) {
    var _node$type, _node$type2;
    var typeName = (node == null || (_node$type = node.type) == null ? void 0 : _node$type.displayName) || (node == null || (_node$type2 = node.type) == null ? void 0 : _node$type2.name) || '';
    return ['FlatList', 'SectionList', 'VirtualizedList'].includes(typeName);
  });
  var normalizedChildren = childArray.map(function (node, idx) {
    return _wrapTextNodesDeep(node, `root_${idx}`);
  });
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: containerStyle,
    edges: edges,
    children: [(0, _jsxRuntime.jsx)(_SafeModeBanner.default, {}), (0, _jsxRuntime.jsx)(_OfflineBanner.default, {}), showStatusBar && (0, _jsxRuntime.jsx)(_expoStatusBar.StatusBar, {
      style: statusBarStyle,
      backgroundColor: backgroundColor,
      translucent: false
    }), scrollable && !hasVirtualizedList ? (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      style: styles.scrollView,
      contentContainerStyle: styles.scrollContent,
      showsVerticalScrollIndicator: false,
      keyboardShouldPersistTaps: "handled",
      children: normalizedChildren
    }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.content,
      children: normalizedChildren
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  scrollView: {
    flex: 1
  },
  scrollContent: {
    flexGrow: 1,
    paddingHorizontal: 16,
    paddingVertical: 8
  },
  content: {
    flex: 1,
    paddingHorizontal: 16,
    paddingVertical: 8
  }
});
function ScreenHeader(_ref2) {
  var title = _ref2.title,
    subtitle = _ref2.subtitle,
    rightComponent = _ref2.rightComponent;
  var colorScheme = (0, _reactNative.useColorScheme)();
  var colors = _Colors.Colors[colorScheme != null ? colorScheme : 'light'];
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [headerStyles.container, {
      borderBottomColor: colors.icon
    }],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: headerStyles.titleContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [headerStyles.title, {
          color: colors.text
        }],
        children: title
      }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [headerStyles.subtitle, {
          color: colors.tabIconDefault
        }],
        children: subtitle
      })]
    }), rightComponent && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: headerStyles.rightContainer,
      children: rightComponent
    })]
  });
}
var headerStyles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1
  },
  titleContainer: {
    flex: 1
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    fontFamily: _reactNative.Platform.select({
      ios: 'System',
      android: 'Roboto'
    })
  },
  subtitle: {
    fontSize: 14,
    marginTop: 2
  },
  rightContainer: {
    marginLeft: 16
  }
});
var _default = exports.default = ScreenLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,