f8ea9cc5d408aded3200b9031d3fe049
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ErrorBoundary = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _featureFlags = require("../constants/featureFlags");
var _aiTelemetry = require("../features/ai/telemetry/aiTelemetry");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ErrorBoundary = exports.ErrorBoundary = function (_Component) {
  function ErrorBoundary(props) {
    var _this;
    (0, _classCallCheck2.default)(this, ErrorBoundary);
    _this = _callSuper(this, ErrorBoundary, [props]);
    _this.logErrorToStorage = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (error, errorInfo) {
        try {
          var errorLog = {
            timestamp: new Date().toISOString(),
            message: error.message,
            stack: error.stack,
            componentStack: errorInfo.componentStack,
            userAgent: 'React Native App'
          };
          var existingLogs = yield _asyncStorage.default.getItem('error_logs');
          var logs = existingLogs ? JSON.parse(existingLogs) : [];
          logs.push(errorLog);
          var recentLogs = logs.slice(-10);
          yield _asyncStorage.default.setItem('error_logs', JSON.stringify(recentLogs));
        } catch (err) {
          console.error('Failed to log error:', err);
        }
      });
      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();
    _this.handleRestart = function () {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      _this.setState({
        hasError: false,
        error: undefined,
        errorInfo: undefined
      });
    };
    _this.handleReportIssue = function () {
      var _this$state$error;
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      var errorMessage = ((_this$state$error = _this.state.error) == null ? void 0 : _this$state$error.message) || 'Bilinmeyen hata';
      var subject = encodeURIComponent('ObsessLess - Hata Raporu');
      var body = encodeURIComponent(`
Merhaba ObsessLess Destek Ekibi,

Uygulamada bir hata oluştu:

Hata: ${errorMessage}
Zaman: ${new Date().toLocaleString('tr-TR')}
Platform: React Native

Lütfen bu sorunu inceleyin.

Teşekkürler
    `);
      console.log('Bug report would be sent:', {
        subject: subject,
        body: body
      });
    };
    _this.autoDisableWindowKey = 'error_window_start';
    _this.autoDisableCountKey = 'error_window_count';
    _this.state = {
      hasError: false
    };
    return _this;
  }
  (0, _inherits2.default)(ErrorBoundary, _Component);
  return (0, _createClass2.default)(ErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      this.setState({
        errorInfo: errorInfo
      });
      console.error('ErrorBoundary caught an error:', error, errorInfo);
      this.logErrorToStorage(error, errorInfo);
      this.autoDisableOnRepeatedErrors(error).catch(function () {});
    }
  }, {
    key: "autoDisableOnRepeatedErrors",
    value: function () {
      var _autoDisableOnRepeatedErrors = (0, _asyncToGenerator2.default)(function* (err) {
        try {
          var now = Date.now();
          var winRaw = yield _asyncStorage.default.getItem(this.autoDisableWindowKey);
          var cntRaw = yield _asyncStorage.default.getItem(this.autoDisableCountKey);
          var win = winRaw ? parseInt(winRaw, 10) : now;
          var cnt = cntRaw ? parseInt(cntRaw, 10) : 0;
          var tenMin = 10 * 60 * 1000;
          if (now - win > tenMin) {
            yield _asyncStorage.default.setItem(this.autoDisableWindowKey, String(now));
            cnt = 0;
          }
          cnt += 1;
          yield _asyncStorage.default.setItem(this.autoDisableCountKey, String(cnt));
          if (cnt >= 3) {
            _featureFlags.FEATURE_FLAGS.setFlag('AI_ENABLED', false);
            yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_STATUS, {
              event: 'auto_feature_disable',
              reason: 'repeated_errors',
              count: cnt
            });
          }
        } catch (_unused) {}
      });
      function autoDisableOnRepeatedErrors(_x3) {
        return _autoDisableOnRepeatedErrors.apply(this, arguments);
      }
      return autoDisableOnRepeatedErrors;
    }()
  }, {
    key: "render",
    value: function render() {
      if (this.state.hasError) {
        if (this.props.fallback) {
          return this.props.fallback;
        }
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.container,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.content,
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.iconContainer,
              children: (0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
                name: "alert-circle-outline",
                size: 64,
                color: "#F59E0B"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.title,
              children: "Oops! Bir sorun olu\u015Ftu \uD83D\uDE14"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.description,
              children: "Endi\u015Felenme, bu senin hatan de\u011Fil. Uygulama beklenmedik bir durumla kar\u015F\u0131la\u015Ft\u0131. Verilerini kaybetmedin ve birka\xE7 saniye i\xE7inde her \u015Fey normale d\xF6necek."
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.suggestion,
              children: "\uD83D\uDCA1 \u0130pucu: Bu durumlar nadiren olur ve genellikle uygulamay\u0131 yeniden ba\u015Flatmak sorunu \xE7\xF6zer."
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.actions,
              children: [(0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
                style: styles.primaryButton,
                onPress: this.handleRestart,
                children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
                  name: "refresh",
                  size: 20,
                  color: "#FFFFFF"
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.primaryButtonText,
                  children: "Yeniden Ba\u015Flat"
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
                style: styles.secondaryButton,
                onPress: this.handleReportIssue,
                children: [(0, _jsxRuntime.jsx)(_vectorIcons.MaterialCommunityIcons, {
                  name: "bug",
                  size: 20,
                  color: "#6B7280"
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.secondaryButtonText,
                  children: "Sorunu Bildir"
                })]
              })]
            }), __DEV__ && this.state.error && (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.technicalDetails,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.technicalTitle,
                children: "\uD83D\uDD27 Geli\u015Ftirici Bilgileri:"
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.technicalText,
                children: this.state.error.message
              }), this.state.error.stack && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: styles.technicalStack,
                children: [this.state.error.stack.slice(0, 200), "..."]
              })]
            })]
          })
        });
      }
      return this.props.children;
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError(error) {
      return {
        hasError: true,
        error: error
      };
    }
  }]);
}(_react.Component);
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20
  },
  content: {
    alignItems: 'center',
    maxWidth: 320
  },
  iconContainer: {
    marginBottom: 24,
    padding: 16,
    backgroundColor: '#FEF3C7',
    borderRadius: 32
  },
  title: {
    fontSize: 24,
    fontWeight: '600',
    color: '#111827',
    textAlign: 'center',
    marginBottom: 16,
    fontFamily: 'Inter'
  },
  description: {
    fontSize: 16,
    color: '#4B5563',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 16,
    fontFamily: 'Inter'
  },
  suggestion: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    fontStyle: 'italic',
    marginBottom: 32,
    fontFamily: 'Inter'
  },
  actions: {
    width: '100%',
    gap: 12
  },
  primaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#10B981',
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 12,
    gap: 8
  },
  primaryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    fontFamily: 'Inter'
  },
  secondaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FFFFFF',
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#D1D5DB',
    gap: 8
  },
  secondaryButtonText: {
    color: '#6B7280',
    fontSize: 16,
    fontWeight: '500',
    fontFamily: 'Inter'
  },
  technicalDetails: {
    marginTop: 32,
    padding: 16,
    backgroundColor: '#FEF2F2',
    borderRadius: 8,
    width: '100%'
  },
  technicalTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#DC2626',
    marginBottom: 8,
    fontFamily: 'Inter'
  },
  technicalText: {
    fontSize: 12,
    color: '#7F1D1D',
    fontFamily: 'monospace',
    marginBottom: 8
  },
  technicalStack: {
    fontSize: 10,
    color: '#991B1B',
    fontFamily: 'monospace',
    opacity: 0.8
  }
});
var _default = exports.default = ErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,