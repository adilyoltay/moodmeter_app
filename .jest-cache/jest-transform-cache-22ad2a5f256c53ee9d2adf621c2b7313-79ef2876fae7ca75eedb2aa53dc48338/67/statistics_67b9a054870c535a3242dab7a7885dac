2aa7486c3758a91dcbb21702d636243c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recencyAlpha = exports.quantiles = exports.lcg = exports.jitterXY = exports.energyToColor = void 0;
var quantiles = exports.quantiles = function quantiles(arr) {
  var vals = (arr || []).map(Number).filter(function (n) {
    return Number.isFinite(n);
  });
  if (vals.length === 0) return {
    p25: NaN,
    p50: NaN,
    p75: NaN
  };
  var a = Float64Array.from(vals).sort();
  var q = function q(p) {
    var idx = (a.length - 1) * p;
    var lo = Math.floor(idx);
    var hi = Math.ceil(idx);
    if (lo === hi) return a[lo];
    var t = idx - lo;
    return a[lo] * (1 - t) + a[hi] * t;
  };
  return {
    p25: q(0.25),
    p50: q(0.5),
    p75: q(0.75)
  };
};
var recencyAlpha = exports.recencyAlpha = function recencyAlpha(ts, minTs, maxTs) {
  if (maxTs === minTs) return 1;
  var t = (ts - minTs) / (maxTs - minTs);
  return 0.5 + 0.5 * Math.max(0, Math.min(1, t));
};
var lcg = exports.lcg = function lcg(seed) {
  return function () {
    return (seed = seed * 1664525 + 1013904223 >>> 0) / 2 ** 32;
  };
};
var jitterXY = exports.jitterXY = function jitterXY(seedKey) {
  var xMaxPx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;
  var yMaxPx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2.2;
  var h = 2166136261;
  for (var i = 0; i < seedKey.length; i++) {
    h ^= seedKey.charCodeAt(i);
    h = Math.imul(h, 16777619);
  }
  var rnd = lcg(h >>> 0);
  return {
    jx: (rnd() - 0.5) * 2 * xMaxPx,
    jy: (rnd() - 0.5) * 2 * yMaxPx
  };
};
var energyToColor = exports.energyToColor = function energyToColor(e) {
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var isDark = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var raw = typeof e === 'number' && e <= 10 ? e * 10 : e;
  var val = Number.isFinite(raw) ? raw : 60;
  var clamped = Math.max(0, Math.min(100, val));
  var hue = 200 - 180 * clamped / 100;
  var lightness = isDark ? 58 : 46;
  var h = Number.isFinite(hue) ? Math.round(hue) : 200;
  return `hsla(${h}, 65%, ${lightness}%, ${alpha})`;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJxdWFudGlsZXMiLCJleHBvcnRzIiwiYXJyIiwidmFscyIsIm1hcCIsIk51bWJlciIsImZpbHRlciIsIm4iLCJpc0Zpbml0ZSIsImxlbmd0aCIsInAyNSIsIk5hTiIsInA1MCIsInA3NSIsImEiLCJGbG9hdDY0QXJyYXkiLCJmcm9tIiwic29ydCIsInEiLCJwIiwiaWR4IiwibG8iLCJNYXRoIiwiZmxvb3IiLCJoaSIsImNlaWwiLCJ0IiwicmVjZW5jeUFscGhhIiwidHMiLCJtaW5UcyIsIm1heFRzIiwibWF4IiwibWluIiwibGNnIiwic2VlZCIsImppdHRlclhZIiwic2VlZEtleSIsInhNYXhQeCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInlNYXhQeCIsImgiLCJpIiwiY2hhckNvZGVBdCIsImltdWwiLCJybmQiLCJqeCIsImp5IiwiZW5lcmd5VG9Db2xvciIsImUiLCJhbHBoYSIsImlzRGFyayIsInJhdyIsInZhbCIsImNsYW1wZWQiLCJodWUiLCJsaWdodG5lc3MiLCJyb3VuZCJdLCJzb3VyY2VzIjpbInN0YXRpc3RpY3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgSVFSID0geyBwMjU6IG51bWJlcjsgcDUwOiBudW1iZXI7IHA3NTogbnVtYmVyIH07XG5cbmV4cG9ydCBjb25zdCBxdWFudGlsZXMgPSAoYXJyOiBudW1iZXJbXSk6IElRUiA9PiB7XG4gIGNvbnN0IHZhbHMgPSAoYXJyIHx8IFtdKS5tYXAoTnVtYmVyKS5maWx0ZXIoKG4pID0+IE51bWJlci5pc0Zpbml0ZShuKSk7XG4gIGlmICh2YWxzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHsgcDI1OiBOYU4sIHA1MDogTmFOLCBwNzU6IE5hTiB9O1xuICBjb25zdCBhID0gRmxvYXQ2NEFycmF5LmZyb20odmFscykuc29ydCgpO1xuICBjb25zdCBxID0gKHA6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGlkeCA9IChhLmxlbmd0aCAtIDEpICogcDtcbiAgICBjb25zdCBsbyA9IE1hdGguZmxvb3IoaWR4KTtcbiAgICBjb25zdCBoaSA9IE1hdGguY2VpbChpZHgpO1xuICAgIGlmIChsbyA9PT0gaGkpIHJldHVybiBhW2xvXTtcbiAgICBjb25zdCB0ID0gaWR4IC0gbG87XG4gICAgcmV0dXJuIGFbbG9dICogKDEgLSB0KSArIGFbaGldICogdDtcbiAgfTtcbiAgcmV0dXJuIHsgcDI1OiBxKDAuMjUpLCBwNTA6IHEoMC41KSwgcDc1OiBxKDAuNzUpIH07XG59O1xuXG5leHBvcnQgY29uc3QgcmVjZW5jeUFscGhhID0gKHRzOiBudW1iZXIsIG1pblRzOiBudW1iZXIsIG1heFRzOiBudW1iZXIpID0+IHtcbiAgaWYgKG1heFRzID09PSBtaW5UcykgcmV0dXJuIDE7XG4gIGNvbnN0IHQgPSAodHMgLSBtaW5UcykgLyAobWF4VHMgLSBtaW5Ucyk7XG4gIHJldHVybiAwLjUgKyAwLjUgKiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7XG59O1xuXG5leHBvcnQgY29uc3QgbGNnID0gKHNlZWQ6IG51bWJlcikgPT4gKCkgPT4gKHNlZWQgPSAoc2VlZCAqIDE2NjQ1MjUgKyAxMDEzOTA0MjIzKSA+Pj4gMCkgLyAyICoqIDMyO1xuXG5leHBvcnQgY29uc3Qgaml0dGVyWFkgPSAoc2VlZEtleTogc3RyaW5nLCB4TWF4UHggPSAxMiwgeU1heFB4ID0gMi4yKSA9PiB7XG4gIGxldCBoID0gMjE2NjEzNjI2MTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWVkS2V5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaCBePSBzZWVkS2V5LmNoYXJDb2RlQXQoaSk7XG4gICAgaCA9IE1hdGguaW11bChoLCAxNjc3NzYxOSk7XG4gIH1cbiAgY29uc3Qgcm5kID0gbGNnKGggPj4+IDApO1xuICByZXR1cm4geyBqeDogKHJuZCgpIC0gMC41KSAqIDIgKiB4TWF4UHgsIGp5OiAocm5kKCkgLSAwLjUpICogMiAqIHlNYXhQeCB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGVuZXJneVRvQ29sb3IgPSAoZTogbnVtYmVyLCBhbHBoYTogbnVtYmVyID0gMSwgaXNEYXJrOiBib29sZWFuID0gZmFsc2UpID0+IHtcbiAgLy8gZSByYXc6IG9mdGVuIDEuLjEwOyBub3JtYWxpemUgdG8gMC4uMTAwXG4gIGNvbnN0IHJhdyA9IHR5cGVvZiBlID09PSAnbnVtYmVyJyAmJiBlIDw9IDEwID8gZSAqIDEwIDogZTtcbiAgY29uc3QgdmFsID0gTnVtYmVyLmlzRmluaXRlKHJhdykgPyAocmF3IGFzIG51bWJlcikgOiA2MDsgLy8gZmFsbGJhY2sgbWlkXG4gIGNvbnN0IGNsYW1wZWQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxMDAsIHZhbCkpO1xuICBjb25zdCBodWUgPSAyMDAgLSAoMTgwICogY2xhbXBlZCkgLyAxMDA7IC8vIDIwMMKwIChsb3cpIOKGkiAyMMKwIChoaWdoKVxuICBjb25zdCBsaWdodG5lc3MgPSBpc0RhcmsgPyA1OCA6IDQ2OyAvLyBhMTF5IGNvbnRyYXN0IHR1bmluZ1xuICBjb25zdCBoID0gTnVtYmVyLmlzRmluaXRlKGh1ZSkgPyBNYXRoLnJvdW5kKGh1ZSkgOiAyMDA7XG4gIHJldHVybiBgaHNsYSgke2h9LCA2NSUsICR7bGlnaHRuZXNzfSUsICR7YWxwaGF9KWA7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBRU8sSUFBTUEsU0FBUyxHQUFBQyxPQUFBLENBQUFELFNBQUEsR0FBRyxTQUFaQSxTQUFTQSxDQUFJRSxHQUFhLEVBQVU7RUFDL0MsSUFBTUMsSUFBSSxHQUFHLENBQUNELEdBQUcsSUFBSSxFQUFFLEVBQUVFLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLE1BQU0sQ0FBQyxVQUFDQyxDQUFDO0lBQUEsT0FBS0YsTUFBTSxDQUFDRyxRQUFRLENBQUNELENBQUMsQ0FBQztFQUFBLEVBQUM7RUFDdEUsSUFBSUosSUFBSSxDQUFDTSxNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU87SUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQUVDLEdBQUcsRUFBRUQsR0FBRztJQUFFRSxHQUFHLEVBQUVGO0VBQUksQ0FBQztFQUM5RCxJQUFNRyxDQUFDLEdBQUdDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDYixJQUFJLENBQUMsQ0FBQ2MsSUFBSSxDQUFDLENBQUM7RUFDeEMsSUFBTUMsQ0FBQyxHQUFHLFNBQUpBLENBQUNBLENBQUlDLENBQVMsRUFBSztJQUN2QixJQUFNQyxHQUFHLEdBQUcsQ0FBQ04sQ0FBQyxDQUFDTCxNQUFNLEdBQUcsQ0FBQyxJQUFJVSxDQUFDO0lBQzlCLElBQU1FLEVBQUUsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNILEdBQUcsQ0FBQztJQUMxQixJQUFNSSxFQUFFLEdBQUdGLElBQUksQ0FBQ0csSUFBSSxDQUFDTCxHQUFHLENBQUM7SUFDekIsSUFBSUMsRUFBRSxLQUFLRyxFQUFFLEVBQUUsT0FBT1YsQ0FBQyxDQUFDTyxFQUFFLENBQUM7SUFDM0IsSUFBTUssQ0FBQyxHQUFHTixHQUFHLEdBQUdDLEVBQUU7SUFDbEIsT0FBT1AsQ0FBQyxDQUFDTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUdLLENBQUMsQ0FBQyxHQUFHWixDQUFDLENBQUNVLEVBQUUsQ0FBQyxHQUFHRSxDQUFDO0VBQ3BDLENBQUM7RUFDRCxPQUFPO0lBQUVoQixHQUFHLEVBQUVRLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFBRU4sR0FBRyxFQUFFTSxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQUVMLEdBQUcsRUFBRUssQ0FBQyxDQUFDLElBQUk7RUFBRSxDQUFDO0FBQ3BELENBQUM7QUFFTSxJQUFNUyxZQUFZLEdBQUExQixPQUFBLENBQUEwQixZQUFBLEdBQUcsU0FBZkEsWUFBWUEsQ0FBSUMsRUFBVSxFQUFFQyxLQUFhLEVBQUVDLEtBQWEsRUFBSztFQUN4RSxJQUFJQSxLQUFLLEtBQUtELEtBQUssRUFBRSxPQUFPLENBQUM7RUFDN0IsSUFBTUgsQ0FBQyxHQUFHLENBQUNFLEVBQUUsR0FBR0MsS0FBSyxLQUFLQyxLQUFLLEdBQUdELEtBQUssQ0FBQztFQUN4QyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUdQLElBQUksQ0FBQ1MsR0FBRyxDQUFDLENBQUMsRUFBRVQsSUFBSSxDQUFDVSxHQUFHLENBQUMsQ0FBQyxFQUFFTixDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRU0sSUFBTU8sR0FBRyxHQUFBaEMsT0FBQSxDQUFBZ0MsR0FBQSxHQUFHLFNBQU5BLEdBQUdBLENBQUlDLElBQVk7RUFBQSxPQUFLO0lBQUEsT0FBTSxDQUFDQSxJQUFJLEdBQUlBLElBQUksR0FBRyxPQUFPLEdBQUcsVUFBVSxLQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtFQUFBO0FBQUE7QUFFMUYsSUFBTUMsUUFBUSxHQUFBbEMsT0FBQSxDQUFBa0MsUUFBQSxHQUFHLFNBQVhBLFFBQVFBLENBQUlDLE9BQWUsRUFBZ0M7RUFBQSxJQUE5QkMsTUFBTSxHQUFBQyxTQUFBLENBQUE3QixNQUFBLFFBQUE2QixTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEVBQUU7RUFBQSxJQUFFRSxNQUFNLEdBQUFGLFNBQUEsQ0FBQTdCLE1BQUEsUUFBQTZCLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsR0FBRztFQUNqRSxJQUFJRyxDQUFDLEdBQUcsVUFBVTtFQUNsQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR04sT0FBTyxDQUFDM0IsTUFBTSxFQUFFaUMsQ0FBQyxFQUFFLEVBQUU7SUFDdkNELENBQUMsSUFBSUwsT0FBTyxDQUFDTyxVQUFVLENBQUNELENBQUMsQ0FBQztJQUMxQkQsQ0FBQyxHQUFHbkIsSUFBSSxDQUFDc0IsSUFBSSxDQUFDSCxDQUFDLEVBQUUsUUFBUSxDQUFDO0VBQzVCO0VBQ0EsSUFBTUksR0FBRyxHQUFHWixHQUFHLENBQUNRLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDeEIsT0FBTztJQUFFSyxFQUFFLEVBQUUsQ0FBQ0QsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHUixNQUFNO0lBQUVVLEVBQUUsRUFBRSxDQUFDRixHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUdMO0VBQU8sQ0FBQztBQUMzRSxDQUFDO0FBRU0sSUFBTVEsYUFBYSxHQUFBL0MsT0FBQSxDQUFBK0MsYUFBQSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFJQyxDQUFTLEVBQWlEO0VBQUEsSUFBL0NDLEtBQWEsR0FBQVosU0FBQSxDQUFBN0IsTUFBQSxRQUFBNkIsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0VBQUEsSUFBRWEsTUFBZSxHQUFBYixTQUFBLENBQUE3QixNQUFBLFFBQUE2QixTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEtBQUs7RUFFakYsSUFBTWMsR0FBRyxHQUFHLE9BQU9ILENBQUMsS0FBSyxRQUFRLElBQUlBLENBQUMsSUFBSSxFQUFFLEdBQUdBLENBQUMsR0FBRyxFQUFFLEdBQUdBLENBQUM7RUFDekQsSUFBTUksR0FBRyxHQUFHaEQsTUFBTSxDQUFDRyxRQUFRLENBQUM0QyxHQUFHLENBQUMsR0FBSUEsR0FBRyxHQUFjLEVBQUU7RUFDdkQsSUFBTUUsT0FBTyxHQUFHaEMsSUFBSSxDQUFDUyxHQUFHLENBQUMsQ0FBQyxFQUFFVCxJQUFJLENBQUNVLEdBQUcsQ0FBQyxHQUFHLEVBQUVxQixHQUFHLENBQUMsQ0FBQztFQUMvQyxJQUFNRSxHQUFHLEdBQUcsR0FBRyxHQUFJLEdBQUcsR0FBR0QsT0FBTyxHQUFJLEdBQUc7RUFDdkMsSUFBTUUsU0FBUyxHQUFHTCxNQUFNLEdBQUcsRUFBRSxHQUFHLEVBQUU7RUFDbEMsSUFBTVYsQ0FBQyxHQUFHcEMsTUFBTSxDQUFDRyxRQUFRLENBQUMrQyxHQUFHLENBQUMsR0FBR2pDLElBQUksQ0FBQ21DLEtBQUssQ0FBQ0YsR0FBRyxDQUFDLEdBQUcsR0FBRztFQUN0RCxPQUFPLFFBQVFkLENBQUMsVUFBVWUsU0FBUyxNQUFNTixLQUFLLEdBQUc7QUFDbkQsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==