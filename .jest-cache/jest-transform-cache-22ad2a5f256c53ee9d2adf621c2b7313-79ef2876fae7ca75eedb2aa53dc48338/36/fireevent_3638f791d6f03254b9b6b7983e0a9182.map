{"version":3,"names":["_act","_interopRequireDefault","require","_eventHandler","_componentTree","_hostComponentNames","_pointerEvents","_textInput","_nativeState","e","__esModule","default","isTouchResponder","element","isHostElement","Boolean","props","onStartShouldSetResponder","isHostTextInput","eventsAffectedByPointerEventsProp","Set","textInputEventsIgnoringEditableProp","isEventEnabled","eventName","nearestTouchResponder","isEditableTextInput","has","isPointerEventEnabled","touchStart","touchMove","onMoveShouldSetResponder","undefined","findEventHandler","touchResponder","handler","getEventHandler","loose","parent","fireEvent","_len","arguments","length","data","Array","_key","isElementMounted","setNativeStateIfNeeded","returnValue","apply","press","_len2","_key2","concat","changeText","_len3","_key3","scroll","_len4","_key4","fireEventAsync","_x","_x2","_fireEventAsync","_asyncToGenerator2","_len5","_key5","_ref","_len6","_key6","_x3","_ref2","_len7","_key7","_x4","_ref3","_len8","_key8","_x5","_default","exports","scrollEventNames","value","nativeState","valueForElement","set","isHostScrollView","contentOffset","tryGetContentOffset","contentOffsetForElement","event","_event$nativeEvent","nativeEvent","x","y","Number","isFinite","_unused"],"sources":["../src/fire-event.ts"],"sourcesContent":["import type {\n  PressableProps,\n  ScrollViewProps,\n  TextInputProps,\n  TextProps,\n  ViewProps,\n} from 'react-native';\nimport type { ReactTestInstance } from 'react-test-renderer';\n\nimport act from './act';\nimport { getEventHandler } from './event-handler';\nimport { isElementMounted, isHostElement } from './helpers/component-tree';\nimport { isHostScrollView, isHostTextInput } from './helpers/host-component-names';\nimport { isPointerEventEnabled } from './helpers/pointer-events';\nimport { isEditableTextInput } from './helpers/text-input';\nimport { nativeState } from './native-state';\nimport type { Point, StringWithAutocomplete } from './types';\n\ntype EventHandler = (...args: unknown[]) => unknown;\n\nexport function isTouchResponder(element: ReactTestInstance) {\n  if (!isHostElement(element)) {\n    return false;\n  }\n\n  return Boolean(element.props.onStartShouldSetResponder) || isHostTextInput(element);\n}\n\n/**\n * List of events affected by `pointerEvents` prop.\n *\n * Note: `fireEvent` is accepting both `press` and `onPress` for event names,\n * so we need cover both forms.\n */\nconst eventsAffectedByPointerEventsProp = new Set(['press', 'onPress']);\n\n/**\n * List of `TextInput` events not affected by `editable` prop.\n *\n * Note: `fireEvent` is accepting both `press` and `onPress` for event names,\n * so we need cover both forms.\n */\nconst textInputEventsIgnoringEditableProp = new Set([\n  'contentSizeChange',\n  'onContentSizeChange',\n  'layout',\n  'onLayout',\n  'scroll',\n  'onScroll',\n]);\n\nexport function isEventEnabled(\n  element: ReactTestInstance,\n  eventName: string,\n  nearestTouchResponder?: ReactTestInstance,\n) {\n  if (nearestTouchResponder != null && isHostTextInput(nearestTouchResponder)) {\n    return (\n      isEditableTextInput(nearestTouchResponder) ||\n      textInputEventsIgnoringEditableProp.has(eventName)\n    );\n  }\n\n  if (eventsAffectedByPointerEventsProp.has(eventName) && !isPointerEventEnabled(element)) {\n    return false;\n  }\n\n  const touchStart = nearestTouchResponder?.props.onStartShouldSetResponder?.();\n  const touchMove = nearestTouchResponder?.props.onMoveShouldSetResponder?.();\n  if (touchStart || touchMove) {\n    return true;\n  }\n\n  return touchStart === undefined && touchMove === undefined;\n}\n\nfunction findEventHandler(\n  element: ReactTestInstance,\n  eventName: string,\n  nearestTouchResponder?: ReactTestInstance,\n): EventHandler | null {\n  const touchResponder = isTouchResponder(element) ? element : nearestTouchResponder;\n\n  const handler = getEventHandler(element, eventName, { loose: true });\n  if (handler && isEventEnabled(element, eventName, touchResponder)) {\n    return handler;\n  }\n\n  if (element.parent === null) {\n    return null;\n  }\n\n  return findEventHandler(element.parent, eventName, touchResponder);\n}\n\n// String union type of keys of T that start with on, stripped of 'on'\ntype EventNameExtractor<T> = keyof {\n  [K in keyof T as K extends `on${infer Rest}` ? Uncapitalize<Rest> : never]: T[K];\n};\n\ntype EventName = StringWithAutocomplete<\n  | EventNameExtractor<ViewProps>\n  | EventNameExtractor<TextProps>\n  | EventNameExtractor<TextInputProps>\n  | EventNameExtractor<PressableProps>\n  | EventNameExtractor<ScrollViewProps>\n>;\n\nfunction fireEvent(element: ReactTestInstance, eventName: EventName, ...data: unknown[]) {\n  if (!isElementMounted(element)) {\n    return;\n  }\n\n  setNativeStateIfNeeded(element, eventName, data[0]);\n\n  const handler = findEventHandler(element, eventName);\n  if (!handler) {\n    return;\n  }\n\n  let returnValue;\n  void act(() => {\n    returnValue = handler(...data);\n  });\n\n  return returnValue;\n}\n\nfireEvent.press = (element: ReactTestInstance, ...data: unknown[]) =>\n  fireEvent(element, 'press', ...data);\n\nfireEvent.changeText = (element: ReactTestInstance, ...data: unknown[]) =>\n  fireEvent(element, 'changeText', ...data);\n\nfireEvent.scroll = (element: ReactTestInstance, ...data: unknown[]) =>\n  fireEvent(element, 'scroll', ...data);\n\nasync function fireEventAsync(\n  element: ReactTestInstance,\n  eventName: EventName,\n  ...data: unknown[]\n) {\n  if (!isElementMounted(element)) {\n    return;\n  }\n\n  setNativeStateIfNeeded(element, eventName, data[0]);\n\n  const handler = findEventHandler(element, eventName);\n  if (!handler) {\n    return;\n  }\n\n  let returnValue;\n  // eslint-disable-next-line require-await\n  await act(async () => {\n    returnValue = handler(...data);\n  });\n\n  return returnValue;\n}\n\nfireEventAsync.press = async (element: ReactTestInstance, ...data: unknown[]) =>\n  await fireEventAsync(element, 'press', ...data);\n\nfireEventAsync.changeText = async (element: ReactTestInstance, ...data: unknown[]) =>\n  await fireEventAsync(element, 'changeText', ...data);\n\nfireEventAsync.scroll = async (element: ReactTestInstance, ...data: unknown[]) =>\n  await fireEventAsync(element, 'scroll', ...data);\n\nexport { fireEventAsync };\nexport default fireEvent;\n\nconst scrollEventNames = new Set([\n  'scroll',\n  'scrollBeginDrag',\n  'scrollEndDrag',\n  'momentumScrollBegin',\n  'momentumScrollEnd',\n]);\n\nfunction setNativeStateIfNeeded(element: ReactTestInstance, eventName: string, value: unknown) {\n  if (eventName === 'changeText' && typeof value === 'string' && isEditableTextInput(element)) {\n    nativeState.valueForElement.set(element, value);\n  }\n\n  if (scrollEventNames.has(eventName) && isHostScrollView(element)) {\n    const contentOffset = tryGetContentOffset(value);\n    if (contentOffset) {\n      nativeState.contentOffsetForElement.set(element, contentOffset);\n    }\n  }\n}\n\nfunction tryGetContentOffset(event: unknown): Point | null {\n  try {\n    // @ts-expect-error: try to extract contentOffset from the event value\n    const contentOffset = event?.nativeEvent?.contentOffset;\n    const x = contentOffset?.x;\n    const y = contentOffset?.y;\n    if (typeof x === 'number' || typeof y === 'number') {\n      return {\n        x: Number.isFinite(x) ? x : 0,\n        y: Number.isFinite(y) ? y : 0,\n      };\n    }\n  } catch {\n    // Do nothing\n  }\n\n  return null;\n}\n"],"mappings":";;;;;;;;;;;AASA,IAAAA,IAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,mBAAA,GAAAH,OAAA;AACA,IAAAI,cAAA,GAAAJ,OAAA;AACA,IAAAK,UAAA,GAAAL,OAAA;AACA,IAAAM,YAAA,GAAAN,OAAA;AAA6C,SAAAD,uBAAAQ,CAAA;EAAA,OAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAKtC,SAASG,gBAAgBA,CAACC,OAA0B,EAAE;EAC3D,IAAI,CAAC,IAAAT,cAAA,CAAAU,aAAa,EAACD,OAAO,CAAC,EAAE;IAC3B,OAAO,KAAK;EACd;EAEA,OAAOE,OAAO,CAACF,OAAO,CAACG,KAAK,CAACC,yBAAyB,CAAC,IAAI,IAAAZ,mBAAA,CAAAa,eAAe,EAACL,OAAO,CAAC;AACrF;AAQA,IAAMM,iCAAiC,GAAG,IAAIC,GAAG,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAQvE,IAAMC,mCAAmC,GAAG,IAAID,GAAG,CAAC,CAClD,mBAAmB,EACnB,qBAAqB,EACrB,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,UAAU,CACX,CAAC;AAEK,SAASE,cAAcA,CAC5BT,OAA0B,EAC1BU,SAAiB,EACjBC,qBAAyC,EACzC;EACA,IAAIA,qBAAqB,IAAI,IAAI,IAAI,IAAAnB,mBAAA,CAAAa,eAAe,EAACM,qBAAqB,CAAC,EAAE;IAC3E,OACE,IAAAjB,UAAA,CAAAkB,mBAAmB,EAACD,qBAAqB,CAAC,IAC1CH,mCAAmC,CAACK,GAAG,CAACH,SAAS,CAAC;EAEtD;EAEA,IAAIJ,iCAAiC,CAACO,GAAG,CAACH,SAAS,CAAC,IAAI,CAAC,IAAAjB,cAAA,CAAAqB,qBAAqB,EAACd,OAAO,CAAC,EAAE;IACvF,OAAO,KAAK;EACd;EAEA,IAAMe,UAAU,GAAGJ,qBAAqB,YAArBA,qBAAqB,CAAER,KAAK,CAACC,yBAAyB,oBAAtDO,qBAAqB,CAAER,KAAK,CAACC,yBAAyB,CAAG,CAAC;EAC7E,IAAMY,SAAS,GAAGL,qBAAqB,YAArBA,qBAAqB,CAAER,KAAK,CAACc,wBAAwB,oBAArDN,qBAAqB,CAAER,KAAK,CAACc,wBAAwB,CAAG,CAAC;EAC3E,IAAIF,UAAU,IAAIC,SAAS,EAAE;IAC3B,OAAO,IAAI;EACb;EAEA,OAAOD,UAAU,KAAKG,SAAS,IAAIF,SAAS,KAAKE,SAAS;AAC5D;AAEA,SAASC,gBAAgBA,CACvBnB,OAA0B,EAC1BU,SAAiB,EACjBC,qBAAyC,EACpB;EACrB,IAAMS,cAAc,GAAGrB,gBAAgB,CAACC,OAAO,CAAC,GAAGA,OAAO,GAAGW,qBAAqB;EAElF,IAAMU,OAAO,GAAG,IAAA/B,aAAA,CAAAgC,eAAe,EAACtB,OAAO,EAAEU,SAAS,EAAE;IAAEa,KAAK,EAAE;EAAK,CAAC,CAAC;EACpE,IAAIF,OAAO,IAAIZ,cAAc,CAACT,OAAO,EAAEU,SAAS,EAAEU,cAAc,CAAC,EAAE;IACjE,OAAOC,OAAO;EAChB;EAEA,IAAIrB,OAAO,CAACwB,MAAM,KAAK,IAAI,EAAE;IAC3B,OAAO,IAAI;EACb;EAEA,OAAOL,gBAAgB,CAACnB,OAAO,CAACwB,MAAM,EAAEd,SAAS,EAAEU,cAAc,CAAC;AACpE;AAeA,SAASK,SAASA,CAACzB,OAA0B,EAAEU,SAAoB,EAAsB;EAAA,SAAAgB,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAjBC,IAAe,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAfF,IAAe,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EACrF,IAAI,CAAC,IAAAxC,cAAA,CAAAyC,gBAAgB,EAAChC,OAAO,CAAC,EAAE;IAC9B;EACF;EAEAiC,sBAAsB,CAACjC,OAAO,EAAEU,SAAS,EAAEmB,IAAI,CAAC,CAAC,CAAC,CAAC;EAEnD,IAAMR,OAAO,GAAGF,gBAAgB,CAACnB,OAAO,EAAEU,SAAS,CAAC;EACpD,IAAI,CAACW,OAAO,EAAE;IACZ;EACF;EAEA,IAAIa,WAAW;EACf,KAAK,IAAA/C,IAAA,CAAAW,OAAG,EAAC,YAAM;IACboC,WAAW,GAAGb,OAAO,CAAAc,KAAA,SAAIN,IAAI,CAAC;EAChC,CAAC,CAAC;EAEF,OAAOK,WAAW;AACpB;AAEAT,SAAS,CAACW,KAAK,GAAG,UAACpC,OAA0B;EAAA,SAAAqC,KAAA,GAAAV,SAAA,CAAAC,MAAA,EAAKC,IAAe,OAAAC,KAAA,CAAAO,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAfT,IAAe,CAAAS,KAAA,QAAAX,SAAA,CAAAW,KAAA;EAAA;EAAA,OAC/Db,SAAS,CAAAU,KAAA,UAACnC,OAAO,EAAE,OAAO,EAAAuC,MAAA,CAAKV,IAAI,EAAC;AAAA;AAEtCJ,SAAS,CAACe,UAAU,GAAG,UAACxC,OAA0B;EAAA,SAAAyC,KAAA,GAAAd,SAAA,CAAAC,MAAA,EAAKC,IAAe,OAAAC,KAAA,CAAAW,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAfb,IAAe,CAAAa,KAAA,QAAAf,SAAA,CAAAe,KAAA;EAAA;EAAA,OACpEjB,SAAS,CAAAU,KAAA,UAACnC,OAAO,EAAE,YAAY,EAAAuC,MAAA,CAAKV,IAAI,EAAC;AAAA;AAE3CJ,SAAS,CAACkB,MAAM,GAAG,UAAC3C,OAA0B;EAAA,SAAA4C,KAAA,GAAAjB,SAAA,CAAAC,MAAA,EAAKC,IAAe,OAAAC,KAAA,CAAAc,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAfhB,IAAe,CAAAgB,KAAA,QAAAlB,SAAA,CAAAkB,KAAA;EAAA;EAAA,OAChEpB,SAAS,CAAAU,KAAA,UAACnC,OAAO,EAAE,QAAQ,EAAAuC,MAAA,CAAKV,IAAI,EAAC;AAAA;AAAA,SAExBiB,cAAcA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAd,KAAA,OAAAR,SAAA;AAAA;AAAA,SAAAsB,gBAAA;EAAAA,eAAA,OAAAC,kBAAA,CAAApD,OAAA,EAA7B,WACEE,OAA0B,EAC1BU,SAAoB,EAEpB;IAAA,SAAAyC,KAAA,GAAAxB,SAAA,CAAAC,MAAA,EADGC,IAAe,OAAAC,KAAA,CAAAqB,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAfvB,IAAe,CAAAuB,KAAA,QAAAzB,SAAA,CAAAyB,KAAA;IAAA;IAElB,IAAI,CAAC,IAAA7D,cAAA,CAAAyC,gBAAgB,EAAChC,OAAO,CAAC,EAAE;MAC9B;IACF;IAEAiC,sBAAsB,CAACjC,OAAO,EAAEU,SAAS,EAAEmB,IAAI,CAAC,CAAC,CAAC,CAAC;IAEnD,IAAMR,OAAO,GAAGF,gBAAgB,CAACnB,OAAO,EAAEU,SAAS,CAAC;IACpD,IAAI,CAACW,OAAO,EAAE;MACZ;IACF;IAEA,IAAIa,WAAW;IAEf,MAAM,IAAA/C,IAAA,CAAAW,OAAG,MAAAoD,kBAAA,CAAApD,OAAA,EAAC,aAAY;MACpBoC,WAAW,GAAGb,OAAO,CAAAc,KAAA,SAAIN,IAAI,CAAC;IAChC,CAAC,EAAC;IAEF,OAAOK,WAAW;EACpB;EAAA,OAAAe,eAAA,CAAAd,KAAA,OAAAR,SAAA;AAAA;AAEAmB,cAAc,CAACV,KAAK;EAAA,IAAAiB,IAAA,OAAAH,kBAAA,CAAApD,OAAA,EAAG,WAAOE,OAA0B;IAAA,SAAAsD,KAAA,GAAA3B,SAAA,CAAAC,MAAA,EAAKC,IAAe,OAAAC,KAAA,CAAAwB,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAf1B,IAAe,CAAA0B,KAAA,QAAA5B,SAAA,CAAA4B,KAAA;IAAA;IAAA,aACpET,cAAc,CAAAX,KAAA,UAACnC,OAAO,EAAE,OAAO,EAAAuC,MAAA,CAAKV,IAAI,EAAC;EAAA;EAAA,iBAAA2B,GAAA;IAAA,OAAAH,IAAA,CAAAlB,KAAA,OAAAR,SAAA;EAAA;AAAA;AAEjDmB,cAAc,CAACN,UAAU;EAAA,IAAAiB,KAAA,OAAAP,kBAAA,CAAApD,OAAA,EAAG,WAAOE,OAA0B;IAAA,SAAA0D,KAAA,GAAA/B,SAAA,CAAAC,MAAA,EAAKC,IAAe,OAAAC,KAAA,CAAA4B,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAf9B,IAAe,CAAA8B,KAAA,QAAAhC,SAAA,CAAAgC,KAAA;IAAA;IAAA,aACzEb,cAAc,CAAAX,KAAA,UAACnC,OAAO,EAAE,YAAY,EAAAuC,MAAA,CAAKV,IAAI,EAAC;EAAA;EAAA,iBAAA+B,GAAA;IAAA,OAAAH,KAAA,CAAAtB,KAAA,OAAAR,SAAA;EAAA;AAAA;AAEtDmB,cAAc,CAACH,MAAM;EAAA,IAAAkB,KAAA,OAAAX,kBAAA,CAAApD,OAAA,EAAG,WAAOE,OAA0B;IAAA,SAAA8D,KAAA,GAAAnC,SAAA,CAAAC,MAAA,EAAKC,IAAe,OAAAC,KAAA,CAAAgC,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAflC,IAAe,CAAAkC,KAAA,QAAApC,SAAA,CAAAoC,KAAA;IAAA;IAAA,aACrEjB,cAAc,CAAAX,KAAA,UAACnC,OAAO,EAAE,QAAQ,EAAAuC,MAAA,CAAKV,IAAI,EAAC;EAAA;EAAA,iBAAAmC,GAAA;IAAA,OAAAH,KAAA,CAAA1B,KAAA,OAAAR,SAAA;EAAA;AAAA;AAAC,IAAAsC,QAAA,GAAAC,OAAA,CAAApE,OAAA,GAGpC2B,SAAS;AAExB,IAAM0C,gBAAgB,GAAG,IAAI5D,GAAG,CAAC,CAC/B,QAAQ,EACR,iBAAiB,EACjB,eAAe,EACf,qBAAqB,EACrB,mBAAmB,CACpB,CAAC;AAEF,SAAS0B,sBAAsBA,CAACjC,OAA0B,EAAEU,SAAiB,EAAE0D,KAAc,EAAE;EAC7F,IAAI1D,SAAS,KAAK,YAAY,IAAI,OAAO0D,KAAK,KAAK,QAAQ,IAAI,IAAA1E,UAAA,CAAAkB,mBAAmB,EAACZ,OAAO,CAAC,EAAE;IAC3FL,YAAA,CAAA0E,WAAW,CAACC,eAAe,CAACC,GAAG,CAACvE,OAAO,EAAEoE,KAAK,CAAC;EACjD;EAEA,IAAID,gBAAgB,CAACtD,GAAG,CAACH,SAAS,CAAC,IAAI,IAAAlB,mBAAA,CAAAgF,gBAAgB,EAACxE,OAAO,CAAC,EAAE;IAChE,IAAMyE,aAAa,GAAGC,mBAAmB,CAACN,KAAK,CAAC;IAChD,IAAIK,aAAa,EAAE;MACjB9E,YAAA,CAAA0E,WAAW,CAACM,uBAAuB,CAACJ,GAAG,CAACvE,OAAO,EAAEyE,aAAa,CAAC;IACjE;EACF;AACF;AAEA,SAASC,mBAAmBA,CAACE,KAAc,EAAgB;EACzD,IAAI;IAAA,IAAAC,kBAAA;IAEF,IAAMJ,aAAa,GAAGG,KAAK,aAAAC,kBAAA,GAALD,KAAK,CAAEE,WAAW,qBAAlBD,kBAAA,CAAoBJ,aAAa;IACvD,IAAMM,CAAC,GAAGN,aAAa,oBAAbA,aAAa,CAAEM,CAAC;IAC1B,IAAMC,CAAC,GAAGP,aAAa,oBAAbA,aAAa,CAAEO,CAAC;IAC1B,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;MAClD,OAAO;QACLD,CAAC,EAAEE,MAAM,CAACC,QAAQ,CAACH,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC;QAC7BC,CAAC,EAAEC,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,GAAGA,CAAC,GAAG;MAC9B,CAAC;IACH;EACF,CAAC,CAAC,OAAAG,OAAA,EAAM,CACN;EAGF,OAAO,IAAI;AACb","ignoreList":[]}