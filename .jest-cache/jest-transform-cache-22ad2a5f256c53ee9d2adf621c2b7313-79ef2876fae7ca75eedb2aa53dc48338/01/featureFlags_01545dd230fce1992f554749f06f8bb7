69bf7123ca0ad441c6450f59761637b3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FEATURE_FLAGS = exports.AI_CONFIG = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _env2 = require("expo/virtual/env");
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _Constants$expoConfig2;
var getAIMasterEnabled = function getAIMasterEnabled() {
  var _Constants$expoConfig;
  var enableAI = ((_Constants$expoConfig = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig = _Constants$expoConfig.extra) == null ? void 0 : _Constants$expoConfig.EXPO_PUBLIC_ENABLE_AI) === 'true' || _env2.env.EXPO_PUBLIC_ENABLE_AI === 'true';
  return enableAI;
};
var AI_MASTER_ENABLED = getAIMasterEnabled();
var AI_PROMPT_LOGGING_ENV = ((_Constants$expoConfig2 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig2 = _Constants$expoConfig2.extra) == null ? void 0 : _Constants$expoConfig2.EXPO_PUBLIC_AI_PROMPT_LOGGING) === 'true' || _env2.env.EXPO_PUBLIC_AI_PROMPT_LOGGING === 'true';
var resolveChatEnabled = function resolveChatEnabled() {
  var _Constants$expoConfig3, _Constants$expoConfig4;
  var chatEnv = (_Constants$expoConfig3 = (_Constants$expoConfig4 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig4 = _Constants$expoConfig4.extra) == null ? void 0 : _Constants$expoConfig4.EXPO_PUBLIC_ENABLE_AI_CHAT) != null ? _Constants$expoConfig3 : _env2.env.EXPO_PUBLIC_ENABLE_AI_CHAT;
  if (typeof chatEnv === 'string') {
    return chatEnv === 'true';
  }
  return AI_MASTER_ENABLED;
};
var AI_CHAT_ENABLED = resolveChatEnabled();
if (__DEV__) {
  var _Constants$expoConfig5;
  console.log('üîß Feature Flags Debug:', {
    __DEV__: __DEV__,
    expoConfigExtra: (_Constants$expoConfig5 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig5 = _Constants$expoConfig5.extra) == null ? void 0 : _Constants$expoConfig5.EXPO_PUBLIC_ENABLE_AI,
    processEnv: _env2.env.EXPO_PUBLIC_ENABLE_AI,
    AI_MASTER_ENABLED: AI_MASTER_ENABLED
  });
}
if (typeof window !== 'undefined') {
  setTimeout(function () {
    import("../features/ai/telemetry/aiTelemetry").then(function (_ref) {
      var trackAIInteraction = _ref.trackAIInteraction,
        AIEventType = _ref.AIEventType;
      trackAIInteraction(AIEventType.SYSTEM_STATUS, {
        aiMasterEnabled: AI_MASTER_ENABLED,
        environment: __DEV__ ? 'development' : 'production',
        enabledFeatureCount: Object.values(featureFlagState).filter(Boolean).length
      });
    }).catch(function () {});
  }, 1000);
}
var featureFlagState = {
  AI_ENABLED: AI_MASTER_ENABLED,
  AI_RUNTIME_MODULES: AI_MASTER_ENABLED,
  AI_CHAT: AI_CHAT_ENABLED,
  AI_ONBOARDING: AI_MASTER_ENABLED,
  AI_INSIGHTS: AI_MASTER_ENABLED,
  AI_VOICE: AI_MASTER_ENABLED,
  AI_CBT_ENGINE: AI_MASTER_ENABLED,
  AI_EXTERNAL_API: AI_MASTER_ENABLED,
  AI_THERAPEUTIC_PROMPTS: AI_MASTER_ENABLED,
  AI_REAL_RESPONSES: AI_MASTER_ENABLED,
  AI_INSIGHTS_ENGINE_V2: AI_MASTER_ENABLED,
  AI_PATTERN_RECOGNITION_V2: AI_MASTER_ENABLED,
  AI_SMART_NOTIFICATIONS: AI_MASTER_ENABLED,
  AI_ADAPTIVE_INTERVENTIONS: AI_MASTER_ENABLED,
  AI_CONTEXT_INTELLIGENCE: AI_MASTER_ENABLED,
  AI_JITAI_SYSTEM: AI_MASTER_ENABLED,
  AI_ADVANCED_PERSONALIZATION: AI_MASTER_ENABLED,
  AI_MODEL_OPTIMIZATION: AI_MASTER_ENABLED,
  AI_PERFORMANCE_MONITORING: AI_MASTER_ENABLED,
  AI_ADVANCED_ANALYTICS: AI_MASTER_ENABLED,
  AI_DASHBOARD: AI_MASTER_ENABLED,
  AI_YBOCS_ANALYSIS: AI_MASTER_ENABLED,
  AI_USER_PROFILING: AI_MASTER_ENABLED,
  AI_TREATMENT_PLANNING: AI_MASTER_ENABLED,
  AI_RISK_ASSESSMENT: AI_MASTER_ENABLED,
  AI_ONBOARDING_UI: AI_MASTER_ENABLED,
  AI_ONBOARDING_CONTEXT_INTEGRATION: AI_MASTER_ENABLED,
  AI_ONBOARDING_INTERVENTIONS_INTEGRATION: AI_MASTER_ENABLED,
  AI_ART_THERAPY: false,
  AI_PREDICTIVE_INTERVENTION: AI_MASTER_ENABLED,
  AI_CORE_ANALYSIS: true,
  AI_LLM_GATING: true,
  AI_PROGRESSIVE: true,
  AI_ONBOARDING_REFINE: true,
  AI_THERAPY_STAIRCASE: true,
  AI_UNIFIED_PIPELINE: true,
  AI_UNIFIED_PIPELINE_PERCENTAGE: 100,
  AI_UNIFIED_VOICE: true,
  AI_UNIFIED_PATTERNS: true,
  AI_UNIFIED_INSIGHTS: true,
  AI_UNIFIED_CBT: true,
  AI_BREATHWORK_SUGGESTIONS: true,
  AI_DYNAMIC_GAMIFICATION: true,
  AI_DYNAMIC_MISSIONS: true,
  AI_SMART_ROUTING: true,
  AI_FORM_PREFILLING: true,
  MULTI_INTENT_VOICE: AI_MASTER_ENABLED,
  AI_TRIGGER_DETECTION: AI_MASTER_ENABLED,
  TURKISH_CULTURAL_OCD: AI_MASTER_ENABLED,
  AI_OCD_PATTERN_ANALYSIS: AI_MASTER_ENABLED,
  LLM_ROUTER: AI_MASTER_ENABLED,
  LLM_REFRAME: AI_MASTER_ENABLED,
  LLM_COACH_ADAPT: AI_MASTER_ENABLED,
  LLM_PDF_SUMMARY: AI_MASTER_ENABLED,
  JITAI_TIME: AI_MASTER_ENABLED,
  JITAI_GEOFENCE: false,
  AI_PROMPT_LOGGING: !!AI_PROMPT_LOGGING_ENV,
  DEBUG_MODE: __DEV__,
  MOCK_API_RESPONSES: __DEV__ && _env2.env.EXPO_PUBLIC_MOCK_API === 'true',
  AI_TELEMETRY: AI_MASTER_ENABLED,
  PERFORMANCE_MONITORING: true,
  ERROR_REPORTING: true,
  SAFETY_CHECKS: true,
  CONTENT_FILTERING: true,
  RATE_LIMITING: true
};
var featureUsageLog = {};
var FEATURE_FLAGS = exports.FEATURE_FLAGS = Object.assign({}, featureFlagState, {
  isEnabled: function isEnabled(feature) {
    featureUsageLog[feature] = (featureUsageLog[feature] || 0) + 1;
    if (__DEV__) {
      console.log(`üè≥Ô∏è Feature Flag Check: ${feature} = ${featureFlagState[feature]}`);
    }
    if (feature.startsWith('AI_') && feature !== 'AI_ENABLED' && !featureFlagState.AI_ENABLED) {
      return false;
    }
    if (feature.startsWith('AI_') && !featureFlagState.SAFETY_CHECKS) {
      console.warn('‚ö†Ô∏è AI features disabled: Safety checks are off');
      return false;
    }
    if (typeof global.__OBSESSLESS_KILL_SWITCH !== 'undefined') {
      console.warn('üö® Emergency kill switch activated');
      return false;
    }
    var value = featureFlagState[feature];
    if (typeof value === 'number') {
      return value > 0;
    }
    return !!value;
  },
  disableAll: function () {
    var _disableAll = (0, _asyncToGenerator2.default)(function* () {
      console.warn('üö® EMERGENCY: Disabling all AI features');
      Object.keys(featureFlagState).forEach(function (key) {
        if (key.startsWith('AI_')) {
          featureFlagState[key] = false;
        }
      });
      global.__OBSESSLESS_KILL_SWITCH = true;
      try {
        var _yield$import = yield import("../features/ai/telemetry/aiTelemetry"),
          trackAIInteraction = _yield$import.trackAIInteraction,
          AIEventType = _yield$import.AIEventType;
        yield trackAIInteraction(AIEventType.EMERGENCY_SHUTDOWN, {
          timestamp: new Date().toISOString(),
          reason: 'feature_flags_disabled',
          previousFlags: Object.assign({}, featureFlagState)
        });
      } catch (_unused) {}
      try {
        var _yield$import2 = yield import('@react-native-async-storage/async-storage'),
          AsyncStorage = _yield$import2.default;
        yield AsyncStorage.setItem('emergency_shutdown_timestamp', new Date().toISOString());
      } catch (_unused2) {}
    });
    function disableAll() {
      return _disableAll.apply(this, arguments);
    }
    return disableAll;
  }(),
  setFlag: function setFlag(feature, value) {
    if (!__DEV__) {
      console.warn('‚ö†Ô∏è Feature flag changes only allowed in development');
      return;
    }
    console.log(`üîß Changing feature flag: ${feature} = ${value}`);
    if (feature === 'AI_ENABLED') {
      Object.keys(featureFlagState).forEach(function (key) {
        if (key.startsWith('AI_')) {
          featureFlagState[key] = value;
        }
      });
    } else {
      featureFlagState[feature] = value;
    }
  },
  getUsageStats: function getUsageStats() {
    return Object.assign({}, featureUsageLog);
  },
  reactivateAll: function reactivateAll() {
    var _Constants$expoConfig6;
    if (!__DEV__) {
      console.warn('‚ö†Ô∏è Feature reactivation only allowed in development');
      return;
    }
    console.log('üîÑ Reactivating all AI features');
    delete global.__OBSESSLESS_KILL_SWITCH;
    var masterEnabled = ((_Constants$expoConfig6 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig6 = _Constants$expoConfig6.extra) == null ? void 0 : _Constants$expoConfig6.EXPO_PUBLIC_ENABLE_AI) === 'true' || _env2.env.EXPO_PUBLIC_ENABLE_AI === 'true';
    Object.keys(featureFlagState).forEach(function (key) {
      if (key.startsWith('AI_')) {
        featureFlagState[key] = masterEnabled;
      }
    });
  }
});
var AI_CONFIG = exports.AI_CONFIG = {
  DEFAULT_PROVIDER: function (_Constants$expoConfig7) {
    var raw = ((_Constants$expoConfig7 = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig7 = _Constants$expoConfig7.extra) == null ? void 0 : _Constants$expoConfig7.EXPO_PUBLIC_AI_PROVIDER) || _env2.env.EXPO_PUBLIC_AI_PROVIDER || 'gemini';
    var lower = String(raw).toLowerCase();
    return lower === 'gemini' ? 'gemini' : 'gemini';
  }(),
  PROVIDER_PRIORITY: ['gemini'],
  CHAT_REQUIRES_EXTERNAL_AI: true,
  INSIGHTS_USES_LOCAL_AI: true,
  VOICE_USES_HYBRID_AI: true,
  MAX_TOKENS: 4000,
  TEMPERATURE_LIMIT: 0.8,
  SAFETY_THRESHOLD: 0.9,
  MAX_REQUESTS_PER_MINUTE: 60,
  MAX_REQUESTS_PER_HOUR: 1000
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,