92e19c663de0d7b0f75b973ddf99f508
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByLabelTextQueries = void 0;
var _findAll = require("../helpers/find-all");
var _matchLabelText = require("../helpers/matchers/match-label-text");
var _makeQueries = require("./make-queries");
function queryAllByLabelText(instance) {
  return function (text, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _matchLabelText.matchAccessibilityLabel)(node, text, queryOptions);
    }, queryOptions);
  };
}
var getMultipleError = function getMultipleError(labelText) {
  return `Found multiple elements with accessibility label: ${String(labelText)} `;
};
var getMissingError = function getMissingError(labelText) {
  return `Unable to find an element with accessibility label: ${String(labelText)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByLabelText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByLabelTextQueries = function bindByLabelTextQueries(instance) {
  return {
    getByLabelText: getBy(instance),
    getAllByLabelText: getAllBy(instance),
    queryByLabelText: queryBy(instance),
    queryAllByLabelText: queryAllBy(instance),
    findByLabelText: findBy(instance),
    findAllByLabelText: findAllBy(instance)
  };
};
exports.bindByLabelTextQueries = bindByLabelTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfbWF0Y2hMYWJlbFRleHQiLCJfbWFrZVF1ZXJpZXMiLCJxdWVyeUFsbEJ5TGFiZWxUZXh0IiwiaW5zdGFuY2UiLCJ0ZXh0IiwicXVlcnlPcHRpb25zIiwiZmluZEFsbCIsIm5vZGUiLCJtYXRjaEFjY2Vzc2liaWxpdHlMYWJlbCIsImdldE11bHRpcGxlRXJyb3IiLCJsYWJlbFRleHQiLCJTdHJpbmciLCJnZXRNaXNzaW5nRXJyb3IiLCJfcmVmIiwibWFrZVF1ZXJpZXMiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsInF1ZXJ5QWxsQnkiLCJmaW5kQnkiLCJmaW5kQWxsQnkiLCJiaW5kQnlMYWJlbFRleHRRdWVyaWVzIiwiZ2V0QnlMYWJlbFRleHQiLCJnZXRBbGxCeUxhYmVsVGV4dCIsInF1ZXJ5QnlMYWJlbFRleHQiLCJmaW5kQnlMYWJlbFRleHQiLCJmaW5kQWxsQnlMYWJlbFRleHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJpZXMvbGFiZWwtdGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbmltcG9ydCB7IGZpbmRBbGwgfSBmcm9tICcuLi9oZWxwZXJzL2ZpbmQtYWxsJztcbmltcG9ydCB7IG1hdGNoQWNjZXNzaWJpbGl0eUxhYmVsIH0gZnJvbSAnLi4vaGVscGVycy9tYXRjaGVycy9tYXRjaC1sYWJlbC10ZXh0JztcbmltcG9ydCB0eXBlIHsgVGV4dE1hdGNoLCBUZXh0TWF0Y2hPcHRpb25zIH0gZnJvbSAnLi4vbWF0Y2hlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIEZpbmRBbGxCeVF1ZXJ5LFxuICBGaW5kQnlRdWVyeSxcbiAgR2V0QWxsQnlRdWVyeSxcbiAgR2V0QnlRdWVyeSxcbiAgUXVlcnlBbGxCeVF1ZXJ5LFxuICBRdWVyeUJ5UXVlcnksXG59IGZyb20gJy4vbWFrZS1xdWVyaWVzJztcbmltcG9ydCB7IG1ha2VRdWVyaWVzIH0gZnJvbSAnLi9tYWtlLXF1ZXJpZXMnO1xuaW1wb3J0IHR5cGUgeyBDb21tb25RdWVyeU9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuXG50eXBlIEJ5TGFiZWxUZXh0T3B0aW9ucyA9IENvbW1vblF1ZXJ5T3B0aW9ucyAmIFRleHRNYXRjaE9wdGlvbnM7XG5cbmZ1bmN0aW9uIHF1ZXJ5QWxsQnlMYWJlbFRleHQoaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlKSB7XG4gIHJldHVybiAodGV4dDogVGV4dE1hdGNoLCBxdWVyeU9wdGlvbnM/OiBCeUxhYmVsVGV4dE9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gZmluZEFsbChcbiAgICAgIGluc3RhbmNlLFxuICAgICAgKG5vZGUpID0+IG1hdGNoQWNjZXNzaWJpbGl0eUxhYmVsKG5vZGUsIHRleHQsIHF1ZXJ5T3B0aW9ucyksXG4gICAgICBxdWVyeU9wdGlvbnMsXG4gICAgKTtcbiAgfTtcbn1cblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChsYWJlbFRleHQ6IFRleHRNYXRjaCkgPT5cbiAgYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggYWNjZXNzaWJpbGl0eSBsYWJlbDogJHtTdHJpbmcobGFiZWxUZXh0KX0gYDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChsYWJlbFRleHQ6IFRleHRNYXRjaCkgPT5cbiAgYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCBhY2Nlc3NpYmlsaXR5IGxhYmVsOiAke1N0cmluZyhsYWJlbFRleHQpfWA7XG5cbmNvbnN0IHsgZ2V0QnksIGdldEFsbEJ5LCBxdWVyeUJ5LCBxdWVyeUFsbEJ5LCBmaW5kQnksIGZpbmRBbGxCeSB9ID0gbWFrZVF1ZXJpZXMoXG4gIHF1ZXJ5QWxsQnlMYWJlbFRleHQsXG4gIGdldE1pc3NpbmdFcnJvcixcbiAgZ2V0TXVsdGlwbGVFcnJvcixcbik7XG5cbmV4cG9ydCB0eXBlIEJ5TGFiZWxUZXh0UXVlcmllcyA9IHtcbiAgZ2V0QnlMYWJlbFRleHQ6IEdldEJ5UXVlcnk8VGV4dE1hdGNoLCBCeUxhYmVsVGV4dE9wdGlvbnM+O1xuICBnZXRBbGxCeUxhYmVsVGV4dDogR2V0QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5TGFiZWxUZXh0T3B0aW9ucz47XG4gIHF1ZXJ5QnlMYWJlbFRleHQ6IFF1ZXJ5QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5TGFiZWxUZXh0T3B0aW9ucz47XG4gIHF1ZXJ5QWxsQnlMYWJlbFRleHQ6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5TGFiZWxUZXh0T3B0aW9ucz47XG4gIGZpbmRCeUxhYmVsVGV4dDogRmluZEJ5UXVlcnk8VGV4dE1hdGNoLCBCeUxhYmVsVGV4dE9wdGlvbnM+O1xuICBmaW5kQWxsQnlMYWJlbFRleHQ6IEZpbmRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlMYWJlbFRleHRPcHRpb25zPjtcbn07XG5cbmV4cG9ydCBjb25zdCBiaW5kQnlMYWJlbFRleHRRdWVyaWVzID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6IEJ5TGFiZWxUZXh0UXVlcmllcyA9PiAoe1xuICBnZXRCeUxhYmVsVGV4dDogZ2V0QnkoaW5zdGFuY2UpLFxuICBnZXRBbGxCeUxhYmVsVGV4dDogZ2V0QWxsQnkoaW5zdGFuY2UpLFxuICBxdWVyeUJ5TGFiZWxUZXh0OiBxdWVyeUJ5KGluc3RhbmNlKSxcbiAgcXVlcnlBbGxCeUxhYmVsVGV4dDogcXVlcnlBbGxCeShpbnN0YW5jZSksXG4gIGZpbmRCeUxhYmVsVGV4dDogZmluZEJ5KGluc3RhbmNlKSxcbiAgZmluZEFsbEJ5TGFiZWxUZXh0OiBmaW5kQWxsQnkoaW5zdGFuY2UpLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGVBQUEsR0FBQUQsT0FBQTtBQVVBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUtBLFNBQVNHLG1CQUFtQkEsQ0FBQ0MsUUFBMkIsRUFBRTtFQUN4RCxPQUFPLFVBQUNDLElBQWUsRUFBRUMsWUFBaUMsRUFBSztJQUM3RCxPQUFPLElBQUFQLFFBQUEsQ0FBQVEsT0FBTyxFQUNaSCxRQUFRLEVBQ1AsVUFBQUksSUFBSTtNQUFBLE9BQUssSUFBQVAsZUFBQSxDQUFBUSx1QkFBdUIsRUFBQ0QsSUFBSSxFQUFFSCxJQUFJLEVBQUVDLFlBQVksQ0FBQztJQUFBLEdBQzNEQSxZQUNGLENBQUM7RUFDSCxDQUFDO0FBQ0g7QUFFQSxJQUFNSSxnQkFBZ0IsR0FBSSxTQUFwQkEsZ0JBQWdCQSxDQUFJQyxTQUFvQjtFQUFBLE9BQzVDLHFEQUFxREMsTUFBTSxDQUFDRCxTQUFTLENBQUMsR0FBRztBQUFBO0FBQzNFLElBQU1FLGVBQWUsR0FBSSxTQUFuQkEsZUFBZUEsQ0FBSUYsU0FBb0I7RUFBQSxPQUMzQyx1REFBdURDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLEVBQUU7QUFBQTtBQUU1RSxJQUFBRyxJQUFBLEdBQW9FLElBQUFaLFlBQUEsQ0FBQWEsV0FBVyxFQUM3RVosbUJBQW1CLEVBQ25CVSxlQUFlLEVBQ2ZILGdCQUNGLENBQUM7RUFKT00sS0FBSyxHQUFBRixJQUFBLENBQUxFLEtBQUs7RUFBRUMsUUFBUSxHQUFBSCxJQUFBLENBQVJHLFFBQVE7RUFBRUMsT0FBTyxHQUFBSixJQUFBLENBQVBJLE9BQU87RUFBRUMsVUFBVSxHQUFBTCxJQUFBLENBQVZLLFVBQVU7RUFBRUMsTUFBTSxHQUFBTixJQUFBLENBQU5NLE1BQU07RUFBRUMsU0FBQSxHQUFBUCxJQUFBLENBQUFPLFNBQUE7QUFlL0MsSUFBTUMsc0JBQXNCLEdBQUksU0FBMUJBLHNCQUFzQkEsQ0FBSWxCLFFBQTJCO0VBQUEsT0FBMEI7SUFDMUZtQixjQUFjLEVBQUVQLEtBQUssQ0FBQ1osUUFBUSxDQUFDO0lBQy9Cb0IsaUJBQWlCLEVBQUVQLFFBQVEsQ0FBQ2IsUUFBUSxDQUFDO0lBQ3JDcUIsZ0JBQWdCLEVBQUVQLE9BQU8sQ0FBQ2QsUUFBUSxDQUFDO0lBQ25DRCxtQkFBbUIsRUFBRWdCLFVBQVUsQ0FBQ2YsUUFBUSxDQUFDO0lBQ3pDc0IsZUFBZSxFQUFFTixNQUFNLENBQUNoQixRQUFRLENBQUM7SUFDakN1QixrQkFBa0IsRUFBRU4sU0FBUyxDQUFDakIsUUFBUTtFQUN4QyxDQUFDO0FBQUEsQ0FBQztBQUFDd0IsT0FBQSxDQUFBTixzQkFBQSxHQUFBQSxzQkFBQSIsImlnbm9yZUxpc3QiOltdfQ==