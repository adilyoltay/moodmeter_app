0f5c4a5a0c4c17407f3f4b9a0baff094
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseErrorStack;
var parseHermesStack = require("./parseHermesStack").default;
function convertHermesStack(stack) {
  var frames = [];
  for (var entry of stack.entries) {
    if (entry.type !== 'FRAME') {
      continue;
    }
    var location = entry.location,
      functionName = entry.functionName;
    if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {
      continue;
    }
    frames.push({
      methodName: functionName,
      file: location.sourceUrl,
      lineNumber: location.line1Based,
      column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
    });
  }
  return frames;
}
function parseErrorStack(errorStack) {
  if (errorStack == null) {
    return [];
  }
  var stacktraceParser = require('stacktrace-parser');
  var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map(function (frame) {
    return Object.assign({}, frame, {
      column: frame.column != null ? frame.column - 1 : null
    });
  });
  return parsedStack;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJwYXJzZUVycm9yU3RhY2siLCJwYXJzZUhlcm1lc1N0YWNrIiwicmVxdWlyZSIsImNvbnZlcnRIZXJtZXNTdGFjayIsInN0YWNrIiwiZnJhbWVzIiwiZW50cnkiLCJlbnRyaWVzIiwidHlwZSIsImxvY2F0aW9uIiwiZnVuY3Rpb25OYW1lIiwicHVzaCIsIm1ldGhvZE5hbWUiLCJmaWxlIiwic291cmNlVXJsIiwibGluZU51bWJlciIsImxpbmUxQmFzZWQiLCJjb2x1bW4iLCJjb2x1bW4xQmFzZWQiLCJ2aXJ0dWFsT2Zmc2V0MEJhc2VkIiwiZXJyb3JTdGFjayIsInN0YWNrdHJhY2VQYXJzZXIiLCJwYXJzZWRTdGFjayIsIkFycmF5IiwiaXNBcnJheSIsImdsb2JhbCIsIkhlcm1lc0ludGVybmFsIiwicGFyc2UiLCJtYXAiLCJmcmFtZSIsImFzc2lnbiJdLCJzb3VyY2VzIjpbInBhcnNlRXJyb3JTdGFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7U3RhY2tGcmFtZX0gZnJvbSAnLi4vTmF0aXZlRXhjZXB0aW9uc01hbmFnZXInO1xuaW1wb3J0IHR5cGUge0hlcm1lc1BhcnNlZFN0YWNrfSBmcm9tICcuL3BhcnNlSGVybWVzU3RhY2snO1xuXG5jb25zdCBwYXJzZUhlcm1lc1N0YWNrID0gcmVxdWlyZSgnLi9wYXJzZUhlcm1lc1N0YWNrJykuZGVmYXVsdDtcblxuZnVuY3Rpb24gY29udmVydEhlcm1lc1N0YWNrKHN0YWNrOiBIZXJtZXNQYXJzZWRTdGFjayk6IEFycmF5PFN0YWNrRnJhbWU+IHtcbiAgY29uc3QgZnJhbWVzOiBBcnJheTxTdGFja0ZyYW1lPiA9IFtdO1xuICBmb3IgKGNvbnN0IGVudHJ5IG9mIHN0YWNrLmVudHJpZXMpIHtcbiAgICBpZiAoZW50cnkudHlwZSAhPT0gJ0ZSQU1FJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHtsb2NhdGlvbiwgZnVuY3Rpb25OYW1lfSA9IGVudHJ5O1xuICAgIGlmIChsb2NhdGlvbi50eXBlID09PSAnTkFUSVZFJyB8fCBsb2NhdGlvbi50eXBlID09PSAnSU5URVJOQUxfQllURUNPREUnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZnJhbWVzLnB1c2goe1xuICAgICAgbWV0aG9kTmFtZTogZnVuY3Rpb25OYW1lLFxuICAgICAgZmlsZTogbG9jYXRpb24uc291cmNlVXJsLFxuICAgICAgbGluZU51bWJlcjogbG9jYXRpb24ubGluZTFCYXNlZCxcbiAgICAgIGNvbHVtbjpcbiAgICAgICAgbG9jYXRpb24udHlwZSA9PT0gJ1NPVVJDRSdcbiAgICAgICAgICA/IGxvY2F0aW9uLmNvbHVtbjFCYXNlZCAtIDFcbiAgICAgICAgICA6IGxvY2F0aW9uLnZpcnR1YWxPZmZzZXQwQmFzZWQsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZyYW1lcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VFcnJvclN0YWNrKFxuICBlcnJvclN0YWNrPzogc3RyaW5nLFxuKTogQXJyYXk8U3RhY2tGcmFtZT4ge1xuICBpZiAoZXJyb3JTdGFjayA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3Qgc3RhY2t0cmFjZVBhcnNlciA9IHJlcXVpcmUoJ3N0YWNrdHJhY2UtcGFyc2VyJyk7XG4gIGNvbnN0IHBhcnNlZFN0YWNrID0gQXJyYXkuaXNBcnJheShlcnJvclN0YWNrKVxuICAgID8gZXJyb3JTdGFja1xuICAgIDogZ2xvYmFsLkhlcm1lc0ludGVybmFsXG4gICAgICA/IGNvbnZlcnRIZXJtZXNTdGFjayhwYXJzZUhlcm1lc1N0YWNrKGVycm9yU3RhY2spKVxuICAgICAgOiBzdGFja3RyYWNlUGFyc2VyLnBhcnNlKGVycm9yU3RhY2spLm1hcCgoZnJhbWUpOiBTdGFja0ZyYW1lID0+ICh7XG4gICAgICAgICAgLi4uZnJhbWUsXG4gICAgICAgICAgY29sdW1uOiBmcmFtZS5jb2x1bW4gIT0gbnVsbCA/IGZyYW1lLmNvbHVtbiAtIDEgOiBudWxsLFxuICAgICAgICB9KSk7XG5cbiAgcmV0dXJuIHBhcnNlZFN0YWNrO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxPQUFBLEdBQUFDLGVBQUE7QUFLYixJQUFNQyxnQkFBZ0IsR0FBR0MsT0FBTyxxQkFBcUIsQ0FBQyxDQUFDSCxPQUFPO0FBRTlELFNBQVNJLGtCQUFrQkEsQ0FBQ0MsS0FBd0IsRUFBcUI7RUFDdkUsSUFBTUMsTUFBeUIsR0FBRyxFQUFFO0VBQ3BDLEtBQUssSUFBTUMsS0FBSyxJQUFJRixLQUFLLENBQUNHLE9BQU8sRUFBRTtJQUNqQyxJQUFJRCxLQUFLLENBQUNFLElBQUksS0FBSyxPQUFPLEVBQUU7TUFDMUI7SUFDRjtJQUNBLElBQU9DLFFBQVEsR0FBa0JILEtBQUssQ0FBL0JHLFFBQVE7TUFBRUMsWUFBWSxHQUFJSixLQUFLLENBQXJCSSxZQUFZO0lBQzdCLElBQUlELFFBQVEsQ0FBQ0QsSUFBSSxLQUFLLFFBQVEsSUFBSUMsUUFBUSxDQUFDRCxJQUFJLEtBQUssbUJBQW1CLEVBQUU7TUFDdkU7SUFDRjtJQUNBSCxNQUFNLENBQUNNLElBQUksQ0FBQztNQUNWQyxVQUFVLEVBQUVGLFlBQVk7TUFDeEJHLElBQUksRUFBRUosUUFBUSxDQUFDSyxTQUFTO01BQ3hCQyxVQUFVLEVBQUVOLFFBQVEsQ0FBQ08sVUFBVTtNQUMvQkMsTUFBTSxFQUNKUixRQUFRLENBQUNELElBQUksS0FBSyxRQUFRLEdBQ3RCQyxRQUFRLENBQUNTLFlBQVksR0FBRyxDQUFDLEdBQ3pCVCxRQUFRLENBQUNVO0lBQ2pCLENBQUMsQ0FBQztFQUNKO0VBQ0EsT0FBT2QsTUFBTTtBQUNmO0FBRWUsU0FBU0wsZUFBZUEsQ0FDckNvQixVQUFtQixFQUNBO0VBQ25CLElBQUlBLFVBQVUsSUFBSSxJQUFJLEVBQUU7SUFDdEIsT0FBTyxFQUFFO0VBQ1g7RUFFQSxJQUFNQyxnQkFBZ0IsR0FBR25CLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztFQUNyRCxJQUFNb0IsV0FBVyxHQUFHQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osVUFBVSxDQUFDLEdBQ3pDQSxVQUFVLEdBQ1ZLLE1BQU0sQ0FBQ0MsY0FBYyxHQUNuQnZCLGtCQUFrQixDQUFDRixnQkFBZ0IsQ0FBQ21CLFVBQVUsQ0FBQyxDQUFDLEdBQ2hEQyxnQkFBZ0IsQ0FBQ00sS0FBSyxDQUFDUCxVQUFVLENBQUMsQ0FBQ1EsR0FBRyxDQUFDLFVBQUNDLEtBQUs7SUFBQSxPQUFBbEMsTUFBQSxDQUFBbUMsTUFBQSxLQUN4Q0QsS0FBSztNQUNSWixNQUFNLEVBQUVZLEtBQUssQ0FBQ1osTUFBTSxJQUFJLElBQUksR0FBR1ksS0FBSyxDQUFDWixNQUFNLEdBQUcsQ0FBQyxHQUFHO0lBQUk7RUFBQSxDQUN0RCxDQUFDO0VBRVQsT0FBT0ssV0FBVztBQUNwQiIsImlnbm9yZUxpc3QiOltdfQ==