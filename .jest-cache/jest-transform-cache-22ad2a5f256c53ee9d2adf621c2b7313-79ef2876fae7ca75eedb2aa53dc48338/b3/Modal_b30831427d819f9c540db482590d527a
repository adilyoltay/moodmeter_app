4cf68c4396c9c2931128cdd85d164aa3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _ModalInjection = _interopRequireDefault(require("./ModalInjection"));
var _NativeModalManager = _interopRequireDefault(require("./NativeModalManager"));
var _RCTModalHostViewNativeComponent = _interopRequireDefault(require("./RCTModalHostViewNativeComponent"));
var _virtualizedLists = _interopRequireDefault(require("@react-native/virtualized-lists"));
var _react = _interopRequireDefault(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _ModalInjection$unsta;
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ScrollView = require("../Components/ScrollView/ScrollView").default;
var View = require("../Components/View/View").default;
var AppContainer = require("../ReactNative/AppContainer").default;
var I18nManager = require("../ReactNative/I18nManager").default;
var _require = require("../ReactNative/RootTag"),
  RootTagContext = _require.RootTagContext;
var StyleSheet = require("../StyleSheet/StyleSheet").default;
var Platform = require("../Utilities/Platform").default;
var VirtualizedListContextResetter = _virtualizedLists.default.VirtualizedListContextResetter;
var ModalEventEmitter = Platform.OS === 'ios' && _NativeModalManager.default != null ? new _NativeEventEmitter.default(Platform.OS !== 'ios' ? null : _NativeModalManager.default) : null;
var uniqueModalIdentifier = 0;
function confirmProps(props) {
  if (__DEV__) {
    if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent === true) {
      console.warn(`Modal with '${props.presentationStyle}' presentation style and 'transparent' value is not supported.`);
    }
    if (props.navigationBarTranslucent === true && props.statusBarTranslucent !== true) {
      console.warn('Modal with translucent navigation bar and without translucent status bar is not supported.');
    }
  }
}
var Modal = function (_React$Component) {
  function Modal(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Modal);
    _this = _callSuper(this, Modal, [props]);
    if (__DEV__) {
      confirmProps(props);
    }
    _this._identifier = uniqueModalIdentifier++;
    _this.state = {
      isRendered: props.visible === true
    };
    return _this;
  }
  (0, _inherits2.default)(Modal, _React$Component);
  return (0, _createClass2.default)(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      if (ModalEventEmitter) {
        this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
          _this2.setState({
            isRendered: false
          }, function () {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (Platform.OS === 'ios') {
        this.setState({
          isRendered: false
        });
      }
      if (this._eventSubscription) {
        this._eventSubscription.remove();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible === false && this.props.visible === true) {
        this.setState({
          isRendered: true
        });
      }
      if (__DEV__) {
        confirmProps(this.props);
      }
    }
  }, {
    key: "_shouldShowModal",
    value: function _shouldShowModal() {
      if (Platform.OS === 'ios') {
        return this.props.visible === true || this.state.isRendered === true;
      }
      return this.props.visible === true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$backdropC,
        _this3 = this;
      if (!this._shouldShowModal()) {
        return null;
      }
      var containerStyles = {
        backgroundColor: this.props.transparent === true ? 'transparent' : (_this$props$backdropC = this.props.backdropColor) != null ? _this$props$backdropC : 'white'
      };
      var animationType = this.props.animationType || 'none';
      var presentationStyle = this.props.presentationStyle;
      if (!presentationStyle) {
        presentationStyle = 'fullScreen';
        if (this.props.transparent === true) {
          presentationStyle = 'overFullScreen';
        }
      }
      var innerChildren = __DEV__ ? (0, _jsxRuntime.jsx)(AppContainer, {
        rootTag: this.context,
        children: this.props.children
      }) : this.props.children;
      var onDismiss = function onDismiss() {
        if (Platform.OS === 'ios') {
          _this3.setState({
            isRendered: false
          }, function () {
            if (_this3.props.onDismiss) {
              _this3.props.onDismiss();
            }
          });
        }
      };
      return (0, _jsxRuntime.jsx)(_RCTModalHostViewNativeComponent.default, {
        animationType: animationType,
        presentationStyle: presentationStyle,
        transparent: this.props.transparent,
        hardwareAccelerated: this.props.hardwareAccelerated,
        onRequestClose: this.props.onRequestClose,
        onShow: this.props.onShow,
        onDismiss: onDismiss,
        visible: this.props.visible,
        statusBarTranslucent: this.props.statusBarTranslucent,
        navigationBarTranslucent: this.props.navigationBarTranslucent,
        identifier: this._identifier,
        style: styles.modal,
        onStartShouldSetResponder: this._shouldSetResponder,
        supportedOrientations: this.props.supportedOrientations,
        onOrientationChange: this.props.onOrientationChange,
        testID: this.props.testID,
        children: (0, _jsxRuntime.jsx)(VirtualizedListContextResetter, {
          children: (0, _jsxRuntime.jsx)(ScrollView.Context.Provider, {
            value: null,
            children: (0, _jsxRuntime.jsx)(View, {
              style: [styles.container, containerStyles],
              collapsable: false,
              children: innerChildren
            })
          })
        })
      });
    }
  }, {
    key: "_shouldSetResponder",
    value: function _shouldSetResponder() {
      return true;
    }
  }]);
}(_react.default.Component);
Modal.defaultProps = {
  visible: true,
  hardwareAccelerated: false
};
Modal.contextType = RootTagContext;
var side = I18nManager.getConstants().isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
  modal: {
    position: 'absolute'
  },
  container: (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, side, 0), "top", 0), "flex", 1)
});
var ExportedModal = (_ModalInjection$unsta = _ModalInjection.default.unstable_Modal) != null ? _ModalInjection$unsta : Modal;
var _default = exports.default = ExportedModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,