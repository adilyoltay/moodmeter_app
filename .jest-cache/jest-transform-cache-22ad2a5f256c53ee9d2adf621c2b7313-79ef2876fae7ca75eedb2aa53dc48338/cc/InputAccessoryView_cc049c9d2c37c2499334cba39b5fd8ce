aea41184d5c0cc26102f51ca07380f18
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SafeAreaView = _interopRequireDefault(require("../../Components/SafeAreaView/SafeAreaView"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _useWindowDimensions2 = _interopRequireDefault(require("../../Utilities/useWindowDimensions"));
var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(require("./RCTInputAccessoryViewNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var InputAccessoryView = function InputAccessoryView(props) {
  var _useWindowDimensions = (0, _useWindowDimensions2.default)(),
    width = _useWindowDimensions.width;
  if (_Platform.default.OS === 'ios') {
    if (React.Children.count(props.children) === 0) {
      return null;
    }
    return (0, _jsxRuntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
      style: [props.style, styles.container],
      nativeID: props.nativeID,
      backgroundColor: props.backgroundColor,
      children: (0, _jsxRuntime.jsx)(_SafeAreaView.default, {
        style: [styles.safeAreaView, {
          width: width
        }],
        children: props.children
      })
    });
  } else {
    console.warn('<InputAccessoryView> is only supported on iOS.');
    return null;
  }
};
var styles = _StyleSheet.default.create({
  container: {
    position: 'absolute'
  },
  safeAreaView: {
    flex: 1
  }
});
var _default = exports.default = InputAccessoryView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,