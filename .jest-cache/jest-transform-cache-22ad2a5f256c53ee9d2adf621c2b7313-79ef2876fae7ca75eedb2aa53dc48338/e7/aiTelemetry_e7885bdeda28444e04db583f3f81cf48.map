{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_reactNative","_featureFlags","_types","AIEventType","exports","VALID_EVENT_TYPES","Set","Object","values","ConsentLevel","DEFAULT_CONFIG","enabled","consentLevel","BASIC","bufferSize","flushIntervalMs","maxRetentionDays","anonymizationEnabled","offlineBuffering","AITelemetryManager","_classCallCheck2","default","config","eventBuffer","isInitialized","suggestionStats","shown","accepted","rejected","sessionId","generateSessionId","initialize","_createClass2","key","value","_initialize","_asyncToGenerator2","loadUserConsent","loadOfflineBuffer","startPeriodicFlush","console","log","error","apply","arguments","_trackAIInteraction","eventType","_this","metadata","length","undefined","userId","size","has","__DEV__","warn","FEATURE_FLAGS","isEnabled","NONE","event","timestamp","Date","toISOString","hashUserId","sanitizeMetadata","anonymized","retentionDays","addToBuffer","InteractionManager","runAfterInteractions","_yield$import","supabaseService","supabaseClient","from","insert","user_id","event_type","persistErr","_unused","_yield$import2","performanceMetricsService","AI_RESPONSE_GENERATED","_yield$performanceMet","latency","Number","recordToday","ai","requests","getLastNDays","_last$","_last$2","last","prev","avgLatencyMs","prevReq","newAvg","Math","round","cached","_last$3","prevHits","cacheHits","API_ERROR","AI_PROVIDER_FAILED","_last2$","prevFailures","failures","_unused2","JSON","stringify","notifyTelemetryDebugListeners","trackAIInteraction","_x","_trackAIError","context","errorCode","code","errorMessage","message","severity","recoverable","trackAIError","_x2","_x3","_trackPerformance","feature","metrics","responseTime","SLOW_RESPONSE","modelUsed","CHAT_RESPONSE_RECEIVED","assign","trackPerformance","_x4","_x5","_x6","_trackUserFeedback","feedback","overallSatisfaction","USER_FEEDBACK_POSITIVE","USER_FEEDBACK_NEGATIVE","comment","sanitizeComment","trackUserFeedback","_x7","_x8","_x9","_trackSuggestionUsage","action","suggestionId","eventMap","SUGGESTION_SHOWN","SUGGESTION_ACCEPTED","SUGGESTION_REJECTED","push","trackSuggestionUsage","_x0","_x1","_x10","getSuggestionStats","days","cutoff","now","filter","d","usage","acceptanceRate","_exportUserData","hashedUserId","userEvents","bufferEvents","_toConsumableArray2","offlineEvents","loadUserEventsFromStorage","exportUserData","_x11","_deleteUserData","deleteUserEventsFromStorage","substring","deleteUserData","_x12","_updateConsentLevel","level","AsyncStorage","setItem","clearStoredEvents","updateConsentLevel","_x13","hash","i","char","charCodeAt","abs","toString","sanitized","piiFields","field","replace","classifyTrigger","trigger","includes","random","substr","flushBuffer","_flushBuffer","saveEventsToStorage","_yield$import3","payload","map","evt","session_id","consent_level","occurred_at","defaultToNull","_this2","flushTimer","setInterval","_loadUserConsent","consent","getItem","_loadOfflineBuffer","_this3","stored","_this3$eventBuffer","events","parse","slice","removeItem","trackTelemetryError","_saveEventsToStorage","_this4","cutoffDate","setDate","getDate","filteredEvents","_x14","_loadUserEventsFromStorage","_x15","_deleteUserEventsFromStorage","_x16","_clearStoredEvents","operation","parts","split","count","parseInt","_cleanup","clearInterval","cleanup","__aiDebugListeners","addTelemetryDebugListener","listener","removeTelemetryDebugListener","index","indexOf","splice","setTimeout","forEach","telemetryManager","_ref4","_x17","_ref5","fullError","ErrorSeverity","CRITICAL","_x18","_x19","trackAIPerformance","_ref6","_x20","_x21","_x22","trackAIFeedback","_ref7","_x23","_x24","_x25","trackCrisisDetection","_ref8","riskLevel","triggers","PREVENTIVE_INTERVENTION_TRIGGERED","triggerCount","triggerTypes","t","_telemetryManager$cla","call","_x26","_x27","_x28","_ref9","_x29","_x30","_x31","trackCacheEvent","_ref0","hit","cacheKey","CACHE_HIT","CACHE_MISS","_x32","_x33","_x34","trackGatingDecision","_ref1","decision","reason","LLM_GATING_DECISION","_x35","_x36","_x37","exportAITelemetryData","_ref10","_x38","deleteAITelemetryData","_ref11","_x39","updateTelemetryConsent","_ref12","_x40","cleanupTelemetry","_ref13"],"sources":["aiTelemetry.ts"],"sourcesContent":["/**\n * üìä AI Telemetry System - Privacy-First Analytics\n * \n * Bu sistem AI √∂zelliklerinin kullanƒ±mƒ±nƒ±, performansƒ±nƒ± ve g√ºvenliƒüini izler.\n * FAZ 0 g√ºvenlik prensiplerine uygun olarak gizlilik-√∂ncelikli tasarlanmƒ±≈ütƒ±r.\n * \n * ‚ö†Ô∏è CRITICAL: Feature flag kontrol√º her telemetri √∂ncesi yapƒ±lmalƒ±\n * ‚ö†Ô∏è Ki≈üisel veri asla loglanmaz, sadece usage pattern'larƒ±\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { InteractionManager } from 'react-native';\nimport { FEATURE_FLAGS } from '@/constants/featureFlags';\nimport { \n  AIError, \n  AIInteractionAnalytics, \n  AIInteractionType,\n  ErrorSeverity,\n  AIErrorCode\n} from '@/features/ai/types';\n\n// =============================================================================\n// üìã TELEMETRY EVENT TYPES\n// =============================================================================\n\n/**\n * AI Event t√ºrleri\n */\nexport enum AIEventType {\n  // System events\n  SYSTEM_INITIALIZED = 'system_initialized',\n  SYSTEM_STARTED = 'system_started',\n  SYSTEM_STOPPED = 'system_stopped',\n  SYSTEM_STATUS = 'system_status',\n  EMERGENCY_SHUTDOWN = 'emergency_shutdown',\n  FEATURE_ENABLED = 'feature_enabled',\n  FEATURE_DISABLED = 'feature_disabled',\n  \n  // Chat events\n  CHAT_SESSION_STARTED = 'chat_session_started',\n  CHAT_MESSAGE_SENT = 'chat_message_sent',\n  CHAT_RESPONSE_RECEIVED = 'chat_response_received',\n  CHAT_SESSION_ENDED = 'chat_session_ended',\n  CHAT_ERROR = 'chat_error',\n  \n  // Insights events\n  INSIGHT_GENERATED = 'insight_generated',\n  INSIGHT_VIEWED = 'insight_viewed',\n  INSIGHT_SHARED = 'insight_shared',\n  \n  // Legacy crisis events removed (use preventive/general events instead)\n  \n  // Performance events\n  SLOW_RESPONSE = 'slow_response',\n  API_ERROR = 'api_error',\n  EXTERNAL_API_ERROR = 'external_api_error',\n  SYSTEM_ERROR = 'system_error',\n  FALLBACK_TRIGGERED = 'fallback_triggered',\n  \n  // User experience events\n  USER_FEEDBACK_POSITIVE = 'user_feedback_positive',\n  USER_FEEDBACK_NEGATIVE = 'user_feedback_negative',\n  FEATURE_ABANDONED = 'feature_abandoned',\n  SUGGESTION_SHOWN = 'suggestion_shown',\n  SUGGESTION_ACCEPTED = 'suggestion_accepted',\n  SUGGESTION_REJECTED = 'suggestion_rejected',\n  \n  // Sprint 6: Context Intelligence events\n  CONTEXT_INTELLIGENCE_INITIALIZED = 'context_intelligence_initialized',\n  CONTEXT_ANALYSIS_COMPLETED = 'context_analysis_completed',\n  CONTEXT_INTELLIGENCE_SHUTDOWN = 'context_intelligence_shutdown',\n  \n  // Sprint 6: Adaptive Interventions events\n  ADAPTIVE_INTERVENTIONS_INITIALIZED = 'adaptive_interventions_initialized',\n  INTERVENTION_TRIGGERED = 'intervention_triggered',\n  INTERVENTION_DELIVERED = 'intervention_delivered',\n  INTERVENTION_FEEDBACK = 'intervention_feedback',\n  // Use PREVENTIVE_INTERVENTION_TRIGGERED for risk-based support\n  ADAPTIVE_INTERVENTIONS_SHUTDOWN = 'adaptive_interventions_shutdown',\n  \n  // Sprint 6: JITAI events\n  JITAI_INITIALIZED = 'jitai_initialized',\n  TIMING_PREDICTION_GENERATED = 'timing_prediction_generated',\n  INTERVENTION_PERSONALIZED = 'intervention_personalized',\n  AB_TEST_VARIATION_APPLIED = 'ab_test_variation_applied',\n  AB_TEST_STARTED = 'ab_test_started',\n  AB_TEST_STOPPED = 'ab_test_stopped',\n  \n  // Sprint 7: Onboarding events\n  ONBOARDING_ENGINE_INITIALIZED = 'onboarding_engine_initialized',\n  ONBOARDING_SESSION_CREATED = 'onboarding_session_created',\n  ONBOARDING_STEP_COMPLETED = 'onboarding_step_completed',\n  ONBOARDING_STEP_UPDATED = 'onboarding_step_updated',\n  ONBOARDING_SESSION_COMPLETED = 'onboarding_session_completed',\n  ONBOARDING_ENGINE_SHUTDOWN = 'onboarding_engine_shutdown',\n  YBOCS_ANALYSIS_COMPLETED = 'ybocs_analysis_completed',\n  TREATMENT_PLAN_GENERATED = 'treatment_plan_generated',\n  JITAI_SHUTDOWN = 'jitai_shutdown',\n  \n  // Sprint 4: CBT Engine events\n  CBT_ENGINE_INITIALIZED = 'cbt_engine_initialized',\n  CBT_ANALYSIS_COMPLETED = 'cbt_analysis_completed',\n  CBT_TECHNIQUE_APPLIED = 'cbt_technique_applied',\n  CBT_ENGINE_SHUTDOWN = 'cbt_engine_shutdown',\n  \n  // Sprint 5: Insights System events  \n  INSIGHTS_COORDINATOR_INITIALIZED = 'insights_coordinator_initialized',\n  INSIGHT_WORKFLOW_COMPLETED = 'insight_workflow_completed',\n  INSIGHTS_COORDINATOR_SHUTDOWN = 'insights_coordinator_shutdown',\n  INSIGHTS_REQUESTED = 'insights_requested',\n  INSIGHTS_DELIVERED = 'insights_delivered',\n  \n  // Sprint 7: AI Onboarding Recreation events (consolidated)\n  YBOCS_ANALYSIS_STARTED = 'ybocs_analysis_started',\n  YBOCS_ENHANCEMENT_APPLIED = 'ybocs_enhancement_applied',\n  ONBOARDING_SESSION_STARTED = 'onboarding_session_started',\n  \n  USER_PROFILE_GENERATED = 'user_profile_generated',\n  USER_PROFILE_ENHANCED = 'user_profile_enhanced',\n  USER_PROFILE_UPDATED = 'user_profile_updated',\n  \n  // duplicate removed\n  TREATMENT_PLAN_ADAPTED = 'treatment_plan_adapted',\n  TREATMENT_PLAN_OPTIMIZED = 'treatment_plan_optimized',\n  \n  RISK_ASSESSMENT_COMPLETED = 'risk_assessment_completed',\n  RISK_ESCALATION_PREDICTED = 'risk_escalation_predicted',\n  SAFETY_PLAN_CREATED = 'safety_plan_created',\n  PREVENTIVE_INTERVENTION_TRIGGERED = 'preventive_intervention_triggered',\n  \n  // Production telemetry events\n  AI_RESPONSE_GENERATED = 'ai_response_generated',\n  AI_PROVIDER_HEALTH_CHECK = 'ai_provider_health_check',\n  AI_PROVIDER_FAILED = 'ai_provider_failed',\n  AI_CACHE_HIT = 'ai_cache_hit',\n  AI_CACHE_MISS = 'ai_cache_miss',\n  AI_RATE_LIMIT_HIT = 'ai_rate_limit_hit',\n  EXTERNAL_AI_INITIALIZED = 'external_ai_initialized',\n  EXTERNAL_AI_SHUTDOWN = 'external_ai_shutdown',\n  AI_PII_DETECTED = 'ai_pii_detected',\n  AI_CONTENT_FILTERED = 'ai_content_filtered'\n  ,\n  // Prompts (sanitized) logging\n  AI_PROMPT_LOGGED = 'ai_prompt_logged',\n  // Progress Analytics removed\n  \n  // Pattern Recognition V2\n  PATTERN_RECOGNITION_INITIALIZED = 'pattern_recognition_initialized',\n  PATTERN_ANALYSIS_COMPLETED = 'pattern_analysis_completed',\n  PATTERN_VALIDATED = 'pattern_validated',\n  PATTERN_RECOGNITION_SHUTDOWN = 'pattern_recognition_shutdown',\n  \n  // Insights Engine V2\n  INSIGHTS_ENGINE_INITIALIZED = 'insights_engine_initialized',\n  INSIGHTS_GENERATED = 'insights_generated',\n  INSIGHTS_ENGINE_SHUTDOWN = 'insights_engine_shutdown',\n  // Insights specialization\n  INSIGHTS_RATE_LIMITED = 'insights_rate_limited',\n  INSIGHTS_CACHE_HIT = 'insights_cache_hit',\n  INSIGHTS_CACHE_MISS = 'insights_cache_miss',\n  INSIGHTS_MISSING_REQUIRED_FIELDS = 'insights_missing_required_fields',\n  NO_INSIGHTS_GENERATED = 'no_insights_generated',\n  // Storage reliability\n  STORAGE_RETRY_ATTEMPT = 'storage_retry_attempt',\n  STORAGE_RETRY_SUCCESS = 'storage_retry_success',\n  STORAGE_RETRY_FAILED = 'storage_retry_failed',\n  \n  // Smart Notifications\n  SMART_NOTIFICATIONS_INITIALIZED = 'smart_notifications_initialized',\n  NOTIFICATION_SCHEDULED = 'notification_scheduled',\n  NOTIFICATION_PREFERENCES_UPDATED = 'notification_preferences_updated',\n  NOTIFICATION_FEEDBACK = 'notification_feedback',\n  SMART_NOTIFICATIONS_SHUTDOWN = 'smart_notifications_shutdown',\n  \n  // Therapeutic Prompts\n  THERAPEUTIC_PROMPTS_INITIALIZED = 'therapeutic_prompts_initialized'\n  ,\n  // Insights data insufficiency\n  INSIGHTS_DATA_INSUFFICIENT = 'insights_data_insufficient'\n  ,\n  // Sprint 1: Voice mood check-in\n  CHECKIN_STARTED = 'checkin_started',\n  CHECKIN_COMPLETED = 'checkin_completed',\n  STT_FAILED = 'stt_failed',\n  ROUTE_SUGGESTED = 'route_suggested',\n  \n  // Sprint 2: JITAI\n  JITAI_TRIGGER_FIRED = 'jitai_trigger_fired',\n  GUARDRAIL_TRIGGERED = 'guardrail_triggered',\n  \n  // Sprint 2: Compulsion quick entry\n  COMPULSION_PROMPTED = 'compulsion_prompted',\n  COMPULSION_LOGGED = 'compulsion_logged',\n  COMPULSION_DISMISSED = 'compulsion_dismissed',\n  COMPULSION_SNOOZED = 'compulsion_snoozed',\n  \n  // Sprint 2: Relapse window\n  RELAPSE_WINDOW_DETECTED = 'relapse_window_detected',\n  PROACTIVE_PROMPT_CLICKED = 'proactive_prompt_clicked',\n  \n  // Sprint 1: PDF export\n  PDF_GENERATED = 'pdf_generated',\n  PDF_SHARED = 'pdf_shared',\n  PDF_CANCELLED = 'pdf_cancelled',\n  PDF_ERROR = 'pdf_error'\n  ,\n  // Sprint 1: Breathwork\n  BREATH_STARTED = 'breath_started',\n  BREATH_PAUSED = 'breath_paused',\n  BREATH_RESUMED = 'breath_resumed',\n  BREATH_COMPLETED = 'breath_completed',\n  // Sprint 1: CBT Thought Record\n  REFRAME_STARTED = 'reframe_started',\n  REFRAME_COMPLETED = 'reframe_completed',\n  DISTORTION_SELECTED = 'distortion_selected'\n  // Missing events added for stability\n  ,\n  INSIGHTS_FEEDBACK = 'insights_feedback',\n  INTERVENTION_RECOMMENDED = 'intervention_recommended',\n  YBOCS_QUESTION_VIEWED = 'ybocs_question_viewed',\n  \n  // CoreAnalysisService v1 events\n  BATCH_JOB_STARTED = 'batch_job_started',\n  BATCH_JOB_COMPLETED = 'batch_job_completed',\n  BATCH_JOB_FAILED = 'batch_job_failed',\n  CACHE_HIT = 'cache_hit',\n  CACHE_MISS = 'cache_miss',\n  LLM_GATING_DECISION = 'llm_gating_decision',\n  TOKEN_BUDGET_EXCEEDED = 'token_budget_exceeded',\n  TOKEN_USAGE_RECORDED = 'token_usage_recorded',\n  SIMILARITY_DEDUP_HIT = 'similarity_dedup_hit',\n  PROGRESSIVE_UI_UPDATE = 'progressive_ui_update',\n\n  \n  // Unified AI Pipeline events (NEW - Jan 2025)\n  UNIFIED_PIPELINE_STARTED = 'unified_pipeline_started',\n  UNIFIED_PIPELINE_COMPLETED = 'unified_pipeline_completed',\n  UNIFIED_PIPELINE_ERROR = 'unified_pipeline_error',\n  UNIFIED_PIPELINE_CACHE_HIT = 'unified_pipeline_cache_hit',\n  UNIFIED_PIPELINE_DISABLED = 'unified_pipeline_disabled',\n  CACHE_INVALIDATION = 'cache_invalidation',\n  \n  // Voice Analysis specific events\n  VOICE_ANALYSIS_STARTED = 'voice_analysis_started',\n  VOICE_ANALYSIS_COMPLETED = 'voice_analysis_completed',\n  VOICE_ANALYSIS_FAILED = 'voice_analysis_failed',\n\n  // Pattern Recognition specific events\n  PATTERN_RECOGNITION_STARTED = 'pattern_recognition_started',\n  PATTERN_RECOGNITION_COMPLETED = 'pattern_recognition_completed',\n  PATTERN_RECOGNITION_FAILED = 'pattern_recognition_failed',\n  \n  // Breathwork Suggestion events (NEW - Week 2)\n  BREATHWORK_SUGGESTION_GENERATED = 'breathwork_suggestion_generated',\n  BREATHWORK_SUGGESTION_SNOOZED = 'breathwork_suggestion_snoozed',\n  BREATHWORK_SUGGESTION_DISMISSED = 'breathwork_suggestion_dismissed',\n  BREATHWORK_SUGGESTION_DELAYED = 'breathwork_suggestion_delayed',\n  BREATHWORK_SUGGESTION_ACCEPTED = 'breathwork_suggestion_accepted',\n  BREATHWORK_SESSION_COMPLETED = 'breathwork_session_completed',\n  \n  // üéØ Multi-Intent Events (NEW)\n  CHECKIN_ROUTING_DECISION = 'checkin_routing_decision',\n  CHECKIN_USER_CORRECTION = 'checkin_user_correction',\n  FIELD_COMPLETENESS = 'field_completeness',\n  MULTI_RECORD_TRANSACTION = 'multi_record_transaction',\n  \n  // Dynamic Gamification events (NEW - Week 2)\n  GAMIFICATION_DYNAMIC_POINTS_AWARDED = 'gamification_dynamic_points_awarded',\n  GAMIFICATION_MISSIONS_GENERATED = 'gamification_missions_generated',\n  GAMIFICATION_MISSION_COMPLETED = 'gamification_mission_completed',\n  GAMIFICATION_LEVEL_UP = 'gamification_level_up',\n  GAMIFICATION_STREAK_MILESTONE = 'gamification_streak_milestone',\n  GAMIFICATION_ADAPTATION_UPDATED = 'gamification_adaptation_updated',\n  \n  // Smart Routing events (NEW - Week 2)\n  SMART_ROUTE_GENERATED = 'smart_route_generated',\n  SMART_NAVIGATION_ATTEMPTED = 'smart_navigation_attempted',\n  SMART_NAVIGATION_COMPLETED = 'smart_navigation_completed',\n  SMART_NAVIGATION_FAILED = 'smart_navigation_failed',\n  ROUTE_SUGGESTION_PROVIDED = 'route_suggestion_provided',\n  PREFILL_DATA_EXTRACTED = 'prefill_data_extracted',\n  \n  // Legacy aliases (compat)\n  SERVICE_ACCESSED = 'service_accessed',\n  SERVICE_INITIALIZED = 'service_initialized',\n  SESSION_STARTED = 'session_started',\n  SESSION_CREATED = 'session_created',\n  ARTWORK_SAVED = 'artwork_saved',\n  ART_THERAPY_STARTED = 'art_therapy_started',\n  ART_THERAPY_COMPLETED = 'art_therapy_completed',\n  AI_ANALYSIS_COMPLETED = 'cbt_analysis_completed',\n  PROFILE_CREATED = 'user_profile_generated',\n  YBOCS_COMPLETED = 'ybocs_analysis_completed',\n  INTERVENTION_COMPLETED = 'intervention_delivered',\n  \n  // üéØ Adaptive Suggestions / JITAI events\n  ADAPTIVE_SUGGESTION_SHOWN = 'adaptive_suggestion_shown',\n  ADAPTIVE_SUGGESTION_CLICKED = 'adaptive_suggestion_clicked', \n  ADAPTIVE_SUGGESTION_DISMISSED = 'adaptive_suggestion_dismissed',\n  \n  // üìä Enhanced Mood Analytics (NEW)\n  MOOD_ANALYTICS_COMPUTED = 'mood_analytics_computed'\n}\n\n// Build a runtime set for event validation (after enum declaration)\nconst VALID_EVENT_TYPES: Set<string> = new Set<string>(Object.values(AIEventType));\n\n/**\n * Telemetry event base interface\n */\nexport interface TelemetryEvent {\n  eventType: AIEventType;\n  timestamp: string;\n  sessionId?: string;\n  userId?: string; // Hashed for privacy\n  metadata: Record<string, any>;\n  \n  // Privacy & compliance\n  anonymized: boolean;\n  retentionDays: number;\n  consentLevel: ConsentLevel;\n}\n\n/**\n * Consent seviyeleri\n */\nexport enum ConsentLevel {\n  NONE = 'none',           // No tracking\n  BASIC = 'basic',         // Essential functionality only\n  ANALYTICS = 'analytics', // Usage patterns\n  FULL = 'full'           // All telemetry (with user consent)\n}\n\n/**\n * Performance metrics\n */\nexport interface PerformanceMetrics {\n  responseTime: number;\n  tokenCount?: number;\n  modelUsed: string;\n  cacheHit: boolean;\n  errorCount: number;\n  retryCount: number;\n}\n\n/**\n * User satisfaction feedback\n */\nexport interface UserFeedback {\n  helpfulness: number; // 1-5\n  accuracy: number; // 1-5\n  empathy: number; // 1-5\n  overallSatisfaction: number; // 1-5\n  comment?: string; // Sanitized, no PII\n}\n\n// =============================================================================\n// üîß TELEMETRY CONFIGURATION\n// =============================================================================\n\n/**\n * Telemetry konfig√ºrasyonu\n */\ninterface TelemetryConfig {\n  enabled: boolean;\n  consentLevel: ConsentLevel;\n  bufferSize: number;\n  flushIntervalMs: number;\n  maxRetentionDays: number;\n  anonymizationEnabled: boolean;\n  offlineBuffering: boolean;\n}\n\n/**\n * Default telemetry config\n */\nconst DEFAULT_CONFIG: TelemetryConfig = {\n  enabled: true,\n  consentLevel: ConsentLevel.BASIC,\n  bufferSize: 100,\n  flushIntervalMs: 30000, // 30 seconds\n  maxRetentionDays: 30,\n  anonymizationEnabled: true,\n  offlineBuffering: true\n};\n\n// =============================================================================\n// üìä TELEMETRY MANAGER CLASS\n// =============================================================================\n\nclass AITelemetryManager {\n  private config: TelemetryConfig = DEFAULT_CONFIG;\n  private eventBuffer: TelemetryEvent[] = [];\n  private flushTimer?: NodeJS.Timeout;\n  private sessionId: string;\n  private isInitialized: boolean = false;\n  private suggestionStats = {\n    shown: [] as Date[],\n    accepted: [] as Date[],\n    rejected: [] as Date[]\n  };\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.initialize();\n  }\n\n  /**\n   * Telemetry sistemini ba≈ülat\n   */\n  private async initialize(): Promise<void> {\n    try {\n      // Kullanƒ±cƒ± consent seviyesini y√ºkle\n      await this.loadUserConsent();\n      \n      // Offline buffer'ƒ± y√ºkle\n      if (this.config.offlineBuffering) {\n        await this.loadOfflineBuffer();\n      }\n      \n      // Periodic flush ba≈ülat\n      this.startPeriodicFlush();\n      \n      this.isInitialized = true;\n      console.log('üìä AI Telemetry initialized');\n      \n    } catch (error) {\n      console.error('‚ùå AI Telemetry initialization failed:', error);\n    }\n  }\n\n  /**\n   * AI etkile≈üimini track et\n   */\n  async trackAIInteraction(\n    eventType: AIEventType,\n    metadata: Record<string, any> = {},\n    userId?: string\n  ): Promise<void> {\n    // Guard: enforce valid event type\n    if (!eventType || typeof eventType !== 'string' || (VALID_EVENT_TYPES.size && !VALID_EVENT_TYPES.has(eventType))) {\n      if (__DEV__) console.warn('‚ö†Ô∏è Telemetry eventType missing/invalid, dropping event:', eventType);\n      return;\n    }\n    // Feature flag kontrol√º FIRST\n    if (!FEATURE_FLAGS.isEnabled('AI_TELEMETRY')) {\n      return;\n    }\n\n    // Telemetry disabled ise skip\n    if (!this.config.enabled || this.config.consentLevel === ConsentLevel.NONE) {\n      return;\n    }\n\n    try {\n      const event: TelemetryEvent = {\n        eventType,\n        timestamp: new Date().toISOString(),\n        sessionId: this.sessionId,\n        userId: userId && typeof userId === 'string' && userId.length > 0 ? this.hashUserId(userId) : undefined,\n        metadata: this.sanitizeMetadata(metadata),\n        anonymized: this.config.anonymizationEnabled,\n        retentionDays: this.config.maxRetentionDays,\n        consentLevel: this.config.consentLevel\n      };\n\n      // Event'i buffer'a ekle\n      this.addToBuffer(event);\n\n      // Persist a minimal copy to Supabase (non-blocking)\n      try {\n        // Use InteractionManager to avoid UI jank\n        InteractionManager.runAfterInteractions(async () => {\n          try {\n            if (!FEATURE_FLAGS.isEnabled('AI_TELEMETRY')) return;\n            const { default: supabaseService } = await import('@/services/supabase');\n            // Do not specify time column; rely on DB default (works with both\n            // legacy \"timestamp\" and new \"occurred_at\" schemas)\n            await supabaseService.supabaseClient\n              .from('ai_telemetry')\n              .insert({\n                user_id: userId || null,\n                event_type: eventType,\n                metadata: this.sanitizeMetadata(metadata)\n              });\n          } catch (persistErr) {\n            // Swallow persistence errors silently; local buffer still holds\n            if (__DEV__) console.warn('Telemetry persist failed:', persistErr);\n          }\n        });\n      } catch {}\n\n      // Update daily performance metrics for key events (non-blocking)\n      try {\n        const { default: performanceMetricsService } = await import('@/services/telemetry/performanceMetricsService');\n        if (eventType === AIEventType.AI_RESPONSE_GENERATED) {\n          const latency = Number((metadata as any)?.latency || 0);\n          await performanceMetricsService.recordToday({ ai: { requests: ((await performanceMetricsService.getLastNDays(1))[0]?.ai?.requests || 0) + 1 } });\n          if (latency > 0) {\n            const last = await performanceMetricsService.getLastNDays(1);\n            const prev = last[0]?.ai?.avgLatencyMs || 0;\n            const prevReq = last[0]?.ai?.requests || 0;\n            const newAvg = prevReq > 0 ? Math.round(((prev * prevReq) + latency) / (prevReq + 1)) : latency;\n            await performanceMetricsService.recordToday({ ai: { avgLatencyMs: newAvg } });\n          }\n          if ((metadata as any)?.cached === true) {\n            const last = await performanceMetricsService.getLastNDays(1);\n            const prevHits = last[0]?.ai?.cacheHits || 0;\n            await performanceMetricsService.recordToday({ ai: { cacheHits: prevHits + 1 } });\n          }\n        } else if (eventType === AIEventType.API_ERROR || eventType === AIEventType.AI_PROVIDER_FAILED) {\n          const last = await performanceMetricsService.getLastNDays(1);\n          const prevFailures = last[0]?.ai?.failures || 0;\n          await performanceMetricsService.recordToday({ ai: { failures: prevFailures + 1 } });\n        }\n      } catch {}\n\n      // Debug log (sadece development)\n      if (__DEV__) console.log(`üìä AI Telemetry: ${eventType}`, JSON.stringify(metadata));\n\n      // Debug listener'larƒ± bilgilendir (sadece development)\n      notifyTelemetryDebugListeners(event);\n\n    } catch (error) {\n      console.error('‚ùå Error tracking AI interaction:', error);\n    }\n  }\n\n  /**\n   * AI error'unu track et\n   */\n  async trackAIError(error: AIError, context?: Record<string, any>): Promise<void> {\n    await this.trackAIInteraction(AIEventType.API_ERROR, {\n      errorCode: error.code,\n      errorMessage: error.message,\n      severity: error.severity,\n      recoverable: error.recoverable,\n      context: this.sanitizeMetadata(context || {})\n    });\n  }\n\n  /**\n   * Performance metrics'i track et\n   */\n  async trackPerformance(\n    feature: string,\n    metrics: PerformanceMetrics,\n    userId?: string\n  ): Promise<void> {\n    // Slow response detection\n    if ((metrics.responseTime || 0) > 5000) {\n      await this.trackAIInteraction(AIEventType.SLOW_RESPONSE, {\n        feature,\n        responseTime: metrics.responseTime,\n        modelUsed: metrics.modelUsed\n      }, userId);\n    }\n\n    // General performance tracking\n    await this.trackAIInteraction(AIEventType.CHAT_RESPONSE_RECEIVED, {\n      feature,\n      ...metrics\n    }, userId);\n  }\n\n  /**\n   * User feedback'i track et\n   */\n  async trackUserFeedback(\n    feedback: UserFeedback,\n    feature: string,\n    userId?: string\n  ): Promise<void> {\n    const eventType = feedback.overallSatisfaction >= 4 \n      ? AIEventType.USER_FEEDBACK_POSITIVE \n      : AIEventType.USER_FEEDBACK_NEGATIVE;\n\n    await this.trackAIInteraction(eventType, {\n      feature,\n      ...feedback,\n      comment: feedback.comment ? this.sanitizeComment(feedback.comment) : undefined\n    }, userId);\n  }\n\n  /**\n   * Crisis detection event'ini track et\n   */\n  // Legacy crisis tracking removed in favor of preventive/general events\n\n  /**\n   * Track suggestion usage and feedback\n   */\n  async trackSuggestionUsage(\n    action: 'shown' | 'accepted' | 'rejected',\n    suggestionId?: string,\n    userId?: string\n  ): Promise<void> {\n    const eventMap = {\n      shown: AIEventType.SUGGESTION_SHOWN,\n      accepted: AIEventType.SUGGESTION_ACCEPTED,\n      rejected: AIEventType.SUGGESTION_REJECTED,\n    } as const;\n\n    this.suggestionStats[action].push(new Date());\n\n    await this.trackAIInteraction(eventMap[action], { suggestionId }, userId);\n  }\n\n  /**\n   * Get suggestion statistics for a given period\n   */\n  getSuggestionStats(days: number): { usage: number; acceptanceRate: number } {\n    const cutoff = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n    const shown = this.suggestionStats.shown.filter(d => d >= cutoff).length;\n    const accepted = this.suggestionStats.accepted.filter(d => d >= cutoff).length;\n    const usage = shown;\n    const acceptanceRate = shown ? accepted / shown : 0;\n    return { usage, acceptanceRate };\n  }\n\n  /**\n   * Analytics export (GDPR uyumlu)\n   */\n  async exportUserData(userId: string): Promise<TelemetryEvent[]> {\n    const hashedUserId = this.hashUserId(userId);\n    const userEvents: TelemetryEvent[] = [];\n\n    // Buffer'dan user'a ait event'leri filtrele\n    const bufferEvents = this.eventBuffer.filter(\n      event => event.userId === hashedUserId\n    );\n    userEvents.push(...bufferEvents);\n\n    // Offline storage'dan da y√ºkle\n    try {\n      const offlineEvents = await this.loadUserEventsFromStorage(hashedUserId);\n      userEvents.push(...offlineEvents);\n    } catch (error) {\n      console.error('Error loading user events from storage:', error);\n    }\n\n    return userEvents;\n  }\n\n  /**\n   * User data'sƒ±nƒ± sil (GDPR right to be forgotten)\n   */\n  async deleteUserData(userId: string): Promise<void> {\n    const hashedUserId = this.hashUserId(userId);\n\n    // Buffer'dan sil\n    this.eventBuffer = this.eventBuffer.filter(\n      event => event.userId !== hashedUserId\n    );\n\n    // Storage'dan sil\n    try {\n      await this.deleteUserEventsFromStorage(hashedUserId);\n      console.log(`üóëÔ∏è Deleted telemetry data for user: ${hashedUserId.substring(0, 8)}...`);\n    } catch (error) {\n      console.error('Error deleting user telemetry data:', error);\n    }\n  }\n\n  /**\n   * Consent seviyesini g√ºncelle\n   */\n  async updateConsentLevel(level: ConsentLevel): Promise<void> {\n    this.config.consentLevel = level;\n    \n    // Consent'i kaydet\n    await AsyncStorage.setItem('ai_telemetry_consent', level);\n    \n    // Eƒüer consent kaldƒ±rƒ±ldƒ±ysa, mevcut data'yƒ± temizle\n    if (level === ConsentLevel.NONE) {\n      this.eventBuffer = [];\n      await this.clearStoredEvents();\n    }\n\n    console.log(`üìä AI Telemetry consent updated to: ${level}`);\n  }\n\n  // =============================================================================\n  // üîí PRIVATE HELPER METHODS\n  // =============================================================================\n\n  /**\n   * User ID'sini hash'le (privacy i√ßin)\n   */\n  private hashUserId(userId: string): string {\n    // Simple hash - production'da crypto hash kullanƒ±lmalƒ±\n    let hash = 0;\n    for (let i = 0; i < userId.length; i++) {\n      const char = userId.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return `user_${Math.abs(hash).toString(16)}`;\n  }\n\n  /**\n   * Metadata'yƒ± sanitize et - PII √ßƒ±kar\n   */\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized = { ...metadata };\n    \n    // PII olabilecek field'larƒ± √ßƒ±kar\n    const piiFields = ['email', 'phone', 'name', 'address', 'content', 'message'];\n    \n    for (const field of piiFields) {\n      if (sanitized[field]) {\n        delete sanitized[field];\n      }\n    }\n    \n    // String'leri length ile deƒüi≈ütir\n    for (const key in sanitized) {\n      if (typeof sanitized[key] === 'string' && sanitized[key].length > 50) {\n        sanitized[key] = `[string_length_${sanitized[key].length}]`;\n      }\n    }\n    \n    return sanitized;\n  }\n\n  /**\n   * Comment'i sanitize et\n   */\n  private sanitizeComment(comment: string): string {\n    // Uzun comment'leri kƒ±salt\n    if (comment.length > 100) {\n      return `[comment_length_${comment.length}]`;\n    }\n    \n    // PII pattern'larƒ±nƒ± mask'le\n    return comment\n      .replace(/\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w+\\b/g, '[email]')\n      .replace(/\\b\\d{10,}\\b/g, '[phone]')\n      .replace(/\\b[A-Z][a-z]+ [A-Z][a-z]+\\b/g, '[name]');\n  }\n\n  /**\n   * Trigger type'ƒ±nƒ± classify et\n   */\n  private classifyTrigger(trigger: string): string {\n    // Trigger content'ini loglamak yerine kategorisini belirle\n    if (trigger.includes('suicide') || trigger.includes('death')) {\n      return 'suicide_ideation';\n    } else if (trigger.includes('harm') || trigger.includes('hurt')) {\n      return 'self_harm';\n    } else if (trigger.includes('panic') || trigger.includes('anxiety')) {\n      return 'anxiety_spike';\n    }\n    return 'general_distress';\n  }\n\n  /**\n   * Session ID generate et\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Event'i buffer'a ekle\n   */\n  private addToBuffer(event: TelemetryEvent): void {\n    this.eventBuffer.push(event);\n    \n    // Buffer overflow kontrol√º\n    if (this.eventBuffer.length > this.config.bufferSize) {\n      this.flushBuffer();\n    }\n  }\n\n  /**\n   * Buffer'ƒ± flush et\n   */\n  private async flushBuffer(): Promise<void> {\n    if (this.eventBuffer.length === 0) return;\n\n    try {\n      // Offline storage'a kaydet\n      if (this.config.offlineBuffering) {\n        await this.saveEventsToStorage(this.eventBuffer);\n      }\n\n      // Production'da analytics (Supabase) toplu g√∂nderim\n      try {\n        if (FEATURE_FLAGS.isEnabled('AI_TELEMETRY')) {\n          const { default: supabaseService } = await import('@/services/supabase');\n          const payload = this.eventBuffer.map(evt => ({\n            event_type: evt.eventType,\n            metadata: evt.metadata,\n            session_id: evt.sessionId,\n            user_id: evt.userId || null,\n            consent_level: evt.consentLevel,\n            anonymized: evt.anonymized,\n            occurred_at: evt.timestamp\n          }));\n          // Non-blocking, error-safe insert\n          await supabaseService.supabaseClient\n            .from('ai_telemetry')\n            .insert(payload, { defaultToNull: true });\n        }\n      } catch (persistErr) {\n        if (__DEV__) console.warn('üìä Telemetry bulk persist failed (will remain in offline storage):', persistErr);\n      }\n\n      if (__DEV__) console.log(`üìä Flushed ${this.eventBuffer.length} telemetry events`);\n\n      // Buffer'ƒ± temizle\n      this.eventBuffer = [];\n\n    } catch (error) {\n      console.error('‚ùå Error flushing telemetry buffer:', error);\n    }\n  }\n\n  /**\n   * Periodic flush ba≈ülat\n   */\n  private startPeriodicFlush(): void {\n    this.flushTimer = setInterval(() => {\n      this.flushBuffer();\n    }, this.config.flushIntervalMs);\n  }\n\n  /**\n   * User consent'ini y√ºkle\n   */\n  private async loadUserConsent(): Promise<void> {\n    try {\n      const consent = await AsyncStorage.getItem('ai_telemetry_consent');\n      if (consent && Object.values(ConsentLevel).includes(consent as ConsentLevel)) {\n        this.config.consentLevel = consent as ConsentLevel;\n      }\n    } catch (error) {\n      console.error('Error loading telemetry consent:', error);\n    }\n  }\n\n  /**\n   * Offline buffer'ƒ± background'da y√ºkle\n   */\n  private async loadOfflineBuffer(): Promise<void> {\n    // UI thread'i bloklamak i√ßin InteractionManager kullan\n    InteractionManager.runAfterInteractions(async () => {\n      try {\n        const stored = await AsyncStorage.getItem('ai_telemetry_offline');\n        if (stored) {\n          const events: TelemetryEvent[] = JSON.parse(stored);\n          this.eventBuffer.push(...events);\n          \n          // Buffer size limit kontrol et\n          this.eventBuffer = this.eventBuffer.slice(-this.config.bufferSize);\n          \n          // Stored events'i temizle\n          await AsyncStorage.removeItem('ai_telemetry_offline');\n          console.log(`üìä Loaded ${events.length} offline telemetry events`);\n        }\n      } catch (error) {\n        console.error('‚ùå Failed to load offline telemetry buffer:', error);\n        // Telemetry hatasƒ±nƒ± da track et (recursive error prevention ile)\n        this.trackTelemetryError('loadOfflineBuffer', error);\n      }\n    });\n  }\n\n  /**\n   * Event'leri background'da storage'a kaydet\n   */\n  private async saveEventsToStorage(events: TelemetryEvent[]): Promise<void> {\n    // UI thread'i bloklamadan background'da kaydet\n    InteractionManager.runAfterInteractions(async () => {\n      try {\n        // Retention policy uygula - eski event'leri filtrele\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - this.config.maxRetentionDays);\n        \n        const filteredEvents = events.filter(event => \n          new Date(event.timestamp) > cutoffDate\n        );\n\n        if (filteredEvents.length > 0) {\n          await AsyncStorage.setItem(\n            'ai_telemetry_offline',\n            JSON.stringify(filteredEvents)\n          );\n        }\n      } catch (error) {\n        console.error('‚ùå Error saving events to storage:', error);\n        // Storage hatasƒ±nƒ± da track et (recursive prevention ile)\n        this.trackTelemetryError('saveEventsToStorage', error);\n      }\n    });\n  }\n\n  /**\n   * User event'lerini storage'dan y√ºkle\n   */\n  private async loadUserEventsFromStorage(hashedUserId: string): Promise<TelemetryEvent[]> {\n    try {\n      const stored = await AsyncStorage.getItem('ai_telemetry_offline');\n      if (stored) {\n        const events: TelemetryEvent[] = JSON.parse(stored);\n        return events.filter(event => event.userId === hashedUserId);\n      }\n    } catch (error) {\n      console.error('Error loading user events from storage:', error);\n    }\n    return [];\n  }\n\n  /**\n   * User event'lerini storage'dan sil\n   */\n  private async deleteUserEventsFromStorage(hashedUserId: string): Promise<void> {\n    try {\n      const stored = await AsyncStorage.getItem('ai_telemetry_offline');\n      if (stored) {\n        const events: TelemetryEvent[] = JSON.parse(stored);\n        const filteredEvents = events.filter(event => event.userId !== hashedUserId);\n        \n        if (filteredEvents.length > 0) {\n          await AsyncStorage.setItem('ai_telemetry_offline', JSON.stringify(filteredEvents));\n        } else {\n          await AsyncStorage.removeItem('ai_telemetry_offline');\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting user events from storage:', error);\n    }\n  }\n\n  /**\n   * T√ºm stored event'leri temizle\n   */\n  private async clearStoredEvents(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem('ai_telemetry_offline');\n    } catch (error) {\n      console.error('Error clearing stored events:', error);\n    }\n  }\n\n  /**\n   * Telemetry internal error tracking (recursive prevention ile)\n   */\n  private trackTelemetryError(operation: string, error: any): void {\n    // Recursive telemetry error'larƒ±nƒ± √∂nlemek i√ßin basit console log\n    console.error(`üìä Telemetry Internal Error [${operation}]:`, error);\n    \n    // Critical olmayan internal telemetry hatalarƒ±nƒ± session'da sayar\n    if (!this.sessionId.includes('_error_count')) {\n      // ƒ∞lk hata i√ßin suffix ekle\n      this.sessionId += '_error_count_1';\n    } else {\n      // Hata sayƒ±sƒ±nƒ± artƒ±r\n      const parts = this.sessionId.split('_error_count_');\n      const count = parseInt(parts[1] || '0') + 1;\n      this.sessionId = parts[0] + '_error_count_' + count;\n    }\n  }\n\n  /**\n   * Cleanup on app close\n   */\n  async cleanup(): Promise<void> {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    // Final flush\n    await this.flushBuffer();\n  }\n}\n\n// =============================================================================\n// üîß DEBUG LISTENERS (Development Only)\n// =============================================================================\n\n/**\n * Debug listener function type\n */\ntype DebugListener = (event: TelemetryEvent) => void;\n\n/**\n * Global debug listeners array (development only)\n */\nlet __aiDebugListeners: DebugListener[] = [];\n\n/**\n * Debug listener'ƒ± ekle (sadece development)\n */\nexport function addTelemetryDebugListener(listener: DebugListener): void {\n  if (!__DEV__) {\n    console.warn('‚ö†Ô∏è Debug listeners only available in development mode');\n    return;\n  }\n  \n  if (typeof listener !== 'function') {\n    console.warn('‚ö†Ô∏è Debug listener must be a function');\n    return;\n  }\n  \n  __aiDebugListeners.push(listener);\n  console.log(`üîß Added debug listener. Total listeners: ${__aiDebugListeners.length}`);\n}\n\n/**\n * Debug listener'ƒ± kaldƒ±r (sadece development)\n */\nexport function removeTelemetryDebugListener(listener: DebugListener): void {\n  if (!__DEV__) return;\n  \n  const index = __aiDebugListeners.indexOf(listener);\n  if (index > -1) {\n    __aiDebugListeners.splice(index, 1);\n    console.log(`üîß Removed debug listener. Total listeners: ${__aiDebugListeners.length}`);\n  }\n}\n\n/**\n * Debug listener'larƒ± bilgilendir (sadece development)\n */\nfunction notifyTelemetryDebugListeners(event: TelemetryEvent): void {\n  if (!__DEV__ || __aiDebugListeners.length === 0) return;\n  \n  // Background'da notify et, UI thread'i bloklamayacak ≈üekilde\n  setTimeout(() => {\n    __aiDebugListeners.forEach(listener => {\n      try {\n        listener(event);\n      } catch (error) {\n        console.error('üö® Debug listener error:', error);\n      }\n    });\n  }, 0);\n}\n\n// =============================================================================\n// üì§ EXPORTED FUNCTIONS\n// =============================================================================\n\n// Singleton instance\nconst telemetryManager = new AITelemetryManager();\n\n/**\n * AI etkile≈üimini track et\n */\nexport const trackAIInteraction = async (\n  eventType: AIEventType,\n  metadata: Record<string, any> = {},\n  userId?: string\n): Promise<void> => {\n  return telemetryManager.trackAIInteraction(eventType, metadata, userId);\n};\n\n/**\n * AI error'unu track et\n */\nexport const trackAIError = async (\n  error: AIError | {\n    code: AIErrorCode;\n    message: string;\n    severity: ErrorSeverity;\n    context?: Record<string, any>;\n  },\n  context?: Record<string, any>\n): Promise<void> => {\n  // If error is not a full AIError, create one\n  const fullError: AIError = 'timestamp' in error ? error : {\n    ...error,\n    timestamp: new Date(),\n    recoverable: error.severity !== ErrorSeverity.CRITICAL\n  };\n  \n  return telemetryManager.trackAIError(fullError, context);\n};\n\n/**\n * Performance metrics'i track et\n */\nexport const trackAIPerformance = async (\n  feature: string,\n  metrics: PerformanceMetrics,\n  userId?: string\n): Promise<void> => {\n  return telemetryManager.trackPerformance(feature, metrics, userId);\n};\n\n/**\n * User feedback'i track et\n */\nexport const trackAIFeedback = async (\n  feedback: UserFeedback,\n  feature: string,\n  userId?: string\n): Promise<void> => {\n  return telemetryManager.trackUserFeedback(feedback, feature, userId);\n};\n\n/**\n * Crisis detection'ƒ± track et\n */\n// Deprecated: use trackAIInteraction(AIEventType.PREVENTIVE_INTERVENTION_TRIGGERED, ...) instead\nexport const trackCrisisDetection = async (\n  riskLevel: string,\n  triggers: string[],\n  userId?: string\n): Promise<void> => {\n  return telemetryManager.trackAIInteraction(AIEventType.PREVENTIVE_INTERVENTION_TRIGGERED, {\n    riskLevel,\n    triggerCount: triggers.length,\n    triggerTypes: triggers.map(t => telemetryManager['classifyTrigger']?.(t) || 'general')\n  }, userId);\n};\n\n/**\n * Track suggestion usage events\n */\nexport const trackSuggestionUsage = async (\n  action: 'shown' | 'accepted' | 'rejected',\n  suggestionId?: string,\n  userId?: string\n): Promise<void> => {\n  return telemetryManager.trackSuggestionUsage(action, suggestionId, userId);\n};\n\n/**\n * Get suggestion statistics for charts\n */\nexport const getSuggestionStats = (days: number) => {\n  return telemetryManager.getSuggestionStats(days);\n};\n\n/**\n * Track cache hit/miss events\n */\nexport const trackCacheEvent = async (\n  hit: boolean,\n  cacheKey: string,\n  userId?: string\n): Promise<void> => {\n  return trackAIInteraction(hit ? AIEventType.CACHE_HIT : AIEventType.CACHE_MISS, {\n    cacheKey,\n    userId,\n    timestamp: new Date().toISOString(),\n  });\n};\n\n/**\n * Track LLM gating decisions\n */\nexport const trackGatingDecision = async (\n  decision: 'allow' | 'block',\n  reason: string,\n  metadata?: Record<string, any>\n): Promise<void> => {\n  return trackAIInteraction(AIEventType.LLM_GATING_DECISION, {\n    decision,\n    reason,\n    ...metadata,\n    timestamp: new Date().toISOString(),\n  });\n};\n\n\n\n/**\n * User data export (GDPR)\n */\nexport const exportAITelemetryData = async (userId: string): Promise<TelemetryEvent[]> => {\n  return telemetryManager.exportUserData(userId);\n};\n\n/**\n * User data delete (GDPR)\n */\nexport const deleteAITelemetryData = async (userId: string): Promise<void> => {\n  return telemetryManager.deleteUserData(userId);\n};\n\n/**\n * Consent g√ºncelle\n */\nexport const updateTelemetryConsent = async (level: ConsentLevel): Promise<void> => {\n  return telemetryManager.updateConsentLevel(level);\n};\n\n/**\n * Cleanup function\n */\nexport const cleanupTelemetry = async (): Promise<void> => {\n  return telemetryManager.cleanup();\n};\n\n// Types already exported via 'export' declarations above"],"mappings":"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","ignoreList":[]}