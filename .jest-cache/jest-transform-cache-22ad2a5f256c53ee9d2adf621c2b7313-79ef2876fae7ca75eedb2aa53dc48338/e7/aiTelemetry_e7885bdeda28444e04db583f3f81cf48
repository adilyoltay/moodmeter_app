6cd13350ba1bad4141863a19d63c07b9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConsentLevel = exports.AIEventType = void 0;
exports.addTelemetryDebugListener = addTelemetryDebugListener;
exports.getSuggestionStats = exports.exportAITelemetryData = exports.deleteAITelemetryData = exports.cleanupTelemetry = void 0;
exports.removeTelemetryDebugListener = removeTelemetryDebugListener;
exports.updateTelemetryConsent = exports.trackSuggestionUsage = exports.trackGatingDecision = exports.trackCrisisDetection = exports.trackCacheEvent = exports.trackAIPerformance = exports.trackAIInteraction = exports.trackAIFeedback = exports.trackAIError = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _reactNative = require("react-native");
var _featureFlags = require("../../../constants/featureFlags");
var _types = require("../types");
var AIEventType = exports.AIEventType = function (AIEventType) {
  AIEventType["SYSTEM_INITIALIZED"] = "system_initialized";
  AIEventType["SYSTEM_STARTED"] = "system_started";
  AIEventType["SYSTEM_STOPPED"] = "system_stopped";
  AIEventType["SYSTEM_STATUS"] = "system_status";
  AIEventType["EMERGENCY_SHUTDOWN"] = "emergency_shutdown";
  AIEventType["FEATURE_ENABLED"] = "feature_enabled";
  AIEventType["FEATURE_DISABLED"] = "feature_disabled";
  AIEventType["CHAT_SESSION_STARTED"] = "chat_session_started";
  AIEventType["CHAT_MESSAGE_SENT"] = "chat_message_sent";
  AIEventType["CHAT_RESPONSE_RECEIVED"] = "chat_response_received";
  AIEventType["CHAT_SESSION_ENDED"] = "chat_session_ended";
  AIEventType["CHAT_ERROR"] = "chat_error";
  AIEventType["INSIGHT_GENERATED"] = "insight_generated";
  AIEventType["INSIGHT_VIEWED"] = "insight_viewed";
  AIEventType["INSIGHT_SHARED"] = "insight_shared";
  AIEventType["SLOW_RESPONSE"] = "slow_response";
  AIEventType["API_ERROR"] = "api_error";
  AIEventType["EXTERNAL_API_ERROR"] = "external_api_error";
  AIEventType["SYSTEM_ERROR"] = "system_error";
  AIEventType["FALLBACK_TRIGGERED"] = "fallback_triggered";
  AIEventType["USER_FEEDBACK_POSITIVE"] = "user_feedback_positive";
  AIEventType["USER_FEEDBACK_NEGATIVE"] = "user_feedback_negative";
  AIEventType["FEATURE_ABANDONED"] = "feature_abandoned";
  AIEventType["SUGGESTION_SHOWN"] = "suggestion_shown";
  AIEventType["SUGGESTION_ACCEPTED"] = "suggestion_accepted";
  AIEventType["SUGGESTION_REJECTED"] = "suggestion_rejected";
  AIEventType["CONTEXT_INTELLIGENCE_INITIALIZED"] = "context_intelligence_initialized";
  AIEventType["CONTEXT_ANALYSIS_COMPLETED"] = "context_analysis_completed";
  AIEventType["CONTEXT_INTELLIGENCE_SHUTDOWN"] = "context_intelligence_shutdown";
  AIEventType["ADAPTIVE_INTERVENTIONS_INITIALIZED"] = "adaptive_interventions_initialized";
  AIEventType["INTERVENTION_TRIGGERED"] = "intervention_triggered";
  AIEventType["INTERVENTION_DELIVERED"] = "intervention_delivered";
  AIEventType["INTERVENTION_FEEDBACK"] = "intervention_feedback";
  AIEventType["ADAPTIVE_INTERVENTIONS_SHUTDOWN"] = "adaptive_interventions_shutdown";
  AIEventType["JITAI_INITIALIZED"] = "jitai_initialized";
  AIEventType["TIMING_PREDICTION_GENERATED"] = "timing_prediction_generated";
  AIEventType["INTERVENTION_PERSONALIZED"] = "intervention_personalized";
  AIEventType["AB_TEST_VARIATION_APPLIED"] = "ab_test_variation_applied";
  AIEventType["AB_TEST_STARTED"] = "ab_test_started";
  AIEventType["AB_TEST_STOPPED"] = "ab_test_stopped";
  AIEventType["ONBOARDING_ENGINE_INITIALIZED"] = "onboarding_engine_initialized";
  AIEventType["ONBOARDING_SESSION_CREATED"] = "onboarding_session_created";
  AIEventType["ONBOARDING_STEP_COMPLETED"] = "onboarding_step_completed";
  AIEventType["ONBOARDING_STEP_UPDATED"] = "onboarding_step_updated";
  AIEventType["ONBOARDING_SESSION_COMPLETED"] = "onboarding_session_completed";
  AIEventType["ONBOARDING_ENGINE_SHUTDOWN"] = "onboarding_engine_shutdown";
  AIEventType["YBOCS_ANALYSIS_COMPLETED"] = "ybocs_analysis_completed";
  AIEventType["TREATMENT_PLAN_GENERATED"] = "treatment_plan_generated";
  AIEventType["JITAI_SHUTDOWN"] = "jitai_shutdown";
  AIEventType["CBT_ENGINE_INITIALIZED"] = "cbt_engine_initialized";
  AIEventType["CBT_ANALYSIS_COMPLETED"] = "cbt_analysis_completed";
  AIEventType["CBT_TECHNIQUE_APPLIED"] = "cbt_technique_applied";
  AIEventType["CBT_ENGINE_SHUTDOWN"] = "cbt_engine_shutdown";
  AIEventType["INSIGHTS_COORDINATOR_INITIALIZED"] = "insights_coordinator_initialized";
  AIEventType["INSIGHT_WORKFLOW_COMPLETED"] = "insight_workflow_completed";
  AIEventType["INSIGHTS_COORDINATOR_SHUTDOWN"] = "insights_coordinator_shutdown";
  AIEventType["INSIGHTS_REQUESTED"] = "insights_requested";
  AIEventType["INSIGHTS_DELIVERED"] = "insights_delivered";
  AIEventType["YBOCS_ANALYSIS_STARTED"] = "ybocs_analysis_started";
  AIEventType["YBOCS_ENHANCEMENT_APPLIED"] = "ybocs_enhancement_applied";
  AIEventType["ONBOARDING_SESSION_STARTED"] = "onboarding_session_started";
  AIEventType["USER_PROFILE_GENERATED"] = "user_profile_generated";
  AIEventType["USER_PROFILE_ENHANCED"] = "user_profile_enhanced";
  AIEventType["USER_PROFILE_UPDATED"] = "user_profile_updated";
  AIEventType["TREATMENT_PLAN_ADAPTED"] = "treatment_plan_adapted";
  AIEventType["TREATMENT_PLAN_OPTIMIZED"] = "treatment_plan_optimized";
  AIEventType["RISK_ASSESSMENT_COMPLETED"] = "risk_assessment_completed";
  AIEventType["RISK_ESCALATION_PREDICTED"] = "risk_escalation_predicted";
  AIEventType["SAFETY_PLAN_CREATED"] = "safety_plan_created";
  AIEventType["PREVENTIVE_INTERVENTION_TRIGGERED"] = "preventive_intervention_triggered";
  AIEventType["AI_RESPONSE_GENERATED"] = "ai_response_generated";
  AIEventType["AI_PROVIDER_HEALTH_CHECK"] = "ai_provider_health_check";
  AIEventType["AI_PROVIDER_FAILED"] = "ai_provider_failed";
  AIEventType["AI_CACHE_HIT"] = "ai_cache_hit";
  AIEventType["AI_CACHE_MISS"] = "ai_cache_miss";
  AIEventType["AI_RATE_LIMIT_HIT"] = "ai_rate_limit_hit";
  AIEventType["EXTERNAL_AI_INITIALIZED"] = "external_ai_initialized";
  AIEventType["EXTERNAL_AI_SHUTDOWN"] = "external_ai_shutdown";
  AIEventType["AI_PII_DETECTED"] = "ai_pii_detected";
  AIEventType["AI_CONTENT_FILTERED"] = "ai_content_filtered";
  AIEventType["AI_PROMPT_LOGGED"] = "ai_prompt_logged";
  AIEventType["PATTERN_RECOGNITION_INITIALIZED"] = "pattern_recognition_initialized";
  AIEventType["PATTERN_ANALYSIS_COMPLETED"] = "pattern_analysis_completed";
  AIEventType["PATTERN_VALIDATED"] = "pattern_validated";
  AIEventType["PATTERN_RECOGNITION_SHUTDOWN"] = "pattern_recognition_shutdown";
  AIEventType["INSIGHTS_ENGINE_INITIALIZED"] = "insights_engine_initialized";
  AIEventType["INSIGHTS_GENERATED"] = "insights_generated";
  AIEventType["INSIGHTS_ENGINE_SHUTDOWN"] = "insights_engine_shutdown";
  AIEventType["INSIGHTS_RATE_LIMITED"] = "insights_rate_limited";
  AIEventType["INSIGHTS_CACHE_HIT"] = "insights_cache_hit";
  AIEventType["INSIGHTS_CACHE_MISS"] = "insights_cache_miss";
  AIEventType["INSIGHTS_MISSING_REQUIRED_FIELDS"] = "insights_missing_required_fields";
  AIEventType["NO_INSIGHTS_GENERATED"] = "no_insights_generated";
  AIEventType["STORAGE_RETRY_ATTEMPT"] = "storage_retry_attempt";
  AIEventType["STORAGE_RETRY_SUCCESS"] = "storage_retry_success";
  AIEventType["STORAGE_RETRY_FAILED"] = "storage_retry_failed";
  AIEventType["SMART_NOTIFICATIONS_INITIALIZED"] = "smart_notifications_initialized";
  AIEventType["NOTIFICATION_SCHEDULED"] = "notification_scheduled";
  AIEventType["NOTIFICATION_PREFERENCES_UPDATED"] = "notification_preferences_updated";
  AIEventType["NOTIFICATION_FEEDBACK"] = "notification_feedback";
  AIEventType["SMART_NOTIFICATIONS_SHUTDOWN"] = "smart_notifications_shutdown";
  AIEventType["THERAPEUTIC_PROMPTS_INITIALIZED"] = "therapeutic_prompts_initialized";
  AIEventType["INSIGHTS_DATA_INSUFFICIENT"] = "insights_data_insufficient";
  AIEventType["CHECKIN_STARTED"] = "checkin_started";
  AIEventType["CHECKIN_COMPLETED"] = "checkin_completed";
  AIEventType["STT_FAILED"] = "stt_failed";
  AIEventType["ROUTE_SUGGESTED"] = "route_suggested";
  AIEventType["JITAI_TRIGGER_FIRED"] = "jitai_trigger_fired";
  AIEventType["GUARDRAIL_TRIGGERED"] = "guardrail_triggered";
  AIEventType["COMPULSION_PROMPTED"] = "compulsion_prompted";
  AIEventType["COMPULSION_LOGGED"] = "compulsion_logged";
  AIEventType["COMPULSION_DISMISSED"] = "compulsion_dismissed";
  AIEventType["COMPULSION_SNOOZED"] = "compulsion_snoozed";
  AIEventType["RELAPSE_WINDOW_DETECTED"] = "relapse_window_detected";
  AIEventType["PROACTIVE_PROMPT_CLICKED"] = "proactive_prompt_clicked";
  AIEventType["PDF_GENERATED"] = "pdf_generated";
  AIEventType["PDF_SHARED"] = "pdf_shared";
  AIEventType["PDF_CANCELLED"] = "pdf_cancelled";
  AIEventType["PDF_ERROR"] = "pdf_error";
  AIEventType["BREATH_STARTED"] = "breath_started";
  AIEventType["BREATH_PAUSED"] = "breath_paused";
  AIEventType["BREATH_RESUMED"] = "breath_resumed";
  AIEventType["BREATH_COMPLETED"] = "breath_completed";
  AIEventType["REFRAME_STARTED"] = "reframe_started";
  AIEventType["REFRAME_COMPLETED"] = "reframe_completed";
  AIEventType["DISTORTION_SELECTED"] = "distortion_selected";
  AIEventType["INSIGHTS_FEEDBACK"] = "insights_feedback";
  AIEventType["INTERVENTION_RECOMMENDED"] = "intervention_recommended";
  AIEventType["YBOCS_QUESTION_VIEWED"] = "ybocs_question_viewed";
  AIEventType["BATCH_JOB_STARTED"] = "batch_job_started";
  AIEventType["BATCH_JOB_COMPLETED"] = "batch_job_completed";
  AIEventType["BATCH_JOB_FAILED"] = "batch_job_failed";
  AIEventType["CACHE_HIT"] = "cache_hit";
  AIEventType["CACHE_MISS"] = "cache_miss";
  AIEventType["LLM_GATING_DECISION"] = "llm_gating_decision";
  AIEventType["TOKEN_BUDGET_EXCEEDED"] = "token_budget_exceeded";
  AIEventType["TOKEN_USAGE_RECORDED"] = "token_usage_recorded";
  AIEventType["SIMILARITY_DEDUP_HIT"] = "similarity_dedup_hit";
  AIEventType["PROGRESSIVE_UI_UPDATE"] = "progressive_ui_update";
  AIEventType["UNIFIED_PIPELINE_STARTED"] = "unified_pipeline_started";
  AIEventType["UNIFIED_PIPELINE_COMPLETED"] = "unified_pipeline_completed";
  AIEventType["UNIFIED_PIPELINE_ERROR"] = "unified_pipeline_error";
  AIEventType["UNIFIED_PIPELINE_CACHE_HIT"] = "unified_pipeline_cache_hit";
  AIEventType["UNIFIED_PIPELINE_DISABLED"] = "unified_pipeline_disabled";
  AIEventType["CACHE_INVALIDATION"] = "cache_invalidation";
  AIEventType["VOICE_ANALYSIS_STARTED"] = "voice_analysis_started";
  AIEventType["VOICE_ANALYSIS_COMPLETED"] = "voice_analysis_completed";
  AIEventType["VOICE_ANALYSIS_FAILED"] = "voice_analysis_failed";
  AIEventType["PATTERN_RECOGNITION_STARTED"] = "pattern_recognition_started";
  AIEventType["PATTERN_RECOGNITION_COMPLETED"] = "pattern_recognition_completed";
  AIEventType["PATTERN_RECOGNITION_FAILED"] = "pattern_recognition_failed";
  AIEventType["BREATHWORK_SUGGESTION_GENERATED"] = "breathwork_suggestion_generated";
  AIEventType["BREATHWORK_SUGGESTION_SNOOZED"] = "breathwork_suggestion_snoozed";
  AIEventType["BREATHWORK_SUGGESTION_DISMISSED"] = "breathwork_suggestion_dismissed";
  AIEventType["BREATHWORK_SUGGESTION_DELAYED"] = "breathwork_suggestion_delayed";
  AIEventType["BREATHWORK_SUGGESTION_ACCEPTED"] = "breathwork_suggestion_accepted";
  AIEventType["BREATHWORK_SESSION_COMPLETED"] = "breathwork_session_completed";
  AIEventType["CHECKIN_ROUTING_DECISION"] = "checkin_routing_decision";
  AIEventType["CHECKIN_USER_CORRECTION"] = "checkin_user_correction";
  AIEventType["FIELD_COMPLETENESS"] = "field_completeness";
  AIEventType["MULTI_RECORD_TRANSACTION"] = "multi_record_transaction";
  AIEventType["GAMIFICATION_DYNAMIC_POINTS_AWARDED"] = "gamification_dynamic_points_awarded";
  AIEventType["GAMIFICATION_MISSIONS_GENERATED"] = "gamification_missions_generated";
  AIEventType["GAMIFICATION_MISSION_COMPLETED"] = "gamification_mission_completed";
  AIEventType["GAMIFICATION_LEVEL_UP"] = "gamification_level_up";
  AIEventType["GAMIFICATION_STREAK_MILESTONE"] = "gamification_streak_milestone";
  AIEventType["GAMIFICATION_ADAPTATION_UPDATED"] = "gamification_adaptation_updated";
  AIEventType["SMART_ROUTE_GENERATED"] = "smart_route_generated";
  AIEventType["SMART_NAVIGATION_ATTEMPTED"] = "smart_navigation_attempted";
  AIEventType["SMART_NAVIGATION_COMPLETED"] = "smart_navigation_completed";
  AIEventType["SMART_NAVIGATION_FAILED"] = "smart_navigation_failed";
  AIEventType["ROUTE_SUGGESTION_PROVIDED"] = "route_suggestion_provided";
  AIEventType["PREFILL_DATA_EXTRACTED"] = "prefill_data_extracted";
  AIEventType["SERVICE_ACCESSED"] = "service_accessed";
  AIEventType["SERVICE_INITIALIZED"] = "service_initialized";
  AIEventType["SESSION_STARTED"] = "session_started";
  AIEventType["SESSION_CREATED"] = "session_created";
  AIEventType["ARTWORK_SAVED"] = "artwork_saved";
  AIEventType["ART_THERAPY_STARTED"] = "art_therapy_started";
  AIEventType["ART_THERAPY_COMPLETED"] = "art_therapy_completed";
  AIEventType["AI_ANALYSIS_COMPLETED"] = "cbt_analysis_completed";
  AIEventType["PROFILE_CREATED"] = "user_profile_generated";
  AIEventType["YBOCS_COMPLETED"] = "ybocs_analysis_completed";
  AIEventType["INTERVENTION_COMPLETED"] = "intervention_delivered";
  AIEventType["ADAPTIVE_SUGGESTION_SHOWN"] = "adaptive_suggestion_shown";
  AIEventType["ADAPTIVE_SUGGESTION_CLICKED"] = "adaptive_suggestion_clicked";
  AIEventType["ADAPTIVE_SUGGESTION_DISMISSED"] = "adaptive_suggestion_dismissed";
  AIEventType["MOOD_ANALYTICS_COMPUTED"] = "mood_analytics_computed";
  return AIEventType;
}({});
var VALID_EVENT_TYPES = new Set(Object.values(AIEventType));
var ConsentLevel = exports.ConsentLevel = function (ConsentLevel) {
  ConsentLevel["NONE"] = "none";
  ConsentLevel["BASIC"] = "basic";
  ConsentLevel["ANALYTICS"] = "analytics";
  ConsentLevel["FULL"] = "full";
  return ConsentLevel;
}({});
var DEFAULT_CONFIG = {
  enabled: true,
  consentLevel: ConsentLevel.BASIC,
  bufferSize: 100,
  flushIntervalMs: 30000,
  maxRetentionDays: 30,
  anonymizationEnabled: true,
  offlineBuffering: true
};
var AITelemetryManager = function () {
  function AITelemetryManager() {
    (0, _classCallCheck2.default)(this, AITelemetryManager);
    this.config = DEFAULT_CONFIG;
    this.eventBuffer = [];
    this.isInitialized = false;
    this.suggestionStats = {
      shown: [],
      accepted: [],
      rejected: []
    };
    this.sessionId = this.generateSessionId();
    this.initialize();
  }
  return (0, _createClass2.default)(AITelemetryManager, [{
    key: "initialize",
    value: (function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield this.loadUserConsent();
          if (this.config.offlineBuffering) {
            yield this.loadOfflineBuffer();
          }
          this.startPeriodicFlush();
          this.isInitialized = true;
          console.log('📊 AI Telemetry initialized');
        } catch (error) {
          console.error('❌ AI Telemetry initialization failed:', error);
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }())
  }, {
    key: "trackAIInteraction",
    value: (function () {
      var _trackAIInteraction = (0, _asyncToGenerator2.default)(function* (eventType) {
        var _this = this;
        var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var userId = arguments.length > 2 ? arguments[2] : undefined;
        if (!eventType || typeof eventType !== 'string' || VALID_EVENT_TYPES.size && !VALID_EVENT_TYPES.has(eventType)) {
          if (__DEV__) console.warn('⚠️ Telemetry eventType missing/invalid, dropping event:', eventType);
          return;
        }
        if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_TELEMETRY')) {
          return;
        }
        if (!this.config.enabled || this.config.consentLevel === ConsentLevel.NONE) {
          return;
        }
        try {
          var _event = {
            eventType: eventType,
            timestamp: new Date().toISOString(),
            sessionId: this.sessionId,
            userId: userId && typeof userId === 'string' && userId.length > 0 ? this.hashUserId(userId) : undefined,
            metadata: this.sanitizeMetadata(metadata),
            anonymized: this.config.anonymizationEnabled,
            retentionDays: this.config.maxRetentionDays,
            consentLevel: this.config.consentLevel
          };
          this.addToBuffer(_event);
          try {
            _reactNative.InteractionManager.runAfterInteractions((0, _asyncToGenerator2.default)(function* () {
              try {
                if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_TELEMETRY')) return;
                var _yield$import = yield import("../../../services/supabase"),
                  supabaseService = _yield$import.default;
                yield supabaseService.supabaseClient.from('ai_telemetry').insert({
                  user_id: userId || null,
                  event_type: eventType,
                  metadata: _this.sanitizeMetadata(metadata)
                });
              } catch (persistErr) {
                if (__DEV__) console.warn('Telemetry persist failed:', persistErr);
              }
            }));
          } catch (_unused) {}
          try {
            var _yield$import2 = yield import("../../../services/telemetry/performanceMetricsService"),
              performanceMetricsService = _yield$import2.default;
            if (eventType === AIEventType.AI_RESPONSE_GENERATED) {
              var _yield$performanceMet;
              var latency = Number((metadata == null ? void 0 : metadata.latency) || 0);
              yield performanceMetricsService.recordToday({
                ai: {
                  requests: (((_yield$performanceMet = (yield performanceMetricsService.getLastNDays(1))[0]) == null || (_yield$performanceMet = _yield$performanceMet.ai) == null ? void 0 : _yield$performanceMet.requests) || 0) + 1
                }
              });
              if (latency > 0) {
                var _last$, _last$2;
                var last = yield performanceMetricsService.getLastNDays(1);
                var prev = ((_last$ = last[0]) == null || (_last$ = _last$.ai) == null ? void 0 : _last$.avgLatencyMs) || 0;
                var prevReq = ((_last$2 = last[0]) == null || (_last$2 = _last$2.ai) == null ? void 0 : _last$2.requests) || 0;
                var newAvg = prevReq > 0 ? Math.round((prev * prevReq + latency) / (prevReq + 1)) : latency;
                yield performanceMetricsService.recordToday({
                  ai: {
                    avgLatencyMs: newAvg
                  }
                });
              }
              if ((metadata == null ? void 0 : metadata.cached) === true) {
                var _last$3;
                var _last = yield performanceMetricsService.getLastNDays(1);
                var prevHits = ((_last$3 = _last[0]) == null || (_last$3 = _last$3.ai) == null ? void 0 : _last$3.cacheHits) || 0;
                yield performanceMetricsService.recordToday({
                  ai: {
                    cacheHits: prevHits + 1
                  }
                });
              }
            } else if (eventType === AIEventType.API_ERROR || eventType === AIEventType.AI_PROVIDER_FAILED) {
              var _last2$;
              var _last2 = yield performanceMetricsService.getLastNDays(1);
              var prevFailures = ((_last2$ = _last2[0]) == null || (_last2$ = _last2$.ai) == null ? void 0 : _last2$.failures) || 0;
              yield performanceMetricsService.recordToday({
                ai: {
                  failures: prevFailures + 1
                }
              });
            }
          } catch (_unused2) {}
          if (__DEV__) console.log(`📊 AI Telemetry: ${eventType}`, JSON.stringify(metadata));
          notifyTelemetryDebugListeners(_event);
        } catch (error) {
          console.error('❌ Error tracking AI interaction:', error);
        }
      });
      function trackAIInteraction(_x) {
        return _trackAIInteraction.apply(this, arguments);
      }
      return trackAIInteraction;
    }())
  }, {
    key: "trackAIError",
    value: (function () {
      var _trackAIError = (0, _asyncToGenerator2.default)(function* (error, context) {
        yield this.trackAIInteraction(AIEventType.API_ERROR, {
          errorCode: error.code,
          errorMessage: error.message,
          severity: error.severity,
          recoverable: error.recoverable,
          context: this.sanitizeMetadata(context || {})
        });
      });
      function trackAIError(_x2, _x3) {
        return _trackAIError.apply(this, arguments);
      }
      return trackAIError;
    }())
  }, {
    key: "trackPerformance",
    value: (function () {
      var _trackPerformance = (0, _asyncToGenerator2.default)(function* (feature, metrics, userId) {
        if ((metrics.responseTime || 0) > 5000) {
          yield this.trackAIInteraction(AIEventType.SLOW_RESPONSE, {
            feature: feature,
            responseTime: metrics.responseTime,
            modelUsed: metrics.modelUsed
          }, userId);
        }
        yield this.trackAIInteraction(AIEventType.CHAT_RESPONSE_RECEIVED, Object.assign({
          feature: feature
        }, metrics), userId);
      });
      function trackPerformance(_x4, _x5, _x6) {
        return _trackPerformance.apply(this, arguments);
      }
      return trackPerformance;
    }())
  }, {
    key: "trackUserFeedback",
    value: (function () {
      var _trackUserFeedback = (0, _asyncToGenerator2.default)(function* (feedback, feature, userId) {
        var eventType = feedback.overallSatisfaction >= 4 ? AIEventType.USER_FEEDBACK_POSITIVE : AIEventType.USER_FEEDBACK_NEGATIVE;
        yield this.trackAIInteraction(eventType, Object.assign({
          feature: feature
        }, feedback, {
          comment: feedback.comment ? this.sanitizeComment(feedback.comment) : undefined
        }), userId);
      });
      function trackUserFeedback(_x7, _x8, _x9) {
        return _trackUserFeedback.apply(this, arguments);
      }
      return trackUserFeedback;
    }())
  }, {
    key: "trackSuggestionUsage",
    value: (function () {
      var _trackSuggestionUsage = (0, _asyncToGenerator2.default)(function* (action, suggestionId, userId) {
        var eventMap = {
          shown: AIEventType.SUGGESTION_SHOWN,
          accepted: AIEventType.SUGGESTION_ACCEPTED,
          rejected: AIEventType.SUGGESTION_REJECTED
        };
        this.suggestionStats[action].push(new Date());
        yield this.trackAIInteraction(eventMap[action], {
          suggestionId: suggestionId
        }, userId);
      });
      function trackSuggestionUsage(_x0, _x1, _x10) {
        return _trackSuggestionUsage.apply(this, arguments);
      }
      return trackSuggestionUsage;
    }())
  }, {
    key: "getSuggestionStats",
    value: function getSuggestionStats(days) {
      var cutoff = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
      var shown = this.suggestionStats.shown.filter(function (d) {
        return d >= cutoff;
      }).length;
      var accepted = this.suggestionStats.accepted.filter(function (d) {
        return d >= cutoff;
      }).length;
      var usage = shown;
      var acceptanceRate = shown ? accepted / shown : 0;
      return {
        usage: usage,
        acceptanceRate: acceptanceRate
      };
    }
  }, {
    key: "exportUserData",
    value: (function () {
      var _exportUserData = (0, _asyncToGenerator2.default)(function* (userId) {
        var hashedUserId = this.hashUserId(userId);
        var userEvents = [];
        var bufferEvents = this.eventBuffer.filter(function (event) {
          return event.userId === hashedUserId;
        });
        userEvents.push.apply(userEvents, (0, _toConsumableArray2.default)(bufferEvents));
        try {
          var offlineEvents = yield this.loadUserEventsFromStorage(hashedUserId);
          userEvents.push.apply(userEvents, (0, _toConsumableArray2.default)(offlineEvents));
        } catch (error) {
          console.error('Error loading user events from storage:', error);
        }
        return userEvents;
      });
      function exportUserData(_x11) {
        return _exportUserData.apply(this, arguments);
      }
      return exportUserData;
    }())
  }, {
    key: "deleteUserData",
    value: (function () {
      var _deleteUserData = (0, _asyncToGenerator2.default)(function* (userId) {
        var hashedUserId = this.hashUserId(userId);
        this.eventBuffer = this.eventBuffer.filter(function (event) {
          return event.userId !== hashedUserId;
        });
        try {
          yield this.deleteUserEventsFromStorage(hashedUserId);
          console.log(`🗑️ Deleted telemetry data for user: ${hashedUserId.substring(0, 8)}...`);
        } catch (error) {
          console.error('Error deleting user telemetry data:', error);
        }
      });
      function deleteUserData(_x12) {
        return _deleteUserData.apply(this, arguments);
      }
      return deleteUserData;
    }())
  }, {
    key: "updateConsentLevel",
    value: (function () {
      var _updateConsentLevel = (0, _asyncToGenerator2.default)(function* (level) {
        this.config.consentLevel = level;
        yield _asyncStorage.default.setItem('ai_telemetry_consent', level);
        if (level === ConsentLevel.NONE) {
          this.eventBuffer = [];
          yield this.clearStoredEvents();
        }
        console.log(`📊 AI Telemetry consent updated to: ${level}`);
      });
      function updateConsentLevel(_x13) {
        return _updateConsentLevel.apply(this, arguments);
      }
      return updateConsentLevel;
    }())
  }, {
    key: "hashUserId",
    value: function hashUserId(userId) {
      var hash = 0;
      for (var i = 0; i < userId.length; i++) {
        var char = userId.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return `user_${Math.abs(hash).toString(16)}`;
    }
  }, {
    key: "sanitizeMetadata",
    value: function sanitizeMetadata(metadata) {
      var sanitized = Object.assign({}, metadata);
      var piiFields = ['email', 'phone', 'name', 'address', 'content', 'message'];
      for (var field of piiFields) {
        if (sanitized[field]) {
          delete sanitized[field];
        }
      }
      for (var key in sanitized) {
        if (typeof sanitized[key] === 'string' && sanitized[key].length > 50) {
          sanitized[key] = `[string_length_${sanitized[key].length}]`;
        }
      }
      return sanitized;
    }
  }, {
    key: "sanitizeComment",
    value: function sanitizeComment(comment) {
      if (comment.length > 100) {
        return `[comment_length_${comment.length}]`;
      }
      return comment.replace(/\b[\w\.-]+@[\w\.-]+\.\w+\b/g, '[email]').replace(/\b\d{10,}\b/g, '[phone]').replace(/\b[A-Z][a-z]+ [A-Z][a-z]+\b/g, '[name]');
    }
  }, {
    key: "classifyTrigger",
    value: function classifyTrigger(trigger) {
      if (trigger.includes('suicide') || trigger.includes('death')) {
        return 'suicide_ideation';
      } else if (trigger.includes('harm') || trigger.includes('hurt')) {
        return 'self_harm';
      } else if (trigger.includes('panic') || trigger.includes('anxiety')) {
        return 'anxiety_spike';
      }
      return 'general_distress';
    }
  }, {
    key: "generateSessionId",
    value: function generateSessionId() {
      return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
  }, {
    key: "addToBuffer",
    value: function addToBuffer(event) {
      this.eventBuffer.push(event);
      if (this.eventBuffer.length > this.config.bufferSize) {
        this.flushBuffer();
      }
    }
  }, {
    key: "flushBuffer",
    value: (function () {
      var _flushBuffer = (0, _asyncToGenerator2.default)(function* () {
        if (this.eventBuffer.length === 0) return;
        try {
          if (this.config.offlineBuffering) {
            yield this.saveEventsToStorage(this.eventBuffer);
          }
          try {
            if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_TELEMETRY')) {
              var _yield$import3 = yield import("../../../services/supabase"),
                supabaseService = _yield$import3.default;
              var payload = this.eventBuffer.map(function (evt) {
                return {
                  event_type: evt.eventType,
                  metadata: evt.metadata,
                  session_id: evt.sessionId,
                  user_id: evt.userId || null,
                  consent_level: evt.consentLevel,
                  anonymized: evt.anonymized,
                  occurred_at: evt.timestamp
                };
              });
              yield supabaseService.supabaseClient.from('ai_telemetry').insert(payload, {
                defaultToNull: true
              });
            }
          } catch (persistErr) {
            if (__DEV__) console.warn('📊 Telemetry bulk persist failed (will remain in offline storage):', persistErr);
          }
          if (__DEV__) console.log(`📊 Flushed ${this.eventBuffer.length} telemetry events`);
          this.eventBuffer = [];
        } catch (error) {
          console.error('❌ Error flushing telemetry buffer:', error);
        }
      });
      function flushBuffer() {
        return _flushBuffer.apply(this, arguments);
      }
      return flushBuffer;
    }())
  }, {
    key: "startPeriodicFlush",
    value: function startPeriodicFlush() {
      var _this2 = this;
      this.flushTimer = setInterval(function () {
        _this2.flushBuffer();
      }, this.config.flushIntervalMs);
    }
  }, {
    key: "loadUserConsent",
    value: (function () {
      var _loadUserConsent = (0, _asyncToGenerator2.default)(function* () {
        try {
          var consent = yield _asyncStorage.default.getItem('ai_telemetry_consent');
          if (consent && Object.values(ConsentLevel).includes(consent)) {
            this.config.consentLevel = consent;
          }
        } catch (error) {
          console.error('Error loading telemetry consent:', error);
        }
      });
      function loadUserConsent() {
        return _loadUserConsent.apply(this, arguments);
      }
      return loadUserConsent;
    }())
  }, {
    key: "loadOfflineBuffer",
    value: (function () {
      var _loadOfflineBuffer = (0, _asyncToGenerator2.default)(function* () {
        var _this3 = this;
        _reactNative.InteractionManager.runAfterInteractions((0, _asyncToGenerator2.default)(function* () {
          try {
            var stored = yield _asyncStorage.default.getItem('ai_telemetry_offline');
            if (stored) {
              var _this3$eventBuffer;
              var events = JSON.parse(stored);
              (_this3$eventBuffer = _this3.eventBuffer).push.apply(_this3$eventBuffer, (0, _toConsumableArray2.default)(events));
              _this3.eventBuffer = _this3.eventBuffer.slice(-_this3.config.bufferSize);
              yield _asyncStorage.default.removeItem('ai_telemetry_offline');
              console.log(`📊 Loaded ${events.length} offline telemetry events`);
            }
          } catch (error) {
            console.error('❌ Failed to load offline telemetry buffer:', error);
            _this3.trackTelemetryError('loadOfflineBuffer', error);
          }
        }));
      });
      function loadOfflineBuffer() {
        return _loadOfflineBuffer.apply(this, arguments);
      }
      return loadOfflineBuffer;
    }())
  }, {
    key: "saveEventsToStorage",
    value: (function () {
      var _saveEventsToStorage = (0, _asyncToGenerator2.default)(function* (events) {
        var _this4 = this;
        _reactNative.InteractionManager.runAfterInteractions((0, _asyncToGenerator2.default)(function* () {
          try {
            var cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - _this4.config.maxRetentionDays);
            var filteredEvents = events.filter(function (event) {
              return new Date(event.timestamp) > cutoffDate;
            });
            if (filteredEvents.length > 0) {
              yield _asyncStorage.default.setItem('ai_telemetry_offline', JSON.stringify(filteredEvents));
            }
          } catch (error) {
            console.error('❌ Error saving events to storage:', error);
            _this4.trackTelemetryError('saveEventsToStorage', error);
          }
        }));
      });
      function saveEventsToStorage(_x14) {
        return _saveEventsToStorage.apply(this, arguments);
      }
      return saveEventsToStorage;
    }())
  }, {
    key: "loadUserEventsFromStorage",
    value: (function () {
      var _loadUserEventsFromStorage = (0, _asyncToGenerator2.default)(function* (hashedUserId) {
        try {
          var stored = yield _asyncStorage.default.getItem('ai_telemetry_offline');
          if (stored) {
            var events = JSON.parse(stored);
            return events.filter(function (event) {
              return event.userId === hashedUserId;
            });
          }
        } catch (error) {
          console.error('Error loading user events from storage:', error);
        }
        return [];
      });
      function loadUserEventsFromStorage(_x15) {
        return _loadUserEventsFromStorage.apply(this, arguments);
      }
      return loadUserEventsFromStorage;
    }())
  }, {
    key: "deleteUserEventsFromStorage",
    value: (function () {
      var _deleteUserEventsFromStorage = (0, _asyncToGenerator2.default)(function* (hashedUserId) {
        try {
          var stored = yield _asyncStorage.default.getItem('ai_telemetry_offline');
          if (stored) {
            var events = JSON.parse(stored);
            var filteredEvents = events.filter(function (event) {
              return event.userId !== hashedUserId;
            });
            if (filteredEvents.length > 0) {
              yield _asyncStorage.default.setItem('ai_telemetry_offline', JSON.stringify(filteredEvents));
            } else {
              yield _asyncStorage.default.removeItem('ai_telemetry_offline');
            }
          }
        } catch (error) {
          console.error('Error deleting user events from storage:', error);
        }
      });
      function deleteUserEventsFromStorage(_x16) {
        return _deleteUserEventsFromStorage.apply(this, arguments);
      }
      return deleteUserEventsFromStorage;
    }())
  }, {
    key: "clearStoredEvents",
    value: (function () {
      var _clearStoredEvents = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _asyncStorage.default.removeItem('ai_telemetry_offline');
        } catch (error) {
          console.error('Error clearing stored events:', error);
        }
      });
      function clearStoredEvents() {
        return _clearStoredEvents.apply(this, arguments);
      }
      return clearStoredEvents;
    }())
  }, {
    key: "trackTelemetryError",
    value: function trackTelemetryError(operation, error) {
      console.error(`📊 Telemetry Internal Error [${operation}]:`, error);
      if (!this.sessionId.includes('_error_count')) {
        this.sessionId += '_error_count_1';
      } else {
        var parts = this.sessionId.split('_error_count_');
        var count = parseInt(parts[1] || '0') + 1;
        this.sessionId = parts[0] + '_error_count_' + count;
      }
    }
  }, {
    key: "cleanup",
    value: (function () {
      var _cleanup = (0, _asyncToGenerator2.default)(function* () {
        if (this.flushTimer) {
          clearInterval(this.flushTimer);
        }
        yield this.flushBuffer();
      });
      function cleanup() {
        return _cleanup.apply(this, arguments);
      }
      return cleanup;
    }())
  }]);
}();
var __aiDebugListeners = [];
function addTelemetryDebugListener(listener) {
  if (!__DEV__) {
    console.warn('⚠️ Debug listeners only available in development mode');
    return;
  }
  if (typeof listener !== 'function') {
    console.warn('⚠️ Debug listener must be a function');
    return;
  }
  __aiDebugListeners.push(listener);
  console.log(`🔧 Added debug listener. Total listeners: ${__aiDebugListeners.length}`);
}
function removeTelemetryDebugListener(listener) {
  if (!__DEV__) return;
  var index = __aiDebugListeners.indexOf(listener);
  if (index > -1) {
    __aiDebugListeners.splice(index, 1);
    console.log(`🔧 Removed debug listener. Total listeners: ${__aiDebugListeners.length}`);
  }
}
function notifyTelemetryDebugListeners(event) {
  if (!__DEV__ || __aiDebugListeners.length === 0) return;
  setTimeout(function () {
    __aiDebugListeners.forEach(function (listener) {
      try {
        listener(event);
      } catch (error) {
        console.error('🚨 Debug listener error:', error);
      }
    });
  }, 0);
}
var telemetryManager = new AITelemetryManager();
var trackAIInteraction = exports.trackAIInteraction = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (eventType) {
    var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var userId = arguments.length > 2 ? arguments[2] : undefined;
    return telemetryManager.trackAIInteraction(eventType, metadata, userId);
  });
  return function trackAIInteraction(_x17) {
    return _ref4.apply(this, arguments);
  };
}();
var trackAIError = exports.trackAIError = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (error, context) {
    var fullError = 'timestamp' in error ? error : Object.assign({}, error, {
      timestamp: new Date(),
      recoverable: error.severity !== _types.ErrorSeverity.CRITICAL
    });
    return telemetryManager.trackAIError(fullError, context);
  });
  return function trackAIError(_x18, _x19) {
    return _ref5.apply(this, arguments);
  };
}();
var trackAIPerformance = exports.trackAIPerformance = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (feature, metrics, userId) {
    return telemetryManager.trackPerformance(feature, metrics, userId);
  });
  return function trackAIPerformance(_x20, _x21, _x22) {
    return _ref6.apply(this, arguments);
  };
}();
var trackAIFeedback = exports.trackAIFeedback = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (feedback, feature, userId) {
    return telemetryManager.trackUserFeedback(feedback, feature, userId);
  });
  return function trackAIFeedback(_x23, _x24, _x25) {
    return _ref7.apply(this, arguments);
  };
}();
var trackCrisisDetection = exports.trackCrisisDetection = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (riskLevel, triggers, userId) {
    return telemetryManager.trackAIInteraction(AIEventType.PREVENTIVE_INTERVENTION_TRIGGERED, {
      riskLevel: riskLevel,
      triggerCount: triggers.length,
      triggerTypes: triggers.map(function (t) {
        var _telemetryManager$cla;
        return ((_telemetryManager$cla = telemetryManager['classifyTrigger']) == null ? void 0 : _telemetryManager$cla.call(telemetryManager, t)) || 'general';
      })
    }, userId);
  });
  return function trackCrisisDetection(_x26, _x27, _x28) {
    return _ref8.apply(this, arguments);
  };
}();
var trackSuggestionUsage = exports.trackSuggestionUsage = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (action, suggestionId, userId) {
    return telemetryManager.trackSuggestionUsage(action, suggestionId, userId);
  });
  return function trackSuggestionUsage(_x29, _x30, _x31) {
    return _ref9.apply(this, arguments);
  };
}();
var getSuggestionStats = exports.getSuggestionStats = function getSuggestionStats(days) {
  return telemetryManager.getSuggestionStats(days);
};
var trackCacheEvent = exports.trackCacheEvent = function () {
  var _ref0 = (0, _asyncToGenerator2.default)(function* (hit, cacheKey, userId) {
    return trackAIInteraction(hit ? AIEventType.CACHE_HIT : AIEventType.CACHE_MISS, {
      cacheKey: cacheKey,
      userId: userId,
      timestamp: new Date().toISOString()
    });
  });
  return function trackCacheEvent(_x32, _x33, _x34) {
    return _ref0.apply(this, arguments);
  };
}();
var trackGatingDecision = exports.trackGatingDecision = function () {
  var _ref1 = (0, _asyncToGenerator2.default)(function* (decision, reason, metadata) {
    return trackAIInteraction(AIEventType.LLM_GATING_DECISION, Object.assign({
      decision: decision,
      reason: reason
    }, metadata, {
      timestamp: new Date().toISOString()
    }));
  });
  return function trackGatingDecision(_x35, _x36, _x37) {
    return _ref1.apply(this, arguments);
  };
}();
var exportAITelemetryData = exports.exportAITelemetryData = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (userId) {
    return telemetryManager.exportUserData(userId);
  });
  return function exportAITelemetryData(_x38) {
    return _ref10.apply(this, arguments);
  };
}();
var deleteAITelemetryData = exports.deleteAITelemetryData = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (userId) {
    return telemetryManager.deleteUserData(userId);
  });
  return function deleteAITelemetryData(_x39) {
    return _ref11.apply(this, arguments);
  };
}();
var updateTelemetryConsent = exports.updateTelemetryConsent = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (level) {
    return telemetryManager.updateConsentLevel(level);
  });
  return function updateTelemetryConsent(_x40) {
    return _ref12.apply(this, arguments);
  };
}();
var cleanupTelemetry = exports.cleanupTelemetry = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* () {
    return telemetryManager.cleanup();
  });
  return function cleanupTelemetry() {
    return _ref13.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,