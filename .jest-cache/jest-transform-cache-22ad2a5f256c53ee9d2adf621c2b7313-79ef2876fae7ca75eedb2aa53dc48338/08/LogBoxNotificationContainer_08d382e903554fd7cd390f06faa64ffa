9a5a0ca5393501a7c42f78264f043d6a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._LogBoxNotificationContainer = _LogBoxNotificationContainer;
exports.default = void 0;
var _SafeAreaView_INTERNAL_DO_NOT_USE = _interopRequireDefault(require("../../src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var LogBoxData = _interopRequireWildcard(require("./Data/LogBoxData"));
var _LogBoxLog = _interopRequireDefault(require("./Data/LogBoxLog"));
var _LogBoxNotification = _interopRequireDefault(require("./UI/LogBoxNotification"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _LogBoxNotificationContainer(props) {
  var logs = props.logs;
  var onDismissWarns = function onDismissWarns() {
    LogBoxData.clearWarnings();
  };
  var onDismissErrors = function onDismissErrors() {
    LogBoxData.clearErrors();
  };
  var setSelectedLog = function setSelectedLog(index) {
    LogBoxData.setSelectedLog(index);
  };
  function openLog(log) {
    if (log.onNotificationPress) {
      log.onNotificationPress();
      return;
    }
    var index = logs.length - 1;
    while (index > 0 && logs[index] !== log) {
      index -= 1;
    }
    setSelectedLog(index);
  }
  if (logs.length === 0 || props.isDisabled === true) {
    return null;
  }
  var warnings = logs.filter(function (log) {
    return log.level === 'warn';
  });
  var errors = logs.filter(function (log) {
    return log.level === 'error' || log.level === 'fatal';
  });
  return (0, _jsxRuntime.jsxs)(_SafeAreaView_INTERNAL_DO_NOT_USE.default, {
    style: styles.list,
    children: [warnings.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: warnings[warnings.length - 1],
        level: "warn",
        totalLogCount: warnings.length,
        onPressOpen: function onPressOpen() {
          return openLog(warnings[warnings.length - 1]);
        },
        onPressDismiss: onDismissWarns
      })
    }), errors.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: errors[errors.length - 1],
        level: "error",
        totalLogCount: errors.length,
        onPressOpen: function onPressOpen() {
          return openLog(errors[errors.length - 1]);
        },
        onPressDismiss: onDismissErrors
      })
    })]
  });
}
var styles = _StyleSheet.default.create({
  list: {
    bottom: 20,
    left: 10,
    right: 10,
    position: 'absolute'
  },
  toast: {
    borderRadius: 8,
    marginBottom: 5,
    overflow: 'hidden'
  }
});
var _default = exports.default = LogBoxData.withSubscription(_LogBoxNotificationContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfU2FmZUFyZWFWaWV3X0lOVEVSTkFMX0RPX05PVF9VU0UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9WaWV3IiwiX1N0eWxlU2hlZXQiLCJMb2dCb3hEYXRhIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfTG9nQm94TG9nIiwiX0xvZ0JveE5vdGlmaWNhdGlvbiIsIlJlYWN0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9Mb2dCb3hOb3RpZmljYXRpb25Db250YWluZXIiLCJwcm9wcyIsImxvZ3MiLCJvbkRpc21pc3NXYXJucyIsImNsZWFyV2FybmluZ3MiLCJvbkRpc21pc3NFcnJvcnMiLCJjbGVhckVycm9ycyIsInNldFNlbGVjdGVkTG9nIiwiaW5kZXgiLCJvcGVuTG9nIiwibG9nIiwib25Ob3RpZmljYXRpb25QcmVzcyIsImxlbmd0aCIsImlzRGlzYWJsZWQiLCJ3YXJuaW5ncyIsImZpbHRlciIsImxldmVsIiwiZXJyb3JzIiwianN4cyIsInN0eWxlIiwic3R5bGVzIiwibGlzdCIsImNoaWxkcmVuIiwianN4IiwidG9hc3QiLCJ0b3RhbExvZ0NvdW50Iiwib25QcmVzc09wZW4iLCJvblByZXNzRGlzbWlzcyIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJwb3NpdGlvbiIsImJvcmRlclJhZGl1cyIsIm1hcmdpbkJvdHRvbSIsIm92ZXJmbG93IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwid2l0aFN1YnNjcmlwdGlvbiJdLCJzb3VyY2VzIjpbIkxvZ0JveE5vdGlmaWNhdGlvbkNvbnRhaW5lci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFNhZmVBcmVhVmlldyBmcm9tICcuLi8uLi9zcmMvcHJpdmF0ZS9jb21wb25lbnRzL1NhZmVBcmVhVmlld19JTlRFUk5BTF9ET19OT1RfVVNFJztcbmltcG9ydCBWaWV3IGZyb20gJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3JztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgKiBhcyBMb2dCb3hEYXRhIGZyb20gJy4vRGF0YS9Mb2dCb3hEYXRhJztcbmltcG9ydCBMb2dCb3hMb2cgZnJvbSAnLi9EYXRhL0xvZ0JveExvZyc7XG5pbXBvcnQgTG9nQm94TG9nTm90aWZpY2F0aW9uIGZyb20gJy4vVUkvTG9nQm94Tm90aWZpY2F0aW9uJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7XG4gIGxvZ3M6ICRSZWFkT25seUFycmF5PExvZ0JveExvZz4sXG4gIHNlbGVjdGVkTG9nSW5kZXg6IG51bWJlcixcbiAgaXNEaXNhYmxlZD86ID9ib29sZWFuLFxufT47XG5cbmV4cG9ydCBmdW5jdGlvbiBfTG9nQm94Tm90aWZpY2F0aW9uQ29udGFpbmVyKHByb3BzOiBQcm9wcyk6IFJlYWN0Lk5vZGUge1xuICBjb25zdCB7bG9nc30gPSBwcm9wcztcblxuICBjb25zdCBvbkRpc21pc3NXYXJucyA9ICgpID0+IHtcbiAgICBMb2dCb3hEYXRhLmNsZWFyV2FybmluZ3MoKTtcbiAgfTtcbiAgY29uc3Qgb25EaXNtaXNzRXJyb3JzID0gKCkgPT4ge1xuICAgIExvZ0JveERhdGEuY2xlYXJFcnJvcnMoKTtcbiAgfTtcblxuICBjb25zdCBzZXRTZWxlY3RlZExvZyA9IChpbmRleDogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgTG9nQm94RGF0YS5zZXRTZWxlY3RlZExvZyhpbmRleCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gb3BlbkxvZyhsb2c6IExvZ0JveExvZykge1xuICAgIGlmIChsb2cub25Ob3RpZmljYXRpb25QcmVzcykge1xuICAgICAgbG9nLm9uTm90aWZpY2F0aW9uUHJlc3MoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gbG9ncy5sZW5ndGggLSAxO1xuXG4gICAgLy8gU3RvcCBhdCB6ZXJvIGJlY2F1c2UgaWYgd2UgZG9uJ3QgZmluZCBhbnkgbG9nLCB3ZSdsbCBvcGVuIHRoZSBmaXJzdCBsb2cuXG4gICAgd2hpbGUgKGluZGV4ID4gMCAmJiBsb2dzW2luZGV4XSAhPT0gbG9nKSB7XG4gICAgICBpbmRleCAtPSAxO1xuICAgIH1cbiAgICBzZXRTZWxlY3RlZExvZyhpbmRleCk7XG4gIH1cblxuICBpZiAobG9ncy5sZW5ndGggPT09IDAgfHwgcHJvcHMuaXNEaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3Qgd2FybmluZ3MgPSBsb2dzLmZpbHRlcihsb2cgPT4gbG9nLmxldmVsID09PSAnd2FybicpO1xuICBjb25zdCBlcnJvcnMgPSBsb2dzLmZpbHRlcihcbiAgICBsb2cgPT4gbG9nLmxldmVsID09PSAnZXJyb3InIHx8IGxvZy5sZXZlbCA9PT0gJ2ZhdGFsJyxcbiAgKTtcbiAgcmV0dXJuIChcbiAgICA8U2FmZUFyZWFWaWV3IHN0eWxlPXtzdHlsZXMubGlzdH0+XG4gICAgICB7d2FybmluZ3MubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMudG9hc3R9PlxuICAgICAgICAgIDxMb2dCb3hMb2dOb3RpZmljYXRpb25cbiAgICAgICAgICAgIGxvZz17d2FybmluZ3Nbd2FybmluZ3MubGVuZ3RoIC0gMV19XG4gICAgICAgICAgICBsZXZlbD1cIndhcm5cIlxuICAgICAgICAgICAgdG90YWxMb2dDb3VudD17d2FybmluZ3MubGVuZ3RofVxuICAgICAgICAgICAgb25QcmVzc09wZW49eygpID0+IG9wZW5Mb2cod2FybmluZ3Nbd2FybmluZ3MubGVuZ3RoIC0gMV0pfVxuICAgICAgICAgICAgb25QcmVzc0Rpc21pc3M9e29uRGlzbWlzc1dhcm5zfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVmlldz5cbiAgICAgICl9XG4gICAgICB7ZXJyb3JzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnRvYXN0fT5cbiAgICAgICAgICA8TG9nQm94TG9nTm90aWZpY2F0aW9uXG4gICAgICAgICAgICBsb2c9e2Vycm9yc1tlcnJvcnMubGVuZ3RoIC0gMV19XG4gICAgICAgICAgICBsZXZlbD1cImVycm9yXCJcbiAgICAgICAgICAgIHRvdGFsTG9nQ291bnQ9e2Vycm9ycy5sZW5ndGh9XG4gICAgICAgICAgICBvblByZXNzT3Blbj17KCkgPT4gb3BlbkxvZyhlcnJvcnNbZXJyb3JzLmxlbmd0aCAtIDFdKX1cbiAgICAgICAgICAgIG9uUHJlc3NEaXNtaXNzPXtvbkRpc21pc3NFcnJvcnN9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKX1cbiAgICA8L1NhZmVBcmVhVmlldz5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBsaXN0OiB7XG4gICAgYm90dG9tOiAyMCxcbiAgICBsZWZ0OiAxMCxcbiAgICByaWdodDogMTAsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIH0sXG4gIHRvYXN0OiB7XG4gICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgIG1hcmdpbkJvdHRvbTogNSxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKExvZ0JveERhdGEud2l0aFN1YnNjcmlwdGlvbihcbiAgX0xvZ0JveE5vdGlmaWNhdGlvbkNvbnRhaW5lcixcbik6IFJlYWN0LkNvbXBvbmVudFR5cGU8e30+KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUEsSUFBQUEsaUNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLFVBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLG1CQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxLQUFBLEdBQUFILHVCQUFBLENBQUFKLE9BQUE7QUFBK0IsSUFBQVEsV0FBQSxHQUFBUixPQUFBO0FBQUEsU0FBQUksd0JBQUFLLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFQLHVCQUFBLFlBQUFBLHdCQUFBSyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdB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