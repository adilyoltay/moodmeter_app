62f738ce45f3ce061e05d996234366c3
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return _qualityRibbonFixtures.mockAsyncStorage;
});
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry");
_getJestObj().mock("../../features/ai/context/contextIntelligence");
_getJestObj().mock("../../constants/featureFlags", function () {
  return {
    FEATURE_FLAGS: {
      isEnabled: jest.fn(function (flag) {
        if (flag === 'AI_UNIFIED_PIPELINE') return true;
        return false;
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAdaptiveSuggestion = require("../../features/ai/hooks/useAdaptiveSuggestion");
var _qualityRibbonFixtures = require("../fixtures/qualityRibbonFixtures");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useAdaptiveSuggestion Hook', function () {
  var mockTrackAIInteraction;
  var mockContextIntelligence;
  beforeEach(function () {
    jest.clearAllMocks();
    mockTrackAIInteraction = jest.fn();
    require("../../features/ai/telemetry/aiTelemetry").trackAIInteraction = mockTrackAIInteraction;
    mockContextIntelligence = {
      analyze: jest.fn().mockResolvedValue({
        currentContext: {
          userState: {
            stressLevel: 5,
            energyLevel: 6,
            moodTrend: 'neutral'
          },
          environmentalFactors: {
            timeOfDay: 'afternoon',
            dayOfWeek: 'tuesday'
          }
        }
      })
    };
    require("../../features/ai/context/contextIntelligence").contextIntelligence = mockContextIntelligence;
    _qualityRibbonFixtures.mockAsyncStorage.getItem.mockResolvedValue(null);
    _qualityRibbonFixtures.mockAsyncStorage.setItem.mockResolvedValue(undefined);
  });
  describe('Basic Hook Functionality', function () {
    it('should initialize with correct default values', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook.result;
      expect(result.current.loading).toBe(false);
      expect(typeof result.current.generateSuggestion).toBe('function');
      expect(typeof result.current.generateSuggestionFromPipeline).toBe('function');
      expect(typeof result.current.trackSuggestionClick).toBe('function');
      expect(typeof result.current.trackSuggestionDismissal).toBe('function');
      expect(typeof result.current.snoozeSuggestion).toBe('function');
    });
  });
  describe('Cooldown Logic', function () {
    it('should enforce 2-hour cooldown period', (0, _asyncToGenerator2.default)(function* () {
      var fixedTimestamp = (0, _qualityRibbonFixtures.mockDateNow)();
      var oneHourAgo = fixedTimestamp - 60 * 60 * 1000;
      _qualityRibbonFixtures.mockAsyncStorage.getItem.mockImplementation(function (key) {
        if (key.includes('lastSuggestionTime')) {
          return Promise.resolve(oneHourAgo.toString());
        }
        return Promise.resolve(null);
      });
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook2.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(false);
    }));
    it('should allow suggestions after cooldown period expires', (0, _asyncToGenerator2.default)(function* () {
      var fixedTimestamp = (0, _qualityRibbonFixtures.mockDateNow)();
      var threeHoursAgo = fixedTimestamp - 3 * 60 * 60 * 1000;
      _qualityRibbonFixtures.mockAsyncStorage.getItem.mockImplementation(function (key) {
        if (key.includes('lastSuggestionTime')) {
          return Promise.resolve(threeHoursAgo.toString());
        }
        return Promise.resolve(null);
      });
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook3.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(true);
    }));
    it('should reset cooldown after dismissal', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.snoozeSuggestion('test-user', 2);
      }));
      expect(_qualityRibbonFixtures.mockAsyncStorage.setItem).toHaveBeenCalledWith(expect.stringContaining('lastSuggestionTime'), expect.any(String));
    }));
  });
  describe('Quiet Hours Logic', function () {
    it('should respect quiet hours (23:00-07:00)', (0, _asyncToGenerator2.default)(function* () {
      var quietHourTimestamp = new Date('2022-01-01T02:00:00Z').getTime();
      (0, _qualityRibbonFixtures.mockDateNow)(quietHourTimestamp);
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook5.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(false);
    }));
    it('should allow suggestions during active hours', (0, _asyncToGenerator2.default)(function* () {
      var activeHourTimestamp = new Date('2022-01-01T14:00:00Z').getTime();
      (0, _qualityRibbonFixtures.mockDateNow)(activeHourTimestamp);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook6.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(true);
    }));
    it('should handle edge cases around quiet hours boundary', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        time: '2022-01-01T06:59:00Z',
        expected: false
      }, {
        time: '2022-01-01T07:01:00Z',
        expected: true
      }, {
        time: '2022-01-01T22:59:00Z',
        expected: true
      }, {
        time: '2022-01-01T23:01:00Z',
        expected: false
      }];
      var _loop = function* _loop() {
        (0, _qualityRibbonFixtures.mockDateNow)(new Date(testCase.time).getTime());
        var _renderHook7 = (0, _reactNative.renderHook)(function () {
            return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
          }),
          result = _renderHook7.result;
        var suggestion;
        yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          suggestion = yield result.current.generateSuggestion('test-user');
        }));
        expect(suggestion.show).toBe(testCase.expected);
      };
      for (var testCase of testCases) {
        yield* _loop();
      }
    }));
  });
  describe('Pipeline Integration', function () {
    it('should generate suggestions from pipeline result', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook8.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestionFromPipeline('test-user', _qualityRibbonFixtures.mockUnifiedPipelineResult, 'mood');
      }));
      expect(suggestion.show).toBe(true);
      expect(suggestion).toHaveProperty('title');
      expect(suggestion).toHaveProperty('content');
      expect(suggestion).toHaveProperty('category');
      expect(suggestion).toHaveProperty('confidence');
    }));
    it('should handle pipeline results without insights', (0, _asyncToGenerator2.default)(function* () {
      var emptyResult = Object.assign({}, _qualityRibbonFixtures.mockUnifiedPipelineResult, {
        insights: undefined,
        patterns: []
      });
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook9.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestionFromPipeline('test-user', emptyResult, 'mood');
      }));
      expect(suggestion.show).toBe(true);
      expect(suggestion.source).toBe('context_based');
    }));
    it('should prioritize high-confidence insights', (0, _asyncToGenerator2.default)(function* () {
      var resultWithMultipleInsights = Object.assign({}, _qualityRibbonFixtures.mockUnifiedPipelineResult, {
        insights: {
          therapeutic: [{
            text: "Low confidence suggestion",
            confidence: 0.3,
            priority: "low",
            category: "general"
          }, {
            text: "High confidence suggestion",
            confidence: 0.9,
            priority: "high",
            category: "breathwork"
          }]
        }
      });
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook0.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestionFromPipeline('test-user', resultWithMultipleInsights, 'mood');
      }));
      expect(suggestion.confidence).toBeCloseTo(0.9);
      expect(suggestion.category).toBe('breathwork');
    }));
  });
  describe('Context-Based Suggestions', function () {
    it('should generate context-based suggestions when pipeline data is insufficient', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook1.result;
      mockContextIntelligence.analyze.mockResolvedValueOnce({
        currentContext: {
          userState: {
            stressLevel: 9,
            energyLevel: 3,
            moodTrend: 'declining'
          }
        }
      });
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(true);
      expect(suggestion.source).toBe('context_based');
      expect(suggestion.category).toBe('breathwork');
    }));
    it('should adapt suggestions based on time of day', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook10.result;
      mockContextIntelligence.analyze.mockResolvedValueOnce({
        currentContext: {
          userState: {
            stressLevel: 6,
            energyLevel: 4
          },
          environmentalFactors: {
            timeOfDay: 'evening',
            dayOfWeek: 'friday'
          }
        }
      });
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(true);
      expect(['mood', 'cbt', 'breathwork']).toContain(suggestion.category);
    }));
  });
  describe('Telemetry Integration', function () {
    it('should track suggestion generation events', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.generateSuggestion('test-user');
      }));
      expect(mockTrackAIInteraction).toHaveBeenCalledWith(expect.stringContaining('ADAPTIVE_SUGGESTION'), expect.objectContaining({
        userId: 'test-user'
      }), 'test-user');
    }));
    it('should track suggestion clicks', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.trackSuggestionClick('test-user', _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality);
      }));
      expect(mockTrackAIInteraction).toHaveBeenCalledWith(expect.stringContaining('CLICKED'), expect.objectContaining({
        userId: 'test-user',
        category: _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality.category
      }), 'test-user');
    }));
    it('should track suggestion dismissals', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.trackSuggestionDismissal('test-user', _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality);
      }));
      expect(mockTrackAIInteraction).toHaveBeenCalledWith(expect.stringContaining('DISMISSED'), expect.objectContaining({
        userId: 'test-user',
        category: _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality.category
      }), 'test-user');
    }));
  });
  describe('Error Handling', function () {
    it('should handle context analysis errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockContextIntelligence.analyze.mockRejectedValueOnce(new Error('Context error'));
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook14.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(true);
      expect(suggestion.confidence).toBeLessThan(0.7);
    }));
    it('should handle AsyncStorage errors', (0, _asyncToGenerator2.default)(function* () {
      _qualityRibbonFixtures.mockAsyncStorage.getItem.mockRejectedValueOnce(new Error('Storage error'));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook15.result;
      var suggestion;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestion = yield result.current.generateSuggestion('test-user');
      }));
      expect(suggestion.show).toBe(true);
    }));
    it('should handle telemetry errors without affecting functionality', (0, _asyncToGenerator2.default)(function* () {
      mockTrackAIInteraction.mockRejectedValueOnce(new Error('Telemetry error'));
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield expect(result.current.trackSuggestionClick('test-user', _qualityRibbonFixtures.mockAdaptiveSuggestions.highQuality)).resolves.not.toThrow();
      }));
    }));
  });
  describe('Performance', function () {
    it('should generate suggestions within acceptable time', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook17.result;
      var startTime = Date.now();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.generateSuggestion('test-user');
      }));
      var endTime = Date.now();
      var duration = endTime - startTime;
      expect(duration).toBeLessThan(1000);
    }));
    it('should handle multiple concurrent suggestion requests', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook18.result;
      var promises = Array.from({
        length: 5
      }, function () {
        return result.current.generateSuggestion('test-user');
      });
      var suggestions;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        suggestions = yield Promise.all(promises);
      }));
      expect(suggestions).toHaveLength(5);
      suggestions.forEach(function (suggestion) {
        expect(suggestion).toHaveProperty('show');
      });
    }));
  });
  describe('Memory Management', function () {
    it('should cleanup properly on unmount', function () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook19.result,
        unmount = _renderHook19.unmount;
      expect(result.current).toBeTruthy();
      expect(function () {
        return unmount();
      }).not.toThrow();
    });
    it('should not cause memory leaks with repeated calls', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdaptiveSuggestion.useAdaptiveSuggestion)();
        }),
        result = _renderHook20.result;
      for (var i = 0; i < 100; i++) {
        yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          yield result.current.generateSuggestion('test-user');
        }));
      }
      expect(result.current).toBeTruthy();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,