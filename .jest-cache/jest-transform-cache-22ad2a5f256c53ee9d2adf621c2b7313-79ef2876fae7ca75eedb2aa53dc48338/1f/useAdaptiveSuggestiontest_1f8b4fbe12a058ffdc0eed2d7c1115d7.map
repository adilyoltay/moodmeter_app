{"version":3,"names":["_getJestObj","mock","mockAsyncStorage","FEATURE_FLAGS","isEnabled","jest","fn","flag","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_useAdaptiveSuggestion","_qualityRibbonFixtures","_require","describe","mockTrackAIInteraction","mockContextIntelligence","beforeEach","clearAllMocks","trackAIInteraction","analyze","mockResolvedValue","currentContext","userState","stressLevel","energyLevel","moodTrend","environmentalFactors","timeOfDay","dayOfWeek","contextIntelligence","getItem","setItem","undefined","it","_renderHook","renderHook","useAdaptiveSuggestion","result","expect","current","loading","toBe","generateSuggestion","generateSuggestionFromPipeline","trackSuggestionClick","trackSuggestionDismissal","snoozeSuggestion","default","fixedTimestamp","mockDateNow","oneHourAgo","mockImplementation","key","includes","Promise","resolve","toString","_renderHook2","suggestion","act","show","threeHoursAgo","_renderHook3","_renderHook4","toHaveBeenCalledWith","stringContaining","any","String","quietHourTimestamp","Date","getTime","_renderHook5","activeHourTimestamp","_renderHook6","testCases","time","expected","_loop","testCase","_renderHook7","_renderHook8","mockUnifiedPipelineResult","toHaveProperty","emptyResult","Object","assign","insights","patterns","_renderHook9","source","resultWithMultipleInsights","therapeutic","text","confidence","priority","category","_renderHook0","toBeCloseTo","_renderHook1","mockResolvedValueOnce","_renderHook10","toContain","_renderHook11","objectContaining","userId","_renderHook12","mockAdaptiveSuggestions","highQuality","_renderHook13","mockRejectedValueOnce","Error","_renderHook14","toBeLessThan","_renderHook15","_renderHook16","resolves","not","toThrow","_renderHook17","startTime","now","endTime","duration","_renderHook18","promises","Array","from","length","suggestions","all","toHaveLength","forEach","_renderHook19","unmount","toBeTruthy","_renderHook20","i"],"sources":["useAdaptiveSuggestion.test.ts"],"sourcesContent":["/**\n * ðŸ§ª Unit Tests - useAdaptiveSuggestion Hook\n * \n * Tests for cooldown logic, quiet hours, suggestion generation,\n * and telemetry integration in useAdaptiveSuggestion hook\n */\n\nimport { renderHook, act, waitFor } from '@testing-library/react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useAdaptiveSuggestion } from '@/features/ai/hooks/useAdaptiveSuggestion';\nimport { \n  mockUnifiedPipelineResult,\n  mockAdaptiveSuggestions,\n  mockAsyncStorage,\n  mockDateNow\n} from '../fixtures/qualityRibbonFixtures';\n\n// Mock dependencies\njest.mock('@react-native-async-storage/async-storage', () => mockAsyncStorage);\njest.mock('@/features/ai/telemetry/aiTelemetry');\njest.mock('@/features/ai/context/contextIntelligence');\njest.mock('@/constants/featureFlags', () => ({\n  FEATURE_FLAGS: {\n    isEnabled: jest.fn((flag) => {\n      if (flag === 'AI_UNIFIED_PIPELINE') return true;\n      return false;\n    })\n  }\n}));\n\ndescribe('useAdaptiveSuggestion Hook', () => {\n  let mockTrackAIInteraction: jest.Mock;\n  let mockContextIntelligence: any;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock telemetry\n    mockTrackAIInteraction = jest.fn();\n    require('@/features/ai/telemetry/aiTelemetry').trackAIInteraction = mockTrackAIInteraction;\n    \n    // Mock context intelligence\n    mockContextIntelligence = {\n      analyze: jest.fn().mockResolvedValue({\n        currentContext: {\n          userState: {\n            stressLevel: 5,\n            energyLevel: 6,\n            moodTrend: 'neutral'\n          },\n          environmentalFactors: {\n            timeOfDay: 'afternoon',\n            dayOfWeek: 'tuesday'\n          }\n        }\n      })\n    };\n    require('@/features/ai/context/contextIntelligence').contextIntelligence = mockContextIntelligence;\n    \n    // Mock AsyncStorage\n    mockAsyncStorage.getItem.mockResolvedValue(null);\n    mockAsyncStorage.setItem.mockResolvedValue(undefined);\n  });\n\n  describe('Basic Hook Functionality', () => {\n    it('should initialize with correct default values', () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n      \n      expect(result.current.loading).toBe(false);\n      expect(typeof result.current.generateSuggestion).toBe('function');\n      expect(typeof result.current.generateSuggestionFromPipeline).toBe('function');\n      expect(typeof result.current.trackSuggestionClick).toBe('function');\n      expect(typeof result.current.trackSuggestionDismissal).toBe('function');\n      expect(typeof result.current.snoozeSuggestion).toBe('function');\n    });\n  });\n\n  describe('Cooldown Logic', () => {\n    it('should enforce 2-hour cooldown period', async () => {\n      const fixedTimestamp = mockDateNow();\n      \n      // Set last suggestion timestamp to 1 hour ago\n      const oneHourAgo = fixedTimestamp - (60 * 60 * 1000);\n      mockAsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('lastSuggestionTime')) {\n          return Promise.resolve(oneHourAgo.toString());\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      // Should not generate suggestion due to cooldown\n      expect(suggestion.show).toBe(false);\n    });\n\n    it('should allow suggestions after cooldown period expires', async () => {\n      const fixedTimestamp = mockDateNow();\n      \n      // Set last suggestion timestamp to 3 hours ago (past cooldown)\n      const threeHoursAgo = fixedTimestamp - (3 * 60 * 60 * 1000);\n      mockAsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('lastSuggestionTime')) {\n          return Promise.resolve(threeHoursAgo.toString());\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      // Should generate suggestion after cooldown\n      expect(suggestion.show).toBe(true);\n    });\n\n    it('should reset cooldown after dismissal', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      await act(async () => {\n        await result.current.snoozeSuggestion('test-user', 2); // 2-hour snooze\n      });\n\n      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith(\n        expect.stringContaining('lastSuggestionTime'),\n        expect.any(String)\n      );\n    });\n  });\n\n  describe('Quiet Hours Logic', () => {\n    it('should respect quiet hours (23:00-07:00)', async () => {\n      // Mock current time to 2 AM (quiet hours)\n      const quietHourTimestamp = new Date('2022-01-01T02:00:00Z').getTime();\n      mockDateNow(quietHourTimestamp);\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      // Should not generate suggestion during quiet hours\n      expect(suggestion.show).toBe(false);\n    });\n\n    it('should allow suggestions during active hours', async () => {\n      // Mock current time to 2 PM (active hours)\n      const activeHourTimestamp = new Date('2022-01-01T14:00:00Z').getTime();\n      mockDateNow(activeHourTimestamp);\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      // Should generate suggestion during active hours\n      expect(suggestion.show).toBe(true);\n    });\n\n    it('should handle edge cases around quiet hours boundary', async () => {\n      const testCases = [\n        { time: '2022-01-01T06:59:00Z', expected: false }, // Just before quiet hours end\n        { time: '2022-01-01T07:01:00Z', expected: true },  // Just after quiet hours end\n        { time: '2022-01-01T22:59:00Z', expected: true },  // Just before quiet hours start\n        { time: '2022-01-01T23:01:00Z', expected: false }  // Just after quiet hours start\n      ];\n\n      for (const testCase of testCases) {\n        mockDateNow(new Date(testCase.time).getTime());\n        \n        const { result } = renderHook(() => useAdaptiveSuggestion());\n\n        let suggestion: any;\n        await act(async () => {\n          suggestion = await result.current.generateSuggestion('test-user');\n        });\n\n        expect(suggestion.show).toBe(testCase.expected);\n      }\n    });\n  });\n\n  describe('Pipeline Integration', () => {\n    it('should generate suggestions from pipeline result', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestionFromPipeline(\n          'test-user',\n          mockUnifiedPipelineResult,\n          'mood'\n        );\n      });\n\n      expect(suggestion.show).toBe(true);\n      expect(suggestion).toHaveProperty('title');\n      expect(suggestion).toHaveProperty('content');\n      expect(suggestion).toHaveProperty('category');\n      expect(suggestion).toHaveProperty('confidence');\n    });\n\n    it('should handle pipeline results without insights', async () => {\n      const emptyResult = {\n        ...mockUnifiedPipelineResult,\n        insights: undefined,\n        patterns: []\n      };\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestionFromPipeline(\n          'test-user',\n          emptyResult,\n          'mood'\n        );\n      });\n\n      // Should fallback to context-based suggestion\n      expect(suggestion.show).toBe(true);\n      expect(suggestion.source).toBe('context_based');\n    });\n\n    it('should prioritize high-confidence insights', async () => {\n      const resultWithMultipleInsights = {\n        ...mockUnifiedPipelineResult,\n        insights: {\n          therapeutic: [\n            {\n              text: \"Low confidence suggestion\",\n              confidence: 0.3,\n              priority: \"low\",\n              category: \"general\"\n            },\n            {\n              text: \"High confidence suggestion\",\n              confidence: 0.9,\n              priority: \"high\",\n              category: \"breathwork\"\n            }\n          ]\n        }\n      };\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestionFromPipeline(\n          'test-user',\n          resultWithMultipleInsights,\n          'mood'\n        );\n      });\n\n      // Should use the high-confidence insight\n      expect(suggestion.confidence).toBeCloseTo(0.9);\n      expect(suggestion.category).toBe('breathwork');\n    });\n  });\n\n  describe('Context-Based Suggestions', () => {\n    it('should generate context-based suggestions when pipeline data is insufficient', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      // Mock context intelligence to return high stress\n      mockContextIntelligence.analyze.mockResolvedValueOnce({\n        currentContext: {\n          userState: {\n            stressLevel: 9, // High stress\n            energyLevel: 3, // Low energy\n            moodTrend: 'declining'\n          }\n        }\n      });\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      expect(suggestion.show).toBe(true);\n      expect(suggestion.source).toBe('context_based');\n      expect(suggestion.category).toBe('breathwork'); // Should suggest breathwork for high stress\n    });\n\n    it('should adapt suggestions based on time of day', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      // Mock evening context\n      mockContextIntelligence.analyze.mockResolvedValueOnce({\n        currentContext: {\n          userState: { stressLevel: 6, energyLevel: 4 },\n          environmentalFactors: {\n            timeOfDay: 'evening',\n            dayOfWeek: 'friday'\n          }\n        }\n      });\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      // Evening suggestions might be different (e.g., reflection-based)\n      expect(suggestion.show).toBe(true);\n      expect(['mood', 'cbt', 'breathwork']).toContain(suggestion.category);\n    });\n  });\n\n  describe('Telemetry Integration', () => {\n    it('should track suggestion generation events', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      await act(async () => {\n        await result.current.generateSuggestion('test-user');\n      });\n\n      expect(mockTrackAIInteraction).toHaveBeenCalledWith(\n        expect.stringContaining('ADAPTIVE_SUGGESTION'),\n        expect.objectContaining({\n          userId: 'test-user'\n        }),\n        'test-user'\n      );\n    });\n\n    it('should track suggestion clicks', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      await act(async () => {\n        await result.current.trackSuggestionClick('test-user', mockAdaptiveSuggestions.highQuality);\n      });\n\n      expect(mockTrackAIInteraction).toHaveBeenCalledWith(\n        expect.stringContaining('CLICKED'),\n        expect.objectContaining({\n          userId: 'test-user',\n          category: mockAdaptiveSuggestions.highQuality.category\n        }),\n        'test-user'\n      );\n    });\n\n    it('should track suggestion dismissals', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      await act(async () => {\n        await result.current.trackSuggestionDismissal('test-user', mockAdaptiveSuggestions.highQuality);\n      });\n\n      expect(mockTrackAIInteraction).toHaveBeenCalledWith(\n        expect.stringContaining('DISMISSED'),\n        expect.objectContaining({\n          userId: 'test-user',\n          category: mockAdaptiveSuggestions.highQuality.category\n        }),\n        'test-user'\n      );\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle context analysis errors gracefully', async () => {\n      mockContextIntelligence.analyze.mockRejectedValueOnce(new Error('Context error'));\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      // Should provide fallback suggestion\n      expect(suggestion.show).toBe(true);\n      expect(suggestion.confidence).toBeLessThan(0.7); // Lower confidence for fallback\n    });\n\n    it('should handle AsyncStorage errors', async () => {\n      mockAsyncStorage.getItem.mockRejectedValueOnce(new Error('Storage error'));\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      let suggestion: any;\n      await act(async () => {\n        suggestion = await result.current.generateSuggestion('test-user');\n      });\n\n      // Should still work without storage\n      expect(suggestion.show).toBe(true);\n    });\n\n    it('should handle telemetry errors without affecting functionality', async () => {\n      mockTrackAIInteraction.mockRejectedValueOnce(new Error('Telemetry error'));\n\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      // Should not throw error\n      await act(async () => {\n        await expect(\n          result.current.trackSuggestionClick('test-user', mockAdaptiveSuggestions.highQuality)\n        ).resolves.not.toThrow();\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    it('should generate suggestions within acceptable time', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      const startTime = Date.now();\n      \n      await act(async () => {\n        await result.current.generateSuggestion('test-user');\n      });\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Should complete within 1 second\n      expect(duration).toBeLessThan(1000);\n    });\n\n    it('should handle multiple concurrent suggestion requests', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      // Fire multiple requests simultaneously\n      const promises = Array.from({ length: 5 }, () =>\n        result.current.generateSuggestion('test-user')\n      );\n\n      let suggestions: any[];\n      await act(async () => {\n        suggestions = await Promise.all(promises);\n      });\n\n      // All should complete successfully\n      expect(suggestions).toHaveLength(5);\n      suggestions.forEach(suggestion => {\n        expect(suggestion).toHaveProperty('show');\n      });\n    });\n  });\n\n  describe('Memory Management', () => {\n    it('should cleanup properly on unmount', () => {\n      const { result, unmount } = renderHook(() => useAdaptiveSuggestion());\n\n      expect(result.current).toBeTruthy();\n      \n      // Should not throw error on unmount\n      expect(() => unmount()).not.toThrow();\n    });\n\n    it('should not cause memory leaks with repeated calls', async () => {\n      const { result } = renderHook(() => useAdaptiveSuggestion());\n\n      // Make many calls to test for memory leaks\n      for (let i = 0; i < 100; i++) {\n        await act(async () => {\n          await result.current.generateSuggestion('test-user');\n        });\n      }\n\n      // Should complete without memory issues\n      expect(result.current).toBeTruthy();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}