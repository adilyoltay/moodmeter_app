a984427b172a05bff20985924c7aa5d7
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapOnboardingPayloadToUserProfileRow = mapOnboardingPayloadToUserProfileRow;
function mapOnboardingPayloadToUserProfileRow(userId, payload) {
  var _payload$profile, _payload$lifestyle, _payload$lifestyle2, _payload$first_mood, _payload$first_mood2, _payload$profile2, _payload$profile3, _payload$profile4, _payload$reminders, _payload$lifestyle3, _payload$reminders2, _payload$reminders3, _payload$reminders4, _payload$consent, _payload$consent2;
  var mapEnum = function mapEnum(val, allowed, normalize) {
    if (!val || typeof val !== 'string') return undefined;
    var base = (normalize ? normalize(val) : val).trim().toLowerCase().replace(/-/g, '_');
    return allowed.includes(base) ? base : undefined;
  };
  var genderRaw = payload == null || (_payload$profile = payload.profile) == null ? void 0 : _payload$profile.gender;
  var lifestyleExerciseRaw = payload == null || (_payload$lifestyle = payload.lifestyle) == null ? void 0 : _payload$lifestyle.exercise;
  var lifestyleSocialRaw = payload == null || (_payload$lifestyle2 = payload.lifestyle) == null ? void 0 : _payload$lifestyle2.social;
  var gender = mapEnum(genderRaw, ['female', 'male', 'non_binary', 'prefer_not_to_say']);
  var lifestyle_exercise = mapEnum(lifestyleExerciseRaw, ['none', 'light', 'moderate', 'intense']);
  var lifestyle_social = mapEnum(lifestyleSocialRaw, ['low', 'medium', 'high']);
  var motivations = Array.isArray(payload == null ? void 0 : payload.motivation) ? payload.motivation.filter(function (m) {
    return typeof m === 'string';
  }) : [];
  var firstMoodScoreRaw = payload == null || (_payload$first_mood = payload.first_mood) == null ? void 0 : _payload$first_mood.score;
  var first_mood_score = typeof firstMoodScoreRaw === 'number' ? Math.min(5, Math.max(1, firstMoodScoreRaw)) : firstMoodScoreRaw != null ? Number(firstMoodScoreRaw) : null;
  var first_mood_tags = Array.isArray(payload == null || (_payload$first_mood2 = payload.first_mood) == null ? void 0 : _payload$first_mood2.tags) ? payload.first_mood.tags.filter(function (t) {
    return typeof t === 'string';
  }) : [];
  return {
    user_id: userId,
    age: payload == null || (_payload$profile2 = payload.profile) == null ? void 0 : _payload$profile2.age,
    gender: gender,
    locale: payload == null || (_payload$profile3 = payload.profile) == null ? void 0 : _payload$profile3.locale,
    timezone: (payload == null || (_payload$profile4 = payload.profile) == null ? void 0 : _payload$profile4.timezone) || (payload == null || (_payload$reminders = payload.reminders) == null ? void 0 : _payload$reminders.timezone),
    motivations: motivations,
    first_mood_score: first_mood_score != null ? Number(first_mood_score) : null,
    first_mood_tags: first_mood_tags,
    lifestyle_sleep_hours: payload == null || (_payload$lifestyle3 = payload.lifestyle) == null ? void 0 : _payload$lifestyle3.sleep_hours,
    lifestyle_exercise: lifestyle_exercise,
    lifestyle_social: lifestyle_social,
    reminder_enabled: !!(payload != null && (_payload$reminders2 = payload.reminders) != null && _payload$reminders2.enabled),
    reminder_time: (payload == null || (_payload$reminders3 = payload.reminders) == null ? void 0 : _payload$reminders3.time) || null,
    reminder_days: (payload == null || (_payload$reminders4 = payload.reminders) == null ? void 0 : _payload$reminders4.days) || [],
    feature_flags: (payload == null ? void 0 : payload.feature_flags) || {},
    consent_accepted: !!(payload != null && (_payload$consent = payload.consent) != null && _payload$consent.accepted),
    consent_at: payload != null && (_payload$consent2 = payload.consent) != null && _payload$consent2.accepted ? new Date().toISOString() : null,
    onboarding_version: 2,
    onboarding_completed_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,