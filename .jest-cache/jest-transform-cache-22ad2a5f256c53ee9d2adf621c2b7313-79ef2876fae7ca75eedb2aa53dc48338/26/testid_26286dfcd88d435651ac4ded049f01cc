c57bc9c9f1da59c1123a2e2f2ced053f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByTestIdQueries = void 0;
var _findAll = require("../helpers/find-all");
var _matches = require("../matches");
var _makeQueries = require("./make-queries");
var matchTestId = function matchTestId(node, testId) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  return (0, _matches.matches)(testId, node.props.testID, normalizer, exact);
};
var queryAllByTestId = function queryAllByTestId(instance) {
  return function queryAllByTestIdFn(testId, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return matchTestId(node, testId, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(testId) {
  return `Found multiple elements with testID: ${String(testId)}`;
};
var getMissingError = function getMissingError(testId) {
  return `Unable to find an element with testID: ${String(testId)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByTestId, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByTestIdQueries = function bindByTestIdQueries(instance) {
  return {
    getByTestId: getBy(instance),
    getAllByTestId: getAllBy(instance),
    queryByTestId: queryBy(instance),
    queryAllByTestId: queryAllBy(instance),
    findByTestId: findBy(instance),
    findAllByTestId: findAllBy(instance)
  };
};
exports.bindByTestIdQueries = bindByTestIdQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfbWF0Y2hlcyIsIl9tYWtlUXVlcmllcyIsIm1hdGNoVGVzdElkIiwibm9kZSIsInRlc3RJZCIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJtYXRjaGVzIiwicHJvcHMiLCJ0ZXN0SUQiLCJxdWVyeUFsbEJ5VGVzdElkIiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5VGVzdElkRm4iLCJxdWVyeU9wdGlvbnMiLCJmaW5kQWxsIiwiZ2V0TXVsdGlwbGVFcnJvciIsIlN0cmluZyIsImdldE1pc3NpbmdFcnJvciIsIl9yZWYiLCJtYWtlUXVlcmllcyIsImdldEJ5IiwiZ2V0QWxsQnkiLCJxdWVyeUJ5IiwicXVlcnlBbGxCeSIsImZpbmRCeSIsImZpbmRBbGxCeSIsImJpbmRCeVRlc3RJZFF1ZXJpZXMiLCJnZXRCeVRlc3RJZCIsImdldEFsbEJ5VGVzdElkIiwicXVlcnlCeVRlc3RJZCIsImZpbmRCeVRlc3RJZCIsImZpbmRBbGxCeVRlc3RJZCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcmllcy90ZXN0LWlkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuaW1wb3J0IHsgZmluZEFsbCB9IGZyb20gJy4uL2hlbHBlcnMvZmluZC1hbGwnO1xuaW1wb3J0IHR5cGUgeyBUZXh0TWF0Y2gsIFRleHRNYXRjaE9wdGlvbnMgfSBmcm9tICcuLi9tYXRjaGVzJztcbmltcG9ydCB7IG1hdGNoZXMgfSBmcm9tICcuLi9tYXRjaGVzJztcbmltcG9ydCB0eXBlIHtcbiAgRmluZEFsbEJ5UXVlcnksXG4gIEZpbmRCeVF1ZXJ5LFxuICBHZXRBbGxCeVF1ZXJ5LFxuICBHZXRCeVF1ZXJ5LFxuICBRdWVyeUFsbEJ5UXVlcnksXG4gIFF1ZXJ5QnlRdWVyeSxcbn0gZnJvbSAnLi9tYWtlLXF1ZXJpZXMnO1xuaW1wb3J0IHsgbWFrZVF1ZXJpZXMgfSBmcm9tICcuL21ha2UtcXVlcmllcyc7XG5pbXBvcnQgdHlwZSB7IENvbW1vblF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbnR5cGUgQnlUZXN0SWRPcHRpb25zID0gQ29tbW9uUXVlcnlPcHRpb25zICYgVGV4dE1hdGNoT3B0aW9ucztcblxuY29uc3QgbWF0Y2hUZXN0SWQgPSAoXG4gIG5vZGU6IFJlYWN0VGVzdEluc3RhbmNlLFxuICB0ZXN0SWQ6IFRleHRNYXRjaCxcbiAgb3B0aW9uczogVGV4dE1hdGNoT3B0aW9ucyA9IHt9LFxuKSA9PiB7XG4gIGNvbnN0IHsgZXhhY3QsIG5vcm1hbGl6ZXIgfSA9IG9wdGlvbnM7XG4gIHJldHVybiBtYXRjaGVzKHRlc3RJZCwgbm9kZS5wcm9wcy50ZXN0SUQsIG5vcm1hbGl6ZXIsIGV4YWN0KTtcbn07XG5cbmNvbnN0IHF1ZXJ5QWxsQnlUZXN0SWQgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbik6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGVzdElkT3B0aW9ucz4gPT5cbiAgZnVuY3Rpb24gcXVlcnlBbGxCeVRlc3RJZEZuKHRlc3RJZCwgcXVlcnlPcHRpb25zKSB7XG4gICAgcmV0dXJuIGZpbmRBbGwoaW5zdGFuY2UsIChub2RlKSA9PiBtYXRjaFRlc3RJZChub2RlLCB0ZXN0SWQsIHF1ZXJ5T3B0aW9ucyksIHF1ZXJ5T3B0aW9ucyk7XG4gIH07XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAodGVzdElkOiBUZXh0TWF0Y2gpID0+XG4gIGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRlc3RJRDogJHtTdHJpbmcodGVzdElkKX1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKHRlc3RJZDogVGV4dE1hdGNoKSA9PlxuICBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRlc3RJRDogJHtTdHJpbmcodGVzdElkKX1gO1xuXG5jb25zdCB7IGdldEJ5LCBnZXRBbGxCeSwgcXVlcnlCeSwgcXVlcnlBbGxCeSwgZmluZEJ5LCBmaW5kQWxsQnkgfSA9IG1ha2VRdWVyaWVzKFxuICBxdWVyeUFsbEJ5VGVzdElkLFxuICBnZXRNaXNzaW5nRXJyb3IsXG4gIGdldE11bHRpcGxlRXJyb3IsXG4pO1xuXG5leHBvcnQgdHlwZSBCeVRlc3RJZFF1ZXJpZXMgPSB7XG4gIGdldEJ5VGVzdElkOiBHZXRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXN0SWRPcHRpb25zPjtcbiAgZ2V0QWxsQnlUZXN0SWQ6IEdldEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRlc3RJZE9wdGlvbnM+O1xuICBxdWVyeUJ5VGVzdElkOiBRdWVyeUJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRlc3RJZE9wdGlvbnM+O1xuICBxdWVyeUFsbEJ5VGVzdElkOiBRdWVyeUFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRlc3RJZE9wdGlvbnM+O1xuICBmaW5kQnlUZXN0SWQ6IEZpbmRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXN0SWRPcHRpb25zPjtcbiAgZmluZEFsbEJ5VGVzdElkOiBGaW5kQWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGVzdElkT3B0aW9ucz47XG59O1xuXG5leHBvcnQgY29uc3QgYmluZEJ5VGVzdElkUXVlcmllcyA9IChpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UpOiBCeVRlc3RJZFF1ZXJpZXMgPT4gKHtcbiAgZ2V0QnlUZXN0SWQ6IGdldEJ5KGluc3RhbmNlKSxcbiAgZ2V0QWxsQnlUZXN0SWQ6IGdldEFsbEJ5KGluc3RhbmNlKSxcbiAgcXVlcnlCeVRlc3RJZDogcXVlcnlCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QWxsQnlUZXN0SWQ6IHF1ZXJ5QWxsQnkoaW5zdGFuY2UpLFxuICBmaW5kQnlUZXN0SWQ6IGZpbmRCeShpbnN0YW5jZSksXG4gIGZpbmRBbGxCeVRlc3RJZDogZmluZEFsbEJ5KGluc3RhbmNlKSxcbn0pO1xu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