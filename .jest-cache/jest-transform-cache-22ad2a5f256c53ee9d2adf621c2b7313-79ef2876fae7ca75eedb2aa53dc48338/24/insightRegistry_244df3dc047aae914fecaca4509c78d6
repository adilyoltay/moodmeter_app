549eda45de0f3e6dddad58acc74ed8a6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.estimateQualityLevel = estimateQualityLevel;
exports.extractUIQualityMeta = extractUIQualityMeta;
exports.mapMetadataSourceToProvenance = mapMetadataSourceToProvenance;
exports.mapUnifiedResultToRegistryItems = mapUnifiedResultToRegistryItems;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
function estimateQualityLevel(quality) {
  var _quality$confidence = quality.confidence,
    confidence = _quality$confidence === void 0 ? 0 : _quality$confidence,
    _quality$sampleSize = quality.sampleSize,
    sampleSize = _quality$sampleSize === void 0 ? 0 : _quality$sampleSize,
    _quality$dataQuality = quality.dataQuality,
    dataQuality = _quality$dataQuality === void 0 ? 0 : _quality$dataQuality,
    _quality$freshnessMs = quality.freshnessMs,
    freshnessMs = _quality$freshnessMs === void 0 ? Infinity : _quality$freshnessMs;
  if (confidence >= 0.8 && sampleSize >= 7 && freshnessMs < 30 * 60 * 1000) {
    return 'high';
  }
  if (confidence >= 0.6 && sampleSize >= 3 && dataQuality >= 0.6) {
    return 'medium';
  }
  return 'low';
}
function mapMetadataSourceToProvenance(metadataSource) {
  switch (metadataSource) {
    case 'cache':
      return 'cache';
    case 'fresh':
      return 'unified';
    default:
      return 'heuristic';
  }
}
function inferCategoryFromModule(module, context) {
  switch (module) {
    case 'mood':
      return 'mood';
    case 'cbt':
      return 'cbt';
    case 'tracking':
      return 'ocd';
    case 'today':
      return (context == null ? void 0 : context.category) || 'timeline';
    default:
      return 'timeline';
  }
}
function mapUnifiedResultToRegistryItems(result, module, context) {
  var _result$insights, _result$insights2;
  var items = [];
  var baseId = `${module}_${Date.now()}`;
  var provenance = {
    source: mapMetadataSourceToProvenance(result.metadata.source),
    version: result.metadata.pipelineVersion,
    generatedAt: result.metadata.processedAt,
    ttlMs: result.metadata.cacheTTL,
    trigger: context == null ? void 0 : context.trigger
  };
  var privacy = {
    piiSanitized: true,
    auditHash: result.metadata.source === 'cache' ? `cache_${result.metadata.processedAt}` : undefined
  };
  var freshnessMs = Date.now() - result.metadata.processedAt;
  var category = (context == null ? void 0 : context.baseCategory) || inferCategoryFromModule(module);
  if ((_result$insights = result.insights) != null && _result$insights.therapeutic) {
    result.insights.therapeutic.forEach(function (insight, index) {
      var confidence = insight.confidence || 0.7;
      var quality = {
        confidence: confidence,
        sampleSize: insight.dataPoints || 0,
        dataQuality: confidence,
        freshnessMs: freshnessMs,
        stability: insight.priority === 'high' ? 0.9 : 0.7
      };
      items.push({
        id: `${baseId}_insight_${index}`,
        kind: 'insight',
        category: category,
        module: module,
        provenance: provenance,
        quality: quality,
        privacy: privacy,
        payload: {
          title: 'Therapeutic Insight',
          summary: insight.text,
          metrics: {
            priority: insight.priority,
            category: insight.category
          },
          actions: []
        }
      });
    });
  }
  if ((_result$insights2 = result.insights) != null && _result$insights2.progress) {
    result.insights.progress.forEach(function (progress, index) {
      var confidence = 0.8;
      var quality = {
        confidence: confidence,
        sampleSize: progress.dataPoints || 1,
        dataQuality: 0.8,
        freshnessMs: freshnessMs,
        stability: 0.8
      };
      items.push({
        id: `${baseId}_analytics_${index}`,
        kind: 'analytics',
        category: category,
        module: module,
        provenance: provenance,
        quality: quality,
        privacy: privacy,
        payload: {
          title: `${progress.metric} Analytics`,
          summary: progress.interpretation,
          metrics: {
            metric: progress.metric,
            value: progress.value,
            change: progress.change,
            changeDirection: progress.changeDirection
          },
          actions: []
        }
      });
    });
  }
  if (result.patterns && Array.isArray(result.patterns)) {
    result.patterns.forEach(function (pattern, index) {
      var _pattern$dashboardMet, _pattern$data, _pattern$dashboardMet2;
      var confidence = pattern.confidence || 0.7;
      var sampleSize = ((_pattern$dashboardMet = pattern.dashboardMetrics) == null ? void 0 : _pattern$dashboardMet.sampleSize) || ((_pattern$data = pattern.data) == null ? void 0 : _pattern$data.sampleSize) || pattern.dataPoints || 0;
      var quality = {
        confidence: confidence,
        sampleSize: sampleSize,
        dataQuality: ((_pattern$dashboardMet2 = pattern.dashboardMetrics) == null ? void 0 : _pattern$dashboardMet2.dataQuality) || confidence,
        freshnessMs: freshnessMs,
        stability: pattern.severity === 'high' ? 0.9 : 0.7
      };
      items.push({
        id: `${baseId}_pattern_${index}`,
        kind: 'pattern',
        category: category,
        module: module,
        provenance: provenance,
        quality: quality,
        privacy: privacy,
        payload: {
          title: pattern.title || 'Behavior Pattern',
          summary: pattern.description || pattern.pattern || '',
          metrics: {
            type: pattern.type,
            severity: pattern.severity,
            temporal: pattern.temporal,
            dashboardMetrics: pattern.dashboardMetrics
          },
          actions: pattern.suggestion ? [{
            label: 'Apply Suggestion',
            screen: `/(tabs)/${module}`,
            params: {
              suggestion: pattern.suggestion
            }
          }] : []
        }
      });
    });
  }
  if (result.analytics) {
    Object.entries(result.analytics).forEach(function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        analyticsKey = _ref2[0],
        analyticsData = _ref2[1];
      if (!analyticsData || typeof analyticsData !== 'object') return;
      var confidence = analyticsData.confidence || 0.8;
      var sampleSize = analyticsData.sampleSize || 0;
      var quality = {
        confidence: confidence,
        sampleSize: sampleSize,
        dataQuality: analyticsData.dataQuality || confidence,
        freshnessMs: freshnessMs,
        stability: sampleSize >= 10 ? 0.9 : 0.7
      };
      items.push({
        id: `${baseId}_analytics_${analyticsKey}`,
        kind: 'analytics',
        category: analyticsKey,
        module: module,
        provenance: provenance,
        quality: quality,
        privacy: privacy,
        payload: {
          title: `${analyticsKey.toUpperCase()} Analytics`,
          summary: `Clinical-grade ${analyticsKey} analysis`,
          metrics: {
            volatility: analyticsData.volatility,
            weeklyDelta: analyticsData.weeklyDelta,
            baselines: analyticsData.baselines,
            correlations: analyticsData.correlations,
            profile: analyticsData.profile,
            bestTimes: analyticsData.bestTimes
          },
          actions: [{
            label: `View ${analyticsKey} Details`,
            screen: `/(tabs)/${analyticsKey === 'ocd' ? 'tracking' : analyticsKey}`
          }]
        }
      });
    });
  }
  return items;
}
function extractUIQualityMeta(items, preferredKind) {
  if (!items.length) return null;
  var targetItem = preferredKind ? items.find(function (item) {
    return item.kind === preferredKind;
  }) || items[0] : items[0];
  var totalSampleSize = items.reduce(function (sum, item) {
    return sum + (item.quality.sampleSize || 0);
  }, 0);
  var avgConfidence = items.reduce(function (sum, item) {
    return sum + (item.quality.confidence || 0);
  }, 0) / items.length;
  var minFreshnessMs = Math.min.apply(Math, (0, _toConsumableArray2.default)(items.map(function (item) {
    return item.quality.freshnessMs || Infinity;
  })));
  var aggregatedQuality = {
    confidence: avgConfidence,
    sampleSize: totalSampleSize,
    dataQuality: avgConfidence,
    freshnessMs: minFreshnessMs === Infinity ? 0 : minFreshnessMs
  };
  return {
    source: targetItem.provenance.source,
    qualityLevel: estimateQualityLevel(aggregatedQuality),
    sampleSize: totalSampleSize,
    freshnessMs: minFreshnessMs === Infinity ? 0 : minFreshnessMs
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,