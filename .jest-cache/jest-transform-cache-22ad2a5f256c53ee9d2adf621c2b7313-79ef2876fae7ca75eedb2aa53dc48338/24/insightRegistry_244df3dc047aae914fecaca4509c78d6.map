{"version":3,"names":["estimateQualityLevel","quality","_quality$confidence","confidence","_quality$sampleSize","sampleSize","_quality$dataQuality","dataQuality","_quality$freshnessMs","freshnessMs","Infinity","mapMetadataSourceToProvenance","metadataSource","inferCategoryFromModule","module","context","category","mapUnifiedResultToRegistryItems","result","_result$insights","_result$insights2","items","baseId","Date","now","provenance","source","metadata","version","pipelineVersion","generatedAt","processedAt","ttlMs","cacheTTL","trigger","privacy","piiSanitized","auditHash","undefined","baseCategory","insights","therapeutic","forEach","insight","index","dataPoints","stability","priority","push","id","kind","payload","title","summary","text","metrics","actions","progress","metric","interpretation","value","change","changeDirection","patterns","Array","isArray","pattern","_pattern$dashboardMet","_pattern$data","_pattern$dashboardMet2","dashboardMetrics","data","severity","description","type","temporal","suggestion","label","screen","params","analytics","Object","entries","_ref","_ref2","_slicedToArray2","default","analyticsKey","analyticsData","toUpperCase","volatility","weeklyDelta","baselines","correlations","profile","bestTimes","extractUIQualityMeta","preferredKind","length","targetItem","find","item","totalSampleSize","reduce","sum","avgConfidence","minFreshnessMs","Math","min","apply","_toConsumableArray2","map","aggregatedQuality","qualityLevel"],"sources":["insightRegistry.ts"],"sourcesContent":["/**\n * 📊 Insight Registry - Unified AI/Heuristic Output Standardization\n * \n * Standardizes all AI insights, patterns, analytics, and suggestions under a single\n * registry with consistent provenance and quality metadata.\n * \n * Privacy-first: Only derived metrics, no PII in registry items.\n */\n\nimport type { UnifiedPipelineResult } from '../core/UnifiedAIPipeline';\n\n// Core Types\nexport type InsightKind = 'insight' | 'pattern' | 'analytics' | 'suggestion';\nexport type InsightCategory = 'mood' | 'cbt' | 'ocd' | 'breathwork' | 'timeline';\nexport type InsightModule = 'today' | 'mood' | 'cbt' | 'tracking';\nexport type ProvenanceSource = 'unified' | 'cache' | 'heuristic' | 'llm';\nexport type QualityLevel = 'low' | 'medium' | 'high';\n\nexport interface InsightRegistryItem {\n  id: string;\n  kind: InsightKind;\n  category: InsightCategory;\n  module: InsightModule;\n  provenance: {\n    source: ProvenanceSource;\n    version?: string;\n    generatedAt: number;\n    ttlMs?: number;\n    trigger?: string;\n  };\n  quality: {\n    confidence?: number;\n    sampleSize?: number;\n    dataQuality?: number;\n    freshnessMs?: number;\n    stability?: number;\n  };\n  privacy: {\n    piiSanitized: boolean;\n    auditHash?: string;\n  };\n  payload: {\n    title?: string;\n    summary?: string;\n    metrics?: Record<string, any>;\n    actions?: Array<{ label: string; screen: string; params?: any }>;\n  };\n}\n\n/**\n * 📊 Estimate quality level from insight metadata\n */\nexport function estimateQualityLevel(quality: InsightRegistryItem['quality']): QualityLevel {\n  const { confidence = 0, sampleSize = 0, dataQuality = 0, freshnessMs = Infinity } = quality;\n  \n  // High quality: high confidence + good sample + fresh data\n  if (confidence >= 0.8 && sampleSize >= 7 && freshnessMs < 30 * 60 * 1000) { // < 30min\n    return 'high';\n  }\n  \n  // Medium quality: decent confidence + some data\n  if (confidence >= 0.6 && sampleSize >= 3 && dataQuality >= 0.6) {\n    return 'medium';\n  }\n  \n  // Low quality: everything else\n  return 'low';\n}\n\n/**\n * 🔄 Map UnifiedPipelineResult metadata source to ProvenanceSource\n */\nexport function mapMetadataSourceToProvenance(metadataSource: string): ProvenanceSource {\n  switch (metadataSource) {\n    case 'cache':\n      return 'cache';\n    case 'fresh':\n      // If fresh but with heuristics, map to heuristic; with LLM, map to llm\n      // For now, assume fresh = unified (deep analysis)\n      return 'unified';\n    default:\n      // Fallback for unknown sources\n      return 'heuristic';\n  }\n}\n\n/**\n * 🎯 Determine category from module context\n */\nfunction inferCategoryFromModule(module: InsightModule, context?: any): InsightCategory {\n  switch (module) {\n    case 'mood':\n      return 'mood';\n    case 'cbt':\n      return 'cbt';\n    case 'tracking':\n      return 'ocd';\n    case 'today':\n      // For today, infer from content or default to timeline\n      return context?.category || 'timeline';\n    default:\n      return 'timeline';\n  }\n}\n\n/**\n * 🗺️ Map UnifiedPipelineResult to standardized registry items\n */\nexport function mapUnifiedResultToRegistryItems(\n  result: UnifiedPipelineResult,\n  module: InsightModule,\n  context?: { trigger?: string; baseCategory?: InsightCategory }\n): InsightRegistryItem[] {\n  const items: InsightRegistryItem[] = [];\n  const baseId = `${module}_${Date.now()}`;\n  \n  // Extract common metadata\n  const provenance: InsightRegistryItem['provenance'] = {\n    source: mapMetadataSourceToProvenance(result.metadata.source),\n    version: result.metadata.pipelineVersion,\n    generatedAt: result.metadata.processedAt,\n    ttlMs: result.metadata.cacheTTL,\n    trigger: context?.trigger,\n  };\n  \n  const privacy: InsightRegistryItem['privacy'] = {\n    piiSanitized: true, // We already sanitize PII\n    auditHash: result.metadata.source === 'cache' ? `cache_${result.metadata.processedAt}` : undefined,\n  };\n  \n  const freshnessMs = Date.now() - result.metadata.processedAt;\n  const category = context?.baseCategory || inferCategoryFromModule(module);\n  \n  // 1. Map therapeutic insights → kind='insight'\n  if (result.insights?.therapeutic) {\n    result.insights.therapeutic.forEach((insight, index) => {\n      const confidence = insight.confidence || 0.7;\n      const quality: InsightRegistryItem['quality'] = {\n        confidence,\n        sampleSize: insight.dataPoints || 0,\n        dataQuality: confidence, // Use confidence as proxy for data quality\n        freshnessMs,\n        stability: insight.priority === 'high' ? 0.9 : 0.7, // High priority = more stable\n      };\n      \n      items.push({\n        id: `${baseId}_insight_${index}`,\n        kind: 'insight',\n        category,\n        module,\n        provenance,\n        quality,\n        privacy,\n        payload: {\n          title: 'Therapeutic Insight',\n          summary: insight.text,\n          metrics: {\n            priority: insight.priority,\n            category: insight.category,\n          },\n          actions: [], // No specific actions for generic insights\n        },\n      });\n    });\n  }\n  \n  // 2. Map progress insights → kind='analytics'\n  if (result.insights?.progress) {\n    result.insights.progress.forEach((progress, index) => {\n      const confidence = 0.8; // Progress metrics typically high confidence\n      const quality: InsightRegistryItem['quality'] = {\n        confidence,\n        sampleSize: progress.dataPoints || 1,\n        dataQuality: 0.8,\n        freshnessMs,\n        stability: 0.8,\n      };\n      \n      items.push({\n        id: `${baseId}_analytics_${index}`,\n        kind: 'analytics',\n        category,\n        module,\n        provenance,\n        quality,\n        privacy,\n        payload: {\n          title: `${progress.metric} Analytics`,\n          summary: progress.interpretation,\n          metrics: {\n            metric: progress.metric,\n            value: progress.value,\n            change: progress.change,\n            changeDirection: progress.changeDirection,\n          },\n          actions: [], // Analytics don't have direct actions\n        },\n      });\n    });\n  }\n  \n  // 3. Map patterns → kind='pattern'\n  if (result.patterns && Array.isArray(result.patterns)) {\n    result.patterns.forEach((pattern, index) => {\n      const confidence = pattern.confidence || 0.7;\n      const sampleSize = pattern.dashboardMetrics?.sampleSize || \n                        pattern.data?.sampleSize || \n                        pattern.dataPoints || 0;\n      \n      const quality: InsightRegistryItem['quality'] = {\n        confidence,\n        sampleSize,\n        dataQuality: pattern.dashboardMetrics?.dataQuality || confidence,\n        freshnessMs,\n        stability: pattern.severity === 'high' ? 0.9 : 0.7,\n      };\n      \n      items.push({\n        id: `${baseId}_pattern_${index}`,\n        kind: 'pattern',\n        category,\n        module,\n        provenance,\n        quality,\n        privacy,\n        payload: {\n          title: pattern.title || 'Behavior Pattern',\n          summary: pattern.description || pattern.pattern || '',\n          metrics: {\n            type: pattern.type,\n            severity: pattern.severity,\n            temporal: pattern.temporal,\n            dashboardMetrics: pattern.dashboardMetrics,\n          },\n          actions: pattern.suggestion ? [\n            { label: 'Apply Suggestion', screen: `/(tabs)/${module}`, params: { suggestion: pattern.suggestion } }\n          ] : [],\n        },\n      });\n    });\n  }\n  \n  // 4. Map analytics blocks → kind='analytics' (enhanced)\n  if (result.analytics) {\n    Object.entries(result.analytics).forEach(([analyticsKey, analyticsData]: [string, any]) => {\n      if (!analyticsData || typeof analyticsData !== 'object') return;\n      \n      const confidence = analyticsData.confidence || 0.8;\n      const sampleSize = analyticsData.sampleSize || 0;\n      \n      const quality: InsightRegistryItem['quality'] = {\n        confidence,\n        sampleSize,\n        dataQuality: analyticsData.dataQuality || confidence,\n        freshnessMs,\n        stability: sampleSize >= 10 ? 0.9 : 0.7,\n      };\n      \n      items.push({\n        id: `${baseId}_analytics_${analyticsKey}`,\n        kind: 'analytics',\n        category: analyticsKey as InsightCategory, // mood, cbt, etc.\n        module,\n        provenance,\n        quality,\n        privacy,\n        payload: {\n          title: `${analyticsKey.toUpperCase()} Analytics`,\n          summary: `Clinical-grade ${analyticsKey} analysis`,\n          metrics: {\n            volatility: analyticsData.volatility,\n            weeklyDelta: analyticsData.weeklyDelta,\n            baselines: analyticsData.baselines,\n            correlations: analyticsData.correlations,\n            profile: analyticsData.profile,\n            bestTimes: analyticsData.bestTimes,\n          },\n          actions: [\n            { label: `View ${analyticsKey} Details`, screen: `/(tabs)/${analyticsKey === 'ocd' ? 'tracking' : analyticsKey}` }\n          ],\n        },\n      });\n    });\n  }\n  \n  return items;\n}\n\n/**\n * 🔍 Extract quality metadata for UI display\n */\nexport function extractUIQualityMeta(\n  items: InsightRegistryItem[],\n  preferredKind?: InsightKind\n): {\n  source: ProvenanceSource;\n  qualityLevel: QualityLevel;\n  sampleSize: number;\n  freshnessMs: number;\n} | null {\n  if (!items.length) return null;\n  \n  // Prefer specific kind if specified, otherwise use first item\n  const targetItem = preferredKind \n    ? items.find(item => item.kind === preferredKind) || items[0]\n    : items[0];\n  \n  // Aggregate quality from all items for better representative quality\n  const totalSampleSize = items.reduce((sum, item) => sum + (item.quality.sampleSize || 0), 0);\n  const avgConfidence = items.reduce((sum, item) => sum + (item.quality.confidence || 0), 0) / items.length;\n  const minFreshnessMs = Math.min(...items.map(item => item.quality.freshnessMs || Infinity));\n  \n  const aggregatedQuality: InsightRegistryItem['quality'] = {\n    confidence: avgConfidence,\n    sampleSize: totalSampleSize,\n    dataQuality: avgConfidence, // Use confidence as proxy\n    freshnessMs: minFreshnessMs === Infinity ? 0 : minFreshnessMs,\n  };\n  \n  return {\n    source: targetItem.provenance.source,\n    qualityLevel: estimateQualityLevel(aggregatedQuality),\n    sampleSize: totalSampleSize,\n    freshnessMs: minFreshnessMs === Infinity ? 0 : minFreshnessMs,\n  };\n}\n"],"mappings":"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","ignoreList":[]}