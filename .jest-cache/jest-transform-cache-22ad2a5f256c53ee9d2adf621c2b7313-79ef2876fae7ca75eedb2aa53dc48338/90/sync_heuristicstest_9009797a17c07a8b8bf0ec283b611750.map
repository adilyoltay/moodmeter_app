{"version":3,"names":["_syncHeuristics","require","describe","test","expect","determineConcurrency","toBe"],"sources":["sync_heuristics.test.ts"],"sourcesContent":["import { determineConcurrency } from '@/utils/syncHeuristics';\n\ndescribe('sync heuristics - determineConcurrency', () => {\n  test('defaults to 2', () => {\n    expect(determineConcurrency(80, 800, 5)).toBe(2);\n  });\n  test('upscales to 3 on good metrics and some queue', () => {\n    expect(determineConcurrency(92, 350, 20)).toBe(3);\n  });\n  test('upscales to 4 on excellent metrics and large queue', () => {\n    expect(determineConcurrency(97, 250, 150)).toBe(4);\n  });\n  test('downscales to 1 on poor metrics', () => {\n    expect(determineConcurrency(55, 1300, 50)).toBe(1);\n  });\n  test('caps within 1..4', () => {\n    expect(determineConcurrency(999, -10, 10000)).toBe(4);\n    expect(determineConcurrency(-10, 99999, 0)).toBe(1);\n  });\n});\n\n"],"mappings":"AAAA,IAAAA,eAAA,GAAAC,OAAA;AAEAC,QAAQ,CAAC,wCAAwC,EAAE,YAAM;EACvDC,IAAI,CAAC,eAAe,EAAE,YAAM;IAC1BC,MAAM,CAAC,IAAAC,oCAAoB,EAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAClD,CAAC,CAAC;EACFH,IAAI,CAAC,8CAA8C,EAAE,YAAM;IACzDC,MAAM,CAAC,IAAAC,oCAAoB,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACnD,CAAC,CAAC;EACFH,IAAI,CAAC,oDAAoD,EAAE,YAAM;IAC/DC,MAAM,CAAC,IAAAC,oCAAoB,EAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACpD,CAAC,CAAC;EACFH,IAAI,CAAC,iCAAiC,EAAE,YAAM;IAC5CC,MAAM,CAAC,IAAAC,oCAAoB,EAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACpD,CAAC,CAAC;EACFH,IAAI,CAAC,kBAAkB,EAAE,YAAM;IAC7BC,MAAM,CAAC,IAAAC,oCAAoB,EAAC,GAAG,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACrDF,MAAM,CAAC,IAAAC,oCAAoB,EAAC,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACrD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}