cb8b37a8f57d11c1b944a7f209ecaedf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.syncCircuitBreaker = exports.CircuitState = exports.CircuitBreaker = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var CircuitState = exports.CircuitState = function (CircuitState) {
  CircuitState["CLOSED"] = "CLOSED";
  CircuitState["OPEN"] = "OPEN";
  CircuitState["HALF_OPEN"] = "HALF_OPEN";
  return CircuitState;
}({});
var CircuitBreaker = exports.CircuitBreaker = function () {
  function CircuitBreaker(config) {
    (0, _classCallCheck2.default)(this, CircuitBreaker);
    this.config = config;
    this.state = CircuitState.CLOSED;
    this.failureCount = 0;
    this.successCount = 0;
    this.lastFailureTime = null;
    this.halfOpenAttempts = 0;
    this.stateChangeCallbacks = new Set();
    this.startMonitoring();
  }
  return (0, _createClass2.default)(CircuitBreaker, [{
    key: "execute",
    value: function () {
      var _execute = (0, _asyncToGenerator2.default)(function* (fn) {
        this.checkForStateTransition();
        if (this.state === CircuitState.OPEN) {
          throw new Error('CIRCUIT_OPEN');
        }
        try {
          var result = yield fn();
          this.recordSuccess();
          return result;
        } catch (e) {
          this.recordFailure();
          throw e;
        }
      });
      function execute(_x) {
        return _execute.apply(this, arguments);
      }
      return execute;
    }()
  }, {
    key: "recordSuccess",
    value: function recordSuccess() {
      this.successCount++;
      if (this.state === CircuitState.HALF_OPEN) {
        this.halfOpenAttempts++;
        if (this.halfOpenAttempts >= this.config.halfOpenMaxAttempts) {
          this.transitionTo(CircuitState.CLOSED);
        }
      } else if (this.state === CircuitState.CLOSED) {
        this.failureCount = 0;
      }
    }
  }, {
    key: "recordFailure",
    value: function recordFailure() {
      this.failureCount++;
      this.lastFailureTime = Date.now();
      if (this.state === CircuitState.HALF_OPEN) {
        this.transitionTo(CircuitState.OPEN);
      } else if (this.state === CircuitState.CLOSED && this.failureCount >= this.config.failureThreshold) {
        this.transitionTo(CircuitState.OPEN);
      }
    }
  }, {
    key: "checkForStateTransition",
    value: function checkForStateTransition() {
      if (this.state === CircuitState.OPEN && this.lastFailureTime && Date.now() - this.lastFailureTime >= this.config.resetTimeout) {
        this.transitionTo(CircuitState.HALF_OPEN);
      }
    }
  }, {
    key: "transitionTo",
    value: function transitionTo(newState) {
      this.state = newState;
      switch (newState) {
        case CircuitState.CLOSED:
          this.failureCount = 0;
          this.halfOpenAttempts = 0;
          break;
        case CircuitState.OPEN:
          this.halfOpenAttempts = 0;
          break;
        case CircuitState.HALF_OPEN:
          this.halfOpenAttempts = 0;
          break;
      }
      this.stateChangeCallbacks.forEach(function (cb) {
        return cb(newState);
      });
    }
  }, {
    key: "startMonitoring",
    value: function startMonitoring() {
      var _this = this;
      setInterval(function () {
        if (_this.lastFailureTime && Date.now() - _this.lastFailureTime > _this.config.monitoringPeriod) {
          _this.failureCount = Math.max(0, _this.failureCount - 1);
        }
      }, 10000);
    }
  }, {
    key: "onStateChange",
    value: function onStateChange(callback) {
      var _this2 = this;
      this.stateChangeCallbacks.add(callback);
      return function () {
        return _this2.stateChangeCallbacks.delete(callback);
      };
    }
  }, {
    key: "getState",
    value: function getState() {
      return this.state;
    }
  }, {
    key: "getStatistics",
    value: function getStatistics() {
      return {
        state: this.state,
        failureCount: this.failureCount,
        successCount: this.successCount,
        lastFailureTime: this.lastFailureTime
      };
    }
  }, {
    key: "reset",
    value: function reset() {
      this.transitionTo(CircuitState.CLOSED);
      this.failureCount = 0;
      this.successCount = 0;
      this.lastFailureTime = null;
    }
  }]);
}();
var syncCircuitBreaker = exports.syncCircuitBreaker = new CircuitBreaker({
  failureThreshold: 5,
  resetTimeout: 60000,
  monitoringPeriod: 120000,
  halfOpenMaxAttempts: 3
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,