{"version":3,"names":["CircuitState","exports","CircuitBreaker","config","_classCallCheck2","default","state","CLOSED","failureCount","successCount","lastFailureTime","halfOpenAttempts","stateChangeCallbacks","Set","startMonitoring","_createClass2","key","value","_execute","_asyncToGenerator2","fn","checkForStateTransition","OPEN","Error","result","recordSuccess","e","recordFailure","execute","_x","apply","arguments","HALF_OPEN","halfOpenMaxAttempts","transitionTo","Date","now","failureThreshold","resetTimeout","newState","forEach","cb","_this","setInterval","monitoringPeriod","Math","max","onStateChange","callback","_this2","add","delete","getState","getStatistics","reset","syncCircuitBreaker"],"sources":["circuitBreaker.ts"],"sourcesContent":["export enum CircuitState {\n  CLOSED = 'CLOSED',\n  OPEN = 'OPEN',\n  HALF_OPEN = 'HALF_OPEN',\n}\n\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  resetTimeout: number; // ms\n  monitoringPeriod: number; // ms\n  halfOpenMaxAttempts: number;\n}\n\nexport class CircuitBreaker {\n  private state: CircuitState = CircuitState.CLOSED;\n  private failureCount = 0;\n  private successCount = 0;\n  private lastFailureTime: number | null = null;\n  private halfOpenAttempts = 0;\n  private stateChangeCallbacks: Set<(state: CircuitState) => void> = new Set();\n\n  constructor(private config: CircuitBreakerConfig) {\n    this.startMonitoring();\n  }\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    this.checkForStateTransition();\n    if (this.state === CircuitState.OPEN) {\n      throw new Error('CIRCUIT_OPEN');\n    }\n    try {\n      const result = await fn();\n      this.recordSuccess();\n      return result;\n    } catch (e) {\n      this.recordFailure();\n      throw e;\n    }\n  }\n\n  private recordSuccess(): void {\n    this.successCount++;\n    if (this.state === CircuitState.HALF_OPEN) {\n      this.halfOpenAttempts++;\n      if (this.halfOpenAttempts >= this.config.halfOpenMaxAttempts) {\n        this.transitionTo(CircuitState.CLOSED);\n      }\n    } else if (this.state === CircuitState.CLOSED) {\n      this.failureCount = 0;\n    }\n  }\n\n  private recordFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n    if (this.state === CircuitState.HALF_OPEN) {\n      this.transitionTo(CircuitState.OPEN);\n    } else if (this.state === CircuitState.CLOSED && this.failureCount >= this.config.failureThreshold) {\n      this.transitionTo(CircuitState.OPEN);\n    }\n  }\n\n  private checkForStateTransition(): void {\n    if (\n      this.state === CircuitState.OPEN &&\n      this.lastFailureTime &&\n      Date.now() - this.lastFailureTime >= this.config.resetTimeout\n    ) {\n      this.transitionTo(CircuitState.HALF_OPEN);\n    }\n  }\n\n  private transitionTo(newState: CircuitState): void {\n    this.state = newState;\n    switch (newState) {\n      case CircuitState.CLOSED:\n        this.failureCount = 0;\n        this.halfOpenAttempts = 0;\n        break;\n      case CircuitState.OPEN:\n        this.halfOpenAttempts = 0;\n        break;\n      case CircuitState.HALF_OPEN:\n        this.halfOpenAttempts = 0;\n        break;\n    }\n    this.stateChangeCallbacks.forEach((cb) => cb(newState));\n  }\n\n  private startMonitoring(): void {\n    setInterval(() => {\n      if (\n        this.lastFailureTime &&\n        Date.now() - this.lastFailureTime > this.config.monitoringPeriod\n      ) {\n        this.failureCount = Math.max(0, this.failureCount - 1);\n      }\n    }, 10_000);\n  }\n\n  onStateChange(callback: (state: CircuitState) => void): () => void {\n    this.stateChangeCallbacks.add(callback);\n    return () => this.stateChangeCallbacks.delete(callback);\n  }\n\n  getState(): CircuitState {\n    return this.state;\n  }\n\n  getStatistics(): { state: CircuitState; failureCount: number; successCount: number; lastFailureTime: number | null } {\n    return { state: this.state, failureCount: this.failureCount, successCount: this.successCount, lastFailureTime: this.lastFailureTime };\n  }\n\n  reset(): void {\n    this.transitionTo(CircuitState.CLOSED);\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.lastFailureTime = null;\n  }\n}\n\nexport const syncCircuitBreaker = new CircuitBreaker({\n  failureThreshold: 5,\n  resetTimeout: 60_000,\n  monitoringPeriod: 120_000,\n  halfOpenMaxAttempts: 3,\n});\n\n\n"],"mappings":";;;;;;;;IAAYA,YAAY,GAAAC,OAAA,CAAAD,YAAA,aAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;AAAA,IAaXE,cAAc,GAAAD,OAAA,CAAAC,cAAA;EAQzB,SAAAA,eAAoBC,MAA4B,EAAE;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAH,cAAA;IAAA,KAA9BC,MAA4B,GAA5BA,MAA4B;IAAA,KAPxCG,KAAK,GAAiBN,YAAY,CAACO,MAAM;IAAA,KACzCC,YAAY,GAAG,CAAC;IAAA,KAChBC,YAAY,GAAG,CAAC;IAAA,KAChBC,eAAe,GAAkB,IAAI;IAAA,KACrCC,gBAAgB,GAAG,CAAC;IAAA,KACpBC,oBAAoB,GAAuC,IAAIC,GAAG,CAAC,CAAC;IAG1E,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB;EAAC,WAAAC,aAAA,CAAAV,OAAA,EAAAH,cAAA;IAAAc,GAAA;IAAAC,KAAA;MAAA,IAAAC,QAAA,OAAAC,kBAAA,CAAAd,OAAA,EAED,WAAiBe,EAAoB,EAAc;QACjD,IAAI,CAACC,uBAAuB,CAAC,CAAC;QAC9B,IAAI,IAAI,CAACf,KAAK,KAAKN,YAAY,CAACsB,IAAI,EAAE;UACpC,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;QACjC;QACA,IAAI;UACF,IAAMC,MAAM,SAASJ,EAAE,CAAC,CAAC;UACzB,IAAI,CAACK,aAAa,CAAC,CAAC;UACpB,OAAOD,MAAM;QACf,CAAC,CAAC,OAAOE,CAAC,EAAE;UACV,IAAI,CAACC,aAAa,CAAC,CAAC;UACpB,MAAMD,CAAC;QACT;MACF,CAAC;MAAA,SAbKE,OAAOA,CAAAC,EAAA;QAAA,OAAAX,QAAA,CAAAY,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAPH,OAAO;IAAA;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAeb,SAAQQ,aAAaA,CAAA,EAAS;MAC5B,IAAI,CAAChB,YAAY,EAAE;MACnB,IAAI,IAAI,CAACH,KAAK,KAAKN,YAAY,CAACgC,SAAS,EAAE;QACzC,IAAI,CAACrB,gBAAgB,EAAE;QACvB,IAAI,IAAI,CAACA,gBAAgB,IAAI,IAAI,CAACR,MAAM,CAAC8B,mBAAmB,EAAE;UAC5D,IAAI,CAACC,YAAY,CAAClC,YAAY,CAACO,MAAM,CAAC;QACxC;MACF,CAAC,MAAM,IAAI,IAAI,CAACD,KAAK,KAAKN,YAAY,CAACO,MAAM,EAAE;QAC7C,IAAI,CAACC,YAAY,GAAG,CAAC;MACvB;IACF;EAAC;IAAAQ,GAAA;IAAAC,KAAA,EAED,SAAQU,aAAaA,CAAA,EAAS;MAC5B,IAAI,CAACnB,YAAY,EAAE;MACnB,IAAI,CAACE,eAAe,GAAGyB,IAAI,CAACC,GAAG,CAAC,CAAC;MACjC,IAAI,IAAI,CAAC9B,KAAK,KAAKN,YAAY,CAACgC,SAAS,EAAE;QACzC,IAAI,CAACE,YAAY,CAAClC,YAAY,CAACsB,IAAI,CAAC;MACtC,CAAC,MAAM,IAAI,IAAI,CAAChB,KAAK,KAAKN,YAAY,CAACO,MAAM,IAAI,IAAI,CAACC,YAAY,IAAI,IAAI,CAACL,MAAM,CAACkC,gBAAgB,EAAE;QAClG,IAAI,CAACH,YAAY,CAAClC,YAAY,CAACsB,IAAI,CAAC;MACtC;IACF;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAQI,uBAAuBA,CAAA,EAAS;MACtC,IACE,IAAI,CAACf,KAAK,KAAKN,YAAY,CAACsB,IAAI,IAChC,IAAI,CAACZ,eAAe,IACpByB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC1B,eAAe,IAAI,IAAI,CAACP,MAAM,CAACmC,YAAY,EAC7D;QACA,IAAI,CAACJ,YAAY,CAAClC,YAAY,CAACgC,SAAS,CAAC;MAC3C;IACF;EAAC;IAAAhB,GAAA;IAAAC,KAAA,EAED,SAAQiB,YAAYA,CAACK,QAAsB,EAAQ;MACjD,IAAI,CAACjC,KAAK,GAAGiC,QAAQ;MACrB,QAAQA,QAAQ;QACd,KAAKvC,YAAY,CAACO,MAAM;UACtB,IAAI,CAACC,YAAY,GAAG,CAAC;UACrB,IAAI,CAACG,gBAAgB,GAAG,CAAC;UACzB;QACF,KAAKX,YAAY,CAACsB,IAAI;UACpB,IAAI,CAACX,gBAAgB,GAAG,CAAC;UACzB;QACF,KAAKX,YAAY,CAACgC,SAAS;UACzB,IAAI,CAACrB,gBAAgB,GAAG,CAAC;UACzB;MACJ;MACA,IAAI,CAACC,oBAAoB,CAAC4B,OAAO,CAAC,UAACC,EAAE;QAAA,OAAKA,EAAE,CAACF,QAAQ,CAAC;MAAA,EAAC;IACzD;EAAC;IAAAvB,GAAA;IAAAC,KAAA,EAED,SAAQH,eAAeA,CAAA,EAAS;MAAA,IAAA4B,KAAA;MAC9BC,WAAW,CAAC,YAAM;QAChB,IACED,KAAI,CAAChC,eAAe,IACpByB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGM,KAAI,CAAChC,eAAe,GAAGgC,KAAI,CAACvC,MAAM,CAACyC,gBAAgB,EAChE;UACAF,KAAI,CAAClC,YAAY,GAAGqC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,KAAI,CAAClC,YAAY,GAAG,CAAC,CAAC;QACxD;MACF,CAAC,EAAE,KAAM,CAAC;IACZ;EAAC;IAAAQ,GAAA;IAAAC,KAAA,EAED,SAAA8B,aAAaA,CAACC,QAAuC,EAAc;MAAA,IAAAC,MAAA;MACjE,IAAI,CAACrC,oBAAoB,CAACsC,GAAG,CAACF,QAAQ,CAAC;MACvC,OAAO;QAAA,OAAMC,MAAI,CAACrC,oBAAoB,CAACuC,MAAM,CAACH,QAAQ,CAAC;MAAA;IACzD;EAAC;IAAAhC,GAAA;IAAAC,KAAA,EAED,SAAAmC,QAAQA,CAAA,EAAiB;MACvB,OAAO,IAAI,CAAC9C,KAAK;IACnB;EAAC;IAAAU,GAAA;IAAAC,KAAA,EAED,SAAAoC,aAAaA,CAAA,EAAwG;MACnH,OAAO;QAAE/C,KAAK,EAAE,IAAI,CAACA,KAAK;QAAEE,YAAY,EAAE,IAAI,CAACA,YAAY;QAAEC,YAAY,EAAE,IAAI,CAACA,YAAY;QAAEC,eAAe,EAAE,IAAI,CAACA;MAAgB,CAAC;IACvI;EAAC;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAqC,KAAKA,CAAA,EAAS;MACZ,IAAI,CAACpB,YAAY,CAAClC,YAAY,CAACO,MAAM,CAAC;MACtC,IAAI,CAACC,YAAY,GAAG,CAAC;MACrB,IAAI,CAACC,YAAY,GAAG,CAAC;MACrB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC7B;EAAC;AAAA;AAGI,IAAM6C,kBAAkB,GAAAtD,OAAA,CAAAsD,kBAAA,GAAG,IAAIrD,cAAc,CAAC;EACnDmC,gBAAgB,EAAE,CAAC;EACnBC,YAAY,EAAE,KAAM;EACpBM,gBAAgB,EAAE,MAAO;EACzBX,mBAAmB,EAAE;AACvB,CAAC,CAAC","ignoreList":[]}