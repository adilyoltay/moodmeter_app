97e31cd86bcc96226aa3078ad9bcb1a9
_getJestObj().mock("../../services/supabase", function () {
  var _require = require("./utils/supabaseTestClient"),
    createSupabaseTestClient = _require.createSupabaseTestClient;
  var client = createSupabaseTestClient();
  return {
    __esModule: true,
    default: {
      supabaseClient: client
    },
    supabaseClient: client
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require2 = require("../../features/ai/core/UnifiedAIPipeline"),
  unifiedPipeline = _require2.unifiedPipeline;
var _require3 = require("./utils/supabaseTestClient"),
  createSupabaseTestClient = _require3.createSupabaseTestClient;
var userId = process.env.TEST_SEED_USER_ID || '00000000-0000-0000-0000-000000000001';
var supabase = createSupabaseTestClient();
function cleanup() {
  return _cleanup.apply(this, arguments);
}
function _cleanup() {
  _cleanup = (0, _asyncToGenerator2.default)(function* () {
    yield supabase.from('ai_telemetry').delete().eq('user_id', userId);
  });
  return _cleanup.apply(this, arguments);
}
describe('Live Telemetry Supabase', function () {
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    process.env.TEST_SEED_USER_ID = userId;
    yield cleanup();
  }));
  afterAll((0, _asyncToGenerator2.default)(function* () {
    yield cleanup();
  }));
  it('[QRlive:telemetry:started] and [QRlive:telemetry:completed] are recorded', (0, _asyncToGenerator2.default)(function* () {
    var moods = Array.from({
      length: 6
    }, function (_, i) {
      return {
        timestamp: Date.now() - i * 900e3,
        mood_score: 6
      };
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        moods: moods
      },
      context: {
        source: 'mood'
      }
    });
    yield new Promise(function (r) {
      return setTimeout(r, 150);
    });
    var _yield$supabase$from$ = yield supabase.from('ai_telemetry').select('event_type').eq('user_id', userId),
      data = _yield$supabase$from$.data,
      error = _yield$supabase$from$.error;
    expect(error).toBeNull();
    var events = (data || []).map(function (r) {
      return String(r.event_type);
    });
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_started');
    })).toBe(true);
    expect(events.some(function (e) {
      return e.includes('unified_pipeline_completed');
    })).toBe(true);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJjcmVhdGVTdXBhYmFzZVRlc3RDbGllbnQiLCJjbGllbnQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInN1cGFiYXNlQ2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZXF1aXJlNCIsImplc3QiLCJfcmVxdWlyZTIiLCJ1bmlmaWVkUGlwZWxpbmUiLCJfcmVxdWlyZTMiLCJ1c2VySWQiLCJwcm9jZXNzIiwiZW52IiwiVEVTVF9TRUVEX1VTRVJfSUQiLCJzdXBhYmFzZSIsImNsZWFudXAiLCJfY2xlYW51cCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZnJvbSIsImRlbGV0ZSIsImVxIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJURVNUX01PREUiLCJURVNUX1RUTF9NUyIsIlRFU1RfUElQRUxJTkVfU1RVQiIsIkVYUE9fUFVCTElDX0VOQUJMRV9BSSIsImFmdGVyQWxsIiwiaXQiLCJtb29kcyIsIkFycmF5IiwibGVuZ3RoIiwiXyIsImkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibW9vZF9zY29yZSIsInR5cGUiLCJjb250ZW50IiwiY29udGV4dCIsInNvdXJjZSIsIlByb21pc2UiLCJyIiwic2V0VGltZW91dCIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJCIsInNlbGVjdCIsImRhdGEiLCJlcnJvciIsImV4cGVjdCIsInRvQmVOdWxsIiwiZXZlbnRzIiwibWFwIiwiU3RyaW5nIiwiZXZlbnRfdHlwZSIsInNvbWUiLCJlIiwiaW5jbHVkZXMiLCJ0b0JlIl0sInNvdXJjZXMiOlsiTGl2ZVRlbGVtZXRyeVN1cGFiYXNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaXZlIFN1cGFiYXNlIFRlc3RzIOKAlCBUZWxlbWV0cnkgKFFSbGl2ZSlcbiAqIFRhZ3M6IFtRUmxpdmU6dGVsZW1ldHJ5OnN0YXJ0ZWRdIFtRUmxpdmU6dGVsZW1ldHJ5OmNvbXBsZXRlZF1cbiAqL1xuamVzdC5tb2NrKCdAL3NlcnZpY2VzL3N1cGFiYXNlJywgKCkgPT4ge1xuICBjb25zdCB7IGNyZWF0ZVN1cGFiYXNlVGVzdENsaWVudCB9ID0gcmVxdWlyZSgnLi91dGlscy9zdXBhYmFzZVRlc3RDbGllbnQnKTtcbiAgY29uc3QgY2xpZW50ID0gY3JlYXRlU3VwYWJhc2VUZXN0Q2xpZW50KCk7XG4gIHJldHVybiB7XG4gICAgX19lc01vZHVsZTogdHJ1ZSxcbiAgICBkZWZhdWx0OiB7IHN1cGFiYXNlQ2xpZW50OiBjbGllbnQgfSxcbiAgICBzdXBhYmFzZUNsaWVudDogY2xpZW50LFxuICB9O1xufSk7XG5cbmNvbnN0IHsgdW5pZmllZFBpcGVsaW5lIH0gPSByZXF1aXJlKCdAL2ZlYXR1cmVzL2FpL2NvcmUvVW5pZmllZEFJUGlwZWxpbmUnKTtcbmNvbnN0IHsgY3JlYXRlU3VwYWJhc2VUZXN0Q2xpZW50IH0gPSByZXF1aXJlKCcuL3V0aWxzL3N1cGFiYXNlVGVzdENsaWVudCcpO1xuXG5jb25zdCB1c2VySWQgPSBwcm9jZXNzLmVudi5URVNUX1NFRURfVVNFUl9JRCB8fCAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxJztcbmNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU3VwYWJhc2VUZXN0Q2xpZW50KCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gIGF3YWl0IHN1cGFiYXNlLmZyb20oJ2FpX3RlbGVtZXRyeScpLmRlbGV0ZSgpLmVxKCd1c2VyX2lkJywgdXNlcklkKTtcbn1cblxuZGVzY3JpYmUoJ0xpdmUgVGVsZW1ldHJ5IFN1cGFiYXNlJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LlRFU1RfTU9ERSA9ICcxJztcbiAgICBwcm9jZXNzLmVudi5URVNUX1RUTF9NUyA9ICc1MDAwJztcbiAgICBwcm9jZXNzLmVudi5URVNUX1BJUEVMSU5FX1NUVUIgPSAnMCc7XG4gICAgcHJvY2Vzcy5lbnYuRVhQT19QVUJMSUNfRU5BQkxFX0FJID0gJ3RydWUnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfU0VFRF9VU0VSX0lEID0gdXNlcklkO1xuICAgIGF3YWl0IGNsZWFudXAoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGNsZWFudXAoKTtcbiAgfSk7XG5cbiAgaXQoJ1tRUmxpdmU6dGVsZW1ldHJ5OnN0YXJ0ZWRdIGFuZCBbUVJsaXZlOnRlbGVtZXRyeTpjb21wbGV0ZWRdIGFyZSByZWNvcmRlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb29kcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDYgfSwgKF8sIGkpID0+ICh7IHRpbWVzdGFtcDogRGF0ZS5ub3coKSAtIGkgKiA5MDBlMywgbW9vZF9zY29yZTogNiB9KSk7XG4gICAgYXdhaXQgdW5pZmllZFBpcGVsaW5lLnByb2Nlc3MoeyB1c2VySWQsIHR5cGU6ICdkYXRhJywgY29udGVudDogeyBtb29kcyB9LCBjb250ZXh0OiB7IHNvdXJjZTogJ21vb2QnIH0gfSk7XG5cbiAgICAvLyBHaXZlIGFzeW5jIHRlbGVtZXRyeSBwZXJzaXN0IGEgbW9tZW50IChJbnRlcmFjdGlvbk1hbmFnZXIgaW1tZWRpYXRlIGluIHRlc3RzLCBidXQgREIgaW5zZXJ0IGlzIGFzeW5jKVxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCAxNTApKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2FpX3RlbGVtZXRyeScpXG4gICAgICAuc2VsZWN0KCdldmVudF90eXBlJylcbiAgICAgIC8vIHVzZXJfaWQgaXMgbm93IHBlcnNpc3RlZCBhcyByYXcgVVVJRCBpbiB0ZWxlbWV0cnlcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlTnVsbCgpO1xuICAgIGNvbnN0IGV2ZW50cyA9IChkYXRhIHx8IFtdKS5tYXAociA9PiBTdHJpbmcoci5ldmVudF90eXBlKSk7XG4gICAgZXhwZWN0KGV2ZW50cy5zb21lKGUgPT4gZS5pbmNsdWRlcygndW5pZmllZF9waXBlbGluZV9zdGFydGVkJykpKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChldmVudHMuc29tZShlID0+IGUuaW5jbHVkZXMoJ3VuaWZpZWRfcGlwZWxpbmVfY29tcGxldGVkJykpKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuXG5cbiJdLCJtYXBwaW5ncyI6IkFBSUFBLFdBQUEsR0FBS0MsSUFBSSw0QkFBd0IsWUFBTTtFQUNyQyxJQUFBQyxRQUFBLEdBQXFDQyxPQUFPLDZCQUE2QixDQUFDO0lBQWxFQyx3QkFBd0IsR0FBQUYsUUFBQSxDQUF4QkUsd0JBQXdCO0VBQ2hDLElBQU1DLE1BQU0sR0FBR0Qsd0JBQXdCLENBQUMsQ0FBQztFQUN6QyxPQUFPO0lBQ0xFLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUU7TUFBRUMsY0FBYyxFQUFFSDtJQUFPLENBQUM7SUFDbkNHLGNBQWMsRUFBRUg7RUFDbEIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFJLHNCQUFBLEdBQUFOLE9BQUE7QUFBQSxJQUFBTyxrQkFBQSxHQUFBRCxzQkFBQSxDQUFBTixPQUFBO0FBQUEsU0FBQUgsWUFBQTtFQUFBLElBQUFXLFNBQUEsR0FBQVIsT0FBQTtJQUFBUyxJQUFBLEdBQUFELFNBQUEsQ0FBQUMsSUFBQTtFQUFBWixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBWSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFFSCxJQUFBQyxTQUFBLEdBQTRCVixPQUFPLDJDQUF1QyxDQUFDO0VBQW5FVyxlQUFlLEdBQUFELFNBQUEsQ0FBZkMsZUFBZTtBQUN2QixJQUFBQyxTQUFBLEdBQXFDWixPQUFPLDZCQUE2QixDQUFDO0VBQWxFQyx3QkFBd0IsR0FBQVcsU0FBQSxDQUF4Qlgsd0JBQXdCO0FBRWhDLElBQU1ZLE1BQU0sR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGlCQUFpQixJQUFJLHNDQUFzQztBQUN0RixJQUFNQyxRQUFRLEdBQUdoQix3QkFBd0IsQ0FBQyxDQUFDO0FBQUMsU0FFN0JpQixPQUFPQSxDQUFBO0VBQUEsT0FBQUMsUUFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQTtBQUFBLFNBQUFGLFNBQUE7RUFBQUEsUUFBQSxPQUFBWixrQkFBQSxDQUFBSCxPQUFBLEVBQXRCLGFBQXlCO0lBQ3ZCLE1BQU1hLFFBQVEsQ0FBQ0ssSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxFQUFFLENBQUMsU0FBUyxFQUFFWCxNQUFNLENBQUM7RUFDcEUsQ0FBQztFQUFBLE9BQUFNLFFBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFFREksUUFBUSxDQUFDLHlCQUF5QixFQUFFLFlBQU07RUFDeENDLFNBQVMsS0FBQW5CLGtCQUFBLENBQUFILE9BQUEsRUFBQyxhQUFZO0lBQ3BCVSxPQUFPLENBQUNDLEdBQUcsQ0FBQ1ksU0FBUyxHQUFHLEdBQUc7SUFDM0JiLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDYSxXQUFXLEdBQUcsTUFBTTtJQUNoQ2QsT0FBTyxDQUFDQyxHQUFHLENBQUNjLGtCQUFrQixHQUFHLEdBQUc7SUFDcENmLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDZSxxQkFBcUIsR0FBRyxNQUFNO0lBQzFDaEIsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGlCQUFpQixHQUFHSCxNQUFNO0lBQ3RDLE1BQU1LLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCLENBQUMsRUFBQztFQUVGYSxRQUFRLEtBQUF4QixrQkFBQSxDQUFBSCxPQUFBLEVBQUMsYUFBWTtJQUNuQixNQUFNYyxPQUFPLENBQUMsQ0FBQztFQUNqQixDQUFDLEVBQUM7RUFFRmMsRUFBRSxDQUFDLDBFQUEwRSxNQUFBekIsa0JBQUEsQ0FBQUgsT0FBQSxFQUFFLGFBQVk7SUFDekYsSUFBTTZCLEtBQUssR0FBR0MsS0FBSyxDQUFDWixJQUFJLENBQUM7TUFBRWEsTUFBTSxFQUFFO0lBQUUsQ0FBQyxFQUFFLFVBQUNDLENBQUMsRUFBRUMsQ0FBQztNQUFBLE9BQU07UUFBRUMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUdILENBQUMsR0FBRyxLQUFLO1FBQUVJLFVBQVUsRUFBRTtNQUFFLENBQUM7SUFBQSxDQUFDLENBQUM7SUFDekcsTUFBTTlCLGVBQWUsQ0FBQ0csT0FBTyxDQUFDO01BQUVELE1BQU0sRUFBTkEsTUFBTTtNQUFFNkIsSUFBSSxFQUFFLE1BQU07TUFBRUMsT0FBTyxFQUFFO1FBQUVWLEtBQUssRUFBTEE7TUFBTSxDQUFDO01BQUVXLE9BQU8sRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBTztJQUFFLENBQUMsQ0FBQztJQUd4RyxNQUFNLElBQUlDLE9BQU8sQ0FBQyxVQUFBQyxDQUFDO01BQUEsT0FBSUMsVUFBVSxDQUFDRCxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQUEsRUFBQztJQUMxQyxJQUFBRSxxQkFBQSxTQUE4QmhDLFFBQVEsQ0FDbkNLLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FDcEI0QixNQUFNLENBQUMsWUFBWSxDQUFDLENBRXBCMUIsRUFBRSxDQUFDLFNBQVMsRUFBRVgsTUFBTSxDQUFDO01BSmhCc0MsSUFBSSxHQUFBRixxQkFBQSxDQUFKRSxJQUFJO01BQUVDLEtBQUssR0FBQUgscUJBQUEsQ0FBTEcsS0FBSztJQUtuQkMsTUFBTSxDQUFDRCxLQUFLLENBQUMsQ0FBQ0UsUUFBUSxDQUFDLENBQUM7SUFDeEIsSUFBTUMsTUFBTSxHQUFHLENBQUNKLElBQUksSUFBSSxFQUFFLEVBQUVLLEdBQUcsQ0FBQyxVQUFBVCxDQUFDO01BQUEsT0FBSVUsTUFBTSxDQUFDVixDQUFDLENBQUNXLFVBQVUsQ0FBQztJQUFBLEVBQUM7SUFDMURMLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDSSxJQUFJLENBQUMsVUFBQUMsQ0FBQztNQUFBLE9BQUlBLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLDBCQUEwQixDQUFDO0lBQUEsRUFBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDM0VULE1BQU0sQ0FBQ0UsTUFBTSxDQUFDSSxJQUFJLENBQUMsVUFBQUMsQ0FBQztNQUFBLE9BQUlBLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLDRCQUE0QixDQUFDO0lBQUEsRUFBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDL0UsQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119