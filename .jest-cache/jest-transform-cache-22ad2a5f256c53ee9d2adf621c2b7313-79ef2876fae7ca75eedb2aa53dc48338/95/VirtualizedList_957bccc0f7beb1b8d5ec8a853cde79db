25f9d85e3ad8fed248623576ae6f514b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _clamp = _interopRequireDefault(require("../Utilities/clamp"));
var _infoLog = _interopRequireDefault(require("../Utilities/infoLog"));
var _CellRenderMask = require("./CellRenderMask");
var _ChildListCollection = _interopRequireDefault(require("./ChildListCollection"));
var _FillRateHelper = _interopRequireDefault(require("./FillRateHelper"));
var _ListMetricsAggregator = _interopRequireDefault(require("./ListMetricsAggregator"));
var _StateSafePureComponent = _interopRequireDefault(require("./StateSafePureComponent"));
var _ViewabilityHelper = _interopRequireDefault(require("./ViewabilityHelper"));
var _VirtualizedListCellRenderer = _interopRequireDefault(require("./VirtualizedListCellRenderer"));
var _VirtualizedListContext = require("./VirtualizedListContext.js");
var _VirtualizedListProps = require("./VirtualizedListProps");
var _VirtualizeUtils = require("./VirtualizeUtils");
var _invariant = _interopRequireDefault(require("invariant"));
var _nullthrows = _interopRequireDefault(require("nullthrows"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["onContentSizeChange"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ON_EDGE_REACHED_EPSILON = 0.001;
var _usedIndexForKey = false;
var _keylessItemComponentName = '';
function getScrollingThreshold(threshold, visibleLength) {
  return threshold * visibleLength / 2;
}
var VirtualizedList = function (_StateSafePureCompone) {
  function VirtualizedList(_props) {
    var _this$props$maintainV, _this$props$maintainV2;
    var _this;
    (0, _classCallCheck2.default)(this, VirtualizedList);
    _this = _callSuper(this, VirtualizedList, [_props]);
    _this._getScrollMetrics = function () {
      return _this._scrollMetrics;
    };
    _this._getOutermostParentListRef = function () {
      if (_this._isNestedWithSameOrientation()) {
        return _this.context.getOutermostParentListRef();
      } else {
        return _this;
      }
    };
    _this._registerAsNestedChild = function (childList) {
      _this._nestedChildLists.add(childList.ref, childList.cellKey);
      if (_this._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };
    _this._unregisterAsNestedChild = function (childList) {
      _this._nestedChildLists.remove(childList.ref);
    };
    _this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };
    _this._getSpacerKey = function (isVertical) {
      return isVertical ? 'height' : 'width';
    };
    _this._cellRefs = {};
    _this._listMetrics = new _ListMetricsAggregator.default();
    _this._footerLength = 0;
    _this._hasTriggeredInitialScrollToIndex = false;
    _this._hasInteracted = false;
    _this._hasMore = false;
    _this._hasWarned = {};
    _this._headerLength = 0;
    _this._hiPriInProgress = false;
    _this._indicesToKeys = new Map();
    _this._lastFocusedCellKey = null;
    _this._nestedChildLists = new _ChildListCollection.default();
    _this._offsetFromParentVirtualizedList = 0;
    _this._pendingViewabilityUpdate = false;
    _this._prevParentOffset = 0;
    _this._scrollMetrics = {
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0,
      zoomScale: 1
    };
    _this._scrollRef = null;
    _this._sentStartForContentLength = 0;
    _this._sentEndForContentLength = 0;
    _this._updateCellsToRenderTimeoutID = null;
    _this._viewabilityTuples = [];
    _this._captureScrollRef = function (ref) {
      _this._scrollRef = ref;
    };
    _this._defaultRenderScrollComponent = function (props) {
      var onRefresh = props.onRefresh;
      if (_this._isNestedWithSameOrientation()) {
        var onContentSizeChange = props.onContentSizeChange,
          otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
        return (0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({}, otherProps));
      } else if (onRefresh) {
        var _props$refreshing;
        (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) != null ? _props$refreshing : 'undefined') + '`');
        return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, Object.assign({}, props, {
          refreshControl: props.refreshControl == null ? (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: onRefresh,
            progressViewOffset: props.progressViewOffset
          }) : props.refreshControl
        }));
      } else {
        return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, Object.assign({}, props));
      }
    };
    _this._onCellLayout = function (e, cellKey, cellIndex) {
      var layoutHasChanged = _this._listMetrics.notifyCellLayout({
        cellIndex: cellIndex,
        cellKey: cellKey,
        layout: e.nativeEvent.layout,
        orientation: _this._orientation()
      });
      if (layoutHasChanged) {
        _this._scheduleCellsToRenderUpdate();
      }
      _this._triggerRemeasureForChildListsInCell(cellKey);
      _this._computeBlankness();
      _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
    };
    _this._onCellFocusCapture = function (cellKey) {
      _this._lastFocusedCellKey = cellKey;
      _this._updateCellsToRender();
    };
    _this._onCellUnmount = function (cellKey) {
      delete _this._cellRefs[cellKey];
      _this._listMetrics.notifyCellUnmounted(cellKey);
    };
    _this._onLayout = function (e) {
      if (_this._isNestedWithSameOrientation()) {
        _this.measureLayoutRelativeToContainingList();
      } else {
        _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
      }
      _this.props.onLayout && _this.props.onLayout(e);
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEdgeReached();
    };
    _this._onLayoutEmpty = function (e) {
      _this.props.onLayout && _this.props.onLayout(e);
    };
    _this._onLayoutFooter = function (e) {
      _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
      _this._footerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onLayoutHeader = function (e) {
      _this._headerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onContentSizeChange = function (width, height) {
      _this._listMetrics.notifyListContentLayout({
        layout: {
          width: width,
          height: height
        },
        orientation: _this._orientation()
      });
      _this._maybeScrollToInitialScrollIndex(width, height);
      if (_this.props.onContentSizeChange) {
        _this.props.onContentSizeChange(width, height);
      }
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEdgeReached();
    };
    _this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this._scrollMetrics.offset;
      var contentLength = _this._listMetrics.getContentLength();
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };
    _this._onScroll = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onScroll(e);
      });
      if (_this.props.onScroll) {
        _this.props.onScroll(e);
      }
      var timestamp = e.timeStamp;
      var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
      var contentLength = _this._selectLength(e.nativeEvent.contentSize);
      var offset = _this._offsetFromScrollEvent(e);
      var dOffset = offset - _this._scrollMetrics.offset;
      if (_this._isNestedWithSameOrientation()) {
        if (_this._listMetrics.getContentLength() === 0) {
          return;
        }
        var _this$_convertParentS = _this._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });
        visibleLength = _this$_convertParentS.visibleLength;
        contentLength = _this$_convertParentS.contentLength;
        offset = _this$_convertParentS.offset;
        dOffset = _this$_convertParentS.dOffset;
      }
      var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;
      if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
        (0, _infoLog.default)('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this._hasWarned.perf = true;
      }
      var zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;
      _this._scrollMetrics = {
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength,
        zoomScale: zoomScale
      };
      if (_this.state.pendingScrollUpdateCount > 0) {
        _this.setState(function (state) {
          return {
            pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1
          };
        });
      }
      _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
      if (!_this.props) {
        return;
      }
      _this._maybeCallOnEdgeReached();
      if (velocity !== 0) {
        _this._fillRateHelper.activate();
      }
      _this._computeBlankness();
      _this._scheduleCellsToRenderUpdate();
    };
    _this._onScrollBeginDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onScrollBeginDrag(e);
      });
      _this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });
      _this._hasInteracted = true;
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
    };
    _this._onScrollEndDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onScrollEndDrag(e);
      });
      var velocity = e.nativeEvent.velocity;
      if (velocity) {
        _this._scrollMetrics.velocity = _this._selectOffset(velocity);
      }
      _this._computeBlankness();
      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
    };
    _this._onMomentumScrollBegin = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onMomentumScrollBegin(e);
      });
      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
    };
    _this._onMomentumScrollEnd = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onMomentumScrollEnd(e);
      });
      _this._scrollMetrics.velocity = 0;
      _this._computeBlankness();
      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
    };
    _this._updateCellsToRender = function () {
      _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
      _this.setState(function (state, props) {
        var cellsAroundViewport = _this._adjustCellsAroundViewport(props, state.cellsAroundViewport, state.pendingScrollUpdateCount);
        var renderMask = VirtualizedList._createRenderMask(props, cellsAroundViewport, _this._getNonViewportRenderRegions(props));
        if (cellsAroundViewport.first === state.cellsAroundViewport.first && cellsAroundViewport.last === state.cellsAroundViewport.last && renderMask.equals(state.renderMask)) {
          return null;
        }
        return {
          cellsAroundViewport: cellsAroundViewport,
          renderMask: renderMask
        };
      });
    };
    _this._createViewToken = function (index, isViewable, props) {
      var data = props.data,
        getItem = props.getItem;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: VirtualizedList._keyExtractor(item, index, props),
        isViewable: isViewable
      };
    };
    _this._getNonViewportRenderRegions = function (props) {
      if (!(_this._lastFocusedCellKey && _this._cellRefs[_this._lastFocusedCellKey])) {
        return [];
      }
      var lastFocusedCellRenderer = _this._cellRefs[_this._lastFocusedCellKey];
      var focusedCellIndex = lastFocusedCellRenderer.props.index;
      var itemCount = props.getItemCount(props.data);
      if (focusedCellIndex >= itemCount || VirtualizedList._getItemKey(props, focusedCellIndex) !== _this._lastFocusedCellKey) {
        return [];
      }
      var first = focusedCellIndex;
      var heightOfCellsBeforeFocused = 0;
      for (var i = first - 1; i >= 0 && heightOfCellsBeforeFocused < _this._scrollMetrics.visibleLength; i--) {
        first--;
        heightOfCellsBeforeFocused += _this._listMetrics.getCellMetricsApprox(i, props).length;
      }
      var last = focusedCellIndex;
      var heightOfCellsAfterFocused = 0;
      for (var _i = last + 1; _i < itemCount && heightOfCellsAfterFocused < _this._scrollMetrics.visibleLength; _i++) {
        last++;
        heightOfCellsAfterFocused += _this._listMetrics.getCellMetricsApprox(_i, props).length;
      }
      return [{
        first: first,
        last: last
      }];
    };
    _this._checkProps(_props);
    _this._fillRateHelper = new _FillRateHelper.default(_this._listMetrics);
    if (_this.props.viewabilityConfigCallbackPairs) {
      _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
        return {
          viewabilityHelper: new _ViewabilityHelper.default(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        };
      });
    } else {
      var _this$props = _this.props,
        onViewableItemsChanged = _this$props.onViewableItemsChanged,
        viewabilityConfig = _this$props.viewabilityConfig;
      if (onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new _ViewabilityHelper.default(viewabilityConfig),
          onViewableItemsChanged: onViewableItemsChanged
        });
      }
    }
    var initialRenderRegion = VirtualizedList._initialRenderRegion(_props);
    var minIndexForVisible = (_this$props$maintainV = (_this$props$maintainV2 = _this.props.maintainVisibleContentPosition) == null ? void 0 : _this$props$maintainV2.minIndexForVisible) != null ? _this$props$maintainV : 0;
    _this.state = {
      cellsAroundViewport: initialRenderRegion,
      renderMask: VirtualizedList._createRenderMask(_props, initialRenderRegion),
      firstVisibleItemKey: _this.props.getItemCount(_this.props.data) > minIndexForVisible ? VirtualizedList._getItemKey(_this.props, minIndexForVisible) : null,
      pendingScrollUpdateCount: _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 ? 1 : 0
    };
    return _this;
  }
  (0, _inherits2.default)(VirtualizedList, _StateSafePureCompone);
  return (0, _createClass2.default)(VirtualizedList, [{
    key: "scrollToEnd",
    value: function scrollToEnd(params) {
      var animated = params ? params.animated : true;
      var veryLast = this.props.getItemCount(this.props.data) - 1;
      if (veryLast < 0) {
        return;
      }
      var frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);
      var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
      this.scrollToOffset({
        animated: animated,
        offset: offset
      });
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(params) {
      var _this$props2 = this.props,
        data = _this$props2.data,
        getItemCount = _this$props2.getItemCount,
        getItemLayout = _this$props2.getItemLayout,
        onScrollToIndexFailed = _this$props2.onScrollToIndexFailed;
      var animated = params.animated,
        index = params.index,
        viewOffset = params.viewOffset,
        viewPosition = params.viewPosition;
      (0, _invariant.default)(index >= 0, `scrollToIndex out of range: requested index ${index} but minimum is 0`);
      (0, _invariant.default)(getItemCount(data) >= 1, `scrollToIndex out of range: item length ${getItemCount(data)} but minimum is 1`);
      (0, _invariant.default)(index < getItemCount(data), `scrollToIndex out of range: requested index ${index} is out of 0 to ${getItemCount(data) - 1}`);
      if (!getItemLayout && index > this._listMetrics.getHighestMeasuredCellIndex()) {
        (0, _invariant.default)(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
        onScrollToIndexFailed({
          averageItemLength: this._listMetrics.getAverageCellLength(),
          highestMeasuredFrameIndex: this._listMetrics.getHighestMeasuredCellIndex(),
          index: index
        });
        return;
      }
      var frame = this._listMetrics.getCellMetricsApprox(Math.floor(index), this.props);
      var offset = Math.max(0, this._listMetrics.getCellOffsetApprox(index, this.props) - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
      this.scrollToOffset({
        offset: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToItem",
    value: function scrollToItem(params) {
      var item = params.item;
      var _this$props3 = this.props,
        data = _this$props3.data,
        getItem = _this$props3.getItem,
        getItemCount = _this$props3.getItemCount;
      var itemCount = getItemCount(data);
      for (var index = 0; index < itemCount; index++) {
        if (getItem(data, index) === item) {
          this.scrollToIndex(Object.assign({}, params, {
            index: index
          }));
          break;
        }
      }
    }
  }, {
    key: "scrollToOffset",
    value: function scrollToOffset(params) {
      var animated = params.animated,
        offset = params.offset;
      var scrollRef = this._scrollRef;
      if (scrollRef == null) {
        return;
      }
      if (scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      var _this$_orientation = this._orientation(),
        horizontal = _this$_orientation.horizontal,
        rtl = _this$_orientation.rtl;
      if (horizontal && rtl && !this._listMetrics.hasContentLength()) {
        console.warn('scrollToOffset may not be called in RTL before content is laid out');
        return;
      }
      scrollRef.scrollTo(Object.assign({
        animated: animated
      }, this._scrollToParamsFromOffset(offset)));
    }
  }, {
    key: "_scrollToParamsFromOffset",
    value: function _scrollToParamsFromOffset(offset) {
      var _this$_orientation2 = this._orientation(),
        horizontal = _this$_orientation2.horizontal,
        rtl = _this$_orientation2.rtl;
      if (horizontal && rtl) {
        var cartOffset = this._listMetrics.cartesianOffset(offset + this._scrollMetrics.visibleLength);
        return horizontal ? {
          x: cartOffset
        } : {
          y: cartOffset
        };
      } else {
        return horizontal ? {
          x: offset
        } : {
          y: offset
        };
      }
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      this._nestedChildLists.forEach(function (childList) {
        childList.recordInteraction();
      });
      this._viewabilityTuples.forEach(function (t) {
        t.viewabilityHelper.recordInteraction();
      });
      this._updateViewableItems(this.props, this.state.cellsAroundViewport);
    }
  }, {
    key: "flashScrollIndicators",
    value: function flashScrollIndicators() {
      if (this._scrollRef == null) {
        return;
      }
      this._scrollRef.flashScrollIndicators();
    }
  }, {
    key: "getScrollResponder",
    value: function getScrollResponder() {
      if (this._scrollRef && this._scrollRef.getScrollResponder) {
        return this._scrollRef.getScrollResponder();
      }
    }
  }, {
    key: "getScrollableNode",
    value: function getScrollableNode() {
      if (this._scrollRef && this._scrollRef.getScrollableNode) {
        return this._scrollRef.getScrollableNode();
      } else {
        return (0, _reactNative.findNodeHandle)(this._scrollRef);
      }
    }
  }, {
    key: "getScrollRef",
    value: function getScrollRef() {
      if (this._scrollRef && this._scrollRef.getScrollRef) {
        return this._scrollRef.getScrollRef();
      } else {
        return this._scrollRef;
      }
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(props) {
      if (this._scrollRef) {
        this._scrollRef.setNativeProps(props);
      }
    }
  }, {
    key: "_getCellKey",
    value: function _getCellKey() {
      var _this$context;
      return ((_this$context = this.context) == null ? void 0 : _this$context.cellKey) || 'rootList';
    }
  }, {
    key: "hasMore",
    value: function hasMore() {
      return this._hasMore;
    }
  }, {
    key: "_checkProps",
    value: function _checkProps(props) {
      var onScroll = props.onScroll,
        windowSize = props.windowSize,
        getItemCount = props.getItemCount,
        data = props.data,
        initialScrollIndex = props.initialScrollIndex;
      (0, _invariant.default)(!onScroll || !onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
      (0, _invariant.default)((0, _VirtualizedListProps.windowSizeOrDefault)(windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      (0, _invariant.default)(getItemCount, 'VirtualizedList: The "getItemCount" prop must be provided');
      var itemCount = getItemCount(data);
      if (initialScrollIndex != null && !this._hasTriggeredInitialScrollToIndex && (initialScrollIndex < 0 || itemCount > 0 && initialScrollIndex >= itemCount) && !this._hasWarned.initialScrollIndex) {
        console.warn(`initialScrollIndex "${initialScrollIndex}" is not valid (list has ${itemCount} items)`);
        this._hasWarned.initialScrollIndex = true;
      }
      if (__DEV__ && !this._hasWarned.flexWrap) {
        var flatStyles = _reactNative.StyleSheet.flatten(this.props.contentContainerStyle);
        if (flatStyles != null && flatStyles.flexWrap === 'wrap') {
          console.warn('`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
          this._hasWarned.flexWrap = true;
        }
      }
    }
  }, {
    key: "_adjustCellsAroundViewport",
    value: function _adjustCellsAroundViewport(props, cellsAroundViewport, pendingScrollUpdateCount) {
      var data = props.data,
        getItemCount = props.getItemCount;
      var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(props.onEndReachedThreshold);
      var _this$_scrollMetrics = this._scrollMetrics,
        offset = _this$_scrollMetrics.offset,
        visibleLength = _this$_scrollMetrics.visibleLength;
      var contentLength = this._listMetrics.getContentLength();
      var distanceFromEnd = contentLength - visibleLength - offset;
      if (visibleLength <= 0 || contentLength <= 0) {
        return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
      }
      var newCellsAroundViewport;
      if (props.disableVirtualization) {
        var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch) : 0;
        newCellsAroundViewport = {
          first: 0,
          last: Math.min(cellsAroundViewport.last + renderAhead, getItemCount(data) - 1)
        };
      } else {
        if (pendingScrollUpdateCount > 0) {
          return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
        }
        newCellsAroundViewport = (0, _VirtualizeUtils.computeWindowedRenderLimits)(props, (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch), (0, _VirtualizedListProps.windowSizeOrDefault)(props.windowSize), cellsAroundViewport, this._listMetrics, this._scrollMetrics);
        (0, _invariant.default)(newCellsAroundViewport.last < getItemCount(data), 'computeWindowedRenderLimits() should return range in-bounds');
      }
      if (this._nestedChildLists.size() > 0) {
        var childIdx = this._findFirstChildWithMore(newCellsAroundViewport.first, newCellsAroundViewport.last);
        newCellsAroundViewport.last = childIdx != null ? childIdx : newCellsAroundViewport.last;
      }
      return newCellsAroundViewport;
    }
  }, {
    key: "_findFirstChildWithMore",
    value: function _findFirstChildWithMore(first, last) {
      for (var ii = first; ii <= last; ii++) {
        var cellKeyForIndex = this._indicesToKeys.get(ii);
        if (cellKeyForIndex != null && this._nestedChildLists.anyInCell(cellKeyForIndex, function (childList) {
          return childList.hasMore();
        })) {
          return ii;
        }
      }
      return null;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.registerAsNestedChild({
          ref: this,
          cellKey: this.context.cellKey
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.unregisterAsNestedChild({
          ref: this
        });
      }
      clearTimeout(this._updateCellsToRenderTimeoutID);
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.dispose();
      });
      this._fillRateHelper.deactivateAndFlush();
    }
  }, {
    key: "_pushCells",
    value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
      var _this2 = this;
      var _this$props4 = this.props,
        CellRendererComponent = _this$props4.CellRendererComponent,
        ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
        ListHeaderComponent = _this$props4.ListHeaderComponent,
        ListItemComponent = _this$props4.ListItemComponent,
        data = _this$props4.data,
        debug = _this$props4.debug,
        getItem = _this$props4.getItem,
        getItemCount = _this$props4.getItemCount,
        getItemLayout = _this$props4.getItemLayout,
        horizontal = _this$props4.horizontal,
        renderItem = _this$props4.renderItem;
      var stickyOffset = ListHeaderComponent ? 1 : 0;
      var end = getItemCount(data) - 1;
      var prevCellKey;
      last = Math.min(end, last);
      var _loop = function _loop() {
        var item = getItem(data, ii);
        var key = VirtualizedList._keyExtractor(item, ii, _this2.props);
        _this2._indicesToKeys.set(ii, key);
        if (stickyIndicesFromProps.has(ii + stickyOffset)) {
          stickyHeaderIndices.push(cells.length);
        }
        var shouldListenForLayout = getItemLayout == null || debug || _this2._fillRateHelper.enabled();
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListCellRenderer.default, Object.assign({
          CellRendererComponent: CellRendererComponent,
          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
          ListItemComponent: ListItemComponent,
          cellKey: key,
          horizontal: horizontal,
          index: ii,
          inversionStyle: inversionStyle,
          item: item,
          prevCellKey: prevCellKey,
          onUpdateSeparators: _this2._onUpdateSeparators,
          onCellFocusCapture: _this2._onCellFocusCapture,
          onUnmount: _this2._onCellUnmount,
          ref: function ref(_ref) {
            _this2._cellRefs[key] = _ref;
          },
          renderItem: renderItem
        }, shouldListenForLayout && {
          onCellLayout: _this2._onCellLayout
        }), key));
        prevCellKey = key;
      };
      for (var ii = first; ii <= last; ii++) {
        _loop();
      }
    }
  }, {
    key: "_isNestedWithSameOrientation",
    value: function _isNestedWithSameOrientation() {
      var nestedContext = this.context;
      return !!(nestedContext && !!nestedContext.horizontal === (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this,
        _this$props$scrollEve;
      this._checkProps(this.props);
      var _this$props5 = this.props,
        ListEmptyComponent = _this$props5.ListEmptyComponent,
        ListFooterComponent = _this$props5.ListFooterComponent,
        ListHeaderComponent = _this$props5.ListHeaderComponent;
      var _this$props6 = this.props,
        data = _this$props6.data,
        horizontal = _this$props6.horizontal;
      var inversionStyle = this.props.inverted ? (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
      var cells = [];
      var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
      var stickyHeaderIndices = [];
      if (ListHeaderComponent) {
        if (stickyIndicesFromProps.has(0)) {
          stickyHeaderIndices.push(0);
        }
        var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : (0, _jsxRuntime.jsx)(ListHeaderComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getCellKey() + '-header',
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            collapsable: false,
            onLayout: this._onLayoutHeader,
            style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle),
            children: element
          })
        }, "$header"));
      }
      var itemCount = this.props.getItemCount(data);
      if (itemCount === 0 && ListEmptyComponent) {
        var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : (0, _jsxRuntime.jsx)(ListEmptyComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getCellKey() + '-empty',
          children: React.cloneElement(_element, {
            onLayout: function onLayout(event) {
              _this3._onLayoutEmpty(event);
              if (_element.props.onLayout) {
                _element.props.onLayout(event);
              }
            },
            style: _reactNative.StyleSheet.compose(inversionStyle, _element.props.style)
          })
        }, "$empty"));
      }
      if (itemCount > 0) {
        _usedIndexForKey = false;
        _keylessItemComponentName = '';
        var spacerKey = this._getSpacerKey(!horizontal);
        var renderRegions = this.state.renderMask.enumerateRegions();
        var lastRegion = renderRegions[renderRegions.length - 1];
        var lastSpacer = lastRegion != null && lastRegion.isSpacer ? lastRegion : null;
        for (var section of renderRegions) {
          if (section.isSpacer) {
            if (this.props.disableVirtualization) {
              continue;
            }
            var isLastSpacer = section === lastSpacer;
            var constrainToMeasured = isLastSpacer && !this.props.getItemLayout;
            var last = constrainToMeasured ? (0, _clamp.default)(section.first - 1, section.last, this._listMetrics.getHighestMeasuredCellIndex()) : section.last;
            var firstMetrics = this._listMetrics.getCellMetricsApprox(section.first, this.props);
            var lastMetrics = this._listMetrics.getCellMetricsApprox(last, this.props);
            var spacerSize = lastMetrics.offset + lastMetrics.length - firstMetrics.offset;
            cells.push((0, _jsxRuntime.jsx)(_reactNative.View, {
              style: (0, _defineProperty2.default)({}, spacerKey, spacerSize)
            }, `$spacer-${section.first}`));
          } else {
            this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, section.first, section.last, inversionStyle);
          }
        }
        if (!this._hasWarned.keys && _usedIndexForKey) {
          console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
          this._hasWarned.keys = true;
        }
      }
      if (ListFooterComponent) {
        var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : (0, _jsxRuntime.jsx)(ListFooterComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getFooterCellKey(),
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            onLayout: this._onLayoutFooter,
            style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle),
            children: _element2
          })
        }, "$footer"));
      }
      var scrollProps = Object.assign({}, this.props, {
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        onScroll: this._onScroll,
        onScrollBeginDrag: this._onScrollBeginDrag,
        onScrollEndDrag: this._onScrollEndDrag,
        onMomentumScrollBegin: this._onMomentumScrollBegin,
        onMomentumScrollEnd: this._onMomentumScrollEnd,
        scrollEventThrottle: (_this$props$scrollEve = this.props.scrollEventThrottle) != null ? _this$props$scrollEve : 0.0001,
        invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
        stickyHeaderIndices: stickyHeaderIndices,
        style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style,
        isInvertedVirtualizedList: this.props.inverted,
        maintainVisibleContentPosition: this.props.maintainVisibleContentPosition != null ? Object.assign({}, this.props.maintainVisibleContentPosition, {
          minIndexForVisible: this.props.maintainVisibleContentPosition.minIndexForVisible + (this.props.ListHeaderComponent ? 1 : 0)
        }) : undefined
      });
      this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;
      var innerRet = (0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListContextProvider, {
        value: {
          cellKey: null,
          getScrollMetrics: this._getScrollMetrics,
          horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
          getOutermostParentListRef: this._getOutermostParentListRef,
          registerAsNestedChild: this._registerAsNestedChild,
          unregisterAsNestedChild: this._unregisterAsNestedChild
        },
        children: React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells)
      });
      var ret = innerRet;
      if (__DEV__) {
        ret = (0, _jsxRuntime.jsx)(_reactNative.ScrollView.Context.Consumer, {
          children: function children(scrollContext) {
            if (scrollContext != null && !scrollContext.horizontal === !(0, _VirtualizedListProps.horizontalOrDefault)(_this3.props.horizontal) && !_this3._hasWarned.nesting && _this3.context == null && _this3.props.scrollEnabled !== false) {
              console.error('VirtualizedLists should never be nested inside plain ScrollViews with the same ' + 'orientation because it can break windowing and other functionality - use another ' + 'VirtualizedList-backed container instead.');
              _this3._hasWarned.nesting = true;
            }
            return innerRet;
          }
        });
      }
      if (this.props.debug) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.debug,
          children: [ret, this._renderDebugOverlay()]
        });
      } else {
        return ret;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props7 = this.props,
        data = _this$props7.data,
        extraData = _this$props7.extraData,
        getItemLayout = _this$props7.getItemLayout;
      if (data !== prevProps.data || extraData !== prevProps.extraData) {
        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.resetViewableIndices();
        });
      }
      var hiPriInProgress = this._hiPriInProgress;
      this._scheduleCellsToRenderUpdate();
      if (hiPriInProgress) {
        this._hiPriInProgress = false;
      }
      if (getItemLayout != null) {
        this._maybeCallOnEdgeReached();
      }
    }
  }, {
    key: "_computeBlankness",
    value: function _computeBlankness() {
      this._fillRateHelper.computeBlankness(this.props, this.state.cellsAroundViewport, this._scrollMetrics);
    }
  }, {
    key: "_triggerRemeasureForChildListsInCell",
    value: function _triggerRemeasureForChildListsInCell(cellKey) {
      this._nestedChildLists.forEachInCell(cellKey, function (childList) {
        childList.measureLayoutRelativeToContainingList();
      });
    }
  }, {
    key: "measureLayoutRelativeToContainingList",
    value: function measureLayoutRelativeToContainingList() {
      var _this4 = this;
      try {
        if (!this._scrollRef) {
          return;
        }
        this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), function (x, y, width, height) {
          _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
            x: x,
            y: y
          });
          _this4._listMetrics.notifyListContentLayout({
            layout: {
              width: width,
              height: height
            },
            orientation: _this4._orientation()
          });
          var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.getScrollMetrics());
          var metricsChanged = _this4._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || _this4._scrollMetrics.offset !== scrollMetrics.offset;
          if (metricsChanged) {
            _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
            _this4._scrollMetrics.offset = scrollMetrics.offset;
            _this4._nestedChildLists.forEach(function (childList) {
              childList.measureLayoutRelativeToContainingList();
            });
          }
        }, function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        });
      } catch (error) {
        console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
      }
    }
  }, {
    key: "_getFooterCellKey",
    value: function _getFooterCellKey() {
      return this._getCellKey() + '-footer';
    }
  }, {
    key: "_renderDebugOverlay",
    value: function _renderDebugOverlay() {
      var normalize = this._scrollMetrics.visibleLength / (this._listMetrics.getContentLength() || 1);
      var framesInLayout = [];
      var itemCount = this.props.getItemCount(this.props.data);
      for (var ii = 0; ii < itemCount; ii++) {
        var frame = this._listMetrics.getCellMetricsApprox(ii, this.props);
        if (frame.isMounted) {
          framesInLayout.push(frame);
        }
      }
      var windowTop = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.first, this.props).offset;
      var frameLast = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.last, this.props);
      var windowLen = frameLast.offset + frameLast.length - windowTop;
      var visTop = this._scrollMetrics.offset;
      var visLen = this._scrollMetrics.visibleLength;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.debugOverlayBase, styles.debugOverlay],
        children: [framesInLayout.map(function (f, ii) {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
              top: f.offset * normalize,
              height: f.length * normalize
            }]
          }, 'f' + ii);
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
            top: windowTop * normalize,
            height: windowLen * normalize
          }]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
            top: visTop * normalize,
            height: visLen * normalize
          }]
        })]
      });
    }
  }, {
    key: "_selectLength",
    value: function _selectLength(metrics) {
      return !(0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? metrics.height : metrics.width;
    }
  }, {
    key: "_selectOffset",
    value: function _selectOffset(_ref3) {
      var x = _ref3.x,
        y = _ref3.y;
      return this._orientation().horizontal ? x : y;
    }
  }, {
    key: "_orientation",
    value: function _orientation() {
      return {
        horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
        rtl: _reactNative.I18nManager.isRTL
      };
    }
  }, {
    key: "_maybeCallOnEdgeReached",
    value: function _maybeCallOnEdgeReached() {
      var _this$props8 = this.props,
        data = _this$props8.data,
        getItemCount = _this$props8.getItemCount,
        onStartReached = _this$props8.onStartReached,
        onStartReachedThreshold = _this$props8.onStartReachedThreshold,
        onEndReached = _this$props8.onEndReached,
        onEndReachedThreshold = _this$props8.onEndReachedThreshold;
      if (!this._listMetrics.hasContentLength() || this._scrollMetrics.visibleLength === 0) {
        return;
      }
      if (this.state.pendingScrollUpdateCount > 0) {
        return;
      }
      var _this$_scrollMetrics2 = this._scrollMetrics,
        visibleLength = _this$_scrollMetrics2.visibleLength,
        offset = _this$_scrollMetrics2.offset;
      var distanceFromStart = offset;
      var distanceFromEnd = this._listMetrics.getContentLength() - visibleLength - offset;
      if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {
        distanceFromStart = 0;
      }
      if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {
        distanceFromEnd = 0;
      }
      var DEFAULT_THRESHOLD_PX = 2;
      var startThreshold = onStartReachedThreshold != null ? onStartReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
      var endThreshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
      var isWithinStartThreshold = distanceFromStart <= startThreshold;
      var isWithinEndThreshold = distanceFromEnd <= endThreshold;
      if (onEndReached && this.state.cellsAroundViewport.last === getItemCount(data) - 1 && isWithinEndThreshold && this._listMetrics.getContentLength() !== this._sentEndForContentLength) {
        this._sentEndForContentLength = this._listMetrics.getContentLength();
        onEndReached({
          distanceFromEnd: distanceFromEnd
        });
      }
      if (onStartReached != null && this.state.cellsAroundViewport.first === 0 && isWithinStartThreshold && this._listMetrics.getContentLength() !== this._sentStartForContentLength) {
        this._sentStartForContentLength = this._listMetrics.getContentLength();
        onStartReached({
          distanceFromStart: distanceFromStart
        });
      }
      if (!isWithinStartThreshold) {
        this._sentStartForContentLength = 0;
      }
      if (!isWithinEndThreshold) {
        this._sentEndForContentLength = 0;
      }
    }
  }, {
    key: "_maybeScrollToInitialScrollIndex",
    value: function _maybeScrollToInitialScrollIndex(contentWidth, contentHeight) {
      if (contentWidth > 0 && contentHeight > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasTriggeredInitialScrollToIndex) {
        if (this.props.contentOffset == null) {
          if (this.props.initialScrollIndex < this.props.getItemCount(this.props.data)) {
            this.scrollToIndex({
              animated: false,
              index: (0, _nullthrows.default)(this.props.initialScrollIndex)
            });
          } else {
            this.scrollToEnd({
              animated: false
            });
          }
        }
        this._hasTriggeredInitialScrollToIndex = true;
      }
    }
  }, {
    key: "unstable_onScroll",
    value: function unstable_onScroll(e) {
      this._onScroll(e);
    }
  }, {
    key: "_offsetFromScrollEvent",
    value: function _offsetFromScrollEvent(e) {
      var _e$nativeEvent = e.nativeEvent,
        contentOffset = _e$nativeEvent.contentOffset,
        contentSize = _e$nativeEvent.contentSize,
        layoutMeasurement = _e$nativeEvent.layoutMeasurement;
      var _this$_orientation3 = this._orientation(),
        horizontal = _this$_orientation3.horizontal,
        rtl = _this$_orientation3.rtl;
      if (horizontal && rtl) {
        return this._selectLength(contentSize) - (this._selectOffset(contentOffset) + this._selectLength(layoutMeasurement));
      } else {
        return this._selectOffset(contentOffset);
      }
    }
  }, {
    key: "_scheduleCellsToRenderUpdate",
    value: function _scheduleCellsToRenderUpdate() {
      var _this5 = this;
      if ((this._listMetrics.getAverageCellLength() > 0 || this.props.getItemLayout != null) && this._shouldRenderWithPriority() && !this._hiPriInProgress) {
        this._hiPriInProgress = true;
        if (this._updateCellsToRenderTimeoutID != null) {
          clearTimeout(this._updateCellsToRenderTimeoutID);
          this._updateCellsToRenderTimeoutID = null;
        }
        this._updateCellsToRender();
        return;
      } else {
        if (this._updateCellsToRenderTimeoutID == null) {
          var _this$props$updateCel;
          this._updateCellsToRenderTimeoutID = setTimeout(function () {
            _this5._updateCellsToRenderTimeoutID = null;
            _this5._updateCellsToRender();
          }, (_this$props$updateCel = this.props.updateCellsBatchingPeriod) != null ? _this$props$updateCel : 50);
        }
      }
    }
  }, {
    key: "_shouldRenderWithPriority",
    value: function _shouldRenderWithPriority() {
      var _this$state$cellsArou = this.state.cellsAroundViewport,
        first = _this$state$cellsArou.first,
        last = _this$state$cellsArou.last;
      var _this$_scrollMetrics3 = this._scrollMetrics,
        offset = _this$_scrollMetrics3.offset,
        visibleLength = _this$_scrollMetrics3.visibleLength,
        velocity = _this$_scrollMetrics3.velocity;
      var itemCount = this.props.getItemCount(this.props.data);
      var hiPri = false;
      var onStartReachedThreshold = (0, _VirtualizedListProps.onStartReachedThresholdOrDefault)(this.props.onStartReachedThreshold);
      var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(this.props.onEndReachedThreshold);
      if (first > 0) {
        var distTop = offset - this._listMetrics.getCellMetricsApprox(first, this.props).offset;
        hiPri = distTop < 0 || velocity < -2 && distTop < getScrollingThreshold(onStartReachedThreshold, visibleLength);
      }
      if (!hiPri && last >= 0 && last < itemCount - 1) {
        var distBottom = this._listMetrics.getCellMetricsApprox(last, this.props).offset - (offset + visibleLength);
        hiPri = distBottom < 0 || velocity > 2 && distBottom < getScrollingThreshold(onEndReachedThreshold, visibleLength);
      }
      return hiPri;
    }
  }, {
    key: "unstable_onScrollBeginDrag",
    value: function unstable_onScrollBeginDrag(e) {
      this._onScrollBeginDrag(e);
    }
  }, {
    key: "unstable_onScrollEndDrag",
    value: function unstable_onScrollEndDrag(e) {
      this._onScrollEndDrag(e);
    }
  }, {
    key: "unstable_onMomentumScrollBegin",
    value: function unstable_onMomentumScrollBegin(e) {
      this._onMomentumScrollBegin(e);
    }
  }, {
    key: "unstable_onMomentumScrollEnd",
    value: function unstable_onMomentumScrollEnd(e) {
      this._onMomentumScrollEnd(e);
    }
  }, {
    key: "__getListMetrics",
    value: function __getListMetrics() {
      return this._listMetrics;
    }
  }, {
    key: "_updateViewableItems",
    value: function _updateViewableItems(props, cellsAroundViewport) {
      var _this6 = this;
      if (this.state.pendingScrollUpdateCount > 0) {
        return;
      }
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.onUpdate(props, _this6._scrollMetrics.offset, _this6._scrollMetrics.visibleLength, _this6._listMetrics, _this6._createViewToken, tuple.onViewableItemsChanged, cellsAroundViewport);
      });
    }
  }], [{
    key: "_findItemIndexWithKey",
    value: function _findItemIndexWithKey(props, key, hint) {
      var itemCount = props.getItemCount(props.data);
      if (hint != null && hint >= 0 && hint < itemCount) {
        var curKey = VirtualizedList._getItemKey(props, hint);
        if (curKey === key) {
          return hint;
        }
      }
      for (var ii = 0; ii < itemCount; ii++) {
        var _curKey = VirtualizedList._getItemKey(props, ii);
        if (_curKey === key) {
          return ii;
        }
      }
      return null;
    }
  }, {
    key: "_getItemKey",
    value: function _getItemKey(props, index) {
      var item = props.getItem(props.data, index);
      return VirtualizedList._keyExtractor(item, index, props);
    }
  }, {
    key: "_createRenderMask",
    value: function _createRenderMask(props, cellsAroundViewport, additionalRegions) {
      var itemCount = props.getItemCount(props.data);
      (0, _invariant.default)(cellsAroundViewport.first >= 0 && cellsAroundViewport.last >= cellsAroundViewport.first - 1 && cellsAroundViewport.last < itemCount, `Invalid cells around viewport "[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]" was passed to VirtualizedList._createRenderMask`);
      var renderMask = new _CellRenderMask.CellRenderMask(itemCount);
      if (itemCount > 0) {
        var allRegions = [cellsAroundViewport].concat((0, _toConsumableArray2.default)(additionalRegions != null ? additionalRegions : []));
        for (var region of allRegions) {
          renderMask.addCells(region);
        }
        if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {
          var initialRegion = VirtualizedList._initialRenderRegion(props);
          renderMask.addCells(initialRegion);
        }
        var stickyIndicesSet = new Set(props.stickyHeaderIndices);
        VirtualizedList._ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellsAroundViewport.first);
      }
      return renderMask;
    }
  }, {
    key: "_initialRenderRegion",
    value: function _initialRenderRegion(props) {
      var _props$initialScrollI;
      var itemCount = props.getItemCount(props.data);
      var firstCellIndex = Math.max(0, Math.min(itemCount - 1, Math.floor((_props$initialScrollI = props.initialScrollIndex) != null ? _props$initialScrollI : 0)));
      var lastCellIndex = Math.min(itemCount, firstCellIndex + (0, _VirtualizedListProps.initialNumToRenderOrDefault)(props.initialNumToRender)) - 1;
      return {
        first: firstCellIndex,
        last: lastCellIndex
      };
    }
  }, {
    key: "_ensureClosestStickyHeader",
    value: function _ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellIdx) {
      var stickyOffset = props.ListHeaderComponent ? 1 : 0;
      for (var itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {
        if (stickyIndicesSet.has(itemIdx + stickyOffset)) {
          renderMask.addCells({
            first: itemIdx,
            last: itemIdx
          });
          break;
        }
      }
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(newProps, prevState) {
      var _newProps$maintainVis, _newProps$maintainVis2;
      var itemCount = newProps.getItemCount(newProps.data);
      if (itemCount === prevState.renderMask.numCells()) {
        return prevState;
      }
      var maintainVisibleContentPositionAdjustment = null;
      var prevFirstVisibleItemKey = prevState.firstVisibleItemKey;
      var minIndexForVisible = (_newProps$maintainVis = (_newProps$maintainVis2 = newProps.maintainVisibleContentPosition) == null ? void 0 : _newProps$maintainVis2.minIndexForVisible) != null ? _newProps$maintainVis : 0;
      var newFirstVisibleItemKey = newProps.getItemCount(newProps.data) > minIndexForVisible ? VirtualizedList._getItemKey(newProps, minIndexForVisible) : null;
      if (newProps.maintainVisibleContentPosition != null && prevFirstVisibleItemKey != null && newFirstVisibleItemKey != null) {
        if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {
          var hint = itemCount - prevState.renderMask.numCells() + minIndexForVisible;
          var firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(newProps, prevFirstVisibleItemKey, hint);
          maintainVisibleContentPositionAdjustment = firstVisibleItemIndex != null ? firstVisibleItemIndex - minIndexForVisible : null;
        } else {
          maintainVisibleContentPositionAdjustment = null;
        }
      }
      var constrainedCells = VirtualizedList._constrainToItemCount(maintainVisibleContentPositionAdjustment != null ? {
        first: prevState.cellsAroundViewport.first + maintainVisibleContentPositionAdjustment,
        last: prevState.cellsAroundViewport.last + maintainVisibleContentPositionAdjustment
      } : prevState.cellsAroundViewport, newProps);
      return {
        cellsAroundViewport: constrainedCells,
        renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),
        firstVisibleItemKey: newFirstVisibleItemKey,
        pendingScrollUpdateCount: maintainVisibleContentPositionAdjustment != null ? prevState.pendingScrollUpdateCount + 1 : prevState.pendingScrollUpdateCount
      };
    }
  }, {
    key: "_constrainToItemCount",
    value: function _constrainToItemCount(cells, props) {
      var itemCount = props.getItemCount(props.data);
      var lastPossibleCellIndex = itemCount - 1;
      var maxToRenderPerBatch = (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch);
      var maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);
      return {
        first: (0, _clamp.default)(0, cells.first, maxFirst),
        last: Math.min(lastPossibleCellIndex, cells.last)
      };
    }
  }, {
    key: "_keyExtractor",
    value: function _keyExtractor(item, index, props) {
      if (props.keyExtractor != null) {
        return props.keyExtractor(item, index);
      }
      var key = (0, _VirtualizeUtils.keyExtractor)(item, index);
      if (key === String(index)) {
        _usedIndexForKey = true;
        if (item.type && item.type.displayName) {
          _keylessItemComponentName = item.type.displayName;
        }
      }
      return key;
    }
  }]);
}(_StateSafePureComponent.default);
VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
var styles = _reactNative.StyleSheet.create({
  verticallyInverted: _reactNative.Platform.OS === 'android' ? {
    transform: [{
      scale: -1
    }]
  } : {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  },
  debug: {
    flex: 1
  },
  debugOverlayBase: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  debugOverlay: {
    bottom: 0,
    width: 20,
    borderColor: 'blue',
    borderWidth: 1
  },
  debugOverlayFrame: {
    left: 0,
    backgroundColor: 'orange'
  },
  debugOverlayFrameLast: {
    left: 0,
    borderColor: 'green',
    borderWidth: 2
  },
  debugOverlayFrameVis: {
    left: 0,
    borderColor: 'red',
    borderWidth: 2
  }
});
var _default = exports.default = VirtualizedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,