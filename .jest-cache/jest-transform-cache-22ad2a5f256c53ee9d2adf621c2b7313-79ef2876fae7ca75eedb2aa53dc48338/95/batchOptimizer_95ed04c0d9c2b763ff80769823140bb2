ef65bfbbd0870e4958e2a8b103bee7de
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.batchOptimizer = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var BatchOptimizer = function () {
  function BatchOptimizer() {
    var _this = this;
    (0, _classCallCheck2.default)(this, BatchOptimizer);
    this.networkSpeed = 'medium';
    this.successRate = 1.0;
    this.times = [];
    this.lastRecommended = null;
    _netinfo.default.addEventListener(function (state) {
      if (state.type === 'wifi') _this.networkSpeed = 'fast';else if (state.type === 'cellular') {
        var _state$details;
        var gen = (_state$details = state.details) == null ? void 0 : _state$details.cellularGeneration;
        if (gen === '4g' || gen === '5g') _this.networkSpeed = 'fast';else if (gen === '3g') _this.networkSpeed = 'medium';else _this.networkSpeed = 'slow';
      } else _this.networkSpeed = 'slow';
    });
  }
  return (0, _createClass2.default)(BatchOptimizer, [{
    key: "calculate",
    value: function calculate(queueSize) {
      var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';
      var cfg = this.getConfig();
      var size = cfg.optimal;
      if (queueSize > 100) size = Math.min(size * 2, cfg.max);else if (queueSize < 10) size = Math.max(cfg.min, Math.floor(size / 2));
      if (this.successRate < 0.5) size = cfg.min;else if (this.successRate > 0.95 && this.averageTime() < 1000) size = Math.min(Math.floor(size * 1.5), cfg.max);
      if (priority === 'high') size = Math.max(1, Math.floor(size / 2));
      if (priority === 'low') size = Math.min(Math.floor(size * 1.5), cfg.max);
      var recommended = Math.max(cfg.min, Math.min(cfg.max, size));
      this.lastRecommended = recommended;
      return recommended;
    }
  }, {
    key: "record",
    value: function record(batchSize, success, ms) {
      this.successRate = this.successRate * 0.9 + (success ? 0.1 : 0);
      this.times.push(ms);
      if (this.times.length > 10) this.times.shift();
    }
  }, {
    key: "averageTime",
    value: function averageTime() {
      if (this.times.length === 0) return 0;
      return this.times.reduce(function (a, b) {
        return a + b;
      }, 0) / this.times.length;
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      switch (this.networkSpeed) {
        case 'fast':
          return {
            min: 5,
            optimal: 20,
            max: 50
          };
        case 'medium':
          return {
            min: 3,
            optimal: 10,
            max: 20
          };
        default:
          return {
            min: 1,
            optimal: 3,
            max: 5
          };
      }
    }
  }, {
    key: "getStatistics",
    value: function getStatistics() {
      var _this$lastRecommended;
      var estimated = (_this$lastRecommended = this.lastRecommended) != null ? _this$lastRecommended : this.calculate(20, 'normal');
      return {
        recommendedBatchSize: estimated,
        successRate: this.successRate,
        avgResponseTime: this.averageTime()
      };
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!BatchOptimizer.instance) {
        BatchOptimizer.instance = new BatchOptimizer();
      }
      return BatchOptimizer.instance;
    }
  }]);
}();
var batchOptimizer = exports.batchOptimizer = BatchOptimizer.getInstance();
var _default = exports.default = batchOptimizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,