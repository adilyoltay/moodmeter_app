{"version":3,"names":["_netinfo","_interopRequireDefault","require","BatchOptimizer","_this","_classCallCheck2","default","networkSpeed","successRate","times","lastRecommended","NetInfo","addEventListener","state","type","_state$details","gen","details","cellularGeneration","_createClass2","key","value","calculate","queueSize","priority","arguments","length","undefined","cfg","getConfig","size","optimal","Math","min","max","floor","averageTime","recommended","record","batchSize","success","ms","push","shift","reduce","a","b","getStatistics","_this$lastRecommended","estimated","recommendedBatchSize","avgResponseTime","getInstance","instance","batchOptimizer","exports","_default"],"sources":["batchOptimizer.ts"],"sourcesContent":["import NetInfo from '@react-native-community/netinfo';\n\nclass BatchOptimizer {\n  private static instance: BatchOptimizer;\n  private networkSpeed: 'slow' | 'medium' | 'fast' = 'medium';\n  private successRate = 1.0;\n  private times: number[] = [];\n  private lastRecommended: number | null = null;\n\n  static getInstance(): BatchOptimizer {\n    if (!BatchOptimizer.instance) {\n      BatchOptimizer.instance = new BatchOptimizer();\n    }\n    return BatchOptimizer.instance;\n  }\n\n  private constructor() {\n    NetInfo.addEventListener((state) => {\n      if (state.type === 'wifi') this.networkSpeed = 'fast';\n      else if (state.type === 'cellular') {\n        const gen = (state.details as any)?.cellularGeneration;\n        if (gen === '4g' || gen === '5g') this.networkSpeed = 'fast';\n        else if (gen === '3g') this.networkSpeed = 'medium';\n        else this.networkSpeed = 'slow';\n      } else this.networkSpeed = 'slow';\n    });\n  }\n\n  calculate(queueSize: number, priority: 'low' | 'normal' | 'high' = 'normal'): number {\n    const cfg = this.getConfig();\n    let size = cfg.optimal;\n    if (queueSize > 100) size = Math.min(size * 2, cfg.max);\n    else if (queueSize < 10) size = Math.max(cfg.min, Math.floor(size / 2));\n    if (this.successRate < 0.5) size = cfg.min;\n    else if (this.successRate > 0.95 && this.averageTime() < 1000) size = Math.min(Math.floor(size * 1.5), cfg.max);\n    if (priority === 'high') size = Math.max(1, Math.floor(size / 2));\n    if (priority === 'low') size = Math.min(Math.floor(size * 1.5), cfg.max);\n    const recommended = Math.max(cfg.min, Math.min(cfg.max, size));\n    this.lastRecommended = recommended;\n    return recommended;\n  }\n\n  record(batchSize: number, success: boolean, ms: number): void {\n    this.successRate = this.successRate * 0.9 + (success ? 0.1 : 0);\n    this.times.push(ms);\n    if (this.times.length > 10) this.times.shift();\n  }\n\n  private averageTime(): number {\n    if (this.times.length === 0) return 0;\n    return this.times.reduce((a, b) => a + b, 0) / this.times.length;\n  }\n\n  private getConfig(): { min: number; optimal: number; max: number } {\n    switch (this.networkSpeed) {\n      case 'fast':\n        return { min: 5, optimal: 20, max: 50 };\n      case 'medium':\n        return { min: 3, optimal: 10, max: 20 };\n      default:\n        return { min: 1, optimal: 3, max: 5 };\n    }\n  }\n\n  getStatistics(): { recommendedBatchSize: number; successRate: number; avgResponseTime: number } {\n    // Use last computed recommendation if available; otherwise estimate with a nominal queue size\n    const estimated = this.lastRecommended ?? this.calculate(20, 'normal');\n    return {\n      recommendedBatchSize: estimated,\n      successRate: this.successRate,\n      avgResponseTime: this.averageTime(),\n    };\n  }\n}\n\nexport const batchOptimizer = BatchOptimizer.getInstance();\nexport default batchOptimizer;\n\n\n"],"mappings":"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","ignoreList":[]}