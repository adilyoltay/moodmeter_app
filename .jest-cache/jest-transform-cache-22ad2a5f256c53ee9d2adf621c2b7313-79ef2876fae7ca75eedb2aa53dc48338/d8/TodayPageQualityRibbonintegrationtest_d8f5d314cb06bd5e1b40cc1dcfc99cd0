a96fb52565a0e1c29060c36e7abc115a
_getJestObj().mock('@react-native-async-storage/async-storage');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
describe('Today Page - Quality Ribbon Integration', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    yield (0, _seedData.clearAllTestData)();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue();
    mockAsyncStorage.removeItem.mockResolvedValue();
  }));
  afterEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllTimers();
    jest.useRealTimers();
    yield (0, _seedData.clearAllTestData)();
  }));
  describe('ðŸ”„ Fresh Pipeline Results', function () {
    it('[QR:today:fresh] should display Fresh source badge with immediate processing', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('high', ['mood']);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'high', 'mood');
      expect(freshResult).toBeDefined();
      expect(freshResult.metadata.source).toBe('fresh');
      expect(freshResult.qualityMetadata.quality).toBe('high');
      expect(freshResult.qualityMetadata.sampleSize).toBe(16);
    }));
    it('[QR:today:fresh] should trigger cache invalidation for manual refresh', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('high', ['mood']);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'high', 'mood');
      expect(freshResult.metadata.source).toBe('fresh');
      expect(freshResult.qualityMetadata.freshnessMs).toBeLessThan(1000);
    }));
  });
  describe('ðŸ’¾ Cache Behavior & TTL Transitions', function () {
    it('[QR:today:cache] should transition from Fresh to Cache after TTL expires', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('medium', ['mood']);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'medium', 'mood');
      expect(freshResult.metadata.source).toBe('fresh');
      jest.advanceTimersByTime(_seedData.TEST_ENV.TTL_MS + 1000);
      var cachedResult = (0, _seedData.createMockPipelineResult)('cache', 'medium', 'mood');
      expect(cachedResult.metadata.source).toBe('cache');
      expect(cachedResult.qualityMetadata.quality).toBe('medium');
    }), {
      timeout: 8000
    });
    it('[QR:today:cache] should show appropriate age badge for cached results', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('medium', ['mood']);
      var cachedResult = (0, _seedData.createMockPipelineResult)('cache', 'medium', 'mood');
      cachedResult.metadata.processedAt = Date.now() - 2 * 60 * 60 * 1000;
      cachedResult.qualityMetadata.freshnessMs = 2 * 60 * 60 * 1000;
      expect(cachedResult.metadata.source).toBe('cache');
      expect(cachedResult.qualityMetadata.freshnessMs).toBeGreaterThan(60 * 60 * 1000);
    }));
  });
  describe('ðŸš« Quality Ribbon Hiding Conditions', function () {
    it('[QR:today:hidden] should hide Quality Ribbon when no metadata is provided', (0, _asyncToGenerator2.default)(function* () {
      var resultWithoutMeta = {
        insights: {
          therapeutic: [],
          progress: []
        },
        patterns: [],
        analytics: {},
        metadata: {
          source: 'heuristic'
        }
      };
      expect(resultWithoutMeta).toBeDefined();
      expect(resultWithoutMeta.qualityMetadata).toBeUndefined();
    }));
    it('[QR:today:hidden] should hide Quality Ribbon when pipeline processing fails', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Pipeline processing failed');
      expect(error.message).toBe('Pipeline processing failed');
    }));
  });
  describe('ðŸ”„ Quality Level Variations', function () {
    it.each([['high', 'high', 16], ['medium', 'medium', 10], ['low', 'low', 4]])('should display correct quality badge for %s scenario', function () {
      var _ref9 = (0, _asyncToGenerator2.default)(function* (scenario, expectedBadge, expectedSampleSize) {
        yield (0, _seedData.seedTestData)(scenario, ['mood']);
        var result = (0, _seedData.createMockPipelineResult)('unified', scenario, 'mood');
        expect(result.metadata.source).toBe('fresh');
        expect(result.qualityMetadata.quality).toBe(expectedBadge);
        expect(result.qualityMetadata.sampleSize).toBe(expectedSampleSize);
      });
      return function (_x, _x2, _x3) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
  describe('âš¡ Heuristic Fallback Behavior', function () {
    it('should show heuristic source with immediate freshness', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('low', ['mood']);
      var heuristicResult = (0, _seedData.createMockPipelineResult)('heuristic', 'low', 'mood');
      expect(heuristicResult.metadata.source).toBe('heuristic');
      expect(heuristicResult.qualityMetadata.quality).toBe('low');
      expect(heuristicResult.qualityMetadata.sampleSize).toBe(4);
    }));
  });
  describe('ðŸ§ª Test Mode Integration', function () {
    it('should use TEST_TTL_MS for cache expiry in test mode', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedTestData)('high', ['mood']);
      var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'mood');
      expect(result.metadata.source).toBe('fresh');
      expect(result.qualityMetadata.quality).toBe('high');
      expect(process.env.TEST_MODE).toBe('1');
      expect(process.env.TEST_TTL_MS).toBe('5000');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9hc3luY1N0b3JhZ2UiLCJfc2VlZERhdGEiLCJfcmVxdWlyZSIsImplc3QiLCJtb2NrQXN5bmNTdG9yYWdlIiwiQXN5bmNTdG9yYWdlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiZGVmYXVsdCIsImNsZWFyQWxsTW9ja3MiLCJ1c2VGYWtlVGltZXJzIiwiY2xlYXJBbGxUZXN0RGF0YSIsImdldEl0ZW0iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxUaW1lcnMiLCJ1c2VSZWFsVGltZXJzIiwiaXQiLCJzZWVkVGVzdERhdGEiLCJmcmVzaFJlc3VsdCIsImNyZWF0ZU1vY2tQaXBlbGluZVJlc3VsdCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwibWV0YWRhdGEiLCJzb3VyY2UiLCJ0b0JlIiwicXVhbGl0eU1ldGFkYXRhIiwicXVhbGl0eSIsInNhbXBsZVNpemUiLCJmcmVzaG5lc3NNcyIsInRvQmVMZXNzVGhhbiIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJURVNUX0VOViIsIlRUTF9NUyIsImNhY2hlZFJlc3VsdCIsInRpbWVvdXQiLCJwcm9jZXNzZWRBdCIsIkRhdGUiLCJub3ciLCJ0b0JlR3JlYXRlclRoYW4iLCJyZXN1bHRXaXRob3V0TWV0YSIsImluc2lnaHRzIiwidGhlcmFwZXV0aWMiLCJwcm9ncmVzcyIsInBhdHRlcm5zIiwiYW5hbHl0aWNzIiwidG9CZVVuZGVmaW5lZCIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiZWFjaCIsIl9yZWY5Iiwic2NlbmFyaW8iLCJleHBlY3RlZEJhZGdlIiwiZXhwZWN0ZWRTYW1wbGVTaXplIiwicmVzdWx0IiwiX3giLCJfeDIiLCJfeDMiLCJhcHBseSIsImFyZ3VtZW50cyIsImhldXJpc3RpY1Jlc3VsdCIsInByb2Nlc3MiLCJlbnYiLCJURVNUX01PREUiLCJURVNUX1RUTF9NUyJdLCJzb3VyY2VzIjpbIlRvZGF5UGFnZVF1YWxpdHlSaWJib24uaW50ZWdyYXRpb24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDwn6eqIEludGVncmF0aW9uIFRlc3RzIC0gVG9kYXkgUGFnZSBRdWFsaXR5IFJpYmJvblxuICogXG4gKiBUZXN0cyBGcmVzaC9DYWNoZSB0cmFuc2l0aW9ucywgaW52YWxpZGF0aW9uLCBhbmQgUXVhbGl0eSBSaWJib24gdmlzaWJpbGl0eVxuICogd2l0aCBkZXRlcm1pbmlzdGljIHRlc3QgbW9kZSBhbmQgcGlwZWxpbmUgc3R1YmJpbmcuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgVmlldywgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcbmltcG9ydCB7IFxuICBjbGVhckFsbFRlc3REYXRhLCBcbiAgc2VlZFRlc3REYXRhLCBcbiAgY3JlYXRlTW9ja1BpcGVsaW5lUmVzdWx0LFxuICBURVNUX0VOVlxufSBmcm9tICcuLi9maXh0dXJlcy9zZWVkRGF0YSc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJyk7XG5cbmNvbnN0IG1vY2tBc3luY1N0b3JhZ2UgPSBBc3luY1N0b3JhZ2UgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIEFzeW5jU3RvcmFnZT47XG5cbmRlc2NyaWJlKCdUb2RheSBQYWdlIC0gUXVhbGl0eSBSaWJib24gSW50ZWdyYXRpb24nLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgIFxuICAgIC8vIENsZWFyIHRlc3QgZGF0YVxuICAgIGF3YWl0IGNsZWFyQWxsVGVzdERhdGEoKTtcbiAgICBcbiAgICAvLyBNb2NrIEFzeW5jU3RvcmFnZVxuICAgIG1vY2tBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgICBtb2NrQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoKTtcbiAgICBtb2NrQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsVGltZXJzKCk7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gICAgYXdhaXQgY2xlYXJBbGxUZXN0RGF0YSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgn8J+UhCBGcmVzaCBQaXBlbGluZSBSZXN1bHRzJywgKCkgPT4ge1xuICAgIGl0KCdbUVI6dG9kYXk6ZnJlc2hdIHNob3VsZCBkaXNwbGF5IEZyZXNoIHNvdXJjZSBiYWRnZSB3aXRoIGltbWVkaWF0ZSBwcm9jZXNzaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gU2VlZCBoaWdoIHF1YWxpdHkgZGF0YVxuICAgICAgYXdhaXQgc2VlZFRlc3REYXRhKCdoaWdoJywgWydtb29kJ10pO1xuICAgICAgXG4gICAgICAvLyBDcmVhdGUgbW9jayByZXN1bHRcbiAgICAgIGNvbnN0IGZyZXNoUmVzdWx0ID0gY3JlYXRlTW9ja1BpcGVsaW5lUmVzdWx0KCd1bmlmaWVkJywgJ2hpZ2gnLCAnbW9vZCcpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgbW9jayBzdHJ1Y3R1cmVcbiAgICAgIGV4cGVjdChmcmVzaFJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChmcmVzaFJlc3VsdC5tZXRhZGF0YS5zb3VyY2UpLnRvQmUoJ2ZyZXNoJyk7XG4gICAgICBleHBlY3QoZnJlc2hSZXN1bHQucXVhbGl0eU1ldGFkYXRhLnF1YWxpdHkpLnRvQmUoJ2hpZ2gnKTtcbiAgICAgIGV4cGVjdChmcmVzaFJlc3VsdC5xdWFsaXR5TWV0YWRhdGEuc2FtcGxlU2l6ZSkudG9CZSgxNik7XG4gICAgfSk7XG5cbiAgICBpdCgnW1FSOnRvZGF5OmZyZXNoXSBzaG91bGQgdHJpZ2dlciBjYWNoZSBpbnZhbGlkYXRpb24gZm9yIG1hbnVhbCByZWZyZXNoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgc2VlZFRlc3REYXRhKCdoaWdoJywgWydtb29kJ10pO1xuICAgICAgXG4gICAgICBjb25zdCBmcmVzaFJlc3VsdCA9IGNyZWF0ZU1vY2tQaXBlbGluZVJlc3VsdCgndW5pZmllZCcsICdoaWdoJywgJ21vb2QnKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGZyZXNoIHJlc3VsdCBoYXMgY29ycmVjdCBtZXRhZGF0YVxuICAgICAgZXhwZWN0KGZyZXNoUmVzdWx0Lm1ldGFkYXRhLnNvdXJjZSkudG9CZSgnZnJlc2gnKTtcbiAgICAgIGV4cGVjdChmcmVzaFJlc3VsdC5xdWFsaXR5TWV0YWRhdGEuZnJlc2huZXNzTXMpLnRvQmVMZXNzVGhhbigxMDAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ/Cfkr4gQ2FjaGUgQmVoYXZpb3IgJiBUVEwgVHJhbnNpdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ1tRUjp0b2RheTpjYWNoZV0gc2hvdWxkIHRyYW5zaXRpb24gZnJvbSBGcmVzaCB0byBDYWNoZSBhZnRlciBUVEwgZXhwaXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHNlZWRUZXN0RGF0YSgnbWVkaXVtJywgWydtb29kJ10pO1xuICAgICAgXG4gICAgICAvLyBGaXJzdCBjYWxsOiBGcmVzaCByZXN1bHRcbiAgICAgIGNvbnN0IGZyZXNoUmVzdWx0ID0gY3JlYXRlTW9ja1BpcGVsaW5lUmVzdWx0KCd1bmlmaWVkJywgJ21lZGl1bScsICdtb29kJyk7XG4gICAgICBleHBlY3QoZnJlc2hSZXN1bHQubWV0YWRhdGEuc291cmNlKS50b0JlKCdmcmVzaCcpO1xuICAgICAgXG4gICAgICAvLyBTaW11bGF0ZSBUVEwgZXhwaXJ5XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoVEVTVF9FTlYuVFRMX01TICsgMTAwMCk7XG4gICAgICBcbiAgICAgIC8vIFNlY29uZCBjYWxsOiBDYWNoZWQgcmVzdWx0XG4gICAgICBjb25zdCBjYWNoZWRSZXN1bHQgPSBjcmVhdGVNb2NrUGlwZWxpbmVSZXN1bHQoJ2NhY2hlJywgJ21lZGl1bScsICdtb29kJyk7XG4gICAgICBleHBlY3QoY2FjaGVkUmVzdWx0Lm1ldGFkYXRhLnNvdXJjZSkudG9CZSgnY2FjaGUnKTtcbiAgICAgIGV4cGVjdChjYWNoZWRSZXN1bHQucXVhbGl0eU1ldGFkYXRhLnF1YWxpdHkpLnRvQmUoJ21lZGl1bScpO1xuICAgIH0sIHsgdGltZW91dDogODAwMCB9KTtcblxuICAgIGl0KCdbUVI6dG9kYXk6Y2FjaGVdIHNob3VsZCBzaG93IGFwcHJvcHJpYXRlIGFnZSBiYWRnZSBmb3IgY2FjaGVkIHJlc3VsdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBzZWVkVGVzdERhdGEoJ21lZGl1bScsIFsnbW9vZCddKTtcbiAgICAgIFxuICAgICAgLy8gTW9jayBjYWNoZWQgcmVzdWx0IHdpdGggc3BlY2lmaWMgZnJlc2huZXNzXG4gICAgICBjb25zdCBjYWNoZWRSZXN1bHQgPSBjcmVhdGVNb2NrUGlwZWxpbmVSZXN1bHQoJ2NhY2hlJywgJ21lZGl1bScsICdtb29kJyk7XG4gICAgICAvLyBTZXQgcHJvY2Vzc2VkIHRpbWUgdG8gMiBob3VycyBhZ29cbiAgICAgIGNhY2hlZFJlc3VsdC5tZXRhZGF0YS5wcm9jZXNzZWRBdCA9IERhdGUubm93KCkgLSAoMiAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgIGNhY2hlZFJlc3VsdC5xdWFsaXR5TWV0YWRhdGEuZnJlc2huZXNzTXMgPSAyICogNjAgKiA2MCAqIDEwMDA7XG4gICAgICBcbiAgICAgIGV4cGVjdChjYWNoZWRSZXN1bHQubWV0YWRhdGEuc291cmNlKS50b0JlKCdjYWNoZScpO1xuICAgICAgZXhwZWN0KGNhY2hlZFJlc3VsdC5xdWFsaXR5TWV0YWRhdGEuZnJlc2huZXNzTXMpLnRvQmVHcmVhdGVyVGhhbig2MCAqIDYwICogMTAwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfwn5qrIFF1YWxpdHkgUmliYm9uIEhpZGluZyBDb25kaXRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdbUVI6dG9kYXk6aGlkZGVuXSBzaG91bGQgaGlkZSBRdWFsaXR5IFJpYmJvbiB3aGVuIG5vIG1ldGFkYXRhIGlzIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBwaXBlbGluZSByZXN1bHQgd2l0aG91dCBxdWFsaXR5IG1ldGFkYXRhXG4gICAgICBjb25zdCByZXN1bHRXaXRob3V0TWV0YSA9IHtcbiAgICAgICAgaW5zaWdodHM6IHsgdGhlcmFwZXV0aWM6IFtdLCBwcm9ncmVzczogW10gfSxcbiAgICAgICAgcGF0dGVybnM6IFtdLFxuICAgICAgICBhbmFseXRpY3M6IHt9LFxuICAgICAgICBtZXRhZGF0YTogeyBzb3VyY2U6ICdoZXVyaXN0aWMnIH1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSBubyBxdWFsaXR5IG1ldGFkYXRhXG4gICAgICBleHBlY3QocmVzdWx0V2l0aG91dE1ldGEpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoKHJlc3VsdFdpdGhvdXRNZXRhIGFzIGFueSkucXVhbGl0eU1ldGFkYXRhKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnW1FSOnRvZGF5OmhpZGRlbl0gc2hvdWxkIGhpZGUgUXVhbGl0eSBSaWJib24gd2hlbiBwaXBlbGluZSBwcm9jZXNzaW5nIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBwaXBlbGluZSBmYWlsdXJlXG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignUGlwZWxpbmUgcHJvY2Vzc2luZyBmYWlsZWQnKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGVycm9yIGhhbmRsaW5nXG4gICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG9CZSgnUGlwZWxpbmUgcHJvY2Vzc2luZyBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ/CflIQgUXVhbGl0eSBMZXZlbCBWYXJpYXRpb25zJywgKCkgPT4ge1xuICAgIGl0LmVhY2goW1xuICAgICAgWydoaWdoJywgJ2hpZ2gnLCAxNl0sXG4gICAgICBbJ21lZGl1bScsICdtZWRpdW0nLCAxMF0sIFxuICAgICAgWydsb3cnLCAnbG93JywgNF1cbiAgICBdKSgnc2hvdWxkIGRpc3BsYXkgY29ycmVjdCBxdWFsaXR5IGJhZGdlIGZvciAlcyBzY2VuYXJpbycsIGFzeW5jIChzY2VuYXJpbywgZXhwZWN0ZWRCYWRnZSwgZXhwZWN0ZWRTYW1wbGVTaXplKSA9PiB7XG4gICAgICBhd2FpdCBzZWVkVGVzdERhdGEoc2NlbmFyaW8gYXMgJ2hpZ2gnIHwgJ21lZGl1bScgfCAnbG93JywgWydtb29kJ10pO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGVNb2NrUGlwZWxpbmVSZXN1bHQoJ3VuaWZpZWQnLCBzY2VuYXJpbyBhcyAnaGlnaCcgfCAnbWVkaXVtJyB8ICdsb3cnLCAnbW9vZCcpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0Lm1ldGFkYXRhLnNvdXJjZSkudG9CZSgnZnJlc2gnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucXVhbGl0eU1ldGFkYXRhLnF1YWxpdHkpLnRvQmUoZXhwZWN0ZWRCYWRnZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnF1YWxpdHlNZXRhZGF0YS5zYW1wbGVTaXplKS50b0JlKGV4cGVjdGVkU2FtcGxlU2l6ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfimqEgSGV1cmlzdGljIEZhbGxiYWNrIEJlaGF2aW9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2hvdyBoZXVyaXN0aWMgc291cmNlIHdpdGggaW1tZWRpYXRlIGZyZXNobmVzcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHNlZWRUZXN0RGF0YSgnbG93JywgWydtb29kJ10pO1xuICAgICAgXG4gICAgICBjb25zdCBoZXVyaXN0aWNSZXN1bHQgPSBjcmVhdGVNb2NrUGlwZWxpbmVSZXN1bHQoJ2hldXJpc3RpYycsICdsb3cnLCAnbW9vZCcpO1xuICAgICAgXG4gICAgICBleHBlY3QoaGV1cmlzdGljUmVzdWx0Lm1ldGFkYXRhLnNvdXJjZSkudG9CZSgnaGV1cmlzdGljJyk7XG4gICAgICBleHBlY3QoaGV1cmlzdGljUmVzdWx0LnF1YWxpdHlNZXRhZGF0YS5xdWFsaXR5KS50b0JlKCdsb3cnKTtcbiAgICAgIGV4cGVjdChoZXVyaXN0aWNSZXN1bHQucXVhbGl0eU1ldGFkYXRhLnNhbXBsZVNpemUpLnRvQmUoNCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfwn6eqIFRlc3QgTW9kZSBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHVzZSBURVNUX1RUTF9NUyBmb3IgY2FjaGUgZXhwaXJ5IGluIHRlc3QgbW9kZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHNlZWRUZXN0RGF0YSgnaGlnaCcsIFsnbW9vZCddKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlTW9ja1BpcGVsaW5lUmVzdWx0KCd1bmlmaWVkJywgJ2hpZ2gnLCAnbW9vZCcpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0Lm1ldGFkYXRhLnNvdXJjZSkudG9CZSgnZnJlc2gnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucXVhbGl0eU1ldGFkYXRhLnF1YWxpdHkpLnRvQmUoJ2hpZ2gnKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IHRlc3QgZW52aXJvbm1lbnQgaXMgcHJvcGVybHkgY29uZmlndXJlZFxuICAgICAgZXhwZWN0KHByb2Nlc3MuZW52LlRFU1RfTU9ERSkudG9CZSgnMScpO1xuICAgICAgZXhwZWN0KHByb2Nlc3MuZW52LlRFU1RfVFRMX01TKS50b0JlKCc1MDAwJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFtQkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFUdkQsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsU0FBQSxHQUFBSCxPQUFBO0FBSzhCLFNBQUFILFlBQUE7RUFBQSxJQUFBTyxRQUFBLEdBQUFKLE9BQUE7SUFBQUssSUFBQSxHQUFBRCxRQUFBLENBQUFDLElBQUE7RUFBQVIsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQVEsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBSzlCLElBQU1DLGdCQUFnQixHQUFHQyxxQkFBZ0Q7QUFFekVDLFFBQVEsQ0FBQyx5Q0FBeUMsRUFBRSxZQUFNO0VBQ3hEQyxVQUFVLEtBQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBQyxhQUFZO0lBQ3JCTCxJQUFJLENBQUNNLGFBQWEsQ0FBQyxDQUFDO0lBQ3BCTixJQUFJLENBQUNPLGFBQWEsQ0FBQyxDQUFDO0lBR3BCLE1BQU0sSUFBQUMsMEJBQWdCLEVBQUMsQ0FBQztJQUd4QlAsZ0JBQWdCLENBQUNRLE9BQU8sQ0FBQ0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ2hEVCxnQkFBZ0IsQ0FBQ1UsT0FBTyxDQUFDRCxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVDVCxnQkFBZ0IsQ0FBQ1csVUFBVSxDQUFDRixpQkFBaUIsQ0FBQyxDQUFDO0VBQ2pELENBQUMsRUFBQztFQUVGRyxT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QUFBLE9BQUFDLFNBQUE7TUFBQTtJQUFBLElBQUM7RUFDSixDQUFDLENBQUM7RUFFRnhELFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxZQUFNO0lBQzlDYSxFQUFFLENBQUMsdURBQXVELE1BQUFwQixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUN0RSxNQUFNLElBQUFZLHNCQUFZLEVBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7TUFFbkMsSUFBTTJDLGVBQWUsR0FBRyxJQUFBekMsa0NBQXdCLEVBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7TUFFNUVDLE1BQU0sQ0FBQ3dDLGVBQWUsQ0FBQ3RDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQyxXQUFXLENBQUM7TUFDekRKLE1BQU0sQ0FBQ3dDLGVBQWUsQ0FBQ25DLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDLENBQUNGLElBQUksQ0FBQyxLQUFLLENBQUM7TUFDM0RKLE1BQU0sQ0FBQ3dDLGVBQWUsQ0FBQ25DLGVBQWUsQ0FBQ0UsVUFBVSxDQUFDLENBQUNILElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQyxFQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZyQixRQUFRLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtJQUN6Q2EsRUFBRSxDQUFDLHNEQUFzRCxNQUFBcEIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDckUsTUFBTSxJQUFBWSxzQkFBWSxFQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO01BRXBDLElBQU1xQyxNQUFNLEdBQUcsSUFBQW5DLGtDQUF3QixFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO01BRWxFQyxNQUFNLENBQUNrQyxNQUFNLENBQUNoQyxRQUFRLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsT0FBTyxDQUFDO01BQzVDSixNQUFNLENBQUNrQyxNQUFNLENBQUM3QixlQUFlLENBQUNDLE9BQU8sQ0FBQyxDQUFDRixJQUFJLENBQUMsTUFBTSxDQUFDO01BR25ESixNQUFNLENBQUN5QyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLENBQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDO01BQ3ZDSixNQUFNLENBQUN5QyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0UsV0FBVyxDQUFDLENBQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzlDLENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==