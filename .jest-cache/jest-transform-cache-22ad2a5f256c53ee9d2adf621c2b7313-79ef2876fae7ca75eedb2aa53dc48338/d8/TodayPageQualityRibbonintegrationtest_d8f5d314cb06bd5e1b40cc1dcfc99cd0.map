{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_asyncStorage","_seedData","_require","jest","mockAsyncStorage","AsyncStorage","describe","beforeEach","default","clearAllMocks","useFakeTimers","clearAllTestData","getItem","mockResolvedValue","setItem","removeItem","afterEach","clearAllTimers","useRealTimers","it","seedTestData","freshResult","createMockPipelineResult","expect","toBeDefined","metadata","source","toBe","qualityMetadata","quality","sampleSize","freshnessMs","toBeLessThan","advanceTimersByTime","TEST_ENV","TTL_MS","cachedResult","timeout","processedAt","Date","now","toBeGreaterThan","resultWithoutMeta","insights","therapeutic","progress","patterns","analytics","toBeUndefined","error","Error","message","each","_ref9","scenario","expectedBadge","expectedSampleSize","result","_x","_x2","_x3","apply","arguments","heuristicResult","process","env","TEST_MODE","TEST_TTL_MS"],"sources":["TodayPageQualityRibbon.integration.test.tsx"],"sourcesContent":["/**\n * ðŸ§ª Integration Tests - Today Page Quality Ribbon\n * \n * Tests Fresh/Cache transitions, invalidation, and Quality Ribbon visibility\n * with deterministic test mode and pipeline stubbing.\n */\n\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { View, Text } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { \n  clearAllTestData, \n  seedTestData, \n  createMockPipelineResult,\n  TEST_ENV\n} from '../fixtures/seedData';\n\n// Mock dependencies\njest.mock('@react-native-async-storage/async-storage');\n\nconst mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;\n\ndescribe('Today Page - Quality Ribbon Integration', () => {\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n    \n    // Clear test data\n    await clearAllTestData();\n    \n    // Mock AsyncStorage\n    mockAsyncStorage.getItem.mockResolvedValue(null);\n    mockAsyncStorage.setItem.mockResolvedValue();\n    mockAsyncStorage.removeItem.mockResolvedValue();\n  });\n\n  afterEach(async () => {\n    jest.clearAllTimers();\n    jest.useRealTimers();\n    await clearAllTestData();\n  });\n\n  describe('ðŸ”„ Fresh Pipeline Results', () => {\n    it('[QR:today:fresh] should display Fresh source badge with immediate processing', async () => {\n      // Seed high quality data\n      await seedTestData('high', ['mood']);\n      \n      // Create mock result\n      const freshResult = createMockPipelineResult('unified', 'high', 'mood');\n      \n      // Verify mock structure\n      expect(freshResult).toBeDefined();\n      expect(freshResult.metadata.source).toBe('fresh');\n      expect(freshResult.qualityMetadata.quality).toBe('high');\n      expect(freshResult.qualityMetadata.sampleSize).toBe(16);\n    });\n\n    it('[QR:today:fresh] should trigger cache invalidation for manual refresh', async () => {\n      await seedTestData('high', ['mood']);\n      \n      const freshResult = createMockPipelineResult('unified', 'high', 'mood');\n      \n      // Verify fresh result has correct metadata\n      expect(freshResult.metadata.source).toBe('fresh');\n      expect(freshResult.qualityMetadata.freshnessMs).toBeLessThan(1000);\n    });\n  });\n\n  describe('ðŸ’¾ Cache Behavior & TTL Transitions', () => {\n    it('[QR:today:cache] should transition from Fresh to Cache after TTL expires', async () => {\n      await seedTestData('medium', ['mood']);\n      \n      // First call: Fresh result\n      const freshResult = createMockPipelineResult('unified', 'medium', 'mood');\n      expect(freshResult.metadata.source).toBe('fresh');\n      \n      // Simulate TTL expiry\n      jest.advanceTimersByTime(TEST_ENV.TTL_MS + 1000);\n      \n      // Second call: Cached result\n      const cachedResult = createMockPipelineResult('cache', 'medium', 'mood');\n      expect(cachedResult.metadata.source).toBe('cache');\n      expect(cachedResult.qualityMetadata.quality).toBe('medium');\n    }, { timeout: 8000 });\n\n    it('[QR:today:cache] should show appropriate age badge for cached results', async () => {\n      await seedTestData('medium', ['mood']);\n      \n      // Mock cached result with specific freshness\n      const cachedResult = createMockPipelineResult('cache', 'medium', 'mood');\n      // Set processed time to 2 hours ago\n      cachedResult.metadata.processedAt = Date.now() - (2 * 60 * 60 * 1000);\n      cachedResult.qualityMetadata.freshnessMs = 2 * 60 * 60 * 1000;\n      \n      expect(cachedResult.metadata.source).toBe('cache');\n      expect(cachedResult.qualityMetadata.freshnessMs).toBeGreaterThan(60 * 60 * 1000);\n    });\n  });\n\n  describe('ðŸš« Quality Ribbon Hiding Conditions', () => {\n    it('[QR:today:hidden] should hide Quality Ribbon when no metadata is provided', async () => {\n      // Mock pipeline result without quality metadata\n      const resultWithoutMeta = {\n        insights: { therapeutic: [], progress: [] },\n        patterns: [],\n        analytics: {},\n        metadata: { source: 'heuristic' }\n      };\n      \n      // Verify no quality metadata\n      expect(resultWithoutMeta).toBeDefined();\n      expect((resultWithoutMeta as any).qualityMetadata).toBeUndefined();\n    });\n\n    it('[QR:today:hidden] should hide Quality Ribbon when pipeline processing fails', async () => {\n      // Mock pipeline failure\n      const error = new Error('Pipeline processing failed');\n      \n      // Verify error handling\n      expect(error.message).toBe('Pipeline processing failed');\n    });\n  });\n\n  describe('ðŸ”„ Quality Level Variations', () => {\n    it.each([\n      ['high', 'high', 16],\n      ['medium', 'medium', 10], \n      ['low', 'low', 4]\n    ])('should display correct quality badge for %s scenario', async (scenario, expectedBadge, expectedSampleSize) => {\n      await seedTestData(scenario as 'high' | 'medium' | 'low', ['mood']);\n      \n      const result = createMockPipelineResult('unified', scenario as 'high' | 'medium' | 'low', 'mood');\n      \n      expect(result.metadata.source).toBe('fresh');\n      expect(result.qualityMetadata.quality).toBe(expectedBadge);\n      expect(result.qualityMetadata.sampleSize).toBe(expectedSampleSize);\n    });\n  });\n\n  describe('âš¡ Heuristic Fallback Behavior', () => {\n    it('should show heuristic source with immediate freshness', async () => {\n      await seedTestData('low', ['mood']);\n      \n      const heuristicResult = createMockPipelineResult('heuristic', 'low', 'mood');\n      \n      expect(heuristicResult.metadata.source).toBe('heuristic');\n      expect(heuristicResult.qualityMetadata.quality).toBe('low');\n      expect(heuristicResult.qualityMetadata.sampleSize).toBe(4);\n    });\n  });\n\n  describe('ðŸ§ª Test Mode Integration', () => {\n    it('should use TEST_TTL_MS for cache expiry in test mode', async () => {\n      await seedTestData('high', ['mood']);\n      \n      const result = createMockPipelineResult('unified', 'high', 'mood');\n      \n      expect(result.metadata.source).toBe('fresh');\n      expect(result.qualityMetadata.quality).toBe('high');\n      \n      // Verify test environment is properly configured\n      expect(process.env.TEST_MODE).toBe('1');\n      expect(process.env.TEST_TTL_MS).toBe('5000');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}