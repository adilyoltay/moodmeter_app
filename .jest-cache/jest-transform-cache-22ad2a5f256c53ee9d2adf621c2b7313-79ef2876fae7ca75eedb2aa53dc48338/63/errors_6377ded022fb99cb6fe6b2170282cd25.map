{"version":3,"names":["_prettyFormat","_interopRequireDefault","require","e","__esModule","default","ErrorWithStack","_Error","message","callsite","_this","_classCallCheck2","_callSuper","Error","captureStackTrace","_inherits2","_createClass2","_wrapNativeSuper2","exports","prepareErrorMessage","error","name","value","errorMessage","replace","toString","min","createQueryByError","includes","copyStackTrace","target","stackTraceSource","stack"],"sources":["../../src/helpers/errors.ts"],"sourcesContent":["import prettyFormat from 'pretty-format';\n\nexport class ErrorWithStack extends Error {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n  constructor(message: string | undefined, callsite: Function) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, callsite);\n    }\n  }\n}\n\nexport const prepareErrorMessage = (\n  // TS states that error caught in a catch close are of type `unknown`\n  // most real cases will be `Error`, but better safe than sorry\n  error: unknown,\n  name?: string,\n  value?: unknown,\n): string => {\n  let errorMessage: string;\n  if (error instanceof Error) {\n    // Strip info about custom predicate\n    errorMessage = error.message.replace(/ matching custom predicate[^]*/gm, '');\n  } else if (error && typeof error === 'object') {\n    errorMessage = error.toString();\n  } else {\n    errorMessage = 'Caught unknown error';\n  }\n\n  if (name && value) {\n    errorMessage += ` with ${name} ${prettyFormat(value, { min: true })}`;\n  }\n  return errorMessage;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport const createQueryByError = (error: unknown, callsite: Function): null => {\n  if (error instanceof Error) {\n    if (error.message.includes('No instances found')) {\n      return null;\n    }\n    throw new ErrorWithStack(error.message, callsite);\n  }\n\n  throw new ErrorWithStack(\n    `Query: caught unknown error type: ${typeof error}, value: ${error}`,\n    callsite,\n  );\n};\n\nexport function copyStackTrace(target: unknown, stackTraceSource: Error) {\n  if (target instanceof Error && stackTraceSource.stack) {\n    target.stack = stackTraceSource.stack.replace(stackTraceSource.message, target.message);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAyC,SAAAD,uBAAAE,CAAA;EAAA,OAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAAA,IAE5BG,cAAc,aAAAC,MAAA;EAEzB,SAAAD,eAAYE,OAA2B,EAAEC,QAAkB,EAAE;IAAA,IAAAC,KAAA;IAAA,IAAAC,gBAAA,CAAAN,OAAA,QAAAC,cAAA;IAC3DI,KAAA,GAAAE,UAAA,OAAAN,cAAA,GAAME,OAAO;IACb,IAAIK,KAAK,CAACC,iBAAiB,EAAE;MAC3BD,KAAK,CAACC,iBAAiB,CAAAJ,KAAA,EAAOD,QAAQ,CAAC;IACzC;IAAA,OAAAC,KAAA;EACF;EAAA,IAAAK,UAAA,CAAAV,OAAA,EAAAC,cAAA,EAAAC,MAAA;EAAA,WAAAS,aAAA,CAAAX,OAAA,EAAAC,cAAA;AAAA,MAAAW,iBAAA,CAAAZ,OAAA,EAPkCQ,KAAK;AAQxCK,OAAA,CAAAZ,cAAA,GAAAA,cAAA;AAEM,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAG9BC,KAAc,EACdC,IAAa,EACbC,KAAe,EACJ;EACX,IAAIC,YAAoB;EACxB,IAAIH,KAAK,YAAYP,KAAK,EAAE;IAE1BU,YAAY,GAAGH,KAAK,CAACZ,OAAO,CAACgB,OAAO,CAAC,kCAAkC,EAAE,EAAE,CAAC;EAC9E,CAAC,MAAM,IAAIJ,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7CG,YAAY,GAAGH,KAAK,CAACK,QAAQ,CAAC,CAAC;EACjC,CAAC,MAAM;IACLF,YAAY,GAAG,sBAAsB;EACvC;EAEA,IAAIF,IAAI,IAAIC,KAAK,EAAE;IACjBC,YAAY,IAAI,SAASF,IAAI,IAAI,IAAArB,aAAA,CAAAK,OAAY,EAACiB,KAAK,EAAE;MAAEI,GAAG,EAAE;IAAK,CAAC,CAAC,EAAE;EACvE;EACA,OAAOH,YAAY;AACrB,CAAC;AAEDL,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AACO,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIP,KAAc,EAAEX,QAAkB,EAAW;EAC9E,IAAIW,KAAK,YAAYP,KAAK,EAAE;IAC1B,IAAIO,KAAK,CAACZ,OAAO,CAACoB,QAAQ,CAAC,oBAAoB,CAAC,EAAE;MAChD,OAAO,IAAI;IACb;IACA,MAAM,IAAItB,cAAc,CAACc,KAAK,CAACZ,OAAO,EAAEC,QAAQ,CAAC;EACnD;EAEA,MAAM,IAAIH,cAAc,CACtB,qCAAqC,OAAOc,KAAK,YAAYA,KAAK,EAAE,EACpEX,QACF,CAAC;AACH,CAAC;AAACS,OAAA,CAAAS,kBAAA,GAAAA,kBAAA;AAEK,SAASE,cAAcA,CAACC,MAAe,EAAEC,gBAAuB,EAAE;EACvE,IAAID,MAAM,YAAYjB,KAAK,IAAIkB,gBAAgB,CAACC,KAAK,EAAE;IACrDF,MAAM,CAACE,KAAK,GAAGD,gBAAgB,CAACC,KAAK,CAACR,OAAO,CAACO,gBAAgB,CAACvB,OAAO,EAAEsB,MAAM,CAACtB,OAAO,CAAC;EACzF;AACF","ignoreList":[]}