15624dfc3009024d4eaec3f22cdddc11
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveProp = toHaveProp;
var _jestMatcherUtils = require("jest-matcher-utils");
var _utils = require("./utils");
function toHaveProp(element, name, expectedValue) {
  var _this = this;
  (0, _utils.checkHostElement)(element, toHaveProp, this);
  var isExpectedValueDefined = expectedValue !== undefined;
  var hasProp = name in element.props;
  var receivedValue = element.props[name];
  var pass = isExpectedValueDefined ? hasProp && this.equals(expectedValue, receivedValue) : hasProp;
  return {
    pass: pass,
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      var matcher = (0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveProp`, 'element', (0, _jestMatcherUtils.printExpected)(name), {
        secondArgument: isExpectedValueDefined ? (0, _jestMatcherUtils.printExpected)(expectedValue) : undefined
      });
      return (0, _utils.formatMessage)(matcher, `Expected element ${to} have prop`, formatProp(name, expectedValue), 'Received', hasProp ? formatProp(name, receivedValue) : undefined);
    }
  };
}
function formatProp(name, value) {
  if (value === undefined) {
    return name;
  }
  if (typeof value === 'string') {
    return `${name}="${value}"`;
  }
  return `${name}={${(0, _jestMatcherUtils.stringify)(value)}}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdE1hdGNoZXJVdGlscyIsInJlcXVpcmUiLCJfdXRpbHMiLCJ0b0hhdmVQcm9wIiwiZWxlbWVudCIsIm5hbWUiLCJleHBlY3RlZFZhbHVlIiwiX3RoaXMiLCJjaGVja0hvc3RFbGVtZW50IiwiaXNFeHBlY3RlZFZhbHVlRGVmaW5lZCIsInVuZGVmaW5lZCIsImhhc1Byb3AiLCJwcm9wcyIsInJlY2VpdmVkVmFsdWUiLCJwYXNzIiwiZXF1YWxzIiwibWVzc2FnZSIsInRvIiwiaXNOb3QiLCJtYXRjaGVyIiwibWF0Y2hlckhpbnQiLCJwcmludEV4cGVjdGVkIiwic2Vjb25kQXJndW1lbnQiLCJmb3JtYXRNZXNzYWdlIiwiZm9ybWF0UHJvcCIsInZhbHVlIiwic3RyaW5naWZ5Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hdGNoZXJzL3RvLWhhdmUtcHJvcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBtYXRjaGVySGludCwgcHJpbnRFeHBlY3RlZCwgc3RyaW5naWZ5IH0gZnJvbSAnamVzdC1tYXRjaGVyLXV0aWxzJztcblxuaW1wb3J0IHsgY2hlY2tIb3N0RWxlbWVudCwgZm9ybWF0TWVzc2FnZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9IYXZlUHJvcChcbiAgdGhpczogamVzdC5NYXRjaGVyQ29udGV4dCxcbiAgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIG5hbWU6IHN0cmluZyxcbiAgZXhwZWN0ZWRWYWx1ZTogdW5rbm93bixcbikge1xuICBjaGVja0hvc3RFbGVtZW50KGVsZW1lbnQsIHRvSGF2ZVByb3AsIHRoaXMpO1xuXG4gIGNvbnN0IGlzRXhwZWN0ZWRWYWx1ZURlZmluZWQgPSBleHBlY3RlZFZhbHVlICE9PSB1bmRlZmluZWQ7XG4gIGNvbnN0IGhhc1Byb3AgPSBuYW1lIGluIGVsZW1lbnQucHJvcHM7XG4gIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBlbGVtZW50LnByb3BzW25hbWVdO1xuXG4gIGNvbnN0IHBhc3MgPSBpc0V4cGVjdGVkVmFsdWVEZWZpbmVkXG4gICAgPyBoYXNQcm9wICYmIHRoaXMuZXF1YWxzKGV4cGVjdGVkVmFsdWUsIHJlY2VpdmVkVmFsdWUpXG4gICAgOiBoYXNQcm9wO1xuXG4gIHJldHVybiB7XG4gICAgcGFzcyxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICBjb25zdCBtYXRjaGVyID0gbWF0Y2hlckhpbnQoXG4gICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlUHJvcGAsXG4gICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgcHJpbnRFeHBlY3RlZChuYW1lKSxcbiAgICAgICAge1xuICAgICAgICAgIHNlY29uZEFyZ3VtZW50OiBpc0V4cGVjdGVkVmFsdWVEZWZpbmVkID8gcHJpbnRFeHBlY3RlZChleHBlY3RlZFZhbHVlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZm9ybWF0TWVzc2FnZShcbiAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgYEV4cGVjdGVkIGVsZW1lbnQgJHt0b30gaGF2ZSBwcm9wYCxcbiAgICAgICAgZm9ybWF0UHJvcChuYW1lLCBleHBlY3RlZFZhbHVlKSxcbiAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgaGFzUHJvcCA/IGZvcm1hdFByb3AobmFtZSwgcmVjZWl2ZWRWYWx1ZSkgOiB1bmRlZmluZWQsXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFByb3AobmFtZTogc3RyaW5nLCB2YWx1ZTogdW5rbm93bikge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYCR7bmFtZX09XCIke3ZhbHVlfVwiYDtcbiAgfVxuXG4gIHJldHVybiBgJHtuYW1lfT17JHtzdHJpbmdpZnkodmFsdWUpfX1gO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxpQkFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBRU8sU0FBU0UsVUFBVUEsQ0FFeEJDLE9BQTBCLEVBQzFCQyxJQUFZLEVBQ1pDLGFBQXNCLEVBQ3RCO0VBQUEsSUFBQUMsS0FBQTtFQUNBLElBQUFMLE1BQUEsQ0FBQU0sZ0JBQWdCLEVBQUNKLE9BQU8sRUFBRUQsVUFBVSxFQUFFLElBQUksQ0FBQztFQUUzQyxJQUFNTSxzQkFBc0IsR0FBR0gsYUFBYSxLQUFLSSxTQUFTO0VBQzFELElBQU1DLE9BQU8sR0FBR04sSUFBSSxJQUFJRCxPQUFPLENBQUNRLEtBQUs7RUFDckMsSUFBTUMsYUFBYSxHQUFHVCxPQUFPLENBQUNRLEtBQUssQ0FBQ1AsSUFBSSxDQUFDO0VBRXpDLElBQU1TLElBQUksR0FBR0wsc0JBQXNCLEdBQy9CRSxPQUFPLElBQUksSUFBSSxDQUFDSSxNQUFNLENBQUNULGFBQWEsRUFBRU8sYUFBYSxDQUFDLEdBQ3BERixPQUFPO0VBRVgsT0FBTztJQUNMRyxJQUFJLEVBQUpBLElBQUk7SUFDSkUsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUTtNQUNiLElBQU1DLEVBQUUsR0FBR1YsS0FBSSxDQUFDVyxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUk7TUFDdkMsSUFBTUMsT0FBTyxHQUFHLElBQUFuQixpQkFBQSxDQUFBb0IsV0FBVyxFQUN6QixHQUFHYixLQUFJLENBQUNXLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSxhQUFhLEVBQ3hDLFNBQVMsRUFDVCxJQUFBbEIsaUJBQUEsQ0FBQXFCLGFBQWEsRUFBQ2hCLElBQUksQ0FBQyxFQUNuQjtRQUNFaUIsY0FBYyxFQUFFYixzQkFBc0IsR0FBRyxJQUFBVCxpQkFBQSxDQUFBcUIsYUFBYSxFQUFDZixhQUFhLENBQUMsR0FBR0k7TUFDMUUsQ0FDRixDQUFDO01BQ0QsT0FBTyxJQUFBUixNQUFBLENBQUFxQixhQUFhLEVBQ2xCSixPQUFPLEVBQ1Asb0JBQW9CRixFQUFFLFlBQVksRUFDbENPLFVBQVUsQ0FBQ25CLElBQUksRUFBRUMsYUFBYSxDQUFDLEVBQy9CLFVBQVUsRUFDVkssT0FBTyxHQUFHYSxVQUFVLENBQUNuQixJQUFJLEVBQUVRLGFBQWEsQ0FBQyxHQUFHSCxTQUM5QyxDQUFDO0lBQ0g7RUFDRixDQUFDO0FBQ0g7QUFFQSxTQUFTYyxVQUFVQSxDQUFDbkIsSUFBWSxFQUFFb0IsS0FBYyxFQUFFO0VBQ2hELElBQUlBLEtBQUssS0FBS2YsU0FBUyxFQUFFO0lBQ3ZCLE9BQU9MLElBQUk7RUFDYjtFQUVBLElBQUksT0FBT29CLEtBQUssS0FBSyxRQUFRLEVBQUU7SUFDN0IsT0FBTyxHQUFHcEIsSUFBSSxLQUFLb0IsS0FBSyxHQUFHO0VBQzdCO0VBRUEsT0FBTyxHQUFHcEIsSUFBSSxLQUFLLElBQUFMLGlCQUFBLENBQUEwQixTQUFTLEVBQUNELEtBQUssQ0FBQyxHQUFHO0FBQ3hDIiwiaWdub3JlTGlzdCI6W119