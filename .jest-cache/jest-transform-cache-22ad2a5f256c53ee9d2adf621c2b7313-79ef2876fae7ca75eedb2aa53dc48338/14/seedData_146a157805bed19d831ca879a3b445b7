2cf123db4ab535f29f043bfcfbb4566b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TRACKING_SCENARIOS = exports.TEST_ENV = exports.OCD_SCENARIOS = exports.MOOD_SCENARIOS = exports.CBT_SCENARIOS = void 0;
exports.cleanupSeeds = cleanupSeeds;
exports.clearAllTestData = clearAllTestData;
exports.createMockPipelineResult = createMockPipelineResult;
exports.generateCBTData = generateCBTData;
exports.generateMoodData = generateMoodData;
exports.generateOCDData = generateOCDData;
exports.generateTrackingData = generateTrackingData;
exports.getSeededData = getSeededData;
exports.mockUnifiedPipelineProcess = mockUnifiedPipelineProcess;
exports.seedCBTRecords = seedCBTRecords;
exports.seedOCDScenario = seedOCDScenario;
exports.seedTestData = seedTestData;
exports.seedTrackingCompulsions = seedTrackingCompulsions;
exports.waitForElement = exports.waitForDuration = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var TEST_ENV = exports.TEST_ENV = {
  MODE: process.env.TEST_MODE === '1',
  TTL_MS: parseInt(process.env.TEST_TTL_MS || '5000', 10),
  PIPELINE_STUB: process.env.TEST_PIPELINE_STUB === '1',
  SEED_USER_ID: process.env.TEST_SEED_USER_ID || 'test-user-1'
};
var MOOD_SCENARIOS = exports.MOOD_SCENARIOS = {
  high: {
    name: 'mood_high',
    sampleSize: 16,
    qualityLevel: 'high',
    confidence: 0.88,
    dataQuality: 0.92
  },
  medium: {
    name: 'mood_med',
    sampleSize: 10,
    qualityLevel: 'medium',
    confidence: 0.72,
    dataQuality: 0.78
  },
  low: {
    name: 'mood_low',
    sampleSize: 4,
    qualityLevel: 'low',
    confidence: 0.45,
    dataQuality: 0.58
  }
};
var CBT_SCENARIOS = exports.CBT_SCENARIOS = {
  high: {
    name: 'cbt_high',
    sampleSize: 12,
    qualityLevel: 'high',
    confidence: 0.85,
    dataQuality: 0.89
  },
  medium: {
    name: 'cbt_med',
    sampleSize: 7,
    qualityLevel: 'medium',
    confidence: 0.68,
    dataQuality: 0.74
  },
  low: {
    name: 'cbt_low',
    sampleSize: 3,
    qualityLevel: 'low',
    confidence: 0.42,
    dataQuality: 0.55
  }
};
var TRACKING_SCENARIOS = exports.TRACKING_SCENARIOS = {
  high: {
    name: 'tracking_high',
    sampleSize: 20,
    qualityLevel: 'high',
    confidence: 0.82,
    dataQuality: 0.86
  },
  medium: {
    name: 'tracking_med',
    sampleSize: 11,
    qualityLevel: 'medium',
    confidence: 0.65,
    dataQuality: 0.71
  },
  low: {
    name: 'tracking_low',
    sampleSize: 5,
    qualityLevel: 'low',
    confidence: 0.38,
    dataQuality: 0.52
  }
};
var OCD_SCENARIOS = exports.OCD_SCENARIOS = {
  high: {
    name: 'ocd_high',
    sampleSize: 18,
    qualityLevel: 'high',
    confidence: 0.89,
    dataQuality: 0.91,
    patterns: ['contamination', 'checking', 'symmetry']
  },
  medium: {
    name: 'ocd_med',
    sampleSize: 9,
    qualityLevel: 'medium',
    confidence: 0.71,
    dataQuality: 0.76,
    patterns: ['contamination', 'checking']
  },
  low: {
    name: 'ocd_low',
    sampleSize: 4,
    qualityLevel: 'low',
    confidence: 0.48,
    dataQuality: 0.58,
    patterns: ['contamination']
  }
};
function generateMoodData(scenario) {
  return Array.from({
    length: scenario.sampleSize
  }, function (_, i) {
    var daysSinceStart = i;
    var basePattern = Math.sin(daysSinceStart * 0.2) * 2 + 6;
    var noise = (Math.random() - 0.5) * 2;
    var mood = Math.max(1, Math.min(10, Math.round(basePattern + noise)));
    return {
      id: `mood_${scenario.name}_${i}`,
      user_id: TEST_ENV.SEED_USER_ID,
      mood_level: mood,
      energy_level: Math.max(1, Math.min(10, mood + Math.round((Math.random() - 0.5) * 3))),
      anxiety_level: Math.max(1, Math.min(10, 11 - mood + Math.round((Math.random() - 0.5) * 2))),
      notes: i % 4 === 0 ? `Test mood entry ${i}` : null,
      created_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString()
    };
  });
}
function generateCBTData(scenario) {
  return Array.from({
    length: scenario.sampleSize
  }, function (_, i) {
    var moodBefore = Math.floor(Math.random() * 4) + 3;
    var improvement = Math.floor(Math.random() * 3) + 1;
    var moodAfter = Math.min(10, moodBefore + improvement);
    var situations = ["İş toplantısında hata yaptım", "Arkadaşım mesajıma geç cevap verdi", "Evde düzen bozuktu", "Sosyal medyada kendimi başkalarıyla karşılaştırdım", "İş yerinde eleştiri aldım"];
    var negativeThoughts = ["Hep hata yapıyorum, beceriksizim", "Kimse beni sevmiyor", "Her şey çok dağınık, kontrolsüzüm", "Başkaları benden çok başarılı", "Bu işe yaramıyorum"];
    var balancedThoughts = ["Herkes hata yapabilir, bu normal", "Arkadaşlarım meşgul olabilir", "Ev bazen dağınık olur, düzeltebilirim", "Herkesin farklı bir hikayesi var", "Eleştiri gelişmem için bir fırsat"];
    return {
      id: `cbt_${scenario.name}_${i}`,
      user_id: TEST_ENV.SEED_USER_ID,
      situation: situations[i % situations.length],
      automatic_thoughts: negativeThoughts[i % negativeThoughts.length],
      emotions: JSON.stringify(["anxious", "sad", "worried"].slice(0, Math.floor(Math.random() * 3) + 1)),
      mood_before: moodBefore,
      mood_after: moodAfter,
      balanced_thoughts: balancedThoughts[i % balancedThoughts.length],
      created_at: new Date(Date.now() - i * 18 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - i * 18 * 60 * 60 * 1000).toISOString()
    };
  });
}
function generateTrackingData(scenario) {
  var compulsionTypes = ['washing', 'checking', 'counting', 'organizing', 'repeating'];
  return Array.from({
    length: scenario.sampleSize
  }, function (_, i) {
    return {
      id: `compulsion_${scenario.name}_${i}`,
      user_id: TEST_ENV.SEED_USER_ID,
      type: compulsionTypes[i % compulsionTypes.length],
      intensity: Math.floor(Math.random() * 7) + 4,
      duration_minutes: Math.floor(Math.random() * 45) + 5,
      resistance_level: Math.floor(Math.random() * 5) + 1,
      location: i % 3 === 0 ? 'home' : i % 3 === 1 ? 'work' : 'public',
      notes: i % 5 === 0 ? `Notes for compulsion ${i}` : null,
      created_at: new Date(Date.now() - i * 8 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - i * 8 * 60 * 60 * 1000).toISOString()
    };
  });
}
function generateOCDData(scenario) {
  var patterns = scenario.patterns;
  var patternTriggers = {
    contamination: ['Kapı kollarına dokunmak', 'Banyo kullanımı', 'Yemek hazırlama', 'Dış mekanda bulunma', 'Para/nakit kullanımı'],
    checking: ['Kapıları kilitleme', 'Elektronik cihazları kapatma', 'Önemli belgeleri kontrol', 'Güvenlik kontrolü', 'Randevu/toplantı saatleri'],
    symmetry: ['Eşyaları düzenleme', 'Ayakkabıları sıralama', 'Kitapları hizalama', 'Tablodaki nesneleri yerleştirme', 'Kıyafetleri katlamak']
  };
  return Array.from({
    length: scenario.sampleSize
  }, function (_, i) {
    var currentPattern = patterns[i % patterns.length];
    var triggers = patternTriggers[currentPattern];
    var triggerText = triggers[i % triggers.length];
    return {
      id: `ocd_${scenario.name}_${i}`,
      user_id: TEST_ENV.SEED_USER_ID,
      pattern: currentPattern,
      trigger: triggerText,
      compulsion_type: getCompulsionForPattern(currentPattern),
      intensity: Math.floor(Math.random() * 6) + 5,
      duration_minutes: Math.floor(Math.random() * 60) + 10,
      resistance_attempted: Math.random() > 0.3,
      resistance_success: Math.random() > 0.6,
      urge_strength: Math.floor(Math.random() * 4) + 7,
      anxiety_before: Math.floor(Math.random() * 3) + 8,
      anxiety_after: Math.floor(Math.random() * 5) + 3,
      location: i % 3 === 0 ? 'home' : i % 3 === 1 ? 'work' : 'public',
      notes: `${currentPattern} pattern triggered by: ${triggerText}`,
      created_at: new Date(Date.now() - i * 12 * 60 * 60 * 1000).toISOString(),
      updated_at: new Date(Date.now() - i * 12 * 60 * 60 * 1000).toISOString()
    };
  });
}
function getCompulsionForPattern(pattern) {
  var compulsionMap = {
    contamination: 'washing',
    checking: 'checking',
    symmetry: 'organizing'
  };
  return compulsionMap[pattern];
}
function createMockPipelineResult(source, scenario) {
  var module = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'mood';
  var scenarioConfig = module === 'mood' ? MOOD_SCENARIOS[scenario] : module === 'cbt' ? CBT_SCENARIOS[scenario] : module === 'tracking' ? TRACKING_SCENARIOS[scenario] : OCD_SCENARIOS[scenario];
  var freshnessMs = source === 'unified' ? 0 : source === 'cache' ? TEST_ENV.TTL_MS * 0.3 : source === 'heuristic' ? 0 : TEST_ENV.TTL_MS * 0.7;
  return {
    insights: {
      therapeutic: [{
        text: `${scenarioConfig.qualityLevel} quality therapeutic insight for ${module}`,
        confidence: scenarioConfig.confidence,
        priority: scenarioConfig.qualityLevel === 'high' ? 'high' : scenarioConfig.qualityLevel === 'medium' ? 'medium' : 'low',
        category: module,
        dataPoints: scenarioConfig.sampleSize
      }],
      progress: [{
        metric: `${module}_improvement`,
        value: scenarioConfig.confidence * 10,
        change: scenarioConfig.qualityLevel === 'high' ? 0.8 : scenarioConfig.qualityLevel === 'medium' ? 0.4 : 0.1,
        changeDirection: 'up',
        interpretation: `${scenarioConfig.qualityLevel} confidence improvement in ${module}`
      }]
    },
    patterns: [{
      title: `${module} pattern (${scenarioConfig.qualityLevel} quality)`,
      description: `Detected pattern with ${scenarioConfig.sampleSize} data points`,
      confidence: scenarioConfig.confidence,
      type: 'temporal',
      severity: scenarioConfig.qualityLevel,
      dashboardMetrics: {
        sampleSize: scenarioConfig.sampleSize,
        dataQuality: scenarioConfig.dataQuality,
        coverage: scenarioConfig.confidence
      }
    }],
    analytics: (0, _defineProperty2.default)({}, module, {
      confidence: scenarioConfig.confidence,
      sampleSize: scenarioConfig.sampleSize,
      volatility: scenarioConfig.qualityLevel === 'low' ? 2.1 : 0.8,
      weeklyDelta: scenarioConfig.qualityLevel === 'high' ? 1.2 : scenarioConfig.qualityLevel === 'medium' ? 0.6 : -0.2,
      dataQuality: scenarioConfig.dataQuality,
      baselines: (0, _defineProperty2.default)({}, module, 6.5)
    }),
    metadata: {
      source: source === 'unified' ? 'fresh' : source,
      processedAt: Date.now() - freshnessMs,
      processingTime: source === 'heuristic' ? 150 : 2400,
      pipelineVersion: '1.0',
      cacheTTL: TEST_ENV.TTL_MS
    },
    qualityMetadata: {
      source: source === 'unified' ? 'unified' : source,
      quality: scenarioConfig.qualityLevel,
      sampleSize: scenarioConfig.sampleSize,
      confidence: scenarioConfig.confidence,
      dataQuality: scenarioConfig.dataQuality,
      freshnessMs: freshnessMs
    }
  };
}
function clearAllTestData() {
  return _clearAllTestData.apply(this, arguments);
}
function _clearAllTestData() {
  _clearAllTestData = (0, _asyncToGenerator2.default)(function* () {
    if (!TEST_ENV.MODE) {
      console.warn('clearAllTestData called outside test mode');
      return;
    }
    try {
      var allKeys = yield _asyncStorage.default.getAllKeys();
      var testKeys = allKeys.filter(function (key) {
        return key.includes('test-user-1') || key.includes('_test_') || key.startsWith('quality_ribbon_test_');
      });
      if (testKeys.length > 0) {
        yield _asyncStorage.default.multiRemove(testKeys);
      }
      console.log(`🧹 Cleared ${testKeys.length} test data entries`);
    } catch (error) {
      console.error('Failed to clear test data:', error);
    }
  });
  return _clearAllTestData.apply(this, arguments);
}
function seedTestData(_x) {
  return _seedTestData.apply(this, arguments);
}
function _seedTestData() {
  _seedTestData = (0, _asyncToGenerator2.default)(function* (scenario) {
    var modules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['mood'];
    if (!TEST_ENV.MODE) {
      console.warn('seedTestData called outside test mode');
      return;
    }
    console.log(`🌱 Seeding ${scenario} quality data for modules: ${modules.join(', ')}`);
    try {
      yield clearAllTestData();
      for (var module of modules) {
        if (module === 'mood') {
          var moodData = generateMoodData(MOOD_SCENARIOS[scenario]);
          yield _asyncStorage.default.setItem(`quality_ribbon_test_mood_${scenario}`, JSON.stringify(moodData));
        } else if (module === 'cbt') {
          var cbtData = generateCBTData(CBT_SCENARIOS[scenario]);
          yield _asyncStorage.default.setItem(`quality_ribbon_test_cbt_${scenario}`, JSON.stringify(cbtData));
        } else if (module === 'tracking') {
          var trackingData = generateTrackingData(TRACKING_SCENARIOS[scenario]);
          yield _asyncStorage.default.setItem(`quality_ribbon_test_tracking_${scenario}`, JSON.stringify(trackingData));
        } else if (module === 'ocd') {
          var ocdData = generateOCDData(OCD_SCENARIOS[scenario]);
          yield _asyncStorage.default.setItem(`quality_ribbon_test_ocd_${scenario}`, JSON.stringify(ocdData));
        }
      }
      console.log(`✅ Seeded ${scenario} quality test data successfully`);
    } catch (error) {
      console.error(`Failed to seed test data for ${scenario}:`, error);
      throw error;
    }
  });
  return _seedTestData.apply(this, arguments);
}
function getSeededData(_x2, _x3) {
  return _getSeededData.apply(this, arguments);
}
function _getSeededData() {
  _getSeededData = (0, _asyncToGenerator2.default)(function* (module, scenario) {
    try {
      var key = `quality_ribbon_test_${module}_${scenario}`;
      var data = yield _asyncStorage.default.getItem(key);
      return data ? JSON.parse(data) : [];
    } catch (error) {
      console.error(`Failed to get seeded data for ${module}-${scenario}:`, error);
      return [];
    }
  });
  return _getSeededData.apply(this, arguments);
}
var waitForElement = exports.waitForElement = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (query) {
    var timeoutMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8000;
    var start = Date.now();
    while (Date.now() - start < timeoutMs) {
      var el = query();
      if (el) return el;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }
    throw new Error(`Element not found within ${timeoutMs}ms timeout`);
  });
  return function waitForElement(_x4) {
    return _ref.apply(this, arguments);
  };
}();
var waitForDuration = exports.waitForDuration = function waitForDuration(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};
function mockUnifiedPipelineProcess() {
  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unified';
  var scenario = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'high';
  var module = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'mood';
  var result = createMockPipelineResult(source, scenario, module);
  return {
    process: jest.fn().mockResolvedValue(result),
    invalidateCache: jest.fn().mockResolvedValue(undefined),
    getCacheKey: jest.fn().mockReturnValue(`test_${module}_${scenario}_${source}`)
  };
}
function seedTrackingCompulsions(_x5, _x6, _x7, _x8) {
  return _seedTrackingCompulsions.apply(this, arguments);
}
function _seedTrackingCompulsions() {
  _seedTrackingCompulsions = (0, _asyncToGenerator2.default)(function* (userId, days, perDay, category) {
    if (!TEST_ENV.MODE) {
      console.warn('seedTrackingCompulsions called outside test mode');
      return;
    }
    var totalCompulsions = days * perDay;
    var compulsionTypes = category ? [getCompulsionForPattern(category)] : ['washing', 'checking', 'organizing', 'repeating', 'counting'];
    var compulsions = Array.from({
      length: totalCompulsions
    }, function (_, i) {
      var dayIndex = Math.floor(i / perDay);
      var timeOffset = dayIndex * 24 * 60 * 60 * 1000 + i % perDay * (8 * 60 * 60 * 1000);
      return {
        id: `tracking_${userId}_${i}`,
        user_id: userId,
        type: compulsionTypes[i % compulsionTypes.length],
        intensity: Math.floor(Math.random() * 6) + 5,
        duration_minutes: Math.floor(Math.random() * 45) + 10,
        resistance_level: Math.floor(Math.random() * 5) + 1,
        location: ['home', 'work', 'public'][i % 3],
        notes: category ? `${category} pattern - compulsion ${i}` : `Compulsion ${i}`,
        created_at: new Date(Date.now() - timeOffset).toISOString(),
        updated_at: new Date(Date.now() - timeOffset).toISOString()
      };
    });
    yield _asyncStorage.default.setItem(`tracking_compulsions_${userId}`, JSON.stringify(compulsions));
    console.log(`🔄 Seeded ${totalCompulsions} tracking compulsions for ${userId} (${days} days, ${perDay}/day)`);
  });
  return _seedTrackingCompulsions.apply(this, arguments);
}
function seedCBTRecords(_x9, _x0, _x1) {
  return _seedCBTRecords.apply(this, arguments);
}
function _seedCBTRecords() {
  _seedCBTRecords = (0, _asyncToGenerator2.default)(function* (userId, count, options) {
    if (!TEST_ENV.MODE) {
      console.warn('seedCBTRecords called outside test mode');
      return;
    }
    var defaultDistortions = ['catastrophizing', 'all-or-nothing', 'mind-reading', 'personalization', 'overgeneralization'];
    var distortions = (options == null ? void 0 : options.distortions) || defaultDistortions;
    var records = Array.from({
      length: count
    }, function (_, i) {
      var moodBefore = Math.floor(Math.random() * 4) + 3;
      var improvement = Math.floor(Math.random() * 3) + 1;
      var moodAfter = Math.min(10, moodBefore + improvement);
      return {
        id: `cbt_${userId}_${i}`,
        user_id: userId,
        situation: `CBT test scenario ${i}: Daily situation requiring thought challenging`,
        automatic_thought: `Negative thought pattern ${i}: This represents ${distortions[i % distortions.length]}`,
        cognitive_distortion: distortions[i % distortions.length],
        evidence_for: `Some supporting evidence for thought ${i}`,
        evidence_against: `Counter-evidence that challenges thought ${i}`,
        balanced_thought: `More balanced perspective for situation ${i}`,
        mood_before: moodBefore,
        mood_after: moodAfter,
        intensity_before: Math.floor(Math.random() * 4) + 7,
        intensity_after: Math.floor(Math.random() * 5) + 3,
        created_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),
        updated_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString()
      };
    });
    yield _asyncStorage.default.setItem(`cbt_records_${userId}`, JSON.stringify(records));
    console.log(`🧠 Seeded ${count} CBT records for ${userId} with distortions: ${distortions.join(', ')}`);
  });
  return _seedCBTRecords.apply(this, arguments);
}
function seedOCDScenario(_x10, _x11, _x12) {
  return _seedOCDScenario.apply(this, arguments);
}
function _seedOCDScenario() {
  _seedOCDScenario = (0, _asyncToGenerator2.default)(function* (userId, days, pattern) {
    if (!TEST_ENV.MODE) {
      console.warn('seedOCDScenario called outside test mode');
      return;
    }
    var selectedPattern = pattern || 'contamination';
    var entriesPerDay = 2;
    var totalEntries = days * entriesPerDay;
    var ocdScenario = {
      name: `ocd_${selectedPattern}`,
      sampleSize: totalEntries,
      qualityLevel: 'high',
      confidence: 0.89,
      dataQuality: 0.91,
      patterns: [selectedPattern]
    };
    var ocdData = generateOCDData(ocdScenario);
    var adjustedData = ocdData.map(function (entry, i) {
      return Object.assign({}, entry, {
        id: `ocd_${userId}_${i}`,
        user_id: userId,
        created_at: new Date(Date.now() - Math.floor(i / entriesPerDay) * 24 * 60 * 60 * 1000).toISOString(),
        updated_at: new Date(Date.now() - Math.floor(i / entriesPerDay) * 24 * 60 * 60 * 1000).toISOString()
      });
    });
    yield _asyncStorage.default.setItem(`ocd_scenario_${userId}`, JSON.stringify(adjustedData));
    console.log(`🔄 Seeded OCD ${selectedPattern} scenario for ${userId} (${days} days, ${totalEntries} entries)`);
  });
  return _seedOCDScenario.apply(this, arguments);
}
function cleanupSeeds(_x13) {
  return _cleanupSeeds.apply(this, arguments);
}
function _cleanupSeeds() {
  _cleanupSeeds = (0, _asyncToGenerator2.default)(function* (userId) {
    if (!TEST_ENV.MODE) {
      console.warn('cleanupSeeds called outside test mode');
      return;
    }
    try {
      var keysToRemove = [`tracking_compulsions_${userId}`, `cbt_records_${userId}`, `ocd_scenario_${userId}`, 'quality_ribbon_test_mood_high', 'quality_ribbon_test_mood_medium', 'quality_ribbon_test_mood_low', 'quality_ribbon_test_cbt_high', 'quality_ribbon_test_cbt_medium', 'quality_ribbon_test_cbt_low', 'quality_ribbon_test_tracking_high', 'quality_ribbon_test_tracking_medium', 'quality_ribbon_test_tracking_low', 'quality_ribbon_test_ocd_high', 'quality_ribbon_test_ocd_medium', 'quality_ribbon_test_ocd_low'];
      for (var key of keysToRemove) {
        yield _asyncStorage.default.removeItem(key);
      }
      console.log(`🧹 Cleaned up seed data for user: ${userId}`);
    } catch (error) {
      console.error(`Failed to cleanup seeds for ${userId}:`, error);
    }
  });
  return _cleanupSeeds.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,