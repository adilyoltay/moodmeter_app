2a08e03072624d8b806a5926eb60a7ca
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.adaptiveSuggestionAnalytics = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var AdaptiveSuggestionAnalytics = function () {
  function AdaptiveSuggestionAnalytics() {
    (0, _classCallCheck2.default)(this, AdaptiveSuggestionAnalytics);
    this.STORAGE_KEY = 'adaptive_suggestion_analytics';
    this.MAX_EVENTS = 1000;
    this.RETENTION_DAYS = 30;
  }
  return (0, _createClass2.default)(AdaptiveSuggestionAnalytics, [{
    key: "trackEvent",
    value: (function () {
      var _trackEvent = (0, _asyncToGenerator2.default)(function* (eventType, userId, suggestion, additionalData) {
        var _this = this;
        try {
          var _suggestion$cta;
          var now = new Date();
          var event = {
            timestamp: now.getTime(),
            userId: this.hashUserId(userId),
            category: suggestion.category || 'general',
            confidence: suggestion.confidence || 0.5,
            eventType: eventType,
            timeOfDay: now.getHours(),
            dayOfWeek: now.getDay(),
            targetScreen: (_suggestion$cta = suggestion.cta) == null ? void 0 : _suggestion$cta.screen,
            sessionDuration: additionalData == null ? void 0 : additionalData.sessionDuration,
            snoozeHours: additionalData == null ? void 0 : additionalData.snoozeHours
          };
          var events = yield this.getEvents();
          events.push(event);
          var filteredEvents = events.filter(function (e) {
            return e.timestamp > Date.now() - _this.RETENTION_DAYS * 24 * 60 * 60 * 1000;
          }).slice(-this.MAX_EVENTS);
          yield _asyncStorage.default.setItem(this.STORAGE_KEY, JSON.stringify(filteredEvents));
          console.log(`📊 Tracked adaptive suggestion event: ${eventType} for ${suggestion.category}`);
        } catch (error) {
          console.error('❌ Failed to track adaptive suggestion event:', error);
        }
      });
      function trackEvent(_x, _x2, _x3, _x4) {
        return _trackEvent.apply(this, arguments);
      }
      return trackEvent;
    }())
  }, {
    key: "getMetrics",
    value: (function () {
      var _getMetrics = (0, _asyncToGenerator2.default)(function* () {
        var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;
        try {
          var events = yield this.getEvents();
          var cutoffTime = Date.now() - days * 24 * 60 * 60 * 1000;
          var recentEvents = events.filter(function (e) {
            return e.timestamp >= cutoffTime;
          });
          return this.calculateMetrics(recentEvents, events);
        } catch (error) {
          console.error('❌ Failed to get analytics metrics:', error);
          return this.getEmptyMetrics();
        }
      });
      function getMetrics() {
        return _getMetrics.apply(this, arguments);
      }
      return getMetrics;
    }())
  }, {
    key: "getCategoryRanking",
    value: (function () {
      var _getCategoryRanking = (0, _asyncToGenerator2.default)(function* () {
        var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;
        var metrics = yield this.getMetrics(days);
        return Object.entries(metrics.categoryMetrics).map(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            category = _ref2[0],
            data = _ref2[1];
          return {
            category: category,
            ctr: data.ctr,
            shown: data.shown,
            clicked: data.clicked,
            avgConfidence: data.avgConfidence,
            rank: 0
          };
        }).sort(function (a, b) {
          return b.ctr - a.ctr;
        }).map(function (item, index) {
          return Object.assign({}, item, {
            rank: index + 1
          });
        });
      });
      function getCategoryRanking() {
        return _getCategoryRanking.apply(this, arguments);
      }
      return getCategoryRanking;
    }())
  }, {
    key: "getOptimalTimingRecommendations",
    value: (function () {
      var _getOptimalTimingRecommendations = (0, _asyncToGenerator2.default)(function* () {
        var events = yield this.getEvents();
        var hourMetrics = {};
        var dayMetrics = {};
        events.forEach(function (event) {
          if (!hourMetrics[event.timeOfDay]) {
            hourMetrics[event.timeOfDay] = {
              shown: 0,
              clicked: 0
            };
          }
          if (event.eventType === 'shown') hourMetrics[event.timeOfDay].shown++;
          if (event.eventType === 'clicked') hourMetrics[event.timeOfDay].clicked++;
          if (!dayMetrics[event.dayOfWeek]) {
            dayMetrics[event.dayOfWeek] = {
              shown: 0,
              clicked: 0
            };
          }
          if (event.eventType === 'shown') dayMetrics[event.dayOfWeek].shown++;
          if (event.eventType === 'clicked') dayMetrics[event.dayOfWeek].clicked++;
        });
        var getDayLabel = function getDayLabel(day) {
          var days = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
          return days[day];
        };
        var getHourLabel = function getHourLabel(hour) {
          if (hour >= 6 && hour < 12) return 'Sabah';
          if (hour >= 12 && hour < 17) return 'Öğleden Sonra';
          if (hour >= 17 && hour < 21) return 'Akşam';
          return 'Gece';
        };
        var bestHours = Object.entries(hourMetrics).map(function (_ref3) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
            hour = _ref4[0],
            metrics = _ref4[1];
          return {
            hour: parseInt(hour),
            ctr: metrics.shown > 0 ? metrics.clicked / metrics.shown : 0,
            label: getHourLabel(parseInt(hour))
          };
        }).sort(function (a, b) {
          return b.ctr - a.ctr;
        }).slice(0, 6);
        var bestDays = Object.entries(dayMetrics).map(function (_ref5) {
          var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
            day = _ref6[0],
            metrics = _ref6[1];
          return {
            day: parseInt(day),
            ctr: metrics.shown > 0 ? metrics.clicked / metrics.shown : 0,
            label: getDayLabel(parseInt(day))
          };
        }).sort(function (a, b) {
          return b.ctr - a.ctr;
        });
        var quietHours = Object.entries(hourMetrics).filter(function (_ref7) {
          var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
            _ = _ref8[0],
            metrics = _ref8[1];
          var ctr = metrics.shown > 0 ? metrics.clicked / metrics.shown : 0;
          return ctr < 0.1 && metrics.shown > 5;
        }).map(function (_ref9) {
          var _ref0 = (0, _slicedToArray2.default)(_ref9, 1),
            hour = _ref0[0];
          return parseInt(hour);
        });
        return {
          bestHours: bestHours,
          bestDays: bestDays,
          quietHours: quietHours
        };
      });
      function getOptimalTimingRecommendations() {
        return _getOptimalTimingRecommendations.apply(this, arguments);
      }
      return getOptimalTimingRecommendations;
    }())
  }, {
    key: "calculateMetrics",
    value: function calculateMetrics(recentEvents, allEvents) {
      var shown = recentEvents.filter(function (e) {
        return e.eventType === 'shown';
      });
      var clicked = recentEvents.filter(function (e) {
        return e.eventType === 'clicked';
      });
      var dismissed = recentEvents.filter(function (e) {
        return e.eventType === 'dismissed';
      });
      var ctr = shown.length > 0 ? clicked.length / shown.length : 0;
      var dismissalRate = shown.length > 0 ? dismissed.length / shown.length : 0;
      var categories = (0, _toConsumableArray2.default)(new Set(recentEvents.map(function (e) {
        return e.category;
      })));
      var categoryMetrics = {};
      categories.forEach(function (category) {
        var catShown = shown.filter(function (e) {
          return e.category === category;
        });
        var catClicked = clicked.filter(function (e) {
          return e.category === category;
        });
        var catDismissed = dismissed.filter(function (e) {
          return e.category === category;
        });
        categoryMetrics[category] = {
          shown: catShown.length,
          clicked: catClicked.length,
          dismissed: catDismissed.length,
          ctr: catShown.length > 0 ? catClicked.length / catShown.length : 0,
          avgConfidence: catShown.length > 0 ? catShown.reduce(function (sum, e) {
            return sum + e.confidence;
          }, 0) / catShown.length : 0
        };
      });
      var hourCTRs = {};
      var _loop = function _loop(hour) {
        var hourShown = shown.filter(function (e) {
          return e.timeOfDay === hour;
        });
        var hourClicked = clicked.filter(function (e) {
          return e.timeOfDay === hour;
        });
        hourCTRs[hour] = hourShown.length > 0 ? hourClicked.length / hourShown.length : 0;
      };
      for (var hour = 0; hour < 24; hour++) {
        _loop(hour);
      }
      var sortedHours = Object.entries(hourCTRs).sort(function (a, b) {
        return b[1] - a[1];
      });
      var bestHours = sortedHours.slice(0, 3).map(function (_ref1) {
        var _ref10 = (0, _slicedToArray2.default)(_ref1, 1),
          hour = _ref10[0];
        return parseInt(hour);
      });
      var worstHours = sortedHours.slice(-3).map(function (_ref11) {
        var _ref12 = (0, _slicedToArray2.default)(_ref11, 1),
          hour = _ref12[0];
        return parseInt(hour);
      });
      var dayCTRs = {};
      var _loop2 = function _loop2(day) {
        var dayShown = shown.filter(function (e) {
          return e.dayOfWeek === day;
        });
        var dayClicked = clicked.filter(function (e) {
          return e.dayOfWeek === day;
        });
        dayCTRs[day] = dayShown.length > 0 ? dayClicked.length / dayShown.length : 0;
      };
      for (var day = 0; day < 7; day++) {
        _loop2(day);
      }
      var bestDays = Object.entries(dayCTRs).sort(function (a, b) {
        return b[1] - a[1];
      }).slice(0, 3).map(function (_ref13) {
        var _ref14 = (0, _slicedToArray2.default)(_ref13, 1),
          day = _ref14[0];
        return parseInt(day);
      });
      var sessionsWithDuration = clicked.filter(function (e) {
        return e.sessionDuration;
      });
      var avgSessionDuration = sessionsWithDuration.length > 0 ? sessionsWithDuration.reduce(function (sum, e) {
        return sum + (e.sessionDuration || 0);
      }, 0) / sessionsWithDuration.length : 0;
      var uniqueUsers = (0, _toConsumableArray2.default)(new Set(recentEvents.map(function (e) {
        return e.userId;
      })));
      var returnUsers = uniqueUsers.filter(function (userId) {
        return clicked.filter(function (e) {
          return e.userId === userId;
        }).length > 1;
      });
      var returnUserRate = uniqueUsers.length > 0 ? returnUsers.length / uniqueUsers.length : 0;
      var snoozedUsers = (0, _toConsumableArray2.default)(new Set(dismissed.filter(function (e) {
        return e.snoozeHours;
      }).map(function (e) {
        return e.userId;
      })));
      var snoozedButReturned = snoozedUsers.filter(function (userId) {
        return clicked.some(function (e) {
          return e.userId === userId && e.timestamp > Math.max.apply(Math, (0, _toConsumableArray2.default)(dismissed.filter(function (d) {
            return d.userId === userId;
          }).map(function (d) {
            return d.timestamp;
          })));
        });
      }).length;
      var previousPeriodStart = Date.now() - 14 * 24 * 60 * 60 * 1000;
      var previousPeriodEnd = Date.now() - 7 * 24 * 60 * 60 * 1000;
      var previousEvents = allEvents.filter(function (e) {
        return e.timestamp >= previousPeriodStart && e.timestamp < previousPeriodEnd;
      });
      var prevShown = previousEvents.filter(function (e) {
        return e.eventType === 'shown';
      }).length;
      var prevClicked = previousEvents.filter(function (e) {
        return e.eventType === 'clicked';
      }).length;
      var prevDismissed = previousEvents.filter(function (e) {
        return e.eventType === 'dismissed';
      }).length;
      var prevCTR = prevShown > 0 ? prevClicked / prevShown : 0;
      var prevDismissalRate = prevShown > 0 ? prevDismissed / prevShown : 0;
      var ctrChange = prevCTR > 0 ? (ctr - prevCTR) / prevCTR * 100 : 0;
      var dismissalChange = prevDismissalRate > 0 ? (dismissalRate - prevDismissalRate) / prevDismissalRate * 100 : 0;
      var prevClickedEvents = previousEvents.filter(function (e) {
        return e.eventType === 'clicked';
      });
      var prevSessionsWithDuration = prevClickedEvents.filter(function (e) {
        return e.sessionDuration;
      });
      var prevAvgSessionDuration = prevSessionsWithDuration.length > 0 ? prevSessionsWithDuration.reduce(function (sum, e) {
        return sum + (e.sessionDuration || 0);
      }, 0) / prevSessionsWithDuration.length : 0;
      var prevUniqueUsers = (0, _toConsumableArray2.default)(new Set(previousEvents.map(function (e) {
        return e.userId;
      })));
      var prevReturnUsers = prevUniqueUsers.filter(function (userId) {
        return prevClickedEvents.filter(function (e) {
          return e.userId === userId;
        }).length > 1;
      });
      var prevReturnUserRate = prevUniqueUsers.length > 0 ? prevReturnUsers.length / prevUniqueUsers.length : 0;
      var prevDismissedEvents = previousEvents.filter(function (e) {
        return e.eventType === 'dismissed';
      });
      var prevSnoozedUsers = (0, _toConsumableArray2.default)(new Set(prevDismissedEvents.filter(function (e) {
        return e.snoozeHours;
      }).map(function (e) {
        return e.userId;
      })));
      var prevSnoozedButReturned = prevSnoozedUsers.filter(function (userId) {
        return prevClickedEvents.some(function (e) {
          return e.userId === userId && e.timestamp > Math.max.apply(Math, (0, _toConsumableArray2.default)(prevDismissedEvents.filter(function (d) {
            return d.userId === userId;
          }).map(function (d) {
            return d.timestamp;
          })));
        });
      }).length;
      var engagementChange = 0;
      var weightSum = 0;
      if (prevAvgSessionDuration > 0 && avgSessionDuration > 0) {
        var sessionDurationChange = (avgSessionDuration - prevAvgSessionDuration) / prevAvgSessionDuration * 100;
        engagementChange += sessionDurationChange * 0.4;
        weightSum += 0.4;
      }
      if (prevReturnUserRate > 0 && returnUserRate > 0) {
        var returnRateChange = (returnUserRate - prevReturnUserRate) / prevReturnUserRate * 100;
        engagementChange += returnRateChange * 0.35;
        weightSum += 0.35;
      }
      if (prevSnoozedButReturned > 0 && snoozedButReturned > 0) {
        var snoozeReturnChange = (snoozedButReturned - prevSnoozedButReturned) / prevSnoozedButReturned * 100;
        engagementChange += snoozeReturnChange * 0.25;
        weightSum += 0.25;
      }
      engagementChange = weightSum > 0 ? engagementChange / weightSum : 0;
      return {
        totalShown: shown.length,
        totalClicked: clicked.length,
        totalDismissed: dismissed.length,
        clickThroughRate: ctr,
        dismissalRate: dismissalRate,
        categoryMetrics: categoryMetrics,
        timeMetrics: {
          bestHours: bestHours,
          worstHours: worstHours,
          bestDays: bestDays
        },
        engagementMetrics: {
          avgSessionDuration: avgSessionDuration,
          returnUserRate: returnUserRate,
          snoozedButReturned: snoozedButReturned
        },
        trends: {
          ctrChange: ctrChange,
          dismissalChange: dismissalChange,
          engagementChange: engagementChange
        }
      };
    }
  }, {
    key: "getEvents",
    value: (function () {
      var _getEvents = (0, _asyncToGenerator2.default)(function* () {
        try {
          var stored = yield _asyncStorage.default.getItem(this.STORAGE_KEY);
          return stored ? JSON.parse(stored) : [];
        } catch (error) {
          console.error('❌ Failed to get stored analytics events:', error);
          return [];
        }
      });
      function getEvents() {
        return _getEvents.apply(this, arguments);
      }
      return getEvents;
    }())
  }, {
    key: "hashUserId",
    value: function hashUserId(userId) {
      var hash = 0;
      for (var i = 0; i < userId.length; i++) {
        var char = userId.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return Math.abs(hash).toString(16);
    }
  }, {
    key: "getEmptyMetrics",
    value: function getEmptyMetrics() {
      return {
        totalShown: 0,
        totalClicked: 0,
        totalDismissed: 0,
        clickThroughRate: 0,
        dismissalRate: 0,
        categoryMetrics: {},
        timeMetrics: {
          bestHours: [],
          worstHours: [],
          bestDays: []
        },
        engagementMetrics: {
          avgSessionDuration: 0,
          returnUserRate: 0,
          snoozedButReturned: 0
        },
        trends: {
          ctrChange: 0,
          dismissalChange: 0,
          engagementChange: 0
        }
      };
    }
  }, {
    key: "clearOldData",
    value: (function () {
      var _clearOldData = (0, _asyncToGenerator2.default)(function* () {
        var daysToKeep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;
        try {
          var events = yield this.getEvents();
          var cutoffTime = Date.now() - daysToKeep * 24 * 60 * 60 * 1000;
          var filteredEvents = events.filter(function (e) {
            return e.timestamp > cutoffTime;
          });
          yield _asyncStorage.default.setItem(this.STORAGE_KEY, JSON.stringify(filteredEvents));
          console.log(`🧹 Cleared analytics data older than ${daysToKeep} days`);
        } catch (error) {
          console.error('❌ Failed to clear old analytics data:', error);
        }
      });
      function clearOldData() {
        return _clearOldData.apply(this, arguments);
      }
      return clearOldData;
    }())
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!AdaptiveSuggestionAnalytics.instance) {
        AdaptiveSuggestionAnalytics.instance = new AdaptiveSuggestionAnalytics();
      }
      return AdaptiveSuggestionAnalytics.instance;
    }
  }]);
}();
var adaptiveSuggestionAnalytics = exports.adaptiveSuggestionAnalytics = AdaptiveSuggestionAnalytics.getInstance();
var _default = exports.default = adaptiveSuggestionAnalytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,