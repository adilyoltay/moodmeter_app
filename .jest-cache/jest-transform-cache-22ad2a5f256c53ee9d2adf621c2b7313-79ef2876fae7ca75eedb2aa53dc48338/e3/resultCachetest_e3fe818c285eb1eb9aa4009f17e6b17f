ceb4f2e059a6fe1003eba2b452490efd
_getJestObj().mock('@react-native-async-storage/async-storage');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _resultCache = require("../../../features/ai/cache/resultCache");
var _invalidation = require("../../../features/ai/cache/invalidation");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ResultCache', function () {
  var cache;
  beforeEach(function () {
    jest.clearAllMocks();
    cache = new _resultCache.ResultCacheImpl();
  });
  afterEach(function () {
    jest.resetAllMocks();
  });
  describe('Basic Operations', function () {
    it('should store and retrieve values', (0, _asyncToGenerator2.default)(function* () {
      var key = 'test-key';
      var value = {
        quickClass: 'MOOD',
        confidence: 0.8,
        needsLLM: false,
        route: 'OPEN_SCREEN',
        payload: {
          mood: 75
        },
        cacheKey: key,
        computedAt: Date.now()
      };
      yield cache.set(key, value, 1);
      var retrieved = yield cache.get(key);
      expect(retrieved).toEqual(value);
    }));
    it('should return null for non-existent keys', (0, _asyncToGenerator2.default)(function* () {
      var result = yield cache.get('non-existent-key');
      expect(result).toBeNull();
    }));
    it('should delete specific keys', (0, _asyncToGenerator2.default)(function* () {
      var key = 'test-key';
      var value = {
        quickClass: 'OCD',
        confidence: 0.9,
        needsLLM: false,
        route: 'AUTO_SAVE',
        payload: {},
        cacheKey: key,
        computedAt: Date.now()
      };
      yield cache.set(key, value, 1);
      yield cache.delete(key);
      var retrieved = yield cache.get(key);
      expect(retrieved).toBeNull();
    }));
    it('should clear all cache entries', (0, _asyncToGenerator2.default)(function* () {
      yield cache.set('key1', {
        quickClass: 'MOOD'
      }, 1);
      yield cache.set('key2', {
        quickClass: 'CBT'
      }, 1);
      yield cache.set('key3', {
        quickClass: 'OCD'
      }, 1);
      yield cache.clear();
      expect(yield cache.get('key1')).toBeNull();
      expect(yield cache.get('key2')).toBeNull();
      expect(yield cache.get('key3')).toBeNull();
    }));
  });
  describe('TTL Management', function () {
    it('should respect TTL for insights (24h)', (0, _asyncToGenerator2.default)(function* () {
      var key = 'ai:user123:2024-01-04:insights';
      var value = {
        quickClass: 'OTHER',
        confidence: 0.85,
        needsLLM: false,
        route: 'OPEN_SCREEN',
        payload: {
          insights: ['test']
        },
        cacheKey: key,
        computedAt: Date.now()
      };
      yield cache.set(key, value, 24);
      var stored = yield _asyncStorage.default.getItem(key);
      var parsed = JSON.parse(stored);
      expect(parsed.ttl).toBe(24);
      expect(parsed.expiresAt).toBeGreaterThan(Date.now());
    }));
    it('should respect TTL for therapy plans (12h)', (0, _asyncToGenerator2.default)(function* () {
      var key = 'ai:user123:2024-01-04:therapy:plan';
      var value = {
        quickClass: 'ERP',
        confidence: 0.9,
        needsLLM: true,
        route: 'OPEN_SCREEN',
        payload: {
          exercises: []
        },
        cacheKey: key,
        computedAt: Date.now()
      };
      yield cache.set(key, value, 12);
      var stored = yield _asyncStorage.default.getItem(key);
      var parsed = JSON.parse(stored);
      expect(parsed.ttl).toBe(12);
    }));
    it('should respect TTL for voice analysis (1h)', (0, _asyncToGenerator2.default)(function* () {
      var key = 'ai:user123:hash123:voice';
      var value = {
        quickClass: 'MOOD',
        confidence: 0.7,
        needsLLM: false,
        route: 'OPEN_SCREEN',
        payload: {},
        cacheKey: key,
        computedAt: Date.now()
      };
      yield cache.set(key, value, 1);
      var stored = yield _asyncStorage.default.getItem(key);
      var parsed = JSON.parse(stored);
      expect(parsed.ttl).toBe(1);
    }));
    it('should not return expired entries', (0, _asyncToGenerator2.default)(function* () {
      var key = 'test-expired';
      var value = {
        quickClass: 'MOOD',
        confidence: 0.8,
        needsLLM: false,
        route: 'OPEN_SCREEN',
        payload: {},
        cacheKey: key,
        computedAt: Date.now() - 2 * 60 * 60 * 1000
      };
      yield _asyncStorage.default.setItem(key, JSON.stringify(Object.assign({}, value, {
        ttl: 1,
        expiresAt: Date.now() - 60 * 60 * 1000
      })));
      var retrieved = yield cache.get(key);
      expect(retrieved).toBeNull();
    }));
  });
  describe('Cache Keys', function () {
    it('should generate correct cache key format', function () {
      var userId = 'user123';
      var date = '2024-01-04';
      var type = 'insights';
      var key = `ai:${userId}:${date}:${type}`;
      expect(key).toBe('ai:user123:2024-01-04:insights');
    });
    it('should handle special characters in keys', (0, _asyncToGenerator2.default)(function* () {
      var key = 'ai:user@test.com:2024-01-04:insights';
      var value = {
        quickClass: 'OTHER',
        confidence: 0.8,
        needsLLM: false,
        route: 'OPEN_SCREEN',
        payload: {},
        cacheKey: key,
        computedAt: Date.now()
      };
      yield cache.set(key, value, 1);
      var retrieved = yield cache.get(key);
      expect(retrieved).toEqual(value);
    }));
  });
  describe('Memory Management', function () {
    it('should handle large cache entries', (0, _asyncToGenerator2.default)(function* () {
      var key = 'large-entry';
      var largePayload = {
        data: new Array(1000).fill('test-data'),
        nested: {
          deep: {
            structure: new Array(500).fill({
              id: 1,
              value: 'test'
            })
          }
        }
      };
      var value = {
        quickClass: 'OTHER',
        confidence: 0.9,
        needsLLM: false,
        route: 'OPEN_SCREEN',
        payload: largePayload,
        cacheKey: key,
        computedAt: Date.now()
      };
      yield cache.set(key, value, 1);
      var retrieved = yield cache.get(key);
      expect(retrieved == null ? void 0 : retrieved.payload).toEqual(largePayload);
    }));
    it('should handle cache size limits gracefully', (0, _asyncToGenerator2.default)(function* () {
      var promises = [];
      for (var i = 0; i < 1000; i++) {
        promises.push(cache.set(`key-${i}`, {
          quickClass: 'OTHER',
          confidence: 0.5,
          needsLLM: false,
          route: 'OPEN_SCREEN',
          payload: {
            index: i
          },
          cacheKey: `key-${i}`,
          computedAt: Date.now()
        }, 1));
      }
      yield Promise.all(promises);
      var recent = yield cache.get('key-999');
      expect(recent).toBeDefined();
    }));
  });
});
describe('CacheInvalidation', function () {
  var invalidation;
  var cache;
  beforeEach(function () {
    jest.clearAllMocks();
    cache = new _resultCache.ResultCacheImpl();
    invalidation = new _invalidation.CacheInvalidationImpl(cache);
  });
  describe('Trigger-based Invalidation', function () {
    it('should invalidate on CBT_THOUGHT_CREATED', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'user123';
      var date = new Date().toISOString().split('T')[0];
      yield cache.set(`ai:${userId}:${date}:insights`, {}, 24);
      yield cache.set(`ai:${userId}:${date}:cbt:analysis`, {}, 12);
      yield invalidation.onThoughtCreated(userId);
      expect(yield cache.get(`ai:${userId}:${date}:cbt:analysis`)).toBeNull();
    }));
    it('should invalidate on ERP_SESSION_COMPLETED', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'user123';
      var date = new Date().toISOString().split('T')[0];
      yield cache.set(`ai:${userId}:${date}:erp:plan`, {}, 12);
      yield cache.set(`ai:${userId}:${date}:erp:progress`, {}, 6);
      yield invalidation.onERPSessionCompleted(userId);
      expect(yield cache.get(`ai:${userId}:${date}:erp:progress`)).toBeNull();
    }));
    it('should invalidate on YBOCS_UPDATED', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'user123';
      yield cache.set(`ai:${userId}:treatment:plan`, {}, 48);
      yield cache.set(`ai:${userId}:risk:assessment`, {}, 24);
      yield invalidation.onYBOCSUpdated(userId);
      expect(yield cache.get(`ai:${userId}:treatment:plan`)).toBeNull();
      expect(yield cache.get(`ai:${userId}:risk:assessment`)).toBeNull();
    }));
    it('should invalidate on ONBOARDING_FINALIZED', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'user123';
      yield cache.set(`ai:${userId}:onboarding:temp`, {}, 1);
      yield cache.set(`ai:${userId}:profile:draft`, {}, 1);
      yield invalidation.onOnboardingFinalized(userId);
      expect(yield cache.get(`ai:${userId}:onboarding:temp`)).toBeNull();
      expect(yield cache.get(`ai:${userId}:profile:draft`)).toBeNull();
    }));
  });
  describe('Pattern-based Invalidation', function () {
    it('should invalidate by pattern', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'user123';
      yield cache.set(`ai:${userId}:2024-01-04:insights`, {}, 24);
      yield cache.set(`ai:${userId}:2024-01-04:erp:plan`, {}, 12);
      yield cache.set(`ai:${userId}:2024-01-03:insights`, {}, 24);
      yield cache.set(`ai:other-user:2024-01-04:insights`, {}, 24);
      yield invalidation.invalidatePattern(`ai:${userId}:2024-01-04:*`);
      expect(yield cache.get(`ai:${userId}:2024-01-04:insights`)).toBeNull();
      expect(yield cache.get(`ai:${userId}:2024-01-04:erp:plan`)).toBeNull();
      expect(yield cache.get(`ai:${userId}:2024-01-03:insights`)).toBeDefined();
      expect(yield cache.get(`ai:other-user:2024-01-04:insights`)).toBeDefined();
    }));
  });
  describe('Selective Invalidation', function () {
    it('should only invalidate specified keys', (0, _asyncToGenerator2.default)(function* () {
      yield cache.set('key1', {}, 1);
      yield cache.set('key2', {}, 1);
      yield cache.set('key3', {}, 1);
      yield invalidation.invalidateKeys(['key1', 'key3']);
      expect(yield cache.get('key1')).toBeNull();
      expect(yield cache.get('key2')).toBeDefined();
      expect(yield cache.get('key3')).toBeNull();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,