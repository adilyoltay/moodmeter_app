d307cf9e3c6bbc57cdf2c82c32137ebd
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_MIN_PRESS_DURATION = exports.DEFAULT_LONG_PRESS_DELAY_MS = void 0;
exports.longPress = longPress;
exports.press = press;
var _act = _interopRequireDefault(require("../../act"));
var _eventHandler = require("../../event-handler");
var _componentTree = require("../../helpers/component-tree");
var _errors = require("../../helpers/errors");
var _hostComponentNames = require("../../helpers/host-component-names");
var _pointerEvents = require("../../helpers/pointer-events");
var _eventBuilder = require("../event-builder");
var _utils = require("../utils");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
var DEFAULT_MIN_PRESS_DURATION = exports.DEFAULT_MIN_PRESS_DURATION = 130;
var DEFAULT_LONG_PRESS_DELAY_MS = exports.DEFAULT_LONG_PRESS_DELAY_MS = 500;
function press(_x) {
  return _press.apply(this, arguments);
}
function _press() {
  _press = (0, _asyncToGenerator2.default)(function* (element) {
    if (!(0, _componentTree.isHostElement)(element)) {
      throw new _errors.ErrorWithStack(`press() works only with host elements. Passed element has type "${element.type}".`, press);
    }
    yield _basePress(this.config, element, {
      type: 'press'
    });
  });
  return _press.apply(this, arguments);
}
function longPress(_x2, _x3) {
  return _longPress.apply(this, arguments);
}
function _longPress() {
  _longPress = (0, _asyncToGenerator2.default)(function* (element, options) {
    var _options$duration;
    if (!(0, _componentTree.isHostElement)(element)) {
      throw new _errors.ErrorWithStack(`longPress() works only with host elements. Passed element has type "${element.type}".`, longPress);
    }
    yield _basePress(this.config, element, {
      type: 'longPress',
      duration: (_options$duration = options == null ? void 0 : options.duration) != null ? _options$duration : DEFAULT_LONG_PRESS_DELAY_MS
    });
  });
  return _longPress.apply(this, arguments);
}
var _basePress = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    if (isEnabledHostElement(element) && hasPressEventHandler(element)) {
      yield emitDirectPressEvents(config, element, options);
      return;
    }
    if (isEnabledTouchResponder(element)) {
      yield emitPressabilityPressEvents(config, element, options);
      return;
    }
    var hostParentElement = (0, _componentTree.getHostParent)(element);
    if (!hostParentElement) {
      return;
    }
    yield _basePress(config, hostParentElement, options);
  });
  return function basePress(_x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
function isEnabledHostElement(element) {
  if (!(0, _pointerEvents.isPointerEventEnabled)(element)) {
    return false;
  }
  if ((0, _hostComponentNames.isHostText)(element)) {
    return element.props.disabled !== true;
  }
  if ((0, _hostComponentNames.isHostTextInput)(element)) {
    return element.props.editable !== false;
  }
  return true;
}
function isEnabledTouchResponder(element) {
  return (0, _pointerEvents.isPointerEventEnabled)(element) && (element.props.onStartShouldSetResponder == null ? void 0 : element.props.onStartShouldSetResponder());
}
function hasPressEventHandler(element) {
  return (0, _eventHandler.getEventHandler)(element, 'press') || (0, _eventHandler.getEventHandler)(element, 'longPress') || (0, _eventHandler.getEventHandler)(element, 'pressIn') || (0, _eventHandler.getEventHandler)(element, 'pressOut');
}
function emitDirectPressEvents(_x7, _x8, _x9) {
  return _emitDirectPressEvents.apply(this, arguments);
}
function _emitDirectPressEvents() {
  _emitDirectPressEvents = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    yield (0, _utils.wait)(config);
    yield (0, _utils.dispatchEvent)(element, 'pressIn', _eventBuilder.EventBuilder.Common.touch());
    yield (0, _utils.wait)(config, options.duration);
    if (options.type === 'longPress') {
      yield (0, _utils.dispatchEvent)(element, 'longPress', _eventBuilder.EventBuilder.Common.touch());
    }
    yield (0, _utils.dispatchEvent)(element, 'pressOut', _eventBuilder.EventBuilder.Common.touch());
    if (options.type === 'press') {
      yield (0, _utils.dispatchEvent)(element, 'press', _eventBuilder.EventBuilder.Common.touch());
    }
  });
  return _emitDirectPressEvents.apply(this, arguments);
}
function emitPressabilityPressEvents(_x0, _x1, _x10) {
  return _emitPressabilityPressEvents.apply(this, arguments);
}
function _emitPressabilityPressEvents() {
  _emitPressabilityPressEvents = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    var _options$duration2;
    yield (0, _utils.wait)(config);
    yield (0, _utils.dispatchEvent)(element, 'responderGrant', _eventBuilder.EventBuilder.Common.responderGrant());
    var duration = (_options$duration2 = options.duration) != null ? _options$duration2 : DEFAULT_MIN_PRESS_DURATION;
    yield (0, _utils.wait)(config, duration);
    yield (0, _utils.dispatchEvent)(element, 'responderRelease', _eventBuilder.EventBuilder.Common.responderRelease());
    if (DEFAULT_MIN_PRESS_DURATION - duration > 0) {
      yield (0, _act.default)(function () {
        return (0, _utils.wait)(config, DEFAULT_MIN_PRESS_DURATION - duration);
      });
    }
  });
  return _emitPressabilityPressEvents.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZXZlbnRIYW5kbGVyIiwiX2NvbXBvbmVudFRyZWUiLCJfZXJyb3JzIiwiX2hvc3RDb21wb25lbnROYW1lcyIsIl9wb2ludGVyRXZlbnRzIiwiX2V2ZW50QnVpbGRlciIsIl91dGlscyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkRFRkFVTFRfTUlOX1BSRVNTX0RVUkFUSU9OIiwiZXhwb3J0cyIsIkRFRkFVTFRfTE9OR19QUkVTU19ERUxBWV9NUyIsInByZXNzIiwiX3giLCJfcHJlc3MiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImVsZW1lbnQiLCJpc0hvc3RFbGVtZW50IiwiRXJyb3JXaXRoU3RhY2siLCJ0eXBlIiwiYmFzZVByZXNzIiwiY29uZmlnIiwibG9uZ1ByZXNzIiwiX3gyIiwiX3gzIiwiX2xvbmdQcmVzcyIsIm9wdGlvbnMiLCJfb3B0aW9ucyRkdXJhdGlvbiIsImR1cmF0aW9uIiwiX3JlZiIsImlzRW5hYmxlZEhvc3RFbGVtZW50IiwiaGFzUHJlc3NFdmVudEhhbmRsZXIiLCJlbWl0RGlyZWN0UHJlc3NFdmVudHMiLCJpc0VuYWJsZWRUb3VjaFJlc3BvbmRlciIsImVtaXRQcmVzc2FiaWxpdHlQcmVzc0V2ZW50cyIsImhvc3RQYXJlbnRFbGVtZW50IiwiZ2V0SG9zdFBhcmVudCIsIl94NCIsIl94NSIsIl94NiIsImlzUG9pbnRlckV2ZW50RW5hYmxlZCIsImlzSG9zdFRleHQiLCJwcm9wcyIsImRpc2FibGVkIiwiaXNIb3N0VGV4dElucHV0IiwiZWRpdGFibGUiLCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwiZ2V0RXZlbnRIYW5kbGVyIiwiX3g3IiwiX3g4IiwiX3g5IiwiX2VtaXREaXJlY3RQcmVzc0V2ZW50cyIsIndhaXQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnRCdWlsZGVyIiwiQ29tbW9uIiwidG91Y2giLCJfeDAiLCJfeDEiLCJfeDEwIiwiX2VtaXRQcmVzc2FiaWxpdHlQcmVzc0V2ZW50cyIsIl9vcHRpb25zJGR1cmF0aW9uMiIsInJlc3BvbmRlckdyYW50IiwicmVzcG9uZGVyUmVsZWFzZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91c2VyLWV2ZW50L3ByZXNzL3ByZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuaW1wb3J0IGFjdCBmcm9tICcuLi8uLi9hY3QnO1xuaW1wb3J0IHsgZ2V0RXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vZXZlbnQtaGFuZGxlcic7XG5pbXBvcnQgdHlwZSB7IEhvc3RUZXN0SW5zdGFuY2UgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2NvbXBvbmVudC10cmVlJztcbmltcG9ydCB7IGdldEhvc3RQYXJlbnQsIGlzSG9zdEVsZW1lbnQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2NvbXBvbmVudC10cmVlJztcbmltcG9ydCB7IEVycm9yV2l0aFN0YWNrIH0gZnJvbSAnLi4vLi4vaGVscGVycy9lcnJvcnMnO1xuaW1wb3J0IHsgaXNIb3N0VGV4dCwgaXNIb3N0VGV4dElucHV0IH0gZnJvbSAnLi4vLi4vaGVscGVycy9ob3N0LWNvbXBvbmVudC1uYW1lcyc7XG5pbXBvcnQgeyBpc1BvaW50ZXJFdmVudEVuYWJsZWQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3BvaW50ZXItZXZlbnRzJztcbmltcG9ydCB7IEV2ZW50QnVpbGRlciB9IGZyb20gJy4uL2V2ZW50LWJ1aWxkZXInO1xuaW1wb3J0IHR5cGUgeyBVc2VyRXZlbnRDb25maWcsIFVzZXJFdmVudEluc3RhbmNlIH0gZnJvbSAnLi4vc2V0dXAnO1xuaW1wb3J0IHsgZGlzcGF0Y2hFdmVudCwgd2FpdCB9IGZyb20gJy4uL3V0aWxzJztcblxuLy8gVGhlc2UgYXJlIGNvbnN0YW50cyBkZWZpbmVkIGluIHRoZSBSZWFjdCBOYXRpdmUgcmVwb1xuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2Jsb2IvNTBlMzhjYzlmMWU2NzEzMjI4YTkxYWQ1MGY0MjZjNGY2NWU2NWUxYS9wYWNrYWdlcy9yZWFjdC1uYXRpdmUvTGlicmFyaWVzL1ByZXNzYWJpbGl0eS9QcmVzc2FiaWxpdHkuanMjTDI2NFxuZXhwb3J0IGNvbnN0IERFRkFVTFRfTUlOX1BSRVNTX0RVUkFUSU9OID0gMTMwO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTE9OR19QUkVTU19ERUxBWV9NUyA9IDUwMDtcblxuZXhwb3J0IGludGVyZmFjZSBQcmVzc09wdGlvbnMge1xuICBkdXJhdGlvbj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXNzKHRoaXM6IFVzZXJFdmVudEluc3RhbmNlLCBlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSk6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoIWlzSG9zdEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2soXG4gICAgICBgcHJlc3MoKSB3b3JrcyBvbmx5IHdpdGggaG9zdCBlbGVtZW50cy4gUGFzc2VkIGVsZW1lbnQgaGFzIHR5cGUgXCIke2VsZW1lbnQudHlwZX1cIi5gLFxuICAgICAgcHJlc3MsXG4gICAgKTtcbiAgfVxuXG4gIGF3YWl0IGJhc2VQcmVzcyh0aGlzLmNvbmZpZywgZWxlbWVudCwge1xuICAgIHR5cGU6ICdwcmVzcycsXG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9uZ1ByZXNzKFxuICB0aGlzOiBVc2VyRXZlbnRJbnN0YW5jZSxcbiAgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIG9wdGlvbnM/OiBQcmVzc09wdGlvbnMsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKCFpc0hvc3RFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yV2l0aFN0YWNrKFxuICAgICAgYGxvbmdQcmVzcygpIHdvcmtzIG9ubHkgd2l0aCBob3N0IGVsZW1lbnRzLiBQYXNzZWQgZWxlbWVudCBoYXMgdHlwZSBcIiR7ZWxlbWVudC50eXBlfVwiLmAsXG4gICAgICBsb25nUHJlc3MsXG4gICAgKTtcbiAgfVxuXG4gIGF3YWl0IGJhc2VQcmVzcyh0aGlzLmNvbmZpZywgZWxlbWVudCwge1xuICAgIHR5cGU6ICdsb25nUHJlc3MnLFxuICAgIGR1cmF0aW9uOiBvcHRpb25zPy5kdXJhdGlvbiA/PyBERUZBVUxUX0xPTkdfUFJFU1NfREVMQVlfTVMsXG4gIH0pO1xufVxuXG5pbnRlcmZhY2UgQmFzZVByZXNzT3B0aW9ucyB7XG4gIHR5cGU6ICdwcmVzcycgfCAnbG9uZ1ByZXNzJztcbiAgZHVyYXRpb24/OiBudW1iZXI7XG59XG5cbmNvbnN0IGJhc2VQcmVzcyA9IGFzeW5jIChcbiAgY29uZmlnOiBVc2VyRXZlbnRDb25maWcsXG4gIGVsZW1lbnQ6IEhvc3RUZXN0SW5zdGFuY2UsXG4gIG9wdGlvbnM6IEJhc2VQcmVzc09wdGlvbnMsXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKGlzRW5hYmxlZEhvc3RFbGVtZW50KGVsZW1lbnQpICYmIGhhc1ByZXNzRXZlbnRIYW5kbGVyKGVsZW1lbnQpKSB7XG4gICAgYXdhaXQgZW1pdERpcmVjdFByZXNzRXZlbnRzKGNvbmZpZywgZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzRW5hYmxlZFRvdWNoUmVzcG9uZGVyKGVsZW1lbnQpKSB7XG4gICAgYXdhaXQgZW1pdFByZXNzYWJpbGl0eVByZXNzRXZlbnRzKGNvbmZpZywgZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaG9zdFBhcmVudEVsZW1lbnQgPSBnZXRIb3N0UGFyZW50KGVsZW1lbnQpO1xuICBpZiAoIWhvc3RQYXJlbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXdhaXQgYmFzZVByZXNzKGNvbmZpZywgaG9zdFBhcmVudEVsZW1lbnQsIG9wdGlvbnMpO1xufTtcblxuZnVuY3Rpb24gaXNFbmFibGVkSG9zdEVsZW1lbnQoZWxlbWVudDogSG9zdFRlc3RJbnN0YW5jZSkge1xuICBpZiAoIWlzUG9pbnRlckV2ZW50RW5hYmxlZChlbGVtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0hvc3RUZXh0KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQucHJvcHMuZGlzYWJsZWQgIT09IHRydWU7XG4gIH1cblxuICBpZiAoaXNIb3N0VGV4dElucHV0KGVsZW1lbnQpKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIHdvcmthcm91bmQgaW5jb3JyZWN0IFJlYWN0VGVzdEluc3RhbmNlIHR5cGVcbiAgICByZXR1cm4gZWxlbWVudC5wcm9wcy5lZGl0YWJsZSAhPT0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNFbmFibGVkVG91Y2hSZXNwb25kZXIoZWxlbWVudDogSG9zdFRlc3RJbnN0YW5jZSkge1xuICByZXR1cm4gaXNQb2ludGVyRXZlbnRFbmFibGVkKGVsZW1lbnQpICYmIGVsZW1lbnQucHJvcHMub25TdGFydFNob3VsZFNldFJlc3BvbmRlcj8uKCk7XG59XG5cbmZ1bmN0aW9uIGhhc1ByZXNzRXZlbnRIYW5kbGVyKGVsZW1lbnQ6IEhvc3RUZXN0SW5zdGFuY2UpIHtcbiAgcmV0dXJuIChcbiAgICBnZXRFdmVudEhhbmRsZXIoZWxlbWVudCwgJ3ByZXNzJykgfHxcbiAgICBnZXRFdmVudEhhbmRsZXIoZWxlbWVudCwgJ2xvbmdQcmVzcycpIHx8XG4gICAgZ2V0RXZlbnRIYW5kbGVyKGVsZW1lbnQsICdwcmVzc0luJykgfHxcbiAgICBnZXRFdmVudEhhbmRsZXIoZWxlbWVudCwgJ3ByZXNzT3V0JylcbiAgKTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaGVzIGEgcHJlc3MgZXZlbnQgc2VxdWVuY2UgZm9yIGhvc3QgZWxlbWVudHMgdGhhdCBoYXZlIGBvblByZXNzKmAgZXZlbnQgaGFuZGxlcnMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVtaXREaXJlY3RQcmVzc0V2ZW50cyhcbiAgY29uZmlnOiBVc2VyRXZlbnRDb25maWcsXG4gIGVsZW1lbnQ6IEhvc3RUZXN0SW5zdGFuY2UsXG4gIG9wdGlvbnM6IEJhc2VQcmVzc09wdGlvbnMsXG4pIHtcbiAgYXdhaXQgd2FpdChjb25maWcpO1xuICBhd2FpdCBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsICdwcmVzc0luJywgRXZlbnRCdWlsZGVyLkNvbW1vbi50b3VjaCgpKTtcblxuICBhd2FpdCB3YWl0KGNvbmZpZywgb3B0aW9ucy5kdXJhdGlvbik7XG5cbiAgLy8gTG9uZyBwcmVzcyBldmVudHMgYXJlIGVtaXR0ZWQgYmVmb3JlIGBwcmVzc091dGAuXG4gIGlmIChvcHRpb25zLnR5cGUgPT09ICdsb25nUHJlc3MnKSB7XG4gICAgYXdhaXQgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnbG9uZ1ByZXNzJywgRXZlbnRCdWlsZGVyLkNvbW1vbi50b3VjaCgpKTtcbiAgfVxuXG4gIGF3YWl0IGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ3ByZXNzT3V0JywgRXZlbnRCdWlsZGVyLkNvbW1vbi50b3VjaCgpKTtcblxuICAvLyBSZWd1bGFyIHByZXNzIGV2ZW50cyBhcmUgZW1pdHRlZCBhZnRlciBgcHJlc3NPdXRgIGFjY29yZGluZyB0byB0aGUgUmVhY3QgTmF0aXZlIGRvY3MuXG4gIC8vIFNlZTogaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9wcmVzc2FibGUjb25wcmVzc1xuICAvLyBFeHBlcmltZW50YWxseSBmb3IgdmVyeSBzaG9ydCBwcmVzc2VzICg8IDEzMG1zKSBgcHJlc3NgIGV2ZW50cyBhcmUgYWN0dWFsbHkgZW1pdHRlZCBiZWZvcmUgYG9uUHJlc3NPdXRgLCBidXRcbiAgLy8gd2Ugd2lsbCBpZ25vcmUgdGhhdCBhcyBpbiByZWFsaXR5IG1vc3QgcHJlc3NlZCB3b3VsZCBiZSBhYm92ZSB0aGUgMTMwbXMgdGhyZXNob2xkLlxuICBpZiAob3B0aW9ucy50eXBlID09PSAncHJlc3MnKSB7XG4gICAgYXdhaXQgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAncHJlc3MnLCBFdmVudEJ1aWxkZXIuQ29tbW9uLnRvdWNoKCkpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVtaXRQcmVzc2FiaWxpdHlQcmVzc0V2ZW50cyhcbiAgY29uZmlnOiBVc2VyRXZlbnRDb25maWcsXG4gIGVsZW1lbnQ6IEhvc3RUZXN0SW5zdGFuY2UsXG4gIG9wdGlvbnM6IEJhc2VQcmVzc09wdGlvbnMsXG4pIHtcbiAgYXdhaXQgd2FpdChjb25maWcpO1xuXG4gIGF3YWl0IGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ3Jlc3BvbmRlckdyYW50JywgRXZlbnRCdWlsZGVyLkNvbW1vbi5yZXNwb25kZXJHcmFudCgpKTtcblxuICBjb25zdCBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gPz8gREVGQVVMVF9NSU5fUFJFU1NfRFVSQVRJT047XG4gIGF3YWl0IHdhaXQoY29uZmlnLCBkdXJhdGlvbik7XG5cbiAgYXdhaXQgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAncmVzcG9uZGVyUmVsZWFzZScsIEV2ZW50QnVpbGRlci5Db21tb24ucmVzcG9uZGVyUmVsZWFzZSgpKTtcblxuICAvLyBSZWFjdCBOYXRpdmUgd2lsbCB3YWl0IGZvciBtaW5pbWFsIGRlbGF5IG9mIERFRkFVTFRfTUlOX1BSRVNTX0RVUkFUSU9OXG4gIC8vIGJlZm9yZSBlbWl0dGluZyB0aGUgYHByZXNzT3V0YCBldmVudC4gV2UgbmVlZCB0byB3YWl0IGhlcmUsIHNvIHRoYXRcbiAgLy8gYHByZXNzKClgIGZ1bmN0aW9uIGRvZXMgbm90IHJldHVybiBiZWZvcmUgdGhhdC5cbiAgaWYgKERFRkFVTFRfTUlOX1BSRVNTX0RVUkFUSU9OIC0gZHVyYXRpb24gPiAwKSB7XG4gICAgYXdhaXQgYWN0KCgpID0+IHdhaXQoY29uZmlnLCBERUZB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