30b6db4d27cb29fb19cb6e1d228f57c2
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    __esModule: true,
    default: {
      getItem: jest.fn().mockResolvedValue(null),
      setItem: jest.fn().mockResolvedValue(undefined),
      removeItem: jest.fn().mockResolvedValue(undefined)
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _gamificationStore = require("../../store/gamificationStore");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Gamification streak calculations', function () {
  beforeEach(function () {
    jest.useFakeTimers().setSystemTime(new Date('2025-09-07T10:00:00.000Z'));
    var init = _gamificationStore.useGamificationStore.getState();
    _gamificationStore.useGamificationStore.setState(Object.assign({}, init, {
      profile: {
        streakCurrent: 0,
        streakBest: 0,
        unlockedAchievements: [],
        healingPointsToday: 0,
        healingPointsTotal: 0,
        streakLevel: 'seedling',
        lastActivityDate: '2025-09-06',
        lastFirstActivityAwardDate: undefined,
        streakMilestonesAwarded: [],
        modulesActiveDate: undefined,
        modulesActiveToday: [],
        multiModuleDayAwarded: 0,
        weekKey: undefined,
        activeDaysThisWeek: 0,
        weeklyConsistencyAwarded: false
      },
      currentUserId: 'test-user'
    }));
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  test('updateStreak increments across UTC day boundary', (0, _asyncToGenerator2.default)(function* () {
    var _useGamificationStore = _gamificationStore.useGamificationStore.getState(),
      updateStreak = _useGamificationStore.updateStreak,
      getStreakInfo = _useGamificationStore.getStreakInfo;
    yield updateStreak();
    var info = getStreakInfo();
    expect(info.current).toBe(1);
  }));
  test('breathwork_completed also updates streak (daily activity)', (0, _asyncToGenerator2.default)(function* () {
    var _useGamificationStore2 = _gamificationStore.useGamificationStore.getState(),
      awardMicroReward = _useGamificationStore2.awardMicroReward,
      getStreakInfo = _useGamificationStore2.getStreakInfo;
    yield awardMicroReward('breathwork_completed', {
      durationMs: 600000,
      difficulty: 'medium'
    });
    var info = getStreakInfo();
    expect(info.current).toBeGreaterThanOrEqual(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImdldEl0ZW0iLCJqZXN0IiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInNldEl0ZW0iLCJ1bmRlZmluZWQiLCJyZW1vdmVJdGVtIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfZ2FtaWZpY2F0aW9uU3RvcmUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsInVzZUZha2VUaW1lcnMiLCJzZXRTeXN0ZW1UaW1lIiwiRGF0ZSIsImluaXQiLCJ1c2VHYW1pZmljYXRpb25TdG9yZSIsImdldFN0YXRlIiwic2V0U3RhdGUiLCJPYmplY3QiLCJhc3NpZ24iLCJwcm9maWxlIiwic3RyZWFrQ3VycmVudCIsInN0cmVha0Jlc3QiLCJ1bmxvY2tlZEFjaGlldmVtZW50cyIsImhlYWxpbmdQb2ludHNUb2RheSIsImhlYWxpbmdQb2ludHNUb3RhbCIsInN0cmVha0xldmVsIiwibGFzdEFjdGl2aXR5RGF0ZSIsImxhc3RGaXJzdEFjdGl2aXR5QXdhcmREYXRlIiwic3RyZWFrTWlsZXN0b25lc0F3YXJkZWQiLCJtb2R1bGVzQWN0aXZlRGF0ZSIsIm1vZHVsZXNBY3RpdmVUb2RheSIsIm11bHRpTW9kdWxlRGF5QXdhcmRlZCIsIndlZWtLZXkiLCJhY3RpdmVEYXlzVGhpc1dlZWsiLCJ3ZWVrbHlDb25zaXN0ZW5jeUF3YXJkZWQiLCJjdXJyZW50VXNlcklkIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsInRlc3QiLCJfdXNlR2FtaWZpY2F0aW9uU3RvcmUiLCJ1cGRhdGVTdHJlYWsiLCJnZXRTdHJlYWtJbmZvIiwiaW5mbyIsImV4cGVjdCIsImN1cnJlbnQiLCJ0b0JlIiwiX3VzZUdhbWlmaWNhdGlvblN0b3JlMiIsImF3YXJkTWljcm9SZXdhcmQiLCJkdXJhdGlvbk1zIiwiZGlmZmljdWx0eSIsInRvQmVHcmVhdGVyVGhhbk9yRXF1YWwiXSwic291cmNlcyI6WyJnYW1pZmljYXRpb25fc3RyZWFrLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XG5pbXBvcnQgeyB1c2VHYW1pZmljYXRpb25TdG9yZSB9IGZyb20gJ0Avc3RvcmUvZ2FtaWZpY2F0aW9uU3RvcmUnO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDoge1xuICAgIGdldEl0ZW06IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKSxcbiAgICBzZXRJdGVtOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICByZW1vdmVJdGVtOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgfSxcbn0pKTtcblxuZGVzY3JpYmUoJ0dhbWlmaWNhdGlvbiBzdHJlYWsgY2FsY3VsYXRpb25zJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKS5zZXRTeXN0ZW1UaW1lKG5ldyBEYXRlKCcyMDI1LTA5LTA3VDEwOjAwOjAwLjAwMFonKSk7XG4gICAgLy8gcmVzZXQgc3RvcmVcbiAgICBjb25zdCBpbml0ID0gdXNlR2FtaWZpY2F0aW9uU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB1c2VHYW1pZmljYXRpb25TdG9yZS5zZXRTdGF0ZSh7IC4uLmluaXQsIHByb2ZpbGU6IHtcbiAgICAgIHN0cmVha0N1cnJlbnQ6IDAsXG4gICAgICBzdHJlYWtCZXN0OiAwLFxuICAgICAgdW5sb2NrZWRBY2hpZXZlbWVudHM6IFtdLFxuICAgICAgaGVhbGluZ1BvaW50c1RvZGF5OiAwLFxuICAgICAgaGVhbGluZ1BvaW50c1RvdGFsOiAwLFxuICAgICAgc3RyZWFrTGV2ZWw6ICdzZWVkbGluZycsXG4gICAgICBsYXN0QWN0aXZpdHlEYXRlOiAnMjAyNS0wOS0wNicsXG4gICAgICBsYXN0Rmlyc3RBY3Rpdml0eUF3YXJkRGF0ZTogdW5kZWZpbmVkLFxuICAgICAgc3RyZWFrTWlsZXN0b25lc0F3YXJkZWQ6IFtdLFxuICAgICAgbW9kdWxlc0FjdGl2ZURhdGU6IHVuZGVmaW5lZCxcbiAgICAgIG1vZHVsZXNBY3RpdmVUb2RheTogW10sXG4gICAgICBtdWx0aU1vZHVsZURheUF3YXJkZWQ6IDAsXG4gICAgICB3ZWVrS2V5OiB1bmRlZmluZWQsXG4gICAgICBhY3RpdmVEYXlzVGhpc1dlZWs6IDAsXG4gICAgICB3ZWVrbHlDb25zaXN0ZW5jeUF3YXJkZWQ6IGZhbHNlLFxuICAgIH0sIGN1cnJlbnRVc2VySWQ6ICd0ZXN0LXVzZXInIH0pO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICB0ZXN0KCd1cGRhdGVTdHJlYWsgaW5jcmVtZW50cyBhY3Jvc3MgVVRDIGRheSBib3VuZGFyeScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHVwZGF0ZVN0cmVhaywgZ2V0U3RyZWFrSW5mbyB9ID0gdXNlR2FtaWZpY2F0aW9uU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBhd2FpdCB1cGRhdGVTdHJlYWsoKTtcbiAgICBjb25zdCBpbmZvID0gZ2V0U3RyZWFrSW5mbygpO1xuICAgIGV4cGVjdChpbmZvLmN1cnJlbnQpLnRvQmUoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2JyZWF0aHdvcmtfY29tcGxldGVkIGFsc28gdXBkYXRlcyBzdHJlYWsgKGRhaWx5IGFjdGl2aXR5KScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGF3YXJkTWljcm9SZXdhcmQsIGdldFN0cmVha0luZm8gfSA9IHVzZUdhbWlmaWNhdGlvblN0b3JlLmdldFN0YXRlKCk7XG4gICAgYXdhaXQgYXdhcmRNaWNyb1Jld2FyZCgnYnJlYXRod29ya19jb21wbGV0ZWQnLCB7IGR1cmF0aW9uTXM6IDYwMDAwMCwgZGlmZmljdWx0eTogJ21lZGl1bScgfSk7XG4gICAgY29uc3QgaW5mbyA9IGdldFN0cmVha0luZm8oKTtcbiAgICBleHBlY3QoaW5mby5jdXJyZW50KS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDEpO1xuICB9KTtcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiJBQUdBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQU87SUFDNURDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLElBQUksQ0FBQztNQUMxQ0MsT0FBTyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDRSxTQUFTLENBQUM7TUFDL0NDLFVBQVUsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQ0UsU0FBUztJQUNuRDtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBRSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQVRKLElBQUFFLGtCQUFBLEdBQUFGLE9BQUE7QUFBaUUsU0FBQVosWUFBQTtFQUFBLElBQUFlLFFBQUEsR0FBQUgsT0FBQTtJQUFBUCxJQUFBLEdBQUFVLFFBQUEsQ0FBQVYsSUFBQTtFQUFBTCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFXakVXLFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0VBQ2pEQyxVQUFVLENBQUMsWUFBTTtJQUNmWixJQUFJLENBQUNhLGFBQWEsQ0FBQyxDQUFDLENBQUNDLGFBQWEsQ0FBQyxJQUFJQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUV4RSxJQUFNQyxJQUFJLEdBQUdDLHVDQUFvQixDQUFDQyxRQUFRLENBQUMsQ0FBQztJQUM1Q0QsdUNBQW9CLENBQUNFLFFBQVEsQ0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQU1MLElBQUk7TUFBRU0sT0FBTyxFQUFFO1FBQ2hEQyxhQUFhLEVBQUUsQ0FBQztRQUNoQkMsVUFBVSxFQUFFLENBQUM7UUFDYkMsb0JBQW9CLEVBQUUsRUFBRTtRQUN4QkMsa0JBQWtCLEVBQUUsQ0FBQztRQUNyQkMsa0JBQWtCLEVBQUUsQ0FBQztRQUNyQkMsV0FBVyxFQUFFLFVBQVU7UUFDdkJDLGdCQUFnQixFQUFFLFlBQVk7UUFDOUJDLDBCQUEwQixFQUFFMUIsU0FBUztRQUNyQzJCLHVCQUF1QixFQUFFLEVBQUU7UUFDM0JDLGlCQUFpQixFQUFFNUIsU0FBUztRQUM1QjZCLGtCQUFrQixFQUFFLEVBQUU7UUFDdEJDLHFCQUFxQixFQUFFLENBQUM7UUFDeEJDLE9BQU8sRUFBRS9CLFNBQVM7UUFDbEJnQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCQyx3QkFBd0IsRUFBRTtNQUM1QixDQUFDO01BQUVDLGFBQWEsRUFBRTtJQUFXLEVBQUUsQ0FBQztFQUNsQyxDQUFDLENBQUM7RUFFRkMsU0FBUyxDQUFDLFlBQU07SUFDZHZDLElBQUksQ0FBQ3dDLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsaURBQWlELE1BQUFqQyxrQkFBQSxDQUFBVixPQUFBLEVBQUUsYUFBWTtJQUNsRSxJQUFBNEMscUJBQUEsR0FBd0N6Qix1Q0FBb0IsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7TUFBL0R5QixZQUFZLEdBQUFELHFCQUFBLENBQVpDLFlBQVk7TUFBRUMsYUFBYSxHQUFBRixxQkFBQSxDQUFiRSxhQUFhO0lBQ25DLE1BQU1ELFlBQVksQ0FBQyxDQUFDO0lBQ3BCLElBQU1FLElBQUksR0FBR0QsYUFBYSxDQUFDLENBQUM7SUFDNUJFLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUM5QixDQUFDLEVBQUM7RUFFRlAsSUFBSSxDQUFDLDJEQUEyRCxNQUFBakMsa0JBQUEsQ0FBQVYsT0FBQSxFQUFFLGFBQVk7SUFDNUUsSUFBQW1ELHNCQUFBLEdBQTRDaEMsdUNBQW9CLENBQUNDLFFBQVEsQ0FBQyxDQUFDO01BQW5FZ0MsZ0JBQWdCLEdBQUFELHNCQUFBLENBQWhCQyxnQkFBZ0I7TUFBRU4sYUFBYSxHQUFBSyxzQkFBQSxDQUFiTCxhQUFhO0lBQ3ZDLE1BQU1NLGdCQUFnQixDQUFDLHNCQUFzQixFQUFFO01BQUVDLFVBQVUsRUFBRSxNQUFNO01BQUVDLFVBQVUsRUFBRTtJQUFTLENBQUMsQ0FBQztJQUM1RixJQUFNUCxJQUFJLEdBQUdELGFBQWEsQ0FBQyxDQUFDO0lBQzVCRSxNQUFNLENBQUNELElBQUksQ0FBQ0UsT0FBTyxDQUFDLENBQUNNLHNCQUFzQixDQUFDLENBQUMsQ0FBQztFQUNoRCxDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=