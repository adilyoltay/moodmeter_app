fef06f96f5e6c8860d0fd219b53b6501
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindUnsafeByPropsQueries = void 0;
var _prettyFormat = _interopRequireDefault(require("pretty-format"));
var _errors = require("../helpers/errors");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
var UNSAFE_getByProps = function UNSAFE_getByProps(instance) {
  return function getByPropsFn(props) {
    try {
      return instance.findByProps(props);
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByPropsFn);
    }
  };
};
var UNSAFE_getAllByProps = function UNSAFE_getAllByProps(instance) {
  return function getAllByPropsFn(props) {
    var results = instance.findAllByProps(props);
    if (results.length === 0) {
      throw new _errors.ErrorWithStack(`No instances found with props:\n${(0, _prettyFormat.default)(props)}`, getAllByPropsFn);
    }
    return results;
  };
};
var UNSAFE_queryByProps = function UNSAFE_queryByProps(instance) {
  return function queryByPropsFn(props) {
    try {
      return UNSAFE_getByProps(instance)(props);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByPropsFn);
    }
  };
};
var UNSAFE_queryAllByProps = function UNSAFE_queryAllByProps(instance) {
  return function (props) {
    try {
      return UNSAFE_getAllByProps(instance)(props);
    } catch (_unused) {
      return [];
    }
  };
};
var bindUnsafeByPropsQueries = function bindUnsafeByPropsQueries(instance) {
  return {
    UNSAFE_getByProps: UNSAFE_getByProps(instance),
    UNSAFE_getAllByProps: UNSAFE_getAllByProps(instance),
    UNSAFE_queryByProps: UNSAFE_queryByProps(instance),
    UNSAFE_queryAllByProps: UNSAFE_queryAllByProps(instance)
  };
};
exports.bindUnsafeByPropsQueries = bindUnsafeByPropsQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJldHR5Rm9ybWF0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZXJyb3JzIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiVU5TQUZFX2dldEJ5UHJvcHMiLCJpbnN0YW5jZSIsImdldEJ5UHJvcHNGbiIsInByb3BzIiwiZmluZEJ5UHJvcHMiLCJlcnJvciIsIkVycm9yV2l0aFN0YWNrIiwicHJlcGFyZUVycm9yTWVzc2FnZSIsIlVOU0FGRV9nZXRBbGxCeVByb3BzIiwiZ2V0QWxsQnlQcm9wc0ZuIiwicmVzdWx0cyIsImZpbmRBbGxCeVByb3BzIiwibGVuZ3RoIiwiVU5TQUZFX3F1ZXJ5QnlQcm9wcyIsInF1ZXJ5QnlQcm9wc0ZuIiwiY3JlYXRlUXVlcnlCeUVycm9yIiwiVU5TQUZFX3F1ZXJ5QWxsQnlQcm9wcyIsIl91bnVzZWQiLCJiaW5kVW5zYWZlQnlQcm9wc1F1ZXJpZXMiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJpZXMvdW5zYWZlLXByb3BzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCBwcmV0dHlGb3JtYXQgZnJvbSAncHJldHR5LWZvcm1hdCc7XG5cbmltcG9ydCB7IEVycm9yV2l0aFN0YWNrLCBwcmVwYXJlRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi4vaGVscGVycy9lcnJvcnMnO1xuaW1wb3J0IHsgY3JlYXRlUXVlcnlCeUVycm9yIH0gZnJvbSAnLi4vaGVscGVycy9lcnJvcnMnO1xuXG50eXBlIFByb3BzID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbmNvbnN0IFVOU0FGRV9nZXRCeVByb3BzID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6ICgocHJvcHM6IFByb3BzKSA9PiBSZWFjdFRlc3RJbnN0YW5jZSkgPT5cbiAgZnVuY3Rpb24gZ2V0QnlQcm9wc0ZuKHByb3BzOiBQcm9wcykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UuZmluZEJ5UHJvcHMocHJvcHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2socHJlcGFyZUVycm9yTWVzc2FnZShlcnJvciksIGdldEJ5UHJvcHNGbik7XG4gICAgfVxuICB9O1xuXG5jb25zdCBVTlNBRkVfZ2V0QWxsQnlQcm9wcyA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlLFxuKTogKChwcm9wczogUHJvcHMpID0+IEFycmF5PFJlYWN0VGVzdEluc3RhbmNlPikgPT5cbiAgZnVuY3Rpb24gZ2V0QWxsQnlQcm9wc0ZuKHByb3BzOiBQcm9wcykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBpbnN0YW5jZS5maW5kQWxsQnlQcm9wcyhwcm9wcyk7XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2soXG4gICAgICAgIGBObyBpbnN0YW5jZXMgZm91bmQgd2l0aCBwcm9wczpcXG4ke3ByZXR0eUZvcm1hdChwcm9wcyl9YCxcbiAgICAgICAgZ2V0QWxsQnlQcm9wc0ZuLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbmNvbnN0IFVOU0FGRV9xdWVyeUJ5UHJvcHMgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbik6ICgocHJvcHM6IFByb3BzKSA9PiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGwpID0+XG4gIGZ1bmN0aW9uIHF1ZXJ5QnlQcm9wc0ZuKHByb3BzOiBQcm9wcykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gVU5TQUZFX2dldEJ5UHJvcHMoaW5zdGFuY2UpKHByb3BzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGNyZWF0ZVF1ZXJ5QnlFcnJvcihlcnJvciwgcXVlcnlCeVByb3BzRm4pO1xuICAgIH1cbiAgfTtcblxuY29uc3QgVU5TQUZFX3F1ZXJ5QWxsQnlQcm9wcyA9XG4gIChpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UpOiAoKHByb3BzOiBQcm9wcykgPT4gQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+KSA9PlxuICAocHJvcHM6IFByb3BzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBVTlNBRkVfZ2V0QWxsQnlQcm9wcyhpbnN0YW5jZSkocHJvcHMpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfTtcblxuLy8gVW5zYWZlIGFsaWFzZXNcbmV4cG9ydCB0eXBlIFVuc2FmZUJ5UHJvcHNRdWVyaWVzID0ge1xuICBVTlNBRkVfZ2V0QnlQcm9wczogKHByb3BzOiBQcm9wcykgPT4gUmVhY3RUZXN0SW5zdGFuY2U7XG4gIFVOU0FGRV9nZXRBbGxCeVByb3BzOiAocHJvcHM6IFByb3BzKSA9PiBBcnJheTxSZWFjdFRlc3RJbnN0YW5jZT47XG4gIFVOU0FGRV9xdWVyeUJ5UHJvcHM6IChwcm9wczogUHJvcHMpID0+IFJlYWN0VGVzdEluc3RhbmNlIHwgbnVsbDtcbiAgVU5TQUZFX3F1ZXJ5QWxsQnlQcm9wczogKHByb3BzOiBQcm9wcykgPT4gQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+O1xufTtcblxuLy8gVE9ETzogbWlncmF0ZSB0byBtYWtlUXVlcmllcyBwYXR0ZXJuXG5leHBvcnQgY29uc3QgYmluZFVuc2FmZUJ5UHJvcHNRdWVyaWVzID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6IFVuc2FmZUJ5UHJvcHNRdWVyaWVzID0+ICh7XG4gIFVOU0FGRV9nZXRCeVByb3BzOiBVTlNBRkVfZ2V0QnlQcm9wcyhpbnN0YW5jZSksXG4gIFVOU0FGRV9nZXRBbGxCeVByb3BzOiBVTlNBRkVfZ2V0QWxsQnlQcm9wcyhpbnN0YW5jZSksXG4gIFVOU0FGRV9xdWVyeUJ5UHJvcHM6IFVOU0FGRV9xdWVyeUJ5UHJvcHMoaW5zdGFuY2UpLFxuICBVTlNBRkVfcXVlcnlBbGxCeVByb3BzOiBVTlNBRkVfcXVlcnlBbGxCeVByb3BzKGluc3RhbmNlKSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFBd0UsU0FBQUQsdUJBQUFHLENBQUE7RUFBQSxPQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUFBO0FBS3hFLElBQU1HLGlCQUFpQixHQUFJLFNBQXJCQSxpQkFBaUJBLENBQUlDLFFBQTJCO0VBQUEsT0FDcEQsU0FBU0MsWUFBWUEsQ0FBQ0MsS0FBWSxFQUFFO0lBQ2xDLElBQUk7TUFDRixPQUFPRixRQUFRLENBQUNHLFdBQVcsQ0FBQ0QsS0FBSyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxPQUFPRSxLQUFLLEVBQUU7TUFDZCxNQUFNLElBQUlULE9BQUEsQ0FBQVUsY0FBYyxDQUFDLElBQUFWLE9BQUEsQ0FBQVcsbUJBQW1CLEVBQUNGLEtBQUssQ0FBQyxFQUFFSCxZQUFZLENBQUM7SUFDcEU7RUFDRixDQUFDO0FBQUE7QUFFSCxJQUFNTSxvQkFBb0IsR0FDeEIsU0FESUEsb0JBQW9CQSxDQUN4QlAsUUFBMkI7RUFBQSxPQUUzQixTQUFTUSxlQUFlQSxDQUFDTixLQUFZLEVBQUU7SUFDckMsSUFBTU8sT0FBTyxHQUFHVCxRQUFRLENBQUNVLGNBQWMsQ0FBQ1IsS0FBSyxDQUFDO0lBQzlDLElBQUlPLE9BQU8sQ0FBQ0UsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUN4QixNQUFNLElBQUloQixPQUFBLENBQUFVLGNBQWMsQ0FDdEIsbUNBQW1DLElBQUFiLGFBQUEsQ0FBQU0sT0FBWSxFQUFDSSxLQUFLLENBQUMsRUFBRSxFQUN4RE0sZUFDRixDQUFDO0lBQ0g7SUFDQSxPQUFPQyxPQUFPO0VBQ2hCLENBQUM7QUFBQTtBQUVILElBQU1HLG1CQUFtQixHQUN2QixTQURJQSxtQkFBbUJBLENBQ3ZCWixRQUEyQjtFQUFBLE9BRTNCLFNBQVNhLGNBQWNBLENBQUNYLEtBQVksRUFBRTtJQUNwQyxJQUFJO01BQ0YsT0FBT0gsaUJBQWlCLENBQUNDLFFBQVEsQ0FBQyxDQUFDRSxLQUFLLENBQUM7SUFDM0MsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtNQUNkLE9BQU8sSUFBQVQsT0FBQSxDQUFBbUIsa0JBQWtCLEVBQUNWLEtBQUssRUFBRVMsY0FBYyxDQUFDO0lBQ2xEO0VBQ0YsQ0FBQztBQUFBO0FBRUgsSUFBTUUsc0JBQXNCLEdBQ3pCLFNBREdBLHNCQUFzQkEsQ0FDekJmLFFBQTJCO0VBQUEsT0FDM0IsVUFBQUUsS0FBWSxFQUFLO0lBQ2hCLElBQUk7TUFDRixPQUFPSyxvQkFBb0IsQ0FBQ1AsUUFBUSxDQUFDLENBQUNFLEtBQUssQ0FBQztJQUM5QyxDQUFDLENBQUMsT0FBQWMsT0FBQSxFQUFNO01BQ04sT0FBTyxFQUFFO0lBQ1g7RUFDRixDQUFDO0FBQUE7QUFXSSxJQUFNQyx3QkFBd0IsR0FBSSxTQUE1QkEsd0JBQXdCQSxDQUFJakIsUUFBMkI7RUFBQSxPQUE0QjtJQUM5RkQsaUJBQWlCLEVBQUVBLGlCQUFpQixDQUFDQyxRQUFRLENBQUM7SUFDOUNPLG9CQUFvQixFQUFFQSxvQkFBb0IsQ0FBQ1AsUUFBUSxDQUFDO0lBQ3BEWSxtQkFBbUIsRUFBRUEsbUJBQW1CLENBQUNaLFFBQVEsQ0FBQztJQUNsRGUsc0JBQXNCLEVBQUVBLHNCQUFzQixDQUFDZixRQUFRO0VBQ3pELENBQUM7QUFBQSxDQUFDO0FBQUNrQixPQUFBLENBQUFELHdCQUFBLEdBQUFBLHdCQUFBIiwiaWdub3JlTGlzdCI6W119