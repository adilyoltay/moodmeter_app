fb9a13d6d9b57159aa4f548f10348814
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderApplication;
var _GlobalPerformanceLogger = _interopRequireDefault(require("../Utilities/GlobalPerformanceLogger"));
var _PerformanceLoggerContext = _interopRequireDefault(require("../Utilities/PerformanceLoggerContext"));
var _AppContainer = _interopRequireDefault(require("./AppContainer"));
var _DisplayMode = _interopRequireDefault(require("./DisplayMode"));
var _getCachedComponentWithDebugName = _interopRequireDefault(require("./getCachedComponentWithDebugName"));
var Renderer = _interopRequireWildcard(require("./RendererProxy"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
require("../Utilities/BackHandler");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useOffscreen) {
  (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
  var performanceLogger = scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default;
  var renderable = (0, _jsxRuntime.jsx)(_PerformanceLoggerContext.default.Provider, {
    value: performanceLogger,
    children: (0, _jsxRuntime.jsx)(_AppContainer.default, {
      rootTag: rootTag,
      fabric: fabric,
      WrapperComponent: WrapperComponent,
      rootViewStyle: rootViewStyle,
      initialProps: initialProps != null ? initialProps : Object.freeze({}),
      internal_excludeLogBox: isLogBox,
      children: (0, _jsxRuntime.jsx)(RootComponent, Object.assign({}, initialProps, {
        rootTag: rootTag
      }))
    })
  });
  if (__DEV__ && debugName) {
    var RootComponentWithMeaningfulName = (0, _getCachedComponentWithDebugName.default)(`${debugName}(RootComponent)`);
    renderable = (0, _jsxRuntime.jsx)(RootComponentWithMeaningfulName, {
      children: renderable
    });
  }
  if (useOffscreen && displayMode != null) {
    var Activity = React.unstable_Activity;
    renderable = (0, _jsxRuntime.jsx)(Activity, {
      mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
      children: renderable
    });
  }
  var useConcurrentRoot = Boolean(fabric);
  performanceLogger.startTimespan('renderApplication_React_render');
  performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
  performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
  performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());
  Renderer.renderElement({
    element: renderable,
    rootTag: rootTag,
    useFabric: Boolean(fabric),
    useConcurrentRoot: useConcurrentRoot
  });
  performanceLogger.stopTimespan('renderApplication_React_render');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,