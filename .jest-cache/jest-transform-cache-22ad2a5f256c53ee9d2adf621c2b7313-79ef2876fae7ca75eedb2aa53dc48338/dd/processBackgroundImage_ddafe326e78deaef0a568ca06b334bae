b26fdca0b68bdb1ee33cfa966f323262
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processBackgroundImage;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var processColor = require("./processColor").default;
var DIRECTION_KEYWORD_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/i;
var ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
var DEFAULT_DIRECTION = {
  type: 'angle',
  value: 180
};
function processBackgroundImage(backgroundImage) {
  var result = [];
  if (backgroundImage == null) {
    return result;
  }
  if (typeof backgroundImage === 'string') {
    result = parseCSSLinearGradient(backgroundImage.replace(/\n/g, ' '));
  } else if (Array.isArray(backgroundImage)) {
    for (var bgImage of backgroundImage) {
      var processedColorStops = [];
      for (var index = 0; index < bgImage.colorStops.length; index++) {
        var colorStop = bgImage.colorStops[index];
        var positions = colorStop.positions;
        if (colorStop.color == null && Array.isArray(positions) && positions.length === 1) {
          var position = positions[0];
          if (typeof position === 'number' || typeof position === 'string' && position.endsWith('%')) {
            processedColorStops.push({
              color: null,
              position: position
            });
          } else {
            return [];
          }
        } else {
          var processedColor = processColor(colorStop.color);
          if (processedColor == null) {
            return [];
          }
          if (positions != null && positions.length > 0) {
            for (var _position of positions) {
              if (typeof _position === 'number' || typeof _position === 'string' && _position.endsWith('%')) {
                processedColorStops.push({
                  color: processedColor,
                  position: _position
                });
              } else {
                return [];
              }
            }
          } else {
            processedColorStops.push({
              color: processedColor,
              position: null
            });
          }
        }
      }
      var direction = DEFAULT_DIRECTION;
      var bgDirection = bgImage.direction != null ? bgImage.direction.toLowerCase() : null;
      if (bgDirection != null) {
        if (ANGLE_UNIT_REGEX.test(bgDirection)) {
          var parsedAngle = getAngleInDegrees(bgDirection);
          if (parsedAngle != null) {
            direction = {
              type: 'angle',
              value: parsedAngle
            };
          } else {
            return [];
          }
        } else if (DIRECTION_KEYWORD_REGEX.test(bgDirection)) {
          var parsedDirection = getDirectionForKeyword(bgDirection);
          if (parsedDirection != null) {
            direction = parsedDirection;
          } else {
            return [];
          }
        } else {
          return [];
        }
      }
      result = result.concat({
        type: 'linearGradient',
        direction: direction,
        colorStops: processedColorStops
      });
    }
  }
  return result;
}
function parseCSSLinearGradient(cssString) {
  var gradients = [];
  var match;
  var linearGradientRegex = /linear-gradient\s*\(((?:\([^)]*\)|[^())])*)\)/gi;
  while (match = linearGradientRegex.exec(cssString)) {
    var gradientContent = match[1];
    var parts = gradientContent.split(',');
    var direction = DEFAULT_DIRECTION;
    var trimmedDirection = parts[0].trim().toLowerCase();
    if (ANGLE_UNIT_REGEX.test(trimmedDirection)) {
      var parsedAngle = getAngleInDegrees(trimmedDirection);
      if (parsedAngle != null) {
        direction = {
          type: 'angle',
          value: parsedAngle
        };
        parts.shift();
      } else {
        return [];
      }
    } else if (DIRECTION_KEYWORD_REGEX.test(trimmedDirection)) {
      var parsedDirection = getDirectionForKeyword(trimmedDirection);
      if (parsedDirection != null) {
        direction = parsedDirection;
        parts.shift();
      } else {
        return [];
      }
    }
    var colorStopsString = parts.join(',');
    var colorStops = [];
    var stops = colorStopsString.split(/,(?![^(]*\))/);
    var prevStop = null;
    for (var i = 0; i < stops.length; i++) {
      var stop = stops[i];
      var trimmedStop = stop.trim().toLowerCase();
      var colorStopParts = trimmedStop.match(/\S+\([^)]*\)|\S+/g);
      if (colorStopParts == null) {
        return [];
      }
      if (colorStopParts.length === 3) {
        var color = colorStopParts[0];
        var position1 = getPositionFromCSSValue(colorStopParts[1]);
        var position2 = getPositionFromCSSValue(colorStopParts[2]);
        var processedColor = processColor(color);
        if (processedColor == null) {
          return [];
        }
        if (position1 == null || position2 == null) {
          return [];
        }
        colorStops.push({
          color: processedColor,
          position: position1
        });
        colorStops.push({
          color: processedColor,
          position: position2
        });
      } else if (colorStopParts.length === 2) {
        var _color = colorStopParts[0];
        var position = getPositionFromCSSValue(colorStopParts[1]);
        var _processedColor = processColor(_color);
        if (_processedColor == null) {
          return [];
        }
        if (position == null) {
          return [];
        }
        colorStops.push({
          color: _processedColor,
          position: position
        });
      } else if (colorStopParts.length === 1) {
        var _position2 = getPositionFromCSSValue(colorStopParts[0]);
        if (_position2 != null) {
          if (prevStop != null && prevStop.length === 1 && getPositionFromCSSValue(prevStop[0]) != null || i === stops.length - 1 || i === 0) {
            return [];
          }
          colorStops.push({
            color: null,
            position: _position2
          });
        } else {
          var _processedColor2 = processColor(colorStopParts[0]);
          if (_processedColor2 == null) {
            return [];
          }
          colorStops.push({
            color: _processedColor2,
            position: null
          });
        }
      } else {
        return [];
      }
      prevStop = colorStopParts;
    }
    gradients.push({
      type: 'linearGradient',
      direction: direction,
      colorStops: colorStops
    });
  }
  return gradients;
}
function getDirectionForKeyword(direction) {
  if (direction == null) {
    return null;
  }
  var normalized = direction.replace(/\s+/g, ' ').toLowerCase();
  switch (normalized) {
    case 'to top':
      return {
        type: 'angle',
        value: 0
      };
    case 'to right':
      return {
        type: 'angle',
        value: 90
      };
    case 'to bottom':
      return {
        type: 'angle',
        value: 180
      };
    case 'to left':
      return {
        type: 'angle',
        value: 270
      };
    case 'to top right':
    case 'to right top':
      return {
        type: 'keyword',
        value: 'to top right'
      };
    case 'to bottom right':
    case 'to right bottom':
      return {
        type: 'keyword',
        value: 'to bottom right'
      };
    case 'to top left':
    case 'to left top':
      return {
        type: 'keyword',
        value: 'to top left'
      };
    case 'to bottom left':
    case 'to left bottom':
      return {
        type: 'keyword',
        value: 'to bottom left'
      };
    default:
      return null;
  }
}
function getAngleInDegrees(angle) {
  if (angle == null) {
    return null;
  }
  var match = angle.match(ANGLE_UNIT_REGEX);
  if (!match) {
    return null;
  }
  var _match = (0, _slicedToArray2.default)(match, 3),
    value = _match[1],
    unit = _match[2];
  var numericValue = parseFloat(value);
  switch (unit) {
    case 'deg':
      return numericValue;
    case 'grad':
      return numericValue * 0.9;
    case 'rad':
      return numericValue * 180 / Math.PI;
    case 'turn':
      return numericValue * 360;
    default:
      return null;
  }
}
function getPositionFromCSSValue(position) {
  if (position.endsWith('px')) {
    return parseFloat(position);
  }
  if (position.endsWith('%')) {
    return position;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,