39e3761cf477cfcfd5770bf63f8eec07
_getJestObj().mock("../../services/supabase", function () {
  return {
    __esModule: true,
    default: {
      supabaseClient: {
        from: jest.fn(function () {
          return {
            select: jest.fn(function () {
              return {
                eq: jest.fn(function () {
                  return {
                    maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            upsert: jest.fn((0, _asyncToGenerator2.default)(function* () {
              return {
                data: null,
                error: null
              };
            })),
            delete: jest.fn(function () {
              return {
                eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            }),
            like: jest.fn(function () {
              return {
                delete: jest.fn(function () {
                  return {
                    eq: jest.fn((0, _asyncToGenerator2.default)(function* () {
                      return {
                        data: null,
                        error: null
                      };
                    }))
                  };
                })
              };
            }),
            eq: jest.fn(function () {
              return {
                maybeSingle: jest.fn((0, _asyncToGenerator2.default)(function* () {
                  return {
                    data: null,
                    error: null
                  };
                }))
              };
            })
          };
        })
      }
    }
  };
});
_getJestObj().mock("../../features/ai/telemetry/aiTelemetry", function () {
  var actual = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
  return Object.assign({
    __esModule: true
  }, actual, {
    trackAIInteraction: jest.fn((0, _asyncToGenerator2.default)(function* () {}))
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var unifiedPipeline;
var actualTelemetry = jest.requireActual("../../features/ai/telemetry/aiTelemetry");
var AIEventType = actualTelemetry.AIEventType;
describe('System CBT - Unified Pipeline', function () {
  var userId = _seedData.TEST_ENV.SEED_USER_ID;
  var _ref7 = require("../../features/ai/telemetry/aiTelemetry"),
    trackAIInteraction = _ref7.trackAIInteraction;
  beforeAll(function () {
    process.env.TEST_MODE = '1';
    process.env.TEST_TTL_MS = '5000';
    process.env.TEST_PIPELINE_STUB = '0';
    process.env.TEST_SEED_USER_ID = userId;
    process.env.EXPO_PUBLIC_ENABLE_AI = 'true';
    jest.resetModules();
    jest.doMock('constants/featureFlags', function () {
      var actual = jest.requireActual("../../constants/featureFlags.ts");
      return Object.assign({
        __esModule: true
      }, actual, {
        AI_MASTER_ENABLED: true,
        isEnabled: function isEnabled(flag) {
          if (flag === 'AI_UNIFIED_PIPELINE') return true;
          return actual.isEnabled(flag);
        }
      });
    });
    unifiedPipeline = require("../../features/ai/core/UnifiedAIPipeline").unifiedPipeline;
  });
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield _asyncStorage.default.clear();
  }));
  it('[QRsys:cbt:fresh] processes fresh and populates minimal analytics', (0, _asyncToGenerator2.default)(function* () {
    var _res$analytics;
    var raw = (0, _seedData.generateCBTData)(_seedData.CBT_SCENARIOS.high);
    var cbtRecords = raw.map(function (r) {
      return Object.assign({}, r, {
        timestamp: r.created_at
      });
    });
    var res = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        cbtRecords: cbtRecords
      },
      context: {
        source: 'cbt'
      }
    });
    expect(res.metadata.source).toBe('fresh');
    expect((_res$analytics = res.analytics) == null || (_res$analytics = _res$analytics.cbt) == null ? void 0 : _res$analytics.sampleSize).toBeGreaterThan(0);
  }));
  it('[QRsys:cbt:cache] returns cached result on repeat', (0, _asyncToGenerator2.default)(function* () {
    var raw = (0, _seedData.generateCBTData)(_seedData.CBT_SCENARIOS.medium);
    var cbtRecords = raw.map(function (r) {
      return Object.assign({}, r, {
        timestamp: r.created_at
      });
    });
    yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        cbtRecords: cbtRecords
      },
      context: {
        source: 'cbt'
      }
    });
    var second = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {
        cbtRecords: cbtRecords
      },
      context: {
        source: 'cbt'
      }
    });
    expect(second.metadata.source).toBe('cache');
    var calls = trackAIInteraction.mock.calls.map(function (args) {
      return args[0];
    });
    expect(calls).toContain(AIEventType.UNIFIED_PIPELINE_CACHE_HIT);
  }));
  it('[QRsys:cbt:hidden] has no qualityMetadata (UI hides)', (0, _asyncToGenerator2.default)(function* () {
    var res = yield unifiedPipeline.process({
      userId: userId,
      type: 'data',
      content: {},
      context: {
        source: 'cbt'
      }
    });
    expect('qualityMetadata' in res).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,