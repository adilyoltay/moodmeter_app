20b975285fa63e7c9b437391b40ad155
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    __esModule: true,
    default: {
      getItem: jest.fn((0, _asyncToGenerator2.default)(function* () {
        return null;
      })),
      setItem: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
      removeItem: jest.fn((0, _asyncToGenerator2.default)(function* () {}))
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = _interopRequireWildcard(require("react-test-renderer"));
var _ErrorBoundary = _interopRequireDefault(require("../../components/ErrorBoundary"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ErrorBoundary', function () {
  var Problem = function Problem() {
    throw new Error('boom');
  };
  it('catches errors and renders fallback UI', function () {
    var tree;
    (0, _reactTestRenderer.act)(function () {
      tree = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_ErrorBoundary.default, {
        fallback: (0, _jsxRuntime.jsx)("div", {
          children: "fallback"
        }),
        children: (0, _jsxRuntime.jsx)(Problem, {})
      })).toJSON();
    });
    expect(tree).not.toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImdldEl0ZW0iLCJqZXN0IiwiZm4iLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0VGVzdFJlbmRlcmVyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfRXJyb3JCb3VuZGFyeSIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIlByb2JsZW0iLCJFcnJvciIsIml0IiwidHJlZSIsImFjdCIsInJlbmRlcmVyIiwiY3JlYXRlIiwianN4IiwiZmFsbGJhY2siLCJjaGlsZHJlbiIsInRvSlNPTiIsImV4cGVjdCIsIm5vdCIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsiRXJyb3JCb3VuZGFyeS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlbmRlcmVyLCB7IGFjdCB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IEVycm9yQm91bmRhcnkgZnJvbSAnQC9jb21wb25lbnRzL0Vycm9yQm91bmRhcnknO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDoge1xuICAgIGdldEl0ZW06IGplc3QuZm4oYXN5bmMgKCkgPT4gbnVsbCksXG4gICAgc2V0SXRlbTogamVzdC5mbihhc3luYyAoKSA9PiB7fSksXG4gICAgcmVtb3ZlSXRlbTogamVzdC5mbihhc3luYyAoKSA9PiB7fSksXG4gIH1cbn0pKTtcblxuZGVzY3JpYmUoJ0Vycm9yQm91bmRhcnknLCAoKSA9PiB7XG4gIGNvbnN0IFByb2JsZW0gPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignYm9vbScpOyB9O1xuICBpdCgnY2F0Y2hlcyBlcnJvcnMgYW5kIHJlbmRlcnMgZmFsbGJhY2sgVUknLCAoKSA9PiB7XG4gICAgbGV0IHRyZWU6IGFueTtcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZShcbiAgICAgICAgPEVycm9yQm91bmRhcnkgZmFsbGJhY2s9ezxkaXY+ZmFsbGJhY2s8L2Rpdj59PlxuICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxuICAgICAgICAgIDxQcm9ibGVtIC8+XG4gICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgICkudG9KU09OKCk7XG4gICAgfSk7XG4gICAgZXhwZWN0KHRyZWUpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuXG5cbiJdLCJtYXBwaW5ncyI6IkFBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUM1REMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxLQUFBQyxrQkFBQSxDQUFBSixPQUFBLEVBQUM7UUFBQSxPQUFZLElBQUk7TUFBQSxHQUFDO01BQ2xDSyxPQUFPLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxLQUFBQyxrQkFBQSxDQUFBSixPQUFBLEVBQUMsYUFBWSxDQUFDLENBQUMsRUFBQztNQUNoQ00sVUFBVSxFQUFFSixJQUFJLENBQUNDLEVBQUUsS0FBQUMsa0JBQUEsQ0FBQUosT0FBQSxFQUFDLGFBQVksQ0FBQyxDQUFDO0lBQ3BDO0VBQ0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFPLHNCQUFB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