0602103db424838e59772c93b2b2c979
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByDisplayValueQueries = void 0;
var _findAll = require("../helpers/find-all");
var _hostComponentNames = require("../helpers/host-component-names");
var _textInput = require("../helpers/text-input");
var _matches = require("../matches");
var _makeQueries = require("./make-queries");
var matchDisplayValue = function matchDisplayValue(node, expectedValue) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  var nodeValue = (0, _textInput.getTextInputValue)(node);
  return (0, _matches.matches)(expectedValue, nodeValue, normalizer, exact);
};
var queryAllByDisplayValue = function queryAllByDisplayValue(instance) {
  return function queryAllByDisplayValueFn(displayValue, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _hostComponentNames.isHostTextInput)(node) && matchDisplayValue(node, displayValue, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(displayValue) {
  return `Found multiple elements with display value: ${String(displayValue)} `;
};
var getMissingError = function getMissingError(displayValue) {
  return `Unable to find an element with displayValue: ${String(displayValue)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByDisplayValue, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByDisplayValueQueries = function bindByDisplayValueQueries(instance) {
  return {
    getByDisplayValue: getBy(instance),
    getAllByDisplayValue: getAllBy(instance),
    queryByDisplayValue: queryBy(instance),
    queryAllByDisplayValue: queryAllBy(instance),
    findByDisplayValue: findBy(instance),
    findAllByDisplayValue: findAllBy(instance)
  };
};
exports.bindByDisplayValueQueries = bindByDisplayValueQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfaG9zdENvbXBvbmVudE5hbWVzIiwiX3RleHRJbnB1dCIsIl9tYXRjaGVzIiwiX21ha2VRdWVyaWVzIiwibWF0Y2hEaXNwbGF5VmFsdWUiLCJub2RlIiwiZXhwZWN0ZWRWYWx1ZSIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJub2RlVmFsdWUiLCJnZXRUZXh0SW5wdXRWYWx1ZSIsIm1hdGNoZXMiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlIiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlRm4iLCJkaXNwbGF5VmFsdWUiLCJxdWVyeU9wdGlvbnMiLCJmaW5kQWxsIiwiaXNIb3N0VGV4dElucHV0IiwiZ2V0TXVsdGlwbGVFcnJvciIsIlN0cmluZyIsImdldE1pc3NpbmdFcnJvciIsIl9yZWYiLCJtYWtlUXVlcmllcyIsImdldEJ5IiwiZ2V0QWxsQnkiLCJxdWVyeUJ5IiwicXVlcnlBbGxCeSIsImZpbmRCeSIsImZpbmRBbGxCeSIsImJpbmRCeURpc3BsYXlWYWx1ZVF1ZXJpZXMiLCJnZXRCeURpc3BsYXlWYWx1ZSIsImdldEFsbEJ5RGlzcGxheVZhbHVlIiwicXVlcnlCeURpc3BsYXlWYWx1ZSIsImZpbmRCeURpc3BsYXlWYWx1ZSIsImZpbmRBbGxCeURpc3BsYXlWYWx1ZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcmllcy9kaXNwbGF5LXZhbHVlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuaW1wb3J0IHsgZmluZEFsbCB9IGZyb20gJy4uL2hlbHBlcnMvZmluZC1hbGwnO1xuaW1wb3J0IHsgaXNIb3N0VGV4dElucHV0IH0gZnJvbSAnLi4vaGVscGVycy9ob3N0LWNvbXBvbmVudC1uYW1lcyc7XG5pbXBvcnQgeyBnZXRUZXh0SW5wdXRWYWx1ZSB9IGZyb20gJy4uL2hlbHBlcnMvdGV4dC1pbnB1dCc7XG5pbXBvcnQgdHlwZSB7IFRleHRNYXRjaCwgVGV4dE1hdGNoT3B0aW9ucyB9IGZyb20gJy4uL21hdGNoZXMnO1xuaW1wb3J0IHsgbWF0Y2hlcyB9IGZyb20gJy4uL21hdGNoZXMnO1xuaW1wb3J0IHR5cGUge1xuICBGaW5kQWxsQnlRdWVyeSxcbiAgRmluZEJ5UXVlcnksXG4gIEdldEFsbEJ5UXVlcnksXG4gIEdldEJ5UXVlcnksXG4gIFF1ZXJ5QWxsQnlRdWVyeSxcbiAgUXVlcnlCeVF1ZXJ5LFxufSBmcm9tICcuL21ha2UtcXVlcmllcyc7XG5pbXBvcnQgeyBtYWtlUXVlcmllcyB9IGZyb20gJy4vbWFrZS1xdWVyaWVzJztcbmltcG9ydCB0eXBlIHsgQ29tbW9uUXVlcnlPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcblxudHlwZSBCeURpc3BsYXlWYWx1ZU9wdGlvbnMgPSBDb21tb25RdWVyeU9wdGlvbnMgJiBUZXh0TWF0Y2hPcHRpb25zO1xuXG5jb25zdCBtYXRjaERpc3BsYXlWYWx1ZSA9IChcbiAgbm9kZTogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIGV4cGVjdGVkVmFsdWU6IFRleHRNYXRjaCxcbiAgb3B0aW9uczogVGV4dE1hdGNoT3B0aW9ucyA9IHt9LFxuKSA9PiB7XG4gIGNvbnN0IHsgZXhhY3QsIG5vcm1hbGl6ZXIgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IG5vZGVWYWx1ZSA9IGdldFRleHRJbnB1dFZhbHVlKG5vZGUpO1xuICByZXR1cm4gbWF0Y2hlcyhleHBlY3RlZFZhbHVlLCBub2RlVmFsdWUsIG5vcm1hbGl6ZXIsIGV4YWN0KTtcbn07XG5cbmNvbnN0IHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbik6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5RGlzcGxheVZhbHVlT3B0aW9ucz4gPT5cbiAgZnVuY3Rpb24gcXVlcnlBbGxCeURpc3BsYXlWYWx1ZUZuKGRpc3BsYXlWYWx1ZSwgcXVlcnlPcHRpb25zKSB7XG4gICAgcmV0dXJuIGZpbmRBbGwoXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIChub2RlKSA9PiBpc0hvc3RUZXh0SW5wdXQobm9kZSkgJiYgbWF0Y2hEaXNwbGF5VmFsdWUobm9kZSwgZGlzcGxheVZhbHVlLCBxdWVyeU9wdGlvbnMpLFxuICAgICAgcXVlcnlPcHRpb25zLFxuICAgICk7XG4gIH07XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoZGlzcGxheVZhbHVlOiBUZXh0TWF0Y2gpID0+XG4gIGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIGRpc3BsYXkgdmFsdWU6ICR7U3RyaW5nKGRpc3BsYXlWYWx1ZSl9IGA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoZGlzcGxheVZhbHVlOiBUZXh0TWF0Y2gpID0+XG4gIGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggZGlzcGxheVZhbHVlOiAke1N0cmluZyhkaXNwbGF5VmFsdWUpfWA7XG5cbmNvbnN0IHsgZ2V0QnksIGdldEFsbEJ5LCBxdWVyeUJ5LCBxdWVyeUFsbEJ5LCBmaW5kQnksIGZpbmRBbGxCeSB9ID0gbWFrZVF1ZXJpZXMoXG4gIHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUsXG4gIGdldE1pc3NpbmdFcnJvcixcbiAgZ2V0TXVsdGlwbGVFcnJvcixcbik7XG5cbmV4cG9ydCB0eXBlIEJ5RGlzcGxheVZhbHVlUXVlcmllcyA9IHtcbiAgZ2V0QnlEaXNwbGF5VmFsdWU6IEdldEJ5UXVlcnk8VGV4dE1hdGNoLCBCeURpc3BsYXlWYWx1ZU9wdGlvbnM+O1xuICBnZXRBbGxCeURpc3BsYXlWYWx1ZTogR2V0QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5RGlzcGxheVZhbHVlT3B0aW9ucz47XG4gIHF1ZXJ5QnlEaXNwbGF5VmFsdWU6IFF1ZXJ5QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5RGlzcGxheVZhbHVlT3B0aW9ucz47XG4gIHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWU6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5RGlzcGxheVZhbHVlT3B0aW9ucz47XG4gIGZpbmRCeURpc3BsYXlWYWx1ZTogRmluZEJ5UXVlcnk8VGV4dE1hdGNoLCBCeURpc3BsYXlWYWx1ZU9wdGlvbnM+O1xuICBmaW5kQWxsQnlEaXNwbGF5VmFsdWU6IEZpbmRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlEaXNwbGF5VmFsdWVPcHRpb25zPjtcbn07XG5cbmV4cG9ydCBjb25zdCBiaW5kQnlEaXNwbGF5VmFsdWVRdWVyaWVzID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6IEJ5RGlzcGxheVZhbHVlUXVlcmllcyA9PiAoe1xuICBnZXRCeURpc3BsYXlWYWx1ZTogZ2V0QnkoaW5zdGFuY2UpLFxuICBnZXRBbGxCeURpc3BsYXlWYWx1ZTogZ2V0QWxsQnkoaW5zdGFuY2UpLFxuICBxdWVyeUJ5RGlzcGxheVZhbHVlOiBxdWVyeUJ5KGluc3RhbmNlKSxcbiAgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZTogcXVlcnlBbGxCeShpbnN0YW5jZSksXG4gIGZpbmRCeURpc3BsYXlWYWx1ZTogZmluZEJ5KGluc3RhbmNlKSxcbiAgZmluZEFsbEJ5RGlzcGxheVZhbHVlOiBmaW5kQWxsQnkoaW5zdGFuY2UpLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLG1CQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxRQUFBLEdBQUFILE9BQUE7QUFTQSxJQUFBSSxZQUFBLEdBQUFKLE9BQUE7QUFLQSxJQUFNSyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUNyQkMsSUFBdUIsRUFDdkJDLGFBQXdCLEVBRXJCO0VBQUEsSUFESEMsT0FBeUIsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBRTlCLElBQVFHLEtBQUssR0FBaUJKLE9BQU8sQ0FBN0JJLEtBQUs7SUFBRUMsVUFBQSxHQUFlTCxPQUFPLENBQXRCSyxVQUFBO0VBQ2YsSUFBTUMsU0FBUyxHQUFHLElBQUFaLFVBQUEsQ0FBQWEsaUJBQWlCLEVBQUNULElBQUksQ0FBQztFQUN6QyxPQUFPLElBQUFILFFBQUEsQ0FBQWEsT0FBTyxFQUFDVCxhQUFhLEVBQUVPLFNBQVMsRUFBRUQsVUFBVSxFQUFFRCxLQUFLLENBQUM7QUFDN0QsQ0FBQztBQUVELElBQU1LLHNCQUFzQixHQUMxQixTQURJQSxzQkFBc0JBLENBQzFCQyxRQUEyQjtFQUFBLE9BRTNCLFNBQVNDLHdCQUF3QkEsQ0FBQ0MsWUFBWSxFQUFFQyxZQUFZLEVBQUU7SUFDNUQsT0FBTyxJQUFBdEIsUUFBQSxDQUFBdUIsT0FBTyxFQUNaSixRQUFRLEVBQ1AsVUFBQVosSUFBSTtNQUFBLE9BQUssSUFBQUwsbUJBQUEsQ0FBQXNCLGVBQWUsRUFBQ2pCLElBQUksQ0FBQyxJQUFJRCxpQkFBaUIsQ0FBQ0MsSUFBSSxFQUFFYyxZQUFZLEVBQUVDLFlBQVksQ0FBQztJQUFBLEdBQ3RGQSxZQUNGLENBQUM7RUFDSCxDQUFDO0FBQUE7QUFFSCxJQUFNRyxnQkFBZ0IsR0FBSSxTQUFwQkEsZ0JBQWdCQSxDQUFJSixZQUF1QjtFQUFBLE9BQy9DLCtDQUErQ0ssTUFBTSxDQUFDTCxZQUFZLENBQUMsR0FBRztBQUFBO0FBQ3hFLElBQU1NLGVBQWUsR0FBSSxTQUFuQkEsZUFBZUEsQ0FBSU4sWUFBdUI7RUFBQSxPQUM5QyxnREFBZ0RLLE1BQU0sQ0FBQ0wsWUFBWSxDQUFDLEVBQUU7QUFBQTtBQUV4RSxJQUFBTyxJQUFBLEdBQW9FLElBQUF2QixZQUFBLENBQUF3QixXQUFXLEVBQzdFWCxzQkFBc0IsRUFDdEJTLGVBQWUsRUFDZkYsZ0JBQ0YsQ0FBQztFQUpPSyxLQUFLLEdBQUFGLElBQUEsQ0FBTEUsS0FBSztFQUFFQyxRQUFRLEdBQUFILElBQUEsQ0FBUkcsUUFBUTtFQUFFQyxPQUFPLEdBQUFKLElBQUEsQ0FBUEksT0FBTztFQUFFQyxVQUFVLEdBQUFMLElBQUEsQ0FBVkssVUFBVTtFQUFFQyxNQUFNLEdBQUFOLElBQUEsQ0FBTk0sTUFBTTtFQUFFQyxTQUFBLEdBQUFQLElBQUEsQ0FBQU8sU0FBQTtBQWUvQyxJQUFNQyx5QkFBeUIsR0FBSSxTQUE3QkEseUJBQXlCQSxDQUFJakIsUUFBMkI7RUFBQSxPQUE2QjtJQUNoR2tCLGlCQUFpQixFQUFFUCxLQUFLLENBQUNYLFFBQVEsQ0FBQztJQUNsQ21CLG9CQUFvQixFQUFFUCxRQUFRLENBQUNaLFFBQVEsQ0FBQztJQUN4Q29CLG1CQUFtQixFQUFFUCxPQUFPLENBQUNiLFFBQVEsQ0FBQztJQUN0Q0Qsc0JBQXNCLEVBQUVlLFVBQVUsQ0FBQ2QsUUFBUSxDQUFDO0lBQzVDcUIsa0JBQWtCLEVBQUVOLE1BQU0sQ0FBQ2YsUUFBUSxDQUFDO0lBQ3BDc0IscUJBQXFCLEVBQUVOLFNBQVMsQ0FBQ2hCLFFBQVE7RUFDM0MsQ0FBQztBQUFBLENBQUM7QUFBQ3VCLE9BQUEsQ0FBQU4seUJBQUEsR0FBQUEseUJBQUEiLCJpZ25vcmVMaXN0IjpbXX0=