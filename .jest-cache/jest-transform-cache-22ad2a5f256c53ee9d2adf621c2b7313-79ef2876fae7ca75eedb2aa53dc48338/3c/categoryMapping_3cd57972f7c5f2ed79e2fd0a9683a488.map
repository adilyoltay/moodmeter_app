{"version":3,"names":["CANONICAL_CATEGORIES","exports","legacyToCanonicalMap","washing","cleaning","contamination","checking","ordering","arranging","symmetry","counting","repeating","touching","mental","religious","morality","hoarding","reassurance","avoidance","other","harm","sexual","mapToCanonicalCategory","input","_legacyToCanonicalMap","key","toLowerCase","trim","isCanonicalCategory","value","includes","DB_ALLOWED_CATEGORIES","mapToDatabaseCategory","_legacyToDbMap$key","legacyToDbMap"],"sources":["categoryMapping.ts"],"sourcesContent":["// Kanonik OKB kategori eşlemesi ve yardımcı fonksiyonlar\n\nexport type CanonicalCategory =\n  | 'contamination'\n  | 'checking'\n  | 'symmetry'\n  | 'mental'\n  | 'hoarding'\n  | 'other';\n\nexport const CANONICAL_CATEGORIES: CanonicalCategory[] = [\n  'contamination',\n  'checking',\n  'symmetry',\n  'mental',\n  'hoarding',\n  'other',\n];\n\n// Uygulamadaki eski/çeşitli etiketleri kanonik sete eşler\nconst legacyToCanonicalMap: Record<string, CanonicalCategory> = {\n  // Temizlik/Bulaşma\n  washing: 'contamination',\n  cleaning: 'contamination',\n  contamination: 'contamination',\n\n  // Kontrol\n  checking: 'checking',\n\n  // Simetri/Düzen/Sayma/Dokunma ritüelleri\n  ordering: 'symmetry',\n  arranging: 'symmetry',\n  symmetry: 'symmetry',\n  counting: 'symmetry',\n  repeating: 'symmetry',\n  touching: 'symmetry',\n\n  // Zihinsel ritüeller ve dini/ahlaki temalar\n  mental: 'mental',\n  religious: 'mental',\n  morality: 'mental',\n\n  // Biriktirme\n  hoarding: 'hoarding',\n\n  // Diğer/etiketler\n  reassurance: 'other',\n  avoidance: 'other',\n  other: 'other',\n  \n  // Therapy domain legacy IDs mapped to closest canonical OCD category\n  harm: 'other',\n  sexual: 'other',\n};\n\n/**\n * Girilen kategori değerini kanonik OKB kategorisine çevirir.\n * Bilinmeyen değerler \"other\" olarak döner.\n */\nexport function mapToCanonicalCategory(input: string): CanonicalCategory {\n  const key = (input || '').toLowerCase().trim();\n  return legacyToCanonicalMap[key] ?? 'other';\n}\n\n/**\n * Kanonik kategori mi kontrol eder.\n */\nexport function isCanonicalCategory(value: string): value is CanonicalCategory {\n  return (CANONICAL_CATEGORIES as string[]).includes((value || '').toLowerCase());\n}\n\n// ===============\n// DB Kategorileri\n// ===============\n\n// Supabase şemasındaki CHECK constraint'e göre izin verilen kategoriler\nexport type DatabaseCategory = 'contamination' | 'harm' | 'symmetry' | 'religious' | 'sexual' | 'hoarding';\n\nconst DB_ALLOWED_CATEGORIES: DatabaseCategory[] = [\n  'contamination', 'harm', 'symmetry', 'religious', 'sexual', 'hoarding'\n];\n\n/**\n * Uygulama/legacy etiketleri DB'nin kabul ettiği kategorilere eşler.\n * Amaç: CHECK constraint ihlallerini önlemek.\n */\nexport function mapToDatabaseCategory(input: string): DatabaseCategory {\n  const key = (input || '').toLowerCase().trim();\n\n  // Doğrudan eşitlik (zaten DB kategorilerinden biri ise)\n  if ((DB_ALLOWED_CATEGORIES as string[]).includes(key)) {\n    return key as DatabaseCategory;\n  }\n\n  // Legacy → DB mapping\n  const legacyToDbMap: Record<string, DatabaseCategory> = {\n    // Temizlik/bulaşma\n    washing: 'contamination',\n    cleaning: 'contamination',\n    contamination: 'contamination',\n\n    // Kontrol/Simetri/Düzen/Sayma → symmetry\n    checking: 'symmetry',\n    ordering: 'symmetry',\n    arranging: 'symmetry',\n    symmetry: 'symmetry',\n    counting: 'symmetry',\n    repeating: 'symmetry',\n    touching: 'symmetry',\n\n    // Zihinsel/ahlaki/dini temalar → religious\n    mental: 'religious',\n    religious: 'religious',\n    morality: 'religious',\n\n    // Biriktirme\n    hoarding: 'hoarding',\n\n    // Diğer geniş temalar\n    harm: 'harm',\n    sexual: 'sexual',\n\n    // Yakın eşlemeler\n    reassurance: 'harm',\n    avoidance: 'harm',\n    other: 'harm'\n  };\n\n  return legacyToDbMap[key] ?? 'harm';\n}\n\n\n"],"mappings":";;;;;;;AAUO,IAAMA,oBAAyC,GAAAC,OAAA,CAAAD,oBAAA,GAAG,CACvD,eAAe,EACf,UAAU,EACV,UAAU,EACV,QAAQ,EACR,UAAU,EACV,OAAO,CACR;AAGD,IAAME,oBAAuD,GAAG;EAE9DC,OAAO,EAAE,eAAe;EACxBC,QAAQ,EAAE,eAAe;EACzBC,aAAa,EAAE,eAAe;EAG9BC,QAAQ,EAAE,UAAU;EAGpBC,QAAQ,EAAE,UAAU;EACpBC,SAAS,EAAE,UAAU;EACrBC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE,UAAU;EACpBC,SAAS,EAAE,UAAU;EACrBC,QAAQ,EAAE,UAAU;EAGpBC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE,QAAQ;EACnBC,QAAQ,EAAE,QAAQ;EAGlBC,QAAQ,EAAE,UAAU;EAGpBC,WAAW,EAAE,OAAO;EACpBC,SAAS,EAAE,OAAO;EAClBC,KAAK,EAAE,OAAO;EAGdC,IAAI,EAAE,OAAO;EACbC,MAAM,EAAE;AACV,CAAC;AAMM,SAASC,sBAAsBA,CAACC,KAAa,EAAqB;EAAA,IAAAC,qBAAA;EACvE,IAAMC,GAAG,GAAG,CAACF,KAAK,IAAI,EAAE,EAAEG,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC9C,QAAAH,qBAAA,GAAOtB,oBAAoB,CAACuB,GAAG,CAAC,YAAAD,qBAAA,GAAI,OAAO;AAC7C;AAKO,SAASI,mBAAmBA,CAACC,KAAa,EAA8B;EAC7E,OAAQ7B,oBAAoB,CAAc8B,QAAQ,CAAC,CAACD,KAAK,IAAI,EAAE,EAAEH,WAAW,CAAC,CAAC,CAAC;AACjF;AASA,IAAMK,qBAAyC,GAAG,CAChD,eAAe,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,CACvE;AAMM,SAASC,qBAAqBA,CAACT,KAAa,EAAoB;EAAA,IAAAU,kBAAA;EACrE,IAAMR,GAAG,GAAG,CAACF,KAAK,IAAI,EAAE,EAAEG,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAG9C,IAAKI,qBAAqB,CAAcD,QAAQ,CAACL,GAAG,CAAC,EAAE;IACrD,OAAOA,GAAG;EACZ;EAGA,IAAMS,aAA+C,GAAG;IAEtD/B,OAAO,EAAE,eAAe;IACxBC,QAAQ,EAAE,eAAe;IACzBC,aAAa,EAAE,eAAe;IAG9BC,QAAQ,EAAE,UAAU;IACpBC,QAAQ,EAAE,UAAU;IACpBC,SAAS,EAAE,UAAU;IACrBC,QAAQ,EAAE,UAAU;IACpBC,QAAQ,EAAE,UAAU;IACpBC,SAAS,EAAE,UAAU;IACrBC,QAAQ,EAAE,UAAU;IAGpBC,MAAM,EAAE,WAAW;IACnBC,SAAS,EAAE,WAAW;IACtBC,QAAQ,EAAE,WAAW;IAGrBC,QAAQ,EAAE,UAAU;IAGpBI,IAAI,EAAE,MAAM;IACZC,MAAM,EAAE,QAAQ;IAGhBJ,WAAW,EAAE,MAAM;IACnBC,SAAS,EAAE,MAAM;IACjBC,KAAK,EAAE;EACT,CAAC;EAED,QAAAc,kBAAA,GAAOC,aAAa,CAACT,GAAG,CAAC,YAAAQ,kBAAA,GAAI,MAAM;AACrC","ignoreList":[]}