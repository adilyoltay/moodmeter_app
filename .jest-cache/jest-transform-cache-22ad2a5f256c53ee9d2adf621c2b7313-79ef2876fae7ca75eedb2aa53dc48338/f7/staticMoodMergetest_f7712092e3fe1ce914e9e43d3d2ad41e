e51a100b2fdd3c725e7d3510411a5e15
_getJestObj().mock("../../services/moodDeletionCache");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _staticMoodMerge = require("../../services/staticMoodMerge");
var _moodDeletionCache = require("../../services/moodDeletionCache");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Static Mood Merge - P0 Deduplication Fixes', function () {
  var mockUserId = 'test-user-123';
  beforeEach(function () {
    jest.clearAllMocks();
    _moodDeletionCache.moodDeletionCache.getRecentlyDeletedIds.mockResolvedValue([]);
  });
  describe('Content Hash Deduplication', function () {
    it('should deduplicate entries with same content_hash', (0, _asyncToGenerator2.default)(function* () {
      var localEntry = {
        id: 'mood_local_123',
        local_id: 'mood_local_123',
        content_hash: 'abc123hash',
        user_id: mockUserId,
        mood_score: 75,
        energy_level: 80,
        anxiety_level: 30,
        notes: 'Test entry',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T12:00:00Z',
        synced: false,
        sync_attempts: 0
      };
      var remoteEntry = {
        id: 'uuid-remote-456',
        remote_id: 'uuid-remote-456',
        content_hash: 'abc123hash',
        user_id: mockUserId,
        mood_score: 75,
        energy_level: 80,
        anxiety_level: 30,
        notes: 'Test entry',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T12:00:00Z',
        synced: true,
        sync_attempts: 0
      };
      var result = yield (0, _staticMoodMerge.intelligentMoodMerge)([localEntry], [remoteEntry], mockUserId);
      expect(result.mergedEntries).toHaveLength(1);
      expect(result.mergedEntries[0].id).toBe('uuid-remote-456');
      expect(result.stats.duplicatesRemoved).toBe(1);
    }));
    it('should deduplicate by remote_id mapping', (0, _asyncToGenerator2.default)(function* () {
      var localEntry = {
        id: 'mood_local_123',
        local_id: 'mood_local_123',
        remote_id: 'uuid-shared-789',
        user_id: mockUserId,
        mood_score: 75,
        energy_level: 80,
        anxiety_level: 30,
        notes: 'Test entry',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T12:00:00Z',
        synced: true,
        sync_attempts: 0
      };
      var remoteEntry = {
        id: 'uuid-shared-789',
        remote_id: 'uuid-shared-789',
        user_id: mockUserId,
        mood_score: 75,
        energy_level: 80,
        anxiety_level: 30,
        notes: 'Test entry',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T12:00:00Z',
        synced: true,
        sync_attempts: 0
      };
      var result = yield (0, _staticMoodMerge.intelligentMoodMerge)([localEntry], [remoteEntry], mockUserId);
      expect(result.mergedEntries).toHaveLength(1);
      expect(result.mergedEntries[0].id).toBe('uuid-shared-789');
      expect(result.stats.duplicatesRemoved).toBe(0);
    }));
  });
  describe('Deletion Cache Integration', function () {
    it('should filter out recently deleted entries', (0, _asyncToGenerator2.default)(function* () {
      var deletedId = 'deleted-entry-123';
      _moodDeletionCache.moodDeletionCache.getRecentlyDeletedIds.mockResolvedValue([deletedId]);
      var localEntry = {
        id: deletedId,
        user_id: mockUserId,
        mood_score: 50,
        energy_level: 50,
        anxiety_level: 50,
        notes: 'Should be filtered',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T12:00:00Z',
        synced: false,
        sync_attempts: 0
      };
      var remoteEntry = {
        id: deletedId,
        user_id: mockUserId,
        mood_score: 50,
        energy_level: 50,
        anxiety_level: 50,
        notes: 'Should be filtered',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T12:00:00Z',
        synced: true,
        sync_attempts: 0
      };
      var result = yield (0, _staticMoodMerge.intelligentMoodMerge)([localEntry], [remoteEntry], mockUserId);
      expect(result.mergedEntries).toHaveLength(0);
      expect(_moodDeletionCache.moodDeletionCache.getRecentlyDeletedIds).toHaveBeenCalledWith(mockUserId);
    }));
    it('should filter by local_id and remote_id mappings in deletion cache', (0, _asyncToGenerator2.default)(function* () {
      var deletedLocalId = 'mood_deleted_456';
      _moodDeletionCache.moodDeletionCache.getRecentlyDeletedIds.mockResolvedValue([deletedLocalId]);
      var localEntry = {
        id: 'some-other-id',
        local_id: deletedLocalId,
        user_id: mockUserId,
        mood_score: 60,
        energy_level: 60,
        anxiety_level: 40,
        notes: 'Should be filtered by local_id',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T12:00:00Z',
        synced: false,
        sync_attempts: 0
      };
      var result = yield (0, _staticMoodMerge.intelligentMoodMerge)([localEntry], [], mockUserId);
      expect(result.mergedEntries).toHaveLength(0);
    }));
  });
  describe('Edge Cases', function () {
    it('should handle entries without content_hash gracefully', (0, _asyncToGenerator2.default)(function* () {
      var entryWithoutHash = {
        id: 'no-hash-entry',
        user_id: mockUserId,
        mood_score: 70,
        energy_level: 70,
        anxiety_level: 20,
        notes: 'No content hash',
        triggers: ['work'],
        activities: ['exercise'],
        timestamp: '2025-08-30T14:00:00Z',
        synced: false,
        sync_attempts: 0
      };
      var result = yield (0, _staticMoodMerge.intelligentMoodMerge)([entryWithoutHash], [], mockUserId);
      expect(result.mergedEntries).toHaveLength(1);
      expect(result.mergedEntries[0].id).toBe('no-hash-entry');
    }));
    it('should handle missing userId gracefully', (0, _asyncToGenerator2.default)(function* () {
      var entry = {
        id: 'test-entry',
        user_id: mockUserId,
        mood_score: 80,
        energy_level: 75,
        anxiety_level: 25,
        notes: 'Test without userId',
        triggers: [],
        activities: [],
        timestamp: '2025-08-30T15:00:00Z',
        synced: false,
        sync_attempts: 0
      };
      var result = yield (0, _staticMoodMerge.intelligentMoodMerge)([entry], [], undefined);
      expect(result.mergedEntries).toHaveLength(1);
      expect(_moodDeletionCache.moodDeletionCache.getRecentlyDeletedIds).not.toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,