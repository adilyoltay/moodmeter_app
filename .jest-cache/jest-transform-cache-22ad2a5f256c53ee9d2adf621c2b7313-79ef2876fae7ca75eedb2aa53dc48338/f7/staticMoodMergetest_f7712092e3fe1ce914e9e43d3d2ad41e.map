{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_staticMoodMerge","_moodDeletionCache","_require","jest","describe","mockUserId","beforeEach","clearAllMocks","moodDeletionCache","getRecentlyDeletedIds","mockResolvedValue","it","default","localEntry","id","local_id","content_hash","user_id","mood_score","energy_level","anxiety_level","notes","triggers","activities","timestamp","synced","sync_attempts","remoteEntry","remote_id","result","intelligentMoodMerge","expect","mergedEntries","toHaveLength","toBe","stats","duplicatesRemoved","deletedId","toHaveBeenCalledWith","deletedLocalId","entryWithoutHash","entry","undefined","not","toHaveBeenCalled"],"sources":["staticMoodMerge.test.ts"],"sourcesContent":["/**\n * Static Mood Merge - Unit Tests\n * Tests deduplication logic and deletion cache integration\n */\n\nimport { intelligentMoodMerge } from '@/services/staticMoodMerge';\nimport { moodDeletionCache } from '@/services/moodDeletionCache';\nimport type { MoodEntry } from '@/services/moodTrackingService';\n\n// Mock deletion cache\njest.mock('@/services/moodDeletionCache');\n\ndescribe('Static Mood Merge - P0 Deduplication Fixes', () => {\n  const mockUserId = 'test-user-123';\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    (moodDeletionCache.getRecentlyDeletedIds as jest.Mock).mockResolvedValue([]);\n  });\n\n  describe('Content Hash Deduplication', () => {\n    it('should deduplicate entries with same content_hash', async () => {\n      const localEntry: MoodEntry = {\n        id: 'mood_local_123',\n        local_id: 'mood_local_123',\n        content_hash: 'abc123hash',\n        user_id: mockUserId,\n        mood_score: 75,\n        energy_level: 80,\n        anxiety_level: 30,\n        notes: 'Test entry',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T12:00:00Z',\n        synced: false,\n        sync_attempts: 0\n      };\n\n      const remoteEntry: MoodEntry = {\n        id: 'uuid-remote-456',\n        remote_id: 'uuid-remote-456',\n        content_hash: 'abc123hash', // Same content hash!\n        user_id: mockUserId,\n        mood_score: 75,\n        energy_level: 80,\n        anxiety_level: 30,\n        notes: 'Test entry',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T12:00:00Z',\n        synced: true,\n        sync_attempts: 0\n      };\n\n      const result = await intelligentMoodMerge([localEntry], [remoteEntry], mockUserId);\n\n      expect(result.mergedEntries).toHaveLength(1);\n      expect(result.mergedEntries[0].id).toBe('uuid-remote-456'); // Remote wins\n      expect(result.stats.duplicatesRemoved).toBe(1);\n    });\n\n    it('should deduplicate by remote_id mapping', async () => {\n      const localEntry: MoodEntry = {\n        id: 'mood_local_123',\n        local_id: 'mood_local_123',\n        remote_id: 'uuid-shared-789', // Mapped to remote!\n        user_id: mockUserId,\n        mood_score: 75,\n        energy_level: 80,\n        anxiety_level: 30,\n        notes: 'Test entry',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T12:00:00Z',\n        synced: true,\n        sync_attempts: 0\n      };\n\n      const remoteEntry: MoodEntry = {\n        id: 'uuid-shared-789', // Same as local's remote_id\n        remote_id: 'uuid-shared-789',\n        user_id: mockUserId,\n        mood_score: 75,\n        energy_level: 80,\n        anxiety_level: 30,\n        notes: 'Test entry',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T12:00:00Z',\n        synced: true,\n        sync_attempts: 0\n      };\n\n      const result = await intelligentMoodMerge([localEntry], [remoteEntry], mockUserId);\n\n      expect(result.mergedEntries).toHaveLength(1);\n      expect(result.mergedEntries[0].id).toBe('uuid-shared-789');\n      expect(result.stats.duplicatesRemoved).toBe(0); // Skipped via mapping, not duplicate removal\n    });\n  });\n\n  describe('Deletion Cache Integration', () => {\n    it('should filter out recently deleted entries', async () => {\n      const deletedId = 'deleted-entry-123';\n      (moodDeletionCache.getRecentlyDeletedIds as jest.Mock).mockResolvedValue([deletedId]);\n\n      const localEntry: MoodEntry = {\n        id: deletedId, // This was recently deleted\n        user_id: mockUserId,\n        mood_score: 50,\n        energy_level: 50,\n        anxiety_level: 50,\n        notes: 'Should be filtered',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T12:00:00Z',\n        synced: false,\n        sync_attempts: 0\n      };\n\n      const remoteEntry: MoodEntry = {\n        id: deletedId, // Same deleted ID\n        user_id: mockUserId,\n        mood_score: 50,\n        energy_level: 50,\n        anxiety_level: 50,\n        notes: 'Should be filtered',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T12:00:00Z',\n        synced: true,\n        sync_attempts: 0\n      };\n\n      const result = await intelligentMoodMerge([localEntry], [remoteEntry], mockUserId);\n\n      expect(result.mergedEntries).toHaveLength(0); // Both filtered out\n      expect(moodDeletionCache.getRecentlyDeletedIds).toHaveBeenCalledWith(mockUserId);\n    });\n\n    it('should filter by local_id and remote_id mappings in deletion cache', async () => {\n      const deletedLocalId = 'mood_deleted_456';\n      (moodDeletionCache.getRecentlyDeletedIds as jest.Mock).mockResolvedValue([deletedLocalId]);\n\n      const localEntry: MoodEntry = {\n        id: 'some-other-id',\n        local_id: deletedLocalId, // This local_id was deleted\n        user_id: mockUserId,\n        mood_score: 60,\n        energy_level: 60,\n        anxiety_level: 40,\n        notes: 'Should be filtered by local_id',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T12:00:00Z',\n        synced: false,\n        sync_attempts: 0\n      };\n\n      const result = await intelligentMoodMerge([localEntry], [], mockUserId);\n\n      expect(result.mergedEntries).toHaveLength(0); // Filtered by local_id match\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle entries without content_hash gracefully', async () => {\n      const entryWithoutHash: MoodEntry = {\n        id: 'no-hash-entry',\n        user_id: mockUserId,\n        mood_score: 70,\n        energy_level: 70,\n        anxiety_level: 20,\n        notes: 'No content hash',\n        triggers: ['work'],\n        activities: ['exercise'],\n        timestamp: '2025-08-30T14:00:00Z',\n        synced: false,\n        sync_attempts: 0\n        // content_hash missing\n      };\n\n      const result = await intelligentMoodMerge([entryWithoutHash], [], mockUserId);\n\n      expect(result.mergedEntries).toHaveLength(1);\n      expect(result.mergedEntries[0].id).toBe('no-hash-entry');\n    });\n\n    it('should handle missing userId gracefully', async () => {\n      const entry: MoodEntry = {\n        id: 'test-entry',\n        user_id: mockUserId,\n        mood_score: 80,\n        energy_level: 75,\n        anxiety_level: 25,\n        notes: 'Test without userId',\n        triggers: [],\n        activities: [],\n        timestamp: '2025-08-30T15:00:00Z',\n        synced: false,\n        sync_attempts: 0\n      };\n\n      const result = await intelligentMoodMerge([entry], [], undefined); // No userId\n\n      expect(result.mergedEntries).toHaveLength(1);\n      expect(moodDeletionCache.getRecentlyDeletedIds).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"mappings":"AAUAA,WAAA,GAAKC,IAAI,mCAA+B,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAL1C,IAAAE,gBAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AAAiE,SAAAH,YAAA;EAAA,IAAAO,QAAA,GAAAJ,OAAA;IAAAK,IAAA,GAAAD,QAAA,CAAAC,IAAA;EAAAR,WAAA,YAAAA,YAAA;IAAA,OAAAQ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAMjEC,QAAQ,CAAC,4CAA4C,EAAE,YAAM;EAC3D,IAAMC,UAAU,GAAG,eAAe;EAElCC,UAAU,CAAC,YAAM;IACfH,IAAI,CAACI,aAAa,CAAC,CAAC;IACnBC,oCAAiB,CAACC,qBAAqB,CAAeC,iBAAiB,CAAC,EAAE,CAAC;EAC9E,CAAC,CAAC;EAEFN,QAAQ,CAAC,4BAA4B,EAAE,YAAM;IAC3CO,EAAE,CAAC,mDAAmD,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;MAClE,IAAMC,UAAqB,GAAG;QAC5BC,EAAE,EAAE,gBAAgB;QACpBC,QAAQ,EAAE,gBAAgB;QAC1BC,YAAY,EAAE,YAAY;QAC1BC,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,YAAY;QACnBC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMC,WAAsB,GAAG;QAC7Bb,EAAE,EAAE,iBAAiB;QACrBc,SAAS,EAAE,iBAAiB;QAC5BZ,YAAY,EAAE,YAAY;QAC1BC,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,YAAY;QACnBC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMG,MAAM,SAAS,IAAAC,qCAAoB,EAAC,CAACjB,UAAU,CAAC,EAAE,CAACc,WAAW,CAAC,EAAEtB,UAAU,CAAC;MAElF0B,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;MAC5CF,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,CAAClB,EAAE,CAAC,CAACoB,IAAI,CAAC,iBAAiB,CAAC;MAC1DH,MAAM,CAACF,MAAM,CAACM,KAAK,CAACC,iBAAiB,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC,EAAC;IAEFvB,EAAE,CAAC,yCAAyC,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;MACxD,IAAMC,UAAqB,GAAG;QAC5BC,EAAE,EAAE,gBAAgB;QACpBC,QAAQ,EAAE,gBAAgB;QAC1Ba,SAAS,EAAE,iBAAiB;QAC5BX,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,YAAY;QACnBC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMC,WAAsB,GAAG;QAC7Bb,EAAE,EAAE,iBAAiB;QACrBc,SAAS,EAAE,iBAAiB;QAC5BX,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,YAAY;QACnBC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMG,MAAM,SAAS,IAAAC,qCAAoB,EAAC,CAACjB,UAAU,CAAC,EAAE,CAACc,WAAW,CAAC,EAAEtB,UAAU,CAAC;MAElF0B,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;MAC5CF,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,CAAClB,EAAE,CAAC,CAACoB,IAAI,CAAC,iBAAiB,CAAC;MAC1DH,MAAM,CAACF,MAAM,CAACM,KAAK,CAACC,iBAAiB,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9B,QAAQ,CAAC,4BAA4B,EAAE,YAAM;IAC3CO,EAAE,CAAC,4CAA4C,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;MAC3D,IAAMyB,SAAS,GAAG,mBAAmB;MACpC7B,oCAAiB,CAACC,qBAAqB,CAAeC,iBAAiB,CAAC,CAAC2B,SAAS,CAAC,CAAC;MAErF,IAAMxB,UAAqB,GAAG;QAC5BC,EAAE,EAAEuB,SAAS;QACbpB,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,oBAAoB;QAC3BC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMC,WAAsB,GAAG;QAC7Bb,EAAE,EAAEuB,SAAS;QACbpB,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,oBAAoB;QAC3BC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMG,MAAM,SAAS,IAAAC,qCAAoB,EAAC,CAACjB,UAAU,CAAC,EAAE,CAACc,WAAW,CAAC,EAAEtB,UAAU,CAAC;MAElF0B,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;MAC5CF,MAAM,CAACvB,oCAAiB,CAACC,qBAAqB,CAAC,CAAC6B,oBAAoB,CAACjC,UAAU,CAAC;IAClF,CAAC,EAAC;IAEFM,EAAE,CAAC,oEAAoE,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;MACnF,IAAM2B,cAAc,GAAG,kBAAkB;MACxC/B,oCAAiB,CAACC,qBAAqB,CAAeC,iBAAiB,CAAC,CAAC6B,cAAc,CAAC,CAAC;MAE1F,IAAM1B,UAAqB,GAAG;QAC5BC,EAAE,EAAE,eAAe;QACnBC,QAAQ,EAAEwB,cAAc;QACxBtB,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,gCAAgC;QACvCC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMG,MAAM,SAAS,IAAAC,qCAAoB,EAAC,CAACjB,UAAU,CAAC,EAAE,EAAE,EAAER,UAAU,CAAC;MAEvE0B,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;IAC9C,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF7B,QAAQ,CAAC,YAAY,EAAE,YAAM;IAC3BO,EAAE,CAAC,uDAAuD,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;MACtE,IAAM4B,gBAA2B,GAAG;QAClC1B,EAAE,EAAE,eAAe;QACnBG,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,iBAAiB;QACxBC,QAAQ,EAAE,CAAC,MAAM,CAAC;QAClBC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE;MAEjB,CAAC;MAED,IAAMG,MAAM,SAAS,IAAAC,qCAAoB,EAAC,CAACU,gBAAgB,CAAC,EAAE,EAAE,EAAEnC,UAAU,CAAC;MAE7E0B,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;MAC5CF,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,CAAClB,EAAE,CAAC,CAACoB,IAAI,CAAC,eAAe,CAAC;IAC1D,CAAC,EAAC;IAEFvB,EAAE,CAAC,yCAAyC,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;MACxD,IAAM6B,KAAgB,GAAG;QACvB3B,EAAE,EAAE,YAAY;QAChBG,OAAO,EAAEZ,UAAU;QACnBa,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,qBAAqB;QAC5BC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,sBAAsB;QACjCC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMG,MAAM,SAAS,IAAAC,qCAAoB,EAAC,CAACW,KAAK,CAAC,EAAE,EAAE,EAAEC,SAAS,CAAC;MAEjEX,MAAM,CAACF,MAAM,CAACG,aAAa,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;MAC5CF,MAAM,CAACvB,oCAAiB,CAACC,qBAAqB,CAAC,CAACkC,GAAG,CAACC,gBAAgB,CAAC,CAAC;IACxE,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}