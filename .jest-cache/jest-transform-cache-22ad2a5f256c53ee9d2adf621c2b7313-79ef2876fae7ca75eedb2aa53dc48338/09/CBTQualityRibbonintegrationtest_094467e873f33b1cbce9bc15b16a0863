4d8197030c6b8615b931b0e8c0d3a237
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    getAllKeys: jest.fn(),
    multiGet: jest.fn(),
    multiSet: jest.fn(),
    multiRemove: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    useRouter: jest.fn(function () {
      return {
        push: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    Stack: {
      Screen: 'Stack.Screen'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _seedData = require("../fixtures/seedData");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CBT Page - Quality Ribbon Integration', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    yield (0, _seedData.cleanupSeeds)(_seedData.TEST_ENV.SEED_USER_ID);
  }));
  afterEach((0, _asyncToGenerator2.default)(function* () {
    yield (0, _seedData.cleanupSeeds)(_seedData.TEST_ENV.SEED_USER_ID);
  }));
  describe('[QR:cbt:fresh] Fresh Pipeline Results', function () {
    it('[QR:cbt:fresh] should display Fresh source badge with CBT records', (0, _asyncToGenerator2.default)(function* () {
      var _freshResult$qualityM, _freshResult$qualityM2, _freshResult$qualityM3, _freshResult$qualityM4;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 5, {
        distortions: ['catastrophizing', 'all-or-nothing', 'mind-reading']
      });
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'high', 'cbt');
      expect((_freshResult$qualityM = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM.source).toBe('unified');
      expect((_freshResult$qualityM2 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM2.freshnessMs).toBe(0);
      expect((_freshResult$qualityM3 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM3.sampleSize).toBe(12);
      expect((_freshResult$qualityM4 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM4.quality).toBe('high');
    }));
    it('[QR:cbt:fresh] should trigger invalidation for new thought record', (0, _asyncToGenerator2.default)(function* () {
      var _freshResult$qualityM5, _freshResult$qualityM6;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 3);
      var cacheInvalidated = false;
      var mockInvalidation = function mockInvalidation() {
        cacheInvalidated = true;
      };
      mockInvalidation();
      expect(cacheInvalidated).toBe(true);
      var freshResult = (0, _seedData.createMockPipelineResult)('unified', 'medium', 'cbt');
      expect((_freshResult$qualityM5 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM5.source).toBe('unified');
      expect((_freshResult$qualityM6 = freshResult.qualityMetadata) == null ? void 0 : _freshResult$qualityM6.freshnessMs).toBe(0);
    }));
  });
  describe('[QR:cbt:cache] Cache Behavior & TTL Transitions', function () {
    it('[QR:cbt:cache] should transition from Fresh to Cache after TTL expires', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 4);
      var freshMeta = {
        source: 'unified',
        freshnessMs: 0,
        processedAt: Date.now()
      };
      expect(freshMeta.source).toBe('unified');
      expect(freshMeta.freshnessMs).toBeLessThan(_seedData.TEST_ENV.TTL_MS);
      var cachedMeta = {
        source: 'cache',
        freshnessMs: _seedData.TEST_ENV.TTL_MS + 1000,
        processedAt: Date.now() - _seedData.TEST_ENV.TTL_MS - 1000
      };
      expect(cachedMeta.source).toBe('cache');
      expect(cachedMeta.freshnessMs).toBeGreaterThan(_seedData.TEST_ENV.TTL_MS);
    }));
    it('[QR:cbt:cache] should show Cache badge for cached CBT analysis', (0, _asyncToGenerator2.default)(function* () {
      var _cachedResult$quality, _cachedResult$quality2, _cachedResult$quality3;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 6, {
        distortions: ['overgeneralization', 'personalization']
      });
      var cachedResult = (0, _seedData.createMockPipelineResult)('cache', 'high', 'cbt');
      expect((_cachedResult$quality = cachedResult.qualityMetadata) == null ? void 0 : _cachedResult$quality.source).toBe('cache');
      expect((_cachedResult$quality2 = cachedResult.qualityMetadata) == null ? void 0 : _cachedResult$quality2.quality).toBe('high');
      expect((_cachedResult$quality3 = cachedResult.qualityMetadata) == null ? void 0 : _cachedResult$quality3.freshnessMs).toBe(1500);
    }));
  });
  describe('[QR:cbt:hidden] Quality Ribbon Hiding Conditions', function () {
    it('[QR:cbt:hidden] should hide when no CBT records provided', (0, _asyncToGenerator2.default)(function* () {
      var suggestion = {
        content: 'CBT suggestion text',
        meta: null
      };
      var shouldShowRibbon = suggestion.meta !== null && suggestion.meta !== undefined;
      expect(shouldShowRibbon).toBe(false);
    }));
    it('[QR:cbt:hidden] should hide when CBT pipeline processing fails', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 2);
      var error = null;
      try {
        throw new Error('CBT pipeline processing failed');
      } catch (e) {
        error = e;
      }
      var shouldShowRibbon = error === null;
      expect(shouldShowRibbon).toBe(false);
      expect(error).toBeTruthy();
    }));
    it('[QR:cbt:hidden] should hide when insufficient thought records', (0, _asyncToGenerator2.default)(function* () {
      var _lowQualityResult$qua, _lowQualityResult$qua2, _lowQualityResult$qua3;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 1);
      var lowQualityResult = (0, _seedData.createMockPipelineResult)('unified', 'low', 'cbt');
      expect((_lowQualityResult$qua = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua.sampleSize).toBe(3);
      expect((_lowQualityResult$qua2 = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua2.quality).toBe('low');
      var qualityThreshold = 2;
      var shouldHide = (((_lowQualityResult$qua3 = lowQualityResult.qualityMetadata) == null ? void 0 : _lowQualityResult$qua3.sampleSize) || 0) <= qualityThreshold;
      expect(shouldHide).toBe(false);
    }));
  });
  describe('[QR:cbt:quality] Quality Level Tests', function () {
    var qualityScenarios = [{
      scenario: 'high',
      expectedQuality: 'high',
      recordCount: 8,
      expectedSample: 12
    }, {
      scenario: 'medium',
      expectedQuality: 'medium',
      recordCount: 5,
      expectedSample: 7
    }, {
      scenario: 'low',
      expectedQuality: 'low',
      recordCount: 2,
      expectedSample: 3
    }];
    qualityScenarios.forEach(function (_ref0) {
      var scenario = _ref0.scenario,
        expectedQuality = _ref0.expectedQuality,
        recordCount = _ref0.recordCount,
        expectedSample = _ref0.expectedSample;
      it(`[QR:cbt:${expectedQuality}] should show ${expectedQuality} quality for ${recordCount} records`, (0, _asyncToGenerator2.default)(function* () {
        var _result$qualityMetada, _result$qualityMetada2, _result$qualityMetada3;
        yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, recordCount);
        var result = (0, _seedData.createMockPipelineResult)('unified', scenario, 'cbt');
        expect((_result$qualityMetada = result.qualityMetadata) == null ? void 0 : _result$qualityMetada.quality).toBe(expectedQuality);
        expect((_result$qualityMetada2 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada2.sampleSize).toBe(expectedSample);
        expect((_result$qualityMetada3 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada3.source).toBe('unified');
      }));
    });
  });
  describe('[QR:cbt:distortions] Cognitive Distortion Tests', function () {
    var distortionScenarios = [{
      distortions: ['catastrophizing', 'all-or-nothing'],
      description: 'common distortions',
      count: 4
    }, {
      distortions: ['mind-reading', 'personalization', 'overgeneralization'],
      description: 'complex distortions',
      count: 6
    }, {
      distortions: ['labeling', 'should-statements'],
      description: 'specific patterns',
      count: 3
    }];
    distortionScenarios.forEach(function (_ref10) {
      var distortions = _ref10.distortions,
        description = _ref10.description,
        count = _ref10.count;
      it(`[QR:cbt:distortions] should process ${description} (${distortions.join(', ')})`, (0, _asyncToGenerator2.default)(function* () {
        var _result$qualityMetada4, _result$qualityMetada5;
        yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, count, {
          distortions: distortions
        });
        var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'cbt');
        expect((_result$qualityMetada4 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada4.source).toBe('unified');
        expect((_result$qualityMetada5 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada5.quality).toBe('high');
        var distortionData = {
          distortionTypes: distortions,
          recordCount: count,
          diversity: distortions.length
        };
        expect(distortionData.distortionTypes).toEqual(distortions);
        expect(distortionData.recordCount).toBe(count);
        expect(distortionData.diversity).toBe(distortions.length);
      }));
    });
  });
  describe('[QR:cbt:mood] Mood Improvement Tracking', function () {
    it('[QR:cbt:high] should show high quality for consistent mood improvement', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada6, _result$qualityMetada7, _result$qualityMetada8;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 8, {
        distortions: ['catastrophizing', 'overgeneralization', 'mind-reading']
      });
      var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'cbt');
      expect((_result$qualityMetada6 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada6.quality).toBe('high');
      expect((_result$qualityMetada7 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada7.confidence).toBe(0.85);
      expect((_result$qualityMetada8 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada8.dataQuality).toBe(0.89);
      expect(result.insights.therapeutic).toBeDefined();
      expect(Array.isArray(result.insights.therapeutic)).toBe(true);
    }));
    it('[QR:cbt:medium] should show medium quality for moderate progress', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada9, _result$qualityMetada0, _result$qualityMetada1;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 4);
      var result = (0, _seedData.createMockPipelineResult)('unified', 'medium', 'cbt');
      expect((_result$qualityMetada9 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada9.quality).toBe('medium');
      expect((_result$qualityMetada0 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada0.confidence).toBe(0.68);
      expect((_result$qualityMetada1 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada1.dataQuality).toBe(0.74);
    }));
    it('[QR:cbt:low] should show low quality for limited data', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada10, _result$qualityMetada11, _result$qualityMetada12;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 2);
      var result = (0, _seedData.createMockPipelineResult)('unified', 'low', 'cbt');
      expect((_result$qualityMetada10 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada10.quality).toBe('low');
      expect((_result$qualityMetada11 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada11.confidence).toBe(0.42);
      expect((_result$qualityMetada12 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada12.dataQuality).toBe(0.55);
    }));
  });
  describe('[QR:cbt:testmode] Test Mode Integration', function () {
    it('[QR:cbt:testmode] should respect TEST_TTL_MS for CBT cache', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 3);
      expect(_seedData.TEST_ENV.MODE).toBe(true);
      expect(_seedData.TEST_ENV.TTL_MS).toBe(5000);
      var testTTL = _seedData.TEST_ENV.MODE ? _seedData.TEST_ENV.TTL_MS : 3600000;
      expect(testTTL).toBe(5000);
      expect(testTTL).toBeLessThan(10000);
    }));
    it('[QR:cbt:testmode] should handle CBT pipeline stub mode', (0, _asyncToGenerator2.default)(function* () {
      var _result$qualityMetada13, _result$qualityMetada14, _result$qualityMetada15, _result2$qualityMetad;
      yield (0, _seedData.seedCBTRecords)(_seedData.TEST_ENV.SEED_USER_ID, 5);
      expect(_seedData.TEST_ENV.PIPELINE_STUB).toBe(true);
      var result = (0, _seedData.createMockPipelineResult)('unified', 'high', 'cbt');
      expect((_result$qualityMetada13 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada13.source).toBe('unified');
      expect((_result$qualityMetada14 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada14.quality).toBe('high');
      var result2 = (0, _seedData.createMockPipelineResult)('unified', 'high', 'cbt');
      expect((_result$qualityMetada15 = result.qualityMetadata) == null ? void 0 : _result$qualityMetada15.quality).toBe((_result2$qualityMetad = result2.qualityMetadata) == null ? void 0 : _result2$qualityMetad.quality);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,