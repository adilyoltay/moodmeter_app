{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","removeItem","clear","getAllKeys","multiGet","multiSet","multiRemove","useRouter","push","useLocalSearchParams","Stack","Screen","_interopRequireDefault","require","_asyncToGenerator2","_seedData","_require","describe","beforeEach","default","clearAllMocks","cleanupSeeds","TEST_ENV","SEED_USER_ID","afterEach","it","_freshResult$qualityM","_freshResult$qualityM2","_freshResult$qualityM3","_freshResult$qualityM4","seedCBTRecords","distortions","freshResult","createMockPipelineResult","expect","qualityMetadata","source","toBe","freshnessMs","sampleSize","quality","_freshResult$qualityM5","_freshResult$qualityM6","cacheInvalidated","mockInvalidation","freshMeta","processedAt","Date","now","toBeLessThan","TTL_MS","cachedMeta","toBeGreaterThan","_cachedResult$quality","_cachedResult$quality2","_cachedResult$quality3","cachedResult","suggestion","content","meta","shouldShowRibbon","undefined","error","Error","e","toBeTruthy","_lowQualityResult$qua","_lowQualityResult$qua2","_lowQualityResult$qua3","lowQualityResult","qualityThreshold","shouldHide","qualityScenarios","scenario","expectedQuality","recordCount","expectedSample","forEach","_ref0","_result$qualityMetada","_result$qualityMetada2","_result$qualityMetada3","result","distortionScenarios","description","count","_ref10","join","_result$qualityMetada4","_result$qualityMetada5","distortionData","distortionTypes","diversity","length","toEqual","_result$qualityMetada6","_result$qualityMetada7","_result$qualityMetada8","confidence","dataQuality","insights","therapeutic","toBeDefined","Array","isArray","_result$qualityMetada9","_result$qualityMetada0","_result$qualityMetada1","_result$qualityMetada10","_result$qualityMetada11","_result$qualityMetada12","MODE","testTTL","_result$qualityMetada13","_result$qualityMetada14","_result$qualityMetada15","_result2$qualityMetad","PIPELINE_STUB","result2"],"sources":["CBTQualityRibbon.integration.test.tsx"],"sourcesContent":["/**\n * ðŸ§ª Integration Tests - CBT Page Quality Ribbon\n * \n * Tests Fresh/Cache transitions, invalidation, and Quality Ribbon visibility\n * for CBT thought records with deterministic test mode.\n */\n\nimport type { ProvenanceSource, QualityLevel } from '@/features/ai/insights/insightRegistry';\nimport { \n  seedCBTRecords,\n  cleanupSeeds,\n  TEST_ENV,\n  createMockPipelineResult\n} from '../fixtures/seedData';\n\n// Mock dependencies\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  getAllKeys: jest.fn(),\n  multiGet: jest.fn(),\n  multiSet: jest.fn(),\n  multiRemove: jest.fn(),\n}));\n\njest.mock('expo-router', () => ({\n  useRouter: jest.fn(() => ({ push: jest.fn() })),\n  useLocalSearchParams: jest.fn(() => ({})),\n  Stack: { Screen: 'Stack.Screen' }\n}));\n\ndescribe('CBT Page - Quality Ribbon Integration', () => {\n  \n  beforeEach(async () => {\n    jest.clearAllMocks();\n    await cleanupSeeds(TEST_ENV.SEED_USER_ID);\n  });\n\n  afterEach(async () => {\n    await cleanupSeeds(TEST_ENV.SEED_USER_ID);\n  });\n\n  describe('[QR:cbt:fresh] Fresh Pipeline Results', () => {\n    it('[QR:cbt:fresh] should display Fresh source badge with CBT records', async () => {\n      // Seed CBT records: 5 thought records with cognitive distortions\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 5, {\n        distortions: ['catastrophizing', 'all-or-nothing', 'mind-reading']\n      });\n      \n      // Mock fresh pipeline result for CBT\n      const freshResult = createMockPipelineResult('unified', 'high', 'cbt');\n      \n      // Verify fresh source characteristics\n      expect(freshResult.qualityMetadata?.source).toBe('unified');\n      expect(freshResult.qualityMetadata?.freshnessMs).toBe(0); // Fresh = 0ms\n      expect(freshResult.qualityMetadata?.sampleSize).toBe(12); // High quality CBT\n      expect(freshResult.qualityMetadata?.quality).toBe('high');\n    });\n\n    it('[QR:cbt:fresh] should trigger invalidation for new thought record', async () => {\n      // Initial seed\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 3);\n      \n      // Simulate invalidation trigger\n      let cacheInvalidated = false;\n      const mockInvalidation = () => {\n        cacheInvalidated = true;\n      };\n      \n      // Simulate cbt_record_added event\n      mockInvalidation();\n      \n      expect(cacheInvalidated).toBe(true);\n      \n      // After invalidation, next result should be Fresh\n      const freshResult = createMockPipelineResult('unified', 'medium', 'cbt');\n      expect(freshResult.qualityMetadata?.source).toBe('unified');\n      expect(freshResult.qualityMetadata?.freshnessMs).toBe(0);\n    });\n  });\n\n  describe('[QR:cbt:cache] Cache Behavior & TTL Transitions', () => {\n    it('[QR:cbt:cache] should transition from Fresh to Cache after TTL expires', async () => {\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 4);\n      \n      // Initial state: Fresh\n      const freshMeta = {\n        source: 'unified' as ProvenanceSource,\n        freshnessMs: 0,\n        processedAt: Date.now()\n      };\n      \n      expect(freshMeta.source).toBe('unified');\n      expect(freshMeta.freshnessMs).toBeLessThan(TEST_ENV.TTL_MS);\n      \n      // After TTL expires: should become Cache\n      const cachedMeta = {\n        source: 'cache' as ProvenanceSource,\n        freshnessMs: TEST_ENV.TTL_MS + 1000,\n        processedAt: Date.now() - TEST_ENV.TTL_MS - 1000\n      };\n      \n      expect(cachedMeta.source).toBe('cache');\n      expect(cachedMeta.freshnessMs).toBeGreaterThan(TEST_ENV.TTL_MS);\n    });\n\n    it('[QR:cbt:cache] should show Cache badge for cached CBT analysis', async () => {\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 6, {\n        distortions: ['overgeneralization', 'personalization']\n      });\n      \n      // Mock cached result with specific age\n      const cachedResult = createMockPipelineResult('cache', 'high', 'cbt');\n      \n      expect(cachedResult.qualityMetadata?.source).toBe('cache');\n      expect(cachedResult.qualityMetadata?.quality).toBe('high');\n      expect(cachedResult.qualityMetadata?.freshnessMs).toBe(1500); // Cache freshness\n    });\n  });\n\n  describe('[QR:cbt:hidden] Quality Ribbon Hiding Conditions', () => {\n    it('[QR:cbt:hidden] should hide when no CBT records provided', async () => {\n      // No seed data - empty CBT\n      const suggestion = {\n        content: 'CBT suggestion text',\n        meta: null // No quality metadata\n      };\n      \n      const shouldShowRibbon = suggestion.meta !== null && suggestion.meta !== undefined;\n      \n      expect(shouldShowRibbon).toBe(false);\n    });\n\n    it('[QR:cbt:hidden] should hide when CBT pipeline processing fails', async () => {\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 2);\n      \n      let error = null;\n      \n      // Simulate pipeline failure\n      try {\n        throw new Error('CBT pipeline processing failed');\n      } catch (e) {\n        error = e;\n      }\n      \n      const shouldShowRibbon = error === null;\n      \n      expect(shouldShowRibbon).toBe(false);\n      expect(error).toBeTruthy();\n    });\n\n    it('[QR:cbt:hidden] should hide when insufficient thought records', async () => {\n      // Minimal CBT data\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 1); // Only 1 record\n      \n      // Very low quality should potentially hide ribbon\n      const lowQualityResult = createMockPipelineResult('unified', 'low', 'cbt');\n      \n      expect(lowQualityResult.qualityMetadata?.sampleSize).toBe(3); // Low quality threshold\n      expect(lowQualityResult.qualityMetadata?.quality).toBe('low');\n      \n      // Quality-based hiding logic\n      const qualityThreshold = 2;\n      const shouldHide = (lowQualityResult.qualityMetadata?.sampleSize || 0) <= qualityThreshold;\n      \n      expect(shouldHide).toBe(false); // 3 > 2, so still shows\n    });\n  });\n\n  describe('[QR:cbt:quality] Quality Level Tests', () => {\n    const qualityScenarios = [\n      { scenario: 'high', expectedQuality: 'high', recordCount: 8, expectedSample: 12 },\n      { scenario: 'medium', expectedQuality: 'medium', recordCount: 5, expectedSample: 7 },\n      { scenario: 'low', expectedQuality: 'low', recordCount: 2, expectedSample: 3 }\n    ] as const;\n\n    qualityScenarios.forEach(({ scenario, expectedQuality, recordCount, expectedSample }) => {\n      it(`[QR:cbt:${expectedQuality}] should show ${expectedQuality} quality for ${recordCount} records`, async () => {\n        await seedCBTRecords(TEST_ENV.SEED_USER_ID, recordCount);\n        \n        const result = createMockPipelineResult('unified', scenario, 'cbt');\n        \n        expect(result.qualityMetadata?.quality).toBe(expectedQuality);\n        expect(result.qualityMetadata?.sampleSize).toBe(expectedSample);\n        expect(result.qualityMetadata?.source).toBe('unified');\n      });\n    });\n  });\n\n  describe('[QR:cbt:distortions] Cognitive Distortion Tests', () => {\n    const distortionScenarios = [\n      { \n        distortions: ['catastrophizing', 'all-or-nothing'], \n        description: 'common distortions',\n        count: 4 \n      },\n      { \n        distortions: ['mind-reading', 'personalization', 'overgeneralization'], \n        description: 'complex distortions',\n        count: 6 \n      },\n      { \n        distortions: ['labeling', 'should-statements'], \n        description: 'specific patterns',\n        count: 3 \n      }\n    ];\n\n    distortionScenarios.forEach(({ distortions, description, count }) => {\n      it(`[QR:cbt:distortions] should process ${description} (${distortions.join(', ')})`, async () => {\n        await seedCBTRecords(TEST_ENV.SEED_USER_ID, count, { distortions });\n        \n        const result = createMockPipelineResult('unified', 'high', 'cbt');\n        \n        // Verify CBT-specific analytics are processed\n        expect(result.qualityMetadata?.source).toBe('unified');\n        expect(result.qualityMetadata?.quality).toBe('high');\n        \n        // In real implementation, distortions would influence quality\n        const distortionData = {\n          distortionTypes: distortions,\n          recordCount: count,\n          diversity: distortions.length\n        };\n        \n        expect(distortionData.distortionTypes).toEqual(distortions);\n        expect(distortionData.recordCount).toBe(count);\n        expect(distortionData.diversity).toBe(distortions.length);\n      });\n    });\n  });\n\n  describe('[QR:cbt:mood] Mood Improvement Tracking', () => {\n    it('[QR:cbt:high] should show high quality for consistent mood improvement', async () => {\n      // Seed CBT records that show mood improvement patterns\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 8, {\n        distortions: ['catastrophizing', 'overgeneralization', 'mind-reading']\n      });\n      \n      const result = createMockPipelineResult('unified', 'high', 'cbt');\n      \n      // High quality CBT should indicate good therapeutic progress\n      expect(result.qualityMetadata?.quality).toBe('high');\n      expect(result.qualityMetadata?.confidence).toBe(0.85);\n      expect(result.qualityMetadata?.dataQuality).toBe(0.89);\n      \n      // Verify therapeutic insights are present\n      expect(result.insights.therapeutic).toBeDefined();\n      expect(Array.isArray(result.insights.therapeutic)).toBe(true);\n    });\n\n    it('[QR:cbt:medium] should show medium quality for moderate progress', async () => {\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 4);\n      \n      const result = createMockPipelineResult('unified', 'medium', 'cbt');\n      \n      expect(result.qualityMetadata?.quality).toBe('medium');\n      expect(result.qualityMetadata?.confidence).toBe(0.68);\n      expect(result.qualityMetadata?.dataQuality).toBe(0.74);\n    });\n\n    it('[QR:cbt:low] should show low quality for limited data', async () => {\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 2);\n      \n      const result = createMockPipelineResult('unified', 'low', 'cbt');\n      \n      expect(result.qualityMetadata?.quality).toBe('low');\n      expect(result.qualityMetadata?.confidence).toBe(0.42);\n      expect(result.qualityMetadata?.dataQuality).toBe(0.55);\n    });\n  });\n\n  describe('[QR:cbt:testmode] Test Mode Integration', () => {\n    it('[QR:cbt:testmode] should respect TEST_TTL_MS for CBT cache', async () => {\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 3);\n      \n      expect(TEST_ENV.MODE).toBe(true);\n      expect(TEST_ENV.TTL_MS).toBe(5000);\n      \n      // CBT cache should use test TTL\n      const testTTL = TEST_ENV.MODE ? TEST_ENV.TTL_MS : 3600000;\n      expect(testTTL).toBe(5000);\n      expect(testTTL).toBeLessThan(10000); // Faster testing\n    });\n\n    it('[QR:cbt:testmode] should handle CBT pipeline stub mode', async () => {\n      await seedCBTRecords(TEST_ENV.SEED_USER_ID, 5);\n      \n      expect(TEST_ENV.PIPELINE_STUB).toBe(true);\n      \n      // In stub mode, pipeline should return deterministic results\n      const result = createMockPipelineResult('unified', 'high', 'cbt');\n      \n      expect(result.qualityMetadata?.source).toBe('unified');\n      expect(result.qualityMetadata?.quality).toBe('high');\n      \n      // Stub mode ensures consistent results across test runs\n      const result2 = createMockPipelineResult('unified', 'high', 'cbt');\n      expect(result.qualityMetadata?.quality).toBe(result2.qualityMetadata?.quality);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}