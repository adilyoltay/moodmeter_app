f23c679fe8e794128a2cbb9c5aafca39
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
describe('Quality Ribbon System - Smoke Tests', function () {
  it('should have correct type definitions', function () {
    expect(function () {
      var types = require("../../features/ai/insights/insightRegistry");
      expect(typeof types.estimateQualityLevel).toBe('function');
      expect(typeof types.mapUnifiedResultToRegistryItems).toBe('function');
    }).not.toThrow();
  });
  it('should calculate quality levels correctly', function () {
    var _require = require("../../features/ai/insights/insightRegistry"),
      estimateQualityLevel = _require.estimateQualityLevel;
    var high = estimateQualityLevel({
      confidence: 0.9,
      sampleSize: 15,
      dataQuality: 0.85,
      freshnessMs: 5 * 60 * 1000
    });
    expect(high).toBe('high');
    var medium = estimateQualityLevel({
      confidence: 0.7,
      sampleSize: 5,
      dataQuality: 0.75
    });
    expect(medium).toBe('medium');
    var low = estimateQualityLevel({
      confidence: 0.4,
      sampleSize: 2,
      dataQuality: 0.5
    });
    expect(low).toBe('low');
  });
  it('should map provenance sources correctly', function () {
    var _require2 = require("../../features/ai/insights/insightRegistry"),
      mapMetadataSourceToProvenance = _require2.mapMetadataSourceToProvenance;
    expect(mapMetadataSourceToProvenance('fresh')).toBe('unified');
    expect(mapMetadataSourceToProvenance('cache')).toBe('cache');
    expect(mapMetadataSourceToProvenance('heuristic')).toBe('heuristic');
    expect(mapMetadataSourceToProvenance('unknown')).toBe('heuristic');
  });
  it('should format age strings properly', function () {
    var formatAge = function formatAge(freshnessMs) {
      if (freshnessMs < 60000) return null;
      if (freshnessMs < 3600000) return Math.floor(freshnessMs / 60000) + 'm';
      if (freshnessMs < 86400000) return Math.floor(freshnessMs / 3600000) + 'h';
      return Math.floor(freshnessMs / 86400000) + 'd';
    };
    expect(formatAge(30000)).toBeNull();
    expect(formatAge(120000)).toBe('2m');
    expect(formatAge(7200000)).toBe('2h');
    expect(formatAge(172800000)).toBe('2d');
  });
  it('should validate registry item structure', function () {
    var sampleItem = {
      id: 'test_item',
      kind: 'insight',
      category: 'mood',
      module: 'today',
      provenance: {
        source: 'unified',
        generatedAt: Date.now()
      },
      quality: {
        confidence: 0.8,
        sampleSize: 10
      },
      privacy: {
        piiSanitized: true
      },
      payload: {
        title: 'Test Insight'
      }
    };
    expect(sampleItem).toHaveProperty('id');
    expect(sampleItem).toHaveProperty('kind');
    expect(sampleItem).toHaveProperty('provenance.source');
    expect(sampleItem).toHaveProperty('quality.confidence');
    expect(sampleItem).toHaveProperty('privacy.piiSanitized');
  });
});
describe('Quality Ribbon E2E Smoke Tests', function () {
  beforeAll(function () {
    expect(process.env.TEST_MODE).toBe('1');
    expect(process.env.TEST_TTL_MS).toBe('5000');
    expect(process.env.TEST_PIPELINE_STUB).toBe('1');
  });
  describe('🏠 Today Page Smoke Tests', function () {
    it('[QR:smoke:today] should handle Fresh to Cache transition without errors', (0, _asyncToGenerator2.default)(function* () {
      var mockPipeline = {
        process: jest.fn(),
        getInstance: jest.fn().mockReturnThis()
      };
      var freshResult = {
        insights: {
          therapeutic: [{
            text: 'Smoke test suggestion',
            confidence: 0.85,
            priority: 'high',
            category: 'mood',
            dataPoints: 15
          }]
        },
        metadata: {
          source: 'fresh',
          processedAt: Date.now(),
          processingTime: 1200,
          pipelineVersion: '1.0'
        }
      };
      mockPipeline.process.mockResolvedValueOnce(freshResult);
      var processResult = yield mockPipeline.process({
        userId: 'smoke-test-user',
        content: 'Today smoke test',
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect(processResult).toBeDefined();
      expect(processResult.insights.therapeutic).toHaveLength(1);
      expect(processResult.metadata.source).toBe('fresh');
      var cachedResult = Object.assign({}, freshResult, {
        metadata: Object.assign({}, freshResult.metadata, {
          source: 'cache',
          processedAt: Date.now() - 5000
        })
      });
      mockPipeline.process.mockResolvedValueOnce(cachedResult);
      var cachedProcessResult = yield mockPipeline.process({
        userId: 'smoke-test-user',
        content: 'Today smoke test',
        type: 'data',
        context: {
          source: 'today'
        }
      });
      expect(cachedProcessResult.metadata.source).toBe('cache');
      expect(cachedProcessResult.metadata.processedAt).toBeLessThan(Date.now() - 4000);
    }));
    it('[QR:smoke:today] should handle Today page pipeline errors gracefully', function () {
      var mockPipeline = {
        process: jest.fn().mockRejectedValue(new Error('Smoke test pipeline failure')),
        getInstance: jest.fn().mockReturnThis()
      };
      expect((0, _asyncToGenerator2.default)(function* () {
        try {
          yield mockPipeline.process({
            userId: 'smoke-test-user',
            content: 'Today error test',
            type: 'data',
            context: {
              source: 'today'
            }
          });
        } catch (error) {
          expect(error.message).toBe('Smoke test pipeline failure');
          return;
        }
        throw new Error('Should have thrown an error');
      })).not.toThrow();
    });
  });
  describe('😊 Mood Page N-Threshold Smoke Tests', function () {
    it.each([['high', 16, 0.88], ['medium', 10, 0.72], ['low', 4, 0.45]])('[QR:smoke:mood] should process %s quality mood data (%i samples) without errors', function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* (quality, sampleSize, expectedConfidence) {
        var mockPipeline = {
          process: jest.fn(),
          getInstance: jest.fn().mockReturnThis()
        };
        var moodResult = {
          insights: {
            therapeutic: [{
              text: `${quality} quality mood insight`,
              confidence: expectedConfidence,
              priority: quality === 'high' ? 'high' : quality === 'medium' ? 'medium' : 'low',
              category: 'mood',
              dataPoints: sampleSize
            }]
          },
          analytics: {
            mood: {
              confidence: expectedConfidence,
              sampleSize: sampleSize,
              dataQuality: quality === 'high' ? 0.9 : quality === 'medium' ? 0.75 : 0.6
            }
          },
          metadata: {
            source: 'fresh',
            processedAt: Date.now(),
            processingTime: quality === 'low' ? 150 : 2400
          }
        };
        mockPipeline.process.mockResolvedValue(moodResult);
        var result = yield mockPipeline.process({
          userId: 'mood-smoke-user',
          content: Array(sampleSize).fill().map(function (_, i) {
            return {
              mood: 5 + Math.floor(Math.random() * 3),
              timestamp: Date.now() - i * 24 * 60 * 60 * 1000
            };
          }),
          type: 'data',
          context: {
            source: 'mood'
          }
        });
        expect(result.insights.therapeutic[0].dataPoints).toBe(sampleSize);
        expect(result.analytics.mood.sampleSize).toBe(sampleSize);
        expect(result.analytics.mood.confidence).toBe(expectedConfidence);
      });
      return function (_x, _x2, _x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    it('[QR:smoke:mood] should handle mood boundary conditions (7-day threshold)', (0, _asyncToGenerator2.default)(function* () {
      var mockPipeline = {
        process: jest.fn(),
        getInstance: jest.fn().mockReturnThis()
      };
      var boundaryResult = {
        insights: {
          therapeutic: [{
            text: 'Boundary condition mood insight',
            confidence: 0.7,
            priority: 'medium',
            category: 'mood',
            dataPoints: 7
          }]
        },
        analytics: {
          mood: {
            confidence: 0.7,
            sampleSize: 7,
            dataQuality: 0.75
          }
        },
        metadata: {
          source: 'cache',
          processedAt: Date.now() - 3600000
        }
      };
      mockPipeline.process.mockResolvedValue(boundaryResult);
      var result = yield mockPipeline.process({
        userId: 'boundary-test-user',
        content: Array(7).fill().map(function (_, i) {
          return {
            mood: 6,
            timestamp: Date.now() - i * 24 * 60 * 60 * 1000
          };
        }),
        type: 'data',
        context: {
          source: 'mood'
        }
      });
      expect(result.analytics.mood.sampleSize).toBe(7);
      expect(result.metadata.source).toBe('cache');
    }));
  });
  describe('🔄 Cache Behavior Smoke Tests', function () {
    it('should respect TEST_TTL_MS in smoke environment', function () {
      var TEST_TTL = parseInt(process.env.TEST_TTL_MS || '5000');
      expect(TEST_TTL).toBe(5000);
      var calculateTTL = function calculateTTL(isTestMode, testTTL, defaultTTL) {
        return isTestMode ? testTTL : defaultTTL;
      };
      var isTestMode = process.env.TEST_MODE === '1';
      var resultTTL = calculateTTL(isTestMode, TEST_TTL, 24 * 60 * 60 * 1000);
      expect(resultTTL).toBe(5000);
    });
    it('should simulate cache invalidation correctly', function () {
      var cacheStore = new Map();
      var TEST_KEY = 'smoke_test_key';
      var TEST_TTL = 5000;
      var cacheEntry = {
        result: {
          data: 'smoke test data'
        },
        expires: Date.now() + TEST_TTL
      };
      cacheStore.set(TEST_KEY, cacheEntry);
      expect(cacheStore.has(TEST_KEY)).toBe(true);
      expect(cacheStore.get(TEST_KEY).expires).toBeGreaterThan(Date.now());
      var expiredEntry = Object.assign({}, cacheEntry, {
        expires: Date.now() - 1000
      });
      cacheStore.set(TEST_KEY, expiredEntry);
      expect(cacheStore.get(TEST_KEY).expires).toBeLessThan(Date.now());
    });
  });
  describe('🚫 Error Handling Smoke Tests', function () {
    it('should handle missing metadata gracefully', function () {
      var processMetadata = function processMetadata(meta) {
        if (!meta || !meta.source) {
          return {
            shouldShowRibbon: false,
            fallbackMessage: 'No quality metadata available'
          };
        }
        return {
          shouldShowRibbon: true,
          source: meta.source,
          quality: meta.qualityLevel || 'unknown'
        };
      };
      var result1 = processMetadata(null);
      expect(result1.shouldShowRibbon).toBe(false);
      expect(result1.fallbackMessage).toBeDefined();
      var result2 = processMetadata({
        source: 'cache'
      });
      expect(result2.shouldShowRibbon).toBe(true);
      expect(result2.source).toBe('cache');
      expect(result2.quality).toBe('unknown');
      var result3 = processMetadata({
        source: 'unified',
        qualityLevel: 'high',
        sampleSize: 15
      });
      expect(result3.shouldShowRibbon).toBe(true);
      expect(result3.source).toBe('unified');
      expect(result3.quality).toBe('high');
    });
    it('[QR:smoke:voice] should handle voice edge error/rate-limit scenarios', function () {
      var mockVoiceService = {
        analyze: jest.fn()
      };
      mockVoiceService.analyze.mockRejectedValueOnce(new Error('Rate limit exceeded'));
      var handleVoiceError = function () {
        var _ref5 = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield mockVoiceService.analyze('test voice input');
          } catch (error) {
            if (error.message.includes('Rate limit')) {
              return {
                shouldShowRibbon: false,
                fallbackMode: 'heuristic',
                error: 'rate_limited'
              };
            }
            throw error;
          }
        });
        return function handleVoiceError() {
          return _ref5.apply(this, arguments);
        };
      }();
      expect((0, _asyncToGenerator2.default)(function* () {
        var result = yield handleVoiceError();
        expect(result.shouldShowRibbon).toBe(false);
        expect(result.fallbackMode).toBe('heuristic');
      })).not.toThrow();
    });
  });
  describe('📊 Quality Badge Mapping Smoke Tests', function () {
    it('should map all source types correctly', function () {
      var mapSourceToBadge = function mapSourceToBadge(source) {
        var mapping = {
          'unified': 'Fresh',
          'fresh': 'Fresh',
          'llm': 'LLM',
          'cache': 'Cache',
          'heuristic': 'Fast'
        };
        return mapping[source] || 'Auto';
      };
      expect(mapSourceToBadge('unified')).toBe('Fresh');
      expect(mapSourceToBadge('fresh')).toBe('Fresh');
      expect(mapSourceToBadge('llm')).toBe('LLM');
      expect(mapSourceToBadge('cache')).toBe('Cache');
      expect(mapSourceToBadge('heuristic')).toBe('Fast');
      expect(mapSourceToBadge('unknown')).toBe('Auto');
    });
    it('should map all quality levels correctly', function () {
      var mapQualityToBadge = function mapQualityToBadge(quality) {
        var mapping = {
          'high': 'High',
          'medium': 'Med',
          'low': 'Low'
        };
        return mapping[quality] || 'Unknown';
      };
      expect(mapQualityToBadge('high')).toBe('High');
      expect(mapQualityToBadge('medium')).toBe('Med');
      expect(mapQualityToBadge('low')).toBe('Low');
      expect(mapQualityToBadge('invalid')).toBe('Unknown');
    });
    it('should format sample size correctly', function () {
      var formatSampleSize = function formatSampleSize(size) {
        if (!size || size <= 0) return null;
        return `n=${size}`;
      };
      expect(formatSampleSize(15)).toBe('n=15');
      expect(formatSampleSize(0)).toBeNull();
      expect(formatSampleSize(-5)).toBeNull();
      expect(formatSampleSize(null)).toBeNull();
      expect(formatSampleSize(undefined)).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,