3fcf3a6a112c3dfe5ede4c8c1f355c0c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unifiedPipeline = exports.UnifiedAIPipeline = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _featureFlags = require("../../../constants/featureFlags");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _aiTelemetry = require("../telemetry/aiTelemetry");
var _supabase = _interopRequireDefault(require("../../../services/supabase"));
function simpleHash(str) {
  var hash = 0;
  if (str.length === 0) return hash.toString(16);
  for (var i = 0; i < str.length; i++) {
    var char = str.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash;
  }
  return Math.abs(hash).toString(16);
}
var UnifiedAIPipeline = exports.UnifiedAIPipeline = function () {
  function UnifiedAIPipeline() {
    (0, _classCallCheck2.default)(this, UnifiedAIPipeline);
    this.cache = new Map();
    this.isTestMode = process.env.TEST_MODE === '1';
    this.testTTL = parseInt(process.env.TEST_TTL_MS || '5000', 10);
    this.MODULE_TTLS = {
      insights: 24 * 60 * 60 * 1000,
      patterns: 12 * 60 * 60 * 1000,
      voice: 1 * 60 * 60 * 1000,
      progress: 6 * 60 * 60 * 1000,
      cbt: 24 * 60 * 60 * 1000,
      default: 24 * 60 * 60 * 1000
    };
    this.invalidationHooks = new Map();
    this.setupInvalidationHooks();
    this.startCacheCleanup();
  }
  return (0, _createClass2.default)(UnifiedAIPipeline, [{
    key: "getModuleTTL",
    value: function getModuleTTL(input) {
      var _input$context, _input$context2, _input$context3;
      switch (input.type) {
        case 'voice':
          return this.MODULE_TTLS.voice;
        case 'data':
          if (((_input$context = input.context) == null ? void 0 : _input$context.source) === 'mood') return this.MODULE_TTLS.patterns;
          if (((_input$context2 = input.context) == null ? void 0 : _input$context2.source) === 'cbt') return this.MODULE_TTLS.cbt;
          if (((_input$context3 = input.context) == null ? void 0 : _input$context3.source) === 'tracking') return this.MODULE_TTLS.patterns;
          return this.MODULE_TTLS.insights;
        case 'mixed':
          return this.MODULE_TTLS.insights;
        default:
          return this.MODULE_TTLS.default;
      }
    }
  }, {
    key: "process",
    value: function () {
      var _process = (0, _asyncToGenerator2.default)(function* (input) {
        var startTime = Date.now();
        if (!_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_PIPELINE')) {
          console.log('⚠️ UnifiedAIPipeline: Feature disabled, returning empty result');
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_DISABLED, {
            userId: input.userId,
            inputType: input.type,
            pipeline: 'unified',
            reason: 'feature_flag_disabled',
            timestamp: startTime
          });
          return {
            metadata: {
              pipelineVersion: '1.0.0',
              processedAt: Date.now(),
              cacheTTL: 0,
              source: 'disabled',
              processingTime: Date.now() - startTime
            }
          };
        }
        var cacheKey = this.generateCacheKey(input);
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_STARTED, {
          userId: input.userId,
          inputType: input.type,
          pipeline: 'unified',
          cacheKey: cacheKey,
          timestamp: startTime
        });
        var cached = yield this.getFromCache(cacheKey);
        if (cached) {
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_CACHE_HIT, {
            userId: input.userId,
            pipeline: 'unified',
            cacheKey: cacheKey,
            processingTime: Date.now() - startTime
          });
          return Object.assign({}, cached, {
            metadata: Object.assign({}, cached.metadata, {
              source: 'cache'
            })
          });
        }
        var result = yield this.executePipeline(input);
        this.setCacheWithInsightsPolicy(cacheKey, result, input);
        var processingTime = Date.now() - startTime;
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.UNIFIED_PIPELINE_COMPLETED, {
          userId: input.userId,
          pipeline: 'unified',
          processingTime: processingTime,
          modules: this.getEnabledModules(),
          cacheKey: cacheKey,
          resultSize: JSON.stringify(result).length
        });
        return Object.assign({}, result, {
          metadata: Object.assign({}, result.metadata, {
            source: 'fresh',
            processingTime: Date.now() - startTime
          })
        });
      });
      function process(_x) {
        return _process.apply(this, arguments);
      }
      return process;
    }()
  }, {
    key: "executePipeline",
    value: function () {
      var _executePipeline = (0, _asyncToGenerator2.default)(function* (input) {
        var startTime = Date.now();
        var moduleTTL = this.getModuleTTL(input);
        var result = {
          metadata: {
            pipelineVersion: '1.0.0',
            processedAt: Date.now(),
            cacheTTL: moduleTTL,
            source: 'fresh',
            processingTime: 0
          }
        };
        var promises = [];
        if (input.type === 'voice' || input.type === 'mixed') {
          promises.push(this.processVoiceAnalysis(input).then(function (voice) {
            result.voice = voice;
          }));
        }
        promises.push(this.processPatternRecognition(input).then(function (patterns) {
          result.patterns = patterns;
        }));
        if (this.shouldRunCBT(input)) {
          promises.push(this.processCBTAnalysis(input).then(function (cbt) {
            result.cbt = cbt;
          }));
        }
        if (this.shouldRunBreathwork(input)) {
          promises.push(this.processBreathworkAnalysis(input).then(function (breathwork) {
            result.breathwork = breathwork;
          }));
        }
        yield Promise.allSettled(promises);
        if (result.patterns) {
          var _result$voice;
          var voiceHints = (_result$voice = result.voice) != null && _result$voice.category ? {
            voiceCategory: result.voice.category,
            voiceConfidence: result.voice.confidence,
            voiceSuggestion: result.voice.suggestion
          } : undefined;
          var enhancedInput = voiceHints ? Object.assign({}, input, {
            context: Object.assign({}, input.context, {
              hints: voiceHints
            })
          }) : input;
          result.insights = yield this.processInsightsGeneration(enhancedInput, result.patterns);
        }
        if (result.patterns && Array.isArray(result.patterns)) {
          var _patternsArray$find;
          var patternsArray = result.patterns;
          var moodAnalytics = (_patternsArray$find = patternsArray.find(function (p) {
            return p.moodAnalytics;
          })) == null ? void 0 : _patternsArray$find.moodAnalytics;
          if (moodAnalytics) {
            result.analytics = {
              mood: moodAnalytics
            };
            console.log('📊 Enhanced mood analytics attached to result');
          }
        } else if (result.patterns && result.patterns.moodAnalytics) {
          result.analytics = {
            mood: result.patterns.moodAnalytics
          };
        }
        if (input.content && typeof input.content === 'object') {
          var content = input.content;
          if (content.cbtRecords && Array.isArray(content.cbtRecords) && content.cbtRecords.length > 0) {
            var cbtRecords = content.cbtRecords;
            var validRecords = cbtRecords.filter(function (r) {
              return r.mood_before != null && r.mood_after != null;
            });
            if (validRecords.length > 0) {
              var deltas = validRecords.map(function (r) {
                return r.mood_after - r.mood_before;
              });
              var avgDelta = deltas.reduce(function (sum, d) {
                return sum + d;
              }, 0) / deltas.length;
              var deltaVariance = deltas.reduce(function (sum, d) {
                return sum + Math.pow(d - avgDelta, 2);
              }, 0) / deltas.length;
              var volatility = Math.sqrt(deltaVariance);
              var recentRecords = validRecords.slice(-7);
              var olderRecords = validRecords.slice(-14, -7);
              var weeklyDelta = 0;
              if (recentRecords.length > 0 && olderRecords.length > 0) {
                var recentAvg = recentRecords.reduce(function (sum, r) {
                  return sum + (r.mood_after - r.mood_before);
                }, 0) / recentRecords.length;
                var olderAvg = olderRecords.reduce(function (sum, r) {
                  return sum + (r.mood_after - r.mood_before);
                }, 0) / olderRecords.length;
                weeklyDelta = recentAvg - olderAvg;
              }
              var confidence = Math.min(0.8, 0.5 + validRecords.length * 0.05);
              result.analytics = result.analytics || {};
              result.analytics.cbt = {
                sampleSize: validRecords.length,
                volatility: Math.round(volatility * 10) / 10,
                weeklyDelta: Math.round(weeklyDelta * 10) / 10,
                confidence: confidence,
                dataQuality: confidence,
                baselines: {
                  moodImprovement: avgDelta
                }
              };
              console.log(`📊 Minimal CBT analytics: sampleSize=${validRecords.length}, volatility=${volatility.toFixed(1)}, weeklyDelta=${weeklyDelta.toFixed(1)}`);
            }
          }
          if (content.compulsions && Array.isArray(content.compulsions) && content.compulsions.length > 0) {
            var compulsions = content.compulsions;
            var sampleSize = compulsions.length;
            var dayGroups = {};
            compulsions.forEach(function (c) {
              if (c.timestamp) {
                var day = new Date(c.timestamp).toDateString();
                dayGroups[day] = (dayGroups[day] || 0) + 1;
              }
            });
            var dailyCounts = Object.values(dayGroups);
            var _volatility = 0;
            if (dailyCounts.length > 1) {
              var avgDaily = dailyCounts.reduce(function (sum, count) {
                return sum + count;
              }, 0) / dailyCounts.length;
              var variance = dailyCounts.reduce(function (sum, count) {
                return sum + Math.pow(count - avgDaily, 2);
              }, 0) / dailyCounts.length;
              _volatility = Math.sqrt(variance);
            }
            var sortedDays = Object.entries(dayGroups).sort(function (_ref, _ref2) {
              var _ref3 = (0, _slicedToArray2.default)(_ref, 1),
                a = _ref3[0];
              var _ref4 = (0, _slicedToArray2.default)(_ref2, 1),
                b = _ref4[0];
              return new Date(a).getTime() - new Date(b).getTime();
            });
            var _weeklyDelta = 0;
            if (sortedDays.length >= 6) {
              var recentDays = sortedDays.slice(-3);
              var olderDays = sortedDays.slice(-6, -3);
              var _recentAvg = recentDays.reduce(function (sum, _ref5) {
                var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
                  count = _ref6[1];
                return sum + count;
              }, 0) / recentDays.length;
              var _olderAvg = olderDays.reduce(function (sum, _ref7) {
                var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
                  count = _ref8[1];
                return sum + count;
              }, 0) / olderDays.length;
              _weeklyDelta = _recentAvg - _olderAvg;
            }
            var _confidence = Math.min(0.8, 0.4 + sampleSize * 0.02);
            result.analytics = result.analytics || {};
            result.analytics.tracking = {
              sampleSize: sampleSize,
              volatility: Math.round(_volatility * 10) / 10,
              weeklyDelta: Math.round(_weeklyDelta * 10) / 10,
              confidence: _confidence,
              dataQuality: _confidence,
              baselines: {
                compulsions: dailyCounts.length > 0 ? Math.round(dailyCounts.reduce(function (sum, count) {
                  return sum + count;
                }, 0) / dailyCounts.length * 10) / 10 : 0
              }
            };
            console.log(`📊 Minimal Tracking analytics: sampleSize=${sampleSize}, volatility=${_volatility.toFixed(1)}, weeklyDelta=${_weeklyDelta.toFixed(1)}`);
          }
        }
        return result;
      });
      function executePipeline(_x2) {
        return _executePipeline.apply(this, arguments);
      }
      return executePipeline;
    }()
  }, {
    key: "processVoiceAnalysis",
    value: function () {
      var _processVoiceAnalysis = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var _yield$import = yield import("../services/checkinService"),
            unifiedVoiceAnalysis = _yield$import.unifiedVoiceAnalysis;
          var analysis = yield unifiedVoiceAnalysis(typeof input.content === 'string' ? input.content : JSON.stringify(input.content), input.userId);
          return {
            category: analysis.type,
            confidence: analysis.confidence,
            suggestion: analysis.suggestion,
            route: analysis.route
          };
        } catch (error) {
          console.warn('Voice analysis failed, using heuristic fallback:', error);
          return this.generateHeuristicVoiceAnalysis(typeof input.content === 'string' ? input.content : JSON.stringify(input.content));
        }
      });
      function processVoiceAnalysis(_x3) {
        return _processVoiceAnalysis.apply(this, arguments);
      }
      return processVoiceAnalysis;
    }()
  }, {
    key: "processPatternRecognition",
    value: function () {
      var _processPatternRecognition = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var patterns = {
            temporal: [],
            behavioral: [],
            environmental: [],
            triggers: [],
            severity: [],
            metadata: {
              analysisTime: Date.now(),
              dataPoints: 0,
              confidence: 0
            }
          };
          if (typeof input.content === 'object') {
            var content = input.content;
            if (content.compulsions && Array.isArray(content.compulsions)) {
              patterns.temporal = this.extractTemporalPatterns(content.compulsions);
              patterns.metadata.dataPoints += content.compulsions.length;
            }
            if (content.moods && Array.isArray(content.moods)) {
              var _patterns$temporal;
              (_patterns$temporal = patterns.temporal).push.apply(_patterns$temporal, (0, _toConsumableArray2.default)(this.extractMoodTemporalPatterns(content.moods)));
              patterns.metadata.dataPoints += content.moods.length;
              console.log(`🎯 Starting mood analytics processing for ${content.moods.length} mood entries`);
              var moodAnalytics = this.processMoodAnalytics(content.moods);
              console.log('📊 Mood analytics result:', moodAnalytics);
              if (moodAnalytics) {
                patterns.moodAnalytics = moodAnalytics;
                patterns.metadata.hasAdvancedAnalytics = true;
                try {
                  var _moodAnalytics$profil;
                  (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.MOOD_ANALYTICS_COMPUTED, {
                    weeklyDelta: moodAnalytics.weeklyDelta,
                    volatility: moodAnalytics.volatility,
                    profile: (_moodAnalytics$profil = moodAnalytics.profile) == null ? void 0 : _moodAnalytics$profil.type,
                    sampleSize: moodAnalytics.sampleSize,
                    dataQuality: moodAnalytics.dataQuality,
                    confidence: moodAnalytics.confidence,
                    correlationsAvailable: Object.keys(moodAnalytics.correlations).length
                  });
                } catch (telemetryError) {
                  console.warn('⚠️ Mood analytics telemetry failed:', telemetryError);
                }
              }
            }
            if (content.compulsions && Array.isArray(content.compulsions)) {
              patterns.behavioral = this.extractBehavioralPatterns(content.compulsions);
            }
            patterns.environmental = this.extractEnvironmentalTriggers(content);
            patterns.triggers = this.analyzeTriggers(content);
            patterns.severity = this.analyzeSeverityProgression(content);
            patterns.metadata.confidence = this.calculatePatternConfidence(patterns.metadata.dataPoints);
          }
          if (typeof input.content === 'string') {
            var _patterns$behavioral, _patterns$triggers;
            var textPatterns = this.extractTextPatterns(input.content);
            (_patterns$behavioral = patterns.behavioral).push.apply(_patterns$behavioral, (0, _toConsumableArray2.default)(textPatterns.behavioral));
            (_patterns$triggers = patterns.triggers).push.apply(_patterns$triggers, (0, _toConsumableArray2.default)(textPatterns.triggers));
            patterns.metadata.dataPoints += 1;
            patterns.metadata.confidence = 0.6;
          }
          return patterns;
        } catch (error) {
          console.error('Pattern recognition error:', error);
          return {
            temporal: [],
            behavioral: [],
            environmental: [],
            triggers: [],
            severity: [],
            metadata: {
              analysisTime: Date.now(),
              dataPoints: 0,
              confidence: 0
            }
          };
        }
      });
      function processPatternRecognition(_x4) {
        return _processPatternRecognition.apply(this, arguments);
      }
      return processPatternRecognition;
    }()
  }, {
    key: "processCBTAnalysis",
    value: function () {
      var _processCBTAnalysis = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          if (typeof input.content === 'object' && input.content.analysisRequest === 'comprehensive_cbt_progress_analytics') {
            return yield this.processCBTProgressAnalytics(input);
          }
          var text = typeof input.content === 'string' ? input.content : input.content.description || input.content.notes || '';
          if (!text || text.length < 5) {
            return null;
          }
          var analysis = {
            distortions: [],
            reframes: [],
            techniques: [],
            thoughtRecord: null,
            severity: 0,
            urgency: 'low',
            metadata: {
              analysisTime: Date.now(),
              textLength: text.length,
              confidence: 0
            }
          };
          var detectedDistortions = this.detectCognitiveDistortions(text);
          analysis.distortions = detectedDistortions;
          if (detectedDistortions.length > 0) {
            analysis.thoughtRecord = this.generateThoughtRecord(text, detectedDistortions);
          }
          analysis.reframes = yield this.generateCBTReframes(text, detectedDistortions);
          analysis.techniques = this.recommendCBTTechniques(detectedDistortions, text);
          analysis.severity = this.assessCognitiveDistortionSeverity(text, detectedDistortions);
          analysis.urgency = this.calculateCBTUrgency(analysis.severity, detectedDistortions);
          analysis.metadata.confidence = this.calculateCBTConfidence(detectedDistortions, text.length);
          try {
            var _yield$import2 = yield import("../engines/cbtEngine"),
              cbtEngine = _yield$import2.cbtEngine;
            if (cbtEngine.enabled) {
              var engineDistortions = yield cbtEngine.detectDistortions(text);
              var engineReframes = yield cbtEngine.suggestReframes(text, engineDistortions);
              analysis.distortions = [].concat((0, _toConsumableArray2.default)(analysis.distortions), (0, _toConsumableArray2.default)(engineDistortions.map(function (d) {
                return {
                  name: d.name,
                  confidence: d.confidence
                };
              })));
              analysis.reframes = [].concat((0, _toConsumableArray2.default)(analysis.reframes), (0, _toConsumableArray2.default)(engineReframes));
              analysis.metadata.confidence = Math.max(analysis.metadata.confidence, 0.85);
            }
          } catch (engineError) {
            console.warn('CBT Engine unavailable, using built-in analysis:', engineError);
          }
          return analysis;
        } catch (error) {
          console.error('CBT analysis failed:', error);
          return null;
        }
      });
      function processCBTAnalysis(_x5) {
        return _processCBTAnalysis.apply(this, arguments);
      }
      return processCBTAnalysis;
    }()
  }, {
    key: "detectCognitiveDistortions",
    value: function detectCognitiveDistortions(text) {
      var distortions = [];
      var lowerText = text.toLowerCase();
      var catastrophizingPatterns = [{
        pattern: /ya\s+.*?olursa/gi,
        weight: 0.8
      }, {
        pattern: /kesin.*?olacak/gi,
        weight: 0.7
      }, {
        pattern: /felaket|korkunç|berbat/gi,
        weight: 0.6
      }, {
        pattern: /mahvol.*?|bitecek|dayanamam/gi,
        weight: 0.9
      }];
      var catastrophizingEvidence = [];
      var catastrophizingScore = 0;
      catastrophizingPatterns.forEach(function (_ref9) {
        var pattern = _ref9.pattern,
          weight = _ref9.weight;
        var matches = text.match(pattern);
        if (matches) {
          catastrophizingScore += matches.length * weight;
          catastrophizingEvidence.push.apply(catastrophizingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (catastrophizingScore > 0.5) {
        distortions.push({
          name: 'catastrophizing',
          confidence: Math.min(catastrophizingScore, 1),
          evidence: catastrophizingEvidence.slice(0, 3)
        });
      }
      var allOrNothingPatterns = [{
        pattern: /asla.*?olmaz|hiçbir zaman/gi,
        weight: 0.8
      }, {
        pattern: /her zaman|hep|hiç/gi,
        weight: 0.6
      }, {
        pattern: /tamamen.*?başarısız|mükemmel.*?olmalı/gi,
        weight: 0.9
      }];
      var allOrNothingEvidence = [];
      var allOrNothingScore = 0;
      allOrNothingPatterns.forEach(function (_ref0) {
        var pattern = _ref0.pattern,
          weight = _ref0.weight;
        var matches = text.match(pattern);
        if (matches) {
          allOrNothingScore += matches.length * weight;
          allOrNothingEvidence.push.apply(allOrNothingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (allOrNothingScore > 0.4) {
        distortions.push({
          name: 'all_or_nothing',
          confidence: Math.min(allOrNothingScore, 1),
          evidence: allOrNothingEvidence.slice(0, 3)
        });
      }
      var mindReadingPatterns = [{
        pattern: /herkes.*?düşünüyor|kesin.*?düşünüyor/gi,
        weight: 0.8
      }, {
        pattern: /benden nefret|beni sevmiyor/gi,
        weight: 0.9
      }, {
        pattern: /yargılıyor|dalga geçiyor|aptal sanıyor/gi,
        weight: 0.7
      }];
      var mindReadingEvidence = [];
      var mindReadingScore = 0;
      mindReadingPatterns.forEach(function (_ref1) {
        var pattern = _ref1.pattern,
          weight = _ref1.weight;
        var matches = text.match(pattern);
        if (matches) {
          mindReadingScore += matches.length * weight;
          mindReadingEvidence.push.apply(mindReadingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (mindReadingScore > 0.4) {
        distortions.push({
          name: 'mind_reading',
          confidence: Math.min(mindReadingScore, 1),
          evidence: mindReadingEvidence.slice(0, 3)
        });
      }
      var personalizationPatterns = [{
        pattern: /benim yüzümden|benim suçum/gi,
        weight: 0.9
      }, {
        pattern: /ben sebep oldum|hep ben/gi,
        weight: 0.8
      }, {
        pattern: /benden kaynaklı/gi,
        weight: 0.7
      }];
      var personalizationEvidence = [];
      var personalizationScore = 0;
      personalizationPatterns.forEach(function (_ref10) {
        var pattern = _ref10.pattern,
          weight = _ref10.weight;
        var matches = text.match(pattern);
        if (matches) {
          personalizationScore += matches.length * weight;
          personalizationEvidence.push.apply(personalizationEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (personalizationScore > 0.4) {
        distortions.push({
          name: 'personalization',
          confidence: Math.min(personalizationScore, 1),
          evidence: personalizationEvidence.slice(0, 3)
        });
      }
      var labelingPatterns = [{
        pattern: /ben.*?başarısızım|ben.*?aptalım/gi,
        weight: 0.9
      }, {
        pattern: /ben.*?değersizim|ben.*?beceriksizim/gi,
        weight: 0.9
      }, {
        pattern: /hiçbir işe yaramıyorum/gi,
        weight: 0.8
      }];
      var labelingEvidence = [];
      var labelingScore = 0;
      labelingPatterns.forEach(function (_ref11) {
        var pattern = _ref11.pattern,
          weight = _ref11.weight;
        var matches = text.match(pattern);
        if (matches) {
          labelingScore += matches.length * weight;
          labelingEvidence.push.apply(labelingEvidence, (0, _toConsumableArray2.default)(matches));
        }
      });
      if (labelingScore > 0.4) {
        distortions.push({
          name: 'labeling',
          confidence: Math.min(labelingScore, 1),
          evidence: labelingEvidence.slice(0, 3)
        });
      }
      return distortions;
    }
  }, {
    key: "generateThoughtRecord",
    value: function generateThoughtRecord(text, distortions) {
      var primaryDistortion = distortions[0];
      if (!primaryDistortion) return null;
      return {
        automaticThought: text.substring(0, 200),
        emotion: this.extractEmotionFromText(text),
        intensity: this.calculateEmotionalIntensity(text),
        distortion: primaryDistortion.name,
        evidence: primaryDistortion.evidence,
        balancedThought: '',
        createdAt: new Date().toISOString()
      };
    }
  }, {
    key: "generateCBTReframes",
    value: function () {
      var _generateCBTReframes = (0, _asyncToGenerator2.default)(function* (text, distortions) {
        var reframes = [];
        distortions.forEach(function (distortion) {
          switch (distortion.name) {
            case 'catastrophizing':
              reframes.push('Bu durumun gerçekte ne kadar kötü olabileceğini gerçekçi bir şekilde değerlendirebilirim.', 'Geçmişte benzer durumlarla başa çıktığımı hatırlıyorum.', 'En kötü senaryo gerçekleşse bile, bunun üstesinden gelme yolları vardır.');
              break;
            case 'all_or_nothing':
              reframes.push('Bu durum siyah-beyaz değil, grinin tonları var.', 'Mükemmel olmak zorunda değilim, yeterince iyi olmak da değerlidir.', 'Her şeyin bir spektrumu olduğunu hatırlamalıyım.');
              break;
            case 'mind_reading':
              reframes.push('Başkalarının ne düşündüğünü gerçekten bilemem.', 'İnsanlar genellikle kendi sorunlarıyla meşguller, beni o kadar düşünmüyorlar.', 'Varsayımlarım gerçek olmayabilir, doğrudan sormak daha iyi olabilir.');
              break;
            case 'personalization':
              reframes.push('Her şey benim kontrolümde değil ve her şeyden sorumlu değilim.', 'Bu duruma birçok faktör katkıda bulunmuş olabilir.', 'Kendimi gereksiz yere suçlamak yerine çözüm odaklı düşünebilirim.');
              break;
            case 'labeling':
              reframes.push('Ben bir davranışım değilim, bu sadece bir hata.', 'Herkes hata yapar, bu beni kötü bir insan yapmaz.', 'Kendimle daha şefkatli konuşmalıyım.');
              break;
          }
        });
        if (reframes.length === 0) {
          reframes.push('Bu düşüncenin bana ne kadar faydası var?', 'Bu durumu daha dengeli bir şekilde nasıl değerlendirebilirim?', 'En iyi arkadaşıma ne söylerdim?');
        }
        return (0, _toConsumableArray2.default)(new Set(reframes)).slice(0, 3);
      });
      function generateCBTReframes(_x6, _x7) {
        return _generateCBTReframes.apply(this, arguments);
      }
      return generateCBTReframes;
    }()
  }, {
    key: "recommendCBTTechniques",
    value: function recommendCBTTechniques(distortions, text) {
      var techniques = [];
      var distortionNames = distortions.map(function (d) {
        return d.name;
      });
      if (distortionNames.includes('catastrophizing')) {
        techniques.push({
          name: 'Probability Estimation',
          description: 'Korkulan durumun gerçekleşme olasılığını gerçekçi bir şekilde değerlendirin (0-100%).',
          priority: 9
        });
        techniques.push({
          name: 'Decatastrophizing',
          description: 'En kötü senaryo gerçekleşse bile nasıl başa çıkabileceğinizi planlayın.',
          priority: 8
        });
      }
      if (distortionNames.includes('all_or_nothing')) {
        techniques.push({
          name: 'Continuum Technique',
          description: 'Durumu 0-100 skalasında değerlendirerek gri alanları keşfedin.',
          priority: 9
        });
      }
      if (distortionNames.includes('mind_reading')) {
        techniques.push({
          name: 'Evidence Testing',
          description: 'Başkalarının düşüncelerine dair varsayımlarınız için kanıt arayın.',
          priority: 8
        });
        techniques.push({
          name: 'Alternative Perspectives',
          description: 'Durumu farklı açılardan değerlendirin.',
          priority: 7
        });
      }
      techniques.push({
        name: 'Thought Record',
        description: 'Düşüncelerinizi yazarak analiz edin ve dengeli alternatifler bulun.',
        priority: 6
      });
      techniques.push({
        name: 'Self-Compassion',
        description: 'Kendinize en iyi arkadaşınıza davranır gibi şefkatli davranın.',
        priority: 5
      });
      return techniques.sort(function (a, b) {
        return b.priority - a.priority;
      }).slice(0, 3);
    }
  }, {
    key: "assessCognitiveDistortionSeverity",
    value: function assessCognitiveDistortionSeverity(text, distortions) {
      if (distortions.length === 0) return 0;
      var severity = Math.min(distortions.length * 2, 6);
      var avgConfidence = distortions.reduce(function (sum, d) {
        return sum + d.confidence;
      }, 0) / distortions.length;
      severity += avgConfidence * 2;
      var intensityWords = /çok|aşırı|korkunç|berbat|dayanamam|mahvoldum/gi;
      var intensityMatches = text.match(intensityWords);
      if (intensityMatches) {
        severity += Math.min(intensityMatches.length * 0.5, 2);
      }
      return Math.min(Math.round(severity), 10);
    }
  }, {
    key: "calculateCBTUrgency",
    value: function calculateCBTUrgency(severity, distortions) {
      if (severity >= 8) return 'high';
      if (severity >= 5) return 'medium';
      return 'low';
    }
  }, {
    key: "calculateCBTConfidence",
    value: function calculateCBTConfidence(distortions, textLength) {
      if (distortions.length === 0) return 0.3;
      var avgDistortionConfidence = distortions.reduce(function (sum, d) {
        return sum + d.confidence;
      }, 0) / distortions.length;
      var lengthBonus = Math.min(textLength / 100, 0.2);
      return Math.min(avgDistortionConfidence + lengthBonus, 0.95);
    }
  }, {
    key: "generateHeuristicVoiceAnalysis",
    value: function generateHeuristicVoiceAnalysis(text) {
      var lowerText = text.toLowerCase();
      var moodKeywords = ['mutlu', 'üzgün', 'yorgun', 'iyi', 'kötü', 'harika', 'berbat', 'mükemmel', 'mood', 'hissediyorum'];
      var ocdKeywords = ['kompulsiyon', 'takıntı', 'kontrol', 'temizlik', 'yıkama', 'sayma', 'düzen', 'simetri'];
      var cbtKeywords = ['düşünce', 'olumsuz', 'kaygı', 'endişe', 'korku', 'çarpıtma', 'yanlış', 'doğru'];
      var breathworkKeywords = ['nefes', 'sakin', 'rahatlama', 'stres', 'gergin', 'soluk'];
      var moodCount = moodKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var ocdCount = ocdKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var cbtCount = cbtKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var breathworkCount = breathworkKeywords.filter(function (keyword) {
        return lowerText.includes(keyword);
      }).length;
      var category = 'MOOD';
      var confidence = 0.3;
      var maxCount = moodCount;
      if (ocdCount > maxCount) {
        category = 'OCD';
        maxCount = ocdCount;
      }
      if (cbtCount > maxCount) {
        category = 'CBT';
        maxCount = cbtCount;
      }
      if (breathworkCount > maxCount) {
        category = 'BREATHWORK';
        maxCount = breathworkCount;
      }
      confidence = Math.min(0.6, 0.3 + maxCount * 0.1);
      return {
        category: category,
        confidence: confidence,
        suggestion: 'Heuristic analysis tamamlandı',
        route: 'SUGGEST_SCREEN',
        extractedData: {
          mood: Math.max(1, Math.min(10, 5 + (maxCount - 2))),
          trigger: category === 'OCD' ? 'compulsion_detected' : category === 'CBT' ? 'negative_thought' : category === 'BREATHWORK' ? 'anxiety_detected' : 'mood_expression'
        },
        metadata: {
          source: 'unified_heuristic_fallback',
          processingTime: 0,
          keywordMatches: {
            moodCount: moodCount,
            ocdCount: ocdCount,
            cbtCount: cbtCount,
            breathworkCount: breathworkCount
          }
        }
      };
    }
  }, {
    key: "extractEmotionFromText",
    value: function extractEmotionFromText(text) {
      var emotions = {
        'üzgün': /üzgün|üzülü|kederli|melankolik/gi,
        'öfkeli': /öfkeli|sinirli|kızgın|rahatsız/gi,
        'kaygılı': /kaygılı|endişeli|gergin|stresli/gi,
        'korku': /korku|panik|dehşet/gi,
        'utanç': /utanç|mahcup|rezil/gi
      };
      for (var _ref12 of Object.entries(emotions)) {
        var _ref13 = (0, _slicedToArray2.default)(_ref12, 2);
        var emotion = _ref13[0];
        var pattern = _ref13[1];
        if (pattern.test(text)) {
          return emotion;
        }
      }
      return 'belirsiz';
    }
  }, {
    key: "calculateEmotionalIntensity",
    value: function calculateEmotionalIntensity(text) {
      var intensifiers = text.match(/çok|aşırı|son derece|fazlasıyla|tam/gi);
      var baseIntensity = 5;
      var intensifierBonus = intensifiers ? Math.min(intensifiers.length * 2, 4) : 0;
      return Math.min(baseIntensity + intensifierBonus, 10);
    }
  }, {
    key: "processInsightsGeneration",
    value: function () {
      var _processInsightsGeneration = (0, _asyncToGenerator2.default)(function* (input, patterns) {
        try {
          var _input$context4, _insights$progress2, _insights$motivationa, _insights$therapeutic5;
          var insights = {
            therapeutic: [],
            progress: [],
            behavioral: [],
            motivational: [],
            metadata: {
              generatedAt: Date.now(),
              confidence: 0,
              totalInsights: 0,
              categories: []
            }
          };
          var voiceHints = (_input$context4 = input.context) == null ? void 0 : _input$context4.hints;
          if (voiceHints != null && voiceHints.voiceCategory && voiceHints.voiceConfidence > 0.7) {
            var _insights$therapeutic;
            var voiceEnhancedInsights = this.generateVoiceEnhancedInsights(voiceHints, patterns);
            (_insights$therapeutic = insights.therapeutic).push.apply(_insights$therapeutic, (0, _toConsumableArray2.default)(voiceEnhancedInsights));
            console.log(`🎤 Added ${voiceEnhancedInsights.length} voice-enhanced insights for category: ${voiceHints.voiceCategory}`);
            try {
              yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
                userId: input.userId,
                source: 'voice_enhanced_insights',
                insightsHintsApplied: true,
                voiceCategory: voiceHints.voiceCategory,
                voiceConfidence: voiceHints.voiceConfidence,
                enhancedInsightsCount: voiceEnhancedInsights.length,
                originalPatternsCount: Object.keys(patterns).filter(function (k) {
                  var _patterns$k;
                  return ((_patterns$k = patterns[k]) == null ? void 0 : _patterns$k.length) > 0;
                }).length
              });
            } catch (error) {
              console.warn('⚠️ Voice insights telemetry failed:', error);
            }
          }
          if (patterns.temporal && patterns.temporal.length > 0) {
            var _insights$therapeutic2;
            var temporalInsights = this.generateTemporalInsights(patterns.temporal);
            (_insights$therapeutic2 = insights.therapeutic).push.apply(_insights$therapeutic2, (0, _toConsumableArray2.default)(temporalInsights));
          }
          if (patterns.behavioral && patterns.behavioral.length > 0) {
            var _insights$behavioral;
            var behavioralInsights = this.generateBehavioralInsights(patterns.behavioral);
            (_insights$behavioral = insights.behavioral).push.apply(_insights$behavioral, (0, _toConsumableArray2.default)(behavioralInsights));
          }
          if (patterns.triggers && patterns.triggers.length > 0) {
            var _insights$therapeutic3;
            var triggerInsights = this.generateTriggerInsights(patterns.triggers);
            (_insights$therapeutic3 = insights.therapeutic).push.apply(_insights$therapeutic3, (0, _toConsumableArray2.default)(triggerInsights));
          }
          if (patterns.severity && patterns.severity.length > 0) {
            var _insights$progress;
            var severityInsights = this.generateSeverityInsights(patterns.severity);
            (_insights$progress = insights.progress).push.apply(_insights$progress, (0, _toConsumableArray2.default)(severityInsights));
          }
          if (patterns.environmental && patterns.environmental.length > 0) {
            var _insights$therapeutic4;
            var environmentalInsights = this.generateEnvironmentalInsights(patterns.environmental);
            (_insights$therapeutic4 = insights.therapeutic).push.apply(_insights$therapeutic4, (0, _toConsumableArray2.default)(environmentalInsights));
          }
          var progressInsights = this.generateProgressInsights(patterns, input);
          (_insights$progress2 = insights.progress).push.apply(_insights$progress2, (0, _toConsumableArray2.default)(progressInsights));
          var motivationalInsights = this.generateMotivationalInsights(patterns);
          (_insights$motivationa = insights.motivational).push.apply(_insights$motivationa, (0, _toConsumableArray2.default)(motivationalInsights));
          var crossPatternInsights = this.generateCrossPatternInsights(patterns);
          (_insights$therapeutic5 = insights.therapeutic).push.apply(_insights$therapeutic5, (0, _toConsumableArray2.default)(crossPatternInsights));
          insights.metadata = this.calculateInsightsMetadata(insights);
          insights.therapeutic = this.prioritizeInsights(insights.therapeutic).slice(0, 5);
          insights.progress = insights.progress.slice(0, 3);
          insights.behavioral = insights.behavioral.slice(0, 3);
          insights.motivational = insights.motivational.slice(0, 2);
          var totalInsights = insights.therapeutic.length + insights.progress.length + insights.behavioral.length + insights.motivational.length;
          if (totalInsights === 0) {
            var _insights$therapeutic6, _insights$progress3;
            console.log('⚠️ No primary insights generated, adding fallback insights...');
            var fallbackInsights = this.generateFallbackInsights(patterns, input);
            (_insights$therapeutic6 = insights.therapeutic).push.apply(_insights$therapeutic6, (0, _toConsumableArray2.default)(fallbackInsights.therapeutic));
            (_insights$progress3 = insights.progress).push.apply(_insights$progress3, (0, _toConsumableArray2.default)(fallbackInsights.progress));
            (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
              userId: input.userId,
              source: 'fallback',
              reason: 'no_primary_insights',
              insightsCount: fallbackInsights.therapeutic.length + fallbackInsights.progress.length,
              patternsAvailable: Object.keys(patterns).filter(function (k) {
                var _patterns$k2;
                return ((_patterns$k2 = patterns[k]) == null ? void 0 : _patterns$k2.length) > 0;
              })
            }).catch(console.warn);
          }
          return insights;
        } catch (error) {
          console.error('Insights generation failed:', error);
          return {
            therapeutic: [],
            progress: [],
            behavioral: [],
            motivational: [],
            metadata: {
              generatedAt: Date.now(),
              confidence: 0,
              totalInsights: 0,
              categories: []
            }
          };
        }
      });
      function processInsightsGeneration(_x8, _x9) {
        return _processInsightsGeneration.apply(this, arguments);
      }
      return processInsightsGeneration;
    }()
  }, {
    key: "generateTemporalInsights",
    value: function generateTemporalInsights(temporalPatterns) {
      var insights = [];
      temporalPatterns.forEach(function (pattern) {
        switch (pattern.type) {
          case 'peak_hour':
            insights.push({
              text: `Kompulsiyonlarınız genellikle ${pattern.timeOfDay} saatlerinde pik yapıyor. Bu saatlerde önceden hazırlanmak faydalı olabilir.`,
              category: 'temporal',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                peakTime: pattern.timeOfDay,
                frequency: pattern.frequency
              }
            });
            break;
          case 'peak_day':
            insights.push({
              text: `${pattern.dayOfWeek} günleri kompulsiyonlarınız daha sık görülüyor. Bu günler için özel stratejiler geliştirebilirsiniz.`,
              category: 'temporal',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                peakDay: pattern.dayOfWeek,
                frequency: pattern.frequency
              }
            });
            break;
          case 'clustering':
            insights.push({
              text: 'Kompulsiyonlarınız kümelenmede meydana geliyor. Bir kompulsiyondan sonra diğerlerini tetiklemeyi önlemek için ara teknikler kullanabilirsiniz.',
              category: 'temporal',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                clusterCount: pattern.clusters.length
              }
            });
            break;
          case 'mood_trend':
            if (pattern.direction === 'improving') {
              insights.push({
                text: 'Ruh haliniz son zamanlarda iyileşme eğiliminde! Bu pozitif trendi sürdürmeye odaklanın.',
                category: 'progress',
                priority: 'high',
                actionable: false,
                confidence: pattern.confidence,
                data: {
                  trend: pattern.direction,
                  strength: pattern.strength
                }
              });
            } else if (pattern.direction === 'declining') {
              insights.push({
                text: 'Ruh halinizde düşüş gözleniyor. Destek stratejilerinizi devreye sokmak için uygun bir zaman olabilir.',
                category: 'alert',
                priority: 'high',
                actionable: true,
                confidence: pattern.confidence,
                data: {
                  trend: pattern.direction,
                  strength: pattern.strength
                }
              });
            }
            break;
          case 'therapy_progress':
            if (pattern.direction === 'improving') {
              insights.push({
                text: 'Terapi seanslarınızda ilerleme kaydediyorsunuz! Mevcut yaklaşımınızı sürdürün.',
                category: 'progress',
                priority: 'high',
                actionable: false,
                confidence: pattern.confidence,
                data: {
                  direction: pattern.direction,
                  consistency: pattern.consistency
                }
              });
            }
            break;
        }
      });
      return insights;
    }
  }, {
    key: "generateBehavioralInsights",
    value: function generateBehavioralInsights(behavioralPatterns) {
      var insights = [];
      behavioralPatterns.forEach(function (pattern) {
        switch (pattern.type) {
          case 'dominant_category':
            insights.push({
              text: `Kompulsiyonlarınızın %${pattern.percentage}'i ${pattern.category} kategorisinde. Bu alana özel müdahaleler geliştirebilirsiniz.`,
              category: 'behavioral',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                category: pattern.category,
                percentage: pattern.percentage
              }
            });
            break;
          case 'duration_pattern':
            if (pattern.trend === 'increasing') {
              insights.push({
                text: `Kompulsiyon süreleriniz artış eğiliminde (ortalama ${pattern.averageDuration} dakika). Durdurma stratejilerinizi gözden geçirin.`,
                category: 'behavioral',
                priority: 'medium',
                actionable: true,
                confidence: pattern.confidence,
                data: {
                  averageDuration: pattern.averageDuration,
                  trend: pattern.trend
                }
              });
            } else if (pattern.trend === 'decreasing') {
              insights.push({
                text: `Kompulsiyon süreleriniz azalıyor! Bu olumlu gelişimi sürdürün.`,
                category: 'progress',
                priority: 'medium',
                actionable: false,
                confidence: pattern.confidence,
                data: {
                  averageDuration: pattern.averageDuration,
                  trend: pattern.trend
                }
              });
            }
            break;
          case 'compulsion_indicator':
            insights.push({
              text: `${pattern.category} tipi kompulsiyonlara yönelik belirtiler tespit edildi. Bu alana özel egzersizler faydalı olabilir.`,
              category: 'behavioral',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                category: pattern.category,
                intensity: pattern.intensity
              }
            });
            break;
        }
      });
      return insights;
    }
  }, {
    key: "generateTriggerInsights",
    value: function generateTriggerInsights(triggerPatterns) {
      var insights = [];
      triggerPatterns.forEach(function (pattern) {
        switch (pattern.type) {
          case 'situational':
            insights.push({
              text: `"${pattern.description}" sıklıkla tetikleyici oluyor. Bu durumlar için önceden stratejiler hazırlayabilirsiniz.`,
              category: 'trigger',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                trigger: pattern.description,
                frequency: pattern.frequency
              }
            });
            break;
          case 'emotional':
            var emotionTurkish = {
              'anxiety': 'kaygı',
              'stress': 'stres',
              'perfectionism': 'mükemmeliyetçilik'
            };
            insights.push({
              text: `${emotionTurkish[pattern.trigger] || pattern.trigger} durumlarında kompulsiyonlar tetikleniyor. Duygu düzenleme tekniklerini devreye alın.`,
              category: 'trigger',
              priority: 'high',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                emotionalTrigger: pattern.trigger
              }
            });
            break;
          case 'location':
            insights.push({
              text: `${pattern.trigger} konumunda kompulsiyonlar sıklıkla görülüyor. Bu ortamda özel önlemler alabilirsiniz.`,
              category: 'trigger',
              priority: 'medium',
              actionable: true,
              confidence: pattern.confidence,
              data: {
                location: pattern.trigger,
                frequency: pattern.frequency
              }
            });
            break;
        }
      });
      return insights;
    }
  }, {
    key: "generateSeverityInsights",
    value: function generateSeverityInsights(severityPatterns) {
      var insights = [];
      severityPatterns.forEach(function (pattern) {
        if (pattern.type === 'severity_trend') {
          switch (pattern.direction) {
            case 'improving':
              insights.push({
                metric: 'severity_trend',
                value: pattern.recentAverage,
                change: -pattern.strength,
                interpretation: `Şiddet düzeyinde iyileşme var! Son veriler ${pattern.recentAverage.toFixed(1)} ortalama gösteriyor.`,
                confidence: pattern.confidence
              });
              break;
            case 'worsening':
              insights.push({
                metric: 'severity_trend',
                value: pattern.recentAverage,
                change: pattern.strength,
                interpretation: `Şiddet düzeyinde artış gözleniyor. Destek stratejilerini devreye alma zamanı.`,
                confidence: pattern.confidence
              });
              break;
            case 'stable':
              insights.push({
                metric: 'severity_trend',
                value: pattern.recentAverage,
                change: 0,
                interpretation: 'Şiddet düzeyi stabil seyrediyor.',
                confidence: pattern.confidence
              });
              break;
          }
        }
      });
      return insights;
    }
  }, {
    key: "generateEnvironmentalInsights",
    value: function generateEnvironmentalInsights(environmentalPatterns) {
      var insights = [];
      environmentalPatterns.forEach(function (pattern) {
        if (pattern.type === 'location') {
          insights.push({
            text: `${pattern.trigger} konumunda kompulsiyonlar sık görülüyor. Bu ortamda tetik faktörlerini belirleyip önlem almayı düşünün.`,
            category: 'environmental',
            priority: 'medium',
            actionable: true,
            confidence: pattern.confidence,
            data: {
              location: pattern.trigger,
              frequency: pattern.frequency
            }
          });
        }
      });
      return insights;
    }
  }, {
    key: "generateProgressInsights",
    value: function generateProgressInsights(patterns, input) {
      var insights = [];
      if (patterns.metadata && patterns.metadata.dataPoints > 10) {
        insights.push({
          metric: 'data_richness',
          value: patterns.metadata.dataPoints,
          change: 0,
          interpretation: `${patterns.metadata.dataPoints} veri noktası ile güçlü bir analiz yapabiliyoruz.`,
          confidence: 0.9
        });
      }
      if (patterns.metadata && patterns.metadata.confidence > 0.7) {
        insights.push({
          metric: 'pattern_confidence',
          value: Math.round(patterns.metadata.confidence * 100),
          change: 0,
          interpretation: `Kalıp tespitinde %${Math.round(patterns.metadata.confidence * 100)} güven düzeyi.`,
          confidence: patterns.metadata.confidence
        });
      }
      return insights;
    }
  }, {
    key: "generateMotivationalInsights",
    value: function generateMotivationalInsights(patterns) {
      var insights = [];
      if (patterns.temporal && patterns.temporal.length > 0) {
        insights.push({
          text: 'Verilerinizi analiz etmek, kendi kalıplarınızı anlamanızı sağlıyor. Bu farkındalık iyileşmenin ilk adımıdır.',
          category: 'motivational',
          priority: 'low',
          actionable: false,
          confidence: 0.8
        });
      }
      if (patterns.metadata && patterns.metadata.dataPoints >= 5) {
        insights.push({
          text: 'Düzenli kayıt tutmaya devam ediyorsunuz. Bu tutarlılık uzun vadeli başarının anahtarı!',
          category: 'motivational',
          priority: 'low',
          actionable: false,
          confidence: 0.9
        });
      }
      return insights;
    }
  }, {
    key: "generateCrossPatternInsights",
    value: function generateCrossPatternInsights(patterns) {
      var insights = [];
      if (patterns.temporal && patterns.behavioral && patterns.temporal.length > 0 && patterns.behavioral.length > 0) {
        insights.push({
          text: 'Zaman kalıplarınız ile davranış örüntüleriniz arasında bağlantı var. Bu ilişkiyi anlayarak daha etkili stratejiler geliştirebilirsiniz.',
          category: 'complex_pattern',
          priority: 'medium',
          actionable: true,
          confidence: 0.7,
          data: {
            temporalPatterns: patterns.temporal.length,
            behavioralPatterns: patterns.behavioral.length
          }
        });
      }
      if (patterns.severity && patterns.temporal && patterns.severity.length > 0) {
        var hasSeverePattern = patterns.severity.some(function (s) {
          return s.direction === 'worsening';
        });
        if (hasSeverePattern) {
          insights.push({
            text: 'Şiddet artışı ile zaman kalıpları birleştiğinde, öngörülü müdahale planları önem kazanıyor.',
            category: 'strategic',
            priority: 'high',
            actionable: true,
            confidence: 0.8
          });
        }
      }
      return insights;
    }
  }, {
    key: "calculateInsightsMetadata",
    value: function calculateInsightsMetadata(insights) {
      var allInsights = [].concat((0, _toConsumableArray2.default)(insights.therapeutic), (0, _toConsumableArray2.default)(insights.progress), (0, _toConsumableArray2.default)(insights.behavioral), (0, _toConsumableArray2.default)(insights.motivational));
      var categories = (0, _toConsumableArray2.default)(new Set(allInsights.map(function (insight) {
        return insight.category || 'unknown';
      })));
      var avgConfidence = allInsights.reduce(function (sum, insight) {
        return sum + (insight.confidence || 0.5);
      }, 0) / allInsights.length;
      return {
        generatedAt: Date.now(),
        confidence: avgConfidence || 0,
        totalInsights: allInsights.length,
        categories: categories
      };
    }
  }, {
    key: "prioritizeInsights",
    value: function prioritizeInsights(insights) {
      var priorityOrder = {
        'high': 3,
        'medium': 2,
        'low': 1
      };
      return insights.sort(function (a, b) {
        var aPriority = priorityOrder[a.priority] || 0;
        var bPriority = priorityOrder[b.priority] || 0;
        if (aPriority !== bPriority) {
          return bPriority - aPriority;
        }
        return (b.confidence || 0) - (a.confidence || 0);
      });
    }
  }, {
    key: "shouldRunBreathwork",
    value: function shouldRunBreathwork(input) {
      return true;
    }
  }, {
    key: "processBreathworkAnalysis",
    value: (function () {
      var _processBreathworkAnalysis = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var context = {
            moodScore: this.extractMoodFromInput(input),
            anxietyLevel: this.extractAnxietyFromInput(input),
            recentCompulsions: this.extractRecentCompulsions(input),
            userInput: typeof input.content === 'string' ? input.content : undefined
          };
          try {
            var _yield$import3 = yield import("../services/breathworkSuggestionService"),
              breathworkSuggestionService = _yield$import3.breathworkSuggestionService;
            var suggestion = yield breathworkSuggestionService.generateSuggestion(Object.assign({
              userId: input.userId
            }, context, {
              currentTime: new Date()
            }));
            if (suggestion) {
              return {
                hasBreathworkSuggestion: true,
                suggestion: {
                  id: suggestion.id,
                  trigger: suggestion.trigger,
                  protocol: suggestion.protocol,
                  urgency: suggestion.urgency,
                  customization: suggestion.customization,
                  timing: suggestion.timing,
                  metadata: {
                    confidence: suggestion.trigger.confidence,
                    source: 'ai_breathwork_service',
                    generatedAt: suggestion.metadata.generatedAt,
                    priority: suggestion.metadata.priority
                  }
                },
                enhancement: {
                  contextualRelevance: this.calculateBreathworkRelevance(context),
                  fallbackProtocols: suggestion.metadata.fallbackOptions,
                  adaptations: {
                    userPreferences: true,
                    urgencyAdjusted: suggestion.urgency !== 'low',
                    protocolCustomized: suggestion.protocol.name !== 'box'
                  }
                }
              };
            }
          } catch (serviceError) {
            console.warn('Breathwork service unavailable, using fallback:', serviceError);
            return this.processBreathworkHeuristics(context);
          }
          return {
            hasBreathworkSuggestion: false
          };
        } catch (error) {
          console.error('Breathwork analysis failed:', error);
          return {
            hasBreathworkSuggestion: false,
            error: 'analysis_failed'
          };
        }
      });
      function processBreathworkAnalysis(_x0) {
        return _processBreathworkAnalysis.apply(this, arguments);
      }
      return processBreathworkAnalysis;
    }())
  }, {
    key: "processBreathworkHeuristics",
    value: function processBreathworkHeuristics(context) {
      var anxietyLevel = context.anxietyLevel || 5;
      var moodScore = context.moodScore;
      var recentCompulsions = context.recentCompulsions || 0;
      var needsBreathwork = false;
      var urgency = 'low';
      var triggerType = 'maintenance';
      if (anxietyLevel >= 8) {
        needsBreathwork = true;
        urgency = 'high';
        triggerType = 'anxiety';
      } else if (anxietyLevel >= 6) {
        needsBreathwork = true;
        urgency = 'medium';
        triggerType = 'anxiety';
      } else if (moodScore && moodScore <= 4) {
        needsBreathwork = true;
        urgency = 'medium';
        triggerType = 'low_mood';
      } else if (recentCompulsions >= 2) {
        needsBreathwork = true;
        urgency = 'medium';
        triggerType = 'post_compulsion';
      }
      if (!needsBreathwork) {
        return {
          hasBreathworkSuggestion: false
        };
      }
      var protocol = 'box';
      if (anxietyLevel >= 8) protocol = 'quick_calm';else if (anxietyLevel >= 6) protocol = '4-7-8';else if (moodScore && moodScore <= 3) protocol = 'paced';
      return {
        hasBreathworkSuggestion: true,
        suggestion: {
          id: `heuristic_${Date.now()}`,
          trigger: {
            type: triggerType,
            confidence: anxietyLevel >= 7 ? 0.8 : 0.6,
            contextData: {
              anxietyLevel: anxietyLevel,
              moodScore: moodScore,
              recentCompulsions: recentCompulsions
            }
          },
          protocol: {
            name: protocol,
            duration: protocol === 'quick_calm' ? 120 : 300
          },
          urgency: urgency,
          metadata: {
            confidence: anxietyLevel >= 7 ? 0.8 : 0.6,
            source: 'heuristic_fallback',
            generatedAt: Date.now()
          }
        },
        enhancement: {
          contextualRelevance: this.calculateBreathworkRelevance(context),
          fallbackProtocols: ['box', 'paced'],
          adaptations: {
            userPreferences: false,
            urgencyAdjusted: urgency !== 'low',
            protocolCustomized: false
          }
        }
      };
    }
  }, {
    key: "extractMoodFromInput",
    value: function extractMoodFromInput(input) {
      if (typeof input.content === 'object' && input.content.mood) {
        return input.content.mood;
      }
      if (typeof input.content === 'string') {
        var text = input.content.toLowerCase();
        if (/çok.*?(kötü|berbat|mutsuz)/i.test(text)) return 2;
        if (/kötü|üzgün|keyifsiz/i.test(text)) return 4;
        if (/iyi|güzel|mutlu/i.test(text)) return 7;
        if (/(çok|aşırı).*?(iyi|mutlu|harika)/i.test(text)) return 9;
      }
      return undefined;
    }
  }, {
    key: "extractAnxietyFromInput",
    value: function extractAnxietyFromInput(input) {
      if (typeof input.content === 'object' && input.content.anxiety) {
        return input.content.anxiety;
      }
      if (typeof input.content === 'string') {
        var text = input.content.toLowerCase();
        var anxietyScore = 0;
        if (/panik|dehşet|korkunç|dayanamıyorum/i.test(text)) anxietyScore += 4;
        if (/kaygı|endişe|gergin/i.test(text)) anxietyScore += 2;
        if (/(çok|aşırı).*?(kaygılı|endişeli|gergin)/i.test(text)) anxietyScore += 3;
        if (/nefes.*?alamıyorum|çarpıntı|titreme/i.test(text)) anxietyScore += 3;
        return Math.min(anxietyScore, 10);
      }
      return 5;
    }
  }, {
    key: "extractRecentCompulsions",
    value: function extractRecentCompulsions(input) {
      if (typeof input.content === 'object' && input.content.compulsions) {
        if (Array.isArray(input.content.compulsions)) {
          var yesterday = Date.now() - 24 * 60 * 60 * 1000;
          return input.content.compulsions.filter(function (c) {
            return c.timestamp && new Date(c.timestamp).getTime() > yesterday;
          }).length;
        }
      }
      if (typeof input.content === 'string') {
        var compulsionWords = /kontrol.*?etti?m|tekrar.*?bakt?ım|yıka.*?dım|temizle.*?dim|say.*?dım/gi;
        var matches = input.content.match(compulsionWords);
        return matches ? matches.length : 0;
      }
      return 0;
    }
  }, {
    key: "calculateBreathworkRelevance",
    value: function calculateBreathworkRelevance(context) {
      var relevance = 0.3;
      if (context.anxietyLevel && context.anxietyLevel >= 6) relevance += 0.4;
      if (context.moodScore && context.moodScore <= 4) relevance += 0.3;
      if (context.recentCompulsions && context.recentCompulsions >= 1) relevance += 0.2;
      if (context.userInput && /nefes|sakin|rahatlat/i.test(context.userInput)) relevance += 0.3;
      return Math.min(relevance, 1.0);
    }
  }, {
    key: "extractTemporalPatterns",
    value: function extractTemporalPatterns(compulsions) {
      if (!compulsions || !Array.isArray(compulsions)) return [];
      var SAMPLE_SIZE = 50;
      var recentCompulsions = compulsions.sort(function (a, b) {
        return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
      }).slice(0, SAMPLE_SIZE);
      var hourGroups = {};
      recentCompulsions.forEach(function (c) {
        var hour = new Date(c.timestamp).getHours();
        hourGroups[hour] = (hourGroups[hour] || 0) + 1;
      });
      var patterns = [];
      var maxPatterns = 5;
      Object.entries(hourGroups).sort(function (_ref14, _ref15) {
        var _ref16 = (0, _slicedToArray2.default)(_ref14, 2),
          a = _ref16[1];
        var _ref17 = (0, _slicedToArray2.default)(_ref15, 2),
          b = _ref17[1];
        return b - a;
      }).forEach(function (_ref18) {
        var _ref19 = (0, _slicedToArray2.default)(_ref18, 2),
          hour = _ref19[0],
          count = _ref19[1];
        if (patterns.length >= maxPatterns) return;
        if (count > 2) {
          patterns.push({
            type: 'peak_hour',
            frequency: count,
            timeOfDay: `${hour}:00`,
            trend: 'stable',
            sampleSize: recentCompulsions.length
          });
        }
      });
      return patterns;
    }
  }, {
    key: "extractBehavioralPatterns",
    value: function extractBehavioralPatterns(compulsions) {
      var _this = this;
      if (!compulsions || !Array.isArray(compulsions)) return [];
      var SAMPLE_SIZE = 50;
      var recentCompulsions = compulsions.sort(function (a, b) {
        return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
      }).slice(0, SAMPLE_SIZE);
      var triggerGroups = {};
      recentCompulsions.forEach(function (c) {
        var trigger = c.trigger || 'unknown';
        if (!triggerGroups[trigger]) {
          triggerGroups[trigger] = {
            count: 0,
            totalSeverity: 0
          };
        }
        triggerGroups[trigger].count++;
        triggerGroups[trigger].totalSeverity += _this.getCompulsionSeverity(c);
      });
      var patterns = [];
      var maxPatterns = 6;
      Object.entries(triggerGroups).sort(function (_ref20, _ref21) {
        var _ref22 = (0, _slicedToArray2.default)(_ref20, 2),
          a = _ref22[1];
        var _ref23 = (0, _slicedToArray2.default)(_ref21, 2),
          b = _ref23[1];
        return b.count - a.count;
      }).forEach(function (_ref24) {
        var _ref25 = (0, _slicedToArray2.default)(_ref24, 2),
          trigger = _ref25[0],
          data = _ref25[1];
        if (patterns.length >= maxPatterns) return;
        if (data.count >= 2) {
          patterns.push({
            trigger: trigger,
            response: 'compulsion',
            frequency: data.count,
            severity: Math.round(data.totalSeverity / data.count),
            sampleSize: recentCompulsions.length
          });
        }
      });
      return patterns;
    }
  }, {
    key: "shouldRunCBT",
    value: function shouldRunCBT(input) {
      var _input$context5;
      return input.type === 'voice' || ((_input$context5 = input.context) == null ? void 0 : _input$context5.source) === 'cbt' || typeof input.content === 'string' && input.content.length > 50;
    }
  }, {
    key: "getEnabledModules",
    value: function getEnabledModules() {
      var modules = [];
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_VOICE')) modules.push('voice');
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_PATTERNS')) modules.push('patterns');
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_INSIGHTS')) modules.push('insights');
      if (_featureFlags.FEATURE_FLAGS.isEnabled('AI_UNIFIED_CBT')) modules.push('cbt');
      return modules;
    }
  }, {
    key: "generateCacheKey",
    value: function generateCacheKey(input) {
      var _input$context6;
      var data = {
        userId: input.userId,
        type: input.type,
        content: typeof input.content === 'string' ? input.content.substring(0, 100) : JSON.stringify(input.content).substring(0, 100),
        source: (_input$context6 = input.context) == null ? void 0 : _input$context6.source
      };
      return `unified:${input.userId}:${simpleHash(JSON.stringify(data))}`;
    }
  }, {
    key: "getFromCache",
    value: function () {
      var _getFromCache = (0, _asyncToGenerator2.default)(function* (key) {
        var memoryCache = this.cache.get(key);
        if (memoryCache) {
          if (memoryCache.expires < Date.now()) {
            this.cache.delete(key);
          } else {
            var insightsCount = this.countTotalInsights(memoryCache.result);
            var remainingTTL = memoryCache.expires - Date.now();
            var fiveMinutes = 5 * 60 * 1000;
            if (insightsCount === 0 && remainingTTL < fiveMinutes) {
              console.log(`🚫 Bypassing negative cache: insightsCount=${insightsCount}, remainingTTL=${Math.round(remainingTTL / 60000)}min`);
              this.cache.delete(key);
            } else {
              return memoryCache.result;
            }
          }
        }
        try {
          var supabaseCached = yield this.getFromSupabaseCache(key);
          if (supabaseCached) {
            var _insightsCount = this.countTotalInsights(supabaseCached);
            if (_insightsCount === 0) {
              console.log(`🚫 Bypassing negative Supabase cache: insightsCount=${_insightsCount}`);
            } else {
              this.cache.set(key, {
                result: supabaseCached,
                expires: Date.now() + this.MODULE_TTLS.default
              });
              console.log('📦 Cache restored from Supabase:', key.substring(0, 30) + '...');
              return supabaseCached;
            }
          }
        } catch (error) {
          console.warn('⚠️ Supabase cache read failed:', error);
        }
        try {
          var offlineCache = yield _asyncStorage.default.getItem(key);
          if (offlineCache) {
            var parsed = JSON.parse(offlineCache);
            if (parsed.expires > Date.now()) {
              var _insightsCount2 = this.countTotalInsights(parsed.result);
              if (_insightsCount2 === 0) {
                console.log(`🚫 Bypassing negative AsyncStorage cache: insightsCount=${_insightsCount2}`);
                yield _asyncStorage.default.removeItem(key);
              } else {
                console.log('📱 Cache restored from AsyncStorage:', key.substring(0, 30) + '...');
                return parsed.result;
              }
            } else {
              yield _asyncStorage.default.removeItem(key);
            }
          }
        } catch (error) {
          console.warn('⚠️ AsyncStorage cache read failed:', error);
        }
        return null;
      });
      function getFromCache(_x1) {
        return _getFromCache.apply(this, arguments);
      }
      return getFromCache;
    }()
  }, {
    key: "setCache",
    value: function setCache(key, result, ttl) {
      var cacheTTL = this.isTestMode ? this.testTTL : ttl || this.MODULE_TTLS.default;
      this.cache.set(key, {
        result: result,
        expires: Date.now() + cacheTTL
      });
      this.setToSupabaseCache(key, result);
      this.persistToStorage(key, result);
      var ttlDisplay = this.isTestMode ? `${cacheTTL}ms (TEST MODE)` : `${Math.round(cacheTTL / (60 * 60 * 1000))}h`;
      console.log(`📦 Cache set with ${ttlDisplay} TTL:`, key.substring(0, 30) + '...');
    }
  }, {
    key: "setCacheWithInsightsPolicy",
    value: function setCacheWithInsightsPolicy(key, result, input) {
      var insightsCount = this.countTotalInsights(result);
      var moduleTTL = this.getModuleTTL(input);
      if (insightsCount === 0) {
        var shortTTL = this.isTestMode ? this.testTTL : 5 * 60 * 1000;
        var ttlDisplay = this.isTestMode ? `${shortTTL}ms (TEST)` : `${shortTTL / 60000}min`;
        console.log(`📦 Empty insights detected (${insightsCount}), using short TTL: ${ttlDisplay}`);
        this.setCache(key, result, shortTTL);
        (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
          userId: input.userId,
          source: 'empty_cache_policy',
          insightsCount: 0,
          cacheKey: key,
          shortTTL: shortTTL
        }).catch(console.warn);
        return;
      }
      console.log(`📦 Caching meaningful insights (${insightsCount}), using full TTL: ${Math.round(moduleTTL / (60 * 60 * 1000))}h`);
      this.setCache(key, result, moduleTTL);
    }
  }, {
    key: "countTotalInsights",
    value: function countTotalInsights(result) {
      if (!result.insights) return 0;
      var _result$insights = result.insights,
        _result$insights$ther = _result$insights.therapeutic,
        therapeutic = _result$insights$ther === void 0 ? [] : _result$insights$ther,
        _result$insights$prog = _result$insights.progress,
        progress = _result$insights$prog === void 0 ? [] : _result$insights$prog,
        _result$insights$beha = _result$insights.behavioral,
        behavioral = _result$insights$beha === void 0 ? [] : _result$insights$beha,
        _result$insights$moti = _result$insights.motivational,
        motivational = _result$insights$moti === void 0 ? [] : _result$insights$moti;
      return therapeutic.length + progress.length + behavioral.length + motivational.length;
    }
  }, {
    key: "invalidateStaleCache",
    value: (function () {
      var _invalidateStaleCache = (0, _asyncToGenerator2.default)(function* () {
        var invalidatedCount = 0;
        var reason = 'manual_refresh_cleanup';
        try {
          var memoryKeys = Array.from(this.cache.keys());
          for (var key of memoryKeys) {
            var cached = this.cache.get(key);
            if (cached && this.countTotalInsights(cached.result) === 0) {
              this.cache.delete(key);
              invalidatedCount++;
              console.log(`🧹 Invalidated stale memory cache: ${key.substring(0, 30)}...`);
            }
          }
          var allKeys = yield _asyncStorage.default.getAllKeys();
          var unifiedKeys = allKeys.filter(function (key) {
            return key.startsWith('unified:');
          });
          for (var _key of unifiedKeys) {
            try {
              var _cached = yield _asyncStorage.default.getItem(_key);
              if (_cached) {
                var parsed = JSON.parse(_cached);
                if (parsed.result && this.countTotalInsights(parsed.result) === 0) {
                  yield _asyncStorage.default.removeItem(_key);
                  invalidatedCount++;
                  console.log(`🧹 Removed stale AsyncStorage cache: ${_key.substring(0, 30)}...`);
                }
              }
            } catch (error) {
              console.warn(`⚠️ Failed to clean cache key ${_key}:`, error);
            }
          }
          console.log(`✅ Cache cleanup completed: ${invalidatedCount} stale entries removed`);
          return {
            invalidated: invalidatedCount,
            reason: reason
          };
        } catch (error) {
          console.error('❌ Cache cleanup failed:', error);
          return {
            invalidated: invalidatedCount,
            reason: 'cleanup_failed'
          };
        }
      });
      function invalidateStaleCache() {
        return _invalidateStaleCache.apply(this, arguments);
      }
      return invalidateStaleCache;
    }())
  }, {
    key: "analyzeTrackingTrends",
    value: function analyzeTrackingTrends(entries) {
      if (!Array.isArray(entries) || entries.length < 5) return [];
      var patterns = [];
      var hourCounts = new Array(24).fill(0);
      entries.forEach(function (entry) {
        var timestamp = entry.timestamp || entry.created_at;
        var hour = new Date(timestamp).getHours();
        hourCounts[hour]++;
      });
      var peakHours = hourCounts.map(function (count, hour) {
        return {
          hour: hour,
          count: count
        };
      }).sort(function (a, b) {
        return b.count - a.count;
      }).slice(0, 3);
      if (peakHours[0].count >= 3) {
        patterns.push({
          type: 'time_pattern',
          title: `${peakHours[0].hour}:00 Saatinde Yoğunluk`,
          description: `En çok kompülsiyon ${peakHours[0].hour}:00 saatinde yaşanıyor (${peakHours[0].count} kez).`,
          suggestion: 'Bu saatlerde önleyici teknikler uygulayın.',
          confidence: 0.8,
          severity: 'medium'
        });
      }
      var recentEntries = entries.slice(-10);
      var resistanceSum = recentEntries.reduce(function (sum, e) {
        return sum + (e.resistanceLevel || e.resistance_level || 5);
      }, 0);
      var avgResistance = resistanceSum / recentEntries.length;
      if (avgResistance >= 7) {
        patterns.push({
          type: 'progress_pattern',
          title: 'Güçlü Direnç Trendi',
          description: `Son kompülsiyonlarda ortalama ${avgResistance.toFixed(1)} direnç seviyesi.`,
          suggestion: 'Mükemmel ilerleme! Bu motivasyonu koruyun.',
          confidence: 0.9,
          severity: 'positive'
        });
      } else if (avgResistance <= 3) {
        patterns.push({
          type: 'warning_pattern',
          title: 'Düşük Direnç Uyarısı',
          description: `Son kompülsiyonlarda ortalama ${avgResistance.toFixed(1)} direnç seviyesi.`,
          suggestion: 'Terapi egzersizleri ve mindfulness teknikleri deneyin.',
          confidence: 0.85,
          severity: 'warning'
        });
      }
      return patterns;
    }
  }, {
    key: "generateFallbackInsights",
    value: function generateFallbackInsights(patterns, input) {
      var fallback = {
        therapeutic: [],
        progress: []
      };
      try {
        var _input$context7, _patterns$metadata;
        if (input.content && typeof input.content === 'object' && Array.isArray(input.content.compulsions)) {
          var compulsions = input.content.compulsions;
          var trackingPatterns = this.analyzeTrackingTrends(compulsions);
          trackingPatterns.forEach(function (pattern) {
            var insight = {
              text: pattern.description + ' ' + pattern.suggestion,
              category: pattern.type,
              priority: pattern.severity === 'positive' ? 'high' : 'medium',
              actionable: true,
              confidence: pattern.confidence,
              source: 'fallback_tracking'
            };
            if (pattern.severity === 'positive') {
              fallback.progress.push(insight);
            } else {
              fallback.therapeutic.push(insight);
            }
          });
        }
        if (patterns.temporal && patterns.temporal.length > 0) {
          var peakPattern = patterns.temporal[0];
          if (peakPattern.type === 'peak_hour' || peakPattern.frequency > 2) {
            fallback.therapeutic.push({
              text: `${peakPattern.timeOfDay || 'Belirli saatlerde'} daha yoğun aktivite görülüyor. Bu zamanlarda destek stratejilerini hatırlamak faydalı olabilir.`,
              category: 'temporal_awareness',
              priority: 'medium',
              actionable: true,
              confidence: 0.7,
              source: 'fallback_temporal'
            });
          }
        }
        if (patterns.behavioral && patterns.behavioral.length > 0) {
          var dominantPattern = patterns.behavioral.sort(function (a, b) {
            return (b.frequency || 0) - (a.frequency || 0);
          })[0];
          if (dominantPattern.trigger && dominantPattern.frequency > 1) {
            fallback.therapeutic.push({
              text: `En sık görülen tetik "${dominantPattern.trigger}" için alternatif başa çıkma stratejileri geliştirmek yararlı olabilir.`,
              category: 'behavioral_insight',
              priority: 'medium',
              actionable: true,
              confidence: 0.6,
              source: 'fallback_behavioral'
            });
          }
        }
        if (patterns.triggers && patterns.triggers.length > 0) {
          var commonTrigger = patterns.triggers[0];
          fallback.therapeutic.push({
            text: `Çevresel faktörlerin etkisini fark etmek önemli bir adım. Tetikleyici durumları önceden tanımak güçlendirici olabilir.`,
            category: 'environmental_awareness',
            priority: 'low',
            actionable: true,
            confidence: 0.5,
            source: 'fallback_environmental'
          });
        }
        if ((_input$context7 = input.context) != null && _input$context7.source) {
          fallback.progress.push({
            text: `Veri toplama ve takip süreci aktif. Bu tutarlılık, ilerlemeyi değerlendirmek için değerli bir kaynak oluşturuyor.`,
            category: 'progress_tracking',
            priority: 'low',
            actionable: true,
            confidence: 0.8,
            source: 'fallback_progress'
          });
        }
        var dataPoints = ((_patterns$metadata = patterns.metadata) == null ? void 0 : _patterns$metadata.dataPoints) || 0;
        if (dataPoints >= 5) {
          fallback.progress.push({
            text: `${dataPoints} veri noktası toplandı. Bu bilgiler zaman içinde daha detaylı kalıp analizi için yeterli olacak.`,
            category: 'data_sufficiency',
            priority: 'low',
            actionable: false,
            confidence: 0.9,
            source: 'fallback_data_quality'
          });
        }
        console.log(`🔄 Generated ${fallback.therapeutic.length + fallback.progress.length} fallback insights`);
      } catch (error) {
        console.warn('Fallback insight generation failed:', error);
        fallback.therapeutic.push({
          text: 'Veriler analiz ediliyor. Daha fazla veri toplandığında detaylı içgörüler sunulacak.',
          category: 'system_status',
          priority: 'low',
          actionable: false,
          confidence: 0.5,
          source: 'fallback_minimal'
        });
      }
      return fallback;
    }
  }, {
    key: "generateVoiceEnhancedInsights",
    value: function generateVoiceEnhancedInsights(voiceHints, patterns) {
      var insights = [];
      try {
        var voiceCategory = voiceHints.voiceCategory,
          voiceConfidence = voiceHints.voiceConfidence,
          voiceSuggestion = voiceHints.voiceSuggestion;
        switch (voiceCategory) {
          case 'OCD':
            insights.push({
              text: `Ses analizinde OKB ile ilişkili içerik tespit edildi. ${voiceSuggestion || 'Mevcut başa çıkma stratejilerinizi hatırlamak faydalı olabilir.'}`,
              category: 'voice_ocd_detection',
              priority: 'high',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            if (patterns.behavioral && patterns.behavioral.length > 0) {
              var dominantPattern = patterns.behavioral[0];
              insights.push({
                text: `Davranışsal kalıplar ve ses analizi birlikte değerlendirildiğinde, "${dominantPattern.trigger || 'belirli durumlar'}" için ERP teknikleri uygulamak yararlı olabilir.`,
                category: 'voice_pattern_correlation',
                priority: 'medium',
                actionable: true,
                confidence: Math.min(voiceConfidence, 0.8),
                source: 'voice_enhanced'
              });
            }
            break;
          case 'CBT':
            insights.push({
              text: `Bilişsel distorsyonlar ile ilgili düşünceler tespit edildi. ${voiceSuggestion || 'Düşünce-duygu-davranış üçgenini incelemek faydalı olabilir.'}`,
              category: 'voice_cbt_detection',
              priority: 'high',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            break;
          case 'MOOD':
            insights.push({
              text: `Duygu durum ile ilgili ifadeler algılandı. ${voiceSuggestion || 'Mood tracking verileriniz ile birlikte değerlendirildiğinde daha detaylı analiz yapılabilir.'}`,
              category: 'voice_mood_detection',
              priority: 'medium',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            break;
          case 'BREATHWORK':
            insights.push({
              text: `Nefes çalışması veya rahatlama ile ilgili gereksinim tespit edildi. ${voiceSuggestion || 'Derin nefes teknikleri şu anda yararlı olabilir.'}`,
              category: 'voice_breathwork_suggestion',
              priority: 'medium',
              actionable: true,
              confidence: voiceConfidence,
              source: 'voice_enhanced'
            });
            break;
          default:
            if (voiceConfidence > 0.5) {
              insights.push({
                text: `Ses analizinde önemli içerik tespit edildi. Bu durum için mevcut destek stratejilerinizi kullanmayı değerlendirebilirsiniz.`,
                category: 'voice_general_detection',
                priority: 'low',
                actionable: true,
                confidence: voiceConfidence,
                source: 'voice_enhanced'
              });
            }
        }
      } catch (error) {
        console.warn('Voice-enhanced insight generation failed:', error);
      }
      return insights;
    }
  }, {
    key: "persistToStorage",
    value: function () {
      var _persistToStorage = (0, _asyncToGenerator2.default)(function* (key, result) {
        try {
          yield _asyncStorage.default.setItem(key, JSON.stringify({
            result: result,
            expires: Date.now() + this.MODULE_TTLS.default
          }));
        } catch (error) {
          console.warn('Failed to persist to storage:', error);
        }
      });
      function persistToStorage(_x10, _x11) {
        return _persistToStorage.apply(this, arguments);
      }
      return persistToStorage;
    }()
  }, {
    key: "getFromSupabaseCache",
    value: (function () {
      var _getFromSupabaseCache = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          var _yield$supabaseServic = yield _supabase.default.supabaseClient.from('ai_cache').select('content, expires_at').eq('cache_key', key).maybeSingle(),
            data = _yield$supabaseServic.data,
            error = _yield$supabaseServic.error;
          if (error) {
            console.warn('⚠️ Supabase cache read error:', error);
            return null;
          }
          if (!data) {
            return null;
          }
          var now = new Date();
          var expiresAt = new Date(data.expires_at);
          if (now > expiresAt) {
            yield _supabase.default.supabaseClient.from('ai_cache').delete().eq('cache_key', key);
            return null;
          }
          return data.content;
        } catch (error) {
          console.warn('⚠️ Supabase cache read failed:', error);
          return null;
        }
      });
      function getFromSupabaseCache(_x12) {
        return _getFromSupabaseCache.apply(this, arguments);
      }
      return getFromSupabaseCache;
    }())
  }, {
    key: "setToSupabaseCache",
    value: function () {
      var _setToSupabaseCache = (0, _asyncToGenerator2.default)(function* (key, result) {
        try {
          var userId = key.split(':')[1];
          var ttlMs = this.isTestMode ? this.testTTL : this.MODULE_TTLS.default;
          var expiresAt = new Date(Date.now() + ttlMs).toISOString();
          var _yield$supabaseServic2 = yield _supabase.default.supabaseClient.from('ai_cache').upsert({
              cache_key: key,
              user_id: userId,
              content: result,
              expires_at: expiresAt
            }, {
              onConflict: 'cache_key'
            }),
            error = _yield$supabaseServic2.error;
          if (error) {
            console.warn('⚠️ Supabase cache write error:', error);
          } else {
            console.log('📦 Cached to Supabase:', key.substring(0, 30) + '...');
          }
        } catch (error) {
          console.warn('⚠️ Supabase cache write failed:', error);
        }
      });
      function setToSupabaseCache(_x13, _x14) {
        return _setToSupabaseCache.apply(this, arguments);
      }
      return setToSupabaseCache;
    }()
  }, {
    key: "setupInvalidationHooks",
    value: function setupInvalidationHooks() {
      var _this2 = this;
      this.invalidationHooks.set('compulsion_added', function () {
        var _ref26 = (0, _asyncToGenerator2.default)(function* (userId) {
          yield _this2.invalidateUserCache('patterns', userId);
          yield _this2.invalidateUserCache('insights', userId);
          yield _this2.invalidateUserCache('progress', userId);
          console.log('🔄 Cache invalidated: patterns + insights + progress (compulsion_added)');
        });
        return function (_x15) {
          return _ref26.apply(this, arguments);
        };
      }());
      this.invalidationHooks.set('cbt_record_added', function () {
        var _ref27 = (0, _asyncToGenerator2.default)(function* (userId) {
          yield _this2.invalidateUserCache('insights', userId);
        });
        return function (_x16) {
          return _ref27.apply(this, arguments);
        };
      }());
      this.invalidationHooks.set('mood_added', function () {
        var _ref28 = (0, _asyncToGenerator2.default)(function* (userId) {
          yield _this2.invalidateUserCache('all', userId);
        });
        return function (_x17) {
          return _ref28.apply(this, arguments);
        };
      }());
      this.invalidationHooks.set('manual_refresh', function () {
        _this2.cache.clear();
      });
    }
  }, {
    key: "triggerInvalidation",
    value: function () {
      var _triggerInvalidation = (0, _asyncToGenerator2.default)(function* (hook, userId) {
        var handler = this.invalidationHooks.get(hook);
        if (handler) {
          yield handler(userId);
        }
        try {
          var _yield$import4 = yield import("../../../hooks/useCacheInvalidation"),
            emitAIInvalidation = _yield$import4.emitAIInvalidation;
          emitAIInvalidation(hook, userId);
          console.log('🤖 React Query AI invalidation triggered:', hook);
        } catch (error) {
          console.warn('⚠️ Failed to emit AI cache invalidation:', error);
        }
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.CACHE_INVALIDATION, {
          hook: hook,
          userId: userId,
          timestamp: Date.now()
        });
      });
      function triggerInvalidation(_x18, _x19) {
        return _triggerInvalidation.apply(this, arguments);
      }
      return triggerInvalidation;
    }()
  }, {
    key: "invalidateUserCache",
    value: function () {
      var _invalidateUserCache = (0, _asyncToGenerator2.default)(function* (type, userId) {
        var _this3 = this;
        var keysToDelete = [];
        this.cache.forEach(function (_, key) {
          if (userId && !key.includes(userId)) return;
          if (type === 'all') {
            if (key.startsWith('unified:')) {
              keysToDelete.push(key);
            }
          } else {
            if (key.startsWith('unified:')) {
              keysToDelete.push(key);
            }
          }
        });
        var deletedCount = keysToDelete.length;
        keysToDelete.forEach(function (key) {
          return _this3.cache.delete(key);
        });
        if (deletedCount > 0) {
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.CACHE_INVALIDATION, {
            userId: userId || 'unknown',
            invalidationType: type,
            keysDeleted: deletedCount,
            cacheKeys: keysToDelete.slice(0, 3),
            timestamp: Date.now()
          });
          console.log(`🗑️ Cache invalidated: ${type} (${deletedCount} keys deleted)`);
        }
        yield this.invalidateSupabaseCache(type, userId);
      });
      function invalidateUserCache(_x20, _x21) {
        return _invalidateUserCache.apply(this, arguments);
      }
      return invalidateUserCache;
    }()
  }, {
    key: "invalidateSupabaseCache",
    value: (function () {
      var _invalidateSupabaseCache = (0, _asyncToGenerator2.default)(function* (type, userId) {
        try {
          var likePattern = userId ? `unified:${userId}:%` : 'unified:%';
          var _yield$supabaseServic3 = yield _supabase.default.supabaseClient.from('ai_cache').delete().like('cache_key', likePattern),
            error = _yield$supabaseServic3.error;
          if (error) {
            console.warn('⚠️ Supabase cache invalidation error:', error);
          } else {
            console.log(`🗑️ Supabase cache invalidated for ${type}${userId ? ` (user: ${userId})` : ''}`);
          }
        } catch (error) {
          console.warn('⚠️ Supabase cache invalidation failed:', error);
        }
      });
      function invalidateSupabaseCache(_x22, _x23) {
        return _invalidateSupabaseCache.apply(this, arguments);
      }
      return invalidateSupabaseCache;
    }())
  }, {
    key: "startCacheCleanup",
    value: function startCacheCleanup() {
      var _this4 = this;
      setInterval(function () {
        var now = Date.now();
        var keysToDelete = [];
        _this4.cache.forEach(function (value, key) {
          if (value.expires < now) {
            keysToDelete.push(key);
          }
        });
        keysToDelete.forEach(function (key) {
          return _this4.cache.delete(key);
        });
        if (keysToDelete.length > 0) {
          console.log(`🧹 Cleaned ${keysToDelete.length} expired cache entries`);
        }
      }, 60 * 60 * 1000);
    }
  }, {
    key: "predictMoodIntervention",
    value: function () {
      var _predictMoodIntervention = (0, _asyncToGenerator2.default)(function* (userId, recentMoodEntries, currentMoodState) {
        console.log('🔮 Starting predictive mood intervention analysis...');
        var startTime = Date.now();
        yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_REQUESTED, {
          userId: userId,
          dataType: 'predictive_mood_intervention',
          entryCount: recentMoodEntries.length,
          timestamp: startTime
        });
        try {
          var trendAnalysis = this.analyzeMoodTrends(recentMoodEntries);
          var riskFactors = this.identifyMoodRiskFactors(recentMoodEntries, trendAnalysis);
          var riskLevel = this.calculateMoodRiskLevel(riskFactors, trendAnalysis);
          var predictedDrop = this.predictMoodDrop(recentMoodEntries, trendAnalysis, riskFactors);
          var interventions = this.generateMoodInterventions(riskLevel, riskFactors, predictedDrop);
          var earlyWarning = this.checkEarlyWarningTriggers(riskLevel, predictedDrop, riskFactors);
          var result = {
            riskLevel: riskLevel,
            predictedDrop: predictedDrop,
            interventions: interventions,
            riskFactors: riskFactors,
            earlyWarning: earlyWarning
          };
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.INSIGHTS_DELIVERED, {
            userId: userId,
            source: 'predictive_mood_intervention',
            insightsCount: interventions.length,
            processingTime: Date.now() - startTime,
            riskLevel: riskLevel,
            earlyWarningTriggered: (earlyWarning == null ? void 0 : earlyWarning.triggered) || false
          });
          console.log(`✅ Predictive mood intervention completed: ${riskLevel} risk`);
          return result;
        } catch (error) {
          console.error('❌ Predictive mood intervention failed:', error);
          yield (0, _aiTelemetry.trackAIInteraction)(_aiTelemetry.AIEventType.SYSTEM_ERROR, {
            userId: userId,
            component: 'predictiveMoodIntervention',
            error: error instanceof Error ? error.message : String(error),
            processingTime: Date.now() - startTime
          });
          return {
            riskLevel: 'low',
            interventions: [{
              type: 'immediate',
              priority: 1,
              action: 'Düzenli mood takibine devam edin',
              reason: 'Veri analizi sırasında hata oluştu',
              effectivenessProbability: 0.5
            }],
            riskFactors: []
          };
        }
      });
      function predictMoodIntervention(_x24, _x25, _x26) {
        return _predictMoodIntervention.apply(this, arguments);
      }
      return predictMoodIntervention;
    }()
  }, {
    key: "analyzeMoodTrends",
    value: function analyzeMoodTrends(entries) {
      if (entries.length < 3) {
        return {
          trend: 'stable',
          slope: 0,
          volatility: 0,
          recentAverage: 50,
          weeklyChange: 0
        };
      }
      var sortedEntries = entries.sort(function (a, b) {
        return new Date(a.timestamp || a.created_at).getTime() - new Date(b.timestamp || b.created_at).getTime();
      });
      var scores = sortedEntries.map(function (e) {
        return e.mood_score || e.mood || 50;
      });
      var n = scores.length;
      var sumX = (n - 1) * n / 2;
      var sumY = scores.reduce(function (a, b) {
        return a + b;
      }, 0);
      var sumXY = scores.reduce(function (sum, y, x) {
        return sum + x * y;
      }, 0);
      var sumXX = (n - 1) * n * (2 * n - 1) / 6;
      var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
      var trend = 'stable';
      if (slope < -2) trend = 'declining';else if (slope > 2) trend = 'improving';
      var mean = sumY / n;
      var variance = scores.reduce(function (sum, score) {
        return sum + Math.pow(score - mean, 2);
      }, 0) / n;
      var volatility = Math.sqrt(variance);
      var recentEntries = sortedEntries.slice(-3);
      var recentAverage = recentEntries.reduce(function (sum, e) {
        return sum + (e.mood_score || e.mood || 50);
      }, 0) / recentEntries.length;
      var weeklyChange = entries.length >= 7 ? scores[scores.length - 1] - scores[Math.max(0, scores.length - 7)] : 0;
      return {
        trend: trend,
        slope: slope,
        volatility: volatility,
        recentAverage: recentAverage,
        weeklyChange: weeklyChange
      };
    }
  }, {
    key: "identifyMoodRiskFactors",
    value: function identifyMoodRiskFactors(entries, trendAnalysis) {
      var riskFactors = [];
      if (trendAnalysis.trend === 'declining' && Math.abs(trendAnalysis.slope) > 3) {
        riskFactors.push({
          factor: 'declining_trend',
          impact: Math.min(10, Math.abs(trendAnalysis.slope) / 2),
          confidence: 0.8
        });
      }
      if (trendAnalysis.volatility > 15) {
        riskFactors.push({
          factor: 'high_volatility',
          impact: trendAnalysis.volatility / 5,
          confidence: 0.7
        });
      }
      if (trendAnalysis.recentAverage < 35) {
        riskFactors.push({
          factor: 'low_recent_mood',
          impact: (50 - trendAnalysis.recentAverage) / 3,
          confidence: 0.9
        });
      }
      var recurringLowDays = this.detectRecurringLowMoodDays(entries);
      if (recurringLowDays.length > 0) {
        riskFactors.push({
          factor: 'recurring_low_days',
          impact: recurringLowDays.length * 2,
          confidence: 0.6
        });
      }
      var highImpactTriggers = this.analyzeHighImpactTriggers(entries);
      if (highImpactTriggers.length > 0) {
        riskFactors.push({
          factor: 'frequent_triggers',
          impact: highImpactTriggers.length * 1.5,
          confidence: 0.7
        });
      }
      return riskFactors;
    }
  }, {
    key: "calculateMoodRiskLevel",
    value: function calculateMoodRiskLevel(riskFactors, trendAnalysis) {
      var totalRisk = riskFactors.reduce(function (sum, factor) {
        return sum + factor.impact * factor.confidence;
      }, 0);
      var trendRisk = 0;
      if (trendAnalysis.trend === 'declining') trendRisk += 5;
      if (trendAnalysis.recentAverage < 30) trendRisk += 10;
      if (trendAnalysis.volatility > 20) trendRisk += 5;
      var combinedRisk = totalRisk + trendRisk;
      if (combinedRisk >= 25) return 'critical';
      if (combinedRisk >= 15) return 'high';
      if (combinedRisk >= 8) return 'medium';
      return 'low';
    }
  }, {
    key: "predictMoodDrop",
    value: function predictMoodDrop(entries, trendAnalysis, riskFactors) {
      if (riskFactors.length === 0 || trendAnalysis.trend !== 'declining') {
        return undefined;
      }
      var riskScore = riskFactors.reduce(function (sum, factor) {
        return sum + factor.impact * factor.confidence;
      }, 0);
      var likelihood = Math.min(0.95, riskScore / 20);
      var timeframe = '1-2 hafta';
      if (Math.abs(trendAnalysis.slope) > 5) timeframe = '3-5 gün';else if (Math.abs(trendAnalysis.slope) > 3) timeframe = '1 hafta';
      var currentLevel = trendAnalysis.recentAverage;
      var potentialDrop = Math.abs(trendAnalysis.slope) * 3;
      var severity = Math.min(10, potentialDrop);
      return {
        likelihood: likelihood,
        timeframe: timeframe,
        severity: severity
      };
    }
  }, {
    key: "generateMoodInterventions",
    value: function generateMoodInterventions(riskLevel, riskFactors, predictedDrop) {
      var interventions = [];
      if (riskLevel === 'high' || riskLevel === 'critical') {
        interventions.push({
          type: 'immediate',
          priority: 1,
          action: 'Hemen nefes egzersizi yapın (4-7-8 tekniği)',
          reason: 'Anksiyete ve stres seviyelerini hızla düşürür',
          effectivenessProbability: 0.85
        });
        interventions.push({
          type: 'immediate',
          priority: 2,
          action: 'Güvenilir bir arkadaş veya aile üyesi ile konuşun',
          reason: 'Sosyal destek mood iyileşmesinde kanıtlanmış etki gösterir',
          effectivenessProbability: 0.75
        });
      }
      if (riskLevel === 'medium' || riskLevel === 'high') {
        interventions.push({
          type: 'preventive',
          priority: 3,
          action: 'Günlük 10 dakika mindfulness meditasyonu başlatın',
          reason: 'Düzenli meditasyon mood stabilitesini artırır',
          effectivenessProbability: 0.70
        });
        interventions.push({
          type: 'preventive',
          priority: 4,
          action: 'Uyku rutininizi optimize edin (22:00-06:00)',
          reason: 'Düzenli uyku mood dengesi için kritik faktördür',
          effectivenessProbability: 0.80
        });
      }
      riskFactors.forEach(function (factor) {
        switch (factor.factor) {
          case 'declining_trend':
            interventions.push({
              type: 'preventive',
              priority: 5,
              action: 'Haftalık mood tracking pattern analizi yapın',
              reason: 'Trendinizi anlayarak proaktif adımlar atabilirsiniz',
              effectivenessProbability: 0.65
            });
            break;
          case 'high_volatility':
            interventions.push({
              type: 'preventive',
              priority: 6,
              action: 'Günlük yaşam rutininizi standardize edin',
              reason: 'Düzenli rutinler mood dalgalanmalarını azaltır',
              effectivenessProbability: 0.60
            });
            break;
          case 'frequent_triggers':
            interventions.push({
              type: 'preventive',
              priority: 7,
              action: 'Tetikleyici durumlar için başa çıkma stratejileri geliştirin',
              reason: 'Proaktif strateji mood düşüşlerini önler',
              effectivenessProbability: 0.70
            });
            break;
        }
      });
      if (riskLevel === 'critical') {
        interventions.push({
          type: 'emergency',
          priority: 0,
          action: 'Acil destek hatlarından yardım alın veya profesyonel destek arayın',
          reason: 'Kritik mood seviyelerinde profesyonel müdahale gereklidir',
          effectivenessProbability: 0.95
        });
      }
      return interventions.sort(function (a, b) {
        return a.priority - b.priority;
      });
    }
  }, {
    key: "checkEarlyWarningTriggers",
    value: function checkEarlyWarningTriggers(riskLevel, predictedDrop, riskFactors) {
      if (riskLevel === 'critical') {
        return {
          triggered: true,
          message: 'Kritik mood seviyesi tespit edildi. Lütfen hemen destek alın.',
          urgency: 'high'
        };
      }
      if (riskLevel === 'high' && (predictedDrop == null ? void 0 : predictedDrop.likelihood) > 0.7) {
        return {
          triggered: true,
          message: `Yüksek mood düşüş riski: ${predictedDrop.timeframe} içinde dikkatli olun.`,
          urgency: 'medium'
        };
      }
      if (riskLevel === 'medium' && riskFactors.length >= 3) {
        return {
          triggered: true,
          message: 'Birden fazla risk faktörü tespit edildi. Proaktif önlemler alın.',
          urgency: 'low'
        };
      }
      return undefined;
    }
  }, {
    key: "detectRecurringLowMoodDays",
    value: function detectRecurringLowMoodDays(entries) {
      var dayMoods = {};
      entries.forEach(function (entry) {
        var dayOfWeek = new Date(entry.timestamp || entry.created_at).getDay();
        var mood = entry.mood_score || entry.mood || 50;
        if (!dayMoods[dayOfWeek]) dayMoods[dayOfWeek] = [];
        dayMoods[dayOfWeek].push(mood);
      });
      var lowMoodDays = [];
      var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
      Object.entries(dayMoods).forEach(function (_ref29) {
        var _ref30 = (0, _slicedToArray2.default)(_ref29, 2),
          day = _ref30[0],
          moods = _ref30[1];
        var avgMood = moods.reduce(function (a, b) {
          return a + b;
        }, 0) / moods.length;
        if (avgMood < 40 && moods.length >= 2) {
          lowMoodDays.push(dayNames[parseInt(day)]);
        }
      });
      return lowMoodDays;
    }
  }, {
    key: "analyzeHighImpactTriggers",
    value: function analyzeHighImpactTriggers(entries) {
      var triggerImpact = {};
      entries.forEach(function (entry) {
        if (entry.triggers && Array.isArray(entry.triggers)) {
          entry.triggers.forEach(function (trigger) {
            var moodImpact = 50 - (entry.mood_score || entry.mood || 50);
            if (!triggerImpact[trigger]) {
              triggerImpact[trigger] = {
                totalImpact: 0,
                count: 0
              };
            }
            triggerImpact[trigger].totalImpact += moodImpact;
            triggerImpact[trigger].count += 1;
          });
        }
      });
      return Object.entries(triggerImpact).filter(function (_ref31) {
        var _ref32 = (0, _slicedToArray2.default)(_ref31, 2),
          _ = _ref32[0],
          data = _ref32[1];
        var avgImpact = data.totalImpact / data.count;
        return avgImpact > 10 && data.count >= 2;
      }).map(function (_ref33) {
        var _ref34 = (0, _slicedToArray2.default)(_ref33, 2),
          trigger = _ref34[0],
          _ = _ref34[1];
        return trigger;
      });
    }
  }, {
    key: "extractMoodTemporalPatterns",
    value: function extractMoodTemporalPatterns(moods) {
      try {
        var patterns = [];
        if (!moods || moods.length === 0) return patterns;
        var SAMPLE_SIZE = 30;
        var recentMoods = moods.filter(function (m) {
          return m.timestamp && m.mood_score !== undefined && m.energy_level !== undefined && m.anxiety_level !== undefined;
        }).sort(function (a, b) {
          return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
        }).slice(0, SAMPLE_SIZE);
        if (recentMoods.length === 0) return patterns;
        var weeklyMoodDelta = this.calculateWeeklyMoodDelta(recentMoods);
        if (weeklyMoodDelta) {
          patterns.push({
            type: 'mood_weekly_delta',
            title: 'Haftalık Mood Değişimi',
            description: `Son hafta mood ortalaması: ${weeklyMoodDelta.thisWeek.toFixed(1)}, önceki hafta: ${weeklyMoodDelta.lastWeek.toFixed(1)}`,
            pattern: `Haftalık delta: ${weeklyMoodDelta.delta > 0 ? '+' : ''}${weeklyMoodDelta.delta.toFixed(1)}`,
            confidence: weeklyMoodDelta.confidence,
            severity: weeklyMoodDelta.delta < -10 ? 'high' : weeklyMoodDelta.delta < -5 ? 'medium' : 'low',
            actionable: Math.abs(weeklyMoodDelta.delta) > 5,
            suggestion: weeklyMoodDelta.delta < -10 ? 'Mood düşüş trendi - destek almayı değerlendir' : weeklyMoodDelta.delta < -5 ? 'Hafif mood düşüşü - self-care rutinlerine odaklan' : weeklyMoodDelta.delta > 10 ? 'Güzel mood artışı - bu pozitif durumu sürdür' : 'Mood seviyesi stabil görünüyor',
            dashboardMetrics: {
              weeklyDelta: weeklyMoodDelta.delta,
              currentWeekAvg: weeklyMoodDelta.thisWeek,
              previousWeekAvg: weeklyMoodDelta.lastWeek,
              trend: weeklyMoodDelta.delta > 5 ? 'improving' : weeklyMoodDelta.delta < -5 ? 'declining' : 'stable',
              dataPoints: weeklyMoodDelta.dataPoints
            },
            source: 'unified_pipeline'
          });
        }
        var meaCorrelation = this.calculateMEACorrelations(recentMoods);
        if (meaCorrelation) {
          patterns.push({
            type: 'mood_mea_correlation',
            title: 'Mood-Enerji-Anksiyete İlişkisi',
            description: `MEA korelasyon analizi: ${meaCorrelation.profile}`,
            pattern: `Mood-Enerji: ${meaCorrelation.moodEnergy.toFixed(2)}, Mood-Anksiyete: ${meaCorrelation.moodAnxiety.toFixed(2)}`,
            confidence: meaCorrelation.confidence,
            severity: meaCorrelation.severity,
            actionable: meaCorrelation.actionable,
            suggestion: meaCorrelation.suggestion,
            dashboardMetrics: {
              moodEnergyCorrelation: meaCorrelation.moodEnergy,
              moodAnxietyCorrelation: meaCorrelation.moodAnxiety,
              energyAnxietyCorrelation: meaCorrelation.energyAnxiety,
              emotionalProfile: meaCorrelation.profileType,
              averageMood: meaCorrelation.averages.mood,
              averageEnergy: meaCorrelation.averages.energy,
              averageAnxiety: meaCorrelation.averages.anxiety,
              dataPoints: recentMoods.length
            },
            source: 'unified_pipeline'
          });
        }
        var weeklyData = {};
        recentMoods.forEach(function (m) {
          var dayOfWeek = new Date(m.timestamp).getDay();
          if (!weeklyData[dayOfWeek]) {
            weeklyData[dayOfWeek] = {
              mood: 0,
              energy: 0,
              anxiety: 0,
              count: 0
            };
          }
          weeklyData[dayOfWeek].mood += m.mood_score;
          weeklyData[dayOfWeek].energy += m.energy_level;
          weeklyData[dayOfWeek].anxiety += m.anxiety_level;
          weeklyData[dayOfWeek].count += 1;
        });
        var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
        var maxDailyPatterns = 3;
        Object.entries(weeklyData).sort(function (_ref35, _ref36) {
          var _ref37 = (0, _slicedToArray2.default)(_ref35, 2),
            a = _ref37[1];
          var _ref38 = (0, _slicedToArray2.default)(_ref36, 2),
            b = _ref38[1];
          return b.mood / b.count - a.mood / a.count;
        }).forEach(function (_ref39) {
          var _ref40 = (0, _slicedToArray2.default)(_ref39, 2),
            day = _ref40[0],
            data = _ref40[1];
          if (patterns.filter(function (p) {
            return p.type === 'mood_daily_pattern';
          }).length >= maxDailyPatterns) return;
          var avgMood = data.mood / data.count;
          var avgEnergy = data.energy / data.count;
          var avgAnxiety = data.anxiety / data.count;
          if (data.count >= 2 && (avgMood > 70 || avgMood < 40)) {
            patterns.push({
              type: 'mood_daily_pattern',
              title: `${dayNames[parseInt(day)]} Günü Pattern'i`,
              description: `${dayNames[parseInt(day)]} günü mood ortalaması: ${avgMood.toFixed(1)}`,
              pattern: `${dayNames[parseInt(day)]}: M${avgMood.toFixed(1)}/E${avgEnergy.toFixed(1)}/A${avgAnxiety.toFixed(1)}`,
              confidence: Math.min(0.8, data.count / recentMoods.length * 7),
              severity: avgMood < 40 ? 'medium' : 'low',
              actionable: avgMood < 40,
              suggestion: avgMood < 40 ? `${dayNames[parseInt(day)]} günü mood desteği planlayabilirsin` : `${dayNames[parseInt(day)]} günü pozitif pattern'ini sürdür`,
              dashboardMetrics: {
                dayOfWeek: parseInt(day),
                dayName: dayNames[parseInt(day)],
                averageMood: parseFloat(avgMood.toFixed(1)),
                averageEnergy: parseFloat(avgEnergy.toFixed(1)),
                averageAnxiety: parseFloat(avgAnxiety.toFixed(1)),
                sampleSize: data.count,
                significance: avgMood > 70 ? 'positive' : avgMood < 40 ? 'negative' : 'neutral'
              },
              source: 'unified_pipeline'
            });
          }
        });
        console.log(`📊 Extracted ${patterns.length} enhanced mood patterns with dashboard metrics`);
        return patterns;
      } catch (error) {
        console.warn('⚠️ Error extracting enhanced mood temporal patterns:', error);
        return [];
      }
    }
  }, {
    key: "calculateWeeklyMoodDelta",
    value: function calculateWeeklyMoodDelta(moods) {
      try {
        if (moods.length < 5) return null;
        var now = new Date();
        var oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        var twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);
        var thisWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= oneWeekAgo && date <= now;
        });
        var lastWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= twoWeeksAgo && date < oneWeekAgo;
        });
        if (thisWeekMoods.length === 0 || lastWeekMoods.length === 0) return null;
        var thisWeekAvg = thisWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / thisWeekMoods.length;
        var lastWeekAvg = lastWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / lastWeekMoods.length;
        var delta = thisWeekAvg - lastWeekAvg;
        var minDataPoints = Math.min(thisWeekMoods.length, lastWeekMoods.length);
        var confidence = Math.min(0.9, minDataPoints / 7 * 0.8);
        return {
          delta: delta,
          thisWeek: thisWeekAvg,
          lastWeek: lastWeekAvg,
          confidence: confidence,
          dataPoints: {
            thisWeek: thisWeekMoods.length,
            lastWeek: lastWeekMoods.length
          }
        };
      } catch (error) {
        console.warn('⚠️ Error calculating weekly mood delta:', error);
        return null;
      }
    }
  }, {
    key: "calculateMEACorrelations",
    value: function calculateMEACorrelations(moods) {
      try {
        if (moods.length < 5) return null;
        var moodScores = moods.map(function (m) {
          return m.mood_score;
        });
        var energyLevels = moods.map(function (m) {
          return m.energy_level;
        });
        var anxietyLevels = moods.map(function (m) {
          return m.anxiety_level;
        });
        var moodEnergyCorr = this.calculatePearsonCorrelation(moodScores, energyLevels);
        var moodAnxietyCorr = this.calculatePearsonCorrelation(moodScores, anxietyLevels);
        var energyAnxietyCorr = this.calculatePearsonCorrelation(energyLevels, anxietyLevels);
        var averages = {
          mood: moodScores.reduce(function (a, b) {
            return a + b;
          }, 0) / moodScores.length,
          energy: energyLevels.reduce(function (a, b) {
            return a + b;
          }, 0) / energyLevels.length,
          anxiety: anxietyLevels.reduce(function (a, b) {
            return a + b;
          }, 0) / anxietyLevels.length
        };
        var profileType = 'balanced';
        var profile = 'Dengeli Duygusal Profil';
        var severity = 'low';
        var suggestion = 'Duygusal dengen iyi görünüyor';
        var actionable = false;
        if (moodEnergyCorr > 0.5 && moodAnxietyCorr < -0.3) {
          profileType = 'optimal';
          profile = 'Optimal Duygusal Denge';
          suggestion = 'Mükemmel! Mood yüksek→enerji artıyor, anksiyete azalıyor';
        } else if (moodEnergyCorr < -0.3 && moodAnxietyCorr > 0.3) {
          profileType = 'depression_risk';
          profile = 'Depresif Eğilim Riski';
          severity = 'high';
          actionable = true;
          suggestion = 'Mood düştüğünde enerji de düşüyor, anksiyete artıyor - profesyonel destek değerlendir';
        } else if (energyAnxietyCorr > 0.6) {
          profileType = 'hyperarousal';
          profile = 'Yüksek Uyarılma Durumu';
          severity = 'medium';
          actionable = true;
          suggestion = 'Enerji ve anksiyete birlikte yükseliyor - sakinleştirici teknikler faydalı olabilir';
        } else if (averages.mood < 40 && Math.abs(moodAnxietyCorr) > 0.4) {
          profileType = 'anxious_low_mood';
          profile = 'Kaygılı Düşük Mood';
          severity = 'medium';
          actionable = true;
          suggestion = 'Düşük mood ve anksiyete ilişkisi tespit edildi - mood destekleyici aktiviteler dene';
        } else if (Math.abs(moodEnergyCorr) < 0.2 && Math.abs(moodAnxietyCorr) < 0.2) {
          profileType = 'disconnected';
          profile = 'Bağımsız Duygusal Durumlar';
          suggestion = 'Mood, enerji ve anksiyete bağımsız değişiyor - bu da normal olabilir';
        }
        var confidence = Math.min(0.9, moods.length / 20);
        return {
          moodEnergy: parseFloat(moodEnergyCorr.toFixed(3)),
          moodAnxiety: parseFloat(moodAnxietyCorr.toFixed(3)),
          energyAnxiety: parseFloat(energyAnxietyCorr.toFixed(3)),
          profile: profile,
          profileType: profileType,
          confidence: confidence,
          severity: severity,
          actionable: actionable,
          suggestion: suggestion,
          averages: {
            mood: parseFloat(averages.mood.toFixed(1)),
            energy: parseFloat(averages.energy.toFixed(1)),
            anxiety: parseFloat(averages.anxiety.toFixed(1))
          }
        };
      } catch (error) {
        console.warn('⚠️ Error calculating MEA correlations:', error);
        return null;
      }
    }
  }, {
    key: "calculatePearsonCorrelation",
    value: function calculatePearsonCorrelation(x, y) {
      if (x.length !== y.length || x.length === 0) return 0;
      var n = x.length;
      var meanX = x.reduce(function (a, b) {
        return a + b;
      }, 0) / n;
      var meanY = y.reduce(function (a, b) {
        return a + b;
      }, 0) / n;
      var numerator = 0;
      var sumXSquared = 0;
      var sumYSquared = 0;
      for (var i = 0; i < n; i++) {
        var xDiff = x[i] - meanX;
        var yDiff = y[i] - meanY;
        numerator += xDiff * yDiff;
        sumXSquared += xDiff * xDiff;
        sumYSquared += yDiff * yDiff;
      }
      var denominator = Math.sqrt(sumXSquared * sumYSquared);
      return denominator === 0 ? 0 : numerator / denominator;
    }
  }, {
    key: "calculateCorrelationPValue",
    value: function calculateCorrelationPValue(r, n) {
      if (n < 3 || Math.abs(r) >= 1) return null;
      try {
        var df = n - 2;
        var t = r * Math.sqrt(df) / Math.sqrt(1 - r * r);
        var p = this.approximateTTestPValue(Math.abs(t), df);
        return Math.min(1, Math.max(0, p));
      } catch (error) {
        console.warn('⚠️ P-value calculation failed:', error);
        return null;
      }
    }
  }, {
    key: "approximateTTestPValue",
    value: function approximateTTestPValue(t, df) {
      if (df > 30) {
        return 2 * (1 - this.normalCDF(t));
      }
      var criticalValues = [{
        df: 2,
        values: [4.303, 6.965, 9.925, 14.089]
      }, {
        df: 3,
        values: [3.182, 4.541, 5.841, 7.453]
      }, {
        df: 4,
        values: [2.776, 3.747, 4.604, 5.598]
      }, {
        df: 5,
        values: [2.571, 3.365, 4.032, 4.773]
      }, {
        df: 10,
        values: [2.228, 2.764, 3.169, 3.581]
      }, {
        df: 20,
        values: [2.086, 2.528, 2.845, 3.153]
      }, {
        df: 30,
        values: [2.042, 2.457, 2.750, 3.030]
      }];
      var closest = criticalValues.reduce(function (prev, curr) {
        return Math.abs(curr.df - df) < Math.abs(prev.df - df) ? curr : prev;
      });
      var pLevels = [0.1, 0.05, 0.02, 0.01];
      for (var i = 0; i < closest.values.length; i++) {
        if (t <= closest.values[i]) {
          if (i === 0) {
            var ratio = t / closest.values[0];
            return Math.max(0.1, 1.0 - ratio * 0.9);
          } else {
            var prevT = i === 0 ? 0 : closest.values[i - 1];
            var currT = closest.values[i];
            var prevP = i === 0 ? 1.0 : pLevels[i - 1];
            var currP = pLevels[i];
            var _ratio = (t - prevT) / (currT - prevT);
            return prevP - _ratio * (prevP - currP);
          }
        }
      }
      return 0.001;
    }
  }, {
    key: "normalCDF",
    value: function normalCDF(x) {
      var t = 1 / (1 + 0.2316419 * Math.abs(x));
      var d = 0.3989423 * Math.exp(-x * x / 2);
      var prob = d * t * (0.3193815 + t * (-0.3565638 + t * (1.7814779 + t * (-1.8212560 + t * 1.3302744))));
      return x >= 0 ? 1 - prob : prob;
    }
  }, {
    key: "processMoodAnalytics",
    value: function processMoodAnalytics(moods) {
      try {
        console.log(`🧮 Processing mood analytics for ${moods.length} entries`);
        if (!moods || !Array.isArray(moods) || moods.length < 3) {
          console.warn('⚠️ Insufficient mood data for analytics', (moods == null ? void 0 : moods.length) || 0);
          return null;
        }
        var recentMoods = moods.slice(0, 50);
        console.log(`📊 Using ${recentMoods.length} recent mood entries for analysis`);
        var weeklyDelta = this.calculateAnalyticsWeeklyDelta(recentMoods);
        var volatility = this.calculateAnalyticsVolatility(recentMoods);
        var baselines = this.calculateAnalyticsBaselines(recentMoods);
        var correlations = this.calculateAnalyticsMEACorrelations(recentMoods);
        var dataQuality = this.assessAnalyticsDataQuality(recentMoods);
        var profile = this.classifyAnalyticsEmotionalProfile(recentMoods, baselines, weeklyDelta, volatility, correlations);
        var bestTimes = this.analyzeAnalyticsBestTimes(recentMoods);
        var confidence = this.calculateAnalyticsGlobalConfidence(recentMoods, dataQuality, profile);
        var result = {
          weeklyDelta: weeklyDelta,
          volatility: volatility,
          baselines: baselines,
          correlations: correlations,
          profile: profile,
          bestTimes: bestTimes,
          sampleSize: recentMoods.length,
          dataQuality: dataQuality,
          confidence: confidence
        };
        console.log('✅ Mood analytics completed:', {
          weeklyDelta: weeklyDelta,
          volatility: volatility,
          profileType: profile == null ? void 0 : profile.type,
          confidence: confidence
        });
        return result;
      } catch (error) {
        console.error('❌ Mood analytics processing failed:', error);
        return null;
      }
    }
  }, {
    key: "extractEnvironmentalTriggers",
    value: function extractEnvironmentalTriggers(compulsions) {
      if (!compulsions || !Array.isArray(compulsions)) return [];
      var patterns = [];
      var triggerCounts = {};
      compulsions.forEach(function (c) {
        if (c.trigger && typeof c.trigger === 'string') {
          var keywords = c.trigger.toLowerCase().split(/\s+/);
          keywords.forEach(function (keyword) {
            if (keyword.length > 2) {
              triggerCounts[keyword] = (triggerCounts[keyword] || 0) + 1;
            }
          });
        }
      });
      for (var _ref41 of Object.entries(triggerCounts)) {
        var _ref42 = (0, _slicedToArray2.default)(_ref41, 2);
        var trigger = _ref42[0];
        var count = _ref42[1];
        if (count > 1) {
          patterns.push({
            type: 'environmental_trigger',
            trigger: trigger,
            frequency: count,
            confidence: this.calculatePatternConfidence(count)
          });
        }
      }
      return patterns;
    }
  }, {
    key: "analyzeTriggers",
    value: function analyzeTriggers(content) {
      try {
        var triggers = [];
        var envTriggers = this.extractEnvironmentalTriggers(content);
        triggers.push.apply(triggers, (0, _toConsumableArray2.default)(envTriggers));
        return triggers;
      } catch (error) {
        console.warn('⚠️ Error analyzing triggers:', error);
        return [];
      }
    }
  }, {
    key: "analyzeSeverityProgression",
    value: function analyzeSeverityProgression(content) {
      var _this5 = this;
      try {
        var progression = [];
        if (content.compulsions && Array.isArray(content.compulsions)) {
          var sortedCompulsions = content.compulsions.filter(function (c) {
            return c.timestamp && _this5.hasValidSeverity(c);
          }).sort(function (a, b) {
            return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
          });
          if (sortedCompulsions.length >= 3) {
            var first = sortedCompulsions.slice(0, Math.floor(sortedCompulsions.length / 3));
            var last = sortedCompulsions.slice(-Math.floor(sortedCompulsions.length / 3));
            var firstAvg = first.reduce(function (sum, c) {
              return sum + _this5.getCompulsionSeverity(c);
            }, 0) / first.length;
            var lastAvg = last.reduce(function (sum, c) {
              return sum + _this5.getCompulsionSeverity(c);
            }, 0) / last.length;
            if (Math.abs(lastAvg - firstAvg) > 0.5) {
              progression.push({
                type: 'severity_progression',
                trend: lastAvg > firstAvg ? 'improving' : 'declining',
                change: lastAvg - firstAvg,
                description: `Direnç seviyesi ${lastAvg > firstAvg ? 'artıyor' : 'azalıyor'}`,
                confidence: 0.8
              });
            }
          }
        }
        return progression;
      } catch (error) {
        console.warn('⚠️ Error analyzing severity progression:', error);
        return [];
      }
    }
  }, {
    key: "processCBTProgressAnalytics",
    value: function () {
      var _processCBTProgressAnalytics = (0, _asyncToGenerator2.default)(function* (input) {
        try {
          var content = input.content;
          var thoughtRecords = content.thoughtRecords || [];
          var timeframe = content.timeframe || 'month';
          console.log(`🧠 Processing CBT progress analytics for ${thoughtRecords.length} records`);
          if (thoughtRecords.length < 2) {
            return {
              distortionTrends: [],
              techniqueEffectiveness: [],
              progressAnalysis: 'Henüz yeterli veri yok. En az 2-3 düşünce kaydı gerekli.',
              recommendations: ['Düzenli düşünce kaydı tutmaya devam et'],
              riskLevel: 'low',
              nextFocus: 'Daha fazla düşünce kaydı tut',
              metadata: {
                analysisTime: Date.now(),
                recordCount: thoughtRecords.length,
                confidence: 0.3
              }
            };
          }
          var distortionTrends = this.analyzeCBTDistortionTrends(thoughtRecords);
          var techniqueEffectiveness = this.analyzeCBTTechniqueEffectiveness(thoughtRecords);
          var progressAnalysis = this.generateCBTProgressAnalysis(thoughtRecords, timeframe);
          var recommendations = this.generateCBTRecommendations(thoughtRecords, distortionTrends);
          var riskLevel = this.assessCBTRiskLevel(thoughtRecords);
          var nextFocus = this.determineCBTNextFocus(thoughtRecords, distortionTrends);
          return {
            distortionTrends: distortionTrends,
            techniqueEffectiveness: techniqueEffectiveness,
            progressAnalysis: progressAnalysis,
            recommendations: recommendations,
            riskLevel: riskLevel,
            nextFocus: nextFocus,
            metadata: {
              analysisTime: Date.now(),
              recordCount: thoughtRecords.length,
              confidence: this.calculateCBTProgressConfidence(thoughtRecords)
            }
          };
        } catch (error) {
          console.error('❌ CBT Progress Analytics failed:', error);
          return {
            distortionTrends: [],
            techniqueEffectiveness: [],
            progressAnalysis: 'Analiz sırasında bir hata oluştu. Lütfen daha sonra tekrar deneyin.',
            recommendations: ['Tekrar deneyebilirsin'],
            riskLevel: 'low',
            nextFocus: 'Sistem hatası nedeniyle belirlenemedi',
            metadata: {
              analysisTime: Date.now(),
              recordCount: 0,
              confidence: 0,
              error: error.message
            }
          };
        }
      });
      function processCBTProgressAnalytics(_x27) {
        return _processCBTProgressAnalytics.apply(this, arguments);
      }
      return processCBTProgressAnalytics;
    }()
  }, {
    key: "analyzeCBTDistortionTrends",
    value: function analyzeCBTDistortionTrends(records) {
      var distortionCounts = new Map();
      records.forEach(function (record, index) {
        if (record.distortions && Array.isArray(record.distortions)) {
          record.distortions.forEach(function (distortion) {
            if (!distortionCounts.has(distortion)) {
              distortionCounts.set(distortion, []);
            }
            distortionCounts.get(distortion).push(index);
          });
        }
      });
      var trends = [];
      distortionCounts.forEach(function (occurrences, distortion) {
        if (occurrences.length >= 2) {
          var totalRecords = records.length;
          var midPoint = totalRecords / 2;
          var earlyOccurrences = occurrences.filter(function (idx) {
            return idx < midPoint;
          }).length;
          var lateOccurrences = occurrences.filter(function (idx) {
            return idx >= midPoint;
          }).length;
          var earlyRate = earlyOccurrences / Math.ceil(midPoint);
          var lateRate = lateOccurrences / Math.floor(totalRecords - midPoint);
          var change = lateRate - earlyRate;
          var trend = 'stable';
          if (change < -0.1) trend = 'improving';else if (change > 0.1) trend = 'declining';
          trends.push({
            distortion: distortion,
            trend: trend,
            change: Math.round(change * 100) / 100
          });
        }
      });
      return trends.sort(function (a, b) {
        return Math.abs(b.change) - Math.abs(a.change);
      }).slice(0, 5);
    }
  }, {
    key: "analyzeCBTTechniqueEffectiveness",
    value: function analyzeCBTTechniqueEffectiveness(records) {
      var techniques = [];
      var avgMoodImprovement = records.length > 0 ? records.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / records.length : 0;
      if (avgMoodImprovement > 0) {
        techniques.push({
          technique: 'Düşünce Kaydı',
          effectiveness: Math.min(10, Math.round(avgMoodImprovement * 10) / 10),
          confidence: records.length >= 5 ? 0.9 : 0.6
        });
      }
      var evidenceRecords = records.filter(function (r) {
        return r.evidenceFor && r.evidenceAgainst;
      });
      if (evidenceRecords.length > 0) {
        var evidenceAvgImprovement = evidenceRecords.reduce(function (sum, r) {
          return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
        }, 0) / evidenceRecords.length;
        techniques.push({
          technique: 'Kanıt Toplama',
          effectiveness: Math.min(10, Math.round(evidenceAvgImprovement * 10) / 10),
          confidence: evidenceRecords.length >= 3 ? 0.8 : 0.5
        });
      }
      return techniques.slice(0, 3);
    }
  }, {
    key: "generateCBTProgressAnalysis",
    value: function generateCBTProgressAnalysis(records, timeframe) {
      var recordCount = records.length;
      var avgMoodImprovement = records.length > 0 ? records.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / records.length : 0;
      var recentRecords = records.slice(0, Math.min(5, records.length));
      var recentAvgImprovement = recentRecords.length > 0 ? recentRecords.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / recentRecords.length : 0;
      if (recordCount < 5) {
        return `${recordCount} düşünce kaydın var. CBT yolculuğunun başlangıcındasın ve ortalama ${avgMoodImprovement.toFixed(1)} puanlık mood iyileşmesi sağlıyorsun.`;
      } else if (avgMoodImprovement >= 2) {
        return `${recordCount} kayıtla güçlü bir ilerleme gösteriyorsun. Ortalama ${avgMoodImprovement.toFixed(1)} puanlık mood iyileşmesi, CBT tekniklerinin sana uygun olduğunu gösteriyor.`;
      } else if (avgMoodImprovement >= 1) {
        return `${recordCount} kayıtla istikrarlı bir gelişim süreci yaşıyorsun. ${avgMoodImprovement.toFixed(1)} puanlık ortalama iyileşme, düzenli pratikle artmaya devam edecek.`;
      } else {
        return `${recordCount} kayıt tamamladın. Mood iyileşmesi henüz beklenen seviyede değil ama bu normal - CBT becerileri zaman içinde gelişir.`;
      }
    }
  }, {
    key: "generateCBTRecommendations",
    value: function generateCBTRecommendations(records, distortionTrends) {
      var recommendations = [];
      if (records.length < 10) {
        recommendations.push('Daha sık düşünce kaydı tutarak pattern\'lerin daha net görünmesini sağla');
      }
      var avgMoodImprovement = records.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / records.length;
      if (avgMoodImprovement < 1) {
        recommendations.push('Kanıt toplama adımına daha fazla zaman ayırarak düşüncelerini daha objektif değerlendir');
      }
      var decliningDistortions = distortionTrends.filter(function (d) {
        return d.trend === 'declining';
      });
      if (decliningDistortions.length > 0) {
        recommendations.push(`${decliningDistortions[0].distortion} konusunda ekstra dikkat göster - sıklığı artış gösteriyor`);
      }
      var evidenceRecords = records.filter(function (r) {
        return r.evidenceFor && r.evidenceAgainst;
      });
      if (evidenceRecords.length < records.length * 0.7) {
        recommendations.push('Lehine ve aleyhine kanıtları daha düzenli doldurmaya odaklan');
      }
      return recommendations.slice(0, 3);
    }
  }, {
    key: "assessCBTRiskLevel",
    value: function assessCBTRiskLevel(records) {
      var recentRecords = records.slice(0, 5);
      var avgMoodBefore = recentRecords.reduce(function (sum, r) {
        return sum + (r.moodBefore || 5);
      }, 0) / recentRecords.length;
      var avgMoodImprovement = recentRecords.reduce(function (sum, r) {
        return sum + ((r.moodAfter || 5) - (r.moodBefore || 5));
      }, 0) / recentRecords.length;
      if (avgMoodBefore <= 3 && avgMoodImprovement < 0.5) {
        return 'high';
      } else if (avgMoodBefore <= 4 || avgMoodImprovement < 1) {
        return 'medium';
      } else {
        return 'low';
      }
    }
  }, {
    key: "determineCBTNextFocus",
    value: function determineCBTNextFocus(records, distortionTrends) {
      var decliningDistortions = distortionTrends.filter(function (d) {
        return d.trend === 'declining';
      });
      if (decliningDistortions.length > 0) {
        return `${decliningDistortions[0].distortion} çarpıtmasına odaklan`;
      }
      var evidenceRecords = records.filter(function (r) {
        return r.evidenceFor && r.evidenceAgainst;
      });
      if (evidenceRecords.length < records.length * 0.5) {
        return 'Kanıt toplama becerilerin geliştir';
      }
      if (records.length < 15) {
        return 'Düzenli kayıt tutma alışkanlığın güçlendir';
      }
      return 'Reframe tekniklerini çeşitlendir';
    }
  }, {
    key: "calculateCBTProgressConfidence",
    value: function calculateCBTProgressConfidence(records) {
      if (records.length < 3) return 0.3;
      if (records.length < 7) return 0.6;
      if (records.length < 15) return 0.8;
      return 0.9;
    }
  }, {
    key: "calculatePatternConfidence",
    value: function calculatePatternConfidence(dataPoints) {
      if (dataPoints < 2) return 0.2;
      if (dataPoints < 5) return 0.4;
      if (dataPoints < 10) return 0.6;
      if (dataPoints < 20) return 0.8;
      return Math.min(0.95, 0.8 + (dataPoints - 20) * 0.01);
    }
  }, {
    key: "extractMoodTemporalPatternsByHour",
    value: function extractMoodTemporalPatternsByHour(data) {
      var patterns = [];
      if (data.moods && Array.isArray(data.moods)) {
        var SAMPLE_SIZE = 20;
        var recentMoods = data.moods.slice(0, SAMPLE_SIZE).filter(function (mood) {
          return mood.timestamp || mood.created_at;
        });
        if (recentMoods.length < 5) return [];
        var moodsByHour = new Array(24).fill(0).map(function () {
          return {
            total: 0,
            count: 0
          };
        });
        recentMoods.forEach(function (mood) {
          var hour = new Date(mood.timestamp || mood.created_at).getHours();
          moodsByHour[hour].total += mood.mood_score || 5;
          moodsByHour[hour].count += 1;
        });
        var hourlyAverages = moodsByHour.map(function (h, hour) {
          return {
            hour: hour,
            average: h.count > 0 ? h.total / h.count : 5,
            count: h.count
          };
        }).filter(function (h) {
          return h.count >= 2 && h.average < 4;
        });
        if (hourlyAverages.length > 0) {
          patterns.push({
            type: 'low_mood_temporal_hourly',
            hours: hourlyAverages.slice(0, 3).map(function (h) {
              return h.hour;
            }),
            averageScore: hourlyAverages.reduce(function (sum, h) {
              return sum + h.average;
            }, 0) / hourlyAverages.length,
            confidence: Math.min(0.7, hourlyAverages.length / 10),
            sampleSize: recentMoods.length
          });
        }
      }
      return patterns;
    }
  }, {
    key: "groupByTimeWindow",
    value: function groupByTimeWindow(compulsions, windowDays) {
      var windows = [];
      var sortedCompulsions = (0, _toConsumableArray2.default)(compulsions).sort(function (a, b) {
        return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
      });
      if (sortedCompulsions.length === 0) return windows;
      var startTime = new Date(sortedCompulsions[0].timestamp).getTime();
      var windowMs = windowDays * 24 * 60 * 60 * 1000;
      var currentWindow = [];
      var currentWindowStart = startTime;
      sortedCompulsions.forEach(function (c) {
        var cTime = new Date(c.timestamp).getTime();
        if (cTime >= currentWindowStart + windowMs) {
          if (currentWindow.length > 0) windows.push(currentWindow);
          currentWindow = [c];
          currentWindowStart = Math.floor((cTime - startTime) / windowMs) * windowMs + startTime;
        } else {
          currentWindow.push(c);
        }
      });
      if (currentWindow.length > 0) windows.push(currentWindow);
      return windows;
    }
  }, {
    key: "getCompulsionSeverity",
    value: function getCompulsionSeverity(compulsion) {
      return compulsion.severity || compulsion.resistanceLevel || compulsion.resistance_level || compulsion.intensity || 5;
    }
  }, {
    key: "hasValidSeverity",
    value: function hasValidSeverity(compulsion) {
      return compulsion.severity !== undefined || compulsion.resistanceLevel !== undefined || compulsion.resistance_level !== undefined || compulsion.intensity !== undefined;
    }
  }, {
    key: "calculateAverageSeverity",
    value: function calculateAverageSeverity(compulsions) {
      var _this6 = this;
      if (!compulsions || !Array.isArray(compulsions) || compulsions.length === 0) return 0;
      var total = compulsions.reduce(function (sum, c) {
        return sum + _this6.getCompulsionSeverity(c);
      }, 0);
      return total / compulsions.length;
    }
  }, {
    key: "calculateTypeFrequency",
    value: function calculateTypeFrequency(compulsions) {
      var freq = {};
      if (!compulsions || !Array.isArray(compulsions)) return freq;
      compulsions.forEach(function (c) {
        if (c.type) {
          freq[c.type] = (freq[c.type] || 0) + 1;
        }
      });
      return freq;
    }
  }, {
    key: "extractDayOfWeekPattern",
    value: function extractDayOfWeekPattern(compulsions) {
      if (!compulsions || !Array.isArray(compulsions)) return null;
      var dayCounts = new Array(7).fill(0);
      compulsions.forEach(function (c) {
        var day = new Date(c.timestamp).getDay();
        dayCounts[day]++;
      });
      var maxCount = Math.max.apply(Math, (0, _toConsumableArray2.default)(dayCounts));
      var avgCount = dayCounts.reduce(function (sum, count) {
        return sum + count;
      }, 0) / 7;
      if (maxCount > avgCount * 1.5) {
        var peakDay = dayCounts.indexOf(maxCount);
        var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
        return {
          type: 'day_of_week_pattern',
          peakDay: peakDay,
          dayName: dayNames[peakDay],
          frequency: maxCount,
          confidence: this.calculatePatternConfidence(maxCount)
        };
      }
      return null;
    }
  }, {
    key: "extractTextPatterns",
    value: function extractTextPatterns(content) {
      var patterns = {
        behavioral: [],
        triggers: []
      };
      var text = content.toLowerCase();
      var behavioralKeywords = ['tekrar', 'kontrol', 'temizlik', 'sayma', 'sıralama'];
      behavioralKeywords.forEach(function (keyword) {
        if (text.includes(keyword)) {
          patterns.behavioral.push({
            type: 'text_behavioral',
            keyword: keyword,
            context: text,
            confidence: 0.6
          });
        }
      });
      var triggerKeywords = ['stres', 'endişe', 'korku', 'kirli', 'güvenlik'];
      triggerKeywords.forEach(function (keyword) {
        if (text.includes(keyword)) {
          patterns.triggers.push({
            type: 'text_trigger',
            trigger: keyword,
            context: text,
            confidence: 0.5
          });
        }
      });
      return patterns;
    }
  }, {
    key: "calculateAnalyticsVolatility",
    value: function calculateAnalyticsVolatility(moods) {
      try {
        if (moods.length < 2) return 0;
        var scores = moods.map(function (m) {
          return m.mood_score;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        if (scores.length < 2) return 0;
        var sorted = (0, _toConsumableArray2.default)(scores).sort(function (a, b) {
          return a - b;
        });
        var p5Index = Math.floor(sorted.length * 0.05);
        var p95Index = Math.ceil(sorted.length * 0.95) - 1;
        var p5Value = sorted[p5Index];
        var p95Value = sorted[p95Index];
        var winsorized = scores.map(function (s) {
          return Math.min(Math.max(s, p5Value), p95Value);
        });
        var mean = winsorized.reduce(function (sum, s) {
          return sum + s;
        }, 0) / winsorized.length;
        var variance = winsorized.reduce(function (sum, s) {
          return sum + Math.pow(s - mean, 2);
        }, 0) / winsorized.length;
        return Math.sqrt(variance);
      } catch (error) {
        console.warn('⚠️ Volatility calculation failed:', error);
        return 0;
      }
    }
  }, {
    key: "calculateAnalyticsBaselines",
    value: function calculateAnalyticsBaselines(moods) {
      try {
        if (moods.length === 0) return {
          mood: 50,
          energy: 50,
          anxiety: 50
        };
        var recent14Days = moods.slice(0, Math.min(50, moods.length));
        var moodScores = recent14Days.map(function (m) {
          return m.mood_score;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        var energyScores = recent14Days.map(function (m) {
          return m.energy_level;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        var anxietyScores = recent14Days.map(function (m) {
          return m.anxiety_level;
        }).filter(function (s) {
          return s !== null && s !== undefined;
        });
        return {
          mood: moodScores.length > 0 ? moodScores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / moodScores.length : 50,
          energy: energyScores.length > 0 ? energyScores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / energyScores.length : 50,
          anxiety: anxietyScores.length > 0 ? anxietyScores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / anxietyScores.length : 50
        };
      } catch (error) {
        console.warn('⚠️ Baselines calculation failed:', error);
        return {
          mood: 50,
          energy: 50,
          anxiety: 50
        };
      }
    }
  }, {
    key: "calculateAnalyticsWeeklyDelta",
    value: function calculateAnalyticsWeeklyDelta(moods) {
      try {
        var now = new Date();
        var oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        var twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);
        var thisWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= oneWeekAgo && date <= now;
        });
        var lastWeekMoods = moods.filter(function (m) {
          var date = new Date(m.timestamp);
          return date >= twoWeeksAgo && date < oneWeekAgo;
        });
        if (thisWeekMoods.length < 2 || lastWeekMoods.length < 2) {
          var threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);
          var sixDaysAgo = new Date(now.getTime() - 6 * 24 * 60 * 60 * 1000);
          thisWeekMoods = moods.filter(function (m) {
            var date = new Date(m.timestamp);
            return date >= threeDaysAgo && date <= now;
          });
          lastWeekMoods = moods.filter(function (m) {
            var date = new Date(m.timestamp);
            return date >= sixDaysAgo && date < threeDaysAgo;
          });
        }
        if (thisWeekMoods.length === 0 || lastWeekMoods.length === 0) return 0;
        var thisWeekAvg = thisWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / thisWeekMoods.length;
        var lastWeekAvg = lastWeekMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / lastWeekMoods.length;
        return thisWeekAvg - lastWeekAvg;
      } catch (error) {
        console.warn('⚠️ Weekly delta calculation failed:', error);
        return 0;
      }
    }
  }, {
    key: "calculateVolatility",
    value: function calculateVolatility(moods) {
      try {
        if (moods.length < 3) return 0;
        var twoWeeksAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);
        var recentMoods = moods.filter(function (m) {
          return new Date(m.timestamp) >= twoWeeksAgo;
        });
        if (recentMoods.length < 3) return 0;
        var moodScores = recentMoods.map(function (m) {
          return m.mood_score;
        });
        var sorted = (0, _toConsumableArray2.default)(moodScores).sort(function (a, b) {
          return a - b;
        });
        var p5Index = Math.floor(0.05 * sorted.length);
        var p95Index = Math.floor(0.95 * sorted.length);
        var p5Value = sorted[p5Index];
        var p95Value = sorted[p95Index];
        var winsorized = moodScores.map(function (score) {
          if (score < p5Value) return p5Value;
          if (score > p95Value) return p95Value;
          return score;
        });
        var mean = winsorized.reduce(function (sum, score) {
          return sum + score;
        }, 0) / winsorized.length;
        var variance = winsorized.reduce(function (sum, score) {
          return sum + Math.pow(score - mean, 2);
        }, 0) / winsorized.length;
        return Math.sqrt(variance);
      } catch (error) {
        console.warn('⚠️ Volatility calculation failed:', error);
        return 0;
      }
    }
  }, {
    key: "calculateBaselines",
    value: function calculateBaselines(moods) {
      try {
        var twoWeeksAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);
        var recentMoods = moods.filter(function (m) {
          return new Date(m.timestamp) >= twoWeeksAgo;
        });
        if (recentMoods.length === 0) {
          return {
            mood: 50,
            energy: 50,
            anxiety: 50
          };
        }
        var avgMood = recentMoods.reduce(function (sum, m) {
          return sum + m.mood_score;
        }, 0) / recentMoods.length;
        var avgEnergy = recentMoods.reduce(function (sum, m) {
          return sum + m.energy_level;
        }, 0) / recentMoods.length;
        var avgAnxiety = recentMoods.reduce(function (sum, m) {
          return sum + m.anxiety_level;
        }, 0) / recentMoods.length;
        return {
          mood: parseFloat(avgMood.toFixed(1)),
          energy: parseFloat(avgEnergy.toFixed(1)),
          anxiety: parseFloat(avgAnxiety.toFixed(1))
        };
      } catch (error) {
        console.warn('⚠️ Baselines calculation failed:', error);
        return {
          mood: 50,
          energy: 50,
          anxiety: 50
        };
      }
    }
  }, {
    key: "calculateAnalyticsMEACorrelations",
    value: function calculateAnalyticsMEACorrelations(moods) {
      try {
        var correlations = {};
        if (moods.length < 10) {
          return {
            moodEnergy: {
              r: null,
              n: moods.length,
              p: null
            },
            moodAnxiety: {
              r: null,
              n: moods.length,
              p: null
            },
            energyAnxiety: {
              r: null,
              n: moods.length,
              p: null
            }
          };
        }
        var moodScores = moods.map(function (m) {
          return m.mood_score;
        });
        var energyLevels = moods.map(function (m) {
          return m.energy_level;
        });
        var anxietyLevels = moods.map(function (m) {
          return m.anxiety_level;
        });
        var moodEnergyR = this.calculatePearsonCorrelation(moodScores, energyLevels);
        var moodAnxietyR = this.calculatePearsonCorrelation(moodScores, anxietyLevels);
        var energyAnxietyR = this.calculatePearsonCorrelation(energyLevels, anxietyLevels);
        var moodEnergyP = this.calculateCorrelationPValue(moodEnergyR, moods.length);
        var moodAnxietyP = this.calculateCorrelationPValue(moodAnxietyR, moods.length);
        var energyAnxietyP = this.calculateCorrelationPValue(energyAnxietyR, moods.length);
        return {
          moodEnergy: {
            r: parseFloat(moodEnergyR.toFixed(3)),
            n: moods.length,
            p: moodEnergyP ? parseFloat(moodEnergyP.toFixed(4)) : null
          },
          moodAnxiety: {
            r: parseFloat(moodAnxietyR.toFixed(3)),
            n: moods.length,
            p: moodAnxietyP ? parseFloat(moodAnxietyP.toFixed(4)) : null
          },
          energyAnxiety: {
            r: parseFloat(energyAnxietyR.toFixed(3)),
            n: moods.length,
            p: energyAnxietyP ? parseFloat(energyAnxietyP.toFixed(4)) : null
          }
        };
      } catch (error) {
        console.warn('⚠️ MEA correlations calculation failed:', error);
        return {};
      }
    }
  }, {
    key: "assessDataQuality",
    value: function assessDataQuality(moods) {
      try {
        var qualityScore = 0;
        var sampleSizeScore = Math.min(0.4, moods.length / 50 * 0.4);
        qualityScore += sampleSizeScore;
        var completeMoods = moods.filter(function (m) {
          return m.mood_score !== undefined && m.energy_level !== undefined && m.anxiety_level !== undefined;
        });
        var missingRatio = 1 - completeMoods.length / moods.length;
        var missingScore = Math.max(0, 0.3 - missingRatio * 0.3);
        qualityScore += missingScore;
        var moodScores = completeMoods.map(function (m) {
          return m.mood_score;
        });
        if (moodScores.length > 0) {
          var mean = moodScores.reduce(function (sum, score) {
            return sum + score;
          }, 0) / moodScores.length;
          var std = Math.sqrt(moodScores.reduce(function (sum, score) {
            return sum + Math.pow(score - mean, 2);
          }, 0) / moodScores.length);
          var outliers = moodScores.filter(function (score) {
            return Math.abs(score - mean) > 2 * std;
          });
          var outlierRatio = outliers.length / moodScores.length;
          var outlierScore = Math.max(0, 0.3 - outlierRatio * 0.3);
          qualityScore += outlierScore;
        }
        return Math.min(1, qualityScore);
      } catch (error) {
        console.warn('⚠️ Data quality assessment failed:', error);
        return 0.5;
      }
    }
  }, {
    key: "classifyEmotionalProfile",
    value: function classifyEmotionalProfile(baselines, weeklyDelta, volatility, sampleSize) {
      try {
        var rationale = [];
        var profileType = 'stable';
        var confidence = 0.5;
        if (baselines.mood < 40 && baselines.anxiety > 60) {
          profileType = 'stressed';
          rationale.push(`Düşük mood (${baselines.mood}) ve yüksek anksiyete (${baselines.anxiety})`);
          confidence = 0.8;
        } else if (volatility > 15) {
          profileType = 'volatile';
          rationale.push(`Yüksek mood volatilitesi (${volatility.toFixed(1)})`);
          confidence = 0.7;
        } else if (baselines.energy < 40 && baselines.mood < 55) {
          profileType = 'fatigued';
          rationale.push(`Düşük enerji (${baselines.energy}) ve orta-düşük mood (${baselines.mood})`);
          confidence = 0.75;
        } else if (weeklyDelta > 8 && baselines.mood >= 40 && baselines.mood <= 60) {
          profileType = 'recovering';
          rationale.push(`Pozitif haftalık trend (+${weeklyDelta.toFixed(1)}) ve orta mood`);
          confidence = 0.7;
        } else if (baselines.mood > 60 && volatility < 10 && baselines.anxiety < 50) {
          profileType = 'resilient';
          rationale.push(`Yüksek mood (${baselines.mood}), düşük volatilite (${volatility.toFixed(1)}), düşük anksiyete`);
          confidence = 0.85;
        } else if (baselines.mood > 70 && volatility < 12) {
          profileType = 'elevated';
          rationale.push(`Yüksek mood seviyesi (${baselines.mood}) ve stabil durum`);
          confidence = 0.75;
        } else if (volatility < 8 && Math.abs(weeklyDelta) < 5) {
          profileType = 'stable';
          rationale.push(`Düşük volatilite (${volatility.toFixed(1)}) ve minimal haftalık değişim`);
          confidence = 0.6;
        }
        var sampleSizeMultiplier = Math.min(1, sampleSize / 20);
        confidence = confidence * sampleSizeMultiplier;
        return {
          type: profileType,
          confidence: parseFloat(confidence.toFixed(3)),
          rationale: rationale
        };
      } catch (error) {
        console.warn('⚠️ Emotional profile classification failed:', error);
        return {
          type: 'stable',
          confidence: 0.3,
          rationale: ['Profil sınıflaması başarısız - varsayılan stabil profil']
        };
      }
    }
  }, {
    key: "analyzeBestTimes",
    value: function analyzeBestTimes(moods) {
      try {
        if (moods.length < 7) {
          return {
            confidence: 0.1
          };
        }
        var dayStats = {};
        var hourStats = {};
        moods.forEach(function (m) {
          var date = new Date(m.timestamp);
          var dayOfWeek = date.getDay();
          var hour = date.getHours();
          if (!dayStats[dayOfWeek]) dayStats[dayOfWeek] = {
            total: 0,
            count: 0
          };
          dayStats[dayOfWeek].total += m.mood_score;
          dayStats[dayOfWeek].count += 1;
          if (!hourStats[hour]) hourStats[hour] = {
            total: 0,
            count: 0
          };
          hourStats[hour].total += m.mood_score;
          hourStats[hour].count += 1;
        });
        var bestDay = '';
        var bestDayScore = 0;
        var dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
        Object.entries(dayStats).forEach(function (_ref43) {
          var _ref44 = (0, _slicedToArray2.default)(_ref43, 2),
            day = _ref44[0],
            stats = _ref44[1];
          if (stats.count >= 2) {
            var avgScore = stats.total / stats.count;
            if (avgScore > bestDayScore) {
              bestDayScore = avgScore;
              bestDay = dayNames[parseInt(day)];
            }
          }
        });
        var bestTimeSlot = '';
        var bestTimeScore = 0;
        Object.entries(hourStats).forEach(function (_ref45) {
          var _ref46 = (0, _slicedToArray2.default)(_ref45, 2),
            hour = _ref46[0],
            stats = _ref46[1];
          if (stats.count >= 2) {
            var avgScore = stats.total / stats.count;
            if (avgScore > bestTimeScore) {
              bestTimeScore = avgScore;
              var h = parseInt(hour);
              if (h >= 6 && h < 12) bestTimeSlot = 'Sabah';else if (h >= 12 && h < 18) bestTimeSlot = 'Öğleden sonra';else if (h >= 18 && h < 22) bestTimeSlot = 'Akşam';else bestTimeSlot = 'Gece';
            }
          }
        });
        var confidence = Math.min(0.8, moods.length / 30 * 0.8);
        return {
          dayOfWeek: bestDay || undefined,
          timeOfDay: bestTimeSlot || undefined,
          confidence: parseFloat(confidence.toFixed(3))
        };
      } catch (error) {
        console.warn('⚠️ Best times analysis failed:', error);
        return {
          confidence: 0.1
        };
      }
    }
  }, {
    key: "calculateGlobalConfidence",
    value: function calculateGlobalConfidence(sampleSize, dataQuality, profileConfidence, correlations) {
      try {
        var _correlations$moodEne;
        var sampleComponent = Math.min(0.4, sampleSize / 50 * 0.4);
        var qualityComponent = dataQuality * 0.3;
        var profileComponent = profileConfidence * 0.2;
        var correlationComponent = 0;
        if (((_correlations$moodEne = correlations.moodEnergy) == null ? void 0 : _correlations$moodEne.r) !== null) {
          var _correlations$moodEne2, _correlations$moodAnx, _correlations$energyA;
          var avgCorrelationStrength = (Math.abs(((_correlations$moodEne2 = correlations.moodEnergy) == null ? void 0 : _correlations$moodEne2.r) || 0) + Math.abs(((_correlations$moodAnx = correlations.moodAnxiety) == null ? void 0 : _correlations$moodAnx.r) || 0) + Math.abs(((_correlations$energyA = correlations.energyAnxiety) == null ? void 0 : _correlations$energyA.r) || 0)) / 3;
          correlationComponent = avgCorrelationStrength * 0.1;
        }
        var totalConfidence = sampleComponent + qualityComponent + profileComponent + correlationComponent;
        return Math.min(0.95, totalConfidence);
      } catch (error) {
        console.warn('⚠️ Global confidence calculation failed:', error);
        return 0.3;
      }
    }
  }, {
    key: "assessAnalyticsDataQuality",
    value: function assessAnalyticsDataQuality(moods) {
      try {
        if (moods.length === 0) return 0.1;
        var qualityScore = 0;
        if (moods.length >= 30) qualityScore += 0.4;else if (moods.length >= 14) qualityScore += 0.3;else if (moods.length >= 7) qualityScore += 0.2;else qualityScore += 0.1;
        var validMoodScores = moods.filter(function (m) {
          return m.mood_score !== null && m.mood_score !== undefined;
        });
        var missingRatio = 1 - validMoodScores.length / moods.length;
        var missingScore = Math.max(0, 0.3 - missingRatio * 0.3);
        qualityScore += missingScore;
        if (validMoodScores.length >= 5) {
          var scores = validMoodScores.map(function (m) {
            return m.mood_score;
          });
          var mean = scores.reduce(function (sum, s) {
            return sum + s;
          }, 0) / scores.length;
          var std = Math.sqrt(scores.reduce(function (sum, score) {
            return sum + Math.pow(score - mean, 2);
          }, 0) / scores.length);
          var outliers = scores.filter(function (score) {
            return Math.abs(score - mean) > 2 * std;
          });
          var outlierRatio = outliers.length / scores.length;
          var outlierScore = Math.max(0, 0.3 - outlierRatio * 0.3);
          qualityScore += outlierScore;
        }
        return Math.min(1, qualityScore);
      } catch (error) {
        console.warn('⚠️ Analytics data quality assessment failed:', error);
        return 0.1;
      }
    }
  }, {
    key: "classifyAnalyticsEmotionalProfile",
    value: function classifyAnalyticsEmotionalProfile(moods, baselines, weeklyDelta, volatility, correlations) {
      try {
        var rationale = [];
        var profileType = 'stable';
        var confidence = 0.5;
        if (baselines.mood < 40 && baselines.anxiety > 60) {
          profileType = 'stressed';
          rationale.push(`Düşük mood (${baselines.mood.toFixed(1)}) ve yüksek anksiyete (${baselines.anxiety.toFixed(1)})`);
          confidence = 0.8;
        } else if (volatility > 15) {
          profileType = 'volatile';
          rationale.push(`Yüksek mood volatilitesi (${volatility.toFixed(1)})`);
          confidence = 0.7;
        } else if (baselines.energy < 40 && baselines.mood < 55) {
          profileType = 'fatigued';
          rationale.push(`Düşük enerji (${baselines.energy.toFixed(1)}) ve orta-düşük mood (${baselines.mood.toFixed(1)})`);
          confidence = 0.75;
        } else if (weeklyDelta > 8 && baselines.mood >= 40 && baselines.mood <= 60) {
          profileType = 'recovering';
          rationale.push(`Pozitif haftalık trend (+${weeklyDelta.toFixed(1)}) ve orta mood (${baselines.mood.toFixed(1)})`);
          confidence = 0.6;
        } else if (baselines.mood >= 65 && volatility <= 8 && baselines.anxiety <= 40) {
          profileType = 'resilient';
          rationale.push(`Yüksek mood (${baselines.mood.toFixed(1)}), düşük volatilite (${volatility.toFixed(1)}) ve düşük anksiyete (${baselines.anxiety.toFixed(1)})`);
          confidence = 0.85;
        } else if (baselines.mood >= 70) {
          profileType = 'elevated';
          rationale.push(`Yüksek mood baseline (${baselines.mood.toFixed(1)})`);
          confidence = 0.7;
        } else {
          profileType = 'stable';
          rationale.push(`Dengeli duygusal durum (mood: ${baselines.mood.toFixed(1)}, volatilite: ${volatility.toFixed(1)})`);
          confidence = 0.5;
        }
        return {
          type: profileType,
          confidence: confidence,
          rationale: rationale
        };
      } catch (error) {
        console.warn('⚠️ Analytics emotional profile classification failed:', error);
        return {
          type: 'stable',
          confidence: 0.3,
          rationale: ['Analiz hatası nedeniyle varsayılan profil']
        };
      }
    }
  }, {
    key: "analyzeAnalyticsBestTimes",
    value: function analyzeAnalyticsBestTimes(moods) {
      try {
        if (moods.length < 7) return {
          confidence: 0.1
        };
        var dayOfWeekCounts = {};
        var timeOfDayCounts = {};
        var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        moods.forEach(function (mood) {
          if (mood.mood_score && mood.created_at) {
            var date = new Date(mood.created_at);
            var dayOfWeek = dayNames[date.getDay()];
            var hour = date.getHours();
            var timeSlot = hour < 12 ? 'morning' : hour < 18 ? 'afternoon' : 'evening';
            if (!dayOfWeekCounts[dayOfWeek]) {
              dayOfWeekCounts[dayOfWeek] = {
                count: 0,
                avgMood: 0
              };
            }
            dayOfWeekCounts[dayOfWeek].count++;
            dayOfWeekCounts[dayOfWeek].avgMood += mood.mood_score;
            if (!timeOfDayCounts[timeSlot]) {
              timeOfDayCounts[timeSlot] = {
                count: 0,
                avgMood: 0
              };
            }
            timeOfDayCounts[timeSlot].count++;
            timeOfDayCounts[timeSlot].avgMood += mood.mood_score;
          }
        });
        var bestDay = '';
        var bestDayMood = 0;
        Object.keys(dayOfWeekCounts).forEach(function (day) {
          var avgMood = dayOfWeekCounts[day].avgMood / dayOfWeekCounts[day].count;
          dayOfWeekCounts[day].avgMood = avgMood;
          if (avgMood > bestDayMood && dayOfWeekCounts[day].count >= 2) {
            bestDay = day;
            bestDayMood = avgMood;
          }
        });
        var bestTime = '';
        var bestTimeMood = 0;
        Object.keys(timeOfDayCounts).forEach(function (time) {
          var avgMood = timeOfDayCounts[time].avgMood / timeOfDayCounts[time].count;
          timeOfDayCounts[time].avgMood = avgMood;
          if (avgMood > bestTimeMood && timeOfDayCounts[time].count >= 2) {
            bestTime = time;
            bestTimeMood = avgMood;
          }
        });
        return {
          dayOfWeek: bestDay || undefined,
          timeOfDay: bestTime || undefined,
          confidence: Math.min(0.8, moods.length / 20)
        };
      } catch (error) {
        console.warn('⚠️ Analytics best times analysis failed:', error);
        return {
          confidence: 0.1
        };
      }
    }
  }, {
    key: "calculateAnalyticsGlobalConfidence",
    value: function calculateAnalyticsGlobalConfidence(moods, dataQuality, profile) {
      try {
        var confidence = 0;
        confidence += dataQuality * 0.4;
        var sampleSize = moods.length;
        if (sampleSize >= 30) confidence += 0.3;else if (sampleSize >= 14) confidence += 0.2;else if (sampleSize >= 7) confidence += 0.1;else confidence += 0.05;
        if (profile && profile.confidence) {
          confidence += profile.confidence * 0.2;
        }
        var now = Date.now();
        var recentCount = moods.filter(function (m) {
          var moodTime = new Date(m.created_at).getTime();
          var daysDiff = (now - moodTime) / (1000 * 60 * 60 * 24);
          return daysDiff <= 7;
        }).length;
        if (recentCount >= 3) confidence += 0.1;else if (recentCount >= 1) confidence += 0.05;
        return Math.min(1, Math.max(0.1, confidence));
      } catch (error) {
        console.warn('⚠️ Analytics global confidence calculation failed:', error);
        return 0.3;
      }
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!UnifiedAIPipeline.instance) {
        UnifiedAIPipeline.instance = new UnifiedAIPipeline();
      }
      return UnifiedAIPipeline.instance;
    }
  }]);
}();
var unifiedPipeline = exports.unifiedPipeline = UnifiedAIPipeline.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,