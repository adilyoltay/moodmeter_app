{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","StorageKeys","exports","PROFILE_COMPLETED","BREATH_SESSIONS","userId","date","GAMIFICATION","USER_SETTINGS","SETTINGS","FIRST_LAUNCH_DONE","CHECKINS","VOICE_CONSENT_STT","VOICE_CONSENT_TTS","getUserStorageKey","baseKey","saveUserData","_ref","_asyncToGenerator2","default","key","data","storageKey","AsyncStorage","setItem","JSON","stringify","error","console","_x","_x2","_x3","apply","arguments","loadUserData","_ref2","getItem","parse","_x4","_x5","clearUserData","_ref3","keys","getAllKeys","userKeys","filter","includes","length","multiRemove","log","_x6","migrateToUserSpecificStorage","_ref4","oldSettings","removeItem","oldGamification","_x7"],"sources":["storage.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * Storage utility for managing user-specific data\n * Ensures data isolation between different users\n */\n\nexport const StorageKeys = {\n  // Profile & Auth\n  PROFILE_COMPLETED: 'profileCompleted',\n  // OCD profile removed\n  \n  // Compulsions\n  // Compulsions removed\n  \n  // Terapi Sessions\n  // Therapy sessions removed\n  \n  // Breathwork Sessions\n  BREATH_SESSIONS: (userId: string, date?: string) =>\n    date ? `breath_sessions_${userId}_${date}` : `breath_sessions_${userId}`,\n  \n  // Gamification\n  GAMIFICATION: (userId: string) => `gamification_${userId}`,\n  \n  // Settings\n  USER_SETTINGS: (userId: string) => `settings_${userId}`,\n  SETTINGS: 'app_settings',\n  FIRST_LAUNCH_DONE: 'first_launch_done',\n  \n  // Last used items (for smart suggestions)\n  // LAST_COMPULSION removed\n  // LAST_Terapi_EXERCISE removed\n\n  // Voice & Check-in\n  CHECKINS: (userId: string) => `checkins_${userId}`,\n  VOICE_CONSENT_STT: (userId: string) => `consent_stt_${userId}`,\n  VOICE_CONSENT_TTS: (userId: string) => `consent_tts_${userId}`,\n\n  // CBT Thought Record\n  // Thought records removed\n} as const;\n\n/**\n * Get user-specific storage key\n */\nexport const getUserStorageKey = (baseKey: string, userId?: string): string => {\n  if (!userId || typeof userId !== 'string') {\n    // Fallback: ensure string key to avoid AsyncStorage undefined warnings\n    return `${baseKey}_anon`;\n  }\n  return `${baseKey}_${userId}`;\n};\n\n/**\n * Save user-specific data\n */\nexport const saveUserData = async <T>(\n  key: string, \n  data: T, \n  userId?: string\n): Promise<void> => {\n  try {\n    const storageKey = userId ? getUserStorageKey(key, userId) : key;\n    await AsyncStorage.setItem(storageKey, JSON.stringify(data));\n  } catch (error) {\n    console.error(`❌ Error saving data for key ${key}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Load user-specific data\n */\nexport const loadUserData = async <T>(\n  key: string, \n  userId?: string\n): Promise<T | null> => {\n  try {\n    const storageKey = userId ? getUserStorageKey(key, userId) : key;\n    const data = await AsyncStorage.getItem(storageKey);\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error(`❌ Error loading data for key ${key}:`, error);\n    return null;\n  }\n};\n\n/**\n * Clear all user-specific data (for logout)\n */\nexport const clearUserData = async (userId: string): Promise<void> => {\n  try {\n    const keys = await AsyncStorage.getAllKeys();\n    const userKeys = keys.filter(key => key.includes(`_${userId}`));\n    \n    if (userKeys.length > 0) {\n      await AsyncStorage.multiRemove(userKeys);\n      console.log(`✅ Cleared ${userKeys.length} keys for user ${userId}`);\n    }\n  } catch (error) {\n    console.error('❌ Error clearing user data:', error);\n    throw error;\n  }\n};\n\n/**\n * Migrate old data to user-specific keys\n */\nexport const migrateToUserSpecificStorage = async (userId: string): Promise<void> => {\n  try {\n    // Compulsions migration removed\n    \n    // Migrate settings\n    const oldSettings = await AsyncStorage.getItem('user_settings');\n    if (oldSettings) {\n      await AsyncStorage.setItem(StorageKeys.USER_SETTINGS(userId), oldSettings);\n      await AsyncStorage.removeItem('user_settings');\n      console.log('✅ Migrated settings data');\n    }\n    \n    // Migrate gamification\n    const oldGamification = await AsyncStorage.getItem('gamification_profile');\n    if (oldGamification) {\n      await AsyncStorage.setItem(StorageKeys.GAMIFICATION(userId), oldGamification);\n      await AsyncStorage.removeItem('gamification_profile');\n      console.log('✅ Migrated gamification data');\n    }\n  } catch (error) {\n    console.error('❌ Error during migration:', error);\n  }\n}; \n"],"mappings":"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","ignoreList":[]}