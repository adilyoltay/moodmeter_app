b96c7a7c8a6e5234d644ce6113e5cae8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveDisplayValue = toHaveDisplayValue;
var _jestMatcherUtils = require("jest-matcher-utils");
var _errors = require("../helpers/errors");
var _hostComponentNames = require("../helpers/host-component-names");
var _textInput = require("../helpers/text-input");
var _matches = require("../matches");
var _utils = require("./utils");
function toHaveDisplayValue(element, expectedValue, options) {
  var _this = this;
  (0, _utils.checkHostElement)(element, toHaveDisplayValue, this);
  if (!(0, _hostComponentNames.isHostTextInput)(element)) {
    throw new _errors.ErrorWithStack(`toHaveDisplayValue() works only with host "TextInput" elements. Passed element has type "${element.type}".`, toHaveDisplayValue);
  }
  var receivedValue = (0, _textInput.getTextInputValue)(element);
  return {
    pass: (0, _matches.matches)(expectedValue, receivedValue, options == null ? void 0 : options.normalizer, options == null ? void 0 : options.exact),
    message: function message() {
      return [(0, _utils.formatMessage)((0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${_this.isNot ? 'not to' : 'to'} have display value`, expectedValue, 'Received', receivedValue)].join('\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdE1hdGNoZXJVdGlscyIsInJlcXVpcmUiLCJfZXJyb3JzIiwiX2hvc3RDb21wb25lbnROYW1lcyIsIl90ZXh0SW5wdXQiLCJfbWF0Y2hlcyIsIl91dGlscyIsInRvSGF2ZURpc3BsYXlWYWx1ZSIsImVsZW1lbnQiLCJleHBlY3RlZFZhbHVlIiwib3B0aW9ucyIsIl90aGlzIiwiY2hlY2tIb3N0RWxlbWVudCIsImlzSG9zdFRleHRJbnB1dCIsIkVycm9yV2l0aFN0YWNrIiwidHlwZSIsInJlY2VpdmVkVmFsdWUiLCJnZXRUZXh0SW5wdXRWYWx1ZSIsInBhc3MiLCJtYXRjaGVzIiwibm9ybWFsaXplciIsImV4YWN0IiwibWVzc2FnZSIsImZvcm1hdE1lc3NhZ2UiLCJtYXRjaGVySGludCIsImlzTm90Iiwiam9pbiJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRjaGVycy90by1oYXZlLWRpc3BsYXktdmFsdWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgbWF0Y2hlckhpbnQgfSBmcm9tICdqZXN0LW1hdGNoZXItdXRpbHMnO1xuXG5pbXBvcnQgeyBFcnJvcldpdGhTdGFjayB9IGZyb20gJy4uL2hlbHBlcnMvZXJyb3JzJztcbmltcG9ydCB7IGlzSG9zdFRleHRJbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgZ2V0VGV4dElucHV0VmFsdWUgfSBmcm9tICcuLi9oZWxwZXJzL3RleHQtaW5wdXQnO1xuaW1wb3J0IHR5cGUgeyBUZXh0TWF0Y2gsIFRleHRNYXRjaE9wdGlvbnMgfSBmcm9tICcuLi9tYXRjaGVzJztcbmltcG9ydCB7IG1hdGNoZXMgfSBmcm9tICcuLi9tYXRjaGVzJztcbmltcG9ydCB7IGNoZWNrSG9zdEVsZW1lbnQsIGZvcm1hdE1lc3NhZ2UgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvSGF2ZURpc3BsYXlWYWx1ZShcbiAgdGhpczogamVzdC5NYXRjaGVyQ29udGV4dCxcbiAgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIGV4cGVjdGVkVmFsdWU6IFRleHRNYXRjaCxcbiAgb3B0aW9ucz86IFRleHRNYXRjaE9wdGlvbnMsXG4pIHtcbiAgY2hlY2tIb3N0RWxlbWVudChlbGVtZW50LCB0b0hhdmVEaXNwbGF5VmFsdWUsIHRoaXMpO1xuXG4gIGlmICghaXNIb3N0VGV4dElucHV0KGVsZW1lbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yV2l0aFN0YWNrKFxuICAgICAgYHRvSGF2ZURpc3BsYXlWYWx1ZSgpIHdvcmtzIG9ubHkgd2l0aCBob3N0IFwiVGV4dElucHV0XCIgZWxlbWVudHMuIFBhc3NlZCBlbGVtZW50IGhhcyB0eXBlIFwiJHtlbGVtZW50LnR5cGV9XCIuYCxcbiAgICAgIHRvSGF2ZURpc3BsYXlWYWx1ZSxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgcmVjZWl2ZWRWYWx1ZSA9IGdldFRleHRJbnB1dFZhbHVlKGVsZW1lbnQpO1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogbWF0Y2hlcyhleHBlY3RlZFZhbHVlLCByZWNlaXZlZFZhbHVlLCBvcHRpb25zPy5ub3JtYWxpemVyLCBvcHRpb25zPy5leGFjdCksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBtYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZURpc3BsYXlWYWx1ZWAsICdlbGVtZW50JywgJycpLFxuICAgICAgICAgIGBFeHBlY3RlZCBlbGVtZW50ICR7dGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJ30gaGF2ZSBkaXNwbGF5IHZhbHVlYCxcbiAgICAgICAgICBleHBlY3RlZFZhbHVlLFxuICAgICAgICAgICdSZWNlaXZlZCcsXG4gICAgICAgICAgcmVjZWl2ZWRWYWx1ZSxcbiAgICAgICAgKSxcbiAgICAgIF0uam9pbignXFxuJyk7XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsaUJBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxNQUFBLEdBQUFMLE9BQUE7QUFFTyxTQUFTTSxrQkFBa0JBLENBRWhDQyxPQUEwQixFQUMxQkMsYUFBd0IsRUFDeEJDLE9BQTBCLEVBQzFCO0VBQUEsSUFBQUMsS0FBQTtFQUNBLElBQUFMLE1BQUEsQ0FBQU0sZ0JBQWdCLEVBQUNKLE9BQU8sRUFBRUQsa0JBQWtCLEVBQUUsSUFBSSxDQUFDO0VBRW5ELElBQUksQ0FBQyxJQUFBSixtQkFBQSxDQUFBVSxlQUFlLEVBQUNMLE9BQU8sQ0FBQyxFQUFFO0lBQzdCLE1BQU0sSUFBSU4sT0FBQSxDQUFBWSxjQUFjLENBQ3RCLDRGQUE0Rk4sT0FBTyxDQUFDTyxJQUFJLElBQUksRUFDNUdSLGtCQUNGLENBQUM7RUFDSDtFQUVBLElBQU1TLGFBQWEsR0FBRyxJQUFBWixVQUFBLENBQUFhLGlCQUFpQixFQUFDVCxPQUFPLENBQUM7RUFFaEQsT0FBTztJQUNMVSxJQUFJLEVBQUUsSUFBQWIsUUFBQSxDQUFBYyxPQUFPLEVBQUNWLGFBQWEsRUFBRU8sYUFBYSxFQUFFTixPQUFPLG9CQUFQQSxPQUFPLENBQUVVLFVBQVUsRUFBRVYsT0FBTyxvQkFBUEEsT0FBTyxDQUFFVyxLQUFLLENBQUM7SUFDaEZDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBLEVBQVE7TUFDYixPQUFPLENBQ0wsSUFBQWhCLE1BQUEsQ0FBQWlCLGFBQWEsRUFDWCxJQUFBdkIsaUJBQUEsQ0FBQXdCLFdBQVcsRUFBQyxHQUFHYixLQUFJLENBQUNjLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQzVFLG9CQUFvQmQsS0FBSSxDQUFDYyxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUkscUJBQXFCLEVBQ3JFaEIsYUFBYSxFQUNiLFVBQVUsRUFDVk8sYUFDRixDQUFDLENBQ0YsQ0FBQ1UsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNkO0VBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119