61d3c227b532532869ca8b23daf54942
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  var store = new Map();
  return {
    __esModule: true,
    default: {
      getItem: jest.fn(function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (key) {
          return store.has(key) ? String(store.get(key)) : null;
        });
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }()),
      setItem: jest.fn(function () {
        var _ref2 = (0, _asyncToGenerator2.default)(function* (key, value) {
          store.set(key, value);
        });
        return function (_x2, _x3) {
          return _ref2.apply(this, arguments);
        };
      }()),
      removeItem: jest.fn(function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* (key) {
          store.delete(key);
        });
        return function (_x4) {
          return _ref3.apply(this, arguments);
        };
      }()),
      clear: jest.fn((0, _asyncToGenerator2.default)(function* () {
        store.clear();
      })),
      getAllKeys: jest.fn((0, _asyncToGenerator2.default)(function* () {
        return Array.from(store.keys());
      }))
    }
  };
});
_getJestObj().mock('expo-constants', function () {
  return {
    __esModule: true,
    default: {
      expoConfig: {
        extra: {}
      }
    }
  };
});
_getJestObj().mock("./constants/featureFlags", function () {
  var actual = jest.requireActual("./constants/featureFlags");
  var original = actual.FEATURE_FLAGS;
  var patched = Object.assign({}, original, {
    isEnabled: function isEnabled(feature) {
      if (feature === 'AI_UNIFIED_PIPELINE') return true;
      return original.isEnabled(feature);
    }
  });
  return {
    __esModule: true,
    FEATURE_FLAGS: patched
  };
});
_getJestObj().mock('expo/virtual/env', function () {
  return {
    __esModule: true,
    env: {}
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View;
  return {
    __esModule: true,
    MaterialCommunityIcons: function MaterialCommunityIcons(props) {
      return React.createElement(View, Object.assign({}, props, {
        accessibilityRole: 'image',
        accessibilityLabel: `Icon: ${props.name || 'unknown'}`,
        testID: props.testID,
        'data-icon-name': props.name
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    __esModule: true,
    useRouter: function useRouter() {
      return {
        push: jest.fn(),
        replace: jest.fn()
      };
    },
    router: {
      push: jest.fn(),
      replace: jest.fn()
    },
    useSegments: function useSegments() {
      return [];
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    __esModule: true,
    useFocusEffect: jest.fn(function (cb) {
      if (typeof cb === 'function') cb();
    }),
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {},
        name: 'Test'
      };
    },
    createStaticNavigation: jest.fn()
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  var React = require('react');
  var _require2 = require('react-native'),
    View = _require2.View;
  return {
    __esModule: true,
    LinearGradient: function LinearGradient(props) {
      return React.createElement(View, props);
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    __esModule: true,
    impactAsync: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
    ImpactFeedbackStyle: {
      Light: 'Light',
      Medium: 'Medium',
      Heavy: 'Heavy'
    }
  };
});
_getJestObj().mock('expo-linking', function () {
  return {
    __esModule: true,
    openURL: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return true;
    }))
  };
});
_getJestObj().mock('expo-auth-session', function () {
  return {
    __esModule: true,
    makeRedirectUri: jest.fn(function () {
      return 'https://example.com/callback';
    })
  };
});
_getJestObj().mock('expo-web-browser', function () {
  return {
    __esModule: true,
    openBrowserAsync: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        type: 'dismiss'
      };
    })),
    maybeCompleteAuthSession: jest.fn(function () {})
  };
});
_getJestObj().mock('expo-modules-core', function () {
  return {
    __esModule: true,
    NativeModulesProxy: {},
    EventEmitter: function EventEmitter() {}
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require3 = require('react-native'),
    View = _require3.View,
    Text = _require3.Text;
  var Primitive = function Primitive(_ref1) {
    var children = _ref1.children,
      props = (0, _objectWithoutProperties2.default)(_ref1, _excluded);
    return React.createElement(View, props, children);
  };
  var TextPrimitive = function TextPrimitive(_ref10) {
    var children = _ref10.children,
      props = (0, _objectWithoutProperties2.default)(_ref10, _excluded2);
    return React.createElement(Text, props, children);
  };
  var CardComponent = function CardComponent(_ref11) {
    var children = _ref11.children,
      props = (0, _objectWithoutProperties2.default)(_ref11, _excluded3);
    return React.createElement(View, props, children);
  };
  CardComponent.Content = Primitive;
  return {
    __esModule: true,
    Text: TextPrimitive,
    Card: CardComponent,
    Chip: Primitive,
    Divider: Primitive,
    SegmentedButtons: Primitive,
    Button: Primitive
  };
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    __esModule: true,
    addEventListener: function addEventListener(cb) {
      cb({
        isConnected: false,
        isInternetReachable: false
      });
      return function () {};
    },
    fetch: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        isConnected: false,
        isInternetReachable: false
      };
    }))
  };
});
_getJestObj().mock('react-native-url-polyfill/auto', function () {
  return {};
});
_getJestObj().mock('react-test-renderer', function () {
  return {
    __esModule: true,
    act: function act(cb) {
      return typeof cb === 'function' ? cb() : undefined;
    },
    default: {
      create: function create() {
        return {
          toJSON: function toJSON() {
            return {};
          },
          update: function update() {},
          unmount: function unmount() {}
        };
      }
    }
  };
});
_getJestObj().mock('expo-modules-core', function () {
  return {
    __esModule: true,
    NativeModulesProxy: {},
    EventEmitter: function EventEmitter() {},
    requireNativeModule: jest.fn(function () {
      return {};
    })
  };
});
_getJestObj().mock('expo-crypto', function () {
  return {
    __esModule: true,
    getRandomBytesAsync: jest.fn(function () {
      var _ref15 = (0, _asyncToGenerator2.default)(function* (n) {
        return new Uint8Array(n || 16);
      });
      return function (_x5) {
        return _ref15.apply(this, arguments);
      };
    }())
  };
});
_getJestObj().mock("./features/ai/cache/resultCache", function () {
  return {
    __esModule: true,
    resultCache: {
      set: jest.fn().mockResolvedValue(undefined),
      get: jest.fn().mockResolvedValue(null),
      delete: jest.fn().mockResolvedValue(undefined),
      clear: jest.fn().mockResolvedValue(undefined)
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _env2 = require("expo/virtual/env");
var _excluded = ["children"],
  _excluded2 = ["children"],
  _excluded3 = ["children"];
function _getJestObj() {
  var _require6 = require("@jest/globals"),
    jest = _require6.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
process.env.TEST_MODE = process.env.TEST_MODE || '1';
process.env.TEST_TTL_MS = process.env.TEST_TTL_MS || '5000';
process.env.TEST_PIPELINE_STUB = process.env.TEST_PIPELINE_STUB || '1';
process.env.TEST_SEED_USER_ID = process.env.TEST_SEED_USER_ID || 'test-user-1';
process.env.EXPO_PUBLIC_ENABLE_AI = _env2.env.EXPO_PUBLIC_ENABLE_AI || 'true';
try {
  _getJestObj().mock('expo-location', function () {
    return {
      __esModule: true,
      requestForegroundPermissionsAsync: jest.fn((0, _asyncToGenerator2.default)(function* () {
        return {
          status: 'granted'
        };
      })),
      getCurrentPositionAsync: jest.fn((0, _asyncToGenerator2.default)(function* () {
        return {
          coords: {
            latitude: 0,
            longitude: 0
          }
        };
      }))
    };
  });
} catch (e) {}
try {
  if (process.env.TEST_LIVE_BACKEND === '1') {
    var RN = require('react-native');
    if (RN && RN.InteractionManager) {
      RN.InteractionManager.runAfterInteractions = function (cb) {
        if (typeof cb === 'function') cb();
        return {
          cancel: function cancel() {}
        };
      };
    }
  }
} catch (e) {}
if (process.env.TEST_LIVE_BACKEND !== '1') {
  _getJestObj().mock("./lib/supabase", function () {
    return {
      __esModule: true,
      supabase: {
        auth: {
          getSession: jest.fn((0, _asyncToGenerator2.default)(function* () {
            return {
              data: {
                session: null
              },
              error: null
            };
          }))
        },
        from: jest.fn(function () {
          return {
            select: jest.fn().mockResolvedValue({
              data: [],
              error: null
            })
          };
        })
      }
    };
  });
  _getJestObj().mock("./services/supabase", function () {
    return {
      __esModule: true,
      supabase: {
        auth: {
          getSession: jest.fn((0, _asyncToGenerator2.default)(function* () {
            return {
              data: {
                session: null
              },
              error: null
            };
          }))
        },
        from: jest.fn(function () {
          return {
            select: jest.fn().mockResolvedValue({
              data: [],
              error: null
            })
          };
        })
      }
    };
  });
}
process.env.TEST_MODE = process.env.TEST_MODE || '1';
process.env.TEST_TTL_MS = process.env.TEST_TTL_MS || '5000';
process.env.TEST_PIPELINE_STUB = process.env.TEST_PIPELINE_STUB || '1';
process.env.TEST_SEED_USER_ID = process.env.TEST_SEED_USER_ID || 'test-user-1';
process.env.EXPO_PUBLIC_ENABLE_AI = _env2.env.EXPO_PUBLIC_ENABLE_AI || 'true';
try {
  var _require4 = require("./constants/featureFlags"),
    FEATURE_FLAGS = _require4.FEATURE_FLAGS;
  var originalIsEnabled = FEATURE_FLAGS.isEnabled.bind(FEATURE_FLAGS);
  FEATURE_FLAGS.isEnabled = function (flag) {
    if (flag === 'AI_UNIFIED_PIPELINE') return true;
    return originalIsEnabled(flag);
  };
} catch (e) {}
var _require5 = require("./__tests__/fixtures/seedData"),
  waitForElement = _require5.waitForElement,
  seedTestData = _require5.seedTestData,
  clearAllTestData = _require5.clearAllTestData,
  mockUnifiedPipelineProcess = _require5.mockUnifiedPipelineProcess,
  seedTrackingCompulsions = _require5.seedTrackingCompulsions,
  seedCBTRecords = _require5.seedCBTRecords,
  seedOCDScenario = _require5.seedOCDScenario,
  cleanupSeeds = _require5.cleanupSeeds,
  TEST_ENV = _require5.TEST_ENV;
global.waitForElement = waitForElement;
global.seedTestData = seedTestData;
global.clearAllTestData = clearAllTestData;
global.mockUnifiedPipelineProcess = mockUnifiedPipelineProcess;
global.seedTrackingCompulsions = seedTrackingCompulsions;
global.seedCBTRecords = seedCBTRecords;
global.seedOCDScenario = seedOCDScenario;
global.cleanupSeeds = cleanupSeeds;
global.TEST_ENV = TEST_ENV;
beforeAll(function () {
  jest.spyOn(console, 'error').mockImplementation(function () {});
  jest.spyOn(console, 'warn').mockImplementation(function () {});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,