7eb75e9bd816f917251f68b9695a5405
_getJestObj().mock("../../hooks/useSecureStorage", function () {
  return {
    useSecureStorage: function useSecureStorage() {
      return {
        getItem: function () {
          var _getItem = (0, _asyncToGenerator2.default)(function* () {
            return null;
          });
          function getItem() {
            return _getItem.apply(this, arguments);
          }
          return getItem;
        }(),
        setItem: function () {
          var _setItem = (0, _asyncToGenerator2.default)(function* () {
            return undefined;
          });
          function setItem() {
            return _setItem.apply(this, arguments);
          }
          return setItem;
        }()
      };
    }
  };
});
_getJestObj().mock("../../services/supabase", function () {
  return {
    __esModule: true,
    default: {
      client: {}
    },
    getCompulsions: jest.fn(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (_userId) {
        return [{
          id: 'c1',
          category: 'contamination',
          timestamp: new Date().toISOString(),
          resistance_level: 4
        }, {
          id: 'c2',
          category: 'checking',
          timestamp: new Date().toISOString(),
          resistance_level: 5
        }];
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()),
    getTherapySessions: jest.fn(function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (_userId) {
        return [{
          id: 'e1',
          timestamp: new Date().toISOString(),
          completed: true,
          anxiety_initial: 6,
          anxiety_final: 3
        }];
      });
      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }())
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require = require("../../features/ai/pipeline/enhancedDataAggregation"),
  enhancedAIDataAggregator = _require.enhancedAIDataAggregator;
describe('Enhanced AI Data Aggregation', function () {
  var userId = 'test-user';
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    yield _asyncStorage.default.clear();
    yield _asyncStorage.default.setItem(`ai_user_profile_${userId}`, JSON.stringify({
      demographics: {
        age: 28
      }
    }));
    var today = new Date().toISOString().split('T')[0];
    yield _asyncStorage.default.setItem(`mood_entries_${userId}_${today}`, JSON.stringify([{
      id: 'm1',
      user_id: userId,
      mood_score: 6,
      energy_level: 5,
      anxiety_level: 4,
      timestamp: new Date().toISOString(),
      synced: true
    }]));
  }));
  it('aggregates comprehensive data with expected shape and fields', (0, _asyncToGenerator2.default)(function* () {
    var agg = yield enhancedAIDataAggregator.aggregateComprehensiveData(userId);
    expect(agg).toBeTruthy();
    expect(agg).toHaveProperty('profile');
    expect(agg).toHaveProperty('symptoms');
    expect(agg).toHaveProperty('performance');
    expect(agg).toHaveProperty('patterns');
    expect(agg).toHaveProperty('insights');
    expect(agg).toHaveProperty('recommendations');
    expect(Array.isArray(agg.symptoms.primaryCategories)).toBe(true);
    expect(typeof agg.performance.erpCompletionRate).toBe('number');
  }));
  it('includes frequent compulsion categories in symptoms.primaryCategories', (0, _asyncToGenerator2.default)(function* () {
    var agg = yield enhancedAIDataAggregator.aggregateComprehensiveData(userId);
    expect(agg.symptoms.primaryCategories).toEqual(expect.arrayContaining(['contamination', 'checking']));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VTZWN1cmVTdG9yYWdlIiwiZ2V0SXRlbSIsIl9nZXRJdGVtIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsImFwcGx5IiwiYXJndW1lbnRzIiwic2V0SXRlbSIsIl9zZXRJdGVtIiwidW5kZWZpbmVkIiwiX19lc01vZHVsZSIsImNsaWVudCIsImdldENvbXB1bHNpb25zIiwiamVzdCIsImZuIiwiX3JlZiIsIl91c2VySWQiLCJpZCIsImNhdGVnb3J5IiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicmVzaXN0YW5jZV9sZXZlbCIsIl94IiwiZ2V0VGhlcmFweVNlc3Npb25zIiwiX3JlZjIiLCJjb21wbGV0ZWQiLCJhbnhpZXR5X2luaXRpYWwiLCJhbnhpZXR5X2ZpbmFsIiwiX3gyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNTdG9yYWdlIiwiX3JlcXVpcmUyIiwiX3JlcXVpcmUiLCJlbmhhbmNlZEFJRGF0YUFnZ3JlZ2F0b3IiLCJkZXNjcmliZSIsInVzZXJJZCIsImJlZm9yZUVhY2giLCJBc3luY1N0b3JhZ2UiLCJjbGVhciIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZW1vZ3JhcGhpY3MiLCJhZ2UiLCJ0b2RheSIsInNwbGl0IiwidXNlcl9pZCIsIm1vb2Rfc2NvcmUiLCJlbmVyZ3lfbGV2ZWwiLCJhbnhpZXR5X2xldmVsIiwic3luY2VkIiwiaXQiLCJhZ2ciLCJhZ2dyZWdhdGVDb21wcmVoZW5zaXZlRGF0YSIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0hhdmVQcm9wZXJ0eSIsIkFycmF5IiwiaXNBcnJheSIsInN5bXB0b21zIiwicHJpbWFyeUNhdGVnb3JpZXMiLCJ0b0JlIiwicGVyZm9ybWFuY2UiLCJlcnBDb21wbGV0aW9uUmF0ZSIsInRvRXF1YWwiLCJhcnJheUNvbnRhaW5pbmciXSwic291cmNlcyI6WyJlbmhhbmNlZEFnZ3JlZ2F0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XG4vLyBVc2UgQ0pTIHJlcXVpcmUgdG8gYXZvaWQgRVNNIGR5bmFtaWMgaW1wb3J0IGlzc3VlcyBpbiBKZXN0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgeyBlbmhhbmNlZEFJRGF0YUFnZ3JlZ2F0b3IgfSA9IHJlcXVpcmUoJ0AvZmVhdHVyZXMvYWkvcGlwZWxpbmUvZW5oYW5jZWREYXRhQWdncmVnYXRpb24nKTtcblxuLy8gTW9jayBzZWN1cmUgc3RvcmFnZSBob29rIHRvIGF2b2lkIGludm9raW5nIG5hdGl2ZSBjcnlwdG8gaW4gdGVzdHNcbmplc3QubW9jaygnQC9ob29rcy91c2VTZWN1cmVTdG9yYWdlJywgKCkgPT4gKHtcbiAgdXNlU2VjdXJlU3RvcmFnZTogKCkgPT4gKHtcbiAgICBnZXRJdGVtOiBhc3luYyAoKSA9PiBudWxsLFxuICAgIHNldEl0ZW06IGFzeW5jICgpID0+IHVuZGVmaW5lZCxcbiAgfSksXG59KSk7XG5cbi8vIE1vY2sgc3VwYWJhc2Ugc2VydmljZSBtaW5pbWFsIEFQSSB1c2VkIGJ5IGFnZ3JlZ2F0b3Jcbmplc3QubW9jaygnQC9zZXJ2aWNlcy9zdXBhYmFzZScsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6IHtcbiAgICBjbGllbnQ6IHt9LFxuICB9LFxuICBnZXRDb21wdWxzaW9uczogamVzdC5mbihhc3luYyAoX3VzZXJJZDogc3RyaW5nKSA9PiBbXG4gICAgeyBpZDogJ2MxJywgY2F0ZWdvcnk6ICdjb250YW1pbmF0aW9uJywgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksIHJlc2lzdGFuY2VfbGV2ZWw6IDQgfSxcbiAgICB7IGlkOiAnYzInLCBjYXRlZ29yeTogJ2NoZWNraW5nJywgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksIHJlc2lzdGFuY2VfbGV2ZWw6IDUgfSxcbiAgXSksXG4gIGdldFRoZXJhcHlTZXNzaW9uczogamVzdC5mbihhc3luYyAoX3VzZXJJZDogc3RyaW5nKSA9PiBbXG4gICAgeyBpZDogJ2UxJywgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksIGNvbXBsZXRlZDogdHJ1ZSwgYW54aWV0eV9pbml0aWFsOiA2LCBhbnhpZXR5X2ZpbmFsOiAzIH0sXG4gIF0pLFxufSkpO1xuXG5kZXNjcmliZSgnRW5oYW5jZWQgQUkgRGF0YSBBZ2dyZWdhdGlvbicsICgpID0+IHtcbiAgY29uc3QgdXNlcklkID0gJ3Rlc3QtdXNlcic7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLmNsZWFyKCk7XG4gICAgLy8gU2VlZCBwbGFpbiBwcm9maWxlIGZhbGxiYWNrXG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oYGFpX3VzZXJfcHJvZmlsZV8ke3VzZXJJZH1gLCBKU09OLnN0cmluZ2lmeSh7IGRlbW9ncmFwaGljczogeyBhZ2U6IDI4IH0gfSkpO1xuICAgIC8vIFNlZWQgYSBtb29kIGVudHJ5IGZvciB0b2RheVxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oXG4gICAgICBgbW9vZF9lbnRyaWVzXyR7dXNlcklkfV8ke3RvZGF5fWAsXG4gICAgICBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ20xJyxcbiAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgbW9vZF9zY29yZTogNixcbiAgICAgICAgICBlbmVyZ3lfbGV2ZWw6IDUsXG4gICAgICAgICAgYW54aWV0eV9sZXZlbDogNCxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBzeW5jZWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICBdKVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdhZ2dyZWdhdGVzIGNvbXByZWhlbnNpdmUgZGF0YSB3aXRoIGV4cGVjdGVkIHNoYXBlIGFuZCBmaWVsZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYWdnID0gYXdhaXQgZW5oYW5jZWRBSURhdGFBZ2dyZWdhdG9yLmFnZ3JlZ2F0ZUNvbXByZWhlbnNpdmVEYXRhKHVzZXJJZCk7XG5cbiAgICBleHBlY3QoYWdnKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGFnZykudG9IYXZlUHJvcGVydHkoJ3Byb2ZpbGUnKTtcbiAgICBleHBlY3QoYWdnKS50b0hhdmVQcm9wZXJ0eSgnc3ltcHRvbXMnKTtcbiAgICBleHBlY3QoYWdnKS50b0hhdmVQcm9wZXJ0eSgncGVyZm9ybWFuY2UnKTtcbiAgICBleHBlY3QoYWdnKS50b0hhdmVQcm9wZXJ0eSgncGF0dGVybnMnKTtcbiAgICBleHBlY3QoYWdnKS50b0hhdmVQcm9wZXJ0eSgnaW5zaWdodHMnKTtcbiAgICBleHBlY3QoYWdnKS50b0hhdmVQcm9wZXJ0eSgncmVjb21tZW5kYXRpb25zJyk7XG5cbiAgICAvLyBCYXNpYyBzYW5pdHkgY2hlY2tzXG4gICAgZXhwZWN0KEFycmF5LmlzQXJyYXkoYWdnLnN5bXB0b21zLnByaW1hcnlDYXRlZ29yaWVzKSkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QodHlwZW9mIGFnZy5wZXJmb3JtYW5jZS5lcnBDb21wbGV0aW9uUmF0ZSkudG9CZSgnbnVtYmVyJyk7XG4gIH0pO1xuXG4gIGl0KCdpbmNsdWRlcyBmcmVxdWVudCBjb21wdWxzaW9uIGNhdGVnb3JpZXMgaW4gc3ltcHRvbXMucHJpbWFyeUNhdGVnb3JpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYWdnID0gYXdhaXQgZW5oYW5jZWRBSURhdGFBZ2dyZWdhdG9yLmFnZ3JlZ2F0ZUNvbXByZWhlbnNpdmVEYXRhKHVzZXJJZCk7XG4gICAgZXhwZWN0KGFnZy5zeW1wdG9tcy5wcmltYXJ5Q2F0ZWdvcmllcykudG9FcXVhbChleHBlY3QuYXJyYXlDb250YWluaW5nKFsnY29udGFtaW5hdGlvbicsICdjaGVja2luZyddKSk7XG4gIH0pO1xufSk7XG5cblxuIl0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLGlDQUE2QjtFQUFBLE9BQU87SUFDM0NDLGdCQUFnQixFQUFFLFNBQWxCQSxnQkFBZ0JBLENBQUE7TUFBQSxPQUFTO1FBQ3ZCQyxPQUFPO1VBQUEsSUFBQUMsUUFBQSxPQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUU7WUFBQSxPQUFZLElBQUk7VUFBQTtVQUFBLFNBQXpCSCxPQUFPQSxDQUFBO1lBQUEsT0FBQUMsUUFBQSxDQUFBRyxLQUFBLE9BQUFDLFNBQUE7VUFBQTtVQUFBLE9BQVBMLE9BQU87UUFBQSxHQUFrQjtRQUN6Qk0sT0FBTztVQUFBLElBQUFDLFFBQUEsT0FBQUwsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFO1lBQUEsT0FBWUssU0FBUztVQUFBO1VBQUEsU0FBOUJGLE9BQU9BLENBQUE7WUFBQSxPQUFBQyxRQUFBLENBQUFILEtBQUEsT0FBQUMsU0FBQTtVQUFBO1VBQUEsT0FBUEMsT0FBTztRQUFBO01BQ1QsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIVCxXQUFBLEdBQUtDLElBQUksNEJBQXdCO0VBQUEsT0FBTztJQUN0Q1csVUFBVSxFQUFFLElBQUk7SUFDaEJOLE9BQU8sRUFBRTtNQUNQTyxNQUFNLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFDREMsY0FBYyxFQUFFQyxJQUFJLENBQUNDLEVBQUU7TUFBQSxJQUFBQyxJQUFBLE9BQUFaLGtCQUFBLENBQUFDLE9BQUEsRUFBQyxXQUFPWSxPQUFlO1FBQUEsT0FBSyxDQUNqRDtVQUFFQyxFQUFFLEVBQUUsSUFBSTtVQUFFQyxRQUFRLEVBQUUsZUFBZTtVQUFFQyxT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