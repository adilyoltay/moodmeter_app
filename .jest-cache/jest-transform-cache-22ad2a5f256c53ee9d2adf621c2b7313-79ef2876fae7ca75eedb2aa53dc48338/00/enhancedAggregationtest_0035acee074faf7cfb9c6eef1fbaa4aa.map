{"version":3,"names":["_getJestObj","mock","useSecureStorage","getItem","_getItem","_asyncToGenerator2","default","apply","arguments","setItem","_setItem","undefined","__esModule","client","getCompulsions","jest","fn","_ref","_userId","id","category","timestamp","Date","toISOString","resistance_level","_x","getTherapySessions","_ref2","completed","anxiety_initial","anxiety_final","_x2","_interopRequireDefault","require","_asyncStorage","_require2","_require","enhancedAIDataAggregator","describe","userId","beforeEach","AsyncStorage","clear","JSON","stringify","demographics","age","today","split","user_id","mood_score","energy_level","anxiety_level","synced","it","agg","aggregateComprehensiveData","expect","toBeTruthy","toHaveProperty","Array","isArray","symptoms","primaryCategories","toBe","performance","erpCompletionRate","toEqual","arrayContaining"],"sources":["enhancedAggregation.test.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n// Use CJS require to avoid ESM dynamic import issues in Jest\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { enhancedAIDataAggregator } = require('@/features/ai/pipeline/enhancedDataAggregation');\n\n// Mock secure storage hook to avoid invoking native crypto in tests\njest.mock('@/hooks/useSecureStorage', () => ({\n  useSecureStorage: () => ({\n    getItem: async () => null,\n    setItem: async () => undefined,\n  }),\n}));\n\n// Mock supabase service minimal API used by aggregator\njest.mock('@/services/supabase', () => ({\n  __esModule: true,\n  default: {\n    client: {},\n  },\n  getCompulsions: jest.fn(async (_userId: string) => [\n    { id: 'c1', category: 'contamination', timestamp: new Date().toISOString(), resistance_level: 4 },\n    { id: 'c2', category: 'checking', timestamp: new Date().toISOString(), resistance_level: 5 },\n  ]),\n  getTherapySessions: jest.fn(async (_userId: string) => [\n    { id: 'e1', timestamp: new Date().toISOString(), completed: true, anxiety_initial: 6, anxiety_final: 3 },\n  ]),\n}));\n\ndescribe('Enhanced AI Data Aggregation', () => {\n  const userId = 'test-user';\n\n  beforeEach(async () => {\n    await AsyncStorage.clear();\n    // Seed plain profile fallback\n    await AsyncStorage.setItem(`ai_user_profile_${userId}`, JSON.stringify({ demographics: { age: 28 } }));\n    // Seed a mood entry for today\n    const today = new Date().toISOString().split('T')[0];\n    await AsyncStorage.setItem(\n      `mood_entries_${userId}_${today}`,\n      JSON.stringify([\n        {\n          id: 'm1',\n          user_id: userId,\n          mood_score: 6,\n          energy_level: 5,\n          anxiety_level: 4,\n          timestamp: new Date().toISOString(),\n          synced: true,\n        },\n      ])\n    );\n  });\n\n  it('aggregates comprehensive data with expected shape and fields', async () => {\n    const agg = await enhancedAIDataAggregator.aggregateComprehensiveData(userId);\n\n    expect(agg).toBeTruthy();\n    expect(agg).toHaveProperty('profile');\n    expect(agg).toHaveProperty('symptoms');\n    expect(agg).toHaveProperty('performance');\n    expect(agg).toHaveProperty('patterns');\n    expect(agg).toHaveProperty('insights');\n    expect(agg).toHaveProperty('recommendations');\n\n    // Basic sanity checks\n    expect(Array.isArray(agg.symptoms.primaryCategories)).toBe(true);\n    expect(typeof agg.performance.erpCompletionRate).toBe('number');\n  });\n\n  it('includes frequent compulsion categories in symptoms.primaryCategories', async () => {\n    const agg = await enhancedAIDataAggregator.aggregateComprehensiveData(userId);\n    expect(agg.symptoms.primaryCategories).toEqual(expect.arrayContaining(['contamination', 'checking']));\n  });\n});\n\n\n"],"mappings":"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","ignoreList":[]}