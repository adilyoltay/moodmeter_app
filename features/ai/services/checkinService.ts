import { FEATURE_FLAGS } from '@/constants/featureFlags';
import { AIEventType, trackAIInteraction } from '@/features/ai/telemetry/aiTelemetry';

export type NLUResult = {
  mood: number; // 0..100
  trigger: string; // e.g., 'temizlik' | 'kontrol' | 'sosyal' | 'ev' | 'i≈ü' | 'genel'
  confidence: number; // 0..1
  lang: 'tr' | 'en';
};

export type RouteDecision = 'ERP' | 'REFRAME';

export type UnifiedAnalysisResult = {
  type: 'MOOD' | 'CBT' | 'OCD' | 'ERP' | 'BREATHWORK';
  confidence: number;
  mood?: number;
  trigger?: string;
  category?: string;
  suggestion?: string;
  originalText: string;
};

const TRIGGERS_TR: Record<string, string> = {
  temizlik: 'temizlik',
  kir: 'temizlik',
  mikrop: 'temizlik',
  kontrol: 'kontrol',
  kapƒ±: 'kontrol',
  ocak: 'kontrol',
  sosyal: 'sosyal',
  insan: 'sosyal',
  misafir: 'sosyal',
  ev: 'ev',
  i≈ü: 'i≈ü',
};

const TRIGGERS_EN: Record<string, string> = {
  clean: 'temizlik',
  dirt: 'temizlik',
  germ: 'temizlik',
  check: 'kontrol',
  door: 'kontrol',
  stove: 'kontrol',
  social: 'sosyal',
  people: 'sosyal',
  guest: 'sosyal',
  home: 'ev',
  work: 'i≈ü',
};

function detectLanguage(text: string): 'tr' | 'en' {
  const trHits = ['ƒü', '≈ü', 'ƒ±', '√ß', '√∂', '√º', ' de ', ' mi ', ' √ßok '].filter(k => text.toLowerCase().includes(k)).length;
  const enHits = [' the ', ' and ', ' i ', ' you ', ' not '].filter(k => text.toLowerCase().includes(k)).length;
  return trHits >= enHits ? 'tr' : 'en';
}

export function simpleNLU(text: string): NLUResult {
  const lang = detectLanguage(text);
  const dict = lang === 'tr' ? TRIGGERS_TR : TRIGGERS_EN;
  const lower = text.toLowerCase();
  let trigger = 'genel';
  let triggerHits = 0;
  Object.keys(dict).forEach(key => {
    if (lower.includes(key)) {
      trigger = dict[key];
      triggerHits += 1;
    }
  });
  // Rough mood heuristic based on valence words
  // Kelime haznesi geni≈ületildi (TR/EN karƒ±≈üƒ±k, d√º≈ü√ºk etkili baƒüla√ßlar hari√ß)
  const negWords = ['korku','kaygƒ±','anksiyete','endi≈üe','gergin','zor','k√∂t√º','berbat','panik','bunalmƒ±≈ü','yorgun','√ºzg√ºn','mutsuz','boƒüucu','anxious','anxiety','panic','worse','bad','tired','sad','overwhelmed'];
  const posWords = ['iyi','rahat','sakin','ba≈üardƒ±m','ferah','umutlu','mutlu','huzurlu','g√º√ßl√º','denge','toparladƒ±m','iyi hissediyorum','good','calm','ok','better','fine','relaxed','hopeful','grateful','proud'];
  const neg = negWords.filter(w => lower.includes(w)).length;
  const pos = posWords.filter(w => lower.includes(w)).length;
  let mood = Math.max(0, Math.min(100, 60 + (pos - neg) * 12));
  const confidence = Math.max(0.3, Math.min(1, 0.4 + triggerHits * 0.2));
  return { mood, trigger, confidence, lang };
}

export function decideRoute(nlu: NLUResult): RouteDecision {
  // Basit karar: d√º≈ü√ºk mood veya trigger temasƒ± belirgin ‚Üí ERP, aksi ‚Üí Reframe
  if (nlu.mood <= 50 || ['temizlik','kontrol'].includes(nlu.trigger)) return 'ERP';
  return 'REFRAME';
}

export async function trackCheckinLifecycle(phase: 'start'|'complete'|'stt_failed', meta: Record<string, any>) {
  if (phase === 'start') {
    await trackAIInteraction(AIEventType.CHECKIN_STARTED, meta);
  } else if (phase === 'complete') {
    await trackAIInteraction(AIEventType.CHECKIN_COMPLETED, meta);
  } else if (phase === 'stt_failed') {
    await trackAIInteraction(AIEventType.STT_FAILED, meta);
  }
}

export async function trackRouteSuggested(route: RouteDecision, meta: Record<string, any>) {
  await trackAIInteraction(AIEventType.ROUTE_SUGGESTED, { route, ...meta });
}

export const LLM_ROUTER_ENABLED = () => FEATURE_FLAGS.isEnabled('LLM_ROUTER');

/**
 * Merkezi Ses Analizi - Gemini API ile otomatik tip tespiti
 * Ses giri≈üini analiz edip MOOD, CBT, OCD, ERP veya BREATHWORK'e y√∂nlendirir
 */
export async function unifiedVoiceAnalysis(text: string): Promise<UnifiedAnalysisResult> {
  try {
    // √ñnce basit heuristik analiz
    const heuristicResult = heuristicVoiceAnalysis(text);
    
    // Gemini API varsa kullan
    // React Native'de process.env runtime'da √ßalƒ±≈ümaz, Constants kullan
    const Constants = require('expo-constants').default;
    const geminiApiKey = Constants.expoConfig?.extra?.EXPO_PUBLIC_GEMINI_API_KEY || 
                         Constants.manifest?.extra?.EXPO_PUBLIC_GEMINI_API_KEY ||
                         process.env.EXPO_PUBLIC_GEMINI_API_KEY;
    
    console.log('ü§ñ Gemini API check:', {
      hasKey: !!geminiApiKey,
      keyLength: geminiApiKey?.length,
      featureEnabled: FEATURE_FLAGS.isEnabled('AI_UNIFIED_VOICE'),
      text: text.substring(0, 50) + '...'
    });
    
    if (geminiApiKey && FEATURE_FLAGS.isEnabled('AI_UNIFIED_VOICE')) {
      try {
        console.log('üöÄ Calling Gemini API for voice analysis...');
        const geminiResult = await analyzeWithGemini(text, geminiApiKey);
        if (geminiResult) {
          console.log('‚úÖ Gemini analysis successful:', geminiResult);
          return geminiResult;
        } else {
          console.log('‚ö†Ô∏è Gemini returned null, falling back to heuristic');
        }
      } catch (error) {
        console.log('‚ùå Gemini API error, using heuristic analysis:', error);
      }
    } else {
      console.log('‚ö†Ô∏è Gemini API not available or feature disabled, using heuristic');
    }
    
    console.log('üìä Using heuristic result:', heuristicResult);
    return heuristicResult;
  } catch (error) {
    console.error('Unified voice analysis error:', error);
    // Fallback: basit mood analizi
    return {
      type: 'MOOD',
      confidence: 0.3,
      mood: 50,
      originalText: text
    };
  }
}

/**
 * Heuristik tabanlƒ± ses analizi (Gemini olmadƒ±ƒüƒ±nda fallback)
 */
function heuristicVoiceAnalysis(text: string): UnifiedAnalysisResult {
  const lower = text.toLowerCase();
  
  // CBT tetikleme: bili≈üsel √ßarpƒ±tma kalƒ±plarƒ± (Geni≈ületilmi≈ü)
  const cbtPatterns = [
    // Felaketle≈ütirme
    /ya\s+(.*?)olursa/i,
    /kesin\s+(.*?)olacak/i,
    /felaket/i,
    /mahvol/i,
    /berbat/i,
    /korkun√ß/i,
    /d√ºnyanƒ±n\s+sonu/i,
    /hayatƒ±m\s+bitti/i,
    /her\s+≈üey\s+mahvoldu/i,
    
    // A≈üƒ±rƒ± genelleme
    /asla\s+(.*?)yapamam/i,
    /asla\s+(.*?)olmaz/i,
    /her\s+zaman/i,
    /hi√ßbir\s+zaman/i,
    /hep\s+(.*?)oluyor/i,
    /s√ºrekli\s+ba≈üƒ±ma\s+geliyor/i,
    /daima/i,
    
    // Zihin okuma
    /herkes\s+(.*?)d√º≈ü√ºn√ºyor/i,
    /benden\s+nefret\s+ediyor/i,
    /beni\s+sevmiyor/i,
    /arkamdan\s+konu≈üuyor/i,
    /benimle\s+dalga\s+ge√ßiyor/i,
    /beni\s+aptal\s+sanƒ±yor/i,
    
    // Etiketleme
    /ben\s+bir\s+ba≈üarƒ±sƒ±zƒ±m/i,
    /ben\s+aptalƒ±m/i,
    /ben\s+deƒüersizim/i,
    /ben\s+beceriksizim/i,
    /hi√ßbir\s+i≈üe\s+yaramƒ±yorum/i,
    
    // Meli-malƒ± d√º≈ü√ºnceler
    /yapmalƒ±yƒ±m/i,
    /etmeliyim/i,
    /zorundayƒ±m/i,
    /mecburum/i,
    /≈üart/i,
    /olmak\s+zorunda/i,
    
    // Ki≈üiselle≈ütirme
    /benim\s+y√ºz√ºmden/i,
    /benim\s+su√ßum/i,
    /ben\s+sebep\s+oldum/i,
    /hep\s+ben/i,
    
    // Filtreleme (olumsuz odaklanma)
    /hi√ß\s+iyi\s+bir\s+≈üey\s+olmuyor/i,
    /sadece\s+k√∂t√º\s+≈üeyler/i,
    /hep\s+olumsuz/i,
    /pozitif\s+hi√ßbir\s+≈üey\s+yok/i
  ];
  
  if (cbtPatterns.some(pattern => pattern.test(lower))) {
    return {
      type: 'CBT',
      confidence: 0.7,
      suggestion: 'D√º≈ü√ºncelerini yeniden √ßer√ßevelemek ister misin?',
      originalText: text
    };
  }
  
  // OCD tetikleme: kompulsiyon ve obsesyon kalƒ±plarƒ± (Kapsamlƒ±)
  const ocdPatterns = [
    // Kontrol kompulsiyonlarƒ±
    /kontrol\s+et/i,
    /tekrar\s+kontrol/i,
    /emin\s+olamƒ±yorum/i,
    /kontrol.*etmeden.*duramƒ±yorum/i,
    /kapƒ±yƒ±.*kilitle/i,
    /ocaƒüƒ±.*kapat/i,
    /fi≈üi.*√ßek/i,
    /pencereyi.*kapat/i,
    /kilidi.*kontrol/i,
    /a√ßƒ±k.*bƒ±rak/i,
    /kapalƒ±.*mƒ±/i,
    /kontrol.*etmem.*lazƒ±m/i,
    /tekrar.*bak/i,
    /geri.*d√∂n.*kontrol/i,
    
    // Temizlik/bula≈ü obsesyonlarƒ±
    /temizle/i,
    /mikrop/i,
    /kirli/i,
    /bula≈ü/i,
    /yƒ±ka/i,
    /el.*yƒ±ka/i,
    /s√ºrekli.*yƒ±ka/i,
    /dezenfekte/i,
    /hijyen/i,
    /pis/i,
    /iƒüren√ß/i,
    /temiz.*deƒüil/i,
    /du≈ü.*al/i,
    /sabun/i,
    /deterjan/i,
    /alkol/i,
    /kolonya/i,
    /ellerimi.*yƒ±kama/i,
    /dokunma/i,
    /dokunursam/i,
    /temas/i,
    
    // Sayma ve sƒ±ralama
    /sayƒ±.*say/i,
    /say.*say/i,
    /√º√ß.*kere/i,
    /be≈ü.*kere/i,
    /yedi.*kere/i,
    /√ßift.*sayƒ±/i,
    /tek.*sayƒ±/i,
    /sƒ±rayla/i,
    /sƒ±ralama/i,
    
    // Simetri ve d√ºzen
    /simetri/i,
    /d√ºzen/i,
    /yerle≈ütir/i,
    /d√ºzg√ºn.*deƒüil/i,
    /yamuk/i,
    /eƒüri/i,
    /d√ºzelt/i,
    /hizala/i,
    /tam.*ortada/i,
    /e≈üit.*mesafe/i,
    /paralel/i,
    
    // Genel obsesyon/kompulsiyon
    /takƒ±ntƒ±/i,
    /obsesyon/i,
    /kompulsiyon/i,
    /duramƒ±yorum/i,
    /yapma.*duramƒ±yorum/i,
    /zorunda.*hissediyorum/i,
    /mecbur.*hissediyorum/i,
    /kafama.*takƒ±l/i,
    /aklƒ±mdan.*√ßƒ±kmƒ±yor/i,
    /s√ºrekli.*d√º≈ü√ºn√ºyorum/i,
    /beynimden.*atamƒ±yorum/i,
    /tekrar.*tekrar/i,
    
    // Zarar verme obsesyonlarƒ±
    /zarar.*ver/i,
    /incit/i,
    /k√∂t√º.*bir.*≈üey.*yap/i,
    /kontrol√ºm√º.*kaybet/i,
    /birini.*√∂ld√ºr/i,
    
    // Dini/ahlaki obsesyonlar
    /g√ºnah/i,
    /haram/i,
    /k√ºf√ºr/i,
    /lanet/i,
    /k√∂t√º.*d√º≈ü√ºnce/i,
    /ahlaksƒ±z/i,
    
    // Mental kompulsiyonlar
    /kafamda.*tekrarla/i,
    /zihnimde.*say/i,
    /dua.*et/i,
    /telkin/i,
    /kendime.*s√∂yle/i
  ];
  
  if (ocdPatterns.some(pattern => pattern.test(lower))) {
    // Geli≈ütirilmi≈ü kategori belirleme
    let category = 'other';
    let confidence = 0.8;
    
    // Temizlik/bula≈ü obsesyonlarƒ±
    if (/temiz|mikrop|yƒ±ka|el|kirli|bula≈ü|dezenfekte|hijyen|pis|sabun|deterjan|alkol|kolonya|dokunma|temas/i.test(lower)) {
      category = 'contamination';
      confidence = 0.9;
    }
    // Kontrol kompulsiyonlarƒ±
    else if (/kontrol|emin|kapat|kilitle|ocak|kapƒ±|fi≈ü|pencere|a√ßƒ±k.*bƒ±rak|kapalƒ±|geri.*d√∂n/i.test(lower)) {
      category = 'checking';
      confidence = 0.9;
    }
    // Simetri ve d√ºzen
    else if (/simetri|d√ºzen|yerle≈ütir|d√ºzg√ºn|yamuk|eƒüri|d√ºzelt|hizala|ortada|mesafe|paralel/i.test(lower)) {
      category = 'symmetry';
      confidence = 0.85;
    }
    // Sayma
    else if (/sayƒ±|say|kere|√ßift|tek|sƒ±ra/i.test(lower)) {
      category = 'counting';
      confidence = 0.85;
    }
    // Zarar verme
    else if (/zarar|incit|k√∂t√º.*≈üey|kontrol.*kaybet|√∂ld√ºr/i.test(lower)) {
      category = 'harm';
      confidence = 0.9;
    }
    // Dini/ahlaki
    else if (/g√ºnah|haram|k√ºf√ºr|lanet|ahlak/i.test(lower)) {
      category = 'religious';
      confidence = 0.85;
    }
    // Tekrarlama
    else if (/tekrar|yeniden|duramƒ±yorum|zorunda|mecbur/i.test(lower)) {
      category = 'repetition';
      confidence = 0.75;
    }
    
    return {
      type: 'OCD',
      confidence: confidence,
      category: category,
      suggestion: `${category === 'contamination' ? 'Temizlik takƒ±ntƒ±sƒ±' : 
                   category === 'checking' ? 'Kontrol obsesyonu' :
                   category === 'harm' ? 'Zarar verme obsesyonu' :
                   category === 'symmetry' ? 'D√ºzen obsesyonu' :
                   category === 'counting' ? 'Sayma kompulsiyonu' :
                   category === 'religious' ? 'Dini obsesyon' :
                   'OKB belirtisi'} kaydediliyor...`,
      originalText: text
    };
  }
  
  // ERP tetikleme: maruz kalma ve diren√ß
  const erpPatterns = [
    /maruz\s+kal/i,
    /diren√ß\s+g√∂ster/i,
    /erp\s+yap/i,
    /egzersiz/i,
    /pratik/i,
    /alƒ±≈ütƒ±rma/i,
    /y√ºzle≈ü/i
  ];
  
  if (erpPatterns.some(pattern => pattern.test(lower))) {
    return {
      type: 'ERP',
      confidence: 0.7,
      originalText: text
    };
  }
  
  // BREATHWORK tetikleme: nefes ve rahatlama
  const breathPatterns = [
    /nefes/i,
    /rahatla/i,
    /sakinle≈ü/i,
    /meditasyon/i,
    /mindfulness/i,
    /farkƒ±ndalƒ±k/i,
    /derin\s+nefes/i
  ];
  
  if (breathPatterns.some(pattern => pattern.test(lower))) {
    return {
      type: 'BREATHWORK',
      confidence: 0.7,
      originalText: text
    };
  }
  
  // Geli≈ütirilmi≈ü MOOD analizi
  const moodPatterns = {
    // Pozitif mood g√∂stergeleri
    positive: [
      /mutlu/i, /iyi.*hissediyorum/i, /harika/i, /m√ºkemmel/i, /s√ºper/i,
      /rahat/i, /huzurlu/i, /sakin/i, /dinlenmi≈ü/i, /enerjik/i,
      /umutlu/i, /iyimser/i, /pozitif/i, /ba≈üarƒ±lƒ±/i, /gururlu/i,
      /keyifli/i, /ne≈üeli/i, /co≈ükulu/i, /heyecanlƒ±/i, /motive/i,
      /g√º√ßl√º/i, /kendime.*g√ºveniyorum/i, /kontrolde/i, /dengeli/i,
      /≈ü√ºk√ºr/i, /minnettarƒ±m/i, /te≈üekk√ºr/i, /g√ºzel.*g√ºn/i
    ],
    // Negatif mood g√∂stergeleri  
    negative: [
      /√ºzg√ºn/i, /mutsuz/i, /k√∂t√º.*hissediyorum/i, /berbat/i, /rezalet/i,
      /endi≈üeli/i, /kaygƒ±lƒ±/i, /gergin/i, /stresli/i, /bunalmƒ±≈ü/i,
      /yorgun/i, /bitkin/i, /t√ºkenmi≈ü/i, /enerjim.*yok/i, /g√º√ßs√ºz/i,
      /umutsuz/i, /karamsarƒ±m/i, /negatif/i, /ba≈üarƒ±sƒ±z/i, /deƒüersiz/i,
      /sinirli/i, /√∂fkeli/i, /kƒ±zgƒ±n/i, /frustre/i, /hayal.*kƒ±rƒ±klƒ±ƒüƒ±/i,
      /yalnƒ±z/i, /izole/i, /anla≈üƒ±lmamƒ±≈ü/i, /reddedilmi≈ü/i,
      /bo≈üluk/i, /anlamsƒ±z/i, /kayƒ±p/i, /√ßaresiz/i, /aciz/i
    ],
    // N√∂tr/karƒ±≈üƒ±k mood
    neutral: [
      /fena.*deƒüil/i, /idare.*eder/i, /normal/i, /ortalama/i,
      /ne.*iyi.*ne.*k√∂t√º/i, /karƒ±≈üƒ±k/i, /emin.*deƒüilim/i,
      /bilmiyorum/i, /fark.*etmez/i, /√∂yle.*b√∂yle/i
    ]
  };
  
  // Mood skoru hesaplama
  const positiveCount = moodPatterns.positive.filter(p => p.test(lower)).length;
  const negativeCount = moodPatterns.negative.filter(p => p.test(lower)).length;
  const neutralCount = moodPatterns.neutral.filter(p => p.test(lower)).length;
  
  let mood = 50; // Ba≈ülangƒ±√ß deƒüeri
  let confidence = 0.5;
  let trigger = 'genel';
  
  if (positiveCount > 0 || negativeCount > 0 || neutralCount > 0) {
    // Mood hesaplama
    mood = Math.max(0, Math.min(100, 
      50 + (positiveCount * 15) - (negativeCount * 15) + (neutralCount * 0)
    ));
    
    // G√ºven skoru
    const totalPatterns = positiveCount + negativeCount + neutralCount;
    confidence = Math.min(0.95, 0.5 + (totalPatterns * 0.15));
  } else {
    // Basit NLU fallback
    const nlu = simpleNLU(text);
    mood = nlu.mood;
    trigger = nlu.trigger;
    confidence = nlu.confidence * 0.8;
  }
  
  // Mood seviyesine g√∂re √∂neri
  let suggestion = '';
  if (mood >= 70) {
    suggestion = 'Harika hissediyorsun! Bu pozitif enerjiyi korumaya devam et üåü';
  } else if (mood >= 50) {
    suggestion = 'Dengeli g√∂r√ºn√ºyorsun. G√ºn√ºn nasƒ±l ge√ßiyor?';
  } else if (mood >= 30) {
    suggestion = 'Biraz zorlu bir g√ºn gibi. Nefes egzersizi yapmak ister misin?';
  } else {
    suggestion = 'Seni anlƒ±yorum. Birlikte bu duygularƒ± ke≈üfedelim mi?';
  }
  
  return {
    type: 'MOOD',
    confidence: confidence,
    mood: mood,
    trigger: trigger,
    suggestion: suggestion,
    originalText: text
  };
}

/**
 * Gemini API ile geli≈ümi≈ü analiz
 */
async function analyzeWithGemini(text: string, apiKey: string): Promise<UnifiedAnalysisResult | null> {
  try {
    const prompt = `
Sen bir OKB (Obsesif Kompulsif Bozukluk) tedavi asistanƒ±sƒ±n. Kullanƒ±cƒ±nƒ±n ses kaydƒ±ndan gelen metni analiz edip hangi tedavi mod√ºl√ºne y√∂nlendirilmesi gerektiƒüini belirle.

Kullanƒ±cƒ± metni: "${text}"

L√ºtfen a≈üaƒüƒ±daki kategorilerden Bƒ∞Rƒ∞Nƒ∞ se√ß ve JSON formatƒ±nda yanƒ±tla:

1. MOOD - Genel duygu durumu payla≈üƒ±mƒ± (g√ºnl√ºk his, enerji seviyesi)
2. CBT - Bili≈üsel √ßarpƒ±tmalar i√ßeren d√º≈ü√ºnceler (felaketle≈ütirme, a≈üƒ±rƒ± genelleme, zihin okuma vb.)
3. OCD - Obsesyon veya kompulsiyon bildirimi (takƒ±ntƒ±lƒ± d√º≈ü√ºnceler, kontrol etme, temizleme)
4. ERP - Maruz kalma ve tepki √∂nleme egzersizi talebi veya diren√ß g√∂sterme
5. BREATHWORK - Rahatlama, nefes egzersizi veya meditasyon ihtiyacƒ±

Yanƒ±t formatƒ±:
{
  "type": "MOOD|CBT|OCD|ERP|BREATHWORK",
  "confidence": 0.0-1.0,
  "mood": 0-100 (sadece MOOD i√ßin),
  "category": "string (OCD i√ßin: temizlik/kontrol/simetri/sayma/diƒüer)",
  "suggestion": "Kullanƒ±cƒ±ya √∂nerilecek kƒ±sa mesaj (T√ºrk√ße)"
}

Sadece JSON d√∂nd√ºr, ba≈üka a√ßƒ±klama ekleme.`;

    console.log('üì° Gemini API Request URL:', `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey.substring(0, 10)}...`);
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.3,
          maxOutputTokens: 200,
        }
      })
    });

    console.log('üì° Gemini API Response Status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Gemini API error:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText
      });
      return null;
    }

    const data = await response.json();
    console.log('üì° Gemini API Raw Response:', JSON.stringify(data).substring(0, 200) + '...');
    
    const resultText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!resultText) {
      console.error('Gemini API bo≈ü yanƒ±t d√∂nd√º');
      return null;
    }

    // JSON'u parse et
    try {
      const parsed = JSON.parse(resultText.replace(/```json\n?/g, '').replace(/```\n?/g, ''));
      return {
        ...parsed,
        originalText: text
      };
    } catch (parseError) {
      console.error('Gemini yanƒ±tƒ± parse edilemedi:', resultText);
      return null;
    }
  } catch (error) {
    console.error('Gemini API √ßaƒürƒ±sƒ± ba≈üarƒ±sƒ±z:', error);
    return null;
  }
}


